69: #define BYTECODE_CHUNK  0      /* MUTANT (rep_const) *//* code allocation increment */
69: #define BYTECODE_CHUNK  1      /* MUTANT (rep_const) *//* code allocation increment */
69: #define BYTECODE_CHUNK  -1      /* MUTANT (rep_const) *//* code allocation increment */
69: #define BYTECODE_CHUNK  ((256)+1)      /* MUTANT (rep_const) *//* code allocation increment */
69: #define BYTECODE_CHUNK  ((256)-1)      /* MUTANT (rep_const) *//* code allocation increment */
70: #define SRCNOTE_CHUNK   0       /* MUTANT (rep_const) *//* initial srcnote allocation increment */
70: #define SRCNOTE_CHUNK   1       /* MUTANT (rep_const) *//* initial srcnote allocation increment */
70: #define SRCNOTE_CHUNK   -1       /* MUTANT (rep_const) *//* initial srcnote allocation increment */
70: #define SRCNOTE_CHUNK   ((64)+1)       /* MUTANT (rep_const) *//* initial srcnote allocation increment */
70: #define SRCNOTE_CHUNK   ((64)-1)       /* MUTANT (rep_const) *//* initial srcnote allocation increment */
71: #define TRYNOTE_CHUNK   0       /* MUTANT (rep_const) *//* trynote allocation increment */
71: #define TRYNOTE_CHUNK   1       /* MUTANT (rep_const) *//* trynote allocation increment */
71: #define TRYNOTE_CHUNK   -1       /* MUTANT (rep_const) *//* trynote allocation increment */
71: #define TRYNOTE_CHUNK   ((64)+1)       /* MUTANT (rep_const) *//* trynote allocation increment */
71: #define TRYNOTE_CHUNK   ((64)-1)       /* MUTANT (rep_const) *//* trynote allocation increment */
84: /* MUTANT (del_stmt) */ /*     memset(cg, 0, sizeof *cg); */ 
84: /* MUTANT (rep_const) */    memset(cg, 1, sizeof *cg);
84: /* MUTANT (rep_const) */    memset(cg, -1, sizeof *cg);
85: /* MUTANT (del_stmt) */ /*     TREE_CONTEXT_INIT(&cg->treeContext); */ 
86: /* MUTANT (del_stmt) */ /*     cg->treeContext.flags |= TCF_COMPILING; */ 
87: /* MUTANT (del_stmt) */ /*     cg->codePool = codePool; */ 
88: /* MUTANT (del_stmt) */ /*     cg->notePool = notePool; */ 
89: /* MUTANT (del_stmt) */ /*     cg->codeMark = JS_ARENA_MARK(codePool); */ 
90: /* MUTANT (del_stmt) */ /*     cg->noteMark = JS_ARENA_MARK(notePool); */ 
91: /* MUTANT (del_stmt) */ /*     cg->tempMark = JS_ARENA_MARK(&cx->tempPool); */ 
92: /* MUTANT (del_stmt) */ /*     cg->current = &cg->main; */ 
93: /* MUTANT (del_stmt) */ /*     cg->filename = filename; */ 
94: /* MUTANT (del_stmt) */ /*     cg->firstLine = cg->prolog.currentLine = cg->main.currentLine = lineno; */ 
95: /* MUTANT (del_stmt) */ /*     cg->principals = principals; */ 
96: /* MUTANT (del_stmt) */ /*     ATOM_LIST_INIT(&cg->atomList); */ 
97: /* MUTANT (del_stmt) */ /*     cg->prolog.noteMask = cg->main.noteMask = SRCNOTE_CHUNK - 1; */ 
97: /* MUTANT (rep_const) */    cg->prolog.noteMask = cg->main.noteMask = SRCNOTE_CHUNK - 0;
97: /* MUTANT (rep_const) */    cg->prolog.noteMask = cg->main.noteMask = SRCNOTE_CHUNK - -1;
97: /* MUTANT (rep_const) */    cg->prolog.noteMask = cg->main.noteMask = SRCNOTE_CHUNK - ((1)+1);
98: /* MUTANT (del_stmt) */ /*     ATOM_LIST_INIT(&cg->constList); */ 
99: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
105: /* MUTANT (del_stmt) */ /*     TREE_CONTEXT_FINISH(&cg->treeContext); */ 
106: /* MUTANT (del_stmt) */ /*     JS_ARENA_RELEASE(cg->codePool, cg->codeMark); */ 
107: /* MUTANT (del_stmt) */ /*     JS_ARENA_RELEASE(cg->notePool, cg->noteMark); */ 
108: /* MUTANT (del_stmt) */ /*     JS_ARENA_RELEASE(&cx->tempPool, cg->tempMark); */ 
114: /* MUTANT (del_stmt) */ /*     jsbytecode *base, *limit, *next; */ 
115: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset, length; */ 
116: /* MUTANT (del_stmt) */ /*     size_t incr, size; */ 
118: /* MUTANT (del_stmt) */ /*     base = CG_BASE(cg); */ 
119: /* MUTANT (del_stmt) */ /*     next = CG_NEXT(cg); */ 
120: /* MUTANT (del_stmt) */ /*     limit = CG_LIMIT(cg); */ 
121: /* MUTANT (del_stmt) */ /*     offset = PTRDIFF(next, base, jsbytecode); */ 
122: /* MUTANT (rep_op) */    if (next - delta > limit) {
122: /* MUTANT (rep_op) */    if (next * delta > limit) {
122: /* MUTANT (rep_op) */    if (next % delta > limit) {
122: /* MUTANT (rep_op) */    if (next + delta <= limit) {
122: /* MUTANT (rep_op) */    if (next + delta < limit) {
122: /* MUTANT (rep_op) */    if (next + delta >= limit) {
122: /* MUTANT (rep_op) */    if (next + delta == limit) {
122: /* MUTANT (rep_op) */    if (next + delta != limit) {
122: /* MUTANT (negate) */    if(! (next + delta > limit)) {
123: /* MUTANT (del_stmt) */ /*         length = offset + delta; */ 
123: /* MUTANT (rep_op) */        length = offset - delta;
123: /* MUTANT (rep_op) */        length = offset * delta;
123: /* MUTANT (rep_op) */        length = offset % delta;
124: /* MUTANT (rep_op) */        length = (length < BYTECODE_CHUNK)
124: /* MUTANT (rep_op) */        length = (length > BYTECODE_CHUNK)
124: /* MUTANT (rep_op) */        length = (length >= BYTECODE_CHUNK)
124: /* MUTANT (rep_op) */        length = (length == BYTECODE_CHUNK)
124: /* MUTANT (rep_op) */        length = (length != BYTECODE_CHUNK)
127: /* MUTANT (del_stmt) */ /*         incr = BYTECODE_SIZE(length); */ 
128: /* MUTANT (negate) */        if(! (!base)) {
129: /* MUTANT (del_stmt) */ /*             JS_ARENA_ALLOCATE_CAST(base, jsbytecode *, cg->codePool, incr); */ 
131: /* MUTANT (del_stmt) */ /*             size = BYTECODE_SIZE(PTRDIFF(limit, base, jsbytecode)); */ 
132: /* MUTANT (del_stmt) */ /*             incr -= size; */ 
132: /* MUTANT (rep_op) */            incr += size;
132: /* MUTANT (rep_op) */            incr *= size;
132: /* MUTANT (rep_op) */            incr %= size;
133: /* MUTANT (del_stmt) */ /*             JS_ARENA_GROW_CAST(base, jsbytecode *, cg->codePool, size, incr); */ 
135: /* MUTANT (negate) */        if(! (!base)) {
136: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
137: /* MUTANT (del_stmt) */ /*             return -1; */ 
137: /* MUTANT (rep_const) */            return 0;
137: /* MUTANT (rep_const) */            return 1;
137: /* MUTANT (rep_const) */            return ((-1)+1);
137: /* MUTANT (rep_const) */            return ((-1)-1);
140: /* MUTANT (del_stmt) */ /*         CG_LIMIT(cg) = base + length; */ 
140: /* MUTANT (rep_op) */        CG_LIMIT(cg) = base - length;
140: /* MUTANT (rep_op) */        CG_LIMIT(cg) = base * length;
140: /* MUTANT (rep_op) */        CG_LIMIT(cg) = base % length;
141: /* MUTANT (del_stmt) */ /*         CG_NEXT(cg) = base + offset; */ 
141: /* MUTANT (rep_op) */        CG_NEXT(cg) = base - offset;
141: /* MUTANT (rep_op) */        CG_NEXT(cg) = base * offset;
141: /* MUTANT (rep_op) */        CG_NEXT(cg) = base % offset;
149: /* MUTANT (del_stmt) */ /*     jsbytecode *pc; */ 
150: /* MUTANT (del_stmt) */ /*     const JSCodeSpec *cs; */ 
151: /* MUTANT (del_stmt) */ /*     intN nuses; */ 
153: /* MUTANT (del_stmt) */ /*     pc = CG_CODE(cg, target); */ 
154: /* MUTANT (del_stmt) */ /*     cs = &js_CodeSpec[pc[0]]; */ 
154: /* MUTANT (rep_const) */    cs = &js_CodeSpec[pc[1]];
154: /* MUTANT (rep_const) */    cs = &js_CodeSpec[pc[-1]];
155: /* MUTANT (del_stmt) */ /*     nuses = cs->nuses; */ 
156: /* MUTANT (rep_op) */    if (nuses <= 0)
156: /* MUTANT (rep_op) */    if (nuses > 0)
156: /* MUTANT (rep_op) */    if (nuses >= 0)
156: /* MUTANT (rep_op) */    if (nuses == 0)
156: /* MUTANT (rep_op) */    if (nuses != 0)
156: /* MUTANT (rep_const) */    if (nuses < 1)
156: /* MUTANT (rep_const) */    if (nuses < -1)
156: /* MUTANT (negate) */    if(! (nuses < 0))
157: /* MUTANT (rep_op) */        nuses = 2 - GET_ARGC(pc);       /* stack: fun, this, [argc arguments] */
157: /* MUTANT (rep_op) */        nuses = 2 * GET_ARGC(pc);       /* stack: fun, this, [argc arguments] */
157: /* MUTANT (rep_op) */        nuses = 2 % GET_ARGC(pc);       /* stack: fun, this, [argc arguments] */
157: /* MUTANT (rep_const) */        nuses = 0 + GET_ARGC(pc);       /* stack: fun, this, [argc arguments] */
157: /* MUTANT (rep_const) */        nuses = 1 + GET_ARGC(pc);       /* stack: fun, this, [argc arguments] */
157: /* MUTANT (rep_const) */        nuses = -1 + GET_ARGC(pc);       /* stack: fun, this, [argc arguments] */
157: /* MUTANT (rep_const) */        nuses = ((2)+1) + GET_ARGC(pc);       /* stack: fun, this, [argc arguments] */
157: /* MUTANT (rep_const) */        nuses = ((2)-1) + GET_ARGC(pc);       /* stack: fun, this, [argc arguments] */
158: /* MUTANT (del_stmt) */ /*     cg->stackDepth -= nuses; */ 
158: /* MUTANT (rep_op) */    cg->stackDepth += nuses;
158: /* MUTANT (rep_op) */    cg->stackDepth *= nuses;
158: /* MUTANT (rep_op) */    cg->stackDepth %= nuses;
159: /* MUTANT (del_stmt) */ /*     JS_ASSERT(cg->stackDepth >= 0); */ 
159: /* MUTANT (rep_op) */    JS_ASSERT(cg->stackDepth <= 0);
159: /* MUTANT (rep_op) */    JS_ASSERT(cg->stackDepth < 0);
159: /* MUTANT (rep_op) */    JS_ASSERT(cg->stackDepth > 0);
159: /* MUTANT (rep_op) */    JS_ASSERT(cg->stackDepth == 0);
159: /* MUTANT (rep_op) */    JS_ASSERT(cg->stackDepth != 0);
159: /* MUTANT (rep_const) */    JS_ASSERT(cg->stackDepth >= 1);
159: /* MUTANT (rep_const) */    JS_ASSERT(cg->stackDepth >= -1);
160: /* MUTANT (rep_op) */    if (cg->stackDepth <= 0) {
160: /* MUTANT (rep_op) */    if (cg->stackDepth > 0) {
160: /* MUTANT (rep_op) */    if (cg->stackDepth >= 0) {
160: /* MUTANT (rep_op) */    if (cg->stackDepth == 0) {
160: /* MUTANT (rep_op) */    if (cg->stackDepth != 0) {
160: /* MUTANT (rep_const) */    if (cg->stackDepth < 1) {
160: /* MUTANT (rep_const) */    if (cg->stackDepth < -1) {
160: /* MUTANT (negate) */    if(! (cg->stackDepth < 0)) {
161: /* MUTANT (del_stmt) */ /*         char numBuf[12]; */ 
161: /* MUTANT (rep_const) */        char numBuf[0];
161: /* MUTANT (rep_const) */        char numBuf[1];
161: /* MUTANT (rep_const) */        char numBuf[-1];
161: /* MUTANT (rep_const) */        char numBuf[((12)+1)];
161: /* MUTANT (rep_const) */        char numBuf[((12)-1)];
162: /* MUTANT (del_stmt) */ /*         JS_snprintf(numBuf, sizeof numBuf, "%d", target); */ 
169: /* MUTANT (rep_op) */    cg->stackDepth -= cs->ndefs;
169: /* MUTANT (rep_op) */    cg->stackDepth *= cs->ndefs;
169: /* MUTANT (rep_op) */    cg->stackDepth %= cs->ndefs;
170: /* MUTANT (rep_op) */    if ((uintN)cg->stackDepth <= cg->maxStackDepth)
170: /* MUTANT (rep_op) */    if ((uintN)cg->stackDepth < cg->maxStackDepth)
170: /* MUTANT (rep_op) */    if ((uintN)cg->stackDepth >= cg->maxStackDepth)
170: /* MUTANT (rep_op) */    if ((uintN)cg->stackDepth == cg->maxStackDepth)
170: /* MUTANT (rep_op) */    if ((uintN)cg->stackDepth != cg->maxStackDepth)
170: /* MUTANT (negate) */    if(! ((uintN)cg->stackDepth > cg->maxStackDepth))
177: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset = EmitCheck(cx, cg, op, 1); */ 
177: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, 0);
177: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, -1);
177: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, ((1)+1));
177: /* MUTANT (negate) */    ptrdif(!f_t offset = EmitCheck(cx, cg, op, 1));
179: /* MUTANT (rep_op) */    if (offset <= 0) {
179: /* MUTANT (rep_op) */    if (offset < 0) {
179: /* MUTANT (rep_op) */    if (offset > 0) {
179: /* MUTANT (rep_op) */    if (offset == 0) {
179: /* MUTANT (rep_op) */    if (offset != 0) {
179: /* MUTANT (rep_const) */    if (offset >= 1) {
179: /* MUTANT (rep_const) */    if (offset >= -1) {
179: /* MUTANT (negate) */    if(! (offset >= 0)) {
180: /* MUTANT (del_stmt) */ /*         *CG_NEXT(cg)++ = (jsbytecode)op; */ 
180: /* MUTANT (rep_op) */        *CG_NEXT(cg)-- = (jsbytecode)op;
181: /* MUTANT (del_stmt) */ /*         UpdateDepth(cx, cg, offset); */ 
189: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset = EmitCheck(cx, cg, op, 2); */ 
189: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, 0);
189: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, 1);
189: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, -1);
189: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, ((2)+1));
189: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, ((2)-1));
189: /* MUTANT (negate) */    ptrdif(!f_t offset = EmitCheck(cx, cg, op, 2));
191: /* MUTANT (rep_op) */    if (offset <= 0) {
191: /* MUTANT (rep_op) */    if (offset < 0) {
191: /* MUTANT (rep_op) */    if (offset > 0) {
191: /* MUTANT (rep_op) */    if (offset == 0) {
191: /* MUTANT (rep_op) */    if (offset != 0) {
191: /* MUTANT (rep_const) */    if (offset >= 1) {
191: /* MUTANT (rep_const) */    if (offset >= -1) {
191: /* MUTANT (negate) */    if(! (offset >= 0)) {
192: /* MUTANT (del_stmt) */ /*         jsbytecode *next = CG_NEXT(cg); */ 
193: /* MUTANT (del_stmt) */ /*         next[0] = (jsbytecode)op; */ 
193: /* MUTANT (rep_const) */        next[1] = (jsbytecode)op;
193: /* MUTANT (rep_const) */        next[-1] = (jsbytecode)op;
194: /* MUTANT (del_stmt) */ /*         next[1] = op1; */ 
194: /* MUTANT (rep_const) */        next[0] = op1;
194: /* MUTANT (rep_const) */        next[-1] = op1;
194: /* MUTANT (rep_const) */        next[((1)+1)] = op1;
195: /* MUTANT (del_stmt) */ /*         CG_NEXT(cg) = next + 2; */ 
195: /* MUTANT (rep_op) */        CG_NEXT(cg) = next - 2;
195: /* MUTANT (rep_op) */        CG_NEXT(cg) = next * 2;
195: /* MUTANT (rep_op) */        CG_NEXT(cg) = next % 2;
195: /* MUTANT (rep_const) */        CG_NEXT(cg) = next + 0;
195: /* MUTANT (rep_const) */        CG_NEXT(cg) = next + 1;
195: /* MUTANT (rep_const) */        CG_NEXT(cg) = next + -1;
195: /* MUTANT (rep_const) */        CG_NEXT(cg) = next + ((2)+1);
195: /* MUTANT (rep_const) */        CG_NEXT(cg) = next + ((2)-1);
196: /* MUTANT (del_stmt) */ /*         UpdateDepth(cx, cg, offset); */ 
205: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset = EmitCheck(cx, cg, op, 3); */ 
205: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, 0);
205: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, 1);
205: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, -1);
205: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, ((3)+1));
205: /* MUTANT (rep_const) */    ptrdiff_t offset = EmitCheck(cx, cg, op, ((3)-1));
205: /* MUTANT (negate) */    ptrdif(!f_t offset = EmitCheck(cx, cg, op, 3));
207: /* MUTANT (rep_op) */    if (offset <= 0) {
207: /* MUTANT (rep_op) */    if (offset < 0) {
207: /* MUTANT (rep_op) */    if (offset > 0) {
207: /* MUTANT (rep_op) */    if (offset == 0) {
207: /* MUTANT (rep_op) */    if (offset != 0) {
207: /* MUTANT (rep_const) */    if (offset >= 1) {
207: /* MUTANT (rep_const) */    if (offset >= -1) {
207: /* MUTANT (negate) */    if(! (offset >= 0)) {
208: /* MUTANT (del_stmt) */ /*         jsbytecode *next = CG_NEXT(cg); */ 
209: /* MUTANT (del_stmt) */ /*         next[0] = (jsbytecode)op; */ 
209: /* MUTANT (rep_const) */        next[1] = (jsbytecode)op;
209: /* MUTANT (rep_const) */        next[-1] = (jsbytecode)op;
210: /* MUTANT (del_stmt) */ /*         next[1] = op1; */ 
210: /* MUTANT (rep_const) */        next[0] = op1;
210: /* MUTANT (rep_const) */        next[-1] = op1;
210: /* MUTANT (rep_const) */        next[((1)+1)] = op1;
211: /* MUTANT (del_stmt) */ /*         next[2] = op2; */ 
211: /* MUTANT (rep_const) */        next[0] = op2;
211: /* MUTANT (rep_const) */        next[1] = op2;
211: /* MUTANT (rep_const) */        next[-1] = op2;
211: /* MUTANT (rep_const) */        next[((2)+1)] = op2;
211: /* MUTANT (rep_const) */        next[((2)-1)] = op2;
212: /* MUTANT (del_stmt) */ /*         CG_NEXT(cg) = next + 3; */ 
212: /* MUTANT (rep_op) */        CG_NEXT(cg) = next - 3;
212: /* MUTANT (rep_op) */        CG_NEXT(cg) = next * 3;
212: /* MUTANT (rep_op) */        CG_NEXT(cg) = next % 3;
212: /* MUTANT (rep_const) */        CG_NEXT(cg) = next + 0;
212: /* MUTANT (rep_const) */        CG_NEXT(cg) = next + 1;
212: /* MUTANT (rep_const) */        CG_NEXT(cg) = next + -1;
212: /* MUTANT (rep_const) */        CG_NEXT(cg) = next + ((3)+1);
212: /* MUTANT (rep_const) */        CG_NEXT(cg) = next + ((3)-1);
213: /* MUTANT (del_stmt) */ /*         UpdateDepth(cx, cg, offset); */ 
221: /* MUTANT (del_stmt) */ /*     ptrdiff_t length = 1 + (ptrdiff_t)extra; */ 
221: /* MUTANT (rep_op) */    ptrdiff_t length = 1 - (ptrdiff_t)extra;
221: /* MUTANT (rep_op) */    ptrdiff_t length = 1 * (ptrdiff_t)extra;
221: /* MUTANT (rep_op) */    ptrdiff_t length = 1 % (ptrdiff_t)extra;
221: /* MUTANT (rep_const) */    ptrdiff_t length = 0 + (ptrdiff_t)extra;
221: /* MUTANT (rep_const) */    ptrdiff_t length = -1 + (ptrdiff_t)extra;
221: /* MUTANT (rep_const) */    ptrdiff_t length = ((1)+1) + (ptrdiff_t)extra;
221: /* MUTANT (negate) */    ptrdif(!f_t length = 1 + (ptrdiff_t))extra;
222: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset = EmitCheck(cx, cg, op, length); */ 
222: /* MUTANT (negate) */    ptrdif(!f_t offset = EmitCheck(cx, cg, op, length));
224: /* MUTANT (rep_op) */    if (offset <= 0) {
224: /* MUTANT (rep_op) */    if (offset < 0) {
224: /* MUTANT (rep_op) */    if (offset > 0) {
224: /* MUTANT (rep_op) */    if (offset == 0) {
224: /* MUTANT (rep_op) */    if (offset != 0) {
224: /* MUTANT (rep_const) */    if (offset >= 1) {
224: /* MUTANT (rep_const) */    if (offset >= -1) {
224: /* MUTANT (negate) */    if(! (offset >= 0)) {
225: /* MUTANT (del_stmt) */ /*         jsbytecode *next = CG_NEXT(cg); */ 
226: /* MUTANT (del_stmt) */ /*         *next = (jsbytecode)op; */ 
227: /* MUTANT (del_stmt) */ /*         memset(next + 1, 0, BYTECODE_SIZE(extra)); */ 
227: /* MUTANT (rep_op) */        memset(next - 1, 0, BYTECODE_SIZE(extra));
227: /* MUTANT (rep_op) */        memset(next * 1, 0, BYTECODE_SIZE(extra));
227: /* MUTANT (rep_op) */        memset(next % 1, 0, BYTECODE_SIZE(extra));
227: /* MUTANT (rep_const) */        memset(next + 0, 0, BYTECODE_SIZE(extra));
227: /* MUTANT (rep_const) */        memset(next + -1, 0, BYTECODE_SIZE(extra));
227: /* MUTANT (rep_const) */        memset(next + ((1)+1), 0, BYTECODE_SIZE(extra));
227: /* MUTANT (rep_const) */        memset(next + 1, 1, BYTECODE_SIZE(extra));
227: /* MUTANT (rep_const) */        memset(next + 1, -1, BYTECODE_SIZE(extra));
228: /* MUTANT (del_stmt) */ /*         CG_NEXT(cg) = next + length; */ 
228: /* MUTANT (rep_op) */        CG_NEXT(cg) = next - length;
228: /* MUTANT (rep_op) */        CG_NEXT(cg) = next * length;
228: /* MUTANT (rep_op) */        CG_NEXT(cg) = next % length;
229: /* MUTANT (del_stmt) */ /*         UpdateDepth(cx, cg, offset); */ 
236: /* MUTANT (del_stmt) */ /* const char js_script_str[]         = "script"; */ 
257: /* MUTANT (negate) */    if(! (!cg->treeContext.topStmt))
259: /* MUTANT (del_stmt) */ /*     return statementName[cg->treeContext.topStmt->type]; */ 
338: /* MUTANT (del_stmt) */ /*     JSJumpTarget *jt, *jt2, *root; */ 
339: /* MUTANT (del_stmt) */ /*     int dir, otherDir, heightChanged; */ 
340: /* MUTANT (del_stmt) */ /*     JSBool doubleRotate; */ 
342: /* MUTANT (del_stmt) */ /*     jt = *jtp; */ 
343: /* MUTANT (del_stmt) */ /*     JS_ASSERT(jt->balance != 0); */ 
343: /* MUTANT (rep_op) */    JS_ASSERT(jt->balance == 0);
343: /* MUTANT (rep_const) */    JS_ASSERT(jt->balance != 1);
343: /* MUTANT (rep_const) */    JS_ASSERT(jt->balance != -1);
345: /* MUTANT (rep_op) */    if (jt->balance <= -1) {
345: /* MUTANT (rep_op) */    if (jt->balance > -1) {
345: /* MUTANT (rep_op) */    if (jt->balance >= -1) {
345: /* MUTANT (rep_op) */    if (jt->balance == -1) {
345: /* MUTANT (rep_op) */    if (jt->balance != -1) {
345: /* MUTANT (rep_const) */    if (jt->balance < 0) {
345: /* MUTANT (rep_const) */    if (jt->balance < 1) {
345: /* MUTANT (rep_const) */    if (jt->balance < ((-1)+1)) {
345: /* MUTANT (rep_const) */    if (jt->balance < ((-1)-1)) {
345: /* MUTANT (negate) */    if(! (jt->balance < -1)) {
346: /* MUTANT (del_stmt) */ /*         dir = JT_RIGHT; */ 
347: /* MUTANT (del_stmt) */ /*         doubleRotate = (jt->kids[JT_LEFT]->balance > 0); */ 
347: /* MUTANT (rep_op) */        doubleRotate = (jt->kids[JT_LEFT]->balance <= 0);
347: /* MUTANT (rep_op) */        doubleRotate = (jt->kids[JT_LEFT]->balance < 0);
347: /* MUTANT (rep_op) */        doubleRotate = (jt->kids[JT_LEFT]->balance >= 0);
347: /* MUTANT (rep_op) */        doubleRotate = (jt->kids[JT_LEFT]->balance == 0);
347: /* MUTANT (rep_op) */        doubleRotate = (jt->kids[JT_LEFT]->balance != 0);
347: /* MUTANT (rep_const) */        doubleRotate = (jt->kids[JT_LEFT]->balance > 1);
347: /* MUTANT (rep_const) */        doubleRotate = (jt->kids[JT_LEFT]->balance > -1);
348: /* MUTANT (rep_op) */    } else if (jt->balance <= 1) {
348: /* MUTANT (rep_op) */    } else if (jt->balance < 1) {
348: /* MUTANT (rep_op) */    } else if (jt->balance >= 1) {
348: /* MUTANT (rep_op) */    } else if (jt->balance == 1) {
348: /* MUTANT (rep_op) */    } else if (jt->balance != 1) {
348: /* MUTANT (rep_const) */    } else if (jt->balance > 0) {
348: /* MUTANT (rep_const) */    } else if (jt->balance > -1) {
348: /* MUTANT (rep_const) */    } else if (jt->balance > ((1)+1)) {
348: /* MUTANT (negate) */    } else if(! (jt->balance > 1)) {
349: /* MUTANT (del_stmt) */ /*         dir = JT_LEFT; */ 
350: /* MUTANT (del_stmt) */ /*         doubleRotate = (jt->kids[JT_RIGHT]->balance < 0); */ 
350: /* MUTANT (rep_op) */        doubleRotate = (jt->kids[JT_RIGHT]->balance <= 0);
350: /* MUTANT (rep_op) */        doubleRotate = (jt->kids[JT_RIGHT]->balance > 0);
350: /* MUTANT (rep_op) */        doubleRotate = (jt->kids[JT_RIGHT]->balance >= 0);
350: /* MUTANT (rep_op) */        doubleRotate = (jt->kids[JT_RIGHT]->balance == 0);
350: /* MUTANT (rep_op) */        doubleRotate = (jt->kids[JT_RIGHT]->balance != 0);
350: /* MUTANT (rep_const) */        doubleRotate = (jt->kids[JT_RIGHT]->balance < 1);
350: /* MUTANT (rep_const) */        doubleRotate = (jt->kids[JT_RIGHT]->balance < -1);
352: /* MUTANT (del_stmt) */ /*         return 0; */ 
352: /* MUTANT (rep_const) */        return 1;
352: /* MUTANT (rep_const) */        return -1;
356: /* MUTANT (negate) */    if(! (doubleRotate)) {
357: /* MUTANT (del_stmt) */ /*         jt2 = jt->kids[otherDir]; */ 
358: /* MUTANT (del_stmt) */ /*         *jtp = root = jt2->kids[dir]; */ 
360: /* MUTANT (del_stmt) */ /*         jt->kids[otherDir] = root->kids[dir]; */ 
361: /* MUTANT (del_stmt) */ /*         root->kids[dir] = jt; */ 
363: /* MUTANT (del_stmt) */ /*         jt2->kids[dir] = root->kids[otherDir]; */ 
364: /* MUTANT (del_stmt) */ /*         root->kids[otherDir] = jt2; */ 
366: /* MUTANT (del_stmt) */ /*         heightChanged = 1; */ 
366: /* MUTANT (rep_const) */        heightChanged = 0;
366: /* MUTANT (rep_const) */        heightChanged = -1;
366: /* MUTANT (rep_const) */        heightChanged = ((1)+1);
367: /* MUTANT (del_stmt) */ /*         root->kids[JT_LEFT]->balance = -JS_MAX(root->balance, 0); */ 
367: /* MUTANT (rep_const) */        root->kids[JT_LEFT]->balance = -JS_MAX(root->balance, 1);
367: /* MUTANT (rep_const) */        root->kids[JT_LEFT]->balance = -JS_MAX(root->balance, -1);
368: /* MUTANT (del_stmt) */ /*         root->kids[JT_RIGHT]->balance = -JS_MIN(root->balance, 0); */ 
368: /* MUTANT (rep_const) */        root->kids[JT_RIGHT]->balance = -JS_MIN(root->balance, 1);
368: /* MUTANT (rep_const) */        root->kids[JT_RIGHT]->balance = -JS_MIN(root->balance, -1);
369: /* MUTANT (del_stmt) */ /*         root->balance = 0; */ 
369: /* MUTANT (rep_const) */        root->balance = 1;
369: /* MUTANT (rep_const) */        root->balance = -1;
371: /* MUTANT (del_stmt) */ /*         *jtp = root = jt->kids[otherDir]; */ 
372: /* MUTANT (del_stmt) */ /*         jt->kids[otherDir] = root->kids[dir]; */ 
373: /* MUTANT (del_stmt) */ /*         root->kids[dir] = jt; */ 
375: /* MUTANT (del_stmt) */ /*         heightChanged = (root->balance != 0); */ 
375: /* MUTANT (rep_op) */        heightChanged = (root->balance == 0);
375: /* MUTANT (rep_const) */        heightChanged = (root->balance != 1);
375: /* MUTANT (rep_const) */        heightChanged = (root->balance != -1);
376: /* MUTANT (del_stmt) */ /*         jt->balance = -((dir == JT_LEFT) ? --root->balance : ++root->balance); */ 
376: /* MUTANT (rep_op) */        jt->balance = -((dir != JT_LEFT) ? --root->balance : ++root->balance);
376: /* MUTANT (rep_op) */        jt->balance = -((dir == JT_LEFT) ? ++root->balance : ++root->balance);
376: /* MUTANT (rep_op) */        jt->balance = -((dir == JT_LEFT) ? --root->balance : --root->balance);
383: /* MUTANT (del_stmt) */ /*     JSContext           *cx; */ 
384: /* MUTANT (del_stmt) */ /*     JSCodeGenerator     *cg; */ 
385: /* MUTANT (del_stmt) */ /*     ptrdiff_t           offset; */ 
386: /* MUTANT (del_stmt) */ /*     JSJumpTarget        *node; */ 
387: /* MUTANT (del_stmt) */ /* } AddJumpTargetArgs; */ 
392: /* MUTANT (del_stmt) */ /*     JSJumpTarget *jt; */ 
393: /* MUTANT (del_stmt) */ /*     int balanceDelta; */ 
395: /* MUTANT (del_stmt) */ /*     jt = *jtp; */ 
396: /* MUTANT (negate) */    if(! (!jt)) {
397: /* MUTANT (del_stmt) */ /*         JSCodeGenerator *cg = args->cg; */ 
399: /* MUTANT (del_stmt) */ /*         jt = cg->jtFreeList; */ 
400: /* MUTANT (negate) */        if(! (jt)) {
401: /* MUTANT (del_stmt) */ /*             cg->jtFreeList = jt->kids[JT_LEFT]; */ 
405: /* MUTANT (negate) */            if(! (!jt)) {
406: /* MUTANT (del_stmt) */ /*                 JS_ReportOutOfMemory(args->cx); */ 
407: /* MUTANT (del_stmt) */ /*                 return 0; */ 
407: /* MUTANT (rep_const) */                return 1;
407: /* MUTANT (rep_const) */                return -1;
411: /* MUTANT (del_stmt) */ /*         jt->balance = 0; */ 
411: /* MUTANT (rep_const) */        jt->balance = 1;
411: /* MUTANT (rep_const) */        jt->balance = -1;
412: /* MUTANT (del_stmt) */ /*         jt->kids[JT_LEFT] = jt->kids[JT_RIGHT] = NULL; */ 
413: /* MUTANT (del_stmt) */ /*         cg->numJumpTargets++; */ 
413: /* MUTANT (rep_op) */        cg->numJumpTargets--;
414: /* MUTANT (del_stmt) */ /*         args->node = jt; */ 
415: /* MUTANT (del_stmt) */ /*         *jtp = jt; */ 
416: /* MUTANT (del_stmt) */ /*         return 1; */ 
416: /* MUTANT (rep_const) */        return 0;
416: /* MUTANT (rep_const) */        return -1;
416: /* MUTANT (rep_const) */        return ((1)+1);
419: /* MUTANT (rep_op) */    if (jt->offset != args->offset) {
419: /* MUTANT (negate) */    if(! (jt->offset == args->offset)) {
420: /* MUTANT (del_stmt) */ /*         args->node = jt; */ 
421: /* MUTANT (del_stmt) */ /*         return 0; */ 
421: /* MUTANT (rep_const) */        return 1;
421: /* MUTANT (rep_const) */        return -1;
424: /* MUTANT (rep_op) */    if (args->offset <= jt->offset)
424: /* MUTANT (rep_op) */    if (args->offset > jt->offset)
424: /* MUTANT (rep_op) */    if (args->offset >= jt->offset)
424: /* MUTANT (rep_op) */    if (args->offset == jt->offset)
424: /* MUTANT (rep_op) */    if (args->offset != jt->offset)
424: /* MUTANT (negate) */    if(! (args->offset < jt->offset))
428: /* MUTANT (negate) */    if(! (!args->node))
429: /* MUTANT (rep_const) */        return 1;
429: /* MUTANT (rep_const) */        return -1;
431: /* MUTANT (del_stmt) */ /*     jt->balance += balanceDelta; */ 
431: /* MUTANT (rep_op) */    jt->balance -= balanceDelta;
431: /* MUTANT (rep_op) */    jt->balance *= balanceDelta;
431: /* MUTANT (rep_op) */    jt->balance %= balanceDelta;
432: /* MUTANT (rep_op) */    return (balanceDelta || jt->balance)
433: /* MUTANT (rep_const) */           ? 0 - BalanceJumpTargets(jtp)
433: /* MUTANT (rep_const) */           ? -1 - BalanceJumpTargets(jtp)
433: /* MUTANT (rep_const) */           ? ((1)+1) - BalanceJumpTargets(jtp)
434: /* MUTANT (rep_const) */           : 1;
434: /* MUTANT (rep_const) */           : -1;
440: /* MUTANT (del_stmt) */ /*     int lh, rh; */ 
442: /* MUTANT (del_stmt) */ /*     if (!jt) return 0; */ 
442: /* MUTANT (rep_const) */    if (!jt) return 1;
442: /* MUTANT (rep_const) */    if (!jt) return -1;
442: /* MUTANT (negate) */    if(! (!jt)) return 0;
443: /* MUTANT (del_stmt) */ /*     JS_ASSERT(-1 <= jt->balance && jt->balance <= 1); */ 
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 < jt->balance && jt->balance <= 1);
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 > jt->balance && jt->balance <= 1);
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 >= jt->balance && jt->balance <= 1);
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 == jt->balance && jt->balance <= 1);
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 != jt->balance && jt->balance <= 1);
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 <= jt->balance || jt->balance <= 1);
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 <= jt->balance && jt->balance < 1);
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 <= jt->balance && jt->balance > 1);
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 <= jt->balance && jt->balance >= 1);
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 <= jt->balance && jt->balance == 1);
443: /* MUTANT (rep_op) */    JS_ASSERT(-1 <= jt->balance && jt->balance != 1);
443: /* MUTANT (rep_const) */    JS_ASSERT(0 <= jt->balance && jt->balance <= 1);
443: /* MUTANT (rep_const) */    JS_ASSERT(1 <= jt->balance && jt->balance <= 1);
443: /* MUTANT (rep_const) */    JS_ASSERT(((-1)+1) <= jt->balance && jt->balance <= 1);
443: /* MUTANT (rep_const) */    JS_ASSERT(((-1)-1) <= jt->balance && jt->balance <= 1);
443: /* MUTANT (rep_const) */    JS_ASSERT(-1 <= jt->balance && jt->balance <= 0);
443: /* MUTANT (rep_const) */    JS_ASSERT(-1 <= jt->balance && jt->balance <= -1);
443: /* MUTANT (rep_const) */    JS_ASSERT(-1 <= jt->balance && jt->balance <= ((1)+1));
444: /* MUTANT (del_stmt) */ /*     lh = AVLCheck(jt->kids[JT_LEFT]); */ 
445: /* MUTANT (del_stmt) */ /*     rh = AVLCheck(jt->kids[JT_RIGHT]); */ 
446: /* MUTANT (del_stmt) */ /*     JS_ASSERT(jt->balance == rh - lh); */ 
446: /* MUTANT (rep_op) */    JS_ASSERT(jt->balance != rh - lh);
447: /* MUTANT (del_stmt) */ /*     return 1 + JS_MAX(lh, rh); */ 
447: /* MUTANT (rep_op) */    return 1 - JS_MAX(lh, rh);
447: /* MUTANT (rep_op) */    return 1 * JS_MAX(lh, rh);
447: /* MUTANT (rep_op) */    return 1 % JS_MAX(lh, rh);
447: /* MUTANT (rep_const) */    return 0 + JS_MAX(lh, rh);
447: /* MUTANT (rep_const) */    return -1 + JS_MAX(lh, rh);
447: /* MUTANT (rep_const) */    return ((1)+1) + JS_MAX(lh, rh);
455: /* MUTANT (del_stmt) */ /*     AddJumpTargetArgs args; */ 
457: /* MUTANT (rep_op) */    if (off <= JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX < off) {
457: /* MUTANT (rep_op) */    if (off > JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX < off) {
457: /* MUTANT (rep_op) */    if (off >= JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX < off) {
457: /* MUTANT (rep_op) */    if (off == JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX < off) {
457: /* MUTANT (rep_op) */    if (off != JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX < off) {
457: /* MUTANT (rep_op) */    if (off < JUMPX_OFFSET_MIN && JUMPX_OFFSET_MAX < off) {
457: /* MUTANT (rep_op) */    if (off < JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX <= off) {
457: /* MUTANT (rep_op) */    if (off < JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX > off) {
457: /* MUTANT (rep_op) */    if (off < JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX >= off) {
457: /* MUTANT (rep_op) */    if (off < JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX == off) {
457: /* MUTANT (rep_op) */    if (off < JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX != off) {
457: /* MUTANT (negate) */    if(! (off < JUMPX_OFFSET_MIN || JUMPX_OFFSET_MAX < off)) {
458: /* MUTANT (del_stmt) */ /*         ReportStatementTooLarge(cx, cg); */ 
459: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
463: /* MUTANT (del_stmt) */ /*     args.cg = cg; */ 
464: /* MUTANT (del_stmt) */ /*     args.offset = sd->top + off; */ 
464: /* MUTANT (rep_op) */    args.offset = sd->top - off;
464: /* MUTANT (rep_op) */    args.offset = sd->top * off;
464: /* MUTANT (rep_op) */    args.offset = sd->top % off;
465: /* MUTANT (del_stmt) */ /*     args.node = NULL; */ 
466: /* MUTANT (del_stmt) */ /*     AddJumpTarget(&args, &cg->jumpTargets); */ 
467: /* MUTANT (negate) */    if(! (!args.node))
475: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
478: #define SPANDEPS_MIN            0 /* MUTANT (rep_const) */
478: #define SPANDEPS_MIN            1 /* MUTANT (rep_const) */
478: #define SPANDEPS_MIN            -1 /* MUTANT (rep_const) */
478: #define SPANDEPS_MIN            ((256)+1) /* MUTANT (rep_const) */
478: #define SPANDEPS_MIN            ((256)-1) /* MUTANT (rep_const) */
486: /* MUTANT (del_stmt) */ /*     uintN index; */ 
487: /* MUTANT (del_stmt) */ /*     JSSpanDep *sdbase, *sd; */ 
488: /* MUTANT (del_stmt) */ /*     size_t size; */ 
490: /* MUTANT (del_stmt) */ /*     index = cg->numSpanDeps; */ 
491: /* MUTANT (rep_op) */    if (index - 1 == 0) {
491: /* MUTANT (rep_op) */    if (index * 1 == 0) {
491: /* MUTANT (rep_op) */    if (index % 1 == 0) {
491: /* MUTANT (rep_op) */    if (index + 1 != 0) {
491: /* MUTANT (rep_const) */    if (index + 0 == 0) {
491: /* MUTANT (rep_const) */    if (index + -1 == 0) {
491: /* MUTANT (rep_const) */    if (index + ((1)+1) == 0) {
491: /* MUTANT (rep_const) */    if (index + 1 == 1) {
491: /* MUTANT (rep_const) */    if (index + 1 == -1) {
491: /* MUTANT (negate) */    if(! (index + 1 == 0)) {
492: /* MUTANT (del_stmt) */ /*         ReportStatementTooLarge(cx, cg); */ 
493: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
496: /* MUTANT (rep_op) */    if ((index & (index - 1)) != 0 &&
496: /* MUTANT (rep_op) */    if ((index & (index - 1)) == 0 ||
496: /* MUTANT (rep_const) */    if ((index & (index - 0)) == 0 &&
496: /* MUTANT (rep_const) */    if ((index & (index - -1)) == 0 &&
496: /* MUTANT (rep_const) */    if ((index & (index - ((1)+1))) == 0 &&
496: /* MUTANT (rep_const) */    if ((index & (index - 1)) == 1 &&
496: /* MUTANT (rep_const) */    if ((index & (index - 1)) == -1 &&
497: /* MUTANT (rep_op) */        (!(sdbase = cg->spanDeps) && index >= SPANDEPS_MIN)) {
497: /* MUTANT (rep_op) */        (!(sdbase = cg->spanDeps) || index <= SPANDEPS_MIN)) {
497: /* MUTANT (rep_op) */        (!(sdbase = cg->spanDeps) || index < SPANDEPS_MIN)) {
497: /* MUTANT (rep_op) */        (!(sdbase = cg->spanDeps) || index > SPANDEPS_MIN)) {
497: /* MUTANT (rep_op) */        (!(sdbase = cg->spanDeps) || index == SPANDEPS_MIN)) {
497: /* MUTANT (rep_op) */        (!(sdbase = cg->spanDeps) || index != SPANDEPS_MIN)) {
498: /* MUTANT (negate) */        if(! (!sdbase)) {
499: /* MUTANT (del_stmt) */ /*             size = SPANDEPS_SIZE_MIN; */ 
500: /* MUTANT (del_stmt) */ /*             JS_ARENA_ALLOCATE_CAST(sdbase, JSSpanDep *, &cx->tempPool, size); */ 
502: /* MUTANT (del_stmt) */ /*             size = SPANDEPS_SIZE(index); */ 
503: /* MUTANT (del_stmt) */ /*             JS_ARENA_GROW_CAST(sdbase, JSSpanDep *, &cx->tempPool, size, size); */ 
505: /* MUTANT (negate) */        if(! (!sdbase))
507: /* MUTANT (del_stmt) */ /*         cg->spanDeps = sdbase; */ 
510: /* MUTANT (rep_op) */    cg->numSpanDeps = index - 1;
510: /* MUTANT (rep_op) */    cg->numSpanDeps = index * 1;
510: /* MUTANT (rep_op) */    cg->numSpanDeps = index % 1;
510: /* MUTANT (rep_const) */    cg->numSpanDeps = index + 0;
510: /* MUTANT (rep_const) */    cg->numSpanDeps = index + -1;
510: /* MUTANT (rep_const) */    cg->numSpanDeps = index + ((1)+1);
511: /* MUTANT (del_stmt) */ /*     sd = cg->spanDeps + index; */ 
511: /* MUTANT (rep_op) */    sd = cg->spanDeps - index;
511: /* MUTANT (rep_op) */    sd = cg->spanDeps * index;
511: /* MUTANT (rep_op) */    sd = cg->spanDeps % index;
512: /* MUTANT (del_stmt) */ /*     sd->top = PTRDIFF(pc, CG_BASE(cg), jsbytecode); */ 
513: /* MUTANT (del_stmt) */ /*     sd->offset = sd->before = PTRDIFF(pc2, CG_BASE(cg), jsbytecode); */ 
515: /* MUTANT (negate) */    if(! (js_CodeSpec[*pc].format & JOF_BACKPATCH)) {
517: /* MUTANT (rep_op) */        if (off == 0) {
517: /* MUTANT (rep_const) */        if (off != 1) {
517: /* MUTANT (rep_const) */        if (off != -1) {
517: /* MUTANT (negate) */        if(! (off != 0)) {
518: /* MUTANT (del_stmt) */ /*             JS_ASSERT(off >= 1 + JUMP_OFFSET_LEN); */ 
518: /* MUTANT (rep_op) */            JS_ASSERT(off <= 1 + JUMP_OFFSET_LEN);
518: /* MUTANT (rep_op) */            JS_ASSERT(off < 1 + JUMP_OFFSET_LEN);
518: /* MUTANT (rep_op) */            JS_ASSERT(off > 1 + JUMP_OFFSET_LEN);
518: /* MUTANT (rep_op) */            JS_ASSERT(off == 1 + JUMP_OFFSET_LEN);
518: /* MUTANT (rep_op) */            JS_ASSERT(off != 1 + JUMP_OFFSET_LEN);
518: /* MUTANT (rep_op) */            JS_ASSERT(off >= 1 - JUMP_OFFSET_LEN);
518: /* MUTANT (rep_op) */            JS_ASSERT(off >= 1 * JUMP_OFFSET_LEN);
518: /* MUTANT (rep_op) */            JS_ASSERT(off >= 1 % JUMP_OFFSET_LEN);
518: /* MUTANT (rep_const) */            JS_ASSERT(off >= 0 + JUMP_OFFSET_LEN);
518: /* MUTANT (rep_const) */            JS_ASSERT(off >= -1 + JUMP_OFFSET_LEN);
518: /* MUTANT (rep_const) */            JS_ASSERT(off >= ((1)+1) + JUMP_OFFSET_LEN);
519: /* MUTANT (rep_op) */            if (off <= BPDELTA_MAX) {
519: /* MUTANT (rep_op) */            if (off < BPDELTA_MAX) {
519: /* MUTANT (rep_op) */            if (off >= BPDELTA_MAX) {
519: /* MUTANT (rep_op) */            if (off == BPDELTA_MAX) {
519: /* MUTANT (rep_op) */            if (off != BPDELTA_MAX) {
519: /* MUTANT (negate) */            if(! (off > BPDELTA_MAX)) {
520: /* MUTANT (del_stmt) */ /*                 ReportStatementTooLarge(cx, cg); */ 
521: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
525: /* MUTANT (rep_op) */    } else if (off != 0) {
525: /* MUTANT (rep_const) */    } else if (off == 1) {
525: /* MUTANT (rep_const) */    } else if (off == -1) {
525: /* MUTANT (negate) */    } else if(! (off == 0)) {
527: /* MUTANT (del_stmt) */ /*         SD_SET_TARGET(sd, NULL); */ 
530: /* MUTANT (negate) */        if(! (!SetSpanDepTarget(cx, cg, sd, off)))
534: /* MUTANT (rep_op) */    if (index <= SPANDEP_INDEX_MAX)
534: /* MUTANT (rep_op) */    if (index < SPANDEP_INDEX_MAX)
534: /* MUTANT (rep_op) */    if (index >= SPANDEP_INDEX_MAX)
534: /* MUTANT (rep_op) */    if (index == SPANDEP_INDEX_MAX)
534: /* MUTANT (rep_op) */    if (index != SPANDEP_INDEX_MAX)
534: /* MUTANT (negate) */    if(! (index > SPANDEP_INDEX_MAX))
536: /* MUTANT (del_stmt) */ /*     SET_SPANDEP_INDEX(pc2, index); */ 
537: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
543: /* MUTANT (del_stmt) */ /*     jsbytecode *pc, *end; */ 
544: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
545: /* MUTANT (del_stmt) */ /*     const JSCodeSpec *cs; */ 
546: /* MUTANT (del_stmt) */ /*     ptrdiff_t len, off; */ 
548: /* MUTANT (del_stmt) */ /*     pc = CG_BASE(cg) + cg->spanDepTodo; */ 
548: /* MUTANT (rep_op) */    pc = CG_BASE(cg) - cg->spanDepTodo;
548: /* MUTANT (rep_op) */    pc = CG_BASE(cg) * cg->spanDepTodo;
548: /* MUTANT (rep_op) */    pc = CG_BASE(cg) % cg->spanDepTodo;
549: /* MUTANT (del_stmt) */ /*     end = CG_NEXT(cg); */ 
550: /* MUTANT (rep_op) */    while (pc <= end) {
550: /* MUTANT (rep_op) */    while (pc > end) {
550: /* MUTANT (rep_op) */    while (pc >= end) {
550: /* MUTANT (rep_op) */    while (pc == end) {
550: /* MUTANT (rep_op) */    while (pc != end) {
550: /* MUTANT (negate) */    while(! (pc < end)) {
551: /* MUTANT (del_stmt) */ /*         op = (JSOp)*pc; */ 
552: /* MUTANT (del_stmt) */ /*         cs = &js_CodeSpec[op]; */ 
553: /* MUTANT (del_stmt) */ /*         len = (ptrdiff_t)cs->length; */ 
558: /* MUTANT (negate) */            if(! (!AddSpanDep(cx, cg, pc, pc, off)))
560: /* MUTANT (del_stmt) */ /*             break; */ 
565: /* MUTANT (del_stmt) */ /*             jsbytecode *pc2; */ 
566: /* MUTANT (del_stmt) */ /*             jsint i, low, high; */ 
568: /* MUTANT (del_stmt) */ /*             pc2 = pc; */ 
569: /* MUTANT (del_stmt) */ /*             off = GET_JUMP_OFFSET(pc2); */ 
570: /* MUTANT (negate) */            if(! (!AddSpanDep(cx, cg, pc, pc2, off)))
572: /* MUTANT (del_stmt) */ /*             pc2 += JUMP_OFFSET_LEN; */ 
572: /* MUTANT (rep_op) */            pc2 -= JUMP_OFFSET_LEN;
572: /* MUTANT (rep_op) */            pc2 *= JUMP_OFFSET_LEN;
572: /* MUTANT (rep_op) */            pc2 %= JUMP_OFFSET_LEN;
573: /* MUTANT (del_stmt) */ /*             low = GET_JUMP_OFFSET(pc2); */ 
574: /* MUTANT (del_stmt) */ /*             pc2 += JUMP_OFFSET_LEN; */ 
574: /* MUTANT (rep_op) */            pc2 -= JUMP_OFFSET_LEN;
574: /* MUTANT (rep_op) */            pc2 *= JUMP_OFFSET_LEN;
574: /* MUTANT (rep_op) */            pc2 %= JUMP_OFFSET_LEN;
575: /* MUTANT (del_stmt) */ /*             high = GET_JUMP_OFFSET(pc2); */ 
576: /* MUTANT (del_stmt) */ /*             pc2 += JUMP_OFFSET_LEN; */ 
576: /* MUTANT (rep_op) */            pc2 -= JUMP_OFFSET_LEN;
576: /* MUTANT (rep_op) */            pc2 *= JUMP_OFFSET_LEN;
576: /* MUTANT (rep_op) */            pc2 %= JUMP_OFFSET_LEN;
577: /* MUTANT (rep_op) */            for (i = low; i < high; i++) {
577: /* MUTANT (rep_op) */            for (i = low; i > high; i++) {
577: /* MUTANT (rep_op) */            for (i = low; i >= high; i++) {
577: /* MUTANT (rep_op) */            for (i = low; i == high; i++) {
577: /* MUTANT (rep_op) */            for (i = low; i != high; i++) {
577: /* MUTANT (rep_op) */            for (i = low; i <= high; i--) {
578: /* MUTANT (del_stmt) */ /*                 off = GET_JUMP_OFFSET(pc2); */ 
579: /* MUTANT (negate) */                if(! (!AddSpanDep(cx, cg, pc, pc2, off)))
581: /* MUTANT (del_stmt) */ /*                 pc2 += JUMP_OFFSET_LEN; */ 
581: /* MUTANT (rep_op) */                pc2 -= JUMP_OFFSET_LEN;
581: /* MUTANT (rep_op) */                pc2 *= JUMP_OFFSET_LEN;
581: /* MUTANT (rep_op) */                pc2 %= JUMP_OFFSET_LEN;
583: /* MUTANT (rep_op) */            len = 1 - pc2 - pc;
583: /* MUTANT (rep_op) */            len = 1 * pc2 - pc;
583: /* MUTANT (rep_op) */            len = 1 % pc2 - pc;
583: /* MUTANT (rep_const) */            len = 0 + pc2 - pc;
583: /* MUTANT (rep_const) */            len = -1 + pc2 - pc;
583: /* MUTANT (rep_const) */            len = ((1)+1) + pc2 - pc;
584: /* MUTANT (del_stmt) */ /*             break; */ 
589: /* MUTANT (del_stmt) */ /*             jsbytecode *pc2; */ 
590: /* MUTANT (del_stmt) */ /*             jsint npairs; */ 
592: /* MUTANT (del_stmt) */ /*             pc2 = pc; */ 
593: /* MUTANT (del_stmt) */ /*             off = GET_JUMP_OFFSET(pc2); */ 
594: /* MUTANT (negate) */            if(! (!AddSpanDep(cx, cg, pc, pc2, off)))
596: /* MUTANT (del_stmt) */ /*             pc2 += JUMP_OFFSET_LEN; */ 
596: /* MUTANT (rep_op) */            pc2 -= JUMP_OFFSET_LEN;
596: /* MUTANT (rep_op) */            pc2 *= JUMP_OFFSET_LEN;
596: /* MUTANT (rep_op) */            pc2 %= JUMP_OFFSET_LEN;
597: /* MUTANT (del_stmt) */ /*             npairs = (jsint) GET_ATOM_INDEX(pc2); */ 
598: /* MUTANT (del_stmt) */ /*             pc2 += ATOM_INDEX_LEN; */ 
598: /* MUTANT (rep_op) */            pc2 -= ATOM_INDEX_LEN;
598: /* MUTANT (rep_op) */            pc2 *= ATOM_INDEX_LEN;
598: /* MUTANT (rep_op) */            pc2 %= ATOM_INDEX_LEN;
599: /* MUTANT (negate) */            while(! (npairs)) {
600: /* MUTANT (del_stmt) */ /*                 pc2 += ATOM_INDEX_LEN; */ 
600: /* MUTANT (rep_op) */                pc2 -= ATOM_INDEX_LEN;
600: /* MUTANT (rep_op) */                pc2 *= ATOM_INDEX_LEN;
600: /* MUTANT (rep_op) */                pc2 %= ATOM_INDEX_LEN;
601: /* MUTANT (del_stmt) */ /*                 off = GET_JUMP_OFFSET(pc2); */ 
602: /* MUTANT (negate) */                if(! (!AddSpanDep(cx, cg, pc, pc2, off)))
604: /* MUTANT (del_stmt) */ /*                 pc2 += JUMP_OFFSET_LEN; */ 
604: /* MUTANT (rep_op) */                pc2 -= JUMP_OFFSET_LEN;
604: /* MUTANT (rep_op) */                pc2 *= JUMP_OFFSET_LEN;
604: /* MUTANT (rep_op) */                pc2 %= JUMP_OFFSET_LEN;
605: /* MUTANT (del_stmt) */ /*                 npairs--; */ 
605: /* MUTANT (rep_op) */                npairs++;
607: /* MUTANT (rep_op) */            len = 1 - pc2 - pc;
607: /* MUTANT (rep_op) */            len = 1 * pc2 - pc;
607: /* MUTANT (rep_op) */            len = 1 % pc2 - pc;
607: /* MUTANT (rep_const) */            len = 0 + pc2 - pc;
607: /* MUTANT (rep_const) */            len = -1 + pc2 - pc;
607: /* MUTANT (rep_const) */            len = ((1)+1) + pc2 - pc;
608: /* MUTANT (del_stmt) */ /*             break; */ 
613: /* MUTANT (rep_op) */        JS_ASSERT(len <= 0);
613: /* MUTANT (rep_op) */        JS_ASSERT(len < 0);
613: /* MUTANT (rep_op) */        JS_ASSERT(len >= 0);
613: /* MUTANT (rep_op) */        JS_ASSERT(len == 0);
613: /* MUTANT (rep_op) */        JS_ASSERT(len != 0);
613: /* MUTANT (rep_const) */        JS_ASSERT(len > 1);
613: /* MUTANT (rep_const) */        JS_ASSERT(len > -1);
614: /* MUTANT (del_stmt) */ /*         pc += len; */ 
614: /* MUTANT (rep_op) */        pc -= len;
614: /* MUTANT (rep_op) */        pc *= len;
614: /* MUTANT (rep_op) */        pc %= len;
623: /* MUTANT (del_stmt) */ /*     uintN index; */ 
624: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset; */ 
625: /* MUTANT (del_stmt) */ /*     int lo, hi, mid; */ 
626: /* MUTANT (del_stmt) */ /*     JSSpanDep *sd; */ 
628: /* MUTANT (del_stmt) */ /*     index = GET_SPANDEP_INDEX(pc); */ 
629: /* MUTANT (rep_op) */    if (index == SPANDEP_INDEX_HUGE)
629: /* MUTANT (negate) */    if(! (index != SPANDEP_INDEX_HUGE))
630: /* MUTANT (rep_op) */        return cg->spanDeps - index;
630: /* MUTANT (rep_op) */        return cg->spanDeps * index;
630: /* MUTANT (rep_op) */        return cg->spanDeps % index;
632: /* MUTANT (del_stmt) */ /*     offset = PTRDIFF(pc, CG_BASE(cg), jsbytecode); */ 
633: /* MUTANT (del_stmt) */ /*     lo = 0; */ 
633: /* MUTANT (rep_const) */    lo = 1;
633: /* MUTANT (rep_const) */    lo = -1;
634: /* MUTANT (del_stmt) */ /*     hi = cg->numSpanDeps - 1; */ 
634: /* MUTANT (rep_const) */    hi = cg->numSpanDeps - 0;
634: /* MUTANT (rep_const) */    hi = cg->numSpanDeps - -1;
634: /* MUTANT (rep_const) */    hi = cg->numSpanDeps - ((1)+1);
635: /* MUTANT (rep_op) */    while (lo < hi) {
635: /* MUTANT (rep_op) */    while (lo > hi) {
635: /* MUTANT (rep_op) */    while (lo >= hi) {
635: /* MUTANT (rep_op) */    while (lo == hi) {
635: /* MUTANT (rep_op) */    while (lo != hi) {
635: /* MUTANT (negate) */    while(! (lo <= hi)) {
636: /* MUTANT (del_stmt) */ /*         mid = (lo + hi) / 2; */ 
636: /* MUTANT (rep_op) */        mid = (lo - hi) / 2;
636: /* MUTANT (rep_op) */        mid = (lo * hi) / 2;
636: /* MUTANT (rep_op) */        mid = (lo % hi) / 2;
636: /* MUTANT (rep_const) */        mid = (lo + hi) / 0;
636: /* MUTANT (rep_const) */        mid = (lo + hi) / 1;
636: /* MUTANT (rep_const) */        mid = (lo + hi) / -1;
636: /* MUTANT (rep_const) */        mid = (lo + hi) / ((2)+1);
636: /* MUTANT (rep_const) */        mid = (lo + hi) / ((2)-1);
637: /* MUTANT (del_stmt) */ /*         sd = cg->spanDeps + mid; */ 
637: /* MUTANT (rep_op) */        sd = cg->spanDeps - mid;
637: /* MUTANT (rep_op) */        sd = cg->spanDeps * mid;
637: /* MUTANT (rep_op) */        sd = cg->spanDeps % mid;
638: /* MUTANT (rep_op) */        if (sd->before != offset)
638: /* MUTANT (negate) */        if(! (sd->before == offset))
640: /* MUTANT (rep_op) */        if (sd->before <= offset)
640: /* MUTANT (rep_op) */        if (sd->before > offset)
640: /* MUTANT (rep_op) */        if (sd->before >= offset)
640: /* MUTANT (rep_op) */        if (sd->before == offset)
640: /* MUTANT (rep_op) */        if (sd->before != offset)
640: /* MUTANT (negate) */        if(! (sd->before < offset))
641: /* MUTANT (rep_op) */            lo = mid - 1;
641: /* MUTANT (rep_op) */            lo = mid * 1;
641: /* MUTANT (rep_op) */            lo = mid % 1;
641: /* MUTANT (rep_const) */            lo = mid + 0;
641: /* MUTANT (rep_const) */            lo = mid + -1;
641: /* MUTANT (rep_const) */            lo = mid + ((1)+1);
643: /* MUTANT (rep_const) */            hi = mid - 0;
643: /* MUTANT (rep_const) */            hi = mid - -1;
643: /* MUTANT (rep_const) */            hi = mid - ((1)+1);
646: /* MUTANT (rep_const) */    JS_ASSERT(1);
646: /* MUTANT (rep_const) */    JS_ASSERT(-1);
647: /* MUTANT (del_stmt) */ /*     return NULL; */ 
654: /* MUTANT (del_stmt) */ /*     JSSpanDep *sd; */ 
656: /* MUTANT (del_stmt) */ /*     JS_ASSERT(delta >= 1 + JUMP_OFFSET_LEN); */ 
656: /* MUTANT (rep_op) */    JS_ASSERT(delta <= 1 + JUMP_OFFSET_LEN);
656: /* MUTANT (rep_op) */    JS_ASSERT(delta < 1 + JUMP_OFFSET_LEN);
656: /* MUTANT (rep_op) */    JS_ASSERT(delta > 1 + JUMP_OFFSET_LEN);
656: /* MUTANT (rep_op) */    JS_ASSERT(delta == 1 + JUMP_OFFSET_LEN);
656: /* MUTANT (rep_op) */    JS_ASSERT(delta != 1 + JUMP_OFFSET_LEN);
656: /* MUTANT (rep_op) */    JS_ASSERT(delta >= 1 - JUMP_OFFSET_LEN);
656: /* MUTANT (rep_op) */    JS_ASSERT(delta >= 1 * JUMP_OFFSET_LEN);
656: /* MUTANT (rep_op) */    JS_ASSERT(delta >= 1 % JUMP_OFFSET_LEN);
656: /* MUTANT (rep_const) */    JS_ASSERT(delta >= 0 + JUMP_OFFSET_LEN);
656: /* MUTANT (rep_const) */    JS_ASSERT(delta >= -1 + JUMP_OFFSET_LEN);
656: /* MUTANT (rep_const) */    JS_ASSERT(delta >= ((1)+1) + JUMP_OFFSET_LEN);
657: /* MUTANT (rep_op) */    if (!cg->spanDeps || delta < JUMP_OFFSET_MAX) {
657: /* MUTANT (rep_op) */    if (!cg->spanDeps && delta <= JUMP_OFFSET_MAX) {
657: /* MUTANT (rep_op) */    if (!cg->spanDeps && delta > JUMP_OFFSET_MAX) {
657: /* MUTANT (rep_op) */    if (!cg->spanDeps && delta >= JUMP_OFFSET_MAX) {
657: /* MUTANT (rep_op) */    if (!cg->spanDeps && delta == JUMP_OFFSET_MAX) {
657: /* MUTANT (rep_op) */    if (!cg->spanDeps && delta != JUMP_OFFSET_MAX) {
657: /* MUTANT (negate) */    if(! (!cg->spanDeps && delta < JUMP_OFFSET_MAX)) {
658: /* MUTANT (del_stmt) */ /*         SET_JUMP_OFFSET(pc, delta); */ 
659: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
662: /* MUTANT (rep_op) */    if (delta <= BPDELTA_MAX) {
662: /* MUTANT (rep_op) */    if (delta < BPDELTA_MAX) {
662: /* MUTANT (rep_op) */    if (delta >= BPDELTA_MAX) {
662: /* MUTANT (rep_op) */    if (delta == BPDELTA_MAX) {
662: /* MUTANT (rep_op) */    if (delta != BPDELTA_MAX) {
662: /* MUTANT (negate) */    if(! (delta > BPDELTA_MAX)) {
663: /* MUTANT (del_stmt) */ /*         ReportStatementTooLarge(cx, cg); */ 
664: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
667: /* MUTANT (rep_op) */    if (!cg->spanDeps || !BuildSpanDepTable(cx, cg))
667: /* MUTANT (negate) */    if(! (!cg->spanDeps && !BuildSpanDepTable(cx, cg)))
670: /* MUTANT (del_stmt) */ /*     sd = GetSpanDep(cg, pc); */ 
671: /* MUTANT (del_stmt) */ /*     JS_ASSERT(SD_GET_BPDELTA(sd) == 0); */ 
671: /* MUTANT (rep_op) */    JS_ASSERT(SD_GET_BPDELTA(sd) != 0);
671: /* MUTANT (rep_const) */    JS_ASSERT(SD_GET_BPDELTA(sd) == 1);
671: /* MUTANT (rep_const) */    JS_ASSERT(SD_GET_BPDELTA(sd) == -1);
672: /* MUTANT (del_stmt) */ /*     SD_SET_BPDELTA(sd, delta); */ 
673: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
679: /* MUTANT (rep_op) */    if (jt->offset <= pivot) {
679: /* MUTANT (rep_op) */    if (jt->offset < pivot) {
679: /* MUTANT (rep_op) */    if (jt->offset >= pivot) {
679: /* MUTANT (rep_op) */    if (jt->offset == pivot) {
679: /* MUTANT (rep_op) */    if (jt->offset != pivot) {
679: /* MUTANT (negate) */    if(! (jt->offset > pivot)) {
680: /* MUTANT (del_stmt) */ /*         jt->offset += delta; */ 
680: /* MUTANT (rep_op) */        jt->offset -= delta;
680: /* MUTANT (rep_op) */        jt->offset *= delta;
680: /* MUTANT (rep_op) */        jt->offset %= delta;
681: /* MUTANT (negate) */        if(! (jt->kids[JT_LEFT]))
684: /* MUTANT (negate) */    if(! (jt->kids[JT_RIGHT]))
692: /* MUTANT (del_stmt) */ /*     int num, hi, mid; */ 
693: /* MUTANT (del_stmt) */ /*     JSSpanDep *sdbase, *sd; */ 
695: /* MUTANT (del_stmt) */ /*     num = cg->numSpanDeps; */ 
696: /* MUTANT (del_stmt) */ /*     JS_ASSERT(num > 0); */ 
696: /* MUTANT (rep_op) */    JS_ASSERT(num <= 0);
696: /* MUTANT (rep_op) */    JS_ASSERT(num < 0);
696: /* MUTANT (rep_op) */    JS_ASSERT(num >= 0);
696: /* MUTANT (rep_op) */    JS_ASSERT(num == 0);
696: /* MUTANT (rep_op) */    JS_ASSERT(num != 0);
696: /* MUTANT (rep_const) */    JS_ASSERT(num > 1);
696: /* MUTANT (rep_const) */    JS_ASSERT(num > -1);
697: /* MUTANT (del_stmt) */ /*     hi = num - 1; */ 
697: /* MUTANT (rep_const) */    hi = num - 0;
697: /* MUTANT (rep_const) */    hi = num - -1;
697: /* MUTANT (rep_const) */    hi = num - ((1)+1);
698: /* MUTANT (del_stmt) */ /*     sdbase = cg->spanDeps; */ 
699: /* MUTANT (rep_op) */    while (lo < hi) {
699: /* MUTANT (rep_op) */    while (lo > hi) {
699: /* MUTANT (rep_op) */    while (lo >= hi) {
699: /* MUTANT (rep_op) */    while (lo == hi) {
699: /* MUTANT (rep_op) */    while (lo != hi) {
699: /* MUTANT (negate) */    while(! (lo <= hi)) {
700: /* MUTANT (del_stmt) */ /*         mid = (lo + hi) / 2; */ 
700: /* MUTANT (rep_op) */        mid = (lo - hi) / 2;
700: /* MUTANT (rep_op) */        mid = (lo * hi) / 2;
700: /* MUTANT (rep_op) */        mid = (lo % hi) / 2;
700: /* MUTANT (rep_const) */        mid = (lo + hi) / 0;
700: /* MUTANT (rep_const) */        mid = (lo + hi) / 1;
700: /* MUTANT (rep_const) */        mid = (lo + hi) / -1;
700: /* MUTANT (rep_const) */        mid = (lo + hi) / ((2)+1);
700: /* MUTANT (rep_const) */        mid = (lo + hi) / ((2)-1);
701: /* MUTANT (del_stmt) */ /*         sd = sdbase + mid; */ 
701: /* MUTANT (rep_op) */        sd = sdbase - mid;
701: /* MUTANT (rep_op) */        sd = sdbase * mid;
701: /* MUTANT (rep_op) */        sd = sdbase % mid;
702: /* MUTANT (rep_op) */        if (sd->before != offset)
702: /* MUTANT (negate) */        if(! (sd->before == offset))
704: /* MUTANT (rep_op) */        if (sd->before <= offset)
704: /* MUTANT (rep_op) */        if (sd->before > offset)
704: /* MUTANT (rep_op) */        if (sd->before >= offset)
704: /* MUTANT (rep_op) */        if (sd->before == offset)
704: /* MUTANT (rep_op) */        if (sd->before != offset)
704: /* MUTANT (negate) */        if(! (sd->before < offset))
705: /* MUTANT (rep_op) */            lo = mid - 1;
705: /* MUTANT (rep_op) */            lo = mid * 1;
705: /* MUTANT (rep_op) */            lo = mid % 1;
705: /* MUTANT (rep_const) */            lo = mid + 0;
705: /* MUTANT (rep_const) */            lo = mid + -1;
705: /* MUTANT (rep_const) */            lo = mid + ((1)+1);
707: /* MUTANT (rep_const) */            hi = mid - 0;
707: /* MUTANT (rep_const) */            hi = mid - -1;
707: /* MUTANT (rep_const) */            hi = mid - ((1)+1);
709: /* MUTANT (rep_op) */    if (lo != num)
709: /* MUTANT (negate) */    if(! (lo == num))
711: /* MUTANT (del_stmt) */ /*     sd = sdbase + lo; */ 
711: /* MUTANT (rep_op) */    sd = sdbase - lo;
711: /* MUTANT (rep_op) */    sd = sdbase * lo;
711: /* MUTANT (rep_op) */    sd = sdbase % lo;
712: /* MUTANT (del_stmt) */ /*     JS_ASSERT(sd->before >= offset && (lo == 0 || sd[-1].before < offset)); */ 
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before <= offset && (lo == 0 || sd[-1].before < offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before < offset && (lo == 0 || sd[-1].before < offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before > offset && (lo == 0 || sd[-1].before < offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before == offset && (lo == 0 || sd[-1].before < offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before != offset && (lo == 0 || sd[-1].before < offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before >= offset || (lo == 0 || sd[-1].before < offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before >= offset && (lo != 0 || sd[-1].before < offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before >= offset && (lo == 0 && sd[-1].before < offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before >= offset && (lo == 0 || sd[-1].before <= offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before >= offset && (lo == 0 || sd[-1].before > offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before >= offset && (lo == 0 || sd[-1].before >= offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before >= offset && (lo == 0 || sd[-1].before == offset));
712: /* MUTANT (rep_op) */    JS_ASSERT(sd->before >= offset && (lo == 0 || sd[-1].before != offset));
712: /* MUTANT (rep_const) */    JS_ASSERT(sd->before >= offset && (lo == 1 || sd[-1].before < offset));
712: /* MUTANT (rep_const) */    JS_ASSERT(sd->before >= offset && (lo == -1 || sd[-1].before < offset));
712: /* MUTANT (rep_const) */    JS_ASSERT(sd->before >= offset && (lo == 0 || sd[0].before < offset));
712: /* MUTANT (rep_const) */    JS_ASSERT(sd->before >= offset && (lo == 0 || sd[1].before < offset));
712: /* MUTANT (rep_const) */    JS_ASSERT(sd->before >= offset && (lo == 0 || sd[((-1)+1)].before < offset));
712: /* MUTANT (rep_const) */    JS_ASSERT(sd->before >= offset && (lo == 0 || sd[((-1)-1)].before < offset));
713: /* MUTANT (del_stmt) */ /*     return sd; */ 
719: /* MUTANT (negate) */    if(! (jt->kids[JT_LEFT]))
721: /* MUTANT (negate) */    if(! (jt->kids[JT_RIGHT]))
723: /* MUTANT (del_stmt) */ /*     jt->kids[JT_LEFT] = cg->jtFreeList; */ 
724: /* MUTANT (del_stmt) */ /*     cg->jtFreeList = jt; */ 
730: /* MUTANT (del_stmt) */ /*     jsbytecode *pc, *oldpc, *base, *limit, *next; */ 
731: /* MUTANT (del_stmt) */ /*     JSSpanDep *sd, *sd2, *sdbase, *sdlimit, *sdtop, guard; */ 
732: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset, growth, delta, top, pivot, span, length, target; */ 
733: /* MUTANT (del_stmt) */ /*     JSBool done; */ 
734: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
735: /* MUTANT (del_stmt) */ /*     uint32 type; */ 
736: /* MUTANT (del_stmt) */ /*     size_t size, incr; */ 
737: /* MUTANT (del_stmt) */ /*     jssrcnote *sn, *snlimit; */ 
738: /* MUTANT (del_stmt) */ /*     JSSrcNoteSpec *spec; */ 
739: /* MUTANT (del_stmt) */ /*     uintN i, n, noteIndex; */ 
740: /* MUTANT (del_stmt) */ /*     JSTryNote *tn, *tnlimit; */ 
742: /* MUTANT (rep_const) */    int passes = 1;
742: /* MUTANT (rep_const) */    int passes = -1;
746: /* MUTANT (del_stmt) */ /*     sdbase = cg->spanDeps; */ 
747: /* MUTANT (del_stmt) */ /*     sdlimit = sdbase + cg->numSpanDeps; */ 
747: /* MUTANT (rep_op) */    sdlimit = sdbase - cg->numSpanDeps;
747: /* MUTANT (rep_op) */    sdlimit = sdbase * cg->numSpanDeps;
747: /* MUTANT (rep_op) */    sdlimit = sdbase % cg->numSpanDeps;
748: /* MUTANT (del_stmt) */ /*     offset = CG_OFFSET(cg); */ 
749: /* MUTANT (del_stmt) */ /*     growth = 0; */ 
749: /* MUTANT (rep_const) */    growth = 1;
749: /* MUTANT (rep_const) */    growth = -1;
752: /* MUTANT (del_stmt) */ /*         done = JS_TRUE; */ 
753: /* MUTANT (del_stmt) */ /*         delta = 0; */ 
753: /* MUTANT (rep_const) */        delta = 1;
753: /* MUTANT (rep_const) */        delta = -1;
754: /* MUTANT (del_stmt) */ /*         top = pivot = -1; */ 
754: /* MUTANT (rep_const) */        top = pivot = 0;
754: /* MUTANT (rep_const) */        top = pivot = 1;
754: /* MUTANT (rep_const) */        top = pivot = ((-1)+1);
754: /* MUTANT (rep_const) */        top = pivot = ((-1)-1);
755: /* MUTANT (del_stmt) */ /*         sdtop = NULL; */ 
756: /* MUTANT (del_stmt) */ /*         pc = NULL; */ 
757: /* MUTANT (del_stmt) */ /*         op = JSOP_NOP; */ 
758: /* MUTANT (del_stmt) */ /*         type = 0; */ 
758: /* MUTANT (rep_const) */        type = 1;
758: /* MUTANT (rep_const) */        type = -1;
760: /* MUTANT (rep_op) */        passes--;
763: /* MUTANT (rep_op) */        for (sd = sdbase; sd <= sdlimit; sd++) {
763: /* MUTANT (rep_op) */        for (sd = sdbase; sd > sdlimit; sd++) {
763: /* MUTANT (rep_op) */        for (sd = sdbase; sd >= sdlimit; sd++) {
763: /* MUTANT (rep_op) */        for (sd = sdbase; sd == sdlimit; sd++) {
763: /* MUTANT (rep_op) */        for (sd = sdbase; sd != sdlimit; sd++) {
763: /* MUTANT (rep_op) */        for (sd = sdbase; sd < sdlimit; sd--) {
764: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JT_HAS_TAG(sd->target)); */ 
765: /* MUTANT (del_stmt) */ /*             sd->offset += delta; */ 
765: /* MUTANT (rep_op) */            sd->offset -= delta;
765: /* MUTANT (rep_op) */            sd->offset *= delta;
765: /* MUTANT (rep_op) */            sd->offset %= delta;
767: /* MUTANT (rep_op) */            if (sd->top == top) {
767: /* MUTANT (negate) */            if(! (sd->top != top)) {
768: /* MUTANT (del_stmt) */ /*                 sdtop = sd; */ 
769: /* MUTANT (del_stmt) */ /*                 top = sd->top; */ 
770: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(top == sd->before); */ 
770: /* MUTANT (rep_op) */                JS_ASSERT(top != sd->before);
771: /* MUTANT (del_stmt) */ /*                 pivot = sd->offset; */ 
772: /* MUTANT (del_stmt) */ /*                 pc = base + top; */ 
772: /* MUTANT (rep_op) */                pc = base - top;
772: /* MUTANT (rep_op) */                pc = base * top;
772: /* MUTANT (rep_op) */                pc = base % top;
773: /* MUTANT (del_stmt) */ /*                 op = (JSOp) *pc; */ 
774: /* MUTANT (del_stmt) */ /*                 type = (js_CodeSpec[op].format & JOF_TYPEMASK); */ 
775: /* MUTANT (negate) */                if(! (JOF_TYPE_IS_EXTENDED_JUMP(type))) {
782: /* MUTANT (del_stmt) */ /*                     continue; */ 
785: /* MUTANT (rep_op) */                JS_ASSERT(type != JOF_JUMP ||
785: /* MUTANT (rep_op) */                JS_ASSERT(type == JOF_JUMP &&
786: /* MUTANT (rep_op) */                          type != JOF_TABLESWITCH ||
786: /* MUTANT (rep_op) */                          type == JOF_TABLESWITCH &&
787: /* MUTANT (rep_op) */                          type != JOF_LOOKUPSWITCH);
790: /* MUTANT (negate) */            if(! (!JOF_TYPE_IS_EXTENDED_JUMP(type))) {
791: /* MUTANT (del_stmt) */ /*                 span = SD_SPAN(sd, pivot); */ 
792: /* MUTANT (rep_op) */                if (span <= JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span) {
792: /* MUTANT (rep_op) */                if (span > JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span) {
792: /* MUTANT (rep_op) */                if (span >= JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span) {
792: /* MUTANT (rep_op) */                if (span == JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span) {
792: /* MUTANT (rep_op) */                if (span != JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span) {
792: /* MUTANT (rep_op) */                if (span < JUMP_OFFSET_MIN && JUMP_OFFSET_MAX < span) {
792: /* MUTANT (rep_op) */                if (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX <= span) {
792: /* MUTANT (rep_op) */                if (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX > span) {
792: /* MUTANT (rep_op) */                if (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX >= span) {
792: /* MUTANT (rep_op) */                if (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX == span) {
792: /* MUTANT (rep_op) */                if (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX != span) {
792: /* MUTANT (negate) */                if(! (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span)) {
793: /* MUTANT (del_stmt) */ /*                     ptrdiff_t deltaFromTop = 0; */ 
793: /* MUTANT (rep_const) */                    ptrdiff_t deltaFromTop = 1;
793: /* MUTANT (rep_const) */                    ptrdiff_t deltaFromTop = -1;
795: /* MUTANT (del_stmt) */ /*                     done = JS_FALSE; */ 
798: /* MUTANT (del_stmt) */ /*                       case JSOP_GOTO:         op = JSOP_GOTOX; */  break;
798: /* MUTANT (del_stmt) */ /*                       case JSOP_GOTO:         op = JSOP_GOTOX; */  /*  break; */ 
798: /* MUTANT (del_stmt) */                      case JSOP_GOTO:         op = JSOP_GOTOX; /*  break; */ 
799: /* MUTANT (del_stmt) */ /*                       case JSOP_IFEQ:         op = JSOP_IFEQX; */  break;
799: /* MUTANT (del_stmt) */ /*                       case JSOP_IFEQ:         op = JSOP_IFEQX; */  /*  break; */ 
799: /* MUTANT (del_stmt) */                      case JSOP_IFEQ:         op = JSOP_IFEQX; /*  break; */ 
800: /* MUTANT (del_stmt) */ /*                       case JSOP_IFNE:         op = JSOP_IFNEX; */  break;
800: /* MUTANT (del_stmt) */ /*                       case JSOP_IFNE:         op = JSOP_IFNEX; */  /*  break; */ 
800: /* MUTANT (del_stmt) */                      case JSOP_IFNE:         op = JSOP_IFNEX; /*  break; */ 
801: /* MUTANT (del_stmt) */ /*                       case JSOP_OR:           op = JSOP_ORX; */  break;
801: /* MUTANT (del_stmt) */ /*                       case JSOP_OR:           op = JSOP_ORX; */  /*  break; */ 
801: /* MUTANT (del_stmt) */                      case JSOP_OR:           op = JSOP_ORX; /*  break; */ 
802: /* MUTANT (del_stmt) */ /*                       case JSOP_AND:          op = JSOP_ANDX; */  break;
802: /* MUTANT (del_stmt) */ /*                       case JSOP_AND:          op = JSOP_ANDX; */  /*  break; */ 
802: /* MUTANT (del_stmt) */                      case JSOP_AND:          op = JSOP_ANDX; /*  break; */ 
803: /* MUTANT (del_stmt) */ /*                       case JSOP_GOSUB:        op = JSOP_GOSUBX; */  break;
803: /* MUTANT (del_stmt) */ /*                       case JSOP_GOSUB:        op = JSOP_GOSUBX; */  /*  break; */ 
803: /* MUTANT (del_stmt) */                      case JSOP_GOSUB:        op = JSOP_GOSUBX; /*  break; */ 
804: /* MUTANT (del_stmt) */ /*                       case JSOP_CASE:         op = JSOP_CASEX; */  break;
804: /* MUTANT (del_stmt) */ /*                       case JSOP_CASE:         op = JSOP_CASEX; */  /*  break; */ 
804: /* MUTANT (del_stmt) */                      case JSOP_CASE:         op = JSOP_CASEX; /*  break; */ 
805: /* MUTANT (del_stmt) */ /*                       case JSOP_DEFAULT:      op = JSOP_DEFAULTX; */  break;
805: /* MUTANT (del_stmt) */ /*                       case JSOP_DEFAULT:      op = JSOP_DEFAULTX; */  /*  break; */ 
805: /* MUTANT (del_stmt) */                      case JSOP_DEFAULT:      op = JSOP_DEFAULTX; /*  break; */ 
806: /* MUTANT (del_stmt) */ /*                       case JSOP_TABLESWITCH:  op = JSOP_TABLESWITCHX; */  break;
806: /* MUTANT (del_stmt) */ /*                       case JSOP_TABLESWITCH:  op = JSOP_TABLESWITCHX; */  /*  break; */ 
806: /* MUTANT (del_stmt) */                      case JSOP_TABLESWITCH:  op = JSOP_TABLESWITCHX; /*  break; */ 
807: /* MUTANT (del_stmt) */ /*                       case JSOP_LOOKUPSWITCH: op = JSOP_LOOKUPSWITCHX; */  break;
807: /* MUTANT (del_stmt) */ /*                       case JSOP_LOOKUPSWITCH: op = JSOP_LOOKUPSWITCHX; */  /*  break; */ 
807: /* MUTANT (del_stmt) */                      case JSOP_LOOKUPSWITCH: op = JSOP_LOOKUPSWITCHX; /*  break; */ 
808: /* MUTANT (del_stmt) */ /*                       default:                JS_ASSERT(0); */ 
808: /* MUTANT (rep_const) */                      default:                JS_ASSERT(1);
808: /* MUTANT (rep_const) */                      default:                JS_ASSERT(-1);
812: /* MUTANT (rep_op) */                    for (sd2 = sdtop; sd2 <= sdlimit && sd2->top == top; sd2++) {
812: /* MUTANT (rep_op) */                    for (sd2 = sdtop; sd2 > sdlimit && sd2->top == top; sd2++) {
812: /* MUTANT (rep_op) */                    for (sd2 = sdtop; sd2 >= sdlimit && sd2->top == top; sd2++) {
812: /* MUTANT (rep_op) */                    for (sd2 = sdtop; sd2 == sdlimit && sd2->top == top; sd2++) {
812: /* MUTANT (rep_op) */                    for (sd2 = sdtop; sd2 != sdlimit && sd2->top == top; sd2++) {
812: /* MUTANT (rep_op) */                    for (sd2 = sdtop; sd2 < sdlimit || sd2->top == top; sd2++) {
812: /* MUTANT (rep_op) */                    for (sd2 = sdtop; sd2 < sdlimit && sd2->top != top; sd2++) {
812: /* MUTANT (rep_op) */                    for (sd2 = sdtop; sd2 < sdlimit && sd2->top == top; sd2--) {
813: /* MUTANT (rep_op) */                        if (sd2 < sd) {
813: /* MUTANT (rep_op) */                        if (sd2 > sd) {
813: /* MUTANT (rep_op) */                        if (sd2 >= sd) {
813: /* MUTANT (rep_op) */                        if (sd2 == sd) {
813: /* MUTANT (rep_op) */                        if (sd2 != sd) {
813: /* MUTANT (negate) */                        if(! (sd2 <= sd)) {
825: /* MUTANT (del_stmt) */ /*                             sd2->offset += deltaFromTop; */ 
825: /* MUTANT (rep_op) */                            sd2->offset -= deltaFromTop;
825: /* MUTANT (rep_op) */                            sd2->offset *= deltaFromTop;
825: /* MUTANT (rep_op) */                            sd2->offset %= deltaFromTop;
826: /* MUTANT (del_stmt) */ /*                             deltaFromTop += JUMPX_OFFSET_LEN - JUMP_OFFSET_LEN; */ 
826: /* MUTANT (rep_op) */                            deltaFromTop -= JUMPX_OFFSET_LEN - JUMP_OFFSET_LEN;
826: /* MUTANT (rep_op) */                            deltaFromTop *= JUMPX_OFFSET_LEN - JUMP_OFFSET_LEN;
826: /* MUTANT (rep_op) */                            deltaFromTop %= JUMPX_OFFSET_LEN - JUMP_OFFSET_LEN;
833: /* MUTANT (del_stmt) */ /*                             sd2->offset += delta; */ 
833: /* MUTANT (rep_op) */                            sd2->offset -= delta;
833: /* MUTANT (rep_op) */                            sd2->offset *= delta;
833: /* MUTANT (rep_op) */                            sd2->offset %= delta;
836: /* MUTANT (rep_op) */                        delta -= JUMPX_OFFSET_LEN - JUMP_OFFSET_LEN;
836: /* MUTANT (rep_op) */                        delta *= JUMPX_OFFSET_LEN - JUMP_OFFSET_LEN;
836: /* MUTANT (rep_op) */                        delta %= JUMPX_OFFSET_LEN - JUMP_OFFSET_LEN;
840: /* MUTANT (rep_const) */                    sd = sd2 - 0;
840: /* MUTANT (rep_const) */                    sd = sd2 - -1;
840: /* MUTANT (rep_const) */                    sd = sd2 - ((1)+1);
845: /* MUTANT (rep_op) */        growth -= delta;
845: /* MUTANT (rep_op) */        growth *= delta;
845: /* MUTANT (rep_op) */        growth %= delta;
846: /* MUTANT (del_stmt) */ /*     } while (!done); */ 
846: /* MUTANT (negate) */    } while(! (!done));
848: /* MUTANT (negate) */    if(! (growth)) {
853: /* MUTANT (rep_op) */               passes, offset - growth, offset, growth);
853: /* MUTANT (rep_op) */               passes, offset * growth, offset, growth);
853: /* MUTANT (rep_op) */               passes, offset % growth, offset, growth);
861: /* MUTANT (del_stmt) */ /*         length = offset + growth; */ 
861: /* MUTANT (rep_op) */        length = offset - growth;
861: /* MUTANT (rep_op) */        length = offset * growth;
861: /* MUTANT (rep_op) */        length = offset % growth;
862: /* MUTANT (del_stmt) */ /*         next = base + length; */ 
862: /* MUTANT (rep_op) */        next = base - length;
862: /* MUTANT (rep_op) */        next = base * length;
862: /* MUTANT (rep_op) */        next = base % length;
863: /* MUTANT (rep_op) */        if (next <= limit) {
863: /* MUTANT (rep_op) */        if (next < limit) {
863: /* MUTANT (rep_op) */        if (next >= limit) {
863: /* MUTANT (rep_op) */        if (next == limit) {
863: /* MUTANT (rep_op) */        if (next != limit) {
863: /* MUTANT (negate) */        if(! (next > limit)) {
864: /* MUTANT (del_stmt) */ /*             JS_ASSERT(length > BYTECODE_CHUNK); */ 
864: /* MUTANT (rep_op) */            JS_ASSERT(length <= BYTECODE_CHUNK);
864: /* MUTANT (rep_op) */            JS_ASSERT(length < BYTECODE_CHUNK);
864: /* MUTANT (rep_op) */            JS_ASSERT(length >= BYTECODE_CHUNK);
864: /* MUTANT (rep_op) */            JS_ASSERT(length == BYTECODE_CHUNK);
864: /* MUTANT (rep_op) */            JS_ASSERT(length != BYTECODE_CHUNK);
865: /* MUTANT (del_stmt) */ /*             size = BYTECODE_SIZE(PTRDIFF(limit, base, jsbytecode)); */ 
866: /* MUTANT (del_stmt) */ /*             incr = BYTECODE_SIZE(length) - size; */ 
867: /* MUTANT (del_stmt) */ /*             JS_ARENA_GROW_CAST(base, jsbytecode *, cg->codePool, size, incr); */ 
868: /* MUTANT (negate) */            if(! (!base)) {
869: /* MUTANT (del_stmt) */ /*                 JS_ReportOutOfMemory(cx); */ 
870: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
873: /* MUTANT (del_stmt) */ /*             CG_LIMIT(cg) = next = base + length; */ 
873: /* MUTANT (rep_op) */            CG_LIMIT(cg) = next = base - length;
873: /* MUTANT (rep_op) */            CG_LIMIT(cg) = next = base * length;
873: /* MUTANT (rep_op) */            CG_LIMIT(cg) = next = base % length;
883: /* MUTANT (del_stmt) */ /*         guard.top = -1; */ 
883: /* MUTANT (rep_const) */        guard.top = 0;
883: /* MUTANT (rep_const) */        guard.top = 1;
883: /* MUTANT (rep_const) */        guard.top = ((-1)+1);
883: /* MUTANT (rep_const) */        guard.top = ((-1)-1);
884: /* MUTANT (del_stmt) */ /*         guard.offset = offset + growth; */ 
884: /* MUTANT (rep_op) */        guard.offset = offset - growth;
884: /* MUTANT (rep_op) */        guard.offset = offset * growth;
884: /* MUTANT (rep_op) */        guard.offset = offset % growth;
885: /* MUTANT (del_stmt) */ /*         guard.before = offset; */ 
886: /* MUTANT (del_stmt) */ /*         guard.target = NULL; */ 
897: /* MUTANT (rep_op) */    JS_ASSERT(sd != sdlimit);
898: /* MUTANT (del_stmt) */ /*     top = -1; */ 
898: /* MUTANT (rep_const) */    top = 0;
898: /* MUTANT (rep_const) */    top = 1;
898: /* MUTANT (rep_const) */    top = ((-1)+1);
898: /* MUTANT (rep_const) */    top = ((-1)-1);
899: /* MUTANT (rep_op) */    while (++sd >= sdbase) {
899: /* MUTANT (rep_op) */    while (--sd <= sdbase) {
899: /* MUTANT (rep_op) */    while (--sd < sdbase) {
899: /* MUTANT (rep_op) */    while (--sd > sdbase) {
899: /* MUTANT (rep_op) */    while (--sd == sdbase) {
899: /* MUTANT (rep_op) */    while (--sd != sdbase) {
899: /* MUTANT (negate) */    while(! (--sd >= sdbase)) {
900: /* MUTANT (rep_op) */        if (sd->top == top) {
900: /* MUTANT (negate) */        if(! (sd->top != top)) {
901: /* MUTANT (del_stmt) */ /*             top = sd->top; */ 
902: /* MUTANT (del_stmt) */ /*             op = (JSOp) base[top]; */ 
903: /* MUTANT (del_stmt) */ /*             type = (js_CodeSpec[op].format & JOF_TYPEMASK); */ 
905: /* MUTANT (rep_op) */            for (sd2 = sd - 1; sd2 <= sdbase && sd2->top == top; sd2--)
905: /* MUTANT (rep_op) */            for (sd2 = sd - 1; sd2 < sdbase && sd2->top == top; sd2--)
905: /* MUTANT (rep_op) */            for (sd2 = sd - 1; sd2 > sdbase && sd2->top == top; sd2--)
905: /* MUTANT (rep_op) */            for (sd2 = sd - 1; sd2 == sdbase && sd2->top == top; sd2--)
905: /* MUTANT (rep_op) */            for (sd2 = sd - 1; sd2 != sdbase && sd2->top == top; sd2--)
905: /* MUTANT (rep_op) */            for (sd2 = sd - 1; sd2 >= sdbase || sd2->top == top; sd2--)
905: /* MUTANT (rep_op) */            for (sd2 = sd - 1; sd2 >= sdbase && sd2->top != top; sd2--)
905: /* MUTANT (rep_op) */            for (sd2 = sd - 1; sd2 >= sdbase && sd2->top == top; sd2++)
905: /* MUTANT (rep_const) */            for (sd2 = sd - 0; sd2 >= sdbase && sd2->top == top; sd2--)
905: /* MUTANT (rep_const) */            for (sd2 = sd - -1; sd2 >= sdbase && sd2->top == top; sd2--)
905: /* MUTANT (rep_const) */            for (sd2 = sd - ((1)+1); sd2 >= sdbase && sd2->top == top; sd2--)
907: /* MUTANT (del_stmt) */ /*             sd2++; */ 
907: /* MUTANT (rep_op) */            sd2--;
908: /* MUTANT (del_stmt) */ /*             pivot = sd2->offset; */ 
909: /* MUTANT (del_stmt) */ /*             JS_ASSERT(top == sd2->before); */ 
909: /* MUTANT (rep_op) */            JS_ASSERT(top != sd2->before);
912: /* MUTANT (rep_op) */        oldpc = base - sd->before;
912: /* MUTANT (rep_op) */        oldpc = base * sd->before;
912: /* MUTANT (rep_op) */        oldpc = base % sd->before;
913: /* MUTANT (del_stmt) */ /*         span = SD_SPAN(sd, pivot); */ 
925: /* MUTANT (negate) */        if(! (!JOF_TYPE_IS_EXTENDED_JUMP(type))) {
926: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JUMP_OFFSET_MIN <= span && span <= JUMP_OFFSET_MAX); */ 
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN < span && span <= JUMP_OFFSET_MAX);
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN > span && span <= JUMP_OFFSET_MAX);
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN >= span && span <= JUMP_OFFSET_MAX);
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN == span && span <= JUMP_OFFSET_MAX);
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN != span && span <= JUMP_OFFSET_MAX);
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN <= span || span <= JUMP_OFFSET_MAX);
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN <= span && span < JUMP_OFFSET_MAX);
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN <= span && span > JUMP_OFFSET_MAX);
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN <= span && span >= JUMP_OFFSET_MAX);
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN <= span && span == JUMP_OFFSET_MAX);
926: /* MUTANT (rep_op) */            JS_ASSERT(JUMP_OFFSET_MIN <= span && span != JUMP_OFFSET_MAX);
927: /* MUTANT (del_stmt) */ /*             SET_JUMP_OFFSET(oldpc, span); */ 
928: /* MUTANT (del_stmt) */ /*             continue; */ 
938: /* MUTANT (rep_op) */        pc = base - sd->offset;
938: /* MUTANT (rep_op) */        pc = base * sd->offset;
938: /* MUTANT (rep_op) */        pc = base % sd->offset;
939: /* MUTANT (del_stmt) */ /*         delta = offset - sd->before; */ 
940: /* MUTANT (del_stmt) */ /*         JS_ASSERT(delta >= 1 + JUMP_OFFSET_LEN); */ 
940: /* MUTANT (rep_op) */        JS_ASSERT(delta <= 1 + JUMP_OFFSET_LEN);
940: /* MUTANT (rep_op) */        JS_ASSERT(delta < 1 + JUMP_OFFSET_LEN);
940: /* MUTANT (rep_op) */        JS_ASSERT(delta > 1 + JUMP_OFFSET_LEN);
940: /* MUTANT (rep_op) */        JS_ASSERT(delta == 1 + JUMP_OFFSET_LEN);
940: /* MUTANT (rep_op) */        JS_ASSERT(delta != 1 + JUMP_OFFSET_LEN);
940: /* MUTANT (rep_op) */        JS_ASSERT(delta >= 1 - JUMP_OFFSET_LEN);
940: /* MUTANT (rep_op) */        JS_ASSERT(delta >= 1 * JUMP_OFFSET_LEN);
940: /* MUTANT (rep_op) */        JS_ASSERT(delta >= 1 % JUMP_OFFSET_LEN);
940: /* MUTANT (rep_const) */        JS_ASSERT(delta >= 0 + JUMP_OFFSET_LEN);
940: /* MUTANT (rep_const) */        JS_ASSERT(delta >= -1 + JUMP_OFFSET_LEN);
940: /* MUTANT (rep_const) */        JS_ASSERT(delta >= ((1)+1) + JUMP_OFFSET_LEN);
948: /* MUTANT (del_stmt) */ /*         offset = sd->before + 1; */ 
948: /* MUTANT (rep_op) */        offset = sd->before - 1;
948: /* MUTANT (rep_op) */        offset = sd->before * 1;
948: /* MUTANT (rep_op) */        offset = sd->before % 1;
948: /* MUTANT (rep_const) */        offset = sd->before + 0;
948: /* MUTANT (rep_const) */        offset = sd->before + -1;
948: /* MUTANT (rep_const) */        offset = sd->before + ((1)+1);
949: /* MUTANT (del_stmt) */ /*         size = BYTECODE_SIZE(delta - (1 + JUMP_OFFSET_LEN)); */ 
949: /* MUTANT (rep_op) */        size = BYTECODE_SIZE(delta - (1 - JUMP_OFFSET_LEN));
949: /* MUTANT (rep_op) */        size = BYTECODE_SIZE(delta - (1 * JUMP_OFFSET_LEN));
949: /* MUTANT (rep_op) */        size = BYTECODE_SIZE(delta - (1 % JUMP_OFFSET_LEN));
949: /* MUTANT (rep_const) */        size = BYTECODE_SIZE(delta - (0 + JUMP_OFFSET_LEN));
949: /* MUTANT (rep_const) */        size = BYTECODE_SIZE(delta - (-1 + JUMP_OFFSET_LEN));
949: /* MUTANT (rep_const) */        size = BYTECODE_SIZE(delta - (((1)+1) + JUMP_OFFSET_LEN));
950: /* MUTANT (negate) */        if(! (size)) {
951: /* MUTANT (rep_op) */            memmove(pc - 1 + JUMPX_OFFSET_LEN,
951: /* MUTANT (rep_op) */            memmove(pc * 1 + JUMPX_OFFSET_LEN,
951: /* MUTANT (rep_op) */            memmove(pc % 1 + JUMPX_OFFSET_LEN,
951: /* MUTANT (rep_op) */            memmove(pc + 1 - JUMPX_OFFSET_LEN,
951: /* MUTANT (rep_op) */            memmove(pc + 1 * JUMPX_OFFSET_LEN,
951: /* MUTANT (rep_op) */            memmove(pc + 1 % JUMPX_OFFSET_LEN,
951: /* MUTANT (rep_const) */            memmove(pc + 0 + JUMPX_OFFSET_LEN,
951: /* MUTANT (rep_const) */            memmove(pc + -1 + JUMPX_OFFSET_LEN,
951: /* MUTANT (rep_const) */            memmove(pc + ((1)+1) + JUMPX_OFFSET_LEN,
952: /* MUTANT (rep_op) */                    oldpc - 1 + JUMP_OFFSET_LEN,
952: /* MUTANT (rep_op) */                    oldpc * 1 + JUMP_OFFSET_LEN,
952: /* MUTANT (rep_op) */                    oldpc % 1 + JUMP_OFFSET_LEN,
952: /* MUTANT (rep_op) */                    oldpc + 1 - JUMP_OFFSET_LEN,
952: /* MUTANT (rep_op) */                    oldpc + 1 * JUMP_OFFSET_LEN,
952: /* MUTANT (rep_op) */                    oldpc + 1 % JUMP_OFFSET_LEN,
952: /* MUTANT (rep_const) */                    oldpc + 0 + JUMP_OFFSET_LEN,
952: /* MUTANT (rep_const) */                    oldpc + -1 + JUMP_OFFSET_LEN,
952: /* MUTANT (rep_const) */                    oldpc + ((1)+1) + JUMP_OFFSET_LEN,
959: /* MUTANT (negate) */    if(! (growth)) {
968: /* MUTANT (del_stmt) */ /*         offset = growth = 0; */ 
968: /* MUTANT (rep_const) */        offset = growth = 1;
968: /* MUTANT (rep_const) */        offset = growth = -1;
969: /* MUTANT (del_stmt) */ /*         sd = sdbase; */ 
970: /* MUTANT (rep_op) */        for (sn = cg->main.notes, snlimit = sn - cg->main.noteCount;
970: /* MUTANT (rep_op) */        for (sn = cg->main.notes, snlimit = sn * cg->main.noteCount;
970: /* MUTANT (rep_op) */        for (sn = cg->main.notes, snlimit = sn % cg->main.noteCount;
971: /* MUTANT (del_stmt) */ /*              sn < snlimit; */ 
971: /* MUTANT (rep_op) */             sn <= snlimit;
971: /* MUTANT (rep_op) */             sn > snlimit;
971: /* MUTANT (rep_op) */             sn >= snlimit;
971: /* MUTANT (rep_op) */             sn == snlimit;
971: /* MUTANT (rep_op) */             sn != snlimit;
978: /* MUTANT (del_stmt) */ /*             offset += SN_DELTA(sn); */ 
978: /* MUTANT (rep_op) */            offset -= SN_DELTA(sn);
978: /* MUTANT (rep_op) */            offset *= SN_DELTA(sn);
978: /* MUTANT (rep_op) */            offset %= SN_DELTA(sn);
979: /* MUTANT (rep_op) */            while (sd <= sdlimit && sd->before < offset) {
979: /* MUTANT (rep_op) */            while (sd > sdlimit && sd->before < offset) {
979: /* MUTANT (rep_op) */            while (sd >= sdlimit && sd->before < offset) {
979: /* MUTANT (rep_op) */            while (sd == sdlimit && sd->before < offset) {
979: /* MUTANT (rep_op) */            while (sd != sdlimit && sd->before < offset) {
979: /* MUTANT (rep_op) */            while (sd < sdlimit || sd->before < offset) {
979: /* MUTANT (rep_op) */            while (sd < sdlimit && sd->before <= offset) {
979: /* MUTANT (rep_op) */            while (sd < sdlimit && sd->before > offset) {
979: /* MUTANT (rep_op) */            while (sd < sdlimit && sd->before >= offset) {
979: /* MUTANT (rep_op) */            while (sd < sdlimit && sd->before == offset) {
979: /* MUTANT (rep_op) */            while (sd < sdlimit && sd->before != offset) {
979: /* MUTANT (negate) */            while(! (sd < sdlimit && sd->before < offset)) {
985: /* MUTANT (del_stmt) */ /*                 sd2 = sd + 1; */ 
985: /* MUTANT (rep_op) */                sd2 = sd - 1;
985: /* MUTANT (rep_op) */                sd2 = sd * 1;
985: /* MUTANT (rep_op) */                sd2 = sd % 1;
985: /* MUTANT (rep_const) */                sd2 = sd + 0;
985: /* MUTANT (rep_const) */                sd2 = sd + -1;
985: /* MUTANT (rep_const) */                sd2 = sd + ((1)+1);
986: /* MUTANT (rep_op) */                if (sd2 != sdlimit)
986: /* MUTANT (negate) */                if(! (sd2 == sdlimit))
988: /* MUTANT (del_stmt) */ /*                 delta = sd2->offset - (sd2->before + growth); */ 
988: /* MUTANT (rep_op) */                delta = sd2->offset - (sd2->before - growth);
988: /* MUTANT (rep_op) */                delta = sd2->offset - (sd2->before * growth);
988: /* MUTANT (rep_op) */                delta = sd2->offset - (sd2->before % growth);
989: /* MUTANT (rep_op) */                if (delta <= 0) {
989: /* MUTANT (rep_op) */                if (delta < 0) {
989: /* MUTANT (rep_op) */                if (delta >= 0) {
989: /* MUTANT (rep_op) */                if (delta == 0) {
989: /* MUTANT (rep_op) */                if (delta != 0) {
989: /* MUTANT (rep_const) */                if (delta > 1) {
989: /* MUTANT (rep_const) */                if (delta > -1) {
989: /* MUTANT (negate) */                if(! (delta > 0)) {
990: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(delta == JUMPX_OFFSET_LEN - JUMP_OFFSET_LEN); */ 
990: /* MUTANT (rep_op) */                    JS_ASSERT(delta != JUMPX_OFFSET_LEN - JUMP_OFFSET_LEN);
991: /* MUTANT (del_stmt) */ /*                     sn = js_AddToSrcNoteDelta(cx, cg, sn, delta); */ 
992: /* MUTANT (negate) */                    if(! (!sn))
994: /* MUTANT (del_stmt) */ /*                     snlimit = cg->main.notes + cg->main.noteCount; */ 
994: /* MUTANT (rep_op) */                    snlimit = cg->main.notes - cg->main.noteCount;
994: /* MUTANT (rep_op) */                    snlimit = cg->main.notes * cg->main.noteCount;
994: /* MUTANT (rep_op) */                    snlimit = cg->main.notes % cg->main.noteCount;
995: /* MUTANT (del_stmt) */ /*                     growth += delta; */ 
995: /* MUTANT (rep_op) */                    growth -= delta;
995: /* MUTANT (rep_op) */                    growth *= delta;
995: /* MUTANT (rep_op) */                    growth %= delta;
997: /* MUTANT (rep_op) */                sd--;
1009: /* MUTANT (negate) */            if(! (spec->isSpanDep)) {
1010: /* MUTANT (del_stmt) */ /*                 pivot = offset + spec->offsetBias; */ 
1010: /* MUTANT (rep_op) */                pivot = offset - spec->offsetBias;
1010: /* MUTANT (rep_op) */                pivot = offset * spec->offsetBias;
1010: /* MUTANT (rep_op) */                pivot = offset % spec->offsetBias;
1011: /* MUTANT (del_stmt) */ /*                 n = spec->arity; */ 
1012: /* MUTANT (rep_op) */                for (i = 0; i <= n; i++) {
1012: /* MUTANT (rep_op) */                for (i = 0; i > n; i++) {
1012: /* MUTANT (rep_op) */                for (i = 0; i >= n; i++) {
1012: /* MUTANT (rep_op) */                for (i = 0; i == n; i++) {
1012: /* MUTANT (rep_op) */                for (i = 0; i != n; i++) {
1012: /* MUTANT (rep_op) */                for (i = 0; i < n; i--) {
1012: /* MUTANT (rep_const) */                for (i = 1; i < n; i++) {
1012: /* MUTANT (rep_const) */                for (i = -1; i < n; i++) {
1013: /* MUTANT (del_stmt) */ /*                     span = js_GetSrcNoteOffset(sn, i); */ 
1014: /* MUTANT (rep_op) */                    if (span != 0)
1014: /* MUTANT (rep_const) */                    if (span == 1)
1014: /* MUTANT (rep_const) */                    if (span == -1)
1014: /* MUTANT (negate) */                    if(! (span == 0))
1016: /* MUTANT (del_stmt) */ /*                     target = pivot + span * spec->isSpanDep; */ 
1016: /* MUTANT (rep_op) */                    target = pivot - span * spec->isSpanDep;
1016: /* MUTANT (rep_op) */                    target = pivot * span * spec->isSpanDep;
1016: /* MUTANT (rep_op) */                    target = pivot % span * spec->isSpanDep;
1018: /* MUTANT (rep_op) */                                             (target <= pivot)
1018: /* MUTANT (rep_op) */                                             (target < pivot)
1018: /* MUTANT (rep_op) */                                             (target > pivot)
1018: /* MUTANT (rep_op) */                                             (target == pivot)
1018: /* MUTANT (rep_op) */                                             (target != pivot)
1020: /* MUTANT (rep_const) */                                             : 1,
1020: /* MUTANT (rep_const) */                                             : -1,
1029: /* MUTANT (del_stmt) */ /*                     target += sd2->offset - sd2->before; */ 
1029: /* MUTANT (rep_op) */                    target -= sd2->offset - sd2->before;
1029: /* MUTANT (rep_op) */                    target *= sd2->offset - sd2->before;
1029: /* MUTANT (rep_op) */                    target %= sd2->offset - sd2->before;
1030: /* MUTANT (del_stmt) */ /*                     span = target - (pivot + growth); */ 
1030: /* MUTANT (rep_op) */                    span = target - (pivot - growth);
1030: /* MUTANT (rep_op) */                    span = target - (pivot * growth);
1030: /* MUTANT (rep_op) */                    span = target - (pivot % growth);
1031: /* MUTANT (del_stmt) */ /*                     span *= spec->isSpanDep; */ 
1031: /* MUTANT (rep_op) */                    span += spec->isSpanDep;
1031: /* MUTANT (rep_op) */                    span -= spec->isSpanDep;
1031: /* MUTANT (rep_op) */                    span %= spec->isSpanDep;
1032: /* MUTANT (del_stmt) */ /*                     noteIndex = sn - cg->main.notes; */ 
1033: /* MUTANT (negate) */                    if(! (!js_SetSrcNoteOffset(cx, cg, noteIndex, i, span)))
1035: /* MUTANT (del_stmt) */ /*                     sn = cg->main.notes + noteIndex; */ 
1035: /* MUTANT (rep_op) */                    sn = cg->main.notes - noteIndex;
1035: /* MUTANT (rep_op) */                    sn = cg->main.notes * noteIndex;
1035: /* MUTANT (rep_op) */                    sn = cg->main.notes % noteIndex;
1036: /* MUTANT (del_stmt) */ /*                     snlimit = cg->main.notes + cg->main.noteCount; */ 
1036: /* MUTANT (rep_op) */                    snlimit = cg->main.notes - cg->main.noteCount;
1036: /* MUTANT (rep_op) */                    snlimit = cg->main.notes * cg->main.noteCount;
1036: /* MUTANT (rep_op) */                    snlimit = cg->main.notes % cg->main.noteCount;
1040: /* MUTANT (rep_op) */        cg->main.lastNoteOffset -= growth;
1040: /* MUTANT (rep_op) */        cg->main.lastNoteOffset *= growth;
1040: /* MUTANT (rep_op) */        cg->main.lastNoteOffset %= growth;
1046: /* MUTANT (rep_op) */        for (tn = cg->tryBase, tnlimit = cg->tryNext; tn <= tnlimit; tn++) {
1046: /* MUTANT (rep_op) */        for (tn = cg->tryBase, tnlimit = cg->tryNext; tn > tnlimit; tn++) {
1046: /* MUTANT (rep_op) */        for (tn = cg->tryBase, tnlimit = cg->tryNext; tn >= tnlimit; tn++) {
1046: /* MUTANT (rep_op) */        for (tn = cg->tryBase, tnlimit = cg->tryNext; tn == tnlimit; tn++) {
1046: /* MUTANT (rep_op) */        for (tn = cg->tryBase, tnlimit = cg->tryNext; tn != tnlimit; tn++) {
1046: /* MUTANT (rep_op) */        for (tn = cg->tryBase, tnlimit = cg->tryNext; tn < tnlimit; tn--) {
1052: /* MUTANT (del_stmt) */ /*             offset = tn->start; */ 
1053: /* MUTANT (del_stmt) */ /*             sd = FindNearestSpanDep(cg, offset, 0, &guard); */ 
1053: /* MUTANT (rep_const) */            sd = FindNearestSpanDep(cg, offset, 1, &guard);
1053: /* MUTANT (rep_const) */            sd = FindNearestSpanDep(cg, offset, -1, &guard);
1054: /* MUTANT (del_stmt) */ /*             delta = sd->offset - sd->before; */ 
1055: /* MUTANT (del_stmt) */ /*             tn->start = offset + delta; */ 
1055: /* MUTANT (rep_op) */            tn->start = offset - delta;
1055: /* MUTANT (rep_op) */            tn->start = offset * delta;
1055: /* MUTANT (rep_op) */            tn->start = offset % delta;
1061: /* MUTANT (del_stmt) */ /*             length = tn->length; */ 
1062: /* MUTANT (del_stmt) */ /*             sd2 = FindNearestSpanDep(cg, offset + length, sd - sdbase, &guard); */ 
1062: /* MUTANT (rep_op) */            sd2 = FindNearestSpanDep(cg, offset - length, sd - sdbase, &guard);
1062: /* MUTANT (rep_op) */            sd2 = FindNearestSpanDep(cg, offset * length, sd - sdbase, &guard);
1062: /* MUTANT (rep_op) */            sd2 = FindNearestSpanDep(cg, offset % length, sd - sdbase, &guard);
1063: /* MUTANT (rep_op) */            if (sd2 == sd)
1063: /* MUTANT (negate) */            if(! (sd2 != sd))
1064: /* MUTANT (rep_op) */                tn->length = length - sd2->offset - sd2->before - delta;
1064: /* MUTANT (rep_op) */                tn->length = length * sd2->offset - sd2->before - delta;
1064: /* MUTANT (rep_op) */                tn->length = length % sd2->offset - sd2->before - delta;
1070: /* MUTANT (del_stmt) */ /*             offset = tn->catchStart; */ 
1071: /* MUTANT (rep_op) */            if (offset == 0) {
1071: /* MUTANT (rep_const) */            if (offset != 1) {
1071: /* MUTANT (rep_const) */            if (offset != -1) {
1071: /* MUTANT (negate) */            if(! (offset != 0)) {
1072: /* MUTANT (del_stmt) */ /*                 sd = FindNearestSpanDep(cg, offset, sd2 - sdbase, &guard); */ 
1073: /* MUTANT (del_stmt) */ /*                 tn->catchStart = offset + sd->offset - sd->before; */ 
1073: /* MUTANT (rep_op) */                tn->catchStart = offset - sd->offset - sd->before;
1073: /* MUTANT (rep_op) */                tn->catchStart = offset * sd->offset - sd->before;
1073: /* MUTANT (rep_op) */                tn->catchStart = offset % sd->offset - sd->before;
1080: /* MUTANT (del_stmt) */ /*     uintN bigspans = 0; */ 
1080: /* MUTANT (rep_const) */    uintN bigspans = 1;
1080: /* MUTANT (rep_const) */    uintN bigspans = -1;
1081: /* MUTANT (del_stmt) */ /*     top = -1; */ 
1081: /* MUTANT (rep_const) */    top = 0;
1081: /* MUTANT (rep_const) */    top = 1;
1081: /* MUTANT (rep_const) */    top = ((-1)+1);
1081: /* MUTANT (rep_const) */    top = ((-1)-1);
1082: /* MUTANT (rep_op) */    for (sd = sdbase; sd <= sdlimit; sd++) {
1082: /* MUTANT (rep_op) */    for (sd = sdbase; sd > sdlimit; sd++) {
1082: /* MUTANT (rep_op) */    for (sd = sdbase; sd >= sdlimit; sd++) {
1082: /* MUTANT (rep_op) */    for (sd = sdbase; sd == sdlimit; sd++) {
1082: /* MUTANT (rep_op) */    for (sd = sdbase; sd != sdlimit; sd++) {
1082: /* MUTANT (rep_op) */    for (sd = sdbase; sd < sdlimit; sd--) {
1083: /* MUTANT (del_stmt) */ /*         offset = sd->offset; */ 
1086: /* MUTANT (rep_op) */        if (sd->top == top) {
1086: /* MUTANT (negate) */        if(! (sd->top != top)) {
1087: /* MUTANT (rep_op) */            JS_ASSERT(top != -1 ||
1087: /* MUTANT (rep_op) */            JS_ASSERT(top == -1 &&
1087: /* MUTANT (rep_const) */            JS_ASSERT(top == 0 ||
1087: /* MUTANT (rep_const) */            JS_ASSERT(top == 1 ||
1087: /* MUTANT (rep_const) */            JS_ASSERT(top == ((-1)+1) ||
1087: /* MUTANT (rep_const) */            JS_ASSERT(top == ((-1)-1) ||
1088: /* MUTANT (rep_op) */                      !JOF_TYPE_IS_EXTENDED_JUMP(type) &&
1089: /* MUTANT (rep_op) */                      bigspans == 0);
1089: /* MUTANT (rep_const) */                      bigspans != 1);
1089: /* MUTANT (rep_const) */                      bigspans != -1);
1090: /* MUTANT (del_stmt) */ /*             bigspans = 0; */ 
1090: /* MUTANT (rep_const) */            bigspans = 1;
1090: /* MUTANT (rep_const) */            bigspans = -1;
1091: /* MUTANT (del_stmt) */ /*             top = sd->top; */ 
1092: /* MUTANT (del_stmt) */ /*             JS_ASSERT(top == sd->before); */ 
1092: /* MUTANT (rep_op) */            JS_ASSERT(top != sd->before);
1093: /* MUTANT (del_stmt) */ /*             op = (JSOp) base[offset]; */ 
1094: /* MUTANT (del_stmt) */ /*             type = (js_CodeSpec[op].format & JOF_TYPEMASK); */ 
1095: /* MUTANT (rep_op) */            JS_ASSERT(type != JOF_JUMP ||
1095: /* MUTANT (rep_op) */            JS_ASSERT(type == JOF_JUMP &&
1096: /* MUTANT (rep_op) */                      type != JOF_JUMPX ||
1096: /* MUTANT (rep_op) */                      type == JOF_JUMPX &&
1097: /* MUTANT (rep_op) */                      type != JOF_TABLESWITCH ||
1097: /* MUTANT (rep_op) */                      type == JOF_TABLESWITCH &&
1098: /* MUTANT (rep_op) */                      type != JOF_TABLESWITCHX ||
1098: /* MUTANT (rep_op) */                      type == JOF_TABLESWITCHX &&
1099: /* MUTANT (rep_op) */                      type != JOF_LOOKUPSWITCH ||
1099: /* MUTANT (rep_op) */                      type == JOF_LOOKUPSWITCH &&
1100: /* MUTANT (rep_op) */                      type != JOF_LOOKUPSWITCHX);
1101: /* MUTANT (del_stmt) */ /*             pivot = offset; */ 
1104: /* MUTANT (rep_op) */        pc = base - offset;
1104: /* MUTANT (rep_op) */        pc = base * offset;
1104: /* MUTANT (rep_op) */        pc = base % offset;
1105: /* MUTANT (negate) */        if(! (JOF_TYPE_IS_EXTENDED_JUMP(type))) {
1106: /* MUTANT (del_stmt) */ /*             span = GET_JUMPX_OFFSET(pc); */ 
1107: /* MUTANT (rep_op) */            if (span <= JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span) {
1107: /* MUTANT (rep_op) */            if (span > JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span) {
1107: /* MUTANT (rep_op) */            if (span >= JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span) {
1107: /* MUTANT (rep_op) */            if (span == JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span) {
1107: /* MUTANT (rep_op) */            if (span != JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span) {
1107: /* MUTANT (rep_op) */            if (span < JUMP_OFFSET_MIN && JUMP_OFFSET_MAX < span) {
1107: /* MUTANT (rep_op) */            if (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX <= span) {
1107: /* MUTANT (rep_op) */            if (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX > span) {
1107: /* MUTANT (rep_op) */            if (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX >= span) {
1107: /* MUTANT (rep_op) */            if (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX == span) {
1107: /* MUTANT (rep_op) */            if (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX != span) {
1107: /* MUTANT (negate) */            if(! (span < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < span)) {
1108: /* MUTANT (del_stmt) */ /*                 bigspans++; */ 
1108: /* MUTANT (rep_op) */                bigspans--;
1110: /* MUTANT (rep_op) */                JS_ASSERT(type != JOF_TABLESWITCHX ||
1110: /* MUTANT (rep_op) */                JS_ASSERT(type == JOF_TABLESWITCHX &&
1111: /* MUTANT (rep_op) */                          type != JOF_LOOKUPSWITCHX);
1114: /* MUTANT (del_stmt) */ /*             span = GET_JUMP_OFFSET(pc); */ 
1116: /* MUTANT (rep_op) */        JS_ASSERT(SD_SPAN(sd, pivot) != span);
1118: /* MUTANT (rep_op) */    JS_ASSERT(!JOF_TYPE_IS_EXTENDED_JUMP(type) && bigspans != 0);
1118: /* MUTANT (rep_op) */    JS_ASSERT(!JOF_TYPE_IS_EXTENDED_JUMP(type) || bigspans == 0);
1118: /* MUTANT (rep_const) */    JS_ASSERT(!JOF_TYPE_IS_EXTENDED_JUMP(type) || bigspans != 1);
1118: /* MUTANT (rep_const) */    JS_ASSERT(!JOF_TYPE_IS_EXTENDED_JUMP(type) || bigspans != -1);
1130: /* MUTANT (del_stmt) */ /*     cg->spanDeps = NULL; */ 
1131: /* MUTANT (del_stmt) */ /*     FreeJumpTargets(cg, cg->jumpTargets); */ 
1132: /* MUTANT (del_stmt) */ /*     cg->jumpTargets = NULL; */ 
1133: /* MUTANT (del_stmt) */ /*     cg->numSpanDeps = cg->numJumpTargets = 0; */ 
1133: /* MUTANT (rep_const) */    cg->numSpanDeps = cg->numJumpTargets = 1;
1133: /* MUTANT (rep_const) */    cg->numSpanDeps = cg->numJumpTargets = -1;
1134: /* MUTANT (del_stmt) */ /*     cg->spanDepTodo = CG_OFFSET(cg); */ 
1135: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1141: /* MUTANT (del_stmt) */ /*     JSBool extend; */ 
1142: /* MUTANT (del_stmt) */ /*     ptrdiff_t jmp; */ 
1143: /* MUTANT (del_stmt) */ /*     jsbytecode *pc; */ 
1145: /* MUTANT (del_stmt) */ /*     extend = off < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < off; */ 
1145: /* MUTANT (rep_op) */    extend = off <= JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < off;
1145: /* MUTANT (rep_op) */    extend = off > JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < off;
1145: /* MUTANT (rep_op) */    extend = off >= JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < off;
1145: /* MUTANT (rep_op) */    extend = off == JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < off;
1145: /* MUTANT (rep_op) */    extend = off != JUMP_OFFSET_MIN || JUMP_OFFSET_MAX < off;
1145: /* MUTANT (rep_op) */    extend = off < JUMP_OFFSET_MIN && JUMP_OFFSET_MAX < off;
1145: /* MUTANT (rep_op) */    extend = off < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX <= off;
1145: /* MUTANT (rep_op) */    extend = off < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX > off;
1145: /* MUTANT (rep_op) */    extend = off < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX >= off;
1145: /* MUTANT (rep_op) */    extend = off < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX == off;
1145: /* MUTANT (rep_op) */    extend = off < JUMP_OFFSET_MIN || JUMP_OFFSET_MAX != off;
1146: /* MUTANT (rep_op) */    if (extend || !cg->spanDeps && !BuildSpanDepTable(cx, cg))
1146: /* MUTANT (rep_op) */    if (extend && !cg->spanDeps || !BuildSpanDepTable(cx, cg))
1146: /* MUTANT (negate) */    if(! (extend && !cg->spanDeps && !BuildSpanDepTable(cx, cg)))
1149: /* MUTANT (del_stmt) */ /*     jmp = js_Emit3(cx, cg, op, JUMP_OFFSET_HI(off), JUMP_OFFSET_LO(off)); */ 
1150: /* MUTANT (rep_op) */    if (jmp <= 0 && (extend || cg->spanDeps)) {
1150: /* MUTANT (rep_op) */    if (jmp < 0 && (extend || cg->spanDeps)) {
1150: /* MUTANT (rep_op) */    if (jmp > 0 && (extend || cg->spanDeps)) {
1150: /* MUTANT (rep_op) */    if (jmp == 0 && (extend || cg->spanDeps)) {
1150: /* MUTANT (rep_op) */    if (jmp != 0 && (extend || cg->spanDeps)) {
1150: /* MUTANT (rep_op) */    if (jmp >= 0 || (extend || cg->spanDeps)) {
1150: /* MUTANT (rep_op) */    if (jmp >= 0 && (extend && cg->spanDeps)) {
1150: /* MUTANT (rep_const) */    if (jmp >= 1 && (extend || cg->spanDeps)) {
1150: /* MUTANT (rep_const) */    if (jmp >= -1 && (extend || cg->spanDeps)) {
1150: /* MUTANT (negate) */    if(! (jmp >= 0 && (extend || cg->spanDeps))) {
1151: /* MUTANT (del_stmt) */ /*         pc = CG_CODE(cg, jmp); */ 
1152: /* MUTANT (negate) */        if(! (!AddSpanDep(cx, cg, pc, pc, off)))
1161: /* MUTANT (del_stmt) */ /*     JSSpanDep *sd; */ 
1162: /* MUTANT (del_stmt) */ /*     JSJumpTarget *jt; */ 
1163: /* MUTANT (del_stmt) */ /*     ptrdiff_t top; */ 
1165: /* MUTANT (negate) */    if(! (!cg->spanDeps))
1168: /* MUTANT (del_stmt) */ /*     sd = GetSpanDep(cg, pc); */ 
1169: /* MUTANT (del_stmt) */ /*     jt = sd->target; */ 
1170: /* MUTANT (negate) */    if(! (!JT_HAS_TAG(jt)))
1173: /* MUTANT (del_stmt) */ /*     top = sd->top; */ 
1174: /* MUTANT (rep_op) */    while (++sd >= cg->spanDeps && sd->top == top)
1174: /* MUTANT (rep_op) */    while (--sd <= cg->spanDeps && sd->top == top)
1174: /* MUTANT (rep_op) */    while (--sd < cg->spanDeps && sd->top == top)
1174: /* MUTANT (rep_op) */    while (--sd > cg->spanDeps && sd->top == top)
1174: /* MUTANT (rep_op) */    while (--sd == cg->spanDeps && sd->top == top)
1174: /* MUTANT (rep_op) */    while (--sd != cg->spanDeps && sd->top == top)
1174: /* MUTANT (rep_op) */    while (--sd >= cg->spanDeps || sd->top == top)
1174: /* MUTANT (rep_op) */    while (--sd >= cg->spanDeps && sd->top != top)
1174: /* MUTANT (negate) */    while(! (--sd >= cg->spanDeps && sd->top == top))
1176: /* MUTANT (del_stmt) */ /*     sd++; */ 
1176: /* MUTANT (rep_op) */    sd--;
1177: /* MUTANT (del_stmt) */ /*     return JT_CLR_TAG(jt)->offset - sd->offset; */ 
1184: /* MUTANT (negate) */    if(! (!cg->spanDeps)) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN < off && off <= JUMP_OFFSET_MAX) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN > off && off <= JUMP_OFFSET_MAX) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN >= off && off <= JUMP_OFFSET_MAX) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN == off && off <= JUMP_OFFSET_MAX) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN != off && off <= JUMP_OFFSET_MAX) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN <= off || off <= JUMP_OFFSET_MAX) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN <= off && off < JUMP_OFFSET_MAX) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN <= off && off > JUMP_OFFSET_MAX) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN <= off && off >= JUMP_OFFSET_MAX) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN <= off && off == JUMP_OFFSET_MAX) {
1185: /* MUTANT (rep_op) */        if (JUMP_OFFSET_MIN <= off && off != JUMP_OFFSET_MAX) {
1185: /* MUTANT (negate) */        if(! (JUMP_OFFSET_MIN <= off && off <= JUMP_OFFSET_MAX)) {
1186: /* MUTANT (del_stmt) */ /*             SET_JUMP_OFFSET(pc, off); */ 
1187: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
1190: /* MUTANT (negate) */        if(! (!BuildSpanDepTable(cx, cg)))
1200: /* MUTANT (del_stmt) */ /*     JSStmtInfo *stmt; */ 
1203: /* MUTANT (rep_op) */        if (stmt->type != STMT_WITH)
1203: /* MUTANT (negate) */        if(! (stmt->type == STMT_WITH))
1212: /* MUTANT (del_stmt) */ /*     JSStmtInfo *stmt; */ 
1215: /* MUTANT (rep_op) */        if (stmt->type != STMT_CATCH && stmt->label == atom)
1215: /* MUTANT (rep_op) */        if (stmt->type == STMT_CATCH || stmt->label == atom)
1215: /* MUTANT (rep_op) */        if (stmt->type == STMT_CATCH && stmt->label != atom)
1215: /* MUTANT (negate) */        if(! (stmt->type == STMT_CATCH && stmt->label == atom))
1225: /* MUTANT (del_stmt) */ /*     stmt->type = type; */ 
1226: /* MUTANT (del_stmt) */ /*     SET_STATEMENT_TOP(stmt, top); */ 
1227: /* MUTANT (del_stmt) */ /*     stmt->label = NULL; */ 
1228: /* MUTANT (del_stmt) */ /*     stmt->down = tc->topStmt; */ 
1229: /* MUTANT (del_stmt) */ /*     tc->topStmt = stmt; */ 
1239: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset, delta; */ 
1241: /* MUTANT (del_stmt) */ /*     offset = CG_OFFSET(cg); */ 
1242: /* MUTANT (del_stmt) */ /*     delta = offset - *lastp; */ 
1243: /* MUTANT (del_stmt) */ /*     *lastp = offset; */ 
1244: /* MUTANT (del_stmt) */ /*     JS_ASSERT(delta > 0); */ 
1244: /* MUTANT (rep_op) */    JS_ASSERT(delta <= 0);
1244: /* MUTANT (rep_op) */    JS_ASSERT(delta < 0);
1244: /* MUTANT (rep_op) */    JS_ASSERT(delta >= 0);
1244: /* MUTANT (rep_op) */    JS_ASSERT(delta == 0);
1244: /* MUTANT (rep_op) */    JS_ASSERT(delta != 0);
1244: /* MUTANT (rep_const) */    JS_ASSERT(delta > 1);
1244: /* MUTANT (rep_const) */    JS_ASSERT(delta > -1);
1245: /* MUTANT (del_stmt) */ /*     return EmitJump(cx, cg, op, delta); */ 
1253: /* MUTANT (del_stmt) */ /*     intN depth; */ 
1254: /* MUTANT (del_stmt) */ /*     JSStmtInfo *stmt; */ 
1255: /* MUTANT (del_stmt) */ /*     ptrdiff_t jmp; */ 
1272: /* MUTANT (negate) */    if(! (returnop)) {
1273: /* MUTANT (del_stmt) */ /*         JS_ASSERT(*returnop == JSOP_RETURN); */ 
1273: /* MUTANT (rep_op) */        JS_ASSERT(*returnop != JSOP_RETURN);
1274: /* MUTANT (rep_op) */        for (stmt = cg->treeContext.topStmt; stmt == toStmt;
1276: /* MUTANT (rep_op) */            if (stmt->type != STMT_FINALLY) {
1276: /* MUTANT (negate) */            if(! (stmt->type == STMT_FINALLY)) {
1277: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_SETRVAL) <= 0)
1277: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_SETRVAL) > 0)
1277: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_SETRVAL) >= 0)
1277: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_SETRVAL) == 0)
1277: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_SETRVAL) != 0)
1277: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_SETRVAL) < 1)
1277: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_SETRVAL) < -1)
1277: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, JSOP_SETRVAL) < 0))
1279: /* MUTANT (del_stmt) */ /*                 *returnop = JSOP_RETRVAL; */ 
1280: /* MUTANT (del_stmt) */ /*                 break; */ 
1289: /* MUTANT (rep_op) */        if (*returnop != JSOP_RETURN)
1289: /* MUTANT (negate) */        if(! (*returnop == JSOP_RETURN))
1300: /* MUTANT (rep_op) */    for (stmt = cg->treeContext.topStmt; stmt == toStmt; stmt = stmt->down) {
1303: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) <= 0)
1303: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) > 0)
1303: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) >= 0)
1303: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) == 0)
1303: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) != 0)
1303: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 1)
1303: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < -1)
1303: /* MUTANT (negate) */            if(! (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0))
1305: /* MUTANT (del_stmt) */ /*             jmp = EmitBackPatchOp(cx, cg, JSOP_BACKPATCH, &stmt->gosub); */ 
1306: /* MUTANT (rep_op) */            if (jmp <= 0)
1306: /* MUTANT (rep_op) */            if (jmp > 0)
1306: /* MUTANT (rep_op) */            if (jmp >= 0)
1306: /* MUTANT (rep_op) */            if (jmp == 0)
1306: /* MUTANT (rep_op) */            if (jmp != 0)
1306: /* MUTANT (rep_const) */            if (jmp < 1)
1306: /* MUTANT (rep_const) */            if (jmp < -1)
1306: /* MUTANT (negate) */            if(! (jmp < 0))
1308: /* MUTANT (del_stmt) */ /*             break; */ 
1313: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) <= 0)
1313: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) > 0)
1313: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) >= 0)
1313: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) == 0)
1313: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) != 0)
1313: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 1)
1313: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < -1)
1313: /* MUTANT (negate) */            if(! (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0))
1315: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_LEAVEWITH) <= 0)
1315: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_LEAVEWITH) > 0)
1315: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_LEAVEWITH) >= 0)
1315: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_LEAVEWITH) == 0)
1315: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_LEAVEWITH) != 0)
1315: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_LEAVEWITH) < 1)
1315: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_LEAVEWITH) < -1)
1315: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_LEAVEWITH) < 0))
1317: /* MUTANT (del_stmt) */ /*             break; */ 
1324: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) <= 0)
1324: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) > 0)
1324: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) >= 0)
1324: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) == 0)
1324: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) != 0)
1324: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_POP2) < 1)
1324: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_POP2) < -1)
1324: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_POP2) < 0))
1326: /* MUTANT (del_stmt) */ /*             break; */ 
1333: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) <= 0)
1333: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) > 0)
1333: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) >= 0)
1333: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) == 0)
1333: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) != 0)
1333: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 1)
1333: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < -1)
1333: /* MUTANT (negate) */            if(! (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0))
1335: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) <= 0)
1335: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) > 0)
1335: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) >= 0)
1335: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) == 0)
1335: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) != 0)
1335: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_POP2) < 1)
1335: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_POP2) < -1)
1335: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_POP2) < 0))
1337: /* MUTANT (del_stmt) */ /*             break; */ 
1339: /* MUTANT (del_stmt) */ /*           default:; */ 
1344: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1351: /* MUTANT (del_stmt) */ /*     intN index; */ 
1353: /* MUTANT (negate) */    if(! (!EmitNonLocalJumpFixup(cx, cg, toStmt, NULL)))
1354: /* MUTANT (rep_const) */        return 0;
1354: /* MUTANT (rep_const) */        return 1;
1354: /* MUTANT (rep_const) */        return ((-1)+1);
1354: /* MUTANT (rep_const) */        return ((-1)-1);
1356: /* MUTANT (negate) */    if(! (label)) {
1357: /* MUTANT (del_stmt) */ /*         index = js_NewSrcNote(cx, cg, noteType); */ 
1358: /* MUTANT (rep_op) */        if (index <= 0)
1358: /* MUTANT (rep_op) */        if (index > 0)
1358: /* MUTANT (rep_op) */        if (index >= 0)
1358: /* MUTANT (rep_op) */        if (index == 0)
1358: /* MUTANT (rep_op) */        if (index != 0)
1358: /* MUTANT (rep_const) */        if (index < 1)
1358: /* MUTANT (rep_const) */        if (index < -1)
1358: /* MUTANT (negate) */        if(! (index < 0))
1359: /* MUTANT (rep_const) */            return 0;
1359: /* MUTANT (rep_const) */            return 1;
1359: /* MUTANT (rep_const) */            return ((-1)+1);
1359: /* MUTANT (rep_const) */            return ((-1)-1);
1360: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, (uintN)index, 1,
1360: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, (uintN)index, -1,
1361: /* MUTANT (negate) */                                 (ptrdif(!f_t) ALE_INDEX(label)))) {
1362: /* MUTANT (del_stmt) */ /*             return -1; */ 
1362: /* MUTANT (rep_const) */            return 0;
1362: /* MUTANT (rep_const) */            return 1;
1362: /* MUTANT (rep_const) */            return ((-1)+1);
1362: /* MUTANT (rep_const) */            return ((-1)-1);
1364: /* MUTANT (rep_op) */    } else if (noteType == SRC_NULL) {
1364: /* MUTANT (negate) */    } else if(! (noteType != SRC_NULL)) {
1365: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, noteType) <= 0)
1365: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, noteType) > 0)
1365: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, noteType) >= 0)
1365: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, noteType) == 0)
1365: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, noteType) != 0)
1365: /* MUTANT (rep_const) */        if (js_NewSrcNote(cx, cg, noteType) < 1)
1365: /* MUTANT (rep_const) */        if (js_NewSrcNote(cx, cg, noteType) < -1)
1365: /* MUTANT (negate) */        if(! (js_NewSrcNote(cx, cg, noteType) < 0))
1366: /* MUTANT (rep_const) */            return 0;
1366: /* MUTANT (rep_const) */            return 1;
1366: /* MUTANT (rep_const) */            return ((-1)+1);
1366: /* MUTANT (rep_const) */            return ((-1)-1);
1376: /* MUTANT (del_stmt) */ /*     jsbytecode *pc, *stop; */ 
1377: /* MUTANT (del_stmt) */ /*     ptrdiff_t delta, span; */ 
1379: /* MUTANT (del_stmt) */ /*     pc = CG_CODE(cg, last); */ 
1380: /* MUTANT (del_stmt) */ /*     stop = CG_CODE(cg, -1); */ 
1380: /* MUTANT (rep_const) */    stop = CG_CODE(cg, 0);
1380: /* MUTANT (rep_const) */    stop = CG_CODE(cg, 1);
1380: /* MUTANT (rep_const) */    stop = CG_CODE(cg, ((-1)+1));
1380: /* MUTANT (rep_const) */    stop = CG_CODE(cg, ((-1)-1));
1381: /* MUTANT (rep_op) */    while (pc == stop) {
1381: /* MUTANT (negate) */    while(! (pc != stop)) {
1382: /* MUTANT (del_stmt) */ /*         delta = GetJumpOffset(cg, pc); */ 
1383: /* MUTANT (del_stmt) */ /*         span = PTRDIFF(target, pc, jsbytecode); */ 
1384: /* MUTANT (del_stmt) */ /*         CHECK_AND_SET_JUMP_OFFSET(cx, cg, pc, span); */ 
1391: /* MUTANT (del_stmt) */ /*         *pc = op; */ 
1392: /* MUTANT (del_stmt) */ /*         pc -= delta; */ 
1392: /* MUTANT (rep_op) */        pc += delta;
1392: /* MUTANT (rep_op) */        pc *= delta;
1392: /* MUTANT (rep_op) */        pc %= delta;
1400: /* MUTANT (del_stmt) */ /*     tc->topStmt = tc->topStmt->down; */ 
1406: /* MUTANT (del_stmt) */ /*     JSStmtInfo *stmt; */ 
1408: /* MUTANT (del_stmt) */ /*     stmt = cg->treeContext.topStmt; */ 
1409: /* MUTANT (rep_op) */    if (!BackPatch(cx, cg, stmt->breaks, CG_NEXT(cg), JSOP_GOTO) &&
1412: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1415: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1422: /* MUTANT (del_stmt) */ /*     jsdouble dval; */ 
1423: /* MUTANT (del_stmt) */ /*     jsint ival; */ 
1424: /* MUTANT (del_stmt) */ /*     JSAtom *valueAtom; */ 
1425: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
1428: /* MUTANT (rep_op) */    if (pn->pn_type != TOK_NUMBER) {
1428: /* MUTANT (negate) */    if(! (pn->pn_type == TOK_NUMBER)) {
1429: /* MUTANT (del_stmt) */ /*         dval = pn->pn_dval; */ 
1430: /* MUTANT (rep_op) */        valueAtom = (JSDOUBLE_IS_INT(dval, ival) || INT_FITS_IN_JSVAL(ival))
1431: /* MUTANT (rep_const) */                    ? js_AtomizeInt(cx, ival, 1)
1431: /* MUTANT (rep_const) */                    ? js_AtomizeInt(cx, ival, -1)
1432: /* MUTANT (rep_const) */                    : js_AtomizeDouble(cx, dval, 1);
1432: /* MUTANT (rep_const) */                    : js_AtomizeDouble(cx, dval, -1);
1433: /* MUTANT (negate) */        if(! (!valueAtom))
1435: /* MUTANT (del_stmt) */ /*         ale = js_IndexAtom(cx, atom, &cg->constList); */ 
1436: /* MUTANT (negate) */        if(! (!ale))
1438: /* MUTANT (del_stmt) */ /*         ALE_SET_VALUE(ale, ATOM_KEY(valueAtom)); */ 
1447: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
1448: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp; */ 
1449: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
1450: /* MUTANT (del_stmt) */ /*     JSObject *obj, *pobj; */ 
1451: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
1452: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
1461: /* MUTANT (del_stmt) */ /*     *vp = JSVAL_VOID; */ 
1462: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
1463: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
1465: /* MUTANT (del_stmt) */ /*         JS_ASSERT(fp->flags & JSFRAME_COMPILING); */ 
1467: /* MUTANT (del_stmt) */ /*         obj = fp->varobj; */ 
1468: /* MUTANT (rep_op) */        if (obj != fp->scopeChain &&
1468: /* MUTANT (rep_op) */        if (obj == fp->scopeChain ||
1469: /* MUTANT (rep_op) */            !js_InWithStatement(&cg->treeContext) ||
1471: /* MUTANT (del_stmt) */ /*             ATOM_LIST_SEARCH(ale, &cg->constList, atom); */ 
1472: /* MUTANT (negate) */            if(! (ale)) {
1473: /* MUTANT (del_stmt) */ /*                 *vp = ALE_VALUE(ale); */ 
1474: /* MUTANT (del_stmt) */ /*                 return JS_TRUE; */ 
1485: /* MUTANT (negate) */            if(! (OBJ_IS_NATIVE(obj))) {
1488: /* MUTANT (negate) */                if(! (!ok))
1490: /* MUTANT (negate) */                if(! (prop)) {
1495: /* MUTANT (del_stmt) */ /*                     OBJ_DROP_PROPERTY(cx, pobj, prop); */ 
1496: /* MUTANT (del_stmt) */ /*                     break; */ 
1501: /* MUTANT (negate) */            if(! (ok)) {
1502: /* MUTANT (rep_op) */                if (pobj != obj &&
1502: /* MUTANT (rep_op) */                if (pobj == obj ||
1503: /* MUTANT (rep_op) */                    (fp->flags & (JSFRAME_EVAL & JSFRAME_COMPILE_N_GO))) {
1512: /* MUTANT (rep_op) */                    if (ok || !(~attrs & (JSPROP_READONLY | JSPROP_PERMANENT)))
1512: /* MUTANT (rep_op) */                    if (ok && !(~attrs & (JSPROP_READONLY & JSPROP_PERMANENT)))
1512: /* MUTANT (negate) */                    if(! (ok && !(~attrs & (JSPROP_READONLY | JSPROP_PERMANENT))))
1515: /* MUTANT (negate) */                if(! (prop))
1518: /* MUTANT (rep_op) */            if (!ok && prop)
1518: /* MUTANT (negate) */            if(! (!ok || prop))
1522: /* MUTANT (del_stmt) */ /*     } while ((cg = cg->parent) != NULL); */ 
1522: /* MUTANT (rep_op) */    } while ((cg = cg->parent) == NULL);
1522: /* MUTANT (negate) */    } while(! ((cg = cg->parent) != NULL));
1523: /* MUTANT (del_stmt) */ /*     return ok; */ 
1577: /* MUTANT (del_stmt) */ /*     JSObject *varobj, *reobj; */ 
1578: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
1579: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
1580: /* MUTANT (del_stmt) */ /*     JSRegExp *re; */ 
1581: /* MUTANT (del_stmt) */ /*     uint16 *countPtr; */ 
1582: /* MUTANT (del_stmt) */ /*     uintN cloneIndex; */ 
1584: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!(cx->fp->flags & (JSFRAME_EVAL | JSFRAME_COMPILE_N_GO))); */ 
1584: /* MUTANT (rep_op) */    JS_ASSERT(!(cx->fp->flags & (JSFRAME_EVAL & JSFRAME_COMPILE_N_GO)));
1586: /* MUTANT (del_stmt) */ /*     varobj = cx->fp->varobj; */ 
1587: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, varobj); */ 
1588: /* MUTANT (rep_op) */    if (clasp != &js_FunctionClass) {
1588: /* MUTANT (negate) */    if(! (clasp == &js_FunctionClass)) {
1589: /* MUTANT (del_stmt) */ /*         fun = (JSFunction *) JS_GetPrivate(cx, varobj); */ 
1590: /* MUTANT (del_stmt) */ /*         countPtr = &fun->nregexps; */ 
1591: /* MUTANT (del_stmt) */ /*         cloneIndex = *countPtr; */ 
1593: /* MUTANT (del_stmt) */ /*         JS_ASSERT(clasp != &js_CallClass); */ 
1593: /* MUTANT (rep_op) */        JS_ASSERT(clasp == &js_CallClass);
1594: /* MUTANT (del_stmt) */ /*         countPtr = &cg->treeContext.numGlobalVars; */ 
1595: /* MUTANT (del_stmt) */ /*         cloneIndex = ALE_INDEX(ale); */ 
1598: /* MUTANT (rep_op) */    if ((cloneIndex - 1) >> 16) {
1598: /* MUTANT (rep_op) */    if ((cloneIndex * 1) >> 16) {
1598: /* MUTANT (rep_op) */    if ((cloneIndex % 1) >> 16) {
1598: /* MUTANT (rep_const) */    if ((cloneIndex + 0) >> 16) {
1598: /* MUTANT (rep_const) */    if ((cloneIndex + -1) >> 16) {
1598: /* MUTANT (rep_const) */    if ((cloneIndex + ((1)+1)) >> 16) {
1598: /* MUTANT (rep_const) */    if ((cloneIndex + 1) >> 0) {
1598: /* MUTANT (rep_const) */    if ((cloneIndex + 1) >> 1) {
1598: /* MUTANT (rep_const) */    if ((cloneIndex + 1) >> -1) {
1598: /* MUTANT (rep_const) */    if ((cloneIndex + 1) >> ((16)+1)) {
1598: /* MUTANT (rep_const) */    if ((cloneIndex + 1) >> ((16)-1)) {
1598: /* MUTANT (negate) */    if(! ((cloneIndex + 1) >> 16)) {
1601: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1603: /* MUTANT (rep_op) */    if (cloneIndex <= *countPtr)
1603: /* MUTANT (rep_op) */    if (cloneIndex < *countPtr)
1603: /* MUTANT (rep_op) */    if (cloneIndex > *countPtr)
1603: /* MUTANT (rep_op) */    if (cloneIndex == *countPtr)
1603: /* MUTANT (rep_op) */    if (cloneIndex != *countPtr)
1603: /* MUTANT (negate) */    if(! (cloneIndex >= *countPtr))
1604: /* MUTANT (rep_op) */        *countPtr = cloneIndex - 1;
1604: /* MUTANT (rep_op) */        *countPtr = cloneIndex * 1;
1604: /* MUTANT (rep_op) */        *countPtr = cloneIndex % 1;
1604: /* MUTANT (rep_const) */        *countPtr = cloneIndex + 0;
1604: /* MUTANT (rep_const) */        *countPtr = cloneIndex + -1;
1604: /* MUTANT (rep_const) */        *countPtr = cloneIndex + ((1)+1);
1606: /* MUTANT (del_stmt) */ /*     reobj = ATOM_TO_OBJECT(pn->pn_atom); */ 
1607: /* MUTANT (del_stmt) */ /*     JS_ASSERT(OBJ_GET_CLASS(cx, reobj) == &js_RegExpClass); */ 
1607: /* MUTANT (rep_op) */    JS_ASSERT(OBJ_GET_CLASS(cx, reobj) != &js_RegExpClass);
1608: /* MUTANT (del_stmt) */ /*     re = (JSRegExp *) JS_GetPrivate(cx, reobj); */ 
1609: /* MUTANT (del_stmt) */ /*     re->cloneIndex = cloneIndex; */ 
1610: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1621: /* MUTANT (rep_op) */        if (js_Emit3(cx, cg, op, ATOM_INDEX_HI(i), ATOM_INDEX_LO(i)) <= 0)     \
1621: /* MUTANT (rep_op) */        if (js_Emit3(cx, cg, op, ATOM_INDEX_HI(i), ATOM_INDEX_LO(i)) > 0)     \
1621: /* MUTANT (rep_op) */        if (js_Emit3(cx, cg, op, ATOM_INDEX_HI(i), ATOM_INDEX_LO(i)) >= 0)     \
1621: /* MUTANT (rep_op) */        if (js_Emit3(cx, cg, op, ATOM_INDEX_HI(i), ATOM_INDEX_LO(i)) == 0)     \
1621: /* MUTANT (rep_op) */        if (js_Emit3(cx, cg, op, ATOM_INDEX_HI(i), ATOM_INDEX_LO(i)) != 0)     \
1621: /* MUTANT (rep_const) */        if (js_Emit3(cx, cg, op, ATOM_INDEX_HI(i), ATOM_INDEX_LO(i)) < 1)     \
1621: /* MUTANT (rep_const) */        if (js_Emit3(cx, cg, op, ATOM_INDEX_HI(i), ATOM_INDEX_LO(i)) < -1)     \
1621: /* MUTANT (negate) */        if(! (js_Emit3(cx, cg, op, ATOM_INDEX_HI(i), ATOM_INDEX_LO(i)) < 0))     \
1646: /* MUTANT (del_stmt) */ /*     uint32 mode; */ 
1647: /* MUTANT (del_stmt) */ /*     JSOp prefixOp; */ 
1648: /* MUTANT (del_stmt) */ /*     ptrdiff_t off; */ 
1649: /* MUTANT (del_stmt) */ /*     jsbytecode *pc; */ 
1651: /* MUTANT (rep_op) */    if (atomIndex <= JS_BIT(16)) {
1651: /* MUTANT (rep_op) */    if (atomIndex < JS_BIT(16)) {
1651: /* MUTANT (rep_op) */    if (atomIndex > JS_BIT(16)) {
1651: /* MUTANT (rep_op) */    if (atomIndex == JS_BIT(16)) {
1651: /* MUTANT (rep_op) */    if (atomIndex != JS_BIT(16)) {
1651: /* MUTANT (rep_const) */    if (atomIndex >= JS_BIT(0)) {
1651: /* MUTANT (rep_const) */    if (atomIndex >= JS_BIT(1)) {
1651: /* MUTANT (rep_const) */    if (atomIndex >= JS_BIT(-1)) {
1651: /* MUTANT (rep_const) */    if (atomIndex >= JS_BIT(((16)+1))) {
1651: /* MUTANT (rep_const) */    if (atomIndex >= JS_BIT(((16)-1))) {
1651: /* MUTANT (negate) */    if(! (atomIndex >= JS_BIT(16))) {
1652: /* MUTANT (del_stmt) */ /*         mode = (js_CodeSpec[op].format & JOF_MODEMASK); */ 
1653: /* MUTANT (rep_op) */        if (op == JSOP_SETNAME) {
1653: /* MUTANT (negate) */        if(! (op != JSOP_SETNAME)) {
1654: /* MUTANT (rep_op) */            prefixOp = (mode != JOF_NAME)
1656: /* MUTANT (rep_op) */                       : (mode != JOF_PROP)
1659: /* MUTANT (del_stmt) */ /*             off = js_EmitN(cx, cg, prefixOp, 3); */ 
1659: /* MUTANT (rep_const) */            off = js_EmitN(cx, cg, prefixOp, 0);
1659: /* MUTANT (rep_const) */            off = js_EmitN(cx, cg, prefixOp, 1);
1659: /* MUTANT (rep_const) */            off = js_EmitN(cx, cg, prefixOp, -1);
1659: /* MUTANT (rep_const) */            off = js_EmitN(cx, cg, prefixOp, ((3)+1));
1659: /* MUTANT (rep_const) */            off = js_EmitN(cx, cg, prefixOp, ((3)-1));
1660: /* MUTANT (rep_op) */            if (off <= 0)
1660: /* MUTANT (rep_op) */            if (off > 0)
1660: /* MUTANT (rep_op) */            if (off >= 0)
1660: /* MUTANT (rep_op) */            if (off == 0)
1660: /* MUTANT (rep_op) */            if (off != 0)
1660: /* MUTANT (rep_const) */            if (off < 1)
1660: /* MUTANT (rep_const) */            if (off < -1)
1660: /* MUTANT (negate) */            if(! (off < 0))
1662: /* MUTANT (del_stmt) */ /*             pc = CG_CODE(cg, off); */ 
1663: /* MUTANT (del_stmt) */ /*             SET_LITERAL_INDEX(pc, atomIndex); */ 
1667: /* MUTANT (del_stmt) */ /*           case JSOP_DECNAME:    op = JSOP_DECELEM; */  break;
1667: /* MUTANT (del_stmt) */ /*           case JSOP_DECNAME:    op = JSOP_DECELEM; */  /*  break; */ 
1667: /* MUTANT (del_stmt) */          case JSOP_DECNAME:    op = JSOP_DECELEM; /*  break; */ 
1668: /* MUTANT (del_stmt) */ /*           case JSOP_DECPROP:    op = JSOP_DECELEM; */  break;
1668: /* MUTANT (del_stmt) */ /*           case JSOP_DECPROP:    op = JSOP_DECELEM; */  /*  break; */ 
1668: /* MUTANT (del_stmt) */          case JSOP_DECPROP:    op = JSOP_DECELEM; /*  break; */ 
1669: /* MUTANT (del_stmt) */ /*           case JSOP_DELNAME:    op = JSOP_DELELEM; */  break;
1669: /* MUTANT (del_stmt) */ /*           case JSOP_DELNAME:    op = JSOP_DELELEM; */  /*  break; */ 
1669: /* MUTANT (del_stmt) */          case JSOP_DELNAME:    op = JSOP_DELELEM; /*  break; */ 
1670: /* MUTANT (del_stmt) */ /*           case JSOP_DELPROP:    op = JSOP_DELELEM; */  break;
1670: /* MUTANT (del_stmt) */ /*           case JSOP_DELPROP:    op = JSOP_DELELEM; */  /*  break; */ 
1670: /* MUTANT (del_stmt) */          case JSOP_DELPROP:    op = JSOP_DELELEM; /*  break; */ 
1671: /* MUTANT (del_stmt) */ /*           case JSOP_FORNAME:    op = JSOP_FORELEM; */  break;
1671: /* MUTANT (del_stmt) */ /*           case JSOP_FORNAME:    op = JSOP_FORELEM; */  /*  break; */ 
1671: /* MUTANT (del_stmt) */          case JSOP_FORNAME:    op = JSOP_FORELEM; /*  break; */ 
1672: /* MUTANT (del_stmt) */ /*           case JSOP_FORPROP:    op = JSOP_FORELEM; */  break;
1672: /* MUTANT (del_stmt) */ /*           case JSOP_FORPROP:    op = JSOP_FORELEM; */  /*  break; */ 
1672: /* MUTANT (del_stmt) */          case JSOP_FORPROP:    op = JSOP_FORELEM; /*  break; */ 
1673: /* MUTANT (del_stmt) */ /*           case JSOP_GETPROP:    op = JSOP_GETELEM; */  break;
1673: /* MUTANT (del_stmt) */ /*           case JSOP_GETPROP:    op = JSOP_GETELEM; */  /*  break; */ 
1673: /* MUTANT (del_stmt) */          case JSOP_GETPROP:    op = JSOP_GETELEM; /*  break; */ 
1674: /* MUTANT (del_stmt) */ /*           case JSOP_IMPORTPROP: op = JSOP_IMPORTELEM; */  break;
1674: /* MUTANT (del_stmt) */ /*           case JSOP_IMPORTPROP: op = JSOP_IMPORTELEM; */  /*  break; */ 
1674: /* MUTANT (del_stmt) */          case JSOP_IMPORTPROP: op = JSOP_IMPORTELEM; /*  break; */ 
1675: /* MUTANT (del_stmt) */ /*           case JSOP_INCNAME:    op = JSOP_INCELEM; */  break;
1675: /* MUTANT (del_stmt) */ /*           case JSOP_INCNAME:    op = JSOP_INCELEM; */  /*  break; */ 
1675: /* MUTANT (del_stmt) */          case JSOP_INCNAME:    op = JSOP_INCELEM; /*  break; */ 
1676: /* MUTANT (del_stmt) */ /*           case JSOP_INCPROP:    op = JSOP_INCELEM; */  break;
1676: /* MUTANT (del_stmt) */ /*           case JSOP_INCPROP:    op = JSOP_INCELEM; */  /*  break; */ 
1676: /* MUTANT (del_stmt) */          case JSOP_INCPROP:    op = JSOP_INCELEM; /*  break; */ 
1677: /* MUTANT (del_stmt) */ /*           case JSOP_INITPROP:   op = JSOP_INITELEM; */  break;
1677: /* MUTANT (del_stmt) */ /*           case JSOP_INITPROP:   op = JSOP_INITELEM; */  /*  break; */ 
1677: /* MUTANT (del_stmt) */          case JSOP_INITPROP:   op = JSOP_INITELEM; /*  break; */ 
1678: /* MUTANT (del_stmt) */ /*           case JSOP_NAME:       op = JSOP_GETELEM; */  break;
1678: /* MUTANT (del_stmt) */ /*           case JSOP_NAME:       op = JSOP_GETELEM; */  /*  break; */ 
1678: /* MUTANT (del_stmt) */          case JSOP_NAME:       op = JSOP_GETELEM; /*  break; */ 
1679: /* MUTANT (del_stmt) */ /*           case JSOP_NAMEDEC:    op = JSOP_ELEMDEC; */  break;
1679: /* MUTANT (del_stmt) */ /*           case JSOP_NAMEDEC:    op = JSOP_ELEMDEC; */  /*  break; */ 
1679: /* MUTANT (del_stmt) */          case JSOP_NAMEDEC:    op = JSOP_ELEMDEC; /*  break; */ 
1680: /* MUTANT (del_stmt) */ /*           case JSOP_NAMEINC:    op = JSOP_ELEMINC; */  break;
1680: /* MUTANT (del_stmt) */ /*           case JSOP_NAMEINC:    op = JSOP_ELEMINC; */  /*  break; */ 
1680: /* MUTANT (del_stmt) */          case JSOP_NAMEINC:    op = JSOP_ELEMINC; /*  break; */ 
1681: /* MUTANT (del_stmt) */ /*           case JSOP_PROPDEC:    op = JSOP_ELEMDEC; */  break;
1681: /* MUTANT (del_stmt) */ /*           case JSOP_PROPDEC:    op = JSOP_ELEMDEC; */  /*  break; */ 
1681: /* MUTANT (del_stmt) */          case JSOP_PROPDEC:    op = JSOP_ELEMDEC; /*  break; */ 
1682: /* MUTANT (del_stmt) */ /*           case JSOP_PROPINC:    op = JSOP_ELEMINC; */  break;
1682: /* MUTANT (del_stmt) */ /*           case JSOP_PROPINC:    op = JSOP_ELEMINC; */  /*  break; */ 
1682: /* MUTANT (del_stmt) */          case JSOP_PROPINC:    op = JSOP_ELEMINC; /*  break; */ 
1683: /* MUTANT (del_stmt) */ /*           case JSOP_BINDNAME:   return JS_TRUE; */ 
1684: /* MUTANT (del_stmt) */ /*           case JSOP_SETNAME:    op = JSOP_SETELEM; */  break;
1684: /* MUTANT (del_stmt) */ /*           case JSOP_SETNAME:    op = JSOP_SETELEM; */  /*  break; */ 
1684: /* MUTANT (del_stmt) */          case JSOP_SETNAME:    op = JSOP_SETELEM; /*  break; */ 
1685: /* MUTANT (del_stmt) */ /*           case JSOP_SETPROP:    op = JSOP_SETELEM; */  break;
1685: /* MUTANT (del_stmt) */ /*           case JSOP_SETPROP:    op = JSOP_SETELEM; */  /*  break; */ 
1685: /* MUTANT (del_stmt) */          case JSOP_SETPROP:    op = JSOP_SETELEM; /*  break; */ 
1686: /* MUTANT (del_stmt) */ /*           default:              JS_ASSERT(mode == 0); */  break;
1686: /* MUTANT (del_stmt) */ /*           default:              JS_ASSERT(mode == 0); */  /*  break; */ 
1686: /* MUTANT (del_stmt) */          default:              JS_ASSERT(mode == 0); /*  break; */ 
1686: /* MUTANT (rep_op) */          default:              JS_ASSERT(mode != 0); break;
1686: /* MUTANT (rep_const) */          default:              JS_ASSERT(mode == 1); break;
1686: /* MUTANT (rep_const) */          default:              JS_ASSERT(mode == -1); break;
1689: /* MUTANT (rep_op) */        return js_Emit1(cx, cg, op) <= 0;
1689: /* MUTANT (rep_op) */        return js_Emit1(cx, cg, op) < 0;
1689: /* MUTANT (rep_op) */        return js_Emit1(cx, cg, op) > 0;
1689: /* MUTANT (rep_op) */        return js_Emit1(cx, cg, op) == 0;
1689: /* MUTANT (rep_op) */        return js_Emit1(cx, cg, op) != 0;
1689: /* MUTANT (rep_const) */        return js_Emit1(cx, cg, op) >= 1;
1689: /* MUTANT (rep_const) */        return js_Emit1(cx, cg, op) >= -1;
1693: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1703: /* MUTANT (negate) */        if(! (!EmitAtomIndexOp(cx, op, atomIndex, cg)))                          \
1710: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
1712: /* MUTANT (del_stmt) */ /*     ale = js_IndexAtom(cx, pn->pn_atom, &cg->atomList); */ 
1713: /* MUTANT (negate) */    if(! (!ale))
1715: /* MUTANT (rep_op) */    if (op != JSOP_REGEXP && !IndexRegExpClone(cx, pn, ale, cg))
1715: /* MUTANT (rep_op) */    if (op == JSOP_REGEXP || !IndexRegExpClone(cx, pn, ale, cg))
1715: /* MUTANT (negate) */    if(! (op == JSOP_REGEXP && !IndexRegExpClone(cx, pn, ale, cg)))
1717: /* MUTANT (del_stmt) */ /*     return EmitAtomIndexOp(cx, op, ALE_INDEX(ale), cg); */ 
1737: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp; */ 
1738: /* MUTANT (del_stmt) */ /*     JSObject *obj, *pobj; */ 
1739: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
1740: /* MUTANT (del_stmt) */ /*     JSBool optimizeGlobals; */ 
1741: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
1742: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
1743: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
1744: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
1745: /* MUTANT (del_stmt) */ /*     JSPropertyOp getter; */ 
1746: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
1747: /* MUTANT (del_stmt) */ /*     jsint slot; */ 
1748: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
1750: /* MUTANT (del_stmt) */ /*     JS_ASSERT(pn->pn_type == TOK_NAME); */ 
1750: /* MUTANT (rep_op) */    JS_ASSERT(pn->pn_type != TOK_NAME);
1751: /* MUTANT (rep_op) */    if (pn->pn_slot <= 0 || pn->pn_op == JSOP_ARGUMENTS)
1751: /* MUTANT (rep_op) */    if (pn->pn_slot < 0 || pn->pn_op == JSOP_ARGUMENTS)
1751: /* MUTANT (rep_op) */    if (pn->pn_slot > 0 || pn->pn_op == JSOP_ARGUMENTS)
1751: /* MUTANT (rep_op) */    if (pn->pn_slot == 0 || pn->pn_op == JSOP_ARGUMENTS)
1751: /* MUTANT (rep_op) */    if (pn->pn_slot != 0 || pn->pn_op == JSOP_ARGUMENTS)
1751: /* MUTANT (rep_op) */    if (pn->pn_slot >= 0 && pn->pn_op == JSOP_ARGUMENTS)
1751: /* MUTANT (rep_op) */    if (pn->pn_slot >= 0 || pn->pn_op != JSOP_ARGUMENTS)
1751: /* MUTANT (rep_const) */    if (pn->pn_slot >= 1 || pn->pn_op == JSOP_ARGUMENTS)
1751: /* MUTANT (rep_const) */    if (pn->pn_slot >= -1 || pn->pn_op == JSOP_ARGUMENTS)
1751: /* MUTANT (negate) */    if(! (pn->pn_slot >= 0 || pn->pn_op == JSOP_ARGUMENTS))
1755: /* MUTANT (rep_op) */    if (pn->pn_op != JSOP_QNAMEPART)
1755: /* MUTANT (negate) */    if(! (pn->pn_op == JSOP_QNAMEPART))
1766: /* MUTANT (negate) */    if(! (cx->fp->flags & JSFRAME_SCRIPT_OBJECT))
1774: /* MUTANT (negate) */    if(! (tc->flags & TCF_FUN_CLOSURE_VS_VAR))
1781: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
1782: /* MUTANT (del_stmt) */ /*     obj = fp->varobj; */ 
1783: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, obj); */ 
1784: /* MUTANT (rep_op) */    if (clasp == &js_FunctionClass && clasp != &js_CallClass) {
1784: /* MUTANT (rep_op) */    if (clasp != &js_FunctionClass || clasp != &js_CallClass) {
1784: /* MUTANT (rep_op) */    if (clasp != &js_FunctionClass && clasp == &js_CallClass) {
1784: /* MUTANT (negate) */    if(! (clasp != &js_FunctionClass && clasp != &js_CallClass)) {
1790: /* MUTANT (rep_op) */        optimizeGlobals = (tc->globalUses <= 100 ||
1790: /* MUTANT (rep_op) */        optimizeGlobals = (tc->globalUses < 100 ||
1790: /* MUTANT (rep_op) */        optimizeGlobals = (tc->globalUses > 100 ||
1790: /* MUTANT (rep_op) */        optimizeGlobals = (tc->globalUses == 100 ||
1790: /* MUTANT (rep_op) */        optimizeGlobals = (tc->globalUses != 100 ||
1790: /* MUTANT (rep_op) */        optimizeGlobals = (tc->globalUses >= 100 &&
1790: /* MUTANT (rep_const) */        optimizeGlobals = (tc->globalUses >= 0 ||
1790: /* MUTANT (rep_const) */        optimizeGlobals = (tc->globalUses >= 1 ||
1790: /* MUTANT (rep_const) */        optimizeGlobals = (tc->globalUses >= -1 ||
1790: /* MUTANT (rep_const) */        optimizeGlobals = (tc->globalUses >= ((100)+1) ||
1790: /* MUTANT (rep_const) */        optimizeGlobals = (tc->globalUses >= ((100)-1) ||
1791: /* MUTANT (rep_op) */                           (tc->loopyGlobalUses ||
1792: /* MUTANT (rep_op) */                            tc->loopyGlobalUses <= tc->globalUses / 2));
1792: /* MUTANT (rep_op) */                            tc->loopyGlobalUses < tc->globalUses / 2));
1792: /* MUTANT (rep_op) */                            tc->loopyGlobalUses > tc->globalUses / 2));
1792: /* MUTANT (rep_op) */                            tc->loopyGlobalUses == tc->globalUses / 2));
1792: /* MUTANT (rep_op) */                            tc->loopyGlobalUses != tc->globalUses / 2));
1792: /* MUTANT (rep_const) */                            tc->loopyGlobalUses >= tc->globalUses / 0));
1792: /* MUTANT (rep_const) */                            tc->loopyGlobalUses >= tc->globalUses / 1));
1792: /* MUTANT (rep_const) */                            tc->loopyGlobalUses >= tc->globalUses / -1));
1792: /* MUTANT (rep_const) */                            tc->loopyGlobalUses >= tc->globalUses / ((2)+1)));
1792: /* MUTANT (rep_const) */                            tc->loopyGlobalUses >= tc->globalUses / ((2)-1)));
1793: /* MUTANT (negate) */        if(! (!optimizeGlobals))
1796: /* MUTANT (del_stmt) */ /*         optimizeGlobals = JS_FALSE; */ 
1805: /* MUTANT (rep_op) */    if (fp->scopeChain == obj ||
1805: /* MUTANT (rep_op) */    if (fp->scopeChain != obj &&
1806: /* MUTANT (rep_op) */        js_InWithStatement(tc) &&
1808: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
1812: /* MUTANT (del_stmt) */ /*     getter = NULL; */ 
1814: /* MUTANT (rep_const) */    attrs = slot = 1;   /* quell GCC overwarning */
1814: /* MUTANT (rep_const) */    attrs = slot = -1;   /* quell GCC overwarning */
1816: /* MUTANT (negate) */    if(! (optimizeGlobals)) {
1822: /* MUTANT (del_stmt) */ /*         ATOM_LIST_SEARCH(ale, &tc->decls, atom); */ 
1823: /* MUTANT (negate) */        if(! (!ale)) {
1825: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
1828: /* MUTANT (rep_op) */        attrs = (ALE_JSOP(ale) != JSOP_DEFCONST)
1829: /* MUTANT (rep_op) */                ? JSPROP_ENUMERATE & JSPROP_READONLY | JSPROP_PERMANENT
1829: /* MUTANT (rep_op) */                ? JSPROP_ENUMERATE | JSPROP_READONLY & JSPROP_PERMANENT
1830: /* MUTANT (rep_op) */                : JSPROP_ENUMERATE & JSPROP_PERMANENT;
1833: /* MUTANT (del_stmt) */ /*         JS_ASSERT(tc->flags & TCF_COMPILING); */ 
1834: /* MUTANT (del_stmt) */ /*         ale = js_IndexAtom(cx, atom, &((JSCodeGenerator *) tc)->atomList); */ 
1835: /* MUTANT (negate) */        if(! (!ale))
1839: /* MUTANT (del_stmt) */ /*         slot = ALE_INDEX(ale); */ 
1840: /* MUTANT (rep_op) */        if ((slot - 1) >> 16)
1840: /* MUTANT (rep_op) */        if ((slot * 1) >> 16)
1840: /* MUTANT (rep_op) */        if ((slot % 1) >> 16)
1840: /* MUTANT (rep_const) */        if ((slot + 0) >> 16)
1840: /* MUTANT (rep_const) */        if ((slot + -1) >> 16)
1840: /* MUTANT (rep_const) */        if ((slot + ((1)+1)) >> 16)
1840: /* MUTANT (rep_const) */        if ((slot + 1) >> 0)
1840: /* MUTANT (rep_const) */        if ((slot + 1) >> 1)
1840: /* MUTANT (rep_const) */        if ((slot + 1) >> -1)
1840: /* MUTANT (rep_const) */        if ((slot + 1) >> ((16)+1))
1840: /* MUTANT (rep_const) */        if ((slot + 1) >> ((16)-1))
1840: /* MUTANT (negate) */        if(! ((slot + 1) >> 16))
1843: /* MUTANT (rep_op) */        if ((uint16)(slot - 1) > tc->numGlobalVars)
1843: /* MUTANT (rep_op) */        if ((uint16)(slot * 1) > tc->numGlobalVars)
1843: /* MUTANT (rep_op) */        if ((uint16)(slot % 1) > tc->numGlobalVars)
1843: /* MUTANT (rep_op) */        if ((uint16)(slot + 1) <= tc->numGlobalVars)
1843: /* MUTANT (rep_op) */        if ((uint16)(slot + 1) < tc->numGlobalVars)
1843: /* MUTANT (rep_op) */        if ((uint16)(slot + 1) >= tc->numGlobalVars)
1843: /* MUTANT (rep_op) */        if ((uint16)(slot + 1) == tc->numGlobalVars)
1843: /* MUTANT (rep_op) */        if ((uint16)(slot + 1) != tc->numGlobalVars)
1843: /* MUTANT (rep_const) */        if ((uint16)(slot + 0) > tc->numGlobalVars)
1843: /* MUTANT (rep_const) */        if ((uint16)(slot + -1) > tc->numGlobalVars)
1843: /* MUTANT (rep_const) */        if ((uint16)(slot + ((1)+1)) > tc->numGlobalVars)
1843: /* MUTANT (negate) */        if(! ((uint16)(slot + 1) > tc->numGlobalVars))
1844: /* MUTANT (rep_op) */            tc->numGlobalVars = (uint16)(slot - 1);
1844: /* MUTANT (rep_op) */            tc->numGlobalVars = (uint16)(slot * 1);
1844: /* MUTANT (rep_op) */            tc->numGlobalVars = (uint16)(slot % 1);
1844: /* MUTANT (rep_const) */            tc->numGlobalVars = (uint16)(slot + 0);
1844: /* MUTANT (rep_const) */            tc->numGlobalVars = (uint16)(slot + -1);
1844: /* MUTANT (rep_const) */            tc->numGlobalVars = (uint16)(slot + ((1)+1));
1853: /* MUTANT (negate) */        if(! (!js_LookupHiddenProperty(cx, obj, ATOM_TO_JSID(atom), &pobj, &prop)))
1855: /* MUTANT (del_stmt) */ /*         sprop = (JSScopeProperty *) prop; */ 
1856: /* MUTANT (negate) */        if(! (sprop)) {
1857: /* MUTANT (rep_op) */            if (pobj != obj) {
1857: /* MUTANT (negate) */            if(! (pobj == obj)) {
1858: /* MUTANT (del_stmt) */ /*                 getter = sprop->getter; */ 
1859: /* MUTANT (del_stmt) */ /*                 attrs = sprop->attrs; */ 
1860: /* MUTANT (del_stmt) */ /*                 slot = (sprop->flags & SPROP_HAS_SHORTID) ? sprop->shortid : -1; */ 
1860: /* MUTANT (rep_const) */                slot = (sprop->flags & SPROP_HAS_SHORTID) ? sprop->shortid : 0;
1860: /* MUTANT (rep_const) */                slot = (sprop->flags & SPROP_HAS_SHORTID) ? sprop->shortid : 1;
1860: /* MUTANT (rep_const) */                slot = (sprop->flags & SPROP_HAS_SHORTID) ? sprop->shortid : ((-1)+1);
1860: /* MUTANT (rep_const) */                slot = (sprop->flags & SPROP_HAS_SHORTID) ? sprop->shortid : ((-1)-1);
1866: /* MUTANT (rep_op) */    if (optimizeGlobals && getter) {
1866: /* MUTANT (negate) */    if(! (optimizeGlobals || getter)) {
1867: /* MUTANT (negate) */        if(! (optimizeGlobals)) {
1869: /* MUTANT (del_stmt) */ /*               case JSOP_NAME:     op = JSOP_GETGVAR; */  break;
1869: /* MUTANT (del_stmt) */ /*               case JSOP_NAME:     op = JSOP_GETGVAR; */  /*  break; */ 
1869: /* MUTANT (del_stmt) */              case JSOP_NAME:     op = JSOP_GETGVAR; /*  break; */ 
1870: /* MUTANT (del_stmt) */ /*               case JSOP_SETNAME:  op = JSOP_SETGVAR; */  break;
1870: /* MUTANT (del_stmt) */ /*               case JSOP_SETNAME:  op = JSOP_SETGVAR; */  /*  break; */ 
1870: /* MUTANT (del_stmt) */              case JSOP_SETNAME:  op = JSOP_SETGVAR; /*  break; */ 
1872: /* MUTANT (del_stmt) */ /*               case JSOP_INCNAME:  op = JSOP_INCGVAR; */  break;
1872: /* MUTANT (del_stmt) */ /*               case JSOP_INCNAME:  op = JSOP_INCGVAR; */  /*  break; */ 
1872: /* MUTANT (del_stmt) */              case JSOP_INCNAME:  op = JSOP_INCGVAR; /*  break; */ 
1873: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEINC:  op = JSOP_GVARINC; */  break;
1873: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEINC:  op = JSOP_GVARINC; */  /*  break; */ 
1873: /* MUTANT (del_stmt) */              case JSOP_NAMEINC:  op = JSOP_GVARINC; /*  break; */ 
1874: /* MUTANT (del_stmt) */ /*               case JSOP_DECNAME:  op = JSOP_DECGVAR; */  break;
1874: /* MUTANT (del_stmt) */ /*               case JSOP_DECNAME:  op = JSOP_DECGVAR; */  /*  break; */ 
1874: /* MUTANT (del_stmt) */              case JSOP_DECNAME:  op = JSOP_DECGVAR; /*  break; */ 
1875: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEDEC:  op = JSOP_GVARDEC; */  break;
1875: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEDEC:  op = JSOP_GVARDEC; */  /*  break; */ 
1875: /* MUTANT (del_stmt) */              case JSOP_NAMEDEC:  op = JSOP_GVARDEC; /*  break; */ 
1878: /* MUTANT (del_stmt) */ /*               default: JS_ASSERT(0); */ 
1878: /* MUTANT (rep_const) */              default: JS_ASSERT(1);
1878: /* MUTANT (rep_const) */              default: JS_ASSERT(-1);
1880: /* MUTANT (rep_op) */        } else if (getter != js_GetLocalVariable ||
1880: /* MUTANT (rep_op) */        } else if (getter == js_GetLocalVariable &&
1881: /* MUTANT (rep_op) */                   getter != js_GetCallVariable) {
1883: /* MUTANT (del_stmt) */ /*               case JSOP_NAME:     op = JSOP_GETVAR; */  break;
1883: /* MUTANT (del_stmt) */ /*               case JSOP_NAME:     op = JSOP_GETVAR; */  /*  break; */ 
1883: /* MUTANT (del_stmt) */              case JSOP_NAME:     op = JSOP_GETVAR; /*  break; */ 
1884: /* MUTANT (del_stmt) */ /*               case JSOP_SETNAME:  op = JSOP_SETVAR; */  break;
1884: /* MUTANT (del_stmt) */ /*               case JSOP_SETNAME:  op = JSOP_SETVAR; */  /*  break; */ 
1884: /* MUTANT (del_stmt) */              case JSOP_SETNAME:  op = JSOP_SETVAR; /*  break; */ 
1885: /* MUTANT (del_stmt) */ /*               case JSOP_SETCONST: op = JSOP_SETVAR; */  break;
1885: /* MUTANT (del_stmt) */ /*               case JSOP_SETCONST: op = JSOP_SETVAR; */  /*  break; */ 
1885: /* MUTANT (del_stmt) */              case JSOP_SETCONST: op = JSOP_SETVAR; /*  break; */ 
1886: /* MUTANT (del_stmt) */ /*               case JSOP_INCNAME:  op = JSOP_INCVAR; */  break;
1886: /* MUTANT (del_stmt) */ /*               case JSOP_INCNAME:  op = JSOP_INCVAR; */  /*  break; */ 
1886: /* MUTANT (del_stmt) */              case JSOP_INCNAME:  op = JSOP_INCVAR; /*  break; */ 
1887: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEINC:  op = JSOP_VARINC; */  break;
1887: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEINC:  op = JSOP_VARINC; */  /*  break; */ 
1887: /* MUTANT (del_stmt) */              case JSOP_NAMEINC:  op = JSOP_VARINC; /*  break; */ 
1888: /* MUTANT (del_stmt) */ /*               case JSOP_DECNAME:  op = JSOP_DECVAR; */  break;
1888: /* MUTANT (del_stmt) */ /*               case JSOP_DECNAME:  op = JSOP_DECVAR; */  /*  break; */ 
1888: /* MUTANT (del_stmt) */              case JSOP_DECNAME:  op = JSOP_DECVAR; /*  break; */ 
1889: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEDEC:  op = JSOP_VARDEC; */  break;
1889: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEDEC:  op = JSOP_VARDEC; */  /*  break; */ 
1889: /* MUTANT (del_stmt) */              case JSOP_NAMEDEC:  op = JSOP_VARDEC; /*  break; */ 
1890: /* MUTANT (del_stmt) */ /*               case JSOP_FORNAME:  op = JSOP_FORVAR; */  break;
1890: /* MUTANT (del_stmt) */ /*               case JSOP_FORNAME:  op = JSOP_FORVAR; */  /*  break; */ 
1890: /* MUTANT (del_stmt) */              case JSOP_FORNAME:  op = JSOP_FORVAR; /*  break; */ 
1891: /* MUTANT (del_stmt) */ /*               case JSOP_DELNAME:  op = JSOP_FALSE; */  break;
1891: /* MUTANT (del_stmt) */ /*               case JSOP_DELNAME:  op = JSOP_FALSE; */  /*  break; */ 
1891: /* MUTANT (del_stmt) */              case JSOP_DELNAME:  op = JSOP_FALSE; /*  break; */ 
1892: /* MUTANT (del_stmt) */ /*               default: JS_ASSERT(0); */ 
1892: /* MUTANT (rep_const) */              default: JS_ASSERT(1);
1892: /* MUTANT (rep_const) */              default: JS_ASSERT(-1);
1894: /* MUTANT (rep_op) */        } else if (getter != js_GetArgument ||
1894: /* MUTANT (rep_op) */        } else if (getter == js_GetArgument &&
1895: /* MUTANT (rep_op) */                   (getter != js_CallClass.getProperty &&
1895: /* MUTANT (rep_op) */                   (getter == js_CallClass.getProperty ||
1896: /* MUTANT (rep_op) */                    fp->fun || (uintN) slot < fp->fun->nargs)) {
1896: /* MUTANT (rep_op) */                    fp->fun && (uintN) slot <= fp->fun->nargs)) {
1896: /* MUTANT (rep_op) */                    fp->fun && (uintN) slot > fp->fun->nargs)) {
1896: /* MUTANT (rep_op) */                    fp->fun && (uintN) slot >= fp->fun->nargs)) {
1896: /* MUTANT (rep_op) */                    fp->fun && (uintN) slot == fp->fun->nargs)) {
1896: /* MUTANT (rep_op) */                    fp->fun && (uintN) slot != fp->fun->nargs)) {
1898: /* MUTANT (del_stmt) */ /*               case JSOP_NAME:     op = JSOP_GETARG; */  break;
1898: /* MUTANT (del_stmt) */ /*               case JSOP_NAME:     op = JSOP_GETARG; */  /*  break; */ 
1898: /* MUTANT (del_stmt) */              case JSOP_NAME:     op = JSOP_GETARG; /*  break; */ 
1899: /* MUTANT (del_stmt) */ /*               case JSOP_SETNAME:  op = JSOP_SETARG; */  break;
1899: /* MUTANT (del_stmt) */ /*               case JSOP_SETNAME:  op = JSOP_SETARG; */  /*  break; */ 
1899: /* MUTANT (del_stmt) */              case JSOP_SETNAME:  op = JSOP_SETARG; /*  break; */ 
1900: /* MUTANT (del_stmt) */ /*               case JSOP_INCNAME:  op = JSOP_INCARG; */  break;
1900: /* MUTANT (del_stmt) */ /*               case JSOP_INCNAME:  op = JSOP_INCARG; */  /*  break; */ 
1900: /* MUTANT (del_stmt) */              case JSOP_INCNAME:  op = JSOP_INCARG; /*  break; */ 
1901: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEINC:  op = JSOP_ARGINC; */  break;
1901: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEINC:  op = JSOP_ARGINC; */  /*  break; */ 
1901: /* MUTANT (del_stmt) */              case JSOP_NAMEINC:  op = JSOP_ARGINC; /*  break; */ 
1902: /* MUTANT (del_stmt) */ /*               case JSOP_DECNAME:  op = JSOP_DECARG; */  break;
1902: /* MUTANT (del_stmt) */ /*               case JSOP_DECNAME:  op = JSOP_DECARG; */  /*  break; */ 
1902: /* MUTANT (del_stmt) */              case JSOP_DECNAME:  op = JSOP_DECARG; /*  break; */ 
1903: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEDEC:  op = JSOP_ARGDEC; */  break;
1903: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEDEC:  op = JSOP_ARGDEC; */  /*  break; */ 
1903: /* MUTANT (del_stmt) */              case JSOP_NAMEDEC:  op = JSOP_ARGDEC; /*  break; */ 
1904: /* MUTANT (del_stmt) */ /*               case JSOP_FORNAME:  op = JSOP_FORARG; */  break;
1904: /* MUTANT (del_stmt) */ /*               case JSOP_FORNAME:  op = JSOP_FORARG; */  /*  break; */ 
1904: /* MUTANT (del_stmt) */              case JSOP_FORNAME:  op = JSOP_FORARG; /*  break; */ 
1905: /* MUTANT (del_stmt) */ /*               case JSOP_DELNAME:  op = JSOP_FALSE; */  break;
1905: /* MUTANT (del_stmt) */ /*               case JSOP_DELNAME:  op = JSOP_FALSE; */  /*  break; */ 
1905: /* MUTANT (del_stmt) */              case JSOP_DELNAME:  op = JSOP_FALSE; /*  break; */ 
1906: /* MUTANT (del_stmt) */ /*               default: JS_ASSERT(0); */ 
1906: /* MUTANT (rep_const) */              default: JS_ASSERT(1);
1906: /* MUTANT (rep_const) */              default: JS_ASSERT(-1);
1909: /* MUTANT (rep_op) */        if (op == pn->pn_op) {
1909: /* MUTANT (negate) */        if(! (op != pn->pn_op)) {
1910: /* MUTANT (del_stmt) */ /*             pn->pn_op = op; */ 
1911: /* MUTANT (del_stmt) */ /*             pn->pn_slot = slot; */ 
1916: /* MUTANT (rep_op) */    if (pn->pn_slot <= 0) {
1916: /* MUTANT (rep_op) */    if (pn->pn_slot > 0) {
1916: /* MUTANT (rep_op) */    if (pn->pn_slot >= 0) {
1916: /* MUTANT (rep_op) */    if (pn->pn_slot == 0) {
1916: /* MUTANT (rep_op) */    if (pn->pn_slot != 0) {
1916: /* MUTANT (rep_const) */    if (pn->pn_slot < 1) {
1916: /* MUTANT (rep_const) */    if (pn->pn_slot < -1) {
1916: /* MUTANT (negate) */    if(! (pn->pn_slot < 0)) {
1924: /* MUTANT (rep_op) */        if (pn->pn_op != JSOP_NAME &&
1924: /* MUTANT (rep_op) */        if (pn->pn_op == JSOP_NAME ||
1925: /* MUTANT (rep_op) */            atom != cx->runtime->atomState.argumentsAtom) {
1926: /* MUTANT (del_stmt) */ /*             pn->pn_op = JSOP_ARGUMENTS; */ 
1927: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
1951: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
1952: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
1953: /* MUTANT (del_stmt) */ /*     JSParseNode *pn2; */ 
1955: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
1956: /* MUTANT (rep_op) */    if (!pn && *answer)
1956: /* MUTANT (negate) */    if(! (!pn || *answer))
1969: /* MUTANT (negate) */        if(! (fun->atom))
1971: /* MUTANT (del_stmt) */ /*         break; */ 
1974: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_NEW ||
1974: /* MUTANT (rep_op) */        if (pn->pn_type == TOK_NEW &&
1975: /* MUTANT (rep_op) */            pn->pn_type != TOK_LP ||
1975: /* MUTANT (rep_op) */            pn->pn_type == TOK_LP &&
1976: /* MUTANT (rep_op) */            pn->pn_type != TOK_LB) {
1988: /* MUTANT (del_stmt) */ /*             *answer = JS_TRUE; */ 
1996: /* MUTANT (rep_op) */        ok = CheckSideEffects(cx, tc, pn->pn_kid1, answer) ||
1997: /* MUTANT (rep_op) */             CheckSideEffects(cx, tc, pn->pn_kid2, answer) ||
1999: /* MUTANT (del_stmt) */ /*         break; */ 
2002: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_ASSIGN) {
2002: /* MUTANT (negate) */        if(! (pn->pn_type == TOK_ASSIGN)) {
2009: /* MUTANT (del_stmt) */ /*             *answer = JS_TRUE; */ 
2011: /* MUTANT (rep_op) */            if (pn->pn_type != TOK_LB) {
2011: /* MUTANT (negate) */            if(! (pn->pn_type == TOK_LB)) {
2012: /* MUTANT (del_stmt) */ /*                 pn2 = pn->pn_left; */ 
2013: /* MUTANT (rep_op) */                if (pn2->pn_type != TOK_NAME && !LookupArgOrVar(cx, tc, pn2))
2013: /* MUTANT (rep_op) */                if (pn2->pn_type == TOK_NAME || !LookupArgOrVar(cx, tc, pn2))
2013: /* MUTANT (negate) */                if(! (pn2->pn_type == TOK_NAME && !LookupArgOrVar(cx, tc, pn2)))
2015: /* MUTANT (rep_op) */                if (pn2->pn_op == JSOP_ARGUMENTS) {
2015: /* MUTANT (negate) */                if(! (pn2->pn_op != JSOP_ARGUMENTS)) {
2021: /* MUTANT (del_stmt) */ /*                     *answer = JS_TRUE; */ 
2024: /* MUTANT (rep_op) */            ok = CheckSideEffects(cx, tc, pn->pn_left, answer) ||
2030: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_INC || pn->pn_type == TOK_DEC ||
2030: /* MUTANT (rep_op) */        if (pn->pn_type == TOK_INC && pn->pn_type == TOK_DEC ||
2030: /* MUTANT (rep_op) */        if (pn->pn_type == TOK_INC || pn->pn_type != TOK_DEC ||
2030: /* MUTANT (rep_op) */        if (pn->pn_type == TOK_INC || pn->pn_type == TOK_DEC &&
2031: /* MUTANT (rep_op) */            pn->pn_type != TOK_DELETE ||
2031: /* MUTANT (rep_op) */            pn->pn_type == TOK_DELETE &&
2032: /* MUTANT (rep_op) */            pn->pn_type != TOK_THROW ||
2032: /* MUTANT (rep_op) */            pn->pn_type == TOK_THROW &&
2033: /* MUTANT (rep_op) */            pn->pn_type != TOK_DEFSHARP) {
2035: /* MUTANT (del_stmt) */ /*             *answer = JS_TRUE; */ 
2037: /* MUTANT (del_stmt) */ /*             ok = CheckSideEffects(cx, tc, pn->pn_kid, answer); */ 
2042: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_NAME) {
2042: /* MUTANT (negate) */        if(! (pn->pn_type == TOK_NAME)) {
2043: /* MUTANT (negate) */            if(! (!LookupArgOrVar(cx, tc, pn)))
2045: /* MUTANT (rep_op) */            if (pn->pn_slot <= 0 && pn->pn_op != JSOP_ARGUMENTS) {
2045: /* MUTANT (rep_op) */            if (pn->pn_slot > 0 && pn->pn_op != JSOP_ARGUMENTS) {
2045: /* MUTANT (rep_op) */            if (pn->pn_slot >= 0 && pn->pn_op != JSOP_ARGUMENTS) {
2045: /* MUTANT (rep_op) */            if (pn->pn_slot == 0 && pn->pn_op != JSOP_ARGUMENTS) {
2045: /* MUTANT (rep_op) */            if (pn->pn_slot != 0 && pn->pn_op != JSOP_ARGUMENTS) {
2045: /* MUTANT (rep_op) */            if (pn->pn_slot < 0 || pn->pn_op != JSOP_ARGUMENTS) {
2045: /* MUTANT (rep_op) */            if (pn->pn_slot < 0 && pn->pn_op == JSOP_ARGUMENTS) {
2045: /* MUTANT (rep_const) */            if (pn->pn_slot < 1 && pn->pn_op != JSOP_ARGUMENTS) {
2045: /* MUTANT (rep_const) */            if (pn->pn_slot < -1 && pn->pn_op != JSOP_ARGUMENTS) {
2045: /* MUTANT (negate) */            if(! (pn->pn_slot < 0 && pn->pn_op != JSOP_ARGUMENTS)) {
2050: /* MUTANT (del_stmt) */ /*                 *answer = JS_TRUE; */ 
2054: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_DOT && pn2->pn_type == TOK_NAME) {
2054: /* MUTANT (rep_op) */        if (pn->pn_type == TOK_DOT || pn2->pn_type == TOK_NAME) {
2054: /* MUTANT (rep_op) */        if (pn->pn_type == TOK_DOT && pn2->pn_type != TOK_NAME) {
2054: /* MUTANT (negate) */        if(! (pn->pn_type == TOK_DOT && pn2->pn_type == TOK_NAME)) {
2055: /* MUTANT (negate) */            if(! (!LookupArgOrVar(cx, tc, pn2)))
2057: /* MUTANT (rep_op) */            if (!(pn2->pn_op != JSOP_ARGUMENTS &&
2057: /* MUTANT (rep_op) */            if (!(pn2->pn_op == JSOP_ARGUMENTS ||
2058: /* MUTANT (rep_op) */                  pn->pn_atom != cx->runtime->atomState.lengthAtom)) {
2063: /* MUTANT (del_stmt) */ /*                 *answer = JS_TRUE; */ 
2067: /* MUTANT (del_stmt) */ /*         break; */ 
2070: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_DEBUGGER)
2070: /* MUTANT (negate) */        if(! (pn->pn_type == TOK_DEBUGGER))
2072: /* MUTANT (del_stmt) */ /*         break; */ 
2084: #define JSPROP_IMPLICIT_FUNCTION_NAMESPACE      1x100 /* MUTANT (rep_const) */
2084: #define JSPROP_IMPLICIT_FUNCTION_NAMESPACE      -1x100 /* MUTANT (rep_const) */
2089: /* MUTANT (rep_op) */    return ((op != JSOP_GETMETHOD &&
2089: /* MUTANT (rep_op) */    return ((op == JSOP_GETMETHOD ||
2090: /* MUTANT (rep_op) */             !(pn->pn_attrs & JSPROP_IMPLICIT_FUNCTION_NAMESPACE)) &&
2091: /* MUTANT (rep_op) */            op != JSOP_SETMETHOD)
2099: /* MUTANT (del_stmt) */ /*     JSParseNode *pn2, *pndot, *pnup, *pndown; */ 
2100: /* MUTANT (del_stmt) */ /*     ptrdiff_t top; */ 
2102: /* MUTANT (del_stmt) */ /*     pn2 = pn->pn_expr; */ 
2103: /* MUTANT (rep_op) */    if (op != JSOP_GETPROP &&
2103: /* MUTANT (rep_op) */    if (op == JSOP_GETPROP ||
2104: /* MUTANT (rep_op) */        pn->pn_type != TOK_DOT &&
2104: /* MUTANT (rep_op) */        pn->pn_type == TOK_DOT ||
2105: /* MUTANT (rep_op) */        pn2->pn_type != TOK_NAME) {
2107: /* MUTANT (negate) */        if(! (!LookupArgOrVar(cx, &cg->treeContext, pn2)))
2109: /* MUTANT (rep_op) */        if (pn2->pn_op != JSOP_ARGUMENTS &&
2109: /* MUTANT (rep_op) */        if (pn2->pn_op == JSOP_ARGUMENTS ||
2110: /* MUTANT (rep_op) */            pn->pn_atom != cx->runtime->atomState.lengthAtom) {
2111: /* MUTANT (del_stmt) */ /*             return js_Emit1(cx, cg, JSOP_ARGCNT) >= 0; */ 
2111: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ARGCNT) <= 0;
2111: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ARGCNT) < 0;
2111: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ARGCNT) > 0;
2111: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ARGCNT) == 0;
2111: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ARGCNT) != 0;
2111: /* MUTANT (rep_const) */            return js_Emit1(cx, cg, JSOP_ARGCNT) >= 1;
2111: /* MUTANT (rep_const) */            return js_Emit1(cx, cg, JSOP_ARGCNT) >= -1;
2120: /* MUTANT (rep_op) */    if (pn2->pn_type != TOK_DOT) {
2120: /* MUTANT (negate) */    if(! (pn2->pn_type == TOK_DOT)) {
2121: /* MUTANT (del_stmt) */ /*         pndot = pn2; */ 
2122: /* MUTANT (del_stmt) */ /*         pnup = NULL; */ 
2123: /* MUTANT (del_stmt) */ /*         top = CG_OFFSET(cg); */ 
2126: /* MUTANT (del_stmt) */ /*             pndot->pn_offset = top; */ 
2127: /* MUTANT (del_stmt) */ /*             pndown = pndot->pn_expr; */ 
2128: /* MUTANT (del_stmt) */ /*             pndot->pn_expr = pnup; */ 
2129: /* MUTANT (rep_op) */            if (pndown->pn_type == TOK_DOT)
2129: /* MUTANT (negate) */            if(! (pndown->pn_type != TOK_DOT))
2131: /* MUTANT (del_stmt) */ /*             pnup = pndot; */ 
2132: /* MUTANT (del_stmt) */ /*             pndot = pndown; */ 
2136: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pndown)))
2142: /* MUTANT (rep_op) */                               CG_OFFSET(cg) - pndown->pn_offset) <= 0) {
2142: /* MUTANT (rep_op) */                               CG_OFFSET(cg) - pndown->pn_offset) > 0) {
2142: /* MUTANT (rep_op) */                               CG_OFFSET(cg) - pndown->pn_offset) >= 0) {
2142: /* MUTANT (rep_op) */                               CG_OFFSET(cg) - pndown->pn_offset) == 0) {
2142: /* MUTANT (rep_op) */                               CG_OFFSET(cg) - pndown->pn_offset) != 0) {
2142: /* MUTANT (rep_const) */                               CG_OFFSET(cg) - pndown->pn_offset) < 1) {
2142: /* MUTANT (rep_const) */                               CG_OFFSET(cg) - pndown->pn_offset) < -1) {
2143: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
2145: /* MUTANT (negate) */            if(! (!EmitAtomOp(cx, pndot, pndot->pn_op, cg)))
2149: /* MUTANT (del_stmt) */ /*             pnup = pndot->pn_expr; */ 
2150: /* MUTANT (del_stmt) */ /*             pndot->pn_expr = pndown; */ 
2151: /* MUTANT (del_stmt) */ /*             pndown = pndot; */ 
2152: /* MUTANT (del_stmt) */ /*         } while ((pndot = pnup) != NULL); */ 
2152: /* MUTANT (rep_op) */        } while ((pndot = pnup) == NULL);
2152: /* MUTANT (negate) */        } while(! ((pndot = pnup) != NULL));
2154: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn2)))
2159: /* MUTANT (rep_op) */                       CG_OFFSET(cg) - pn2->pn_offset) <= 0) {
2159: /* MUTANT (rep_op) */                       CG_OFFSET(cg) - pn2->pn_offset) > 0) {
2159: /* MUTANT (rep_op) */                       CG_OFFSET(cg) - pn2->pn_offset) >= 0) {
2159: /* MUTANT (rep_op) */                       CG_OFFSET(cg) - pn2->pn_offset) == 0) {
2159: /* MUTANT (rep_op) */                       CG_OFFSET(cg) - pn2->pn_offset) != 0) {
2159: /* MUTANT (rep_const) */                       CG_OFFSET(cg) - pn2->pn_offset) < 1) {
2159: /* MUTANT (rep_const) */                       CG_OFFSET(cg) - pn2->pn_offset) < -1) {
2160: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
2162: /* MUTANT (negate) */    if(! (!pn->pn_atom)) {
2163: /* MUTANT (del_stmt) */ /*         JS_ASSERT(op == JSOP_IMPORTALL); */ 
2163: /* MUTANT (rep_op) */        JS_ASSERT(op != JSOP_IMPORTALL);
2164: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) <= 0)
2164: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) > 0)
2164: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) >= 0)
2164: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) == 0)
2164: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) != 0)
2164: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, op) < 1)
2164: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, op) < -1)
2164: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, op) < 0))
2167: /* MUTANT (negate) */        if(! (!EmitAtomOp(cx, pn, op, cg)))
2176: /* MUTANT (del_stmt) */ /*     ptrdiff_t top; */ 
2177: /* MUTANT (del_stmt) */ /*     JSParseNode *left, *right, *next, temp; */ 
2178: /* MUTANT (del_stmt) */ /*     jsint slot; */ 
2180: /* MUTANT (del_stmt) */ /*     top = CG_OFFSET(cg); */ 
2181: /* MUTANT (rep_op) */    if (pn->pn_arity != PN_LIST) {
2181: /* MUTANT (negate) */    if(! (pn->pn_arity == PN_LIST)) {
2183: /* MUTANT (del_stmt) */ /*         JS_ASSERT(pn->pn_op == JSOP_GETELEM); */ 
2183: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_op != JSOP_GETELEM);
2184: /* MUTANT (del_stmt) */ /*         JS_ASSERT(pn->pn_count >= 3); */ 
2184: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count <= 3);
2184: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count < 3);
2184: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count > 3);
2184: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count == 3);
2184: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count != 3);
2184: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_count >= 0);
2184: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_count >= 1);
2184: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_count >= -1);
2184: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_count >= ((3)+1));
2184: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_count >= ((3)-1));
2185: /* MUTANT (del_stmt) */ /*         left = pn->pn_head; */ 
2186: /* MUTANT (del_stmt) */ /*         right = PN_LAST(pn); */ 
2187: /* MUTANT (del_stmt) */ /*         next = left->pn_next; */ 
2188: /* MUTANT (del_stmt) */ /*         JS_ASSERT(next != right); */ 
2188: /* MUTANT (rep_op) */        JS_ASSERT(next == right);
2194: /* MUTANT (rep_op) */        if (left->pn_type != TOK_NAME && next->pn_type == TOK_NUMBER) {
2194: /* MUTANT (rep_op) */        if (left->pn_type == TOK_NAME || next->pn_type == TOK_NUMBER) {
2194: /* MUTANT (rep_op) */        if (left->pn_type == TOK_NAME && next->pn_type != TOK_NUMBER) {
2194: /* MUTANT (negate) */        if(! (left->pn_type == TOK_NAME && next->pn_type == TOK_NUMBER)) {
2195: /* MUTANT (negate) */            if(! (!LookupArgOrVar(cx, &cg->treeContext, left)))
2197: /* MUTANT (rep_op) */            if (left->pn_op != JSOP_ARGUMENTS &&
2197: /* MUTANT (rep_op) */            if (left->pn_op == JSOP_ARGUMENTS ||
2198: /* MUTANT (rep_op) */                JSDOUBLE_IS_INT(next->pn_dval, slot) ||
2199: /* MUTANT (rep_op) */                (jsuint)slot <= JS_BIT(16)) {
2199: /* MUTANT (rep_op) */                (jsuint)slot > JS_BIT(16)) {
2199: /* MUTANT (rep_op) */                (jsuint)slot >= JS_BIT(16)) {
2199: /* MUTANT (rep_op) */                (jsuint)slot == JS_BIT(16)) {
2199: /* MUTANT (rep_op) */                (jsuint)slot != JS_BIT(16)) {
2199: /* MUTANT (rep_const) */                (jsuint)slot < JS_BIT(0)) {
2199: /* MUTANT (rep_const) */                (jsuint)slot < JS_BIT(1)) {
2199: /* MUTANT (rep_const) */                (jsuint)slot < JS_BIT(-1)) {
2199: /* MUTANT (rep_const) */                (jsuint)slot < JS_BIT(((16)+1))) {
2199: /* MUTANT (rep_const) */                (jsuint)slot < JS_BIT(((16)-1))) {
2200: /* MUTANT (del_stmt) */ /*                 left->pn_offset = next->pn_offset = top; */ 
2201: /* MUTANT (del_stmt) */ /*                 EMIT_UINT16_IMM_OP(JSOP_ARGSUB, (jsatomid)slot); */ 
2202: /* MUTANT (del_stmt) */ /*                 left = next; */ 
2203: /* MUTANT (del_stmt) */ /*                 next = left->pn_next; */ 
2214: /* MUTANT (rep_op) */        JS_ASSERT(next == right || pn->pn_count == 3);
2214: /* MUTANT (rep_op) */        JS_ASSERT(next != right && pn->pn_count == 3);
2214: /* MUTANT (rep_op) */        JS_ASSERT(next != right || pn->pn_count != 3);
2214: /* MUTANT (rep_const) */        JS_ASSERT(next != right || pn->pn_count == 0);
2214: /* MUTANT (rep_const) */        JS_ASSERT(next != right || pn->pn_count == 1);
2214: /* MUTANT (rep_const) */        JS_ASSERT(next != right || pn->pn_count == -1);
2214: /* MUTANT (rep_const) */        JS_ASSERT(next != right || pn->pn_count == ((3)+1));
2214: /* MUTANT (rep_const) */        JS_ASSERT(next != right || pn->pn_count == ((3)-1));
2215: /* MUTANT (rep_op) */        if (left != pn->pn_head) {
2215: /* MUTANT (negate) */        if(! (left == pn->pn_head)) {
2216: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, left)))
2219: /* MUTANT (rep_op) */        while (next == right) {
2219: /* MUTANT (negate) */        while(! (next != right)) {
2220: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, next)))
2222: /* MUTANT (rep_op) */            if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) <= 0)
2222: /* MUTANT (rep_op) */            if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) > 0)
2222: /* MUTANT (rep_op) */            if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) >= 0)
2222: /* MUTANT (rep_op) */            if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) == 0)
2222: /* MUTANT (rep_op) */            if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) != 0)
2222: /* MUTANT (rep_const) */            if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) < 1)
2222: /* MUTANT (rep_const) */            if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) < -1)
2222: /* MUTANT (negate) */            if(! (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) < 0))
2224: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_GETELEM) <= 0)
2224: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_GETELEM) > 0)
2224: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_GETELEM) >= 0)
2224: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_GETELEM) == 0)
2224: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_GETELEM) != 0)
2224: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_GETELEM) < 1)
2224: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_GETELEM) < -1)
2224: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_GETELEM) < 0))
2226: /* MUTANT (del_stmt) */ /*             next = next->pn_next; */ 
2229: /* MUTANT (rep_op) */        if (pn->pn_arity != PN_NAME) {
2229: /* MUTANT (negate) */        if(! (pn->pn_arity == PN_NAME)) {
2234: /* MUTANT (del_stmt) */ /*             left = pn->pn_expr; */ 
2235: /* MUTANT (del_stmt) */ /*             right = &temp; */ 
2236: /* MUTANT (del_stmt) */ /*             right->pn_type = TOK_STRING; */ 
2237: /* MUTANT (del_stmt) */ /*             right->pn_arity = PN_NULLARY; */ 
2238: /* MUTANT (del_stmt) */ /*             right->pn_op = JSOP_STRING; */ 
2239: /* MUTANT (del_stmt) */ /*             right->pn_atom = pn->pn_atom; */ 
2241: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn->pn_arity == PN_BINARY); */ 
2241: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_arity != PN_BINARY);
2242: /* MUTANT (del_stmt) */ /*             left = pn->pn_left; */ 
2243: /* MUTANT (del_stmt) */ /*             right = pn->pn_right; */ 
2247: /* MUTANT (rep_op) */        if (op != JSOP_GETELEM &&
2247: /* MUTANT (rep_op) */        if (op == JSOP_GETELEM ||
2248: /* MUTANT (rep_op) */            left->pn_type != TOK_NAME &&
2248: /* MUTANT (rep_op) */            left->pn_type == TOK_NAME ||
2249: /* MUTANT (rep_op) */            right->pn_type != TOK_NUMBER) {
2250: /* MUTANT (negate) */            if(! (!LookupArgOrVar(cx, &cg->treeContext, left)))
2252: /* MUTANT (rep_op) */            if (left->pn_op != JSOP_ARGUMENTS &&
2252: /* MUTANT (rep_op) */            if (left->pn_op == JSOP_ARGUMENTS ||
2253: /* MUTANT (rep_op) */                JSDOUBLE_IS_INT(right->pn_dval, slot) ||
2254: /* MUTANT (rep_op) */                (jsuint)slot <= JS_BIT(16)) {
2254: /* MUTANT (rep_op) */                (jsuint)slot > JS_BIT(16)) {
2254: /* MUTANT (rep_op) */                (jsuint)slot >= JS_BIT(16)) {
2254: /* MUTANT (rep_op) */                (jsuint)slot == JS_BIT(16)) {
2254: /* MUTANT (rep_op) */                (jsuint)slot != JS_BIT(16)) {
2254: /* MUTANT (rep_const) */                (jsuint)slot < JS_BIT(0)) {
2254: /* MUTANT (rep_const) */                (jsuint)slot < JS_BIT(1)) {
2254: /* MUTANT (rep_const) */                (jsuint)slot < JS_BIT(-1)) {
2254: /* MUTANT (rep_const) */                (jsuint)slot < JS_BIT(((16)+1))) {
2254: /* MUTANT (rep_const) */                (jsuint)slot < JS_BIT(((16)-1))) {
2255: /* MUTANT (del_stmt) */ /*                 left->pn_offset = right->pn_offset = top; */ 
2256: /* MUTANT (del_stmt) */ /*                 EMIT_UINT16_IMM_OP(JSOP_ARGSUB, (jsatomid)slot); */ 
2257: /* MUTANT (del_stmt) */ /*                 return JS_TRUE; */ 
2261: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, left)))
2264: /* MUTANT (negate) */    if(! (!js_EmitTree(cx, cg, right)))
2266: /* MUTANT (rep_op) */    if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) <= 0)
2266: /* MUTANT (rep_op) */    if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) > 0)
2266: /* MUTANT (rep_op) */    if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) >= 0)
2266: /* MUTANT (rep_op) */    if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) == 0)
2266: /* MUTANT (rep_op) */    if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) != 0)
2266: /* MUTANT (rep_const) */    if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) < 1)
2266: /* MUTANT (rep_const) */    if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) < -1)
2266: /* MUTANT (negate) */    if(! (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - top) < 0))
2268: /* MUTANT (del_stmt) */ /*     return js_Emit1(cx, cg, op) >= 0; */ 
2268: /* MUTANT (rep_op) */    return js_Emit1(cx, cg, op) <= 0;
2268: /* MUTANT (rep_op) */    return js_Emit1(cx, cg, op) < 0;
2268: /* MUTANT (rep_op) */    return js_Emit1(cx, cg, op) > 0;
2268: /* MUTANT (rep_op) */    return js_Emit1(cx, cg, op) == 0;
2268: /* MUTANT (rep_op) */    return js_Emit1(cx, cg, op) != 0;
2268: /* MUTANT (rep_const) */    return js_Emit1(cx, cg, op) >= 1;
2268: /* MUTANT (rep_const) */    return js_Emit1(cx, cg, op) >= -1;
2274: /* MUTANT (del_stmt) */ /*     jsint ival; */ 
2275: /* MUTANT (del_stmt) */ /*     jsatomid atomIndex; */ 
2276: /* MUTANT (del_stmt) */ /*     ptrdiff_t off; */ 
2277: /* MUTANT (del_stmt) */ /*     jsbytecode *pc; */ 
2278: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
2279: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
2281: /* MUTANT (rep_op) */    if (JSDOUBLE_IS_INT(dval, ival) || INT_FITS_IN_JSVAL(ival)) {
2281: /* MUTANT (negate) */    if(! (JSDOUBLE_IS_INT(dval, ival) && INT_FITS_IN_JSVAL(ival))) {
2282: /* MUTANT (rep_op) */        if (ival != 0)
2282: /* MUTANT (rep_const) */        if (ival == 1)
2282: /* MUTANT (rep_const) */        if (ival == -1)
2282: /* MUTANT (negate) */        if(! (ival == 0))
2283: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ZERO) <= 0;
2283: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ZERO) < 0;
2283: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ZERO) > 0;
2283: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ZERO) == 0;
2283: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ZERO) != 0;
2283: /* MUTANT (rep_const) */            return js_Emit1(cx, cg, JSOP_ZERO) >= 1;
2283: /* MUTANT (rep_const) */            return js_Emit1(cx, cg, JSOP_ZERO) >= -1;
2284: /* MUTANT (rep_op) */        if (ival != 1)
2284: /* MUTANT (rep_const) */        if (ival == 0)
2284: /* MUTANT (rep_const) */        if (ival == -1)
2284: /* MUTANT (rep_const) */        if (ival == ((1)+1))
2284: /* MUTANT (negate) */        if(! (ival == 1))
2285: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ONE) <= 0;
2285: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ONE) < 0;
2285: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ONE) > 0;
2285: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ONE) == 0;
2285: /* MUTANT (rep_op) */            return js_Emit1(cx, cg, JSOP_ONE) != 0;
2285: /* MUTANT (rep_const) */            return js_Emit1(cx, cg, JSOP_ONE) >= 1;
2285: /* MUTANT (rep_const) */            return js_Emit1(cx, cg, JSOP_ONE) >= -1;
2287: /* MUTANT (del_stmt) */ /*         atomIndex = (jsatomid)ival; */ 
2288: /* MUTANT (rep_op) */        if (atomIndex <= JS_BIT(16)) {
2288: /* MUTANT (rep_op) */        if (atomIndex > JS_BIT(16)) {
2288: /* MUTANT (rep_op) */        if (atomIndex >= JS_BIT(16)) {
2288: /* MUTANT (rep_op) */        if (atomIndex == JS_BIT(16)) {
2288: /* MUTANT (rep_op) */        if (atomIndex != JS_BIT(16)) {
2288: /* MUTANT (rep_const) */        if (atomIndex < JS_BIT(0)) {
2288: /* MUTANT (rep_const) */        if (atomIndex < JS_BIT(1)) {
2288: /* MUTANT (rep_const) */        if (atomIndex < JS_BIT(-1)) {
2288: /* MUTANT (rep_const) */        if (atomIndex < JS_BIT(((16)+1))) {
2288: /* MUTANT (rep_const) */        if (atomIndex < JS_BIT(((16)-1))) {
2288: /* MUTANT (negate) */        if(! (atomIndex < JS_BIT(16))) {
2289: /* MUTANT (del_stmt) */ /*             EMIT_UINT16_IMM_OP(JSOP_UINT16, atomIndex); */ 
2290: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
2293: /* MUTANT (rep_op) */        if (atomIndex <= JS_BIT(24)) {
2293: /* MUTANT (rep_op) */        if (atomIndex > JS_BIT(24)) {
2293: /* MUTANT (rep_op) */        if (atomIndex >= JS_BIT(24)) {
2293: /* MUTANT (rep_op) */        if (atomIndex == JS_BIT(24)) {
2293: /* MUTANT (rep_op) */        if (atomIndex != JS_BIT(24)) {
2293: /* MUTANT (rep_const) */        if (atomIndex < JS_BIT(0)) {
2293: /* MUTANT (rep_const) */        if (atomIndex < JS_BIT(1)) {
2293: /* MUTANT (rep_const) */        if (atomIndex < JS_BIT(-1)) {
2293: /* MUTANT (rep_const) */        if (atomIndex < JS_BIT(((24)+1))) {
2293: /* MUTANT (rep_const) */        if (atomIndex < JS_BIT(((24)-1))) {
2293: /* MUTANT (negate) */        if(! (atomIndex < JS_BIT(24))) {
2294: /* MUTANT (del_stmt) */ /*             off = js_EmitN(cx, cg, JSOP_UINT24, 3); */ 
2294: /* MUTANT (rep_const) */            off = js_EmitN(cx, cg, JSOP_UINT24, 0);
2294: /* MUTANT (rep_const) */            off = js_EmitN(cx, cg, JSOP_UINT24, 1);
2294: /* MUTANT (rep_const) */            off = js_EmitN(cx, cg, JSOP_UINT24, -1);
2294: /* MUTANT (rep_const) */            off = js_EmitN(cx, cg, JSOP_UINT24, ((3)+1));
2294: /* MUTANT (rep_const) */            off = js_EmitN(cx, cg, JSOP_UINT24, ((3)-1));
2295: /* MUTANT (rep_op) */            if (off <= 0)
2295: /* MUTANT (rep_op) */            if (off > 0)
2295: /* MUTANT (rep_op) */            if (off >= 0)
2295: /* MUTANT (rep_op) */            if (off == 0)
2295: /* MUTANT (rep_op) */            if (off != 0)
2295: /* MUTANT (rep_const) */            if (off < 1)
2295: /* MUTANT (rep_const) */            if (off < -1)
2295: /* MUTANT (negate) */            if(! (off < 0))
2297: /* MUTANT (del_stmt) */ /*             pc = CG_CODE(cg, off); */ 
2298: /* MUTANT (del_stmt) */ /*             SET_LITERAL_INDEX(pc, atomIndex); */ 
2299: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
2302: /* MUTANT (rep_const) */        atom = js_AtomizeInt(cx, ival, 1);
2302: /* MUTANT (rep_const) */        atom = js_AtomizeInt(cx, ival, -1);
2304: /* MUTANT (del_stmt) */ /*         atom = js_AtomizeDouble(cx, dval, 0); */ 
2304: /* MUTANT (rep_const) */        atom = js_AtomizeDouble(cx, dval, 1);
2304: /* MUTANT (rep_const) */        atom = js_AtomizeDouble(cx, dval, -1);
2306: /* MUTANT (negate) */    if(! (!atom))
2309: /* MUTANT (del_stmt) */ /*     ale = js_IndexAtom(cx, atom, &cg->atomList); */ 
2310: /* MUTANT (negate) */    if(! (!ale))
2312: /* MUTANT (del_stmt) */ /*     return EmitAtomIndexOp(cx, JSOP_NUMBER, ALE_INDEX(ale), cg); */ 
2320: /* MUTANT (del_stmt) */ /*     JSOp switchOp; */ 
2321: /* MUTANT (del_stmt) */ /*     JSBool ok, hasDefault, constPropagated; */ 
2322: /* MUTANT (del_stmt) */ /*     ptrdiff_t top, off, defaultOffset; */ 
2323: /* MUTANT (del_stmt) */ /*     JSParseNode *pn2, *pn3, *pn4; */ 
2324: /* MUTANT (del_stmt) */ /*     uint32 caseCount, tableLength; */ 
2325: /* MUTANT (del_stmt) */ /*     JSParseNode **table; */ 
2326: /* MUTANT (del_stmt) */ /*     jsdouble d; */ 
2327: /* MUTANT (del_stmt) */ /*     jsint i, low, high; */ 
2328: /* MUTANT (del_stmt) */ /*     jsval v; */ 
2329: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
2330: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
2331: /* MUTANT (del_stmt) */ /*     intN noteIndex; */ 
2332: /* MUTANT (del_stmt) */ /*     size_t switchSize, tableSize; */ 
2333: /* MUTANT (del_stmt) */ /*     jsbytecode *pc, *savepc; */ 
2336: /* MUTANT (del_stmt) */ /*     switchOp = JSOP_TABLESWITCH; */ 
2337: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
2338: /* MUTANT (del_stmt) */ /*     hasDefault = constPropagated = JS_FALSE; */ 
2339: /* MUTANT (del_stmt) */ /*     defaultOffset = -1; */ 
2339: /* MUTANT (rep_const) */    defaultOffset = 0;
2339: /* MUTANT (rep_const) */    defaultOffset = 1;
2339: /* MUTANT (rep_const) */    defaultOffset = ((-1)+1);
2339: /* MUTANT (rep_const) */    defaultOffset = ((-1)-1);
2342: /* MUTANT (negate) */    if(! (!js_EmitTree(cx, cg, pn->pn_kid1)))
2346: /* MUTANT (del_stmt) */ /*     top = CG_OFFSET(cg); */ 
2347: /* MUTANT (del_stmt) */ /*     js_PushStatement(&cg->treeContext, stmtInfo, STMT_SWITCH, top); */ 
2349: /* MUTANT (del_stmt) */ /*     pn2 = pn->pn_kid2; */ 
2350: /* MUTANT (del_stmt) */ /*     caseCount = pn2->pn_count; */ 
2351: /* MUTANT (del_stmt) */ /*     tableLength = 0; */ 
2351: /* MUTANT (rep_const) */    tableLength = 1;
2351: /* MUTANT (rep_const) */    tableLength = -1;
2352: /* MUTANT (del_stmt) */ /*     table = NULL; */ 
2354: /* MUTANT (rep_op) */    if (caseCount != 0 ||
2354: /* MUTANT (rep_op) */    if (caseCount == 0 &&
2354: /* MUTANT (rep_const) */    if (caseCount == 1 ||
2354: /* MUTANT (rep_const) */    if (caseCount == -1 ||
2355: /* MUTANT (rep_op) */        (caseCount != 1 &&
2355: /* MUTANT (rep_op) */        (caseCount == 1 ||
2355: /* MUTANT (rep_const) */        (caseCount == 0 &&
2355: /* MUTANT (rep_const) */        (caseCount == -1 &&
2355: /* MUTANT (rep_const) */        (caseCount == ((1)+1) &&
2356: /* MUTANT (rep_op) */         (hasDefault = (pn2->pn_head->pn_type != TOK_DEFAULT)))) {
2357: /* MUTANT (del_stmt) */ /*         caseCount = 0; */ 
2357: /* MUTANT (rep_const) */        caseCount = 1;
2357: /* MUTANT (rep_const) */        caseCount = -1;
2358: /* MUTANT (del_stmt) */ /*         low = 0; */ 
2358: /* MUTANT (rep_const) */        low = 1;
2358: /* MUTANT (rep_const) */        low = -1;
2359: /* MUTANT (del_stmt) */ /*         high = -1; */ 
2359: /* MUTANT (rep_const) */        high = 0;
2359: /* MUTANT (rep_const) */        high = 1;
2359: /* MUTANT (rep_const) */        high = ((-1)+1);
2359: /* MUTANT (rep_const) */        high = ((-1)-1);
2361: #define INTMAP_LENGTH   0 /* MUTANT (rep_const) */
2361: #define INTMAP_LENGTH   1 /* MUTANT (rep_const) */
2361: #define INTMAP_LENGTH   -1 /* MUTANT (rep_const) */
2361: #define INTMAP_LENGTH   ((256)+1) /* MUTANT (rep_const) */
2361: #define INTMAP_LENGTH   ((256)-1) /* MUTANT (rep_const) */
2363: /* MUTANT (del_stmt) */ /*         jsbitmap *intmap = NULL; */ 
2364: /* MUTANT (del_stmt) */ /*         int32 intmap_bitlen = 0; */ 
2364: /* MUTANT (rep_const) */        int32 intmap_bitlen = 1;
2364: /* MUTANT (rep_const) */        int32 intmap_bitlen = -1;
2366: /* MUTANT (del_stmt) */ /*         low  = JSVAL_INT_MAX; */ 
2367: /* MUTANT (del_stmt) */ /*         high = JSVAL_INT_MIN; */ 
2370: /* MUTANT (rep_op) */            if (pn3->pn_type != TOK_DEFAULT) {
2370: /* MUTANT (negate) */            if(! (pn3->pn_type == TOK_DEFAULT)) {
2371: /* MUTANT (del_stmt) */ /*                 hasDefault = JS_TRUE; */ 
2372: /* MUTANT (del_stmt) */ /*                 caseCount--; */     /* one of the "cases" was the default */
2372: /* MUTANT (rep_op) */                caseCount++;    /* one of the "cases" was the default */
2373: /* MUTANT (del_stmt) */ /*                 continue; */ 
2376: /* MUTANT (rep_op) */            JS_ASSERT(pn3->pn_type != TOK_CASE);
2377: /* MUTANT (rep_op) */            if (switchOp != JSOP_CONDSWITCH)
2377: /* MUTANT (negate) */            if(! (switchOp == JSOP_CONDSWITCH))
2380: /* MUTANT (del_stmt) */ /*             pn4 = pn3->pn_left; */ 
2384: /* MUTANT (rep_op) */                if (JSDOUBLE_IS_INT(d, i) || INT_FITS_IN_JSVAL(i)) {
2384: /* MUTANT (negate) */                if(! (JSDOUBLE_IS_INT(d, i) && INT_FITS_IN_JSVAL(i))) {
2385: /* MUTANT (del_stmt) */ /*                     pn3->pn_val = INT_TO_JSVAL(i); */ 
2387: /* MUTANT (del_stmt) */ /*                     atom = js_AtomizeDouble(cx, d, 0); */ 
2387: /* MUTANT (rep_const) */                    atom = js_AtomizeDouble(cx, d, 1);
2387: /* MUTANT (rep_const) */                    atom = js_AtomizeDouble(cx, d, -1);
2388: /* MUTANT (negate) */                    if(! (!atom)) {
2389: /* MUTANT (del_stmt) */ /*                         ok = JS_FALSE; */ 
2390: /* MUTANT (del_stmt) */ /*                         goto release; */ 
2397: /* MUTANT (del_stmt) */ /*                 break; */ 
2399: /* MUTANT (negate) */                if(! (!pn4->pn_expr)) {
2400: /* MUTANT (del_stmt) */ /*                     ok = js_LookupCompileTimeConstant(cx, cg, pn4->pn_atom, &v); */ 
2401: /* MUTANT (negate) */                    if(! (!ok))
2403: /* MUTANT (negate) */                    if(! (!JSVAL_IS_VOID(v))) {
2404: /* MUTANT (del_stmt) */ /*                         pn3->pn_val = v; */ 
2405: /* MUTANT (del_stmt) */ /*                         constPropagated = JS_TRUE; */ 
2406: /* MUTANT (del_stmt) */ /*                         break; */ 
2411: /* MUTANT (rep_op) */                if (pn4->pn_op != JSOP_TRUE) {
2411: /* MUTANT (negate) */                if(! (pn4->pn_op == JSOP_TRUE)) {
2412: /* MUTANT (del_stmt) */ /*                     pn3->pn_val = JSVAL_TRUE; */ 
2413: /* MUTANT (del_stmt) */ /*                     break; */ 
2415: /* MUTANT (rep_op) */                if (pn4->pn_op != JSOP_FALSE) {
2415: /* MUTANT (negate) */                if(! (pn4->pn_op == JSOP_FALSE)) {
2416: /* MUTANT (del_stmt) */ /*                     pn3->pn_val = JSVAL_FALSE; */ 
2417: /* MUTANT (del_stmt) */ /*                     break; */ 
2422: /* MUTANT (del_stmt) */ /*                 continue; */ 
2425: /* MUTANT (rep_op) */            JS_ASSERT(JSVAL_IS_NUMBER(pn3->pn_val) &&
2426: /* MUTANT (rep_op) */                      JSVAL_IS_STRING(pn3->pn_val) &&
2429: /* MUTANT (rep_op) */            if (switchOp == JSOP_TABLESWITCH)
2429: /* MUTANT (negate) */            if(! (switchOp != JSOP_TABLESWITCH))
2431: /* MUTANT (negate) */            if(! (!JSVAL_IS_INT(pn3->pn_val))) {
2432: /* MUTANT (del_stmt) */ /*                 switchOp = JSOP_LOOKUPSWITCH; */ 
2433: /* MUTANT (del_stmt) */ /*                 continue; */ 
2436: /* MUTANT (rep_op) */            if ((jsuint)(i - (jsint)JS_BIT(15)) >= (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_op) */            if ((jsuint)(i * (jsint)JS_BIT(15)) >= (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_op) */            if ((jsuint)(i % (jsint)JS_BIT(15)) >= (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_op) */            if ((jsuint)(i + (jsint)JS_BIT(15)) <= (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_op) */            if ((jsuint)(i + (jsint)JS_BIT(15)) < (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_op) */            if ((jsuint)(i + (jsint)JS_BIT(15)) > (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_op) */            if ((jsuint)(i + (jsint)JS_BIT(15)) == (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_op) */            if ((jsuint)(i + (jsint)JS_BIT(15)) != (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_const) */            if ((jsuint)(i + (jsint)JS_BIT(0)) >= (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_const) */            if ((jsuint)(i + (jsint)JS_BIT(1)) >= (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_const) */            if ((jsuint)(i + (jsint)JS_BIT(-1)) >= (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_const) */            if ((jsuint)(i + (jsint)JS_BIT(((15)+1))) >= (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_const) */            if ((jsuint)(i + (jsint)JS_BIT(((15)-1))) >= (jsuint)JS_BIT(16)) {
2436: /* MUTANT (rep_const) */            if ((jsuint)(i + (jsint)JS_BIT(15)) >= (jsuint)JS_BIT(0)) {
2436: /* MUTANT (rep_const) */            if ((jsuint)(i + (jsint)JS_BIT(15)) >= (jsuint)JS_BIT(1)) {
2436: /* MUTANT (rep_const) */            if ((jsuint)(i + (jsint)JS_BIT(15)) >= (jsuint)JS_BIT(-1)) {
2436: /* MUTANT (rep_const) */            if ((jsuint)(i + (jsint)JS_BIT(15)) >= (jsuint)JS_BIT(((16)+1))) {
2436: /* MUTANT (rep_const) */            if ((jsuint)(i + (jsint)JS_BIT(15)) >= (jsuint)JS_BIT(((16)-1))) {
2436: /* MUTANT (negate) */            if(! ((jsuint)(i + (jsint)JS_BIT(15)) >= (jsuint)JS_BIT(16))) {
2437: /* MUTANT (del_stmt) */ /*                 switchOp = JSOP_LOOKUPSWITCH; */ 
2438: /* MUTANT (del_stmt) */ /*                 continue; */ 
2440: /* MUTANT (rep_op) */            if (i <= low)
2440: /* MUTANT (rep_op) */            if (i > low)
2440: /* MUTANT (rep_op) */            if (i >= low)
2440: /* MUTANT (rep_op) */            if (i == low)
2440: /* MUTANT (rep_op) */            if (i != low)
2440: /* MUTANT (negate) */            if(! (i < low))
2442: /* MUTANT (rep_op) */            if (high <= i)
2442: /* MUTANT (rep_op) */            if (high > i)
2442: /* MUTANT (rep_op) */            if (high >= i)
2442: /* MUTANT (rep_op) */            if (high == i)
2442: /* MUTANT (rep_op) */            if (high != i)
2442: /* MUTANT (negate) */            if(! (high < i))
2450: /* MUTANT (rep_op) */            if (i <= 0)
2450: /* MUTANT (rep_op) */            if (i > 0)
2450: /* MUTANT (rep_op) */            if (i >= 0)
2450: /* MUTANT (rep_op) */            if (i == 0)
2450: /* MUTANT (rep_op) */            if (i != 0)
2450: /* MUTANT (rep_const) */            if (i < 1)
2450: /* MUTANT (rep_const) */            if (i < -1)
2450: /* MUTANT (negate) */            if(! (i < 0))
2451: /* MUTANT (rep_op) */                i -= JS_BIT(16);
2451: /* MUTANT (rep_op) */                i *= JS_BIT(16);
2451: /* MUTANT (rep_op) */                i %= JS_BIT(16);
2451: /* MUTANT (rep_const) */                i += JS_BIT(0);
2451: /* MUTANT (rep_const) */                i += JS_BIT(1);
2451: /* MUTANT (rep_const) */                i += JS_BIT(-1);
2451: /* MUTANT (rep_const) */                i += JS_BIT(((16)+1));
2451: /* MUTANT (rep_const) */                i += JS_BIT(((16)-1));
2452: /* MUTANT (rep_op) */            if (i <= intmap_bitlen) {
2452: /* MUTANT (rep_op) */            if (i < intmap_bitlen) {
2452: /* MUTANT (rep_op) */            if (i > intmap_bitlen) {
2452: /* MUTANT (rep_op) */            if (i == intmap_bitlen) {
2452: /* MUTANT (rep_op) */            if (i != intmap_bitlen) {
2452: /* MUTANT (negate) */            if(! (i >= intmap_bitlen)) {
2453: /* MUTANT (rep_op) */                if (!intmap ||
2454: /* MUTANT (rep_op) */                    i <= (INTMAP_LENGTH << JS_BITS_PER_WORD_LOG2)) {
2454: /* MUTANT (rep_op) */                    i > (INTMAP_LENGTH << JS_BITS_PER_WORD_LOG2)) {
2454: /* MUTANT (rep_op) */                    i >= (INTMAP_LENGTH << JS_BITS_PER_WORD_LOG2)) {
2454: /* MUTANT (rep_op) */                    i == (INTMAP_LENGTH << JS_BITS_PER_WORD_LOG2)) {
2454: /* MUTANT (rep_op) */                    i != (INTMAP_LENGTH << JS_BITS_PER_WORD_LOG2)) {
2455: /* MUTANT (del_stmt) */ /*                     intmap = intmap_space; */ 
2456: /* MUTANT (del_stmt) */ /*                     intmap_bitlen = INTMAP_LENGTH << JS_BITS_PER_WORD_LOG2; */ 
2459: /* MUTANT (del_stmt) */ /*                     intmap_bitlen = JS_BIT(16); */ 
2459: /* MUTANT (rep_const) */                    intmap_bitlen = JS_BIT(0);
2459: /* MUTANT (rep_const) */                    intmap_bitlen = JS_BIT(1);
2459: /* MUTANT (rep_const) */                    intmap_bitlen = JS_BIT(-1);
2459: /* MUTANT (rep_const) */                    intmap_bitlen = JS_BIT(((16)+1));
2459: /* MUTANT (rep_const) */                    intmap_bitlen = JS_BIT(((16)-1));
2462: /* MUTANT (rep_const) */                                  (JS_BIT(0) >> JS_BITS_PER_WORD_LOG2)
2462: /* MUTANT (rep_const) */                                  (JS_BIT(1) >> JS_BITS_PER_WORD_LOG2)
2462: /* MUTANT (rep_const) */                                  (JS_BIT(-1) >> JS_BITS_PER_WORD_LOG2)
2462: /* MUTANT (rep_const) */                                  (JS_BIT(((16)+1)) >> JS_BITS_PER_WORD_LOG2)
2462: /* MUTANT (rep_const) */                                  (JS_BIT(((16)-1)) >> JS_BITS_PER_WORD_LOG2)
2464: /* MUTANT (negate) */                    if(! (!intmap)) {
2465: /* MUTANT (del_stmt) */ /*                         JS_ReportOutOfMemory(cx); */ 
2466: /* MUTANT (del_stmt) */ /*                         return JS_FALSE; */ 
2469: /* MUTANT (rep_const) */                memset(intmap, 1, intmap_bitlen >> JS_BITS_PER_BYTE_LOG2);
2469: /* MUTANT (rep_const) */                memset(intmap, -1, intmap_bitlen >> JS_BITS_PER_BYTE_LOG2);
2471: /* MUTANT (negate) */            if(! (JS_TEST_BIT(intmap, i))) {
2472: /* MUTANT (del_stmt) */ /*                 switchOp = JSOP_LOOKUPSWITCH; */ 
2473: /* MUTANT (del_stmt) */ /*                 continue; */ 
2479: /* MUTANT (rep_op) */        if (intmap || intmap != intmap_space)
2479: /* MUTANT (rep_op) */        if (intmap && intmap == intmap_space)
2479: /* MUTANT (negate) */        if(! (intmap && intmap != intmap_space))
2481: /* MUTANT (negate) */        if(! (!ok))
2488: /* MUTANT (rep_op) */        if (switchOp != JSOP_TABLESWITCH) {
2488: /* MUTANT (negate) */        if(! (switchOp == JSOP_TABLESWITCH)) {
2489: /* MUTANT (del_stmt) */ /*             tableLength = (uint32)(high - low + 1); */ 
2489: /* MUTANT (rep_op) */            tableLength = (uint32)(high - low - 1);
2489: /* MUTANT (rep_op) */            tableLength = (uint32)(high - low * 1);
2489: /* MUTANT (rep_op) */            tableLength = (uint32)(high - low % 1);
2489: /* MUTANT (rep_const) */            tableLength = (uint32)(high - low + 0);
2489: /* MUTANT (rep_const) */            tableLength = (uint32)(high - low + -1);
2489: /* MUTANT (rep_const) */            tableLength = (uint32)(high - low + ((1)+1));
2490: /* MUTANT (rep_op) */            if (tableLength <= JS_BIT(16) || tableLength > 2 * caseCount)
2490: /* MUTANT (rep_op) */            if (tableLength < JS_BIT(16) || tableLength > 2 * caseCount)
2490: /* MUTANT (rep_op) */            if (tableLength > JS_BIT(16) || tableLength > 2 * caseCount)
2490: /* MUTANT (rep_op) */            if (tableLength == JS_BIT(16) || tableLength > 2 * caseCount)
2490: /* MUTANT (rep_op) */            if (tableLength != JS_BIT(16) || tableLength > 2 * caseCount)
2490: /* MUTANT (rep_op) */            if (tableLength >= JS_BIT(16) && tableLength > 2 * caseCount)
2490: /* MUTANT (rep_op) */            if (tableLength >= JS_BIT(16) || tableLength <= 2 * caseCount)
2490: /* MUTANT (rep_op) */            if (tableLength >= JS_BIT(16) || tableLength < 2 * caseCount)
2490: /* MUTANT (rep_op) */            if (tableLength >= JS_BIT(16) || tableLength >= 2 * caseCount)
2490: /* MUTANT (rep_op) */            if (tableLength >= JS_BIT(16) || tableLength == 2 * caseCount)
2490: /* MUTANT (rep_op) */            if (tableLength >= JS_BIT(16) || tableLength != 2 * caseCount)
2490: /* MUTANT (rep_const) */            if (tableLength >= JS_BIT(0) || tableLength > 2 * caseCount)
2490: /* MUTANT (rep_const) */            if (tableLength >= JS_BIT(1) || tableLength > 2 * caseCount)
2490: /* MUTANT (rep_const) */            if (tableLength >= JS_BIT(-1) || tableLength > 2 * caseCount)
2490: /* MUTANT (rep_const) */            if (tableLength >= JS_BIT(((16)+1)) || tableLength > 2 * caseCount)
2490: /* MUTANT (rep_const) */            if (tableLength >= JS_BIT(((16)-1)) || tableLength > 2 * caseCount)
2490: /* MUTANT (rep_const) */            if (tableLength >= JS_BIT(16) || tableLength > 0 * caseCount)
2490: /* MUTANT (rep_const) */            if (tableLength >= JS_BIT(16) || tableLength > 1 * caseCount)
2490: /* MUTANT (rep_const) */            if (tableLength >= JS_BIT(16) || tableLength > -1 * caseCount)
2490: /* MUTANT (rep_const) */            if (tableLength >= JS_BIT(16) || tableLength > ((2)+1) * caseCount)
2490: /* MUTANT (rep_const) */            if (tableLength >= JS_BIT(16) || tableLength > ((2)-1) * caseCount)
2490: /* MUTANT (negate) */            if(! (tableLength >= JS_BIT(16) || tableLength > 2 * caseCount))
2499: /* MUTANT (rep_const) */    noteIndex = js_NewSrcNote3(cx, cg, SRC_SWITCH, 1, 0);
2499: /* MUTANT (rep_const) */    noteIndex = js_NewSrcNote3(cx, cg, SRC_SWITCH, -1, 0);
2499: /* MUTANT (rep_const) */    noteIndex = js_NewSrcNote3(cx, cg, SRC_SWITCH, 0, 1);
2499: /* MUTANT (rep_const) */    noteIndex = js_NewSrcNote3(cx, cg, SRC_SWITCH, 0, -1);
2500: /* MUTANT (rep_op) */    if (noteIndex <= 0)
2500: /* MUTANT (rep_op) */    if (noteIndex > 0)
2500: /* MUTANT (rep_op) */    if (noteIndex >= 0)
2500: /* MUTANT (rep_op) */    if (noteIndex == 0)
2500: /* MUTANT (rep_op) */    if (noteIndex != 0)
2500: /* MUTANT (rep_const) */    if (noteIndex < 1)
2500: /* MUTANT (rep_const) */    if (noteIndex < -1)
2500: /* MUTANT (negate) */    if(! (noteIndex < 0))
2503: /* MUTANT (rep_op) */    if (switchOp != JSOP_CONDSWITCH) {
2503: /* MUTANT (negate) */    if(! (switchOp == JSOP_CONDSWITCH)) {
2507: /* MUTANT (del_stmt) */ /*         switchSize = 0; */ 
2507: /* MUTANT (rep_const) */        switchSize = 1;
2507: /* MUTANT (rep_const) */        switchSize = -1;
2508: /* MUTANT (rep_op) */    } else if (switchOp != JSOP_TABLESWITCH) {
2508: /* MUTANT (negate) */    } else if(! (switchOp == JSOP_TABLESWITCH)) {
2512: /* MUTANT (del_stmt) */ /*         switchSize = (size_t)(JUMP_OFFSET_LEN * (3 + tableLength)); */ 
2512: /* MUTANT (rep_op) */        switchSize = (size_t)(JUMP_OFFSET_LEN * (3 - tableLength));
2512: /* MUTANT (rep_op) */        switchSize = (size_t)(JUMP_OFFSET_LEN * (3 * tableLength));
2512: /* MUTANT (rep_op) */        switchSize = (size_t)(JUMP_OFFSET_LEN * (3 % tableLength));
2512: /* MUTANT (rep_const) */        switchSize = (size_t)(JUMP_OFFSET_LEN * (0 + tableLength));
2512: /* MUTANT (rep_const) */        switchSize = (size_t)(JUMP_OFFSET_LEN * (1 + tableLength));
2512: /* MUTANT (rep_const) */        switchSize = (size_t)(JUMP_OFFSET_LEN * (-1 + tableLength));
2512: /* MUTANT (rep_const) */        switchSize = (size_t)(JUMP_OFFSET_LEN * (((3)+1) + tableLength));
2512: /* MUTANT (rep_const) */        switchSize = (size_t)(JUMP_OFFSET_LEN * (((3)-1) + tableLength));
2519: /* MUTANT (rep_op) */        switchSize = (size_t)(JUMP_OFFSET_LEN - ATOM_INDEX_LEN +
2519: /* MUTANT (rep_op) */        switchSize = (size_t)(JUMP_OFFSET_LEN * ATOM_INDEX_LEN +
2519: /* MUTANT (rep_op) */        switchSize = (size_t)(JUMP_OFFSET_LEN % ATOM_INDEX_LEN +
2519: /* MUTANT (rep_op) */        switchSize = (size_t)(JUMP_OFFSET_LEN + ATOM_INDEX_LEN -
2519: /* MUTANT (rep_op) */        switchSize = (size_t)(JUMP_OFFSET_LEN + ATOM_INDEX_LEN *
2519: /* MUTANT (rep_op) */        switchSize = (size_t)(JUMP_OFFSET_LEN + ATOM_INDEX_LEN %
2520: /* MUTANT (rep_op) */                              (ATOM_INDEX_LEN - JUMP_OFFSET_LEN) * caseCount);
2520: /* MUTANT (rep_op) */                              (ATOM_INDEX_LEN * JUMP_OFFSET_LEN) * caseCount);
2520: /* MUTANT (rep_op) */                              (ATOM_INDEX_LEN % JUMP_OFFSET_LEN) * caseCount);
2534: /* MUTANT (rep_op) */    if (js_EmitN(cx, cg, switchOp, switchSize) <= 0)
2534: /* MUTANT (rep_op) */    if (js_EmitN(cx, cg, switchOp, switchSize) > 0)
2534: /* MUTANT (rep_op) */    if (js_EmitN(cx, cg, switchOp, switchSize) >= 0)
2534: /* MUTANT (rep_op) */    if (js_EmitN(cx, cg, switchOp, switchSize) == 0)
2534: /* MUTANT (rep_op) */    if (js_EmitN(cx, cg, switchOp, switchSize) != 0)
2534: /* MUTANT (rep_const) */    if (js_EmitN(cx, cg, switchOp, switchSize) < 1)
2534: /* MUTANT (rep_const) */    if (js_EmitN(cx, cg, switchOp, switchSize) < -1)
2534: /* MUTANT (negate) */    if(! (js_EmitN(cx, cg, switchOp, switchSize) < 0))
2537: /* MUTANT (del_stmt) */ /*     off = -1; */ 
2537: /* MUTANT (rep_const) */    off = 0;
2537: /* MUTANT (rep_const) */    off = 1;
2537: /* MUTANT (rep_const) */    off = ((-1)+1);
2537: /* MUTANT (rep_const) */    off = ((-1)-1);
2538: /* MUTANT (rep_op) */    if (switchOp != JSOP_CONDSWITCH) {
2538: /* MUTANT (negate) */    if(! (switchOp == JSOP_CONDSWITCH)) {
2539: /* MUTANT (del_stmt) */ /*         intN caseNoteIndex = -1; */ 
2539: /* MUTANT (rep_const) */        intN caseNoteIndex = 0;
2539: /* MUTANT (rep_const) */        intN caseNoteIndex = 1;
2539: /* MUTANT (rep_const) */        intN caseNoteIndex = ((-1)+1);
2539: /* MUTANT (rep_const) */        intN caseNoteIndex = ((-1)-1);
2540: /* MUTANT (del_stmt) */ /*         JSBool beforeCases = JS_TRUE; */ 
2544: /* MUTANT (del_stmt) */ /*             pn4 = pn3->pn_left; */ 
2545: /* MUTANT (rep_op) */            if (pn4 || !js_EmitTree(cx, cg, pn4))
2545: /* MUTANT (negate) */            if(! (pn4 && !js_EmitTree(cx, cg, pn4)))
2547: /* MUTANT (rep_op) */            if (caseNoteIndex <= 0) {
2547: /* MUTANT (rep_op) */            if (caseNoteIndex < 0) {
2547: /* MUTANT (rep_op) */            if (caseNoteIndex > 0) {
2547: /* MUTANT (rep_op) */            if (caseNoteIndex == 0) {
2547: /* MUTANT (rep_op) */            if (caseNoteIndex != 0) {
2547: /* MUTANT (rep_const) */            if (caseNoteIndex >= 1) {
2547: /* MUTANT (rep_const) */            if (caseNoteIndex >= -1) {
2547: /* MUTANT (negate) */            if(! (caseNoteIndex >= 0)) {
2549: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)caseNoteIndex, 1,
2549: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)caseNoteIndex, -1,
2551: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
2554: /* MUTANT (negate) */            if(! (!pn4)) {
2555: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(pn3->pn_type == TOK_DEFAULT); */ 
2555: /* MUTANT (rep_op) */                JS_ASSERT(pn3->pn_type != TOK_DEFAULT);
2556: /* MUTANT (del_stmt) */ /*                 continue; */ 
2558: /* MUTANT (rep_const) */            caseNoteIndex = js_NewSrcNote2(cx, cg, SRC_PCDELTA, 1);
2558: /* MUTANT (rep_const) */            caseNoteIndex = js_NewSrcNote2(cx, cg, SRC_PCDELTA, -1);
2559: /* MUTANT (rep_op) */            if (caseNoteIndex <= 0)
2559: /* MUTANT (rep_op) */            if (caseNoteIndex > 0)
2559: /* MUTANT (rep_op) */            if (caseNoteIndex >= 0)
2559: /* MUTANT (rep_op) */            if (caseNoteIndex == 0)
2559: /* MUTANT (rep_op) */            if (caseNoteIndex != 0)
2559: /* MUTANT (rep_const) */            if (caseNoteIndex < 1)
2559: /* MUTANT (rep_const) */            if (caseNoteIndex < -1)
2559: /* MUTANT (negate) */            if(! (caseNoteIndex < 0))
2561: /* MUTANT (del_stmt) */ /*             off = EmitJump(cx, cg, JSOP_CASE, 0); */ 
2561: /* MUTANT (rep_const) */            off = EmitJump(cx, cg, JSOP_CASE, 1);
2561: /* MUTANT (rep_const) */            off = EmitJump(cx, cg, JSOP_CASE, -1);
2562: /* MUTANT (rep_op) */            if (off <= 0)
2562: /* MUTANT (rep_op) */            if (off > 0)
2562: /* MUTANT (rep_op) */            if (off >= 0)
2562: /* MUTANT (rep_op) */            if (off == 0)
2562: /* MUTANT (rep_op) */            if (off != 0)
2562: /* MUTANT (rep_const) */            if (off < 1)
2562: /* MUTANT (rep_const) */            if (off < -1)
2562: /* MUTANT (negate) */            if(! (off < 0))
2564: /* MUTANT (del_stmt) */ /*             pn3->pn_offset = off; */ 
2565: /* MUTANT (negate) */            if(! (beforeCases)) {
2567: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 0,
2567: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, -1,
2567: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, ((1)+1),
2569: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
2576: /* MUTANT (rep_const) */        defaultOffset = EmitJump(cx, cg, JSOP_DEFAULT, 1);
2576: /* MUTANT (rep_const) */        defaultOffset = EmitJump(cx, cg, JSOP_DEFAULT, -1);
2577: /* MUTANT (rep_op) */        if (defaultOffset <= 0)
2577: /* MUTANT (rep_op) */        if (defaultOffset > 0)
2577: /* MUTANT (rep_op) */        if (defaultOffset >= 0)
2577: /* MUTANT (rep_op) */        if (defaultOffset == 0)
2577: /* MUTANT (rep_op) */        if (defaultOffset != 0)
2577: /* MUTANT (rep_const) */        if (defaultOffset < 1)
2577: /* MUTANT (rep_const) */        if (defaultOffset < -1)
2577: /* MUTANT (negate) */        if(! (defaultOffset < 0))
2580: /* MUTANT (del_stmt) */ /*         pc = CG_CODE(cg, top + JUMP_OFFSET_LEN); */ 
2580: /* MUTANT (rep_op) */        pc = CG_CODE(cg, top - JUMP_OFFSET_LEN);
2580: /* MUTANT (rep_op) */        pc = CG_CODE(cg, top * JUMP_OFFSET_LEN);
2580: /* MUTANT (rep_op) */        pc = CG_CODE(cg, top % JUMP_OFFSET_LEN);
2582: /* MUTANT (rep_op) */        if (switchOp != JSOP_TABLESWITCH) {
2582: /* MUTANT (negate) */        if(! (switchOp == JSOP_TABLESWITCH)) {
2584: /* MUTANT (del_stmt) */ /*             SET_JUMP_OFFSET(pc, low); */ 
2585: /* MUTANT (del_stmt) */ /*             pc += JUMP_OFFSET_LEN; */ 
2585: /* MUTANT (rep_op) */            pc -= JUMP_OFFSET_LEN;
2585: /* MUTANT (rep_op) */            pc *= JUMP_OFFSET_LEN;
2585: /* MUTANT (rep_op) */            pc %= JUMP_OFFSET_LEN;
2586: /* MUTANT (del_stmt) */ /*             SET_JUMP_OFFSET(pc, high); */ 
2587: /* MUTANT (del_stmt) */ /*             pc += JUMP_OFFSET_LEN; */ 
2587: /* MUTANT (rep_op) */            pc -= JUMP_OFFSET_LEN;
2587: /* MUTANT (rep_op) */            pc *= JUMP_OFFSET_LEN;
2587: /* MUTANT (rep_op) */            pc %= JUMP_OFFSET_LEN;
2594: /* MUTANT (rep_op) */            if (tableLength == 0) {
2594: /* MUTANT (rep_const) */            if (tableLength != 1) {
2594: /* MUTANT (rep_const) */            if (tableLength != -1) {
2594: /* MUTANT (negate) */            if(! (tableLength != 0)) {
2595: /* MUTANT (del_stmt) */ /*                 tableSize = (size_t)tableLength * sizeof *table; */ 
2596: /* MUTANT (del_stmt) */ /*                 table = (JSParseNode **) JS_malloc(cx, tableSize); */ 
2597: /* MUTANT (negate) */                if(! (!table))
2599: /* MUTANT (del_stmt) */ /*                 memset(table, 0, tableSize); */ 
2599: /* MUTANT (rep_const) */                memset(table, 1, tableSize);
2599: /* MUTANT (rep_const) */                memset(table, -1, tableSize);
2601: /* MUTANT (rep_op) */                    if (pn3->pn_type != TOK_DEFAULT)
2601: /* MUTANT (negate) */                    if(! (pn3->pn_type == TOK_DEFAULT))
2603: /* MUTANT (del_stmt) */ /*                     i = JSVAL_TO_INT(pn3->pn_val); */ 
2604: /* MUTANT (del_stmt) */ /*                     i -= low; */ 
2604: /* MUTANT (rep_op) */                    i += low;
2604: /* MUTANT (rep_op) */                    i *= low;
2604: /* MUTANT (rep_op) */                    i %= low;
2605: /* MUTANT (del_stmt) */ /*                     JS_ASSERT((uint32)i < tableLength); */ 
2605: /* MUTANT (rep_op) */                    JS_ASSERT((uint32)i <= tableLength);
2605: /* MUTANT (rep_op) */                    JS_ASSERT((uint32)i > tableLength);
2605: /* MUTANT (rep_op) */                    JS_ASSERT((uint32)i >= tableLength);
2605: /* MUTANT (rep_op) */                    JS_ASSERT((uint32)i == tableLength);
2605: /* MUTANT (rep_op) */                    JS_ASSERT((uint32)i != tableLength);
2606: /* MUTANT (del_stmt) */ /*                     table[i] = pn3; */ 
2610: /* MUTANT (del_stmt) */ /*             JS_ASSERT(switchOp == JSOP_LOOKUPSWITCH); */ 
2610: /* MUTANT (rep_op) */            JS_ASSERT(switchOp != JSOP_LOOKUPSWITCH);
2613: /* MUTANT (del_stmt) */ /*             SET_ATOM_INDEX(pc, caseCount); */ 
2614: /* MUTANT (del_stmt) */ /*             pc += ATOM_INDEX_LEN; */ 
2614: /* MUTANT (rep_op) */            pc -= ATOM_INDEX_LEN;
2614: /* MUTANT (rep_op) */            pc *= ATOM_INDEX_LEN;
2614: /* MUTANT (rep_op) */            pc %= ATOM_INDEX_LEN;
2622: /* MUTANT (negate) */        if(! (constPropagated)) {
2628: /* MUTANT (del_stmt) */ /*             savepc = CG_NEXT(cg); */ 
2629: /* MUTANT (del_stmt) */ /*             CG_NEXT(cg) = pc + 1; */ 
2629: /* MUTANT (rep_op) */            CG_NEXT(cg) = pc - 1;
2629: /* MUTANT (rep_op) */            CG_NEXT(cg) = pc * 1;
2629: /* MUTANT (rep_op) */            CG_NEXT(cg) = pc % 1;
2629: /* MUTANT (rep_const) */            CG_NEXT(cg) = pc + 0;
2629: /* MUTANT (rep_const) */            CG_NEXT(cg) = pc + -1;
2629: /* MUTANT (rep_const) */            CG_NEXT(cg) = pc + ((1)+1);
2630: /* MUTANT (rep_op) */            if (switchOp != JSOP_TABLESWITCH) {
2630: /* MUTANT (negate) */            if(! (switchOp == JSOP_TABLESWITCH)) {
2631: /* MUTANT (rep_op) */                for (i = 0; i <= (jsint)tableLength; i++) {
2631: /* MUTANT (rep_op) */                for (i = 0; i > (jsint)tableLength; i++) {
2631: /* MUTANT (rep_op) */                for (i = 0; i >= (jsint)tableLength; i++) {
2631: /* MUTANT (rep_op) */                for (i = 0; i == (jsint)tableLength; i++) {
2631: /* MUTANT (rep_op) */                for (i = 0; i != (jsint)tableLength; i++) {
2631: /* MUTANT (rep_op) */                for (i = 0; i < (jsint)tableLength; i--) {
2631: /* MUTANT (rep_const) */                for (i = 1; i < (jsint)tableLength; i++) {
2631: /* MUTANT (rep_const) */                for (i = -1; i < (jsint)tableLength; i++) {
2632: /* MUTANT (del_stmt) */ /*                     pn3 = table[i]; */ 
2633: /* MUTANT (rep_op) */                    if (pn3 ||
2634: /* MUTANT (rep_op) */                        (pn4 = pn3->pn_left) == NULL &&
2634: /* MUTANT (rep_op) */                        (pn4 = pn3->pn_left) != NULL ||
2635: /* MUTANT (rep_op) */                        pn4->pn_type != TOK_NAME) {
2637: /* MUTANT (del_stmt) */ /*                         JS_ASSERT(!pn4->pn_expr); */ 
2638: /* MUTANT (del_stmt) */ /*                         ale = js_IndexAtom(cx, pn4->pn_atom, &cg->atomList); */ 
2639: /* MUTANT (negate) */                        if(! (!ale))
2641: /* MUTANT (del_stmt) */ /*                         CG_NEXT(cg) = pc; */ 
2643: /* MUTANT (rep_op) */                                           ALE_INDEX(ale)) <= 0) {
2643: /* MUTANT (rep_op) */                                           ALE_INDEX(ale)) > 0) {
2643: /* MUTANT (rep_op) */                                           ALE_INDEX(ale)) >= 0) {
2643: /* MUTANT (rep_op) */                                           ALE_INDEX(ale)) == 0) {
2643: /* MUTANT (rep_op) */                                           ALE_INDEX(ale)) != 0) {
2643: /* MUTANT (rep_const) */                                           ALE_INDEX(ale)) < 1) {
2643: /* MUTANT (rep_const) */                                           ALE_INDEX(ale)) < -1) {
2644: /* MUTANT (del_stmt) */ /*                             goto bad; */ 
2647: /* MUTANT (rep_op) */                    pc -= JUMP_OFFSET_LEN;
2647: /* MUTANT (rep_op) */                    pc *= JUMP_OFFSET_LEN;
2647: /* MUTANT (rep_op) */                    pc %= JUMP_OFFSET_LEN;
2651: /* MUTANT (del_stmt) */ /*                     pn4 = pn3->pn_left; */ 
2652: /* MUTANT (rep_op) */                    if (pn4 || pn4->pn_type == TOK_NAME) {
2652: /* MUTANT (rep_op) */                    if (pn4 && pn4->pn_type != TOK_NAME) {
2652: /* MUTANT (negate) */                    if(! (pn4 && pn4->pn_type == TOK_NAME)) {
2654: /* MUTANT (del_stmt) */ /*                         JS_ASSERT(!pn4->pn_expr); */ 
2655: /* MUTANT (del_stmt) */ /*                         ale = js_IndexAtom(cx, pn4->pn_atom, &cg->atomList); */ 
2656: /* MUTANT (negate) */                        if(! (!ale))
2658: /* MUTANT (del_stmt) */ /*                         CG_NEXT(cg) = pc; */ 
2660: /* MUTANT (rep_op) */                                           ALE_INDEX(ale)) <= 0) {
2660: /* MUTANT (rep_op) */                                           ALE_INDEX(ale)) > 0) {
2660: /* MUTANT (rep_op) */                                           ALE_INDEX(ale)) >= 0) {
2660: /* MUTANT (rep_op) */                                           ALE_INDEX(ale)) == 0) {
2660: /* MUTANT (rep_op) */                                           ALE_INDEX(ale)) != 0) {
2660: /* MUTANT (rep_const) */                                           ALE_INDEX(ale)) < 1) {
2660: /* MUTANT (rep_const) */                                           ALE_INDEX(ale)) < -1) {
2661: /* MUTANT (del_stmt) */ /*                             goto bad; */ 
2664: /* MUTANT (rep_op) */                    pc -= ATOM_INDEX_LEN + JUMP_OFFSET_LEN;
2664: /* MUTANT (rep_op) */                    pc *= ATOM_INDEX_LEN + JUMP_OFFSET_LEN;
2664: /* MUTANT (rep_op) */                    pc %= ATOM_INDEX_LEN + JUMP_OFFSET_LEN;
2664: /* MUTANT (rep_op) */                    pc += ATOM_INDEX_LEN - JUMP_OFFSET_LEN;
2664: /* MUTANT (rep_op) */                    pc += ATOM_INDEX_LEN * JUMP_OFFSET_LEN;
2664: /* MUTANT (rep_op) */                    pc += ATOM_INDEX_LEN % JUMP_OFFSET_LEN;
2673: /* MUTANT (rep_op) */        if (switchOp != JSOP_CONDSWITCH && pn3->pn_type != TOK_DEFAULT)
2673: /* MUTANT (rep_op) */        if (switchOp == JSOP_CONDSWITCH || pn3->pn_type != TOK_DEFAULT)
2673: /* MUTANT (rep_op) */        if (switchOp == JSOP_CONDSWITCH && pn3->pn_type == TOK_DEFAULT)
2673: /* MUTANT (negate) */        if(! (switchOp == JSOP_CONDSWITCH && pn3->pn_type != TOK_DEFAULT))
2675: /* MUTANT (del_stmt) */ /*         pn4 = pn3->pn_right; */ 
2676: /* MUTANT (del_stmt) */ /*         ok = js_EmitTree(cx, cg, pn4); */ 
2677: /* MUTANT (negate) */        if(! (!ok))
2679: /* MUTANT (del_stmt) */ /*         pn3->pn_offset = pn4->pn_offset; */ 
2680: /* MUTANT (rep_op) */        if (pn3->pn_type != TOK_DEFAULT)
2680: /* MUTANT (negate) */        if(! (pn3->pn_type == TOK_DEFAULT))
2684: /* MUTANT (negate) */    if(! (!hasDefault)) {
2686: /* MUTANT (del_stmt) */ /*         off = CG_OFFSET(cg) - top; */ 
2690: /* MUTANT (rep_op) */    JS_ASSERT(off == -1);
2690: /* MUTANT (rep_const) */    JS_ASSERT(off != 0);
2690: /* MUTANT (rep_const) */    JS_ASSERT(off != 1);
2690: /* MUTANT (rep_const) */    JS_ASSERT(off != ((-1)+1));
2690: /* MUTANT (rep_const) */    JS_ASSERT(off != ((-1)-1));
2693: /* MUTANT (rep_op) */    if (switchOp != JSOP_CONDSWITCH) {
2693: /* MUTANT (negate) */    if(! (switchOp == JSOP_CONDSWITCH)) {
2694: /* MUTANT (del_stmt) */ /*         pc = NULL; */ 
2695: /* MUTANT (del_stmt) */ /*         JS_ASSERT(defaultOffset != -1); */ 
2695: /* MUTANT (rep_op) */        JS_ASSERT(defaultOffset == -1);
2695: /* MUTANT (rep_const) */        JS_ASSERT(defaultOffset != 0);
2695: /* MUTANT (rep_const) */        JS_ASSERT(defaultOffset != 1);
2695: /* MUTANT (rep_const) */        JS_ASSERT(defaultOffset != ((-1)+1));
2695: /* MUTANT (rep_const) */        JS_ASSERT(defaultOffset != ((-1)-1));
2698: /* MUTANT (negate) */        if(! (!ok))
2701: /* MUTANT (del_stmt) */ /*         pc = CG_CODE(cg, top); */ 
2702: /* MUTANT (del_stmt) */ /*         ok = js_SetJumpOffset(cx, cg, pc, off); */ 
2703: /* MUTANT (negate) */        if(! (!ok))
2705: /* MUTANT (del_stmt) */ /*         pc += JUMP_OFFSET_LEN; */ 
2705: /* MUTANT (rep_op) */        pc -= JUMP_OFFSET_LEN;
2705: /* MUTANT (rep_op) */        pc *= JUMP_OFFSET_LEN;
2705: /* MUTANT (rep_op) */        pc %= JUMP_OFFSET_LEN;
2710: /* MUTANT (del_stmt) */ /*     ok = js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 0, off); */ 
2710: /* MUTANT (rep_const) */    ok = js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 1, off);
2710: /* MUTANT (rep_const) */    ok = js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, -1, off);
2711: /* MUTANT (negate) */    if(! (!ok))
2714: /* MUTANT (rep_op) */    if (switchOp != JSOP_TABLESWITCH) {
2714: /* MUTANT (negate) */    if(! (switchOp == JSOP_TABLESWITCH)) {
2716: /* MUTANT (del_stmt) */ /*         pc += 2 * JUMP_OFFSET_LEN; */ 
2716: /* MUTANT (rep_op) */        pc -= 2 * JUMP_OFFSET_LEN;
2716: /* MUTANT (rep_op) */        pc *= 2 * JUMP_OFFSET_LEN;
2716: /* MUTANT (rep_op) */        pc %= 2 * JUMP_OFFSET_LEN;
2716: /* MUTANT (rep_const) */        pc += 0 * JUMP_OFFSET_LEN;
2716: /* MUTANT (rep_const) */        pc += 1 * JUMP_OFFSET_LEN;
2716: /* MUTANT (rep_const) */        pc += -1 * JUMP_OFFSET_LEN;
2716: /* MUTANT (rep_const) */        pc += ((2)+1) * JUMP_OFFSET_LEN;
2716: /* MUTANT (rep_const) */        pc += ((2)-1) * JUMP_OFFSET_LEN;
2719: /* MUTANT (rep_op) */        for (i = 0; i <= (jsint)tableLength; i++) {
2719: /* MUTANT (rep_op) */        for (i = 0; i > (jsint)tableLength; i++) {
2719: /* MUTANT (rep_op) */        for (i = 0; i >= (jsint)tableLength; i++) {
2719: /* MUTANT (rep_op) */        for (i = 0; i == (jsint)tableLength; i++) {
2719: /* MUTANT (rep_op) */        for (i = 0; i != (jsint)tableLength; i++) {
2719: /* MUTANT (rep_op) */        for (i = 0; i < (jsint)tableLength; i--) {
2719: /* MUTANT (rep_const) */        for (i = 1; i < (jsint)tableLength; i++) {
2719: /* MUTANT (rep_const) */        for (i = -1; i < (jsint)tableLength; i++) {
2720: /* MUTANT (del_stmt) */ /*             pn3 = table[i]; */ 
2721: /* MUTANT (del_stmt) */ /*             off = pn3 ? pn3->pn_offset - top : 0; */ 
2721: /* MUTANT (rep_const) */            off = pn3 ? pn3->pn_offset - top : 1;
2721: /* MUTANT (rep_const) */            off = pn3 ? pn3->pn_offset - top : -1;
2722: /* MUTANT (del_stmt) */ /*             ok = js_SetJumpOffset(cx, cg, pc, off); */ 
2723: /* MUTANT (negate) */            if(! (!ok))
2725: /* MUTANT (del_stmt) */ /*             pc += JUMP_OFFSET_LEN; */ 
2725: /* MUTANT (rep_op) */            pc -= JUMP_OFFSET_LEN;
2725: /* MUTANT (rep_op) */            pc *= JUMP_OFFSET_LEN;
2725: /* MUTANT (rep_op) */            pc %= JUMP_OFFSET_LEN;
2727: /* MUTANT (rep_op) */    } else if (switchOp != JSOP_LOOKUPSWITCH) {
2727: /* MUTANT (negate) */    } else if(! (switchOp == JSOP_LOOKUPSWITCH)) {
2729: /* MUTANT (del_stmt) */ /*         pc += ATOM_INDEX_LEN; */ 
2729: /* MUTANT (rep_op) */        pc -= ATOM_INDEX_LEN;
2729: /* MUTANT (rep_op) */        pc *= ATOM_INDEX_LEN;
2729: /* MUTANT (rep_op) */        pc %= ATOM_INDEX_LEN;
2732: /* MUTANT (rep_op) */            if (pn3->pn_type != TOK_DEFAULT)
2732: /* MUTANT (negate) */            if(! (pn3->pn_type == TOK_DEFAULT))
2734: /* MUTANT (del_stmt) */ /*             atom = js_AtomizeValue(cx, pn3->pn_val, 0); */ 
2734: /* MUTANT (rep_const) */            atom = js_AtomizeValue(cx, pn3->pn_val, 1);
2734: /* MUTANT (rep_const) */            atom = js_AtomizeValue(cx, pn3->pn_val, -1);
2735: /* MUTANT (negate) */            if(! (!atom))
2737: /* MUTANT (del_stmt) */ /*             ale = js_IndexAtom(cx, atom, &cg->atomList); */ 
2738: /* MUTANT (negate) */            if(! (!ale))
2740: /* MUTANT (del_stmt) */ /*             SET_ATOM_INDEX(pc, ALE_INDEX(ale)); */ 
2741: /* MUTANT (del_stmt) */ /*             pc += ATOM_INDEX_LEN; */ 
2741: /* MUTANT (rep_op) */            pc -= ATOM_INDEX_LEN;
2741: /* MUTANT (rep_op) */            pc *= ATOM_INDEX_LEN;
2741: /* MUTANT (rep_op) */            pc %= ATOM_INDEX_LEN;
2743: /* MUTANT (del_stmt) */ /*             off = pn3->pn_offset - top; */ 
2744: /* MUTANT (del_stmt) */ /*             ok = js_SetJumpOffset(cx, cg, pc, off); */ 
2745: /* MUTANT (negate) */            if(! (!ok))
2747: /* MUTANT (del_stmt) */ /*             pc += JUMP_OFFSET_LEN; */ 
2747: /* MUTANT (rep_op) */            pc -= JUMP_OFFSET_LEN;
2747: /* MUTANT (rep_op) */            pc *= JUMP_OFFSET_LEN;
2747: /* MUTANT (rep_op) */            pc %= JUMP_OFFSET_LEN;
2752: /* MUTANT (negate) */    if(! (table))
2754: /* MUTANT (del_stmt) */ /*     return ok && js_PopStatementCG(cx, cg); */ 
2754: /* MUTANT (rep_op) */    return ok || js_PopStatementCG(cx, cg);
2758: /* MUTANT (del_stmt) */ /*     goto out; */ 
2766: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp, frame; */ 
2767: /* MUTANT (del_stmt) */ /*     JSObject *funobj; */ 
2768: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
2770: /* MUTANT (negate) */    if(! (!js_AllocTryNotes(cx, cg)))
2773: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
2774: /* MUTANT (del_stmt) */ /*     funobj = fun->object; */ 
2775: /* MUTANT (rep_op) */    JS_ASSERT(!fp && (fp->fun != fun && fp->varobj != funobj &&
2775: /* MUTANT (rep_op) */    JS_ASSERT(!fp || (fp->fun == fun && fp->varobj != funobj &&
2775: /* MUTANT (rep_op) */    JS_ASSERT(!fp || (fp->fun != fun || fp->varobj != funobj &&
2775: /* MUTANT (rep_op) */    JS_ASSERT(!fp || (fp->fun != fun && fp->varobj == funobj &&
2775: /* MUTANT (rep_op) */    JS_ASSERT(!fp || (fp->fun != fun && fp->varobj != funobj ||
2776: /* MUTANT (rep_op) */                      fp->scopeChain == funobj));
2777: /* MUTANT (del_stmt) */ /*     memset(&frame, 0, sizeof frame); */ 
2777: /* MUTANT (rep_const) */    memset(&frame, 1, sizeof frame);
2777: /* MUTANT (rep_const) */    memset(&frame, -1, sizeof frame);
2778: /* MUTANT (del_stmt) */ /*     frame.fun = fun; */ 
2779: /* MUTANT (del_stmt) */ /*     frame.varobj = frame.scopeChain = funobj; */ 
2780: /* MUTANT (del_stmt) */ /*     frame.down = fp; */ 
2782: /* MUTANT (rep_op) */                  ? JSFRAME_COMPILING & JSFRAME_COMPILE_N_GO
2784: /* MUTANT (del_stmt) */ /*     cx->fp = &frame; */ 
2785: /* MUTANT (del_stmt) */ /*     ok = js_EmitTree(cx, cg, body); */ 
2786: /* MUTANT (del_stmt) */ /*     cx->fp = fp; */ 
2787: /* MUTANT (negate) */    if(! (!ok))
2790: /* MUTANT (del_stmt) */ /*     fun->u.script = js_NewScriptFromCG(cx, cg, fun); */ 
2791: /* MUTANT (negate) */    if(! (!fun->u.script))
2793: /* MUTANT (del_stmt) */ /*     JS_ASSERT(fun->interpreted); */ 
2794: /* MUTANT (negate) */    if(! (cg->treeContext.flags & TCF_FUN_HEAVYWEIGHT))
2796: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
2804: /* MUTANT (rep_op) */        if (delta_ == 0) {                                                    \
2804: /* MUTANT (rep_const) */        if (delta_ != 1) {                                                    \
2804: /* MUTANT (rep_const) */        if (delta_ != -1) {                                                    \
2804: /* MUTANT (negate) */        if(! (delta_ != 0)) {                                                    \
2817: /* MUTANT (rep_op) */            if (delta_ <= (uintN)(2 + ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ < (uintN)(2 + ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ > (uintN)(2 + ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ == (uintN)(2 + ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ != (uintN)(2 + ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ >= (uintN)(2 - ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ >= (uintN)(2 * ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ >= (uintN)(2 % ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ >= (uintN)(2 + ((line_ <= SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ >= (uintN)(2 + ((line_ < SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ >= (uintN)(2 + ((line_ >= SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ >= (uintN)(2 + ((line_ == SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_op) */            if (delta_ >= (uintN)(2 + ((line_ != SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_const) */            if (delta_ >= (uintN)(0 + ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_const) */            if (delta_ >= (uintN)(1 + ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_const) */            if (delta_ >= (uintN)(-1 + ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_const) */            if (delta_ >= (uintN)(((2)+1) + ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_const) */            if (delta_ >= (uintN)(((2)-1) + ((line_ > SN_3BYTE_OFFSET_MASK)<<1))) { \
2817: /* MUTANT (rep_const) */            if (delta_ >= (uintN)(2 + ((line_ > SN_3BYTE_OFFSET_MASK)<<0))) { \
2817: /* MUTANT (rep_const) */            if (delta_ >= (uintN)(2 + ((line_ > SN_3BYTE_OFFSET_MASK)<<-1))) { \
2817: /* MUTANT (rep_const) */            if (delta_ >= (uintN)(2 + ((line_ > SN_3BYTE_OFFSET_MASK)<<((1)+1)))) { \
2817: /* MUTANT (negate) */            if(! (delta_ >= (uintN)(2 + ((line_ > SN_3BYTE_OFFSET_MASK)<<1)))) { \
2818: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)line_) <= 0)\
2818: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)line_) > 0)\
2818: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)line_) >= 0)\
2818: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)line_) == 0)\
2818: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)line_) != 0)\
2818: /* MUTANT (rep_const) */                if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)line_) < 1)\
2818: /* MUTANT (rep_const) */                if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)line_) < -1)\
2818: /* MUTANT (negate) */                if(! (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)line_) < 0))\
2822: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_NEWLINE) <= 0)               \
2822: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_NEWLINE) > 0)               \
2822: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_NEWLINE) >= 0)               \
2822: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_NEWLINE) == 0)               \
2822: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_NEWLINE) != 0)               \
2822: /* MUTANT (rep_const) */                    if (js_NewSrcNote(cx, cg, SRC_NEWLINE) < 1)               \
2822: /* MUTANT (rep_const) */                    if (js_NewSrcNote(cx, cg, SRC_NEWLINE) < -1)               \
2822: /* MUTANT (negate) */                    if(! (js_NewSrcNote(cx, cg, SRC_NEWLINE) < 0))               \
2824: /* MUTANT (rep_op) */                } while (++delta_ != 0);                                      \
2824: /* MUTANT (rep_op) */                } while (--delta_ == 0);                                      \
2824: /* MUTANT (rep_const) */                } while (--delta_ != 1);                                      \
2824: /* MUTANT (rep_const) */                } while (--delta_ != -1);                                      \
2824: /* MUTANT (negate) */                } while(! (--delta_ != 0));                                      \
2833: /* MUTANT (del_stmt) */ /*     UPDATE_LINE_NUMBER_NOTES(cx, cg, pn); */ 
2834: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
2840: /* MUTANT (del_stmt) */ /*     JSBool ok, useful, wantval; */ 
2841: /* MUTANT (del_stmt) */ /*     JSStmtInfo *stmt, stmtInfo; */ 
2842: /* MUTANT (del_stmt) */ /*     ptrdiff_t top, off, tmp, beq, jmp; */ 
2843: /* MUTANT (del_stmt) */ /*     JSParseNode *pn2, *pn3; */ 
2844: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
2845: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
2846: /* MUTANT (del_stmt) */ /*     jsatomid atomIndex; */ 
2847: /* MUTANT (del_stmt) */ /*     ptrdiff_t noteIndex; */ 
2848: /* MUTANT (del_stmt) */ /*     JSSrcNoteType noteType; */ 
2849: /* MUTANT (del_stmt) */ /*     jsbytecode *pc; */ 
2850: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
2851: /* MUTANT (del_stmt) */ /*     uint32 argc; */ 
2852: /* MUTANT (del_stmt) */ /*     int stackDummy; */ 
2854: /* MUTANT (negate) */    if(! (!JS_CHECK_STACK_SIZE(cx, stackDummy))) {
2855: /* MUTANT (del_stmt) */ /*         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_OVER_RECURSED); */ 
2856: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
2860: /* MUTANT (del_stmt) */ /*     cg->emitLevel++; */ 
2860: /* MUTANT (rep_op) */    cg->emitLevel--;
2861: /* MUTANT (del_stmt) */ /*     pn->pn_offset = top = CG_OFFSET(cg); */ 
2864: /* MUTANT (del_stmt) */ /*     UPDATE_LINE_NUMBER_NOTES(cx, cg, pn); */ 
2869: /* MUTANT (del_stmt) */ /*         void *cg2mark; */ 
2870: /* MUTANT (del_stmt) */ /*         JSCodeGenerator *cg2; */ 
2871: /* MUTANT (del_stmt) */ /*         JSFunction *fun; */ 
2874: /* MUTANT (rep_op) */        if (pn->pn_arity != PN_NULLARY) {
2874: /* MUTANT (negate) */        if(! (pn->pn_arity == PN_NULLARY)) {
2875: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_GETFUNNS) <= 0)
2875: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_GETFUNNS) > 0)
2875: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_GETFUNNS) >= 0)
2875: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_GETFUNNS) == 0)
2875: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_GETFUNNS) != 0)
2875: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_GETFUNNS) < 1)
2875: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_GETFUNNS) < -1)
2875: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_GETFUNNS) < 0))
2877: /* MUTANT (del_stmt) */ /*             break; */ 
2883: /* MUTANT (del_stmt) */ /*         JS_ARENA_ALLOCATE_TYPE(cg2, JSCodeGenerator, &cx->tempPool); */ 
2884: /* MUTANT (negate) */        if(! (!cg2)) {
2885: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
2886: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
2891: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
2893: /* MUTANT (rep_op) */        cg2->treeContext.flags = (uint16) (pn->pn_flags & TCF_IN_FUNCTION);
2894: /* MUTANT (del_stmt) */ /*         cg2->treeContext.tryCount = pn->pn_tryCount; */ 
2895: /* MUTANT (del_stmt) */ /*         cg2->parent = cg; */ 
2896: /* MUTANT (del_stmt) */ /*         fun = (JSFunction *) JS_GetPrivate(cx, ATOM_TO_OBJECT(pn->pn_funAtom)); */ 
2897: /* MUTANT (negate) */        if(! (!js_EmitFunctionBody(cx, cg2, pn->pn_body, fun)))
2905: /* MUTANT (rep_op) */            (TCF_FUN_USES_NONLOCALS & TCF_FUN_HEAVYWEIGHT)) {
2906: /* MUTANT (del_stmt) */ /*             cg->treeContext.flags |= TCF_FUN_HEAVYWEIGHT; */ 
2909: /* MUTANT (del_stmt) */ /*         JS_ARENA_RELEASE(&cx->tempPool, cg2mark); */ 
2912: /* MUTANT (del_stmt) */ /*         ale = js_IndexAtom(cx, pn->pn_funAtom, &cg->atomList); */ 
2913: /* MUTANT (negate) */        if(! (!ale))
2915: /* MUTANT (del_stmt) */ /*         atomIndex = ALE_INDEX(ale); */ 
2919: /* MUTANT (rep_op) */        if (pn->pn_op == JSOP_NOP) {
2919: /* MUTANT (negate) */        if(! (pn->pn_op != JSOP_NOP)) {
2920: /* MUTANT (del_stmt) */ /*             EMIT_ATOM_INDEX_OP(pn->pn_op, atomIndex); */ 
2921: /* MUTANT (del_stmt) */ /*             break; */ 
2927: /* MUTANT (rep_op) */        if (noteIndex <= 0 ||
2927: /* MUTANT (rep_op) */        if (noteIndex > 0 ||
2927: /* MUTANT (rep_op) */        if (noteIndex >= 0 ||
2927: /* MUTANT (rep_op) */        if (noteIndex == 0 ||
2927: /* MUTANT (rep_op) */        if (noteIndex != 0 ||
2927: /* MUTANT (rep_op) */        if (noteIndex < 0 &&
2927: /* MUTANT (rep_const) */        if (noteIndex < 1 ||
2927: /* MUTANT (rep_const) */        if (noteIndex < -1 ||
2928: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) <= 0) {
2928: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) > 0) {
2928: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) >= 0) {
2928: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) == 0) {
2928: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) != 0) {
2928: /* MUTANT (rep_const) */            js_Emit1(cx, cg, JSOP_NOP) < 1) {
2928: /* MUTANT (rep_const) */            js_Emit1(cx, cg, JSOP_NOP) < -1) {
2929: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
2939: /* MUTANT (negate) */        if(! (cg->treeContext.flags & TCF_IN_FUNCTION)) {
2940: /* MUTANT (del_stmt) */ /*             JSObject *obj, *pobj; */ 
2941: /* MUTANT (del_stmt) */ /*             JSProperty *prop; */ 
2942: /* MUTANT (del_stmt) */ /*             JSScopeProperty *sprop; */ 
2943: /* MUTANT (del_stmt) */ /*             uintN slot; */ 
2945: /* MUTANT (del_stmt) */ /*             obj = OBJ_GET_PARENT(cx, fun->object); */ 
2948: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
2951: /* MUTANT (rep_op) */            JS_ASSERT(prop || pobj == obj);
2951: /* MUTANT (rep_op) */            JS_ASSERT(prop && pobj != obj);
2952: /* MUTANT (del_stmt) */ /*             sprop = (JSScopeProperty *) prop; */ 
2953: /* MUTANT (del_stmt) */ /*             JS_ASSERT(sprop->getter == js_GetLocalVariable); */ 
2953: /* MUTANT (rep_op) */            JS_ASSERT(sprop->getter != js_GetLocalVariable);
2954: /* MUTANT (del_stmt) */ /*             slot = sprop->shortid; */ 
2955: /* MUTANT (del_stmt) */ /*             OBJ_DROP_PROPERTY(cx, pobj, prop); */ 
2957: /* MUTANT (rep_op) */            if (atomIndex <= JS_BIT(16)) {
2957: /* MUTANT (rep_op) */            if (atomIndex < JS_BIT(16)) {
2957: /* MUTANT (rep_op) */            if (atomIndex > JS_BIT(16)) {
2957: /* MUTANT (rep_op) */            if (atomIndex == JS_BIT(16)) {
2957: /* MUTANT (rep_op) */            if (atomIndex != JS_BIT(16)) {
2957: /* MUTANT (rep_const) */            if (atomIndex >= JS_BIT(0)) {
2957: /* MUTANT (rep_const) */            if (atomIndex >= JS_BIT(1)) {
2957: /* MUTANT (rep_const) */            if (atomIndex >= JS_BIT(-1)) {
2957: /* MUTANT (rep_const) */            if (atomIndex >= JS_BIT(((16)+1))) {
2957: /* MUTANT (rep_const) */            if (atomIndex >= JS_BIT(((16)-1))) {
2957: /* MUTANT (negate) */            if(! (atomIndex >= JS_BIT(16))) {
2962: /* MUTANT (del_stmt) */ /*                 off = js_EmitN(cx, cg, JSOP_LITOPX, 3); */ 
2962: /* MUTANT (rep_const) */                off = js_EmitN(cx, cg, JSOP_LITOPX, 0);
2962: /* MUTANT (rep_const) */                off = js_EmitN(cx, cg, JSOP_LITOPX, 1);
2962: /* MUTANT (rep_const) */                off = js_EmitN(cx, cg, JSOP_LITOPX, -1);
2962: /* MUTANT (rep_const) */                off = js_EmitN(cx, cg, JSOP_LITOPX, ((3)+1));
2962: /* MUTANT (rep_const) */                off = js_EmitN(cx, cg, JSOP_LITOPX, ((3)-1));
2963: /* MUTANT (rep_op) */                if (off <= 0)
2963: /* MUTANT (rep_op) */                if (off > 0)
2963: /* MUTANT (rep_op) */                if (off >= 0)
2963: /* MUTANT (rep_op) */                if (off == 0)
2963: /* MUTANT (rep_op) */                if (off != 0)
2963: /* MUTANT (rep_const) */                if (off < 1)
2963: /* MUTANT (rep_const) */                if (off < -1)
2963: /* MUTANT (negate) */                if(! (off < 0))
2965: /* MUTANT (del_stmt) */ /*                 pc = CG_CODE(cg, off); */ 
2966: /* MUTANT (del_stmt) */ /*                 SET_LITERAL_INDEX(pc, atomIndex); */ 
2967: /* MUTANT (del_stmt) */ /*                 EMIT_UINT16_IMM_OP(JSOP_DEFLOCALFUN, slot); */ 
2971: /* MUTANT (rep_op) */                               VARNO_LEN - ATOM_INDEX_LEN);
2971: /* MUTANT (rep_op) */                               VARNO_LEN * ATOM_INDEX_LEN);
2971: /* MUTANT (rep_op) */                               VARNO_LEN % ATOM_INDEX_LEN);
2972: /* MUTANT (rep_op) */                if (off <= 0)
2972: /* MUTANT (rep_op) */                if (off > 0)
2972: /* MUTANT (rep_op) */                if (off >= 0)
2972: /* MUTANT (rep_op) */                if (off == 0)
2972: /* MUTANT (rep_op) */                if (off != 0)
2972: /* MUTANT (rep_const) */                if (off < 1)
2972: /* MUTANT (rep_const) */                if (off < -1)
2972: /* MUTANT (negate) */                if(! (off < 0))
2974: /* MUTANT (del_stmt) */ /*                 pc = CG_CODE(cg, off); */ 
2975: /* MUTANT (del_stmt) */ /*                 SET_VARNO(pc, slot); */ 
2976: /* MUTANT (del_stmt) */ /*                 pc += VARNO_LEN; */ 
2976: /* MUTANT (rep_op) */                pc -= VARNO_LEN;
2976: /* MUTANT (rep_op) */                pc *= VARNO_LEN;
2976: /* MUTANT (rep_op) */                pc %= VARNO_LEN;
2977: /* MUTANT (del_stmt) */ /*                 SET_ATOM_INDEX(pc, atomIndex); */ 
2983: /* MUTANT (del_stmt) */ /*         CG_SWITCH_TO_MAIN(cg); */ 
2984: /* MUTANT (del_stmt) */ /*         break; */ 
2990: /* MUTANT (rep_op) */        if (pn2->pn_type != TOK_STAR) {
2990: /* MUTANT (negate) */        if(! (pn2->pn_type == TOK_STAR)) {
2995: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_EXPORTALL) <= 0)
2995: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_EXPORTALL) > 0)
2995: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_EXPORTALL) >= 0)
2995: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_EXPORTALL) == 0)
2995: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_EXPORTALL) != 0)
2995: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_EXPORTALL) < 1)
2995: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_EXPORTALL) < -1)
2995: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_EXPORTALL) < 0))
3003: /* MUTANT (del_stmt) */ /*                 ale = js_IndexAtom(cx, pn2->pn_atom, &cg->atomList); */ 
3004: /* MUTANT (negate) */                if(! (!ale))
3006: /* MUTANT (del_stmt) */ /*                 EMIT_ATOM_INDEX_OP(JSOP_EXPORTNAME, ALE_INDEX(ale)); */ 
3007: /* MUTANT (del_stmt) */ /*             } while ((pn2 = pn2->pn_next) != NULL); */ 
3007: /* MUTANT (rep_op) */            } while ((pn2 = pn2->pn_next) == NULL);
3007: /* MUTANT (negate) */            } while(! ((pn2 = pn2->pn_next) != NULL));
3018: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2)))
3027: /* MUTANT (del_stmt) */ /*         beq = jmp = -1; */ 
3027: /* MUTANT (rep_const) */        beq = jmp = 0;
3027: /* MUTANT (rep_const) */        beq = jmp = 1;
3027: /* MUTANT (rep_const) */        beq = jmp = ((-1)+1);
3027: /* MUTANT (rep_const) */        beq = jmp = ((-1)-1);
3028: /* MUTANT (del_stmt) */ /*         noteIndex = -1; */ 
3028: /* MUTANT (rep_const) */        noteIndex = 0;
3028: /* MUTANT (rep_const) */        noteIndex = 1;
3028: /* MUTANT (rep_const) */        noteIndex = ((-1)+1);
3028: /* MUTANT (rep_const) */        noteIndex = ((-1)-1);
3032: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_kid1)))
3034: /* MUTANT (rep_op) */        if (stmtInfo.type != STMT_IF) {
3034: /* MUTANT (negate) */        if(! (stmtInfo.type == STMT_IF)) {
3044: /* MUTANT (del_stmt) */ /*             JS_ASSERT(stmtInfo.type == STMT_ELSE); */ 
3044: /* MUTANT (rep_op) */            JS_ASSERT(stmtInfo.type != STMT_ELSE);
3045: /* MUTANT (del_stmt) */ /*             stmtInfo.type = STMT_IF; */ 
3046: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, noteIndex, 1, jmp - beq))
3046: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, noteIndex, -1, jmp - beq))
3046: /* MUTANT (negate) */            if(! (!js_SetSrcNoteOffset(cx, cg, noteIndex, 0, jmp - beq)))
3052: /* MUTANT (del_stmt) */ /*         noteIndex = js_NewSrcNote(cx, cg, pn3 ? SRC_IF_ELSE : SRC_IF); */ 
3053: /* MUTANT (rep_op) */        if (noteIndex <= 0)
3053: /* MUTANT (rep_op) */        if (noteIndex > 0)
3053: /* MUTANT (rep_op) */        if (noteIndex >= 0)
3053: /* MUTANT (rep_op) */        if (noteIndex == 0)
3053: /* MUTANT (rep_op) */        if (noteIndex != 0)
3053: /* MUTANT (rep_const) */        if (noteIndex < 1)
3053: /* MUTANT (rep_const) */        if (noteIndex < -1)
3053: /* MUTANT (negate) */        if(! (noteIndex < 0))
3055: /* MUTANT (del_stmt) */ /*         beq = EmitJump(cx, cg, JSOP_IFEQ, 0); */ 
3055: /* MUTANT (rep_const) */        beq = EmitJump(cx, cg, JSOP_IFEQ, 1);
3055: /* MUTANT (rep_const) */        beq = EmitJump(cx, cg, JSOP_IFEQ, -1);
3056: /* MUTANT (rep_op) */        if (beq <= 0)
3056: /* MUTANT (rep_op) */        if (beq > 0)
3056: /* MUTANT (rep_op) */        if (beq >= 0)
3056: /* MUTANT (rep_op) */        if (beq == 0)
3056: /* MUTANT (rep_op) */        if (beq != 0)
3056: /* MUTANT (rep_const) */        if (beq < 1)
3056: /* MUTANT (rep_const) */        if (beq < -1)
3056: /* MUTANT (negate) */        if(! (beq < 0))
3060: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_kid2)))
3062: /* MUTANT (negate) */        if(! (pn3)) {
3064: /* MUTANT (del_stmt) */ /*             stmtInfo.type = STMT_ELSE; */ 
3072: /* MUTANT (del_stmt) */ /*             jmp = EmitGoto(cx, cg, &stmtInfo, &stmtInfo.breaks, NULL, SRC_NULL); */ 
3073: /* MUTANT (rep_op) */            if (jmp <= 0)
3073: /* MUTANT (rep_op) */            if (jmp > 0)
3073: /* MUTANT (rep_op) */            if (jmp >= 0)
3073: /* MUTANT (rep_op) */            if (jmp == 0)
3073: /* MUTANT (rep_op) */            if (jmp != 0)
3073: /* MUTANT (rep_const) */            if (jmp < 1)
3073: /* MUTANT (rep_const) */            if (jmp < -1)
3073: /* MUTANT (negate) */            if(! (jmp < 0))
3077: /* MUTANT (del_stmt) */ /*             CHECK_AND_SET_JUMP_OFFSET_AT(cx, cg, beq); */ 
3078: /* MUTANT (rep_op) */            if (pn3->pn_type != TOK_IF) {
3078: /* MUTANT (negate) */            if(! (pn3->pn_type == TOK_IF)) {
3079: /* MUTANT (del_stmt) */ /*                 pn = pn3; */ 
3080: /* MUTANT (del_stmt) */ /*                 goto if_again; */ 
3083: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn3)))
3093: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, noteIndex, 1, jmp - beq))
3093: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, noteIndex, -1, jmp - beq))
3093: /* MUTANT (negate) */            if(! (!js_SetSrcNoteOffset(cx, cg, noteIndex, 0, jmp - beq)))
3097: /* MUTANT (del_stmt) */ /*             CHECK_AND_SET_JUMP_OFFSET_AT(cx, cg, beq); */ 
3100: /* MUTANT (del_stmt) */ /*         break; */ 
3106: /* MUTANT (del_stmt) */ /*         break; */ 
3111: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_left)))
3113: /* MUTANT (del_stmt) */ /*         noteIndex = js_NewSrcNote(cx, cg, SRC_WHILE); */ 
3114: /* MUTANT (rep_op) */        if (noteIndex <= 0)
3114: /* MUTANT (rep_op) */        if (noteIndex > 0)
3114: /* MUTANT (rep_op) */        if (noteIndex >= 0)
3114: /* MUTANT (rep_op) */        if (noteIndex == 0)
3114: /* MUTANT (rep_op) */        if (noteIndex != 0)
3114: /* MUTANT (rep_const) */        if (noteIndex < 1)
3114: /* MUTANT (rep_const) */        if (noteIndex < -1)
3114: /* MUTANT (negate) */        if(! (noteIndex < 0))
3116: /* MUTANT (del_stmt) */ /*         beq = EmitJump(cx, cg, JSOP_IFEQ, 0); */ 
3116: /* MUTANT (rep_const) */        beq = EmitJump(cx, cg, JSOP_IFEQ, 1);
3116: /* MUTANT (rep_const) */        beq = EmitJump(cx, cg, JSOP_IFEQ, -1);
3117: /* MUTANT (rep_op) */        if (beq <= 0)
3117: /* MUTANT (rep_op) */        if (beq > 0)
3117: /* MUTANT (rep_op) */        if (beq >= 0)
3117: /* MUTANT (rep_op) */        if (beq == 0)
3117: /* MUTANT (rep_op) */        if (beq != 0)
3117: /* MUTANT (rep_const) */        if (beq < 1)
3117: /* MUTANT (rep_const) */        if (beq < -1)
3117: /* MUTANT (negate) */        if(! (beq < 0))
3119: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_right)))
3121: /* MUTANT (del_stmt) */ /*         jmp = EmitJump(cx, cg, JSOP_GOTO, top - CG_OFFSET(cg)); */ 
3122: /* MUTANT (rep_op) */        if (jmp <= 0)
3122: /* MUTANT (rep_op) */        if (jmp > 0)
3122: /* MUTANT (rep_op) */        if (jmp >= 0)
3122: /* MUTANT (rep_op) */        if (jmp == 0)
3122: /* MUTANT (rep_op) */        if (jmp != 0)
3122: /* MUTANT (rep_const) */        if (jmp < 1)
3122: /* MUTANT (rep_const) */        if (jmp < -1)
3122: /* MUTANT (negate) */        if(! (jmp < 0))
3124: /* MUTANT (del_stmt) */ /*         CHECK_AND_SET_JUMP_OFFSET_AT(cx, cg, beq); */ 
3125: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, noteIndex, 1, jmp - beq))
3125: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, noteIndex, -1, jmp - beq))
3125: /* MUTANT (negate) */        if(! (!js_SetSrcNoteOffset(cx, cg, noteIndex, 0, jmp - beq)))
3127: /* MUTANT (del_stmt) */ /*         ok = js_PopStatementCG(cx, cg); */ 
3128: /* MUTANT (del_stmt) */ /*         break; */ 
3133: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_WHILE) <= 0 ||
3133: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_WHILE) > 0 ||
3133: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_WHILE) >= 0 ||
3133: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_WHILE) == 0 ||
3133: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_WHILE) != 0 ||
3133: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_WHILE) < 0 &&
3133: /* MUTANT (rep_const) */        if (js_NewSrcNote(cx, cg, SRC_WHILE) < 1 ||
3133: /* MUTANT (rep_const) */        if (js_NewSrcNote(cx, cg, SRC_WHILE) < -1 ||
3134: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) <= 0) {
3134: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) > 0) {
3134: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) >= 0) {
3134: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) == 0) {
3134: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) != 0) {
3134: /* MUTANT (rep_const) */            js_Emit1(cx, cg, JSOP_NOP) < 1) {
3134: /* MUTANT (rep_const) */            js_Emit1(cx, cg, JSOP_NOP) < -1) {
3135: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3140: /* MUTANT (del_stmt) */ /*         js_PushStatement(&cg->treeContext, &stmtInfo, STMT_DO_LOOP, top); */ 
3141: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_left)))
3145: /* MUTANT (del_stmt) */ /*         stmt = &stmtInfo; */ 
3147: /* MUTANT (del_stmt) */ /*             stmt->update = CG_OFFSET(cg); */ 
3148: /* MUTANT (del_stmt) */ /*         } while ((stmt = stmt->down) != NULL && stmt->type == STMT_LABEL); */ 
3148: /* MUTANT (rep_op) */        } while ((stmt = stmt->down) == NULL && stmt->type == STMT_LABEL);
3148: /* MUTANT (rep_op) */        } while ((stmt = stmt->down) != NULL || stmt->type == STMT_LABEL);
3148: /* MUTANT (rep_op) */        } while ((stmt = stmt->down) != NULL && stmt->type != STMT_LABEL);
3148: /* MUTANT (negate) */        } while(! ((stmt = stmt->down) != NULL && stmt->type == STMT_LABEL));
3151: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_right)))
3160: /* MUTANT (rep_op) */        if (EmitJump(cx, cg, JSOP_IFNE, top - CG_OFFSET(cg)) <= 0)
3160: /* MUTANT (rep_op) */        if (EmitJump(cx, cg, JSOP_IFNE, top - CG_OFFSET(cg)) > 0)
3160: /* MUTANT (rep_op) */        if (EmitJump(cx, cg, JSOP_IFNE, top - CG_OFFSET(cg)) >= 0)
3160: /* MUTANT (rep_op) */        if (EmitJump(cx, cg, JSOP_IFNE, top - CG_OFFSET(cg)) == 0)
3160: /* MUTANT (rep_op) */        if (EmitJump(cx, cg, JSOP_IFNE, top - CG_OFFSET(cg)) != 0)
3160: /* MUTANT (rep_const) */        if (EmitJump(cx, cg, JSOP_IFNE, top - CG_OFFSET(cg)) < 1)
3160: /* MUTANT (rep_const) */        if (EmitJump(cx, cg, JSOP_IFNE, top - CG_OFFSET(cg)) < -1)
3160: /* MUTANT (negate) */        if(! (EmitJump(cx, cg, JSOP_IFNE, top - CG_OFFSET(cg)) < 0))
3162: /* MUTANT (del_stmt) */ /*         ok = js_PopStatementCG(cx, cg); */ 
3163: /* MUTANT (del_stmt) */ /*         break; */ 
3167: /* MUTANT (rep_const) */        beq = 1;                /* suppress gcc warnings */
3167: /* MUTANT (rep_const) */        beq = -1;                /* suppress gcc warnings */
3168: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_left; */ 
3169: /* MUTANT (del_stmt) */ /*         js_PushStatement(&cg->treeContext, &stmtInfo, STMT_FOR_LOOP, top); */ 
3171: /* MUTANT (rep_op) */        if (pn2->pn_type != TOK_IN) {
3171: /* MUTANT (negate) */        if(! (pn2->pn_type == TOK_IN)) {
3172: /* MUTANT (del_stmt) */ /*             JSBool emitIFEQ; */ 
3175: /* MUTANT (del_stmt) */ /*             stmtInfo.type = STMT_FOR_IN_LOOP; */ 
3176: /* MUTANT (del_stmt) */ /*             noteIndex = -1; */ 
3176: /* MUTANT (rep_const) */            noteIndex = 0;
3176: /* MUTANT (rep_const) */            noteIndex = 1;
3176: /* MUTANT (rep_const) */            noteIndex = ((-1)+1);
3176: /* MUTANT (rep_const) */            noteIndex = ((-1)-1);
3198: /* MUTANT (del_stmt) */ /*             pn3 = pn2->pn_left; */ 
3199: /* MUTANT (rep_op) */            if (pn3->pn_type != TOK_VAR && !js_EmitTree(cx, cg, pn3))
3199: /* MUTANT (rep_op) */            if (pn3->pn_type == TOK_VAR || !js_EmitTree(cx, cg, pn3))
3199: /* MUTANT (negate) */            if(! (pn3->pn_type == TOK_VAR && !js_EmitTree(cx, cg, pn3)))
3203: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_PUSH) <= 0)
3203: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_PUSH) > 0)
3203: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_PUSH) >= 0)
3203: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_PUSH) == 0)
3203: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_PUSH) != 0)
3203: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_PUSH) < 1)
3203: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_PUSH) < -1)
3203: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_PUSH) < 0))
3207: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2->pn_right)))
3209: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_TOOBJECT) <= 0)
3209: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_TOOBJECT) > 0)
3209: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_TOOBJECT) >= 0)
3209: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_TOOBJECT) == 0)
3209: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_TOOBJECT) != 0)
3209: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_TOOBJECT) < 1)
3209: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_TOOBJECT) < -1)
3209: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_TOOBJECT) < 0))
3212: /* MUTANT (del_stmt) */ /*             top = CG_OFFSET(cg); */ 
3213: /* MUTANT (del_stmt) */ /*             SET_STATEMENT_TOP(&stmtInfo, top); */ 
3217: /* MUTANT (rep_op) */            if (pn->pn_op == JSOP_NOP && js_Emit1(cx, cg, pn->pn_op) < 0)
3217: /* MUTANT (rep_op) */            if (pn->pn_op != JSOP_NOP || js_Emit1(cx, cg, pn->pn_op) < 0)
3217: /* MUTANT (rep_op) */            if (pn->pn_op != JSOP_NOP && js_Emit1(cx, cg, pn->pn_op) <= 0)
3217: /* MUTANT (rep_op) */            if (pn->pn_op != JSOP_NOP && js_Emit1(cx, cg, pn->pn_op) > 0)
3217: /* MUTANT (rep_op) */            if (pn->pn_op != JSOP_NOP && js_Emit1(cx, cg, pn->pn_op) >= 0)
3217: /* MUTANT (rep_op) */            if (pn->pn_op != JSOP_NOP && js_Emit1(cx, cg, pn->pn_op) == 0)
3217: /* MUTANT (rep_op) */            if (pn->pn_op != JSOP_NOP && js_Emit1(cx, cg, pn->pn_op) != 0)
3217: /* MUTANT (rep_const) */            if (pn->pn_op != JSOP_NOP && js_Emit1(cx, cg, pn->pn_op) < 1)
3217: /* MUTANT (rep_const) */            if (pn->pn_op != JSOP_NOP && js_Emit1(cx, cg, pn->pn_op) < -1)
3217: /* MUTANT (negate) */            if(! (pn->pn_op != JSOP_NOP && js_Emit1(cx, cg, pn->pn_op) < 0))
3226: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(pn3->pn_type == TOK_NAME); */ 
3226: /* MUTANT (rep_op) */                JS_ASSERT(pn3->pn_type != TOK_NAME);
3227: /* MUTANT (rep_op) */                if (!pn3->pn_expr || js_NewSrcNote(cx, cg, SRC_VAR) < 0)
3227: /* MUTANT (rep_op) */                if (!pn3->pn_expr && js_NewSrcNote(cx, cg, SRC_VAR) <= 0)
3227: /* MUTANT (rep_op) */                if (!pn3->pn_expr && js_NewSrcNote(cx, cg, SRC_VAR) > 0)
3227: /* MUTANT (rep_op) */                if (!pn3->pn_expr && js_NewSrcNote(cx, cg, SRC_VAR) >= 0)
3227: /* MUTANT (rep_op) */                if (!pn3->pn_expr && js_NewSrcNote(cx, cg, SRC_VAR) == 0)
3227: /* MUTANT (rep_op) */                if (!pn3->pn_expr && js_NewSrcNote(cx, cg, SRC_VAR) != 0)
3227: /* MUTANT (rep_const) */                if (!pn3->pn_expr && js_NewSrcNote(cx, cg, SRC_VAR) < 1)
3227: /* MUTANT (rep_const) */                if (!pn3->pn_expr && js_NewSrcNote(cx, cg, SRC_VAR) < -1)
3227: /* MUTANT (negate) */                if(! (!pn3->pn_expr && js_NewSrcNote(cx, cg, SRC_VAR) < 0))
3231: /* MUTANT (rep_op) */                if (pn3->pn_slot <= 0) {
3231: /* MUTANT (rep_op) */                if (pn3->pn_slot < 0) {
3231: /* MUTANT (rep_op) */                if (pn3->pn_slot > 0) {
3231: /* MUTANT (rep_op) */                if (pn3->pn_slot == 0) {
3231: /* MUTANT (rep_op) */                if (pn3->pn_slot != 0) {
3231: /* MUTANT (rep_const) */                if (pn3->pn_slot >= 1) {
3231: /* MUTANT (rep_const) */                if (pn3->pn_slot >= -1) {
3231: /* MUTANT (negate) */                if(! (pn3->pn_slot >= 0)) {
3232: /* MUTANT (del_stmt) */ /*                     op = pn3->pn_op; */ 
3240: /* MUTANT (del_stmt) */ /*                       default:           JS_ASSERT(0); */ 
3240: /* MUTANT (rep_const) */                      default:           JS_ASSERT(1);
3240: /* MUTANT (rep_const) */                      default:           JS_ASSERT(-1);
3243: /* MUTANT (del_stmt) */ /*                     pn3->pn_op = JSOP_FORNAME; */ 
3244: /* MUTANT (negate) */                    if(! (!LookupArgOrVar(cx, &cg->treeContext, pn3)))
3246: /* MUTANT (del_stmt) */ /*                     op = pn3->pn_op; */ 
3248: /* MUTANT (rep_op) */                if (pn3->pn_slot <= 0) {
3248: /* MUTANT (rep_op) */                if (pn3->pn_slot < 0) {
3248: /* MUTANT (rep_op) */                if (pn3->pn_slot > 0) {
3248: /* MUTANT (rep_op) */                if (pn3->pn_slot == 0) {
3248: /* MUTANT (rep_op) */                if (pn3->pn_slot != 0) {
3248: /* MUTANT (rep_const) */                if (pn3->pn_slot >= 1) {
3248: /* MUTANT (rep_const) */                if (pn3->pn_slot >= -1) {
3248: /* MUTANT (negate) */                if(! (pn3->pn_slot >= 0)) {
3249: /* MUTANT (negate) */                    if(! (pn3->pn_attrs & JSPROP_READONLY))
3251: /* MUTANT (del_stmt) */ /*                     atomIndex = (jsatomid) pn3->pn_slot; */ 
3252: /* MUTANT (del_stmt) */ /*                     EMIT_UINT16_IMM_OP(op, atomIndex); */ 
3254: /* MUTANT (negate) */                    if(! (!EmitAtomOp(cx, pn3, op, cg)))
3263: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
3265: /* MUTANT (negate) */                if(! (!useful)) {
3266: /* MUTANT (negate) */                    if(! (!EmitPropOp(cx, pn3, JSOP_FORPROP, cg)))
3268: /* MUTANT (del_stmt) */ /*                     break; */ 
3286: /* MUTANT (negate) */                if(! (!js_Emit1(cx, cg, JSOP_FORELEM)))
3296: /* MUTANT (del_stmt) */ /*                 noteIndex = js_NewSrcNote(cx, cg, SRC_WHILE); */ 
3297: /* MUTANT (rep_op) */                if (noteIndex <= 0)
3297: /* MUTANT (rep_op) */                if (noteIndex > 0)
3297: /* MUTANT (rep_op) */                if (noteIndex >= 0)
3297: /* MUTANT (rep_op) */                if (noteIndex == 0)
3297: /* MUTANT (rep_op) */                if (noteIndex != 0)
3297: /* MUTANT (rep_const) */                if (noteIndex < 1)
3297: /* MUTANT (rep_const) */                if (noteIndex < -1)
3297: /* MUTANT (negate) */                if(! (noteIndex < 0))
3299: /* MUTANT (del_stmt) */ /*                 beq = EmitJump(cx, cg, JSOP_IFEQ, 0); */ 
3299: /* MUTANT (rep_const) */                beq = EmitJump(cx, cg, JSOP_IFEQ, 1);
3299: /* MUTANT (rep_const) */                beq = EmitJump(cx, cg, JSOP_IFEQ, -1);
3300: /* MUTANT (rep_op) */                if (beq <= 0)
3300: /* MUTANT (rep_op) */                if (beq > 0)
3300: /* MUTANT (rep_op) */                if (beq >= 0)
3300: /* MUTANT (rep_op) */                if (beq == 0)
3300: /* MUTANT (rep_op) */                if (beq != 0)
3300: /* MUTANT (rep_const) */                if (beq < 1)
3300: /* MUTANT (rep_const) */                if (beq < -1)
3300: /* MUTANT (negate) */                if(! (beq < 0))
3304: /* MUTANT (rep_op) */                if (pn3->pn_type != TOK_LP) {
3304: /* MUTANT (negate) */                if(! (pn3->pn_type == TOK_LP)) {
3305: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(pn3->pn_op == JSOP_SETCALL); */ 
3305: /* MUTANT (rep_op) */                    JS_ASSERT(pn3->pn_op != JSOP_SETCALL);
3306: /* MUTANT (negate) */                    if(! (!js_EmitTree(cx, cg, pn3)))
3308: /* MUTANT (negate) */                    if(! (!js_Emit1(cx, cg, JSOP_ENUMELEM)))
3310: /* MUTANT (del_stmt) */ /*                     break; */ 
3314: /* MUTANT (rep_op) */                if (pn3->pn_type != TOK_UNARYOP) {
3314: /* MUTANT (negate) */                if(! (pn3->pn_type == TOK_UNARYOP)) {
3315: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(pn3->pn_op == JSOP_BINDXMLNAME); */ 
3315: /* MUTANT (rep_op) */                    JS_ASSERT(pn3->pn_op != JSOP_BINDXMLNAME);
3316: /* MUTANT (negate) */                    if(! (!js_EmitTree(cx, cg, pn3)))
3318: /* MUTANT (negate) */                    if(! (!js_Emit1(cx, cg, JSOP_ENUMELEM)))
3320: /* MUTANT (del_stmt) */ /*                     break; */ 
3325: /* MUTANT (negate) */                if(! (!EmitElemOp(cx, pn3, JSOP_ENUMELEM, cg)))
3327: /* MUTANT (del_stmt) */ /*                 break; */ 
3330: /* MUTANT (rep_const) */                JS_ASSERT(1);
3330: /* MUTANT (rep_const) */                JS_ASSERT(-1);
3333: /* MUTANT (negate) */            if(! (emitIFEQ)) {
3335: /* MUTANT (del_stmt) */ /*                 noteIndex = js_NewSrcNote(cx, cg, SRC_WHILE); */ 
3336: /* MUTANT (rep_op) */                if (noteIndex <= 0)
3336: /* MUTANT (rep_op) */                if (noteIndex > 0)
3336: /* MUTANT (rep_op) */                if (noteIndex >= 0)
3336: /* MUTANT (rep_op) */                if (noteIndex == 0)
3336: /* MUTANT (rep_op) */                if (noteIndex != 0)
3336: /* MUTANT (rep_const) */                if (noteIndex < 1)
3336: /* MUTANT (rep_const) */                if (noteIndex < -1)
3336: /* MUTANT (negate) */                if(! (noteIndex < 0))
3340: /* MUTANT (del_stmt) */ /*                 beq = EmitJump(cx, cg, JSOP_IFEQ, 0); */ 
3340: /* MUTANT (rep_const) */                beq = EmitJump(cx, cg, JSOP_IFEQ, 1);
3340: /* MUTANT (rep_const) */                beq = EmitJump(cx, cg, JSOP_IFEQ, -1);
3341: /* MUTANT (rep_op) */                if (beq <= 0)
3341: /* MUTANT (rep_op) */                if (beq > 0)
3341: /* MUTANT (rep_op) */                if (beq >= 0)
3341: /* MUTANT (rep_op) */                if (beq == 0)
3341: /* MUTANT (rep_op) */                if (beq != 0)
3341: /* MUTANT (rep_const) */                if (beq < 1)
3341: /* MUTANT (rep_const) */                if (beq < -1)
3341: /* MUTANT (negate) */                if(! (beq < 0))
3345: /* MUTANT (negate) */            if(! (!pn2->pn_kid1)) {
3347: /* MUTANT (del_stmt) */ /*                 op = JSOP_NOP; */ 
3349: /* MUTANT (negate) */                if(! (!js_EmitTree(cx, cg, pn2->pn_kid1)))
3351: /* MUTANT (del_stmt) */ /*                 op = JSOP_POP; */ 
3354: /* MUTANT (rep_op) */            if (noteIndex <= 0 ||
3354: /* MUTANT (rep_op) */            if (noteIndex > 0 ||
3354: /* MUTANT (rep_op) */            if (noteIndex >= 0 ||
3354: /* MUTANT (rep_op) */            if (noteIndex == 0 ||
3354: /* MUTANT (rep_op) */            if (noteIndex != 0 ||
3354: /* MUTANT (rep_op) */            if (noteIndex < 0 &&
3354: /* MUTANT (rep_const) */            if (noteIndex < 1 ||
3354: /* MUTANT (rep_const) */            if (noteIndex < -1 ||
3355: /* MUTANT (rep_op) */                js_Emit1(cx, cg, op) <= 0) {
3355: /* MUTANT (rep_op) */                js_Emit1(cx, cg, op) > 0) {
3355: /* MUTANT (rep_op) */                js_Emit1(cx, cg, op) >= 0) {
3355: /* MUTANT (rep_op) */                js_Emit1(cx, cg, op) == 0) {
3355: /* MUTANT (rep_op) */                js_Emit1(cx, cg, op) != 0) {
3355: /* MUTANT (rep_const) */                js_Emit1(cx, cg, op) < 1) {
3355: /* MUTANT (rep_const) */                js_Emit1(cx, cg, op) < -1) {
3356: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
3360: /* MUTANT (del_stmt) */ /*             SET_STATEMENT_TOP(&stmtInfo, top); */ 
3361: /* MUTANT (negate) */            if(! (!pn2->pn_kid2)) {
3363: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 1, 0))
3363: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, -1, 0))
3363: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 0, 1))
3363: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 0, -1))
3363: /* MUTANT (negate) */                if(! (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 0, 0)))
3366: /* MUTANT (negate) */                if(! (!js_EmitTree(cx, cg, pn2->pn_kid2)))
3368: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 1,
3368: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, -1,
3370: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
3372: /* MUTANT (rep_const) */                beq = EmitJump(cx, cg, JSOP_IFEQ, 1);
3372: /* MUTANT (rep_const) */                beq = EmitJump(cx, cg, JSOP_IFEQ, -1);
3373: /* MUTANT (rep_op) */                if (beq <= 0)
3373: /* MUTANT (rep_op) */                if (beq > 0)
3373: /* MUTANT (rep_op) */                if (beq >= 0)
3373: /* MUTANT (rep_op) */                if (beq == 0)
3373: /* MUTANT (rep_op) */                if (beq != 0)
3373: /* MUTANT (rep_const) */                if (beq < 1)
3373: /* MUTANT (rep_const) */                if (beq < -1)
3373: /* MUTANT (negate) */                if(! (beq < 0))
3382: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_right)))
3385: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_IN) {
3385: /* MUTANT (negate) */        if(! (pn2->pn_type != TOK_IN)) {
3387: /* MUTANT (del_stmt) */ /*             JS_ASSERT(noteIndex != -1); */ 
3387: /* MUTANT (rep_op) */            JS_ASSERT(noteIndex == -1);
3387: /* MUTANT (rep_const) */            JS_ASSERT(noteIndex != 0);
3387: /* MUTANT (rep_const) */            JS_ASSERT(noteIndex != 1);
3387: /* MUTANT (rep_const) */            JS_ASSERT(noteIndex != ((-1)+1));
3387: /* MUTANT (rep_const) */            JS_ASSERT(noteIndex != ((-1)-1));
3388: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 0,
3388: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, -1,
3388: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, ((1)+1),
3390: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
3393: /* MUTANT (negate) */            if(! (pn3)) {
3395: /* MUTANT (del_stmt) */ /*                 stmt = &stmtInfo; */ 
3397: /* MUTANT (del_stmt) */ /*                     stmt->update = CG_OFFSET(cg); */ 
3398: /* MUTANT (rep_op) */                } while ((stmt = stmt->down) == NULL &&
3398: /* MUTANT (rep_op) */                } while ((stmt = stmt->down) != NULL ||
3399: /* MUTANT (rep_op) */                         stmt->type != STMT_LABEL);
3401: /* MUTANT (negate) */                if(! (!js_EmitTree(cx, cg, pn3)))
3403: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_POP) <= 0)
3403: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_POP) > 0)
3403: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_POP) >= 0)
3403: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_POP) == 0)
3403: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_POP) != 0)
3403: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_POP) < 1)
3403: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_POP) < -1)
3403: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, JSOP_POP) < 0))
3407: /* MUTANT (del_stmt) */ /*                 off = (ptrdiff_t) pn->pn_pos.end.lineno; */ 
3408: /* MUTANT (rep_op) */                if (CG_CURRENT_LINE(cg) == (uintN) off) {
3408: /* MUTANT (negate) */                if(! (CG_CURRENT_LINE(cg) != (uintN) off)) {
3409: /* MUTANT (rep_op) */                    if (js_NewSrcNote2(cx, cg, SRC_SETLINE, off) <= 0)
3409: /* MUTANT (rep_op) */                    if (js_NewSrcNote2(cx, cg, SRC_SETLINE, off) > 0)
3409: /* MUTANT (rep_op) */                    if (js_NewSrcNote2(cx, cg, SRC_SETLINE, off) >= 0)
3409: /* MUTANT (rep_op) */                    if (js_NewSrcNote2(cx, cg, SRC_SETLINE, off) == 0)
3409: /* MUTANT (rep_op) */                    if (js_NewSrcNote2(cx, cg, SRC_SETLINE, off) != 0)
3409: /* MUTANT (rep_const) */                    if (js_NewSrcNote2(cx, cg, SRC_SETLINE, off) < 1)
3409: /* MUTANT (rep_const) */                    if (js_NewSrcNote2(cx, cg, SRC_SETLINE, off) < -1)
3409: /* MUTANT (negate) */                    if(! (js_NewSrcNote2(cx, cg, SRC_SETLINE, off) < 0))
3411: /* MUTANT (del_stmt) */ /*                     CG_CURRENT_LINE(cg) = (uintN) off; */ 
3416: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 0,
3416: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 1,
3416: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, -1,
3416: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, ((2)+1),
3416: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, ((2)-1),
3418: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
3424: /* MUTANT (rep_op) */        if (jmp <= 0)
3424: /* MUTANT (rep_op) */        if (jmp > 0)
3424: /* MUTANT (rep_op) */        if (jmp >= 0)
3424: /* MUTANT (rep_op) */        if (jmp == 0)
3424: /* MUTANT (rep_op) */        if (jmp != 0)
3424: /* MUTANT (rep_const) */        if (jmp < 1)
3424: /* MUTANT (rep_const) */        if (jmp < -1)
3424: /* MUTANT (negate) */        if(! (jmp < 0))
3426: /* MUTANT (rep_op) */        if (beq <= 0)
3426: /* MUTANT (rep_op) */        if (beq < 0)
3426: /* MUTANT (rep_op) */        if (beq >= 0)
3426: /* MUTANT (rep_op) */        if (beq == 0)
3426: /* MUTANT (rep_op) */        if (beq != 0)
3426: /* MUTANT (rep_const) */        if (beq > 1)
3426: /* MUTANT (rep_const) */        if (beq > -1)
3426: /* MUTANT (negate) */        if(! (beq > 0))
3428: /* MUTANT (rep_op) */        if (pn2->pn_type != TOK_IN) {
3428: /* MUTANT (negate) */        if(! (pn2->pn_type == TOK_IN)) {
3430: /* MUTANT (del_stmt) */ /*             JS_ASSERT(noteIndex != -1); */ 
3430: /* MUTANT (rep_op) */            JS_ASSERT(noteIndex == -1);
3430: /* MUTANT (rep_const) */            JS_ASSERT(noteIndex != 0);
3430: /* MUTANT (rep_const) */            JS_ASSERT(noteIndex != 1);
3430: /* MUTANT (rep_const) */            JS_ASSERT(noteIndex != ((-1)+1));
3430: /* MUTANT (rep_const) */            JS_ASSERT(noteIndex != ((-1)-1));
3431: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 1, jmp - beq))
3431: /* MUTANT (rep_const) */            if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, -1, jmp - beq))
3431: /* MUTANT (negate) */            if(! (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 0, jmp - beq)))
3436: /* MUTANT (negate) */        if(! (!js_PopStatementCG(cx, cg)))
3439: /* MUTANT (rep_op) */        if (pn2->pn_type != TOK_IN) {
3439: /* MUTANT (negate) */        if(! (pn2->pn_type == TOK_IN)) {
3440: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) <= 0)
3440: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) > 0)
3440: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) >= 0)
3440: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) == 0)
3440: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP2) != 0)
3440: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_POP2) < 1)
3440: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_POP2) < -1)
3440: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_POP2) < 0))
3447: /* MUTANT (del_stmt) */ /*         atom = pn->pn_atom; */ 
3448: /* MUTANT (negate) */        if(! (atom)) {
3449: /* MUTANT (del_stmt) */ /*             ale = js_IndexAtom(cx, atom, &cg->atomList); */ 
3450: /* MUTANT (negate) */            if(! (!ale))
3452: /* MUTANT (rep_op) */            while (stmt->type == STMT_LABEL || stmt->label != atom)
3452: /* MUTANT (rep_op) */            while (stmt->type != STMT_LABEL && stmt->label != atom)
3452: /* MUTANT (rep_op) */            while (stmt->type != STMT_LABEL || stmt->label == atom)
3452: /* MUTANT (negate) */            while(! (stmt->type != STMT_LABEL || stmt->label != atom))
3454: /* MUTANT (del_stmt) */ /*             noteType = SRC_BREAK2LABEL; */ 
3456: /* MUTANT (del_stmt) */ /*             ale = NULL; */ 
3457: /* MUTANT (rep_op) */            while (!STMT_IS_LOOP(stmt) || stmt->type != STMT_SWITCH)
3457: /* MUTANT (rep_op) */            while (!STMT_IS_LOOP(stmt) && stmt->type == STMT_SWITCH)
3457: /* MUTANT (negate) */            while(! (!STMT_IS_LOOP(stmt) && stmt->type != STMT_SWITCH))
3459: /* MUTANT (del_stmt) */ /*             noteType = SRC_NULL; */ 
3462: /* MUTANT (rep_op) */        if (EmitGoto(cx, cg, stmt, &stmt->breaks, ale, noteType) <= 0)
3462: /* MUTANT (rep_op) */        if (EmitGoto(cx, cg, stmt, &stmt->breaks, ale, noteType) > 0)
3462: /* MUTANT (rep_op) */        if (EmitGoto(cx, cg, stmt, &stmt->breaks, ale, noteType) >= 0)
3462: /* MUTANT (rep_op) */        if (EmitGoto(cx, cg, stmt, &stmt->breaks, ale, noteType) == 0)
3462: /* MUTANT (rep_op) */        if (EmitGoto(cx, cg, stmt, &stmt->breaks, ale, noteType) != 0)
3462: /* MUTANT (rep_const) */        if (EmitGoto(cx, cg, stmt, &stmt->breaks, ale, noteType) < 1)
3462: /* MUTANT (rep_const) */        if (EmitGoto(cx, cg, stmt, &stmt->breaks, ale, noteType) < -1)
3462: /* MUTANT (negate) */        if(! (EmitGoto(cx, cg, stmt, &stmt->breaks, ale, noteType) < 0))
3464: /* MUTANT (del_stmt) */ /*         break; */ 
3468: /* MUTANT (del_stmt) */ /*         atom = pn->pn_atom; */ 
3469: /* MUTANT (negate) */        if(! (atom)) {
3471: /* MUTANT (del_stmt) */ /*             JSStmtInfo *loop = NULL; */ 
3472: /* MUTANT (del_stmt) */ /*             ale = js_IndexAtom(cx, atom, &cg->atomList); */ 
3473: /* MUTANT (negate) */            if(! (!ale))
3475: /* MUTANT (rep_op) */            while (stmt->type == STMT_LABEL || stmt->label != atom) {
3475: /* MUTANT (rep_op) */            while (stmt->type != STMT_LABEL && stmt->label != atom) {
3475: /* MUTANT (rep_op) */            while (stmt->type != STMT_LABEL || stmt->label == atom) {
3475: /* MUTANT (negate) */            while(! (stmt->type != STMT_LABEL || stmt->label != atom)) {
3476: /* MUTANT (negate) */                if(! (STMT_IS_LOOP(stmt)))
3478: /* MUTANT (del_stmt) */ /*                 stmt = stmt->down; */ 
3481: /* MUTANT (del_stmt) */ /*             noteType = SRC_CONT2LABEL; */ 
3483: /* MUTANT (del_stmt) */ /*             ale = NULL; */ 
3484: /* MUTANT (negate) */            while(! (!STMT_IS_LOOP(stmt)))
3486: /* MUTANT (del_stmt) */ /*             noteType = SRC_CONTINUE; */ 
3489: /* MUTANT (rep_op) */        if (EmitGoto(cx, cg, stmt, &stmt->continues, ale, noteType) <= 0)
3489: /* MUTANT (rep_op) */        if (EmitGoto(cx, cg, stmt, &stmt->continues, ale, noteType) > 0)
3489: /* MUTANT (rep_op) */        if (EmitGoto(cx, cg, stmt, &stmt->continues, ale, noteType) >= 0)
3489: /* MUTANT (rep_op) */        if (EmitGoto(cx, cg, stmt, &stmt->continues, ale, noteType) == 0)
3489: /* MUTANT (rep_op) */        if (EmitGoto(cx, cg, stmt, &stmt->continues, ale, noteType) != 0)
3489: /* MUTANT (rep_const) */        if (EmitGoto(cx, cg, stmt, &stmt->continues, ale, noteType) < 1)
3489: /* MUTANT (rep_const) */        if (EmitGoto(cx, cg, stmt, &stmt->continues, ale, noteType) < -1)
3489: /* MUTANT (negate) */        if(! (EmitGoto(cx, cg, stmt, &stmt->continues, ale, noteType) < 0))
3491: /* MUTANT (del_stmt) */ /*         break; */ 
3494: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_left)))
3496: /* MUTANT (del_stmt) */ /*         js_PushStatement(&cg->treeContext, &stmtInfo, STMT_WITH, CG_OFFSET(cg)); */ 
3497: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENTERWITH) <= 0)
3497: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENTERWITH) > 0)
3497: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENTERWITH) >= 0)
3497: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENTERWITH) == 0)
3497: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENTERWITH) != 0)
3497: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ENTERWITH) < 1)
3497: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ENTERWITH) < -1)
3497: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_ENTERWITH) < 0))
3499: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_right)))
3501: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_LEAVEWITH) <= 0)
3501: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_LEAVEWITH) > 0)
3501: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_LEAVEWITH) >= 0)
3501: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_LEAVEWITH) == 0)
3501: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_LEAVEWITH) != 0)
3501: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_LEAVEWITH) < 1)
3501: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_LEAVEWITH) < -1)
3501: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_LEAVEWITH) < 0))
3503: /* MUTANT (del_stmt) */ /*         ok = js_PopStatementCG(cx, cg); */ 
3504: /* MUTANT (del_stmt) */ /*         break; */ 
3510: /* MUTANT (del_stmt) */ /*         ptrdiff_t start, end, catchStart, finallyCatch, catchJump; */ 
3511: /* MUTANT (del_stmt) */ /*         JSParseNode *iter; */ 
3512: /* MUTANT (del_stmt) */ /*         intN depth; */ 
3515: /* MUTANT (del_stmt) */ /*         end = catchStart = finallyCatch = catchJump = -1; */ 
3515: /* MUTANT (rep_const) */        end = catchStart = finallyCatch = catchJump = 0;
3515: /* MUTANT (rep_const) */        end = catchStart = finallyCatch = catchJump = 1;
3515: /* MUTANT (rep_const) */        end = catchStart = finallyCatch = catchJump = ((-1)+1);
3515: /* MUTANT (rep_const) */        end = catchStart = finallyCatch = catchJump = ((-1)-1);
3541: /* MUTANT (del_stmt) */ /*         depth = cg->stackDepth; */ 
3544: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_TRY) <= 0)
3544: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_TRY) > 0)
3544: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_TRY) >= 0)
3544: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_TRY) == 0)
3544: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_TRY) != 0)
3544: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_TRY) < 1)
3544: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_TRY) < -1)
3544: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_TRY) < 0))
3546: /* MUTANT (del_stmt) */ /*         start = CG_OFFSET(cg); */ 
3547: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_kid1)))
3551: /* MUTANT (negate) */        if(! (pn->pn_kid3)) {
3552: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) <= 0)
3552: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) > 0)
3552: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) >= 0)
3552: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) == 0)
3552: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) != 0)
3552: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 1)
3552: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < -1)
3552: /* MUTANT (negate) */            if(! (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0))
3554: /* MUTANT (del_stmt) */ /*             jmp = EmitBackPatchOp(cx, cg, JSOP_BACKPATCH, &stmtInfo.gosub); */ 
3555: /* MUTANT (rep_op) */            if (jmp <= 0)
3555: /* MUTANT (rep_op) */            if (jmp > 0)
3555: /* MUTANT (rep_op) */            if (jmp >= 0)
3555: /* MUTANT (rep_op) */            if (jmp == 0)
3555: /* MUTANT (rep_op) */            if (jmp != 0)
3555: /* MUTANT (rep_const) */            if (jmp < 1)
3555: /* MUTANT (rep_const) */            if (jmp < -1)
3555: /* MUTANT (negate) */            if(! (jmp < 0))
3560: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_HIDDEN) <= 0)
3560: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_HIDDEN) > 0)
3560: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_HIDDEN) >= 0)
3560: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_HIDDEN) == 0)
3560: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_HIDDEN) != 0)
3560: /* MUTANT (rep_const) */        if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 1)
3560: /* MUTANT (rep_const) */        if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < -1)
3560: /* MUTANT (negate) */        if(! (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0))
3562: /* MUTANT (del_stmt) */ /*         jmp = EmitBackPatchOp(cx, cg, JSOP_BACKPATCH, &stmtInfo.catchJump); */ 
3563: /* MUTANT (rep_op) */        if (jmp <= 0)
3563: /* MUTANT (rep_op) */        if (jmp > 0)
3563: /* MUTANT (rep_op) */        if (jmp >= 0)
3563: /* MUTANT (rep_op) */        if (jmp == 0)
3563: /* MUTANT (rep_op) */        if (jmp != 0)
3563: /* MUTANT (rep_const) */        if (jmp < 1)
3563: /* MUTANT (rep_const) */        if (jmp < -1)
3563: /* MUTANT (negate) */        if(! (jmp < 0))
3566: /* MUTANT (del_stmt) */ /*         end = CG_OFFSET(cg); */ 
3569: /* MUTANT (del_stmt) */ /*         iter = pn->pn_kid2; */ 
3570: /* MUTANT (negate) */        if(! (iter)) {
3571: /* MUTANT (del_stmt) */ /*             catchStart = end; */ 
3596: /* MUTANT (del_stmt) */ /*                 JSStmtInfo stmtInfo2; */ 
3597: /* MUTANT (del_stmt) */ /*                 JSParseNode *disc; */ 
3598: /* MUTANT (del_stmt) */ /*                 ptrdiff_t guardnote; */ 
3600: /* MUTANT (negate) */                if(! (!UpdateLineNumberNotes(cx, cg, iter)))
3603: /* MUTANT (rep_op) */                if (catchJump == -1) {
3603: /* MUTANT (rep_const) */                if (catchJump != 0) {
3603: /* MUTANT (rep_const) */                if (catchJump != 1) {
3603: /* MUTANT (rep_const) */                if (catchJump != ((-1)+1)) {
3603: /* MUTANT (rep_const) */                if (catchJump != ((-1)-1)) {
3603: /* MUTANT (negate) */                if(! (catchJump != -1)) {
3604: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(cg->stackDepth == depth); */ 
3604: /* MUTANT (rep_op) */                    JS_ASSERT(cg->stackDepth != depth);
3607: /* MUTANT (del_stmt) */ /*                     CHECK_AND_SET_JUMP_OFFSET_AT(cx, cg, catchJump); */ 
3610: /* MUTANT (rep_op) */                    if (!js_Emit1(cx, cg, JSOP_THROWING) <= 0)
3610: /* MUTANT (rep_op) */                    if (!js_Emit1(cx, cg, JSOP_THROWING) > 0)
3610: /* MUTANT (rep_op) */                    if (!js_Emit1(cx, cg, JSOP_THROWING) >= 0)
3610: /* MUTANT (rep_op) */                    if (!js_Emit1(cx, cg, JSOP_THROWING) == 0)
3610: /* MUTANT (rep_op) */                    if (!js_Emit1(cx, cg, JSOP_THROWING) != 0)
3610: /* MUTANT (rep_const) */                    if (!js_Emit1(cx, cg, JSOP_THROWING) < 1)
3610: /* MUTANT (rep_const) */                    if (!js_Emit1(cx, cg, JSOP_THROWING) < -1)
3610: /* MUTANT (negate) */                    if(! (!js_Emit1(cx, cg, JSOP_THROWING) < 0))
3614: /* MUTANT (del_stmt) */ /*                     cg->stackDepth++; */ 
3614: /* MUTANT (rep_op) */                    cg->stackDepth--;
3615: /* MUTANT (del_stmt) */ /*                     JS_ASSERT((uintN) cg->stackDepth <= cg->maxStackDepth); */ 
3615: /* MUTANT (rep_op) */                    JS_ASSERT((uintN) cg->stackDepth < cg->maxStackDepth);
3615: /* MUTANT (rep_op) */                    JS_ASSERT((uintN) cg->stackDepth > cg->maxStackDepth);
3615: /* MUTANT (rep_op) */                    JS_ASSERT((uintN) cg->stackDepth >= cg->maxStackDepth);
3615: /* MUTANT (rep_op) */                    JS_ASSERT((uintN) cg->stackDepth == cg->maxStackDepth);
3615: /* MUTANT (rep_op) */                    JS_ASSERT((uintN) cg->stackDepth != cg->maxStackDepth);
3617: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_HIDDEN) <= 0 ||
3617: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_HIDDEN) > 0 ||
3617: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_HIDDEN) >= 0 ||
3617: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_HIDDEN) == 0 ||
3617: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_HIDDEN) != 0 ||
3617: /* MUTANT (rep_op) */                    if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0 &&
3617: /* MUTANT (rep_const) */                    if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 1 ||
3617: /* MUTANT (rep_const) */                    if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < -1 ||
3618: /* MUTANT (rep_op) */                        js_Emit1(cx, cg, JSOP_LEAVEWITH) <= 0) {
3618: /* MUTANT (rep_op) */                        js_Emit1(cx, cg, JSOP_LEAVEWITH) > 0) {
3618: /* MUTANT (rep_op) */                        js_Emit1(cx, cg, JSOP_LEAVEWITH) >= 0) {
3618: /* MUTANT (rep_op) */                        js_Emit1(cx, cg, JSOP_LEAVEWITH) == 0) {
3618: /* MUTANT (rep_op) */                        js_Emit1(cx, cg, JSOP_LEAVEWITH) != 0) {
3618: /* MUTANT (rep_const) */                        js_Emit1(cx, cg, JSOP_LEAVEWITH) < 1) {
3618: /* MUTANT (rep_const) */                        js_Emit1(cx, cg, JSOP_LEAVEWITH) < -1) {
3619: /* MUTANT (del_stmt) */ /*                         return JS_FALSE; */ 
3623: /* MUTANT (del_stmt) */ /*                     EMIT_UINT16_IMM_OP(JSOP_SETSP, (jsatomid)depth); */ 
3624: /* MUTANT (del_stmt) */ /*                     cg->stackDepth = depth; */ 
3628: /* MUTANT (rep_const) */                guardnote = js_NewSrcNote2(cx, cg, SRC_CATCH, 1);
3628: /* MUTANT (rep_const) */                guardnote = js_NewSrcNote2(cx, cg, SRC_CATCH, -1);
3629: /* MUTANT (rep_op) */                if (guardnote <= 0 ||
3629: /* MUTANT (rep_op) */                if (guardnote > 0 ||
3629: /* MUTANT (rep_op) */                if (guardnote >= 0 ||
3629: /* MUTANT (rep_op) */                if (guardnote == 0 ||
3629: /* MUTANT (rep_op) */                if (guardnote != 0 ||
3629: /* MUTANT (rep_op) */                if (guardnote < 0 &&
3629: /* MUTANT (rep_const) */                if (guardnote < 1 ||
3629: /* MUTANT (rep_const) */                if (guardnote < -1 ||
3630: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NOP) <= 0) {
3630: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NOP) > 0) {
3630: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NOP) >= 0) {
3630: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NOP) == 0) {
3630: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NOP) != 0) {
3630: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_NOP) < 1) {
3630: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_NOP) < -1) {
3631: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
3637: /* MUTANT (negate) */                if(! (!ale))
3639: /* MUTANT (del_stmt) */ /*                 EMIT_ATOM_INDEX_OP(JSOP_NAME, ALE_INDEX(ale)); */ 
3641: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSHOBJ) <= 0 ||
3641: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSHOBJ) > 0 ||
3641: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSHOBJ) >= 0 ||
3641: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSHOBJ) == 0 ||
3641: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSHOBJ) != 0 ||
3641: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSHOBJ) < 0 &&
3641: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_PUSHOBJ) < 1 ||
3641: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_PUSHOBJ) < -1 ||
3642: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NEWINIT) <= 0 ||
3642: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NEWINIT) > 0 ||
3642: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NEWINIT) >= 0 ||
3642: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NEWINIT) == 0 ||
3642: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NEWINIT) != 0 ||
3642: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_NEWINIT) < 0 &&
3642: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_NEWINIT) < 1 ||
3642: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_NEWINIT) < -1 ||
3643: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) <= 0) {
3643: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) > 0) {
3643: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) >= 0) {
3643: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) == 0) {
3643: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) != 0) {
3643: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) < 1) {
3643: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) < -1) {
3644: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
3649: /* MUTANT (del_stmt) */ /*                 ale = js_IndexAtom(cx, disc->pn_atom, &cg->atomList); */ 
3650: /* MUTANT (negate) */                if(! (!ale))
3653: /* MUTANT (del_stmt) */ /*                 EMIT_ATOM_INDEX_OP(JSOP_INITCATCHVAR, ALE_INDEX(ale)); */ 
3654: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) <= 0 ||
3654: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) > 0 ||
3654: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) >= 0 ||
3654: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) == 0 ||
3654: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) != 0 ||
3654: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0 &&
3654: /* MUTANT (rep_const) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 1 ||
3654: /* MUTANT (rep_const) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < -1 ||
3655: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_ENTERWITH) <= 0) {
3655: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_ENTERWITH) > 0) {
3655: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_ENTERWITH) >= 0) {
3655: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_ENTERWITH) == 0) {
3655: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_ENTERWITH) != 0) {
3655: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_ENTERWITH) < 1) {
3655: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_ENTERWITH) < -1) {
3656: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
3660: /* MUTANT (negate) */                if(! (disc->pn_expr)) {
3661: /* MUTANT (del_stmt) */ /*                     ptrdiff_t guardstart = CG_OFFSET(cg); */ 
3661: /* MUTANT (negate) */                    ptrdif(!f_t guardstart = CG_OFFSET(cg));
3662: /* MUTANT (negate) */                    if(! (!js_EmitTree(cx, cg, disc->pn_expr)))
3664: /* MUTANT (rep_const) */                    if (!js_SetSrcNoteOffset(cx, cg, guardnote, 1,
3664: /* MUTANT (rep_const) */                    if (!js_SetSrcNoteOffset(cx, cg, guardnote, -1,
3666: /* MUTANT (del_stmt) */ /*                         return JS_FALSE; */ 
3669: /* MUTANT (rep_const) */                    catchJump = EmitJump(cx, cg, JSOP_IFEQ, 1);
3669: /* MUTANT (rep_const) */                    catchJump = EmitJump(cx, cg, JSOP_IFEQ, -1);
3670: /* MUTANT (rep_op) */                    if (catchJump <= 0)
3670: /* MUTANT (rep_op) */                    if (catchJump > 0)
3670: /* MUTANT (rep_op) */                    if (catchJump >= 0)
3670: /* MUTANT (rep_op) */                    if (catchJump == 0)
3670: /* MUTANT (rep_op) */                    if (catchJump != 0)
3670: /* MUTANT (rep_const) */                    if (catchJump < 1)
3670: /* MUTANT (rep_const) */                    if (catchJump < -1)
3670: /* MUTANT (negate) */                    if(! (catchJump < 0))
3677: /* MUTANT (del_stmt) */ /*                 stmtInfo2.label = disc->pn_atom; */ 
3678: /* MUTANT (negate) */                if(! (!js_EmitTree(cx, cg, iter->pn_kid3)))
3680: /* MUTANT (del_stmt) */ /*                 js_PopStatementCG(cx, cg); */ 
3688: /* MUTANT (del_stmt) */ /*                 off = cg->stackDepth - 1; */ 
3688: /* MUTANT (rep_const) */                off = cg->stackDepth - 0;
3688: /* MUTANT (rep_const) */                off = cg->stackDepth - -1;
3688: /* MUTANT (rep_const) */                off = cg->stackDepth - ((1)+1);
3689: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_CATCH, off) <= 0 ||
3689: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_CATCH, off) > 0 ||
3689: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_CATCH, off) >= 0 ||
3689: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_CATCH, off) == 0 ||
3689: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_CATCH, off) != 0 ||
3689: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_CATCH, off) < 0 &&
3689: /* MUTANT (rep_const) */                if (js_NewSrcNote2(cx, cg, SRC_CATCH, off) < 1 ||
3689: /* MUTANT (rep_const) */                if (js_NewSrcNote2(cx, cg, SRC_CATCH, off) < -1 ||
3690: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_LEAVEWITH) <= 0) {
3690: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_LEAVEWITH) > 0) {
3690: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_LEAVEWITH) >= 0) {
3690: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_LEAVEWITH) == 0) {
3690: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_LEAVEWITH) != 0) {
3690: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_LEAVEWITH) < 1) {
3690: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_LEAVEWITH) < -1) {
3691: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
3695: /* MUTANT (negate) */                if(! (pn->pn_kid3)) {
3698: /* MUTANT (rep_op) */                    if (jmp <= 0)
3698: /* MUTANT (rep_op) */                    if (jmp > 0)
3698: /* MUTANT (rep_op) */                    if (jmp >= 0)
3698: /* MUTANT (rep_op) */                    if (jmp == 0)
3698: /* MUTANT (rep_op) */                    if (jmp != 0)
3698: /* MUTANT (rep_const) */                    if (jmp < 1)
3698: /* MUTANT (rep_const) */                    if (jmp < -1)
3698: /* MUTANT (negate) */                    if(! (jmp < 0))
3700: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(cg->stackDepth == depth); */ 
3700: /* MUTANT (rep_op) */                    JS_ASSERT(cg->stackDepth != depth);
3704: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) <= 0)
3704: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) > 0)
3704: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) >= 0)
3704: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) == 0)
3704: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) != 0)
3704: /* MUTANT (rep_const) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 1)
3704: /* MUTANT (rep_const) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < -1)
3704: /* MUTANT (negate) */                if(! (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0))
3708: /* MUTANT (rep_op) */                if (jmp <= 0)
3708: /* MUTANT (rep_op) */                if (jmp > 0)
3708: /* MUTANT (rep_op) */                if (jmp >= 0)
3708: /* MUTANT (rep_op) */                if (jmp == 0)
3708: /* MUTANT (rep_op) */                if (jmp != 0)
3708: /* MUTANT (rep_const) */                if (jmp < 1)
3708: /* MUTANT (rep_const) */                if (jmp < -1)
3708: /* MUTANT (negate) */                if(! (jmp < 0))
3710: /* MUTANT (negate) */                if(! (!iter->pn_kid2))     /* leave iter at last catch */
3712: /* MUTANT (del_stmt) */ /*                 iter = iter->pn_kid2; */ 
3732: /* MUTANT (rep_op) */        if (pn->pn_kid3 &&
3733: /* MUTANT (rep_op) */            (catchJump == -1 && iter->pn_kid1->pn_expr)) {
3733: /* MUTANT (rep_op) */            (catchJump != -1 || iter->pn_kid1->pn_expr)) {
3733: /* MUTANT (rep_const) */            (catchJump != 0 && iter->pn_kid1->pn_expr)) {
3733: /* MUTANT (rep_const) */            (catchJump != 1 && iter->pn_kid1->pn_expr)) {
3733: /* MUTANT (rep_const) */            (catchJump != ((-1)+1) && iter->pn_kid1->pn_expr)) {
3733: /* MUTANT (rep_const) */            (catchJump != ((-1)-1) && iter->pn_kid1->pn_expr)) {
3740: /* MUTANT (rep_op) */            if (catchJump == -1 && iter->pn_kid1->pn_expr) {
3740: /* MUTANT (rep_op) */            if (catchJump != -1 || iter->pn_kid1->pn_expr) {
3740: /* MUTANT (rep_const) */            if (catchJump != 0 && iter->pn_kid1->pn_expr) {
3740: /* MUTANT (rep_const) */            if (catchJump != 1 && iter->pn_kid1->pn_expr) {
3740: /* MUTANT (rep_const) */            if (catchJump != ((-1)+1) && iter->pn_kid1->pn_expr) {
3740: /* MUTANT (rep_const) */            if (catchJump != ((-1)-1) && iter->pn_kid1->pn_expr) {
3740: /* MUTANT (negate) */            if(! (catchJump != -1 && iter->pn_kid1->pn_expr)) {
3741: /* MUTANT (del_stmt) */ /*                 CHECK_AND_SET_JUMP_OFFSET_AT(cx, cg, catchJump); */ 
3742: /* MUTANT (rep_op) */                if (pn->pn_kid3 || !js_Emit1(cx, cg, JSOP_THROWING) < 0)
3742: /* MUTANT (rep_op) */                if (pn->pn_kid3 && !js_Emit1(cx, cg, JSOP_THROWING) <= 0)
3742: /* MUTANT (rep_op) */                if (pn->pn_kid3 && !js_Emit1(cx, cg, JSOP_THROWING) > 0)
3742: /* MUTANT (rep_op) */                if (pn->pn_kid3 && !js_Emit1(cx, cg, JSOP_THROWING) >= 0)
3742: /* MUTANT (rep_op) */                if (pn->pn_kid3 && !js_Emit1(cx, cg, JSOP_THROWING) == 0)
3742: /* MUTANT (rep_op) */                if (pn->pn_kid3 && !js_Emit1(cx, cg, JSOP_THROWING) != 0)
3742: /* MUTANT (rep_const) */                if (pn->pn_kid3 && !js_Emit1(cx, cg, JSOP_THROWING) < 1)
3742: /* MUTANT (rep_const) */                if (pn->pn_kid3 && !js_Emit1(cx, cg, JSOP_THROWING) < -1)
3742: /* MUTANT (negate) */                if(! (pn->pn_kid3 && !js_Emit1(cx, cg, JSOP_THROWING) < 0))
3754: /* MUTANT (del_stmt) */ /*             EMIT_UINT16_IMM_OP(JSOP_SETSP, (jsatomid)depth); */ 
3755: /* MUTANT (del_stmt) */ /*             cg->stackDepth = depth; */ 
3757: /* MUTANT (negate) */            if(! (pn->pn_kid3)) {
3758: /* MUTANT (del_stmt) */ /*                 jmp = EmitBackPatchOp(cx, cg, JSOP_BACKPATCH, &stmtInfo.gosub); */ 
3759: /* MUTANT (rep_op) */                if (jmp <= 0)
3759: /* MUTANT (rep_op) */                if (jmp > 0)
3759: /* MUTANT (rep_op) */                if (jmp >= 0)
3759: /* MUTANT (rep_op) */                if (jmp == 0)
3759: /* MUTANT (rep_op) */                if (jmp != 0)
3759: /* MUTANT (rep_const) */                if (jmp < 1)
3759: /* MUTANT (rep_const) */                if (jmp < -1)
3759: /* MUTANT (negate) */                if(! (jmp < 0))
3762: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(cg->stackDepth == depth); */ 
3762: /* MUTANT (rep_op) */                JS_ASSERT(cg->stackDepth != depth);
3763: /* MUTANT (del_stmt) */ /*                 JS_ASSERT((uintN)depth <= cg->maxStackDepth); */ 
3763: /* MUTANT (rep_op) */                JS_ASSERT((uintN)depth < cg->maxStackDepth);
3763: /* MUTANT (rep_op) */                JS_ASSERT((uintN)depth > cg->maxStackDepth);
3763: /* MUTANT (rep_op) */                JS_ASSERT((uintN)depth >= cg->maxStackDepth);
3763: /* MUTANT (rep_op) */                JS_ASSERT((uintN)depth == cg->maxStackDepth);
3763: /* MUTANT (rep_op) */                JS_ASSERT((uintN)depth != cg->maxStackDepth);
3765: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) <= 0 ||
3765: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) > 0 ||
3765: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) >= 0 ||
3765: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) == 0 ||
3765: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) != 0 ||
3765: /* MUTANT (rep_op) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0 &&
3765: /* MUTANT (rep_const) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 1 ||
3765: /* MUTANT (rep_const) */                if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < -1 ||
3766: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) <= 0 ||
3766: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) > 0 ||
3766: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) >= 0 ||
3766: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) == 0 ||
3766: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) != 0 ||
3766: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) < 0 &&
3766: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) < 1 ||
3766: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_EXCEPTION) < -1 ||
3767: /* MUTANT (rep_op) */                    js_NewSrcNote(cx, cg, SRC_HIDDEN) <= 0 ||
3767: /* MUTANT (rep_op) */                    js_NewSrcNote(cx, cg, SRC_HIDDEN) > 0 ||
3767: /* MUTANT (rep_op) */                    js_NewSrcNote(cx, cg, SRC_HIDDEN) >= 0 ||
3767: /* MUTANT (rep_op) */                    js_NewSrcNote(cx, cg, SRC_HIDDEN) == 0 ||
3767: /* MUTANT (rep_op) */                    js_NewSrcNote(cx, cg, SRC_HIDDEN) != 0 ||
3767: /* MUTANT (rep_op) */                    js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0 &&
3767: /* MUTANT (rep_const) */                    js_NewSrcNote(cx, cg, SRC_HIDDEN) < 1 ||
3767: /* MUTANT (rep_const) */                    js_NewSrcNote(cx, cg, SRC_HIDDEN) < -1 ||
3768: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_THROW) <= 0) {
3768: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_THROW) > 0) {
3768: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_THROW) >= 0) {
3768: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_THROW) == 0) {
3768: /* MUTANT (rep_op) */                    js_Emit1(cx, cg, JSOP_THROW) != 0) {
3768: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_THROW) < 1) {
3768: /* MUTANT (rep_const) */                    js_Emit1(cx, cg, JSOP_THROW) < -1) {
3769: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
3778: /* MUTANT (negate) */        if(! (pn->pn_kid3)) {
3779: /* MUTANT (negate) */            if(! (!BackPatch(cx, cg, stmtInfo.gosub, CG_NEXT(cg), JSOP_GOSUB)))
3788: /* MUTANT (del_stmt) */ /*             JS_ASSERT(cg->stackDepth == depth); */ 
3788: /* MUTANT (rep_op) */            JS_ASSERT(cg->stackDepth != depth);
3789: /* MUTANT (del_stmt) */ /*             cg->stackDepth += 2; */ 
3789: /* MUTANT (rep_op) */            cg->stackDepth -= 2;
3789: /* MUTANT (rep_op) */            cg->stackDepth *= 2;
3789: /* MUTANT (rep_op) */            cg->stackDepth %= 2;
3789: /* MUTANT (rep_const) */            cg->stackDepth += 0;
3789: /* MUTANT (rep_const) */            cg->stackDepth += 1;
3789: /* MUTANT (rep_const) */            cg->stackDepth += -1;
3789: /* MUTANT (rep_const) */            cg->stackDepth += ((2)+1);
3789: /* MUTANT (rep_const) */            cg->stackDepth += ((2)-1);
3790: /* MUTANT (rep_op) */            if ((uintN)cg->stackDepth <= cg->maxStackDepth)
3790: /* MUTANT (rep_op) */            if ((uintN)cg->stackDepth < cg->maxStackDepth)
3790: /* MUTANT (rep_op) */            if ((uintN)cg->stackDepth >= cg->maxStackDepth)
3790: /* MUTANT (rep_op) */            if ((uintN)cg->stackDepth == cg->maxStackDepth)
3790: /* MUTANT (rep_op) */            if ((uintN)cg->stackDepth != cg->maxStackDepth)
3790: /* MUTANT (negate) */            if(! ((uintN)cg->stackDepth > cg->maxStackDepth))
3794: /* MUTANT (del_stmt) */ /*             stmtInfo.type = STMT_SUBROUTINE; */ 
3795: /* MUTANT (negate) */            if(! (!UpdateLineNumberNotes(cx, cg, pn->pn_kid3)))
3797: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_FINALLY) <= 0 ||
3797: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_FINALLY) > 0 ||
3797: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_FINALLY) >= 0 ||
3797: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_FINALLY) == 0 ||
3797: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_FINALLY) != 0 ||
3797: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_FINALLY) < 0 &&
3797: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_FINALLY) < 1 ||
3797: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_FINALLY) < -1 ||
3798: /* MUTANT (rep_op) */                !js_EmitTree(cx, cg, pn->pn_kid3) &&
3799: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_RETSUB) <= 0) {
3799: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_RETSUB) > 0) {
3799: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_RETSUB) >= 0) {
3799: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_RETSUB) == 0) {
3799: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_RETSUB) != 0) {
3799: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_RETSUB) < 1) {
3799: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_RETSUB) < -1) {
3800: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
3804: /* MUTANT (rep_op) */            JS_ASSERT(cg->stackDepth != depth + 2);
3804: /* MUTANT (rep_op) */            JS_ASSERT(cg->stackDepth == depth - 2);
3804: /* MUTANT (rep_op) */            JS_ASSERT(cg->stackDepth == depth * 2);
3804: /* MUTANT (rep_op) */            JS_ASSERT(cg->stackDepth == depth % 2);
3804: /* MUTANT (rep_const) */            JS_ASSERT(cg->stackDepth == depth + 0);
3804: /* MUTANT (rep_const) */            JS_ASSERT(cg->stackDepth == depth + 1);
3804: /* MUTANT (rep_const) */            JS_ASSERT(cg->stackDepth == depth + -1);
3804: /* MUTANT (rep_const) */            JS_ASSERT(cg->stackDepth == depth + ((2)+1));
3804: /* MUTANT (rep_const) */            JS_ASSERT(cg->stackDepth == depth + ((2)-1));
3805: /* MUTANT (del_stmt) */ /*             cg->stackDepth = depth; */ 
3807: /* MUTANT (negate) */        if(! (!js_PopStatementCG(cx, cg)))
3810: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) <= 0 ||
3810: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) > 0 ||
3810: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) >= 0 ||
3810: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) == 0 ||
3810: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) != 0 ||
3810: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) < 0 &&
3810: /* MUTANT (rep_const) */        if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) < 1 ||
3810: /* MUTANT (rep_const) */        if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) < -1 ||
3811: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) <= 0) {
3811: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) > 0) {
3811: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) >= 0) {
3811: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) == 0) {
3811: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) != 0) {
3811: /* MUTANT (rep_const) */            js_Emit1(cx, cg, JSOP_NOP) < 1) {
3811: /* MUTANT (rep_const) */            js_Emit1(cx, cg, JSOP_NOP) < -1) {
3812: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3816: /* MUTANT (negate) */        if(! (!BackPatch(cx, cg, stmtInfo.catchJump, CG_NEXT(cg), JSOP_GOTO)))
3823: /* MUTANT (negate) */        if(! (pn->pn_kid2)) {
3824: /* MUTANT (del_stmt) */ /*             JS_ASSERT(end != -1 && catchStart != -1); */ 
3824: /* MUTANT (rep_op) */            JS_ASSERT(end == -1 && catchStart != -1);
3824: /* MUTANT (rep_op) */            JS_ASSERT(end != -1 || catchStart != -1);
3824: /* MUTANT (rep_op) */            JS_ASSERT(end != -1 && catchStart == -1);
3824: /* MUTANT (rep_const) */            JS_ASSERT(end != 0 && catchStart != -1);
3824: /* MUTANT (rep_const) */            JS_ASSERT(end != 1 && catchStart != -1);
3824: /* MUTANT (rep_const) */            JS_ASSERT(end != ((-1)+1) && catchStart != -1);
3824: /* MUTANT (rep_const) */            JS_ASSERT(end != ((-1)-1) && catchStart != -1);
3824: /* MUTANT (rep_const) */            JS_ASSERT(end != -1 && catchStart != 0);
3824: /* MUTANT (rep_const) */            JS_ASSERT(end != -1 && catchStart != 1);
3824: /* MUTANT (rep_const) */            JS_ASSERT(end != -1 && catchStart != ((-1)+1));
3824: /* MUTANT (rep_const) */            JS_ASSERT(end != -1 && catchStart != ((-1)-1));
3825: /* MUTANT (negate) */            if(! (!js_NewTryNote(cx, cg, start, end, catchStart)))
3834: /* MUTANT (negate) */        if(! (pn->pn_kid3)) {
3835: /* MUTANT (del_stmt) */ /*             JS_ASSERT(finallyCatch != -1); */ 
3835: /* MUTANT (rep_op) */            JS_ASSERT(finallyCatch == -1);
3835: /* MUTANT (rep_const) */            JS_ASSERT(finallyCatch != 0);
3835: /* MUTANT (rep_const) */            JS_ASSERT(finallyCatch != 1);
3835: /* MUTANT (rep_const) */            JS_ASSERT(finallyCatch != ((-1)+1));
3835: /* MUTANT (rep_const) */            JS_ASSERT(finallyCatch != ((-1)-1));
3836: /* MUTANT (negate) */            if(! (!js_NewTryNote(cx, cg, start, finallyCatch, finallyCatch)))
3845: /* MUTANT (rep_const) */        off = noteIndex = 0;
3845: /* MUTANT (rep_const) */        off = noteIndex = 1;
3845: /* MUTANT (rep_const) */        off = noteIndex = ((-1)+1);
3845: /* MUTANT (rep_const) */        off = noteIndex = ((-1)-1);
3847: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn2->pn_type == TOK_NAME); */ 
3847: /* MUTANT (rep_op) */            JS_ASSERT(pn2->pn_type != TOK_NAME);
3848: /* MUTANT (negate) */            if(! (!LookupArgOrVar(cx, &cg->treeContext, pn2)))
3850: /* MUTANT (del_stmt) */ /*             op = pn2->pn_op; */ 
3851: /* MUTANT (rep_op) */            if (op != JSOP_ARGUMENTS) {
3851: /* MUTANT (negate) */            if(! (op == JSOP_ARGUMENTS)) {
3852: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(!pn2->pn_expr); */  /* JSOP_ARGUMENTS => no initializer */
3854: /* MUTANT (rep_const) */                atomIndex = 1;            /* quell GCC overwarning */
3854: /* MUTANT (rep_const) */                atomIndex = -1;            /* quell GCC overwarning */
3857: /* MUTANT (rep_op) */                if (pn2->pn_slot <= 0) {
3857: /* MUTANT (rep_op) */                if (pn2->pn_slot < 0) {
3857: /* MUTANT (rep_op) */                if (pn2->pn_slot > 0) {
3857: /* MUTANT (rep_op) */                if (pn2->pn_slot == 0) {
3857: /* MUTANT (rep_op) */                if (pn2->pn_slot != 0) {
3857: /* MUTANT (rep_const) */                if (pn2->pn_slot >= 1) {
3857: /* MUTANT (rep_const) */                if (pn2->pn_slot >= -1) {
3857: /* MUTANT (negate) */                if(! (pn2->pn_slot >= 0)) {
3858: /* MUTANT (del_stmt) */ /*                     atomIndex = (jsatomid) pn2->pn_slot; */ 
3860: /* MUTANT (del_stmt) */ /*                     ale = js_IndexAtom(cx, pn2->pn_atom, &cg->atomList); */ 
3861: /* MUTANT (negate) */                    if(! (!ale))
3863: /* MUTANT (del_stmt) */ /*                     atomIndex = ALE_INDEX(ale); */ 
3866: /* MUTANT (rep_op) */                if ((js_CodeSpec[op].format & JOF_TYPEMASK) != JOF_CONST &&
3866: /* MUTANT (rep_op) */                if ((js_CodeSpec[op].format & JOF_TYPEMASK) == JOF_CONST ||
3867: /* MUTANT (rep_op) */                    (!(cg->treeContext.flags & TCF_IN_FUNCTION) &&
3870: /* MUTANT (del_stmt) */ /*                     CG_SWITCH_TO_PROLOG(cg); */ 
3871: /* MUTANT (negate) */                    if(! (!UpdateLineNumberNotes(cx, cg, pn2)))
3873: /* MUTANT (del_stmt) */ /*                     EMIT_ATOM_INDEX_OP(pn->pn_op, atomIndex); */ 
3874: /* MUTANT (del_stmt) */ /*                     CG_SWITCH_TO_MAIN(cg); */ 
3877: /* MUTANT (negate) */                if(! (pn2->pn_expr)) {
3878: /* MUTANT (rep_op) */                    if (op != JSOP_SETNAME)
3878: /* MUTANT (negate) */                    if(! (op == JSOP_SETNAME))
3880: /* MUTANT (del_stmt) */ /*                     pn3 = pn2->pn_expr; */ 
3881: /* MUTANT (rep_op) */                    if (pn->pn_op != JSOP_DEFCONST &&
3881: /* MUTANT (rep_op) */                    if (pn->pn_op == JSOP_DEFCONST ||
3884: /* MUTANT (del_stmt) */ /*                         return JS_FALSE; */ 
3886: /* MUTANT (negate) */                    if(! (!js_EmitTree(cx, cg, pn3)))
3904: /* MUTANT (rep_op) */            if ((pn->pn_extra & PNX_FORINVAR) || !pn2->pn_expr)
3904: /* MUTANT (negate) */            if(! ((pn->pn_extra & PNX_FORINVAR) && !pn2->pn_expr))
3907: /* MUTANT (rep_op) */            if (pn2 != pn->pn_head &&
3907: /* MUTANT (rep_op) */            if (pn2 == pn->pn_head ||
3909: /* MUTANT (rep_op) */                              (pn->pn_op != JSOP_DEFCONST)
3911: /* MUTANT (rep_op) */                              : SRC_VAR) <= 0) {
3911: /* MUTANT (rep_op) */                              : SRC_VAR) > 0) {
3911: /* MUTANT (rep_op) */                              : SRC_VAR) >= 0) {
3911: /* MUTANT (rep_op) */                              : SRC_VAR) == 0) {
3911: /* MUTANT (rep_op) */                              : SRC_VAR) != 0) {
3911: /* MUTANT (rep_const) */                              : SRC_VAR) < 1) {
3911: /* MUTANT (rep_const) */                              : SRC_VAR) < -1) {
3912: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
3914: /* MUTANT (rep_op) */            if (op != JSOP_ARGUMENTS) {
3914: /* MUTANT (negate) */            if(! (op == JSOP_ARGUMENTS)) {
3915: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) <= 0)
3915: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) > 0)
3915: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) >= 0)
3915: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) == 0)
3915: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) != 0)
3915: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, op) < 1)
3915: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, op) < -1)
3915: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, op) < 0))
3917: /* MUTANT (rep_op) */            } else if (pn2->pn_slot <= 0) {
3917: /* MUTANT (rep_op) */            } else if (pn2->pn_slot < 0) {
3917: /* MUTANT (rep_op) */            } else if (pn2->pn_slot > 0) {
3917: /* MUTANT (rep_op) */            } else if (pn2->pn_slot == 0) {
3917: /* MUTANT (rep_op) */            } else if (pn2->pn_slot != 0) {
3917: /* MUTANT (rep_const) */            } else if (pn2->pn_slot >= 1) {
3917: /* MUTANT (rep_const) */            } else if (pn2->pn_slot >= -1) {
3917: /* MUTANT (negate) */            } else if(! (pn2->pn_slot >= 0)) {
3918: /* MUTANT (del_stmt) */ /*                 EMIT_UINT16_IMM_OP(op, atomIndex); */ 
3920: /* MUTANT (del_stmt) */ /*                 EMIT_ATOM_INDEX_OP(op, atomIndex); */ 
3923: /* MUTANT (rep_op) */            if (noteIndex <= 0) {
3923: /* MUTANT (rep_op) */            if (noteIndex < 0) {
3923: /* MUTANT (rep_op) */            if (noteIndex > 0) {
3923: /* MUTANT (rep_op) */            if (noteIndex == 0) {
3923: /* MUTANT (rep_op) */            if (noteIndex != 0) {
3923: /* MUTANT (rep_const) */            if (noteIndex >= 1) {
3923: /* MUTANT (rep_const) */            if (noteIndex >= -1) {
3923: /* MUTANT (negate) */            if(! (noteIndex >= 0)) {
3924: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 1, tmp-off))
3924: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, -1, tmp-off))
3924: /* MUTANT (negate) */                if(! (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 0, tmp-off)))
3927: /* MUTANT (negate) */            if(! (!pn2->pn_next))
3929: /* MUTANT (del_stmt) */ /*             off = tmp; */ 
3930: /* MUTANT (del_stmt) */ /*             noteIndex = js_NewSrcNote2(cx, cg, SRC_PCDELTA, 0); */ 
3930: /* MUTANT (rep_const) */            noteIndex = js_NewSrcNote2(cx, cg, SRC_PCDELTA, 1);
3930: /* MUTANT (rep_const) */            noteIndex = js_NewSrcNote2(cx, cg, SRC_PCDELTA, -1);
3931: /* MUTANT (rep_op) */            if (noteIndex <= 0 ||
3931: /* MUTANT (rep_op) */            if (noteIndex > 0 ||
3931: /* MUTANT (rep_op) */            if (noteIndex >= 0 ||
3931: /* MUTANT (rep_op) */            if (noteIndex == 0 ||
3931: /* MUTANT (rep_op) */            if (noteIndex != 0 ||
3931: /* MUTANT (rep_op) */            if (noteIndex < 0 &&
3931: /* MUTANT (rep_const) */            if (noteIndex < 1 ||
3931: /* MUTANT (rep_const) */            if (noteIndex < -1 ||
3932: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_POP) <= 0) {
3932: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_POP) > 0) {
3932: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_POP) >= 0) {
3932: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_POP) == 0) {
3932: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_POP) != 0) {
3932: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_POP) < 1) {
3932: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_POP) < -1) {
3933: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
3936: /* MUTANT (negate) */        if(! (pn->pn_extra & PNX_POPVAR)) {
3937: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP) <= 0)
3937: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP) > 0)
3937: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP) >= 0)
3937: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP) == 0)
3937: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_POP) != 0)
3937: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_POP) < 1)
3937: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_POP) < -1)
3937: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_POP) < 0))
3945: /* MUTANT (negate) */        if(! (pn2)) {
3946: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2)))
3949: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_PUSH) <= 0)
3949: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_PUSH) > 0)
3949: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_PUSH) >= 0)
3949: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_PUSH) == 0)
3949: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_PUSH) != 0)
3949: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_PUSH) < 1)
3949: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_PUSH) < -1)
3949: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_PUSH) < 0))
3962: /* MUTANT (negate) */        if(! (!EmitNonLocalJumpFixup(cx, cg, NULL, &op)))
3964: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) <= 0)
3964: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) > 0)
3964: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) >= 0)
3964: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) == 0)
3964: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) != 0)
3964: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, op) < 1)
3964: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, op) < -1)
3964: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, op) < 0))
3966: /* MUTANT (del_stmt) */ /*         break; */ 
3970: /* MUTANT (rep_op) */        if (pn->pn_arity != PN_UNARY) {
3970: /* MUTANT (negate) */        if(! (pn->pn_arity == PN_UNARY)) {
3971: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn->pn_kid)))
3973: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) <= 0)
3973: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) > 0)
3973: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) >= 0)
3973: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) == 0)
3973: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) != 0)
3973: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, pn->pn_op) < 1)
3973: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, pn->pn_op) < -1)
3973: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, pn->pn_op) < 0))
3975: /* MUTANT (del_stmt) */ /*             break; */ 
3979: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_arity != PN_LIST);
3980: /* MUTANT (del_stmt) */ /*         js_PushStatement(&cg->treeContext, &stmtInfo, STMT_BLOCK, top); */ 
3982: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2)))
3986: /* MUTANT (del_stmt) */ /*         break; */ 
3990: /* MUTANT (negate) */        if(! (pn2)) {
3997: /* MUTANT (rep_op) */            useful = wantval = !cx->fp->fun &&
3998: /* MUTANT (rep_op) */                               !cx->fp->fun->interpreted &&
4000: /* MUTANT (negate) */            if(! (!useful)) {
4001: /* MUTANT (negate) */                if(! (!CheckSideEffects(cx, &cg->treeContext, pn2, &useful)))
4004: /* MUTANT (negate) */            if(! (!useful)) {
4005: /* MUTANT (del_stmt) */ /*                 CG_CURRENT_LINE(cg) = pn2->pn_pos.begin.lineno; */ 
4007: /* MUTANT (rep_op) */                                                 JSREPORT_CG &
4008: /* MUTANT (rep_op) */                                                 JSREPORT_WARNING &
4011: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
4014: /* MUTANT (negate) */                if(! (!js_EmitTree(cx, cg, pn2)))
4016: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, wantval ? JSOP_POPV : JSOP_POP) <= 0)
4016: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, wantval ? JSOP_POPV : JSOP_POP) > 0)
4016: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, wantval ? JSOP_POPV : JSOP_POP) >= 0)
4016: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, wantval ? JSOP_POPV : JSOP_POP) == 0)
4016: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, wantval ? JSOP_POPV : JSOP_POP) != 0)
4016: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, wantval ? JSOP_POPV : JSOP_POP) < 1)
4016: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, wantval ? JSOP_POPV : JSOP_POP) < -1)
4016: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, wantval ? JSOP_POPV : JSOP_POP) < 0))
4025: /* MUTANT (del_stmt) */ /*         ale = js_IndexAtom(cx, atom, &cg->atomList); */ 
4026: /* MUTANT (negate) */        if(! (!ale))
4028: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_expr; */ 
4030: /* MUTANT (rep_op) */                                   (pn2->pn_type != TOK_LC)
4033: /* MUTANT (negate) */                                   (ptrdif(!f_t) ALE_INDEX(ale)));
4034: /* MUTANT (rep_op) */        if (noteIndex <= 0 ||
4034: /* MUTANT (rep_op) */        if (noteIndex > 0 ||
4034: /* MUTANT (rep_op) */        if (noteIndex >= 0 ||
4034: /* MUTANT (rep_op) */        if (noteIndex == 0 ||
4034: /* MUTANT (rep_op) */        if (noteIndex != 0 ||
4034: /* MUTANT (rep_op) */        if (noteIndex < 0 &&
4034: /* MUTANT (rep_const) */        if (noteIndex < 1 ||
4034: /* MUTANT (rep_const) */        if (noteIndex < -1 ||
4035: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) <= 0) {
4035: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) > 0) {
4035: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) >= 0) {
4035: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) == 0) {
4035: /* MUTANT (rep_op) */            js_Emit1(cx, cg, JSOP_NOP) != 0) {
4035: /* MUTANT (rep_const) */            js_Emit1(cx, cg, JSOP_NOP) < 1) {
4035: /* MUTANT (rep_const) */            js_Emit1(cx, cg, JSOP_NOP) < -1) {
4036: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
4042: /* MUTANT (del_stmt) */ /*         stmtInfo.label = atom; */ 
4043: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn2)))
4045: /* MUTANT (negate) */        if(! (!js_PopStatementCG(cx, cg)))
4049: /* MUTANT (rep_op) */        if (pn2->pn_type != TOK_LC) {
4049: /* MUTANT (negate) */        if(! (pn2->pn_type == TOK_LC)) {
4050: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) <= 0 ||
4050: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) > 0 ||
4050: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) >= 0 ||
4050: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) == 0 ||
4050: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) != 0 ||
4050: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) < 0 &&
4050: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) < 1 ||
4050: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_ENDBRACE) < -1 ||
4051: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_NOP) <= 0) {
4051: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_NOP) > 0) {
4051: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_NOP) >= 0) {
4051: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_NOP) == 0) {
4051: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_NOP) != 0) {
4051: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_NOP) < 1) {
4051: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_NOP) < -1) {
4052: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
4063: /* MUTANT (rep_const) */        off = noteIndex = 0;
4063: /* MUTANT (rep_const) */        off = noteIndex = 1;
4063: /* MUTANT (rep_const) */        off = noteIndex = ((-1)+1);
4063: /* MUTANT (rep_const) */        off = noteIndex = ((-1)-1);
4065: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2)))
4067: /* MUTANT (del_stmt) */ /*             tmp = CG_OFFSET(cg); */ 
4068: /* MUTANT (rep_op) */            if (noteIndex <= 0) {
4068: /* MUTANT (rep_op) */            if (noteIndex < 0) {
4068: /* MUTANT (rep_op) */            if (noteIndex > 0) {
4068: /* MUTANT (rep_op) */            if (noteIndex == 0) {
4068: /* MUTANT (rep_op) */            if (noteIndex != 0) {
4068: /* MUTANT (rep_const) */            if (noteIndex >= 1) {
4068: /* MUTANT (rep_const) */            if (noteIndex >= -1) {
4068: /* MUTANT (negate) */            if(! (noteIndex >= 0)) {
4069: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 1, tmp-off))
4069: /* MUTANT (rep_const) */                if (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, -1, tmp-off))
4069: /* MUTANT (negate) */                if(! (!js_SetSrcNoteOffset(cx, cg, (uintN)noteIndex, 0, tmp-off)))
4072: /* MUTANT (negate) */            if(! (!pn2->pn_next))
4074: /* MUTANT (del_stmt) */ /*             off = tmp; */ 
4075: /* MUTANT (del_stmt) */ /*             noteIndex = js_NewSrcNote2(cx, cg, SRC_PCDELTA, 0); */ 
4075: /* MUTANT (rep_const) */            noteIndex = js_NewSrcNote2(cx, cg, SRC_PCDELTA, 1);
4075: /* MUTANT (rep_const) */            noteIndex = js_NewSrcNote2(cx, cg, SRC_PCDELTA, -1);
4076: /* MUTANT (rep_op) */            if (noteIndex <= 0 ||
4076: /* MUTANT (rep_op) */            if (noteIndex > 0 ||
4076: /* MUTANT (rep_op) */            if (noteIndex >= 0 ||
4076: /* MUTANT (rep_op) */            if (noteIndex == 0 ||
4076: /* MUTANT (rep_op) */            if (noteIndex != 0 ||
4076: /* MUTANT (rep_op) */            if (noteIndex < 0 &&
4076: /* MUTANT (rep_const) */            if (noteIndex < 1 ||
4076: /* MUTANT (rep_const) */            if (noteIndex < -1 ||
4077: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_POP) <= 0) {
4077: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_POP) > 0) {
4077: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_POP) >= 0) {
4077: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_POP) == 0) {
4077: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_POP) != 0) {
4077: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_POP) < 1) {
4077: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_POP) < -1) {
4078: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
4090: /* MUTANT (del_stmt) */ /*         JS_ASSERT(pn2->pn_type != TOK_RP); */ 
4090: /* MUTANT (rep_op) */        JS_ASSERT(pn2->pn_type == TOK_RP);
4091: /* MUTANT (del_stmt) */ /*         atomIndex = (jsatomid) -1; */  /* Suppress warning. */
4091: /* MUTANT (rep_const) */        atomIndex = (jsatomid) 0; /* Suppress warning. */
4091: /* MUTANT (rep_const) */        atomIndex = (jsatomid) 1; /* Suppress warning. */
4091: /* MUTANT (rep_const) */        atomIndex = (jsatomid) ((-1)+1); /* Suppress warning. */
4091: /* MUTANT (rep_const) */        atomIndex = (jsatomid) ((-1)-1); /* Suppress warning. */
4094: /* MUTANT (negate) */            if(! (!LookupArgOrVar(cx, &cg->treeContext, pn2)))
4096: /* MUTANT (rep_op) */            if (pn2->pn_slot <= 0) {
4096: /* MUTANT (rep_op) */            if (pn2->pn_slot < 0) {
4096: /* MUTANT (rep_op) */            if (pn2->pn_slot > 0) {
4096: /* MUTANT (rep_op) */            if (pn2->pn_slot == 0) {
4096: /* MUTANT (rep_op) */            if (pn2->pn_slot != 0) {
4096: /* MUTANT (rep_const) */            if (pn2->pn_slot >= 1) {
4096: /* MUTANT (rep_const) */            if (pn2->pn_slot >= -1) {
4096: /* MUTANT (negate) */            if(! (pn2->pn_slot >= 0)) {
4097: /* MUTANT (del_stmt) */ /*                 atomIndex = (jsatomid) pn2->pn_slot; */ 
4099: /* MUTANT (del_stmt) */ /*                 ale = js_IndexAtom(cx, pn2->pn_atom, &cg->atomList); */ 
4100: /* MUTANT (negate) */                if(! (!ale))
4102: /* MUTANT (del_stmt) */ /*                 atomIndex = ALE_INDEX(ale); */ 
4103: /* MUTANT (del_stmt) */ /*                 EMIT_ATOM_INDEX_OP(JSOP_BINDNAME, atomIndex); */ 
4107: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2->pn_expr)))
4109: /* MUTANT (del_stmt) */ /*             ale = js_IndexAtom(cx, pn2->pn_atom, &cg->atomList); */ 
4110: /* MUTANT (negate) */            if(! (!ale))
4112: /* MUTANT (del_stmt) */ /*             atomIndex = ALE_INDEX(ale); */ 
4113: /* MUTANT (del_stmt) */ /*             break; */ 
4115: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_arity != PN_BINARY);
4116: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2->pn_left)))
4118: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2->pn_right)))
4120: /* MUTANT (del_stmt) */ /*             break; */ 
4123: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2)))
4125: /* MUTANT (del_stmt) */ /*             break; */ 
4129: /* MUTANT (rep_op) */            JS_ASSERT(pn2->pn_op != JSOP_SETXMLNAME);
4130: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2->pn_kid)))
4132: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) <= 0)
4132: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) > 0)
4132: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) >= 0)
4132: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) == 0)
4132: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) != 0)
4132: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) < 1)
4132: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) < -1)
4132: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_BINDXMLNAME) < 0))
4134: /* MUTANT (del_stmt) */ /*             break; */ 
4137: /* MUTANT (rep_const) */            JS_ASSERT(1);
4137: /* MUTANT (rep_const) */            JS_ASSERT(-1);
4142: /* MUTANT (rep_op) */        if (op != JSOP_GETTER || op == JSOP_SETTER) {
4142: /* MUTANT (rep_op) */        if (op == JSOP_GETTER && op == JSOP_SETTER) {
4142: /* MUTANT (rep_op) */        if (op == JSOP_GETTER || op != JSOP_SETTER) {
4142: /* MUTANT (negate) */        if(! (op == JSOP_GETTER || op == JSOP_SETTER)) {
4147: /* MUTANT (rep_op) */        if (op == JSOP_NOP) {
4147: /* MUTANT (negate) */        if(! (op != JSOP_NOP)) {
4150: /* MUTANT (rep_op) */                if (pn2->pn_op == JSOP_SETNAME) {
4150: /* MUTANT (negate) */                if(! (pn2->pn_op != JSOP_SETNAME)) {
4151: /* MUTANT (rep_op) */                    EMIT_UINT16_IMM_OP((pn2->pn_op != JSOP_SETGVAR)
4153: /* MUTANT (rep_op) */                                       : (pn2->pn_op != JSOP_SETARG)
4157: /* MUTANT (del_stmt) */ /*                     break; */ 
4161: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_DUP) <= 0)
4161: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_DUP) > 0)
4161: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_DUP) >= 0)
4161: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_DUP) == 0)
4161: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_DUP) != 0)
4161: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_DUP) < 1)
4161: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_DUP) < -1)
4161: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, JSOP_DUP) < 0))
4163: /* MUTANT (del_stmt) */ /*                 EMIT_ATOM_INDEX_OP(JSOP_GETPROP, atomIndex); */ 
4164: /* MUTANT (del_stmt) */ /*                 break; */ 
4172: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_DUP2) <= 0)
4172: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_DUP2) > 0)
4172: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_DUP2) >= 0)
4172: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_DUP2) == 0)
4172: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_DUP2) != 0)
4172: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_DUP2) < 1)
4172: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_DUP2) < -1)
4172: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, JSOP_DUP2) < 0))
4174: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_GETELEM) <= 0)
4174: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_GETELEM) > 0)
4174: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_GETELEM) >= 0)
4174: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_GETELEM) == 0)
4174: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_GETELEM) != 0)
4174: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_GETELEM) < 1)
4174: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_GETELEM) < -1)
4174: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, JSOP_GETELEM) < 0))
4176: /* MUTANT (del_stmt) */ /*                 break; */ 
4177: /* MUTANT (del_stmt) */ /*               default:; */ 
4182: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_right)))
4186: /* MUTANT (rep_op) */        if (op == JSOP_NOP) {
4186: /* MUTANT (negate) */        if(! (op != JSOP_NOP)) {
4187: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ASSIGNOP) <= 0 ||
4187: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ASSIGNOP) > 0 ||
4187: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ASSIGNOP) >= 0 ||
4187: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ASSIGNOP) == 0 ||
4187: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ASSIGNOP) != 0 ||
4187: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_ASSIGNOP) < 0 &&
4187: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_ASSIGNOP) < 1 ||
4187: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_ASSIGNOP) < -1 ||
4188: /* MUTANT (rep_op) */                js_Emit1(cx, cg, op) <= 0) {
4188: /* MUTANT (rep_op) */                js_Emit1(cx, cg, op) > 0) {
4188: /* MUTANT (rep_op) */                js_Emit1(cx, cg, op) >= 0) {
4188: /* MUTANT (rep_op) */                js_Emit1(cx, cg, op) == 0) {
4188: /* MUTANT (rep_op) */                js_Emit1(cx, cg, op) != 0) {
4188: /* MUTANT (rep_const) */                js_Emit1(cx, cg, op) < 1) {
4188: /* MUTANT (rep_const) */                js_Emit1(cx, cg, op) < -1) {
4189: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
4194: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_NAME &&
4194: /* MUTANT (rep_op) */        if (pn2->pn_type != TOK_NAME ||
4196: /* MUTANT (rep_op) */                           CG_OFFSET(cg) - top) <= 0) {
4196: /* MUTANT (rep_op) */                           CG_OFFSET(cg) - top) > 0) {
4196: /* MUTANT (rep_op) */                           CG_OFFSET(cg) - top) >= 0) {
4196: /* MUTANT (rep_op) */                           CG_OFFSET(cg) - top) == 0) {
4196: /* MUTANT (rep_op) */                           CG_OFFSET(cg) - top) != 0) {
4196: /* MUTANT (rep_const) */                           CG_OFFSET(cg) - top) < 1) {
4196: /* MUTANT (rep_const) */                           CG_OFFSET(cg) - top) < -1) {
4197: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
4203: /* MUTANT (rep_op) */            if (pn2->pn_slot <= 0 || !(pn2->pn_attrs & JSPROP_READONLY)) {
4203: /* MUTANT (rep_op) */            if (pn2->pn_slot > 0 || !(pn2->pn_attrs & JSPROP_READONLY)) {
4203: /* MUTANT (rep_op) */            if (pn2->pn_slot >= 0 || !(pn2->pn_attrs & JSPROP_READONLY)) {
4203: /* MUTANT (rep_op) */            if (pn2->pn_slot == 0 || !(pn2->pn_attrs & JSPROP_READONLY)) {
4203: /* MUTANT (rep_op) */            if (pn2->pn_slot != 0 || !(pn2->pn_attrs & JSPROP_READONLY)) {
4203: /* MUTANT (rep_op) */            if (pn2->pn_slot < 0 && !(pn2->pn_attrs & JSPROP_READONLY)) {
4203: /* MUTANT (rep_const) */            if (pn2->pn_slot < 1 || !(pn2->pn_attrs & JSPROP_READONLY)) {
4203: /* MUTANT (rep_const) */            if (pn2->pn_slot < -1 || !(pn2->pn_attrs & JSPROP_READONLY)) {
4203: /* MUTANT (negate) */            if(! (pn2->pn_slot < 0 || !(pn2->pn_attrs & JSPROP_READONLY))) {
4204: /* MUTANT (rep_op) */                if (pn2->pn_slot <= 0) {
4204: /* MUTANT (rep_op) */                if (pn2->pn_slot < 0) {
4204: /* MUTANT (rep_op) */                if (pn2->pn_slot > 0) {
4204: /* MUTANT (rep_op) */                if (pn2->pn_slot == 0) {
4204: /* MUTANT (rep_op) */                if (pn2->pn_slot != 0) {
4204: /* MUTANT (rep_const) */                if (pn2->pn_slot >= 1) {
4204: /* MUTANT (rep_const) */                if (pn2->pn_slot >= -1) {
4204: /* MUTANT (negate) */                if(! (pn2->pn_slot >= 0)) {
4205: /* MUTANT (del_stmt) */ /*                     EMIT_UINT16_IMM_OP(pn2->pn_op, atomIndex); */ 
4216: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_SETELEM) <= 0)
4216: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_SETELEM) > 0)
4216: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_SETELEM) >= 0)
4216: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_SETELEM) == 0)
4216: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_SETELEM) != 0)
4216: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_SETELEM) < 1)
4216: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_SETELEM) < -1)
4216: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_SETELEM) < 0))
4218: /* MUTANT (del_stmt) */ /*             break; */ 
4221: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_SETXMLNAME) <= 0)
4221: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_SETXMLNAME) > 0)
4221: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_SETXMLNAME) >= 0)
4221: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_SETXMLNAME) == 0)
4221: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_SETXMLNAME) != 0)
4221: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_SETXMLNAME) < 1)
4221: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_SETXMLNAME) < -1)
4221: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_SETXMLNAME) < 0))
4223: /* MUTANT (del_stmt) */ /*             break; */ 
4231: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_kid1)))
4233: /* MUTANT (del_stmt) */ /*         noteIndex = js_NewSrcNote(cx, cg, SRC_COND); */ 
4234: /* MUTANT (rep_op) */        if (noteIndex <= 0)
4234: /* MUTANT (rep_op) */        if (noteIndex > 0)
4234: /* MUTANT (rep_op) */        if (noteIndex >= 0)
4234: /* MUTANT (rep_op) */        if (noteIndex == 0)
4234: /* MUTANT (rep_op) */        if (noteIndex != 0)
4234: /* MUTANT (rep_const) */        if (noteIndex < 1)
4234: /* MUTANT (rep_const) */        if (noteIndex < -1)
4234: /* MUTANT (negate) */        if(! (noteIndex < 0))
4236: /* MUTANT (del_stmt) */ /*         beq = EmitJump(cx, cg, JSOP_IFEQ, 0); */ 
4236: /* MUTANT (rep_const) */        beq = EmitJump(cx, cg, JSOP_IFEQ, 1);
4236: /* MUTANT (rep_const) */        beq = EmitJump(cx, cg, JSOP_IFEQ, -1);
4237: /* MUTANT (rep_op) */        if (beq <= 0 || !js_EmitTree(cx, cg, pn->pn_kid2))
4237: /* MUTANT (rep_op) */        if (beq > 0 || !js_EmitTree(cx, cg, pn->pn_kid2))
4237: /* MUTANT (rep_op) */        if (beq >= 0 || !js_EmitTree(cx, cg, pn->pn_kid2))
4237: /* MUTANT (rep_op) */        if (beq == 0 || !js_EmitTree(cx, cg, pn->pn_kid2))
4237: /* MUTANT (rep_op) */        if (beq != 0 || !js_EmitTree(cx, cg, pn->pn_kid2))
4237: /* MUTANT (rep_op) */        if (beq < 0 && !js_EmitTree(cx, cg, pn->pn_kid2))
4237: /* MUTANT (rep_const) */        if (beq < 1 || !js_EmitTree(cx, cg, pn->pn_kid2))
4237: /* MUTANT (rep_const) */        if (beq < -1 || !js_EmitTree(cx, cg, pn->pn_kid2))
4237: /* MUTANT (negate) */        if(! (beq < 0 || !js_EmitTree(cx, cg, pn->pn_kid2)))
4241: /* MUTANT (del_stmt) */ /*         jmp = EmitJump(cx, cg, JSOP_GOTO, 0); */ 
4241: /* MUTANT (rep_const) */        jmp = EmitJump(cx, cg, JSOP_GOTO, 1);
4241: /* MUTANT (rep_const) */        jmp = EmitJump(cx, cg, JSOP_GOTO, -1);
4242: /* MUTANT (rep_op) */        if (jmp <= 0)
4242: /* MUTANT (rep_op) */        if (jmp > 0)
4242: /* MUTANT (rep_op) */        if (jmp >= 0)
4242: /* MUTANT (rep_op) */        if (jmp == 0)
4242: /* MUTANT (rep_op) */        if (jmp != 0)
4242: /* MUTANT (rep_const) */        if (jmp < 1)
4242: /* MUTANT (rep_const) */        if (jmp < -1)
4242: /* MUTANT (negate) */        if(! (jmp < 0))
4244: /* MUTANT (del_stmt) */ /*         CHECK_AND_SET_JUMP_OFFSET_AT(cx, cg, beq); */ 
4245: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_kid3)))
4247: /* MUTANT (del_stmt) */ /*         CHECK_AND_SET_JUMP_OFFSET_AT(cx, cg, jmp); */ 
4248: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, noteIndex, 1, jmp - beq))
4248: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, noteIndex, -1, jmp - beq))
4248: /* MUTANT (negate) */        if(! (!js_SetSrcNoteOffset(cx, cg, noteIndex, 0, jmp - beq)))
4259: /* MUTANT (del_stmt) */ /*         JS_ASSERT(cg->stackDepth > 1); */ 
4259: /* MUTANT (rep_op) */        JS_ASSERT(cg->stackDepth <= 1);
4259: /* MUTANT (rep_op) */        JS_ASSERT(cg->stackDepth < 1);
4259: /* MUTANT (rep_op) */        JS_ASSERT(cg->stackDepth >= 1);
4259: /* MUTANT (rep_op) */        JS_ASSERT(cg->stackDepth == 1);
4259: /* MUTANT (rep_op) */        JS_ASSERT(cg->stackDepth != 1);
4259: /* MUTANT (rep_const) */        JS_ASSERT(cg->stackDepth > 0);
4259: /* MUTANT (rep_const) */        JS_ASSERT(cg->stackDepth > -1);
4259: /* MUTANT (rep_const) */        JS_ASSERT(cg->stackDepth > ((1)+1));
4260: /* MUTANT (del_stmt) */ /*         cg->stackDepth--; */ 
4260: /* MUTANT (rep_op) */        cg->stackDepth++;
4261: /* MUTANT (del_stmt) */ /*         break; */ 
4281: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_left)))
4283: /* MUTANT (del_stmt) */ /*         top = EmitJump(cx, cg, JSOP_BACKPATCH_POP, 0); */ 
4283: /* MUTANT (rep_const) */        top = EmitJump(cx, cg, JSOP_BACKPATCH_POP, 1);
4283: /* MUTANT (rep_const) */        top = EmitJump(cx, cg, JSOP_BACKPATCH_POP, -1);
4284: /* MUTANT (rep_op) */        if (top <= 0)
4284: /* MUTANT (rep_op) */        if (top > 0)
4284: /* MUTANT (rep_op) */        if (top >= 0)
4284: /* MUTANT (rep_op) */        if (top == 0)
4284: /* MUTANT (rep_op) */        if (top != 0)
4284: /* MUTANT (rep_const) */        if (top < 1)
4284: /* MUTANT (rep_const) */        if (top < -1)
4284: /* MUTANT (negate) */        if(! (top < 0))
4286: /* MUTANT (del_stmt) */ /*         jmp = top; */ 
4287: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_right; */ 
4288: /* MUTANT (rep_op) */        while (pn2->pn_type != TOK_OR || pn2->pn_type == TOK_AND) {
4288: /* MUTANT (rep_op) */        while (pn2->pn_type == TOK_OR && pn2->pn_type == TOK_AND) {
4288: /* MUTANT (rep_op) */        while (pn2->pn_type == TOK_OR || pn2->pn_type != TOK_AND) {
4288: /* MUTANT (negate) */        while(! (pn2->pn_type == TOK_OR || pn2->pn_type == TOK_AND)) {
4289: /* MUTANT (del_stmt) */ /*             pn = pn2; */ 
4290: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn->pn_left)))
4292: /* MUTANT (del_stmt) */ /*             off = EmitJump(cx, cg, JSOP_BACKPATCH_POP, 0); */ 
4292: /* MUTANT (rep_const) */            off = EmitJump(cx, cg, JSOP_BACKPATCH_POP, 1);
4292: /* MUTANT (rep_const) */            off = EmitJump(cx, cg, JSOP_BACKPATCH_POP, -1);
4293: /* MUTANT (rep_op) */            if (off <= 0)
4293: /* MUTANT (rep_op) */            if (off > 0)
4293: /* MUTANT (rep_op) */            if (off >= 0)
4293: /* MUTANT (rep_op) */            if (off == 0)
4293: /* MUTANT (rep_op) */            if (off != 0)
4293: /* MUTANT (rep_const) */            if (off < 1)
4293: /* MUTANT (rep_const) */            if (off < -1)
4293: /* MUTANT (negate) */            if(! (off < 0))
4295: /* MUTANT (negate) */            if(! (!SetBackPatchDelta(cx, cg, CG_CODE(cg, jmp), off - jmp)))
4297: /* MUTANT (del_stmt) */ /*             jmp = off; */ 
4298: /* MUTANT (del_stmt) */ /*             pn2 = pn->pn_right; */ 
4300: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn2)))
4302: /* MUTANT (del_stmt) */ /*         off = CG_OFFSET(cg); */ 
4304: /* MUTANT (del_stmt) */ /*             pc = CG_CODE(cg, top); */ 
4305: /* MUTANT (del_stmt) */ /*             tmp = GetJumpOffset(cg, pc); */ 
4306: /* MUTANT (del_stmt) */ /*             CHECK_AND_SET_JUMP_OFFSET(cx, cg, pc, off - top); */ 
4307: /* MUTANT (del_stmt) */ /*             *pc = pn3->pn_op; */ 
4308: /* MUTANT (del_stmt) */ /*             top += tmp; */ 
4308: /* MUTANT (rep_op) */            top -= tmp;
4308: /* MUTANT (rep_op) */            top *= tmp;
4308: /* MUTANT (rep_op) */            top %= tmp;
4309: /* MUTANT (del_stmt) */ /*         } while ((pn3 = pn3->pn_right) != pn2); */ 
4309: /* MUTANT (rep_op) */        } while ((pn3 = pn3->pn_right) == pn2);
4309: /* MUTANT (negate) */        } while(! ((pn3 = pn3->pn_right) != pn2));
4310: /* MUTANT (del_stmt) */ /*         break; */ 
4328: /* MUTANT (rep_op) */        if (pn->pn_arity != PN_LIST) {
4328: /* MUTANT (negate) */        if(! (pn->pn_arity == PN_LIST)) {
4330: /* MUTANT (del_stmt) */ /*             pn2 = pn->pn_head; */ 
4331: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2)))
4333: /* MUTANT (del_stmt) */ /*             op = pn->pn_op; */ 
4334: /* MUTANT (rep_op) */            while ((pn2 = pn2->pn_next) == NULL) {
4334: /* MUTANT (negate) */            while(! ((pn2 = pn2->pn_next) != NULL)) {
4335: /* MUTANT (negate) */                if(! (!js_EmitTree(cx, cg, pn2)))
4337: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) <= 0)
4337: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) > 0)
4337: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) >= 0)
4337: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) == 0)
4337: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) != 0)
4337: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, op) < 1)
4337: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, op) < -1)
4337: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, op) < 0))
4343: /* MUTANT (rep_op) */            if (pn->pn_arity != PN_NAME) {
4343: /* MUTANT (negate) */            if(! (pn->pn_arity == PN_NAME)) {
4344: /* MUTANT (negate) */                if(! (!js_EmitTree(cx, cg, pn->pn_expr)))
4346: /* MUTANT (negate) */                if(! (!EmitAtomOp(cx, pn, pn->pn_op, cg)))
4348: /* MUTANT (del_stmt) */ /*                 break; */ 
4352: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn->pn_left)))
4354: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn->pn_right)))
4356: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) <= 0)
4356: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) > 0)
4356: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) >= 0)
4356: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) == 0)
4356: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) != 0)
4356: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, pn->pn_op) < 1)
4356: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, pn->pn_op) < -1)
4356: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, pn->pn_op) < 0))
4367: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_arity != PN_UNARY);
4373: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn2)))
4375: /* MUTANT (del_stmt) */ /*         op = pn->pn_op; */ 
4377: /* MUTANT (rep_op) */        if (op != JSOP_XMLNAME &&
4377: /* MUTANT (rep_op) */        if (op == JSOP_XMLNAME ||
4379: /* MUTANT (rep_op) */                           CG_OFFSET(cg) - pn2->pn_offset) <= 0) {
4379: /* MUTANT (rep_op) */                           CG_OFFSET(cg) - pn2->pn_offset) > 0) {
4379: /* MUTANT (rep_op) */                           CG_OFFSET(cg) - pn2->pn_offset) >= 0) {
4379: /* MUTANT (rep_op) */                           CG_OFFSET(cg) - pn2->pn_offset) == 0) {
4379: /* MUTANT (rep_op) */                           CG_OFFSET(cg) - pn2->pn_offset) != 0) {
4379: /* MUTANT (rep_const) */                           CG_OFFSET(cg) - pn2->pn_offset) < 1) {
4379: /* MUTANT (rep_const) */                           CG_OFFSET(cg) - pn2->pn_offset) < -1) {
4380: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
4383: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) <= 0)
4383: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) > 0)
4383: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) >= 0)
4383: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) == 0)
4383: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, op) != 0)
4383: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, op) < 1)
4383: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, op) < -1)
4383: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, op) < 0))
4385: /* MUTANT (del_stmt) */ /*         break; */ 
4391: /* MUTANT (del_stmt) */ /*         JS_ASSERT(pn2->pn_type != TOK_RP); */ 
4391: /* MUTANT (rep_op) */        JS_ASSERT(pn2->pn_type == TOK_RP);
4392: /* MUTANT (del_stmt) */ /*         op = pn->pn_op; */ 
4401: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_NAME &&
4401: /* MUTANT (rep_op) */        if (pn2->pn_type != TOK_NAME ||
4402: /* MUTANT (rep_op) */            (js_CodeSpec[op].format & JOF_POST) ||
4403: /* MUTANT (rep_op) */            (uintN)--cg->stackDepth > cg->maxStackDepth) {
4403: /* MUTANT (rep_op) */            (uintN)++cg->stackDepth <= cg->maxStackDepth) {
4403: /* MUTANT (rep_op) */            (uintN)++cg->stackDepth < cg->maxStackDepth) {
4403: /* MUTANT (rep_op) */            (uintN)++cg->stackDepth >= cg->maxStackDepth) {
4403: /* MUTANT (rep_op) */            (uintN)++cg->stackDepth == cg->maxStackDepth) {
4403: /* MUTANT (rep_op) */            (uintN)++cg->stackDepth != cg->maxStackDepth) {
4404: /* MUTANT (del_stmt) */ /*             cg->maxStackDepth = cg->stackDepth; */ 
4410: /* MUTANT (negate) */            if(! (!LookupArgOrVar(cx, &cg->treeContext, pn2)))
4412: /* MUTANT (del_stmt) */ /*             op = pn2->pn_op; */ 
4413: /* MUTANT (rep_op) */            if (pn2->pn_slot <= 0) {
4413: /* MUTANT (rep_op) */            if (pn2->pn_slot < 0) {
4413: /* MUTANT (rep_op) */            if (pn2->pn_slot > 0) {
4413: /* MUTANT (rep_op) */            if (pn2->pn_slot == 0) {
4413: /* MUTANT (rep_op) */            if (pn2->pn_slot != 0) {
4413: /* MUTANT (rep_const) */            if (pn2->pn_slot >= 1) {
4413: /* MUTANT (rep_const) */            if (pn2->pn_slot >= -1) {
4413: /* MUTANT (negate) */            if(! (pn2->pn_slot >= 0)) {
4414: /* MUTANT (negate) */                if(! (pn2->pn_attrs & JSPROP_READONLY)) {
4416: /* MUTANT (rep_op) */                    op = ((js_CodeSpec[op].format & JOF_TYPEMASK) != JOF_CONST)
4421: /* MUTANT (del_stmt) */ /*                 EMIT_UINT16_IMM_OP(op, atomIndex); */ 
4423: /* MUTANT (negate) */                if(! (!EmitAtomOp(cx, pn2, op, cg)))
4428: /* MUTANT (negate) */            if(! (!EmitPropOp(cx, pn2, op, cg)))
4430: /* MUTANT (del_stmt) */ /*             break; */ 
4432: /* MUTANT (negate) */            if(! (!EmitElemOp(cx, pn2, op, cg)))
4434: /* MUTANT (del_stmt) */ /*             break; */ 
4437: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2)))
4440: /* MUTANT (rep_op) */                               CG_OFFSET(cg) - pn2->pn_offset) <= 0) {
4440: /* MUTANT (rep_op) */                               CG_OFFSET(cg) - pn2->pn_offset) > 0) {
4440: /* MUTANT (rep_op) */                               CG_OFFSET(cg) - pn2->pn_offset) >= 0) {
4440: /* MUTANT (rep_op) */                               CG_OFFSET(cg) - pn2->pn_offset) == 0) {
4440: /* MUTANT (rep_op) */                               CG_OFFSET(cg) - pn2->pn_offset) != 0) {
4440: /* MUTANT (rep_const) */                               CG_OFFSET(cg) - pn2->pn_offset) < 1) {
4440: /* MUTANT (rep_const) */                               CG_OFFSET(cg) - pn2->pn_offset) < -1) {
4441: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
4443: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) <= 0)
4443: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) > 0)
4443: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) >= 0)
4443: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) == 0)
4443: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) != 0)
4443: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, op) < 1)
4443: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, op) < -1)
4443: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, op) < 0))
4445: /* MUTANT (del_stmt) */ /*             break; */ 
4449: /* MUTANT (rep_op) */            JS_ASSERT(pn2->pn_op != JSOP_SETXMLNAME);
4450: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2->pn_kid)))
4452: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) <= 0)
4452: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) > 0)
4452: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) >= 0)
4452: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) == 0)
4452: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) != 0)
4452: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) < 1)
4452: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_BINDXMLNAME) < -1)
4452: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_BINDXMLNAME) < 0))
4454: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) <= 0)
4454: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) > 0)
4454: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) >= 0)
4454: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) == 0)
4454: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) != 0)
4454: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, op) < 1)
4454: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, op) < -1)
4454: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, op) < 0))
4456: /* MUTANT (del_stmt) */ /*             break; */ 
4459: /* MUTANT (rep_const) */            JS_ASSERT(1);
4459: /* MUTANT (rep_const) */            JS_ASSERT(-1);
4462: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_NAME && (js_CodeSpec[op].format & JOF_POST))
4462: /* MUTANT (rep_op) */        if (pn2->pn_type != TOK_NAME || (js_CodeSpec[op].format & JOF_POST))
4462: /* MUTANT (negate) */        if(! (pn2->pn_type != TOK_NAME && (js_CodeSpec[op].format & JOF_POST)))
4463: /* MUTANT (rep_op) */            ++cg->stackDepth;
4464: /* MUTANT (del_stmt) */ /*         break; */ 
4475: /* MUTANT (negate) */            if(! (!LookupArgOrVar(cx, &cg->treeContext, pn2)))
4477: /* MUTANT (del_stmt) */ /*             op = pn2->pn_op; */ 
4478: /* MUTANT (rep_op) */            if (op != JSOP_FALSE) {
4478: /* MUTANT (negate) */            if(! (op == JSOP_FALSE)) {
4479: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) <= 0)
4479: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) > 0)
4479: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) >= 0)
4479: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) == 0)
4479: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) != 0)
4479: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, op) < 1)
4479: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, op) < -1)
4479: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, op) < 0))
4482: /* MUTANT (negate) */                if(! (!EmitAtomOp(cx, pn2, op, cg)))
4487: /* MUTANT (negate) */            if(! (!EmitPropOp(cx, pn2, JSOP_DELPROP, cg)))
4489: /* MUTANT (del_stmt) */ /*             break; */ 
4492: /* MUTANT (negate) */            if(! (!EmitElemOp(cx, pn2, JSOP_DELDESC, cg)))
4494: /* MUTANT (del_stmt) */ /*             break; */ 
4497: /* MUTANT (negate) */            if(! (!EmitElemOp(cx, pn2, JSOP_DELELEM, cg)))
4499: /* MUTANT (del_stmt) */ /*             break; */ 
4502: /* MUTANT (negate) */            if(! (!CheckSideEffects(cx, &cg->treeContext, pn2, &useful)))
4504: /* MUTANT (negate) */            if(! (useful)) {
4505: /* MUTANT (negate) */                if(! (!js_EmitTree(cx, cg, pn2)))
4507: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_POP) <= 0)
4507: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_POP) > 0)
4507: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_POP) >= 0)
4507: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_POP) == 0)
4507: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_POP) != 0)
4507: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_POP) < 1)
4507: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_POP) < -1)
4507: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, JSOP_POP) < 0))
4510: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_TRUE) <= 0)
4510: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_TRUE) > 0)
4510: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_TRUE) >= 0)
4510: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_TRUE) == 0)
4510: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_TRUE) != 0)
4510: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_TRUE) < 1)
4510: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_TRUE) < -1)
4510: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_TRUE) < 0))
4517: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_left)))
4519: /* MUTANT (del_stmt) */ /*         jmp = js_Emit3(cx, cg, JSOP_FILTER, 0, 0); */ 
4519: /* MUTANT (rep_const) */        jmp = js_Emit3(cx, cg, JSOP_FILTER, 1, 0);
4519: /* MUTANT (rep_const) */        jmp = js_Emit3(cx, cg, JSOP_FILTER, -1, 0);
4519: /* MUTANT (rep_const) */        jmp = js_Emit3(cx, cg, JSOP_FILTER, 0, 1);
4519: /* MUTANT (rep_const) */        jmp = js_Emit3(cx, cg, JSOP_FILTER, 0, -1);
4520: /* MUTANT (rep_op) */        if (jmp <= 0)
4520: /* MUTANT (rep_op) */        if (jmp > 0)
4520: /* MUTANT (rep_op) */        if (jmp >= 0)
4520: /* MUTANT (rep_op) */        if (jmp == 0)
4520: /* MUTANT (rep_op) */        if (jmp != 0)
4520: /* MUTANT (rep_const) */        if (jmp < 1)
4520: /* MUTANT (rep_const) */        if (jmp < -1)
4520: /* MUTANT (negate) */        if(! (jmp < 0))
4522: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_right)))
4524: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDFILTER) <= 0)
4524: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDFILTER) > 0)
4524: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDFILTER) >= 0)
4524: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDFILTER) == 0)
4524: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDFILTER) != 0)
4524: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ENDFILTER) < 1)
4524: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ENDFILTER) < -1)
4524: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_ENDFILTER) < 0))
4526: /* MUTANT (del_stmt) */ /*         CHECK_AND_SET_JUMP_OFFSET_AT(cx, cg, jmp); */ 
4527: /* MUTANT (del_stmt) */ /*         break; */ 
4539: /* MUTANT (del_stmt) */ /*         break; */ 
4552: /* MUTANT (del_stmt) */ /*         break; */ 
4568: /* MUTANT (rep_op) */        if (pn2->pn_type != TOK_DOT && pn2->pn_op != JSOP_GETMETHOD) {
4568: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_DOT || pn2->pn_op != JSOP_GETMETHOD) {
4568: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_DOT && pn2->pn_op == JSOP_GETMETHOD) {
4568: /* MUTANT (negate) */        if(! (pn2->pn_type == TOK_DOT && pn2->pn_op != JSOP_GETMETHOD)) {
4569: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn2->pn_op == JSOP_GETPROP); */ 
4569: /* MUTANT (rep_op) */            JS_ASSERT(pn2->pn_op != JSOP_GETPROP);
4570: /* MUTANT (del_stmt) */ /*             pn2->pn_op = JSOP_GETMETHOD; */ 
4571: /* MUTANT (del_stmt) */ /*             pn2->pn_attrs |= JSPROP_IMPLICIT_FUNCTION_NAMESPACE; */ 
4574: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn2)))
4581: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) <= 0)
4581: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) > 0)
4581: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) >= 0)
4581: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) == 0)
4581: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) != 0)
4581: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) < 1)
4581: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) < -1)
4581: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_PUSHOBJ) < 0))
4585: /* MUTANT (del_stmt) */ /*         off = top; */ 
4593: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2)))
4596: /* MUTANT (rep_op) */        if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - off) <= 0)
4596: /* MUTANT (rep_op) */        if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - off) > 0)
4596: /* MUTANT (rep_op) */        if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - off) >= 0)
4596: /* MUTANT (rep_op) */        if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - off) == 0)
4596: /* MUTANT (rep_op) */        if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - off) != 0)
4596: /* MUTANT (rep_const) */        if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - off) < 1)
4596: /* MUTANT (rep_const) */        if (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - off) < -1)
4596: /* MUTANT (negate) */        if(! (js_NewSrcNote2(cx, cg, SRC_PCBASE, CG_OFFSET(cg) - off) < 0))
4599: /* MUTANT (del_stmt) */ /*         argc = pn->pn_count - 1; */ 
4599: /* MUTANT (rep_const) */        argc = pn->pn_count - 0;
4599: /* MUTANT (rep_const) */        argc = pn->pn_count - -1;
4599: /* MUTANT (rep_const) */        argc = pn->pn_count - ((1)+1);
4600: /* MUTANT (rep_op) */        if (js_Emit3(cx, cg, pn->pn_op, ARGC_HI(argc), ARGC_LO(argc)) <= 0)
4600: /* MUTANT (rep_op) */        if (js_Emit3(cx, cg, pn->pn_op, ARGC_HI(argc), ARGC_LO(argc)) > 0)
4600: /* MUTANT (rep_op) */        if (js_Emit3(cx, cg, pn->pn_op, ARGC_HI(argc), ARGC_LO(argc)) >= 0)
4600: /* MUTANT (rep_op) */        if (js_Emit3(cx, cg, pn->pn_op, ARGC_HI(argc), ARGC_LO(argc)) == 0)
4600: /* MUTANT (rep_op) */        if (js_Emit3(cx, cg, pn->pn_op, ARGC_HI(argc), ARGC_LO(argc)) != 0)
4600: /* MUTANT (rep_const) */        if (js_Emit3(cx, cg, pn->pn_op, ARGC_HI(argc), ARGC_LO(argc)) < 1)
4600: /* MUTANT (rep_const) */        if (js_Emit3(cx, cg, pn->pn_op, ARGC_HI(argc), ARGC_LO(argc)) < -1)
4600: /* MUTANT (negate) */        if(! (js_Emit3(cx, cg, pn->pn_op, ARGC_HI(argc), ARGC_LO(argc)) < 0))
4602: /* MUTANT (del_stmt) */ /*         break; */ 
4614: /* MUTANT (negate) */        if(! (!ale))
4616: /* MUTANT (del_stmt) */ /*         EMIT_ATOM_INDEX_OP(JSOP_NAME, ALE_INDEX(ale)); */ 
4617: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) <= 0)
4617: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) > 0)
4617: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) >= 0)
4617: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) == 0)
4617: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) != 0)
4617: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) < 1)
4617: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) < -1)
4617: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_PUSHOBJ) < 0))
4619: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) <= 0)
4619: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) > 0)
4619: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) >= 0)
4619: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) == 0)
4619: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) != 0)
4619: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) < 1)
4619: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) < -1)
4619: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_NEWINIT) < 0))
4622: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_head; */ 
4624: /* MUTANT (rep_op) */        if (pn2 || pn2->pn_type == TOK_DEFSHARP) {
4624: /* MUTANT (rep_op) */        if (pn2 && pn2->pn_type != TOK_DEFSHARP) {
4624: /* MUTANT (negate) */        if(! (pn2 && pn2->pn_type == TOK_DEFSHARP)) {
4625: /* MUTANT (del_stmt) */ /*             EMIT_UINT16_IMM_OP(JSOP_DEFSHARP, (jsatomid)pn2->pn_num); */ 
4626: /* MUTANT (del_stmt) */ /*             pn2 = pn2->pn_next; */ 
4630: /* MUTANT (rep_op) */        for (atomIndex = 0; pn2; atomIndex--, pn2 = pn2->pn_next) {
4630: /* MUTANT (rep_const) */        for (atomIndex = 1; pn2; atomIndex++, pn2 = pn2->pn_next) {
4630: /* MUTANT (rep_const) */        for (atomIndex = -1; pn2; atomIndex++, pn2 = pn2->pn_next) {
4631: /* MUTANT (negate) */            if(! (!EmitNumberOp(cx, atomIndex, cg)))
4635: /* MUTANT (rep_op) */            if (pn2->pn_type != TOK_COMMA) {
4635: /* MUTANT (negate) */            if(! (pn2->pn_type == TOK_COMMA)) {
4636: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSH) <= 0)
4636: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSH) > 0)
4636: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSH) >= 0)
4636: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSH) == 0)
4636: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_PUSH) != 0)
4636: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_PUSH) < 1)
4636: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_PUSH) < -1)
4636: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, JSOP_PUSH) < 0))
4639: /* MUTANT (negate) */                if(! (!js_EmitTree(cx, cg, pn2)))
4643: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_INITELEM) <= 0)
4643: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_INITELEM) > 0)
4643: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_INITELEM) >= 0)
4643: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_INITELEM) == 0)
4643: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_INITELEM) != 0)
4643: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_INITELEM) < 1)
4643: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_INITELEM) < -1)
4643: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_INITELEM) < 0))
4647: /* MUTANT (negate) */        if(! (pn->pn_extra & PNX_ENDCOMMA)) {
4649: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_CONTINUE) <= 0)
4649: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_CONTINUE) > 0)
4649: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_CONTINUE) >= 0)
4649: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_CONTINUE) == 0)
4649: /* MUTANT (rep_op) */            if (js_NewSrcNote(cx, cg, SRC_CONTINUE) != 0)
4649: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_CONTINUE) < 1)
4649: /* MUTANT (rep_const) */            if (js_NewSrcNote(cx, cg, SRC_CONTINUE) < -1)
4649: /* MUTANT (negate) */            if(! (js_NewSrcNote(cx, cg, SRC_CONTINUE) < 0))
4654: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) <= 0)
4654: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) > 0)
4654: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) >= 0)
4654: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) == 0)
4654: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) != 0)
4654: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) < 1)
4654: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) < -1)
4654: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_ENDINIT) < 0))
4656: /* MUTANT (del_stmt) */ /*         break; */ 
4667: /* MUTANT (negate) */        if(! (!ale))
4669: /* MUTANT (del_stmt) */ /*         EMIT_ATOM_INDEX_OP(JSOP_NAME, ALE_INDEX(ale)); */ 
4671: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) <= 0)
4671: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) > 0)
4671: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) >= 0)
4671: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) == 0)
4671: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) != 0)
4671: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) < 1)
4671: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_PUSHOBJ) < -1)
4671: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_PUSHOBJ) < 0))
4673: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) <= 0)
4673: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) > 0)
4673: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) >= 0)
4673: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) == 0)
4673: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) != 0)
4673: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) < 1)
4673: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_NEWINIT) < -1)
4673: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_NEWINIT) < 0))
4676: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_head; */ 
4678: /* MUTANT (rep_op) */        if (pn2 || pn2->pn_type == TOK_DEFSHARP) {
4678: /* MUTANT (rep_op) */        if (pn2 && pn2->pn_type != TOK_DEFSHARP) {
4678: /* MUTANT (negate) */        if(! (pn2 && pn2->pn_type == TOK_DEFSHARP)) {
4679: /* MUTANT (del_stmt) */ /*             EMIT_UINT16_IMM_OP(JSOP_DEFSHARP, (jsatomid)pn2->pn_num); */ 
4680: /* MUTANT (del_stmt) */ /*             pn2 = pn2->pn_next; */ 
4686: /* MUTANT (del_stmt) */ /*             pn3 = pn2->pn_left; */ 
4689: /* MUTANT (negate) */                if(! (!EmitNumberOp(cx, pn3->pn_dval, cg)))
4691: /* MUTANT (del_stmt) */ /*                 break; */ 
4695: /* MUTANT (negate) */                if(! (!ale))
4697: /* MUTANT (del_stmt) */ /*                 break; */ 
4699: /* MUTANT (rep_const) */                JS_ASSERT(1);
4699: /* MUTANT (rep_const) */                JS_ASSERT(-1);
4703: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2->pn_right)))
4708: /* MUTANT (rep_op) */            if (op != JSOP_GETTER || op == JSOP_SETTER) {
4708: /* MUTANT (rep_op) */            if (op == JSOP_GETTER && op == JSOP_SETTER) {
4708: /* MUTANT (rep_op) */            if (op == JSOP_GETTER || op != JSOP_SETTER) {
4708: /* MUTANT (negate) */            if(! (op == JSOP_GETTER || op == JSOP_SETTER)) {
4709: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) <= 0)
4709: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) > 0)
4709: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) >= 0)
4709: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) == 0)
4709: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, op) != 0)
4709: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, op) < 1)
4709: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, op) < -1)
4709: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, op) < 0))
4714: /* MUTANT (rep_op) */            if (pn3->pn_type != TOK_NUMBER) {
4714: /* MUTANT (negate) */            if(! (pn3->pn_type == TOK_NUMBER)) {
4715: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_LABEL, 0) <= 0)
4715: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_LABEL, 0) > 0)
4715: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_LABEL, 0) >= 0)
4715: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_LABEL, 0) == 0)
4715: /* MUTANT (rep_op) */                if (js_NewSrcNote2(cx, cg, SRC_LABEL, 0) != 0)
4715: /* MUTANT (rep_const) */                if (js_NewSrcNote2(cx, cg, SRC_LABEL, 1) < 0)
4715: /* MUTANT (rep_const) */                if (js_NewSrcNote2(cx, cg, SRC_LABEL, -1) < 0)
4715: /* MUTANT (rep_const) */                if (js_NewSrcNote2(cx, cg, SRC_LABEL, 0) < 1)
4715: /* MUTANT (rep_const) */                if (js_NewSrcNote2(cx, cg, SRC_LABEL, 0) < -1)
4715: /* MUTANT (negate) */                if(! (js_NewSrcNote2(cx, cg, SRC_LABEL, 0) < 0))
4717: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_INITELEM) <= 0)
4717: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_INITELEM) > 0)
4717: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_INITELEM) >= 0)
4717: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_INITELEM) == 0)
4717: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_INITELEM) != 0)
4717: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_INITELEM) < 1)
4717: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_INITELEM) < -1)
4717: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, JSOP_INITELEM) < 0))
4720: /* MUTANT (del_stmt) */ /*                 EMIT_ATOM_INDEX_OP(JSOP_INITPROP, ALE_INDEX(ale)); */ 
4725: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) <= 0)
4725: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) > 0)
4725: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) >= 0)
4725: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) == 0)
4725: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) != 0)
4725: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) < 1)
4725: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ENDINIT) < -1)
4725: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_ENDINIT) < 0))
4727: /* MUTANT (del_stmt) */ /*         break; */ 
4731: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_kid)))
4733: /* MUTANT (del_stmt) */ /*         EMIT_UINT16_IMM_OP(JSOP_DEFSHARP, (jsatomid) pn->pn_num); */ 
4734: /* MUTANT (del_stmt) */ /*         break; */ 
4738: /* MUTANT (del_stmt) */ /*         break; */ 
4748: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn->pn_kid)))
4750: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_GROUP) <= 0)
4750: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_GROUP) > 0)
4750: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_GROUP) >= 0)
4750: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_GROUP) == 0)
4750: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_GROUP) != 0)
4750: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_GROUP) < 1)
4750: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_GROUP) < -1)
4750: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_GROUP) < 0))
4752: /* MUTANT (del_stmt) */ /*         break; */ 
4755: /* MUTANT (negate) */        if(! (!LookupArgOrVar(cx, &cg->treeContext, pn)))
4757: /* MUTANT (del_stmt) */ /*         op = pn->pn_op; */ 
4758: /* MUTANT (rep_op) */        if (op != JSOP_ARGUMENTS) {
4758: /* MUTANT (negate) */        if(! (op == JSOP_ARGUMENTS)) {
4759: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) <= 0)
4759: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) > 0)
4759: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) >= 0)
4759: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) == 0)
4759: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, op) != 0)
4759: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, op) < 1)
4759: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, op) < -1)
4759: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, op) < 0))
4761: /* MUTANT (del_stmt) */ /*             break; */ 
4763: /* MUTANT (rep_op) */        if (pn->pn_slot <= 0) {
4763: /* MUTANT (rep_op) */        if (pn->pn_slot < 0) {
4763: /* MUTANT (rep_op) */        if (pn->pn_slot > 0) {
4763: /* MUTANT (rep_op) */        if (pn->pn_slot == 0) {
4763: /* MUTANT (rep_op) */        if (pn->pn_slot != 0) {
4763: /* MUTANT (rep_const) */        if (pn->pn_slot >= 1) {
4763: /* MUTANT (rep_const) */        if (pn->pn_slot >= -1) {
4763: /* MUTANT (negate) */        if(! (pn->pn_slot >= 0)) {
4764: /* MUTANT (del_stmt) */ /*             atomIndex = (jsatomid) pn->pn_slot; */ 
4765: /* MUTANT (del_stmt) */ /*             EMIT_UINT16_IMM_OP(op, atomIndex); */ 
4766: /* MUTANT (del_stmt) */ /*             break; */ 
4791: /* MUTANT (del_stmt) */ /*         break; */ 
4795: /* MUTANT (del_stmt) */ /*         break; */ 
4801: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, pn->pn_op) <= 0)
4801: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, pn->pn_op) > 0)
4801: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, pn->pn_op) >= 0)
4801: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, pn->pn_op) == 0)
4801: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, pn->pn_op) != 0)
4801: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, pn->pn_op) < 1)
4801: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, pn->pn_op) < -1)
4801: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, pn->pn_op) < 0))
4803: /* MUTANT (del_stmt) */ /*         break; */ 
4807: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_DEBUGGER) <= 0)
4807: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_DEBUGGER) > 0)
4807: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_DEBUGGER) >= 0)
4807: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_DEBUGGER) == 0)
4807: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_DEBUGGER) != 0)
4807: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_DEBUGGER) < 1)
4807: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_DEBUGGER) < -1)
4807: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_DEBUGGER) < 0))
4809: /* MUTANT (del_stmt) */ /*         break; */ 
4815: /* MUTANT (rep_op) */        if (pn->pn_op != JSOP_XMLOBJECT) {
4815: /* MUTANT (negate) */        if(! (pn->pn_op == JSOP_XMLOBJECT)) {
4816: /* MUTANT (del_stmt) */ /*             ok = EmitAtomOp(cx, pn, pn->pn_op, cg); */ 
4817: /* MUTANT (del_stmt) */ /*             break; */ 
4820: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_type != TOK_XMLLIST || pn->pn_count != 0);
4820: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_type == TOK_XMLLIST && pn->pn_count != 0);
4820: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_type == TOK_XMLLIST || pn->pn_count == 0);
4820: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_type == TOK_XMLLIST || pn->pn_count != 1);
4820: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_type == TOK_XMLLIST || pn->pn_count != -1);
4823: /* MUTANT (rep_const) */            JS_ASSERT(1);
4823: /* MUTANT (rep_const) */            JS_ASSERT(-1);
4829: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_STARTXML) <= 0)
4829: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_STARTXML) > 0)
4829: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_STARTXML) >= 0)
4829: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_STARTXML) == 0)
4829: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, JSOP_STARTXML) != 0)
4829: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_STARTXML) < 1)
4829: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, JSOP_STARTXML) < -1)
4829: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, JSOP_STARTXML) < 0))
4834: /* MUTANT (rep_op) */            if (pn2->pn_type != TOK_LC &&
4834: /* MUTANT (rep_op) */            if (pn2->pn_type == TOK_LC ||
4835: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) <= 0) {
4835: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) > 0) {
4835: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) >= 0) {
4835: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) == 0) {
4835: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) != 0) {
4835: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) < 1) {
4835: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) < -1) {
4836: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
4838: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2)))
4840: /* MUTANT (rep_op) */            if (pn2 == pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) < 0)
4840: /* MUTANT (rep_op) */            if (pn2 != pn->pn_head || js_Emit1(cx, cg, JSOP_ADD) < 0)
4840: /* MUTANT (rep_op) */            if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) <= 0)
4840: /* MUTANT (rep_op) */            if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) > 0)
4840: /* MUTANT (rep_op) */            if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) >= 0)
4840: /* MUTANT (rep_op) */            if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) == 0)
4840: /* MUTANT (rep_op) */            if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) != 0)
4840: /* MUTANT (rep_const) */            if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) < 1)
4840: /* MUTANT (rep_const) */            if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) < -1)
4840: /* MUTANT (negate) */            if(! (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) < 0))
4844: /* MUTANT (negate) */        if(! (pn->pn_extra & PNX_XMLROOT)) {
4845: /* MUTANT (rep_op) */            if (pn->pn_count != 0) {
4845: /* MUTANT (rep_const) */            if (pn->pn_count == 1) {
4845: /* MUTANT (rep_const) */            if (pn->pn_count == -1) {
4845: /* MUTANT (negate) */            if(! (pn->pn_count == 0)) {
4846: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(pn->pn_type == TOK_XMLLIST); */ 
4846: /* MUTANT (rep_op) */                JS_ASSERT(pn->pn_type != TOK_XMLLIST);
4847: /* MUTANT (del_stmt) */ /*                 atom = cx->runtime->atomState.emptyAtom; */ 
4848: /* MUTANT (del_stmt) */ /*                 ale = js_IndexAtom(cx, atom, &cg->atomList); */ 
4849: /* MUTANT (negate) */                if(! (!ale))
4851: /* MUTANT (del_stmt) */ /*                 EMIT_ATOM_INDEX_OP(JSOP_STRING, ALE_INDEX(ale)); */ 
4853: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) <= 0)
4853: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) > 0)
4853: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) >= 0)
4853: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) == 0)
4853: /* MUTANT (rep_op) */            if (js_Emit1(cx, cg, pn->pn_op) != 0)
4853: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, pn->pn_op) < 1)
4853: /* MUTANT (rep_const) */            if (js_Emit1(cx, cg, pn->pn_op) < -1)
4853: /* MUTANT (negate) */            if(! (js_Emit1(cx, cg, pn->pn_op) < 0))
4858: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count == 0);
4858: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count != 1);
4858: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count != -1);
4863: /* MUTANT (rep_op) */        if (pn->pn_op != JSOP_XMLOBJECT) {
4863: /* MUTANT (negate) */        if(! (pn->pn_op == JSOP_XMLOBJECT)) {
4864: /* MUTANT (del_stmt) */ /*             ok = EmitAtomOp(cx, pn, pn->pn_op, cg); */ 
4865: /* MUTANT (del_stmt) */ /*             break; */ 
4872: /* MUTANT (del_stmt) */ /*         uint32 i; */ 
4874: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_STARTXML) <= 0)
4874: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_STARTXML) > 0)
4874: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_STARTXML) >= 0)
4874: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_STARTXML) == 0)
4874: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_STARTXML) != 0)
4874: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_STARTXML) < 1)
4874: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_STARTXML) < -1)
4874: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_STARTXML) < 0))
4878: /* MUTANT (rep_op) */                           (pn->pn_type != TOK_XMLETAGO)
4882: /* MUTANT (negate) */        if(! (!ale))
4884: /* MUTANT (del_stmt) */ /*         EMIT_ATOM_INDEX_OP(JSOP_STRING, ALE_INDEX(ale)); */ 
4886: /* MUTANT (del_stmt) */ /*         JS_ASSERT(pn->pn_count != 0); */ 
4886: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count == 0);
4886: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_count != 1);
4886: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_count != -1);
4887: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_head; */ 
4888: /* MUTANT (rep_op) */        if (pn2->pn_type != TOK_LC && js_Emit1(cx, cg, JSOP_STARTXMLEXPR) < 0)
4888: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_LC || js_Emit1(cx, cg, JSOP_STARTXMLEXPR) < 0)
4888: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_LC && js_Emit1(cx, cg, JSOP_STARTXMLEXPR) <= 0)
4888: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_LC && js_Emit1(cx, cg, JSOP_STARTXMLEXPR) > 0)
4888: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_LC && js_Emit1(cx, cg, JSOP_STARTXMLEXPR) >= 0)
4888: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_LC && js_Emit1(cx, cg, JSOP_STARTXMLEXPR) == 0)
4888: /* MUTANT (rep_op) */        if (pn2->pn_type == TOK_LC && js_Emit1(cx, cg, JSOP_STARTXMLEXPR) != 0)
4888: /* MUTANT (rep_const) */        if (pn2->pn_type == TOK_LC && js_Emit1(cx, cg, JSOP_STARTXMLEXPR) < 1)
4888: /* MUTANT (rep_const) */        if (pn2->pn_type == TOK_LC && js_Emit1(cx, cg, JSOP_STARTXMLEXPR) < -1)
4888: /* MUTANT (negate) */        if(! (pn2->pn_type == TOK_LC && js_Emit1(cx, cg, JSOP_STARTXMLEXPR) < 0))
4890: /* MUTANT (negate) */        if(! (!js_EmitTree(cx, cg, pn2)))
4892: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ADD) <= 0)
4892: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ADD) > 0)
4892: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ADD) >= 0)
4892: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ADD) == 0)
4892: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ADD) != 0)
4892: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ADD) < 1)
4892: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ADD) < -1)
4892: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_ADD) < 0))
4895: /* MUTANT (rep_op) */        for (pn2 = pn2->pn_next, i = 0; pn2; pn2 = pn2->pn_next, i--) {
4895: /* MUTANT (rep_const) */        for (pn2 = pn2->pn_next, i = 1; pn2; pn2 = pn2->pn_next, i++) {
4895: /* MUTANT (rep_const) */        for (pn2 = pn2->pn_next, i = -1; pn2; pn2 = pn2->pn_next, i++) {
4896: /* MUTANT (rep_op) */            if (pn2->pn_type != TOK_LC &&
4896: /* MUTANT (rep_op) */            if (pn2->pn_type == TOK_LC ||
4897: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) <= 0) {
4897: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) > 0) {
4897: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) >= 0) {
4897: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) == 0) {
4897: /* MUTANT (rep_op) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) != 0) {
4897: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) < 1) {
4897: /* MUTANT (rep_const) */                js_Emit1(cx, cg, JSOP_STARTXMLEXPR) < -1) {
4898: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
4900: /* MUTANT (negate) */            if(! (!js_EmitTree(cx, cg, pn2)))
4902: /* MUTANT (rep_op) */            if ((i & 1) || pn2->pn_type == TOK_LC) {
4902: /* MUTANT (rep_op) */            if ((i & 1) && pn2->pn_type != TOK_LC) {
4902: /* MUTANT (rep_const) */            if ((i & 0) && pn2->pn_type == TOK_LC) {
4902: /* MUTANT (rep_const) */            if ((i & -1) && pn2->pn_type == TOK_LC) {
4902: /* MUTANT (rep_const) */            if ((i & ((1)+1)) && pn2->pn_type == TOK_LC) {
4902: /* MUTANT (negate) */            if(! ((i & 1) && pn2->pn_type == TOK_LC)) {
4903: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_TOATTRVAL) <= 0)
4903: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_TOATTRVAL) > 0)
4903: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_TOATTRVAL) >= 0)
4903: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_TOATTRVAL) == 0)
4903: /* MUTANT (rep_op) */                if (js_Emit1(cx, cg, JSOP_TOATTRVAL) != 0)
4903: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_TOATTRVAL) < 1)
4903: /* MUTANT (rep_const) */                if (js_Emit1(cx, cg, JSOP_TOATTRVAL) < -1)
4903: /* MUTANT (negate) */                if(! (js_Emit1(cx, cg, JSOP_TOATTRVAL) < 0))
4907: /* MUTANT (rep_op) */                         (i & 1) ? JSOP_ADDATTRVAL : JSOP_ADDATTRNAME) <= 0) {
4907: /* MUTANT (rep_op) */                         (i & 1) ? JSOP_ADDATTRVAL : JSOP_ADDATTRNAME) > 0) {
4907: /* MUTANT (rep_op) */                         (i & 1) ? JSOP_ADDATTRVAL : JSOP_ADDATTRNAME) >= 0) {
4907: /* MUTANT (rep_op) */                         (i & 1) ? JSOP_ADDATTRVAL : JSOP_ADDATTRNAME) == 0) {
4907: /* MUTANT (rep_op) */                         (i & 1) ? JSOP_ADDATTRVAL : JSOP_ADDATTRNAME) != 0) {
4907: /* MUTANT (rep_const) */                         (i & 0) ? JSOP_ADDATTRVAL : JSOP_ADDATTRNAME) < 0) {
4907: /* MUTANT (rep_const) */                         (i & -1) ? JSOP_ADDATTRVAL : JSOP_ADDATTRNAME) < 0) {
4907: /* MUTANT (rep_const) */                         (i & ((1)+1)) ? JSOP_ADDATTRVAL : JSOP_ADDATTRNAME) < 0) {
4907: /* MUTANT (rep_const) */                         (i & 1) ? JSOP_ADDATTRVAL : JSOP_ADDATTRNAME) < 1) {
4907: /* MUTANT (rep_const) */                         (i & 1) ? JSOP_ADDATTRVAL : JSOP_ADDATTRNAME) < -1) {
4908: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
4913: /* MUTANT (rep_op) */                           (pn->pn_type != TOK_XMLPTAGC)
4917: /* MUTANT (negate) */        if(! (!ale))
4919: /* MUTANT (del_stmt) */ /*         EMIT_ATOM_INDEX_OP(JSOP_STRING, ALE_INDEX(ale)); */ 
4920: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ADD) <= 0)
4920: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ADD) > 0)
4920: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ADD) >= 0)
4920: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ADD) == 0)
4920: /* MUTANT (rep_op) */        if (js_Emit1(cx, cg, JSOP_ADD) != 0)
4920: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ADD) < 1)
4920: /* MUTANT (rep_const) */        if (js_Emit1(cx, cg, JSOP_ADD) < -1)
4920: /* MUTANT (negate) */        if(! (js_Emit1(cx, cg, JSOP_ADD) < 0))
4923: /* MUTANT (rep_op) */        if ((pn->pn_extra & PNX_XMLROOT) || js_Emit1(cx, cg, pn->pn_op) < 0)
4923: /* MUTANT (rep_op) */        if ((pn->pn_extra & PNX_XMLROOT) && js_Emit1(cx, cg, pn->pn_op) <= 0)
4923: /* MUTANT (rep_op) */        if ((pn->pn_extra & PNX_XMLROOT) && js_Emit1(cx, cg, pn->pn_op) > 0)
4923: /* MUTANT (rep_op) */        if ((pn->pn_extra & PNX_XMLROOT) && js_Emit1(cx, cg, pn->pn_op) >= 0)
4923: /* MUTANT (rep_op) */        if ((pn->pn_extra & PNX_XMLROOT) && js_Emit1(cx, cg, pn->pn_op) == 0)
4923: /* MUTANT (rep_op) */        if ((pn->pn_extra & PNX_XMLROOT) && js_Emit1(cx, cg, pn->pn_op) != 0)
4923: /* MUTANT (rep_const) */        if ((pn->pn_extra & PNX_XMLROOT) && js_Emit1(cx, cg, pn->pn_op) < 1)
4923: /* MUTANT (rep_const) */        if ((pn->pn_extra & PNX_XMLROOT) && js_Emit1(cx, cg, pn->pn_op) < -1)
4923: /* MUTANT (negate) */        if(! ((pn->pn_extra & PNX_XMLROOT) && js_Emit1(cx, cg, pn->pn_op) < 0))
4925: /* MUTANT (del_stmt) */ /*         break; */ 
4929: /* MUTANT (rep_op) */        if (pn->pn_arity != PN_LIST) {
4929: /* MUTANT (negate) */        if(! (pn->pn_arity == PN_LIST)) {
4930: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn->pn_count != 0); */ 
4930: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count == 0);
4930: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count != 1);
4930: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count != -1);
4932: /* MUTANT (negate) */                if(! (!js_EmitTree(cx, cg, pn2)))
4934: /* MUTANT (rep_op) */                if (pn2 == pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) < 0)
4934: /* MUTANT (rep_op) */                if (pn2 != pn->pn_head || js_Emit1(cx, cg, JSOP_ADD) < 0)
4934: /* MUTANT (rep_op) */                if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) <= 0)
4934: /* MUTANT (rep_op) */                if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) > 0)
4934: /* MUTANT (rep_op) */                if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) >= 0)
4934: /* MUTANT (rep_op) */                if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) == 0)
4934: /* MUTANT (rep_op) */                if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) != 0)
4934: /* MUTANT (rep_const) */                if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) < 1)
4934: /* MUTANT (rep_const) */                if (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) < -1)
4934: /* MUTANT (negate) */                if(! (pn2 != pn->pn_head && js_Emit1(cx, cg, JSOP_ADD) < 0))
4938: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn->pn_arity == PN_NULLARY); */ 
4938: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_arity != PN_NULLARY);
4939: /* MUTANT (del_stmt) */ /*             ok = EmitAtomOp(cx, pn, pn->pn_op, cg); */ 
4945: /* MUTANT (negate) */        if(! (!ale))
4947: /* MUTANT (negate) */        if(! (!EmitAtomIndexOp(cx, JSOP_STRING, ALE_INDEX(ale), cg)))
4949: /* MUTANT (negate) */        if(! (!EmitAtomOp(cx, pn, JSOP_XMLPI, cg)))
4951: /* MUTANT (del_stmt) */ /*         break; */ 
4955: /* MUTANT (rep_const) */        JS_ASSERT(1);
4955: /* MUTANT (rep_const) */        JS_ASSERT(-1);
4958: /* MUTANT (rep_op) */    if (ok || --cg->emitLevel == 0 && cg->spanDeps)
4958: /* MUTANT (rep_op) */    if (ok && ++cg->emitLevel == 0 && cg->spanDeps)
4958: /* MUTANT (rep_op) */    if (ok && --cg->emitLevel != 0 && cg->spanDeps)
4958: /* MUTANT (rep_op) */    if (ok && --cg->emitLevel == 0 || cg->spanDeps)
4958: /* MUTANT (rep_const) */    if (ok && --cg->emitLevel == 1 && cg->spanDeps)
4958: /* MUTANT (rep_const) */    if (ok && --cg->emitLevel == -1 && cg->spanDeps)
4958: /* MUTANT (negate) */    if(! (ok && --cg->emitLevel == 0 && cg->spanDeps))
4961: /* MUTANT (del_stmt) */ /*     return ok; */ 
4965: /* MUTANT (rep_const) */    {"null",            1,      0,      0},
4965: /* MUTANT (rep_const) */    {"null",            -1,      0,      0},
4965: /* MUTANT (rep_const) */    {"null",            0,      1,      0},
4965: /* MUTANT (rep_const) */    {"null",            0,      -1,      0},
4965: /* MUTANT (rep_const) */    {"null",            0,      0,      1},
4965: /* MUTANT (rep_const) */    {"null",            0,      0,      -1},
4966: /* MUTANT (rep_const) */    {"if",              1,      0,      0},
4966: /* MUTANT (rep_const) */    {"if",              -1,      0,      0},
4966: /* MUTANT (rep_const) */    {"if",              0,      1,      0},
4966: /* MUTANT (rep_const) */    {"if",              0,      -1,      0},
4966: /* MUTANT (rep_const) */    {"if",              0,      0,      1},
4966: /* MUTANT (rep_const) */    {"if",              0,      0,      -1},
4967: /* MUTANT (rep_const) */    {"if-else",         0,      0,      1},
4967: /* MUTANT (rep_const) */    {"if-else",         -1,      0,      1},
4967: /* MUTANT (rep_const) */    {"if-else",         ((1)+1),      0,      1},
4967: /* MUTANT (rep_const) */    {"if-else",         1,      1,      1},
4967: /* MUTANT (rep_const) */    {"if-else",         1,      -1,      1},
4967: /* MUTANT (rep_const) */    {"if-else",         1,      0,      0},
4967: /* MUTANT (rep_const) */    {"if-else",         1,      0,      -1},
4967: /* MUTANT (rep_const) */    {"if-else",         1,      0,      ((1)+1)},
4968: /* MUTANT (rep_const) */    {"while",           0,      0,      1},
4968: /* MUTANT (rep_const) */    {"while",           -1,      0,      1},
4968: /* MUTANT (rep_const) */    {"while",           ((1)+1),      0,      1},
4968: /* MUTANT (rep_const) */    {"while",           1,      1,      1},
4968: /* MUTANT (rep_const) */    {"while",           1,      -1,      1},
4968: /* MUTANT (rep_const) */    {"while",           1,      0,      0},
4968: /* MUTANT (rep_const) */    {"while",           1,      0,      -1},
4968: /* MUTANT (rep_const) */    {"while",           1,      0,      ((1)+1)},
4969: /* MUTANT (rep_const) */    {"for",             0,      1,      1},
4969: /* MUTANT (rep_const) */    {"for",             1,      1,      1},
4969: /* MUTANT (rep_const) */    {"for",             -1,      1,      1},
4969: /* MUTANT (rep_const) */    {"for",             ((3)+1),      1,      1},
4969: /* MUTANT (rep_const) */    {"for",             ((3)-1),      1,      1},
4969: /* MUTANT (rep_const) */    {"for",             3,      0,      1},
4969: /* MUTANT (rep_const) */    {"for",             3,      -1,      1},
4969: /* MUTANT (rep_const) */    {"for",             3,      ((1)+1),      1},
4969: /* MUTANT (rep_const) */    {"for",             3,      1,      0},
4969: /* MUTANT (rep_const) */    {"for",             3,      1,      -1},
4969: /* MUTANT (rep_const) */    {"for",             3,      1,      ((1)+1)},
4970: /* MUTANT (rep_const) */    {"continue",        1,      0,      0},
4970: /* MUTANT (rep_const) */    {"continue",        -1,      0,      0},
4970: /* MUTANT (rep_const) */    {"continue",        0,      1,      0},
4970: /* MUTANT (rep_const) */    {"continue",        0,      -1,      0},
4970: /* MUTANT (rep_const) */    {"continue",        0,      0,      1},
4970: /* MUTANT (rep_const) */    {"continue",        0,      0,      -1},
4971: /* MUTANT (rep_const) */    {"var",             1,      0,      0},
4971: /* MUTANT (rep_const) */    {"var",             -1,      0,      0},
4971: /* MUTANT (rep_const) */    {"var",             0,      1,      0},
4971: /* MUTANT (rep_const) */    {"var",             0,      -1,      0},
4971: /* MUTANT (rep_const) */    {"var",             0,      0,      1},
4971: /* MUTANT (rep_const) */    {"var",             0,      0,      -1},
4972: /* MUTANT (rep_const) */    {"pcdelta",         0,      0,      1},
4972: /* MUTANT (rep_const) */    {"pcdelta",         -1,      0,      1},
4972: /* MUTANT (rep_const) */    {"pcdelta",         ((1)+1),      0,      1},
4972: /* MUTANT (rep_const) */    {"pcdelta",         1,      1,      1},
4972: /* MUTANT (rep_const) */    {"pcdelta",         1,      -1,      1},
4972: /* MUTANT (rep_const) */    {"pcdelta",         1,      0,      0},
4972: /* MUTANT (rep_const) */    {"pcdelta",         1,      0,      -1},
4972: /* MUTANT (rep_const) */    {"pcdelta",         1,      0,      ((1)+1)},
4973: /* MUTANT (rep_const) */    {"assignop",        1,      0,      0},
4973: /* MUTANT (rep_const) */    {"assignop",        -1,      0,      0},
4973: /* MUTANT (rep_const) */    {"assignop",        0,      1,      0},
4973: /* MUTANT (rep_const) */    {"assignop",        0,      -1,      0},
4973: /* MUTANT (rep_const) */    {"assignop",        0,      0,      1},
4973: /* MUTANT (rep_const) */    {"assignop",        0,      0,      -1},
4974: /* MUTANT (rep_const) */    {"cond",            0,      0,      1},
4974: /* MUTANT (rep_const) */    {"cond",            -1,      0,      1},
4974: /* MUTANT (rep_const) */    {"cond",            ((1)+1),      0,      1},
4974: /* MUTANT (rep_const) */    {"cond",            1,      1,      1},
4974: /* MUTANT (rep_const) */    {"cond",            1,      -1,      1},
4974: /* MUTANT (rep_const) */    {"cond",            1,      0,      0},
4974: /* MUTANT (rep_const) */    {"cond",            1,      0,      -1},
4974: /* MUTANT (rep_const) */    {"cond",            1,      0,      ((1)+1)},
4975: /* MUTANT (rep_const) */    {"reserved0",       1,      0,      0},
4975: /* MUTANT (rep_const) */    {"reserved0",       -1,      0,      0},
4975: /* MUTANT (rep_const) */    {"reserved0",       0,      1,      0},
4975: /* MUTANT (rep_const) */    {"reserved0",       0,      -1,      0},
4975: /* MUTANT (rep_const) */    {"reserved0",       0,      0,      1},
4975: /* MUTANT (rep_const) */    {"reserved0",       0,      0,      -1},
4976: /* MUTANT (rep_const) */    {"hidden",          1,      0,      0},
4976: /* MUTANT (rep_const) */    {"hidden",          -1,      0,      0},
4976: /* MUTANT (rep_const) */    {"hidden",          0,      1,      0},
4976: /* MUTANT (rep_const) */    {"hidden",          0,      -1,      0},
4976: /* MUTANT (rep_const) */    {"hidden",          0,      0,      1},
4976: /* MUTANT (rep_const) */    {"hidden",          0,      0,      -1},
4977: /* MUTANT (rep_const) */    {"pcbase",          0,      0,     -1},
4977: /* MUTANT (rep_const) */    {"pcbase",          -1,      0,     -1},
4977: /* MUTANT (rep_const) */    {"pcbase",          ((1)+1),      0,     -1},
4977: /* MUTANT (rep_const) */    {"pcbase",          1,      1,     -1},
4977: /* MUTANT (rep_const) */    {"pcbase",          1,      -1,     -1},
4977: /* MUTANT (rep_const) */    {"pcbase",          1,      0,     0},
4977: /* MUTANT (rep_const) */    {"pcbase",          1,      0,     1},
4977: /* MUTANT (rep_const) */    {"pcbase",          1,      0,     ((-1)+1)},
4977: /* MUTANT (rep_const) */    {"pcbase",          1,      0,     ((-1)-1)},
4978: /* MUTANT (rep_const) */    {"label",           0,      0,      0},
4978: /* MUTANT (rep_const) */    {"label",           -1,      0,      0},
4978: /* MUTANT (rep_const) */    {"label",           ((1)+1),      0,      0},
4978: /* MUTANT (rep_const) */    {"label",           1,      1,      0},
4978: /* MUTANT (rep_const) */    {"label",           1,      -1,      0},
4978: /* MUTANT (rep_const) */    {"label",           1,      0,      1},
4978: /* MUTANT (rep_const) */    {"label",           1,      0,      -1},
4979: /* MUTANT (rep_const) */    {"labelbrace",      0,      0,      0},
4979: /* MUTANT (rep_const) */    {"labelbrace",      -1,      0,      0},
4979: /* MUTANT (rep_const) */    {"labelbrace",      ((1)+1),      0,      0},
4979: /* MUTANT (rep_const) */    {"labelbrace",      1,      1,      0},
4979: /* MUTANT (rep_const) */    {"labelbrace",      1,      -1,      0},
4979: /* MUTANT (rep_const) */    {"labelbrace",      1,      0,      1},
4979: /* MUTANT (rep_const) */    {"labelbrace",      1,      0,      -1},
4980: /* MUTANT (rep_const) */    {"endbrace",        1,      0,      0},
4980: /* MUTANT (rep_const) */    {"endbrace",        -1,      0,      0},
4980: /* MUTANT (rep_const) */    {"endbrace",        0,      1,      0},
4980: /* MUTANT (rep_const) */    {"endbrace",        0,      -1,      0},
4980: /* MUTANT (rep_const) */    {"endbrace",        0,      0,      1},
4980: /* MUTANT (rep_const) */    {"endbrace",        0,      0,      -1},
4981: /* MUTANT (rep_const) */    {"break2label",     0,      0,      0},
4981: /* MUTANT (rep_const) */    {"break2label",     -1,      0,      0},
4981: /* MUTANT (rep_const) */    {"break2label",     ((1)+1),      0,      0},
4981: /* MUTANT (rep_const) */    {"break2label",     1,      1,      0},
4981: /* MUTANT (rep_const) */    {"break2label",     1,      -1,      0},
4981: /* MUTANT (rep_const) */    {"break2label",     1,      0,      1},
4981: /* MUTANT (rep_const) */    {"break2label",     1,      0,      -1},
4982: /* MUTANT (rep_const) */    {"cont2label",      0,      0,      0},
4982: /* MUTANT (rep_const) */    {"cont2label",      -1,      0,      0},
4982: /* MUTANT (rep_const) */    {"cont2label",      ((1)+1),      0,      0},
4982: /* MUTANT (rep_const) */    {"cont2label",      1,      1,      0},
4982: /* MUTANT (rep_const) */    {"cont2label",      1,      -1,      0},
4982: /* MUTANT (rep_const) */    {"cont2label",      1,      0,      1},
4982: /* MUTANT (rep_const) */    {"cont2label",      1,      0,      -1},
4983: /* MUTANT (rep_const) */    {"switch",          0,      0,      1},
4983: /* MUTANT (rep_const) */    {"switch",          1,      0,      1},
4983: /* MUTANT (rep_const) */    {"switch",          -1,      0,      1},
4983: /* MUTANT (rep_const) */    {"switch",          ((2)+1),      0,      1},
4983: /* MUTANT (rep_const) */    {"switch",          ((2)-1),      0,      1},
4983: /* MUTANT (rep_const) */    {"switch",          2,      1,      1},
4983: /* MUTANT (rep_const) */    {"switch",          2,      -1,      1},
4983: /* MUTANT (rep_const) */    {"switch",          2,      0,      0},
4983: /* MUTANT (rep_const) */    {"switch",          2,      0,      -1},
4983: /* MUTANT (rep_const) */    {"switch",          2,      0,      ((1)+1)},
4984: /* MUTANT (rep_const) */    {"funcdef",         0,      0,      0},
4984: /* MUTANT (rep_const) */    {"funcdef",         -1,      0,      0},
4984: /* MUTANT (rep_const) */    {"funcdef",         ((1)+1),      0,      0},
4984: /* MUTANT (rep_const) */    {"funcdef",         1,      1,      0},
4984: /* MUTANT (rep_const) */    {"funcdef",         1,      -1,      0},
4984: /* MUTANT (rep_const) */    {"funcdef",         1,      0,      1},
4984: /* MUTANT (rep_const) */    {"funcdef",         1,      0,      -1},
4985: /* MUTANT (rep_const) */    {"catch",           0,     11,      1},
4985: /* MUTANT (rep_const) */    {"catch",           -1,     11,      1},
4985: /* MUTANT (rep_const) */    {"catch",           ((1)+1),     11,      1},
4985: /* MUTANT (rep_const) */    {"catch",           1,     0,      1},
4985: /* MUTANT (rep_const) */    {"catch",           1,     1,      1},
4985: /* MUTANT (rep_const) */    {"catch",           1,     -1,      1},
4985: /* MUTANT (rep_const) */    {"catch",           1,     ((11)+1),      1},
4985: /* MUTANT (rep_const) */    {"catch",           1,     ((11)-1),      1},
4985: /* MUTANT (rep_const) */    {"catch",           1,     11,      0},
4985: /* MUTANT (rep_const) */    {"catch",           1,     11,      -1},
4985: /* MUTANT (rep_const) */    {"catch",           1,     11,      ((1)+1)},
4986: /* MUTANT (rep_const) */    {"const",           1,      0,      0},
4986: /* MUTANT (rep_const) */    {"const",           -1,      0,      0},
4986: /* MUTANT (rep_const) */    {"const",           0,      1,      0},
4986: /* MUTANT (rep_const) */    {"const",           0,      -1,      0},
4986: /* MUTANT (rep_const) */    {"const",           0,      0,      1},
4986: /* MUTANT (rep_const) */    {"const",           0,      0,      -1},
4987: /* MUTANT (rep_const) */    {"newline",         1,      0,      0},
4987: /* MUTANT (rep_const) */    {"newline",         -1,      0,      0},
4987: /* MUTANT (rep_const) */    {"newline",         0,      1,      0},
4987: /* MUTANT (rep_const) */    {"newline",         0,      -1,      0},
4987: /* MUTANT (rep_const) */    {"newline",         0,      0,      1},
4987: /* MUTANT (rep_const) */    {"newline",         0,      0,      -1},
4988: /* MUTANT (rep_const) */    {"setline",         0,      0,      0},
4988: /* MUTANT (rep_const) */    {"setline",         -1,      0,      0},
4988: /* MUTANT (rep_const) */    {"setline",         ((1)+1),      0,      0},
4988: /* MUTANT (rep_const) */    {"setline",         1,      1,      0},
4988: /* MUTANT (rep_const) */    {"setline",         1,      -1,      0},
4988: /* MUTANT (rep_const) */    {"setline",         1,      0,      1},
4988: /* MUTANT (rep_const) */    {"setline",         1,      0,      -1},
4989: /* MUTANT (rep_const) */    {"xdelta",          1,      0,      0},
4989: /* MUTANT (rep_const) */    {"xdelta",          -1,      0,      0},
4989: /* MUTANT (rep_const) */    {"xdelta",          0,      1,      0},
4989: /* MUTANT (rep_const) */    {"xdelta",          0,      -1,      0},
4989: /* MUTANT (rep_const) */    {"xdelta",          0,      0,      1},
4989: /* MUTANT (rep_const) */    {"xdelta",          0,      0,      -1},
4995: /* MUTANT (del_stmt) */ /*     intN index; */ 
4996: /* MUTANT (del_stmt) */ /*     JSArenaPool *pool; */ 
4997: /* MUTANT (del_stmt) */ /*     size_t size; */ 
4999: /* MUTANT (del_stmt) */ /*     index = CG_NOTE_COUNT(cg); */ 
5000: /* MUTANT (rep_op) */    if (((uintN)index & CG_NOTE_MASK(cg)) != 0) {
5000: /* MUTANT (rep_const) */    if (((uintN)index & CG_NOTE_MASK(cg)) == 1) {
5000: /* MUTANT (rep_const) */    if (((uintN)index & CG_NOTE_MASK(cg)) == -1) {
5000: /* MUTANT (negate) */    if(! (((uintN)index & CG_NOTE_MASK(cg)) == 0)) {
5001: /* MUTANT (del_stmt) */ /*         pool = cg->notePool; */ 
5002: /* MUTANT (del_stmt) */ /*         size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) + 1); */ 
5002: /* MUTANT (rep_op) */        size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) - 1);
5002: /* MUTANT (rep_op) */        size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) * 1);
5002: /* MUTANT (rep_op) */        size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) % 1);
5002: /* MUTANT (rep_const) */        size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) + 0);
5002: /* MUTANT (rep_const) */        size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) + -1);
5002: /* MUTANT (rep_const) */        size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) + ((1)+1));
5003: /* MUTANT (negate) */        if(! (!CG_NOTES(cg))) {
5005: /* MUTANT (del_stmt) */ /*             JS_ARENA_ALLOCATE_CAST(CG_NOTES(cg), jssrcnote *, pool, size); */ 
5008: /* MUTANT (del_stmt) */ /*             JS_ARENA_GROW_CAST(CG_NOTES(cg), jssrcnote *, pool, size, size); */ 
5009: /* MUTANT (negate) */            if(! (CG_NOTES(cg)))
5010: /* MUTANT (rep_op) */                CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << 1) & 1;
5010: /* MUTANT (rep_const) */                CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << 0) | 1;
5010: /* MUTANT (rep_const) */                CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << -1) | 1;
5010: /* MUTANT (rep_const) */                CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << ((1)+1)) | 1;
5010: /* MUTANT (rep_const) */                CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << 1) | 0;
5010: /* MUTANT (rep_const) */                CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << 1) | -1;
5010: /* MUTANT (rep_const) */                CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << 1) | ((1)+1);
5012: /* MUTANT (negate) */        if(! (!CG_NOTES(cg))) {
5013: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
5014: /* MUTANT (del_stmt) */ /*             return -1; */ 
5014: /* MUTANT (rep_const) */            return 0;
5014: /* MUTANT (rep_const) */            return 1;
5014: /* MUTANT (rep_const) */            return ((-1)+1);
5014: /* MUTANT (rep_const) */            return ((-1)-1);
5018: /* MUTANT (rep_op) */    CG_NOTE_COUNT(cg) = index - 1;
5018: /* MUTANT (rep_op) */    CG_NOTE_COUNT(cg) = index * 1;
5018: /* MUTANT (rep_op) */    CG_NOTE_COUNT(cg) = index % 1;
5018: /* MUTANT (rep_const) */    CG_NOTE_COUNT(cg) = index + 0;
5018: /* MUTANT (rep_const) */    CG_NOTE_COUNT(cg) = index + -1;
5018: /* MUTANT (rep_const) */    CG_NOTE_COUNT(cg) = index + ((1)+1);
5019: /* MUTANT (del_stmt) */ /*     return index; */ 
5025: /* MUTANT (del_stmt) */ /*     intN index, n; */ 
5026: /* MUTANT (del_stmt) */ /*     jssrcnote *sn; */ 
5027: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset, delta, xdelta; */ 
5033: /* MUTANT (del_stmt) */ /*     index = AllocSrcNote(cx, cg); */ 
5034: /* MUTANT (rep_op) */    if (index <= 0)
5034: /* MUTANT (rep_op) */    if (index > 0)
5034: /* MUTANT (rep_op) */    if (index >= 0)
5034: /* MUTANT (rep_op) */    if (index == 0)
5034: /* MUTANT (rep_op) */    if (index != 0)
5034: /* MUTANT (rep_const) */    if (index < 1)
5034: /* MUTANT (rep_const) */    if (index < -1)
5034: /* MUTANT (negate) */    if(! (index < 0))
5035: /* MUTANT (rep_const) */        return 0;
5035: /* MUTANT (rep_const) */        return 1;
5035: /* MUTANT (rep_const) */        return ((-1)+1);
5035: /* MUTANT (rep_const) */        return ((-1)-1);
5036: /* MUTANT (del_stmt) */ /*     sn = &CG_NOTES(cg)[index]; */ 
5042: /* MUTANT (del_stmt) */ /*     offset = CG_OFFSET(cg); */ 
5043: /* MUTANT (del_stmt) */ /*     delta = offset - CG_LAST_NOTE_OFFSET(cg); */ 
5044: /* MUTANT (del_stmt) */ /*     CG_LAST_NOTE_OFFSET(cg) = offset; */ 
5045: /* MUTANT (rep_op) */    if (delta <= SN_DELTA_LIMIT) {
5045: /* MUTANT (rep_op) */    if (delta < SN_DELTA_LIMIT) {
5045: /* MUTANT (rep_op) */    if (delta > SN_DELTA_LIMIT) {
5045: /* MUTANT (rep_op) */    if (delta == SN_DELTA_LIMIT) {
5045: /* MUTANT (rep_op) */    if (delta != SN_DELTA_LIMIT) {
5045: /* MUTANT (negate) */    if(! (delta >= SN_DELTA_LIMIT)) {
5047: /* MUTANT (del_stmt) */ /*             xdelta = JS_MIN(delta, SN_XDELTA_MASK); */ 
5048: /* MUTANT (del_stmt) */ /*             SN_MAKE_XDELTA(sn, xdelta); */ 
5049: /* MUTANT (del_stmt) */ /*             delta -= xdelta; */ 
5049: /* MUTANT (rep_op) */            delta += xdelta;
5049: /* MUTANT (rep_op) */            delta *= xdelta;
5049: /* MUTANT (rep_op) */            delta %= xdelta;
5050: /* MUTANT (del_stmt) */ /*             index = AllocSrcNote(cx, cg); */ 
5051: /* MUTANT (rep_op) */            if (index <= 0)
5051: /* MUTANT (rep_op) */            if (index > 0)
5051: /* MUTANT (rep_op) */            if (index >= 0)
5051: /* MUTANT (rep_op) */            if (index == 0)
5051: /* MUTANT (rep_op) */            if (index != 0)
5051: /* MUTANT (rep_const) */            if (index < 1)
5051: /* MUTANT (rep_const) */            if (index < -1)
5051: /* MUTANT (negate) */            if(! (index < 0))
5052: /* MUTANT (rep_const) */                return 0;
5052: /* MUTANT (rep_const) */                return 1;
5052: /* MUTANT (rep_const) */                return ((-1)+1);
5052: /* MUTANT (rep_const) */                return ((-1)-1);
5053: /* MUTANT (del_stmt) */ /*             sn = &CG_NOTES(cg)[index]; */ 
5054: /* MUTANT (del_stmt) */ /*         } while (delta >= SN_DELTA_LIMIT); */ 
5054: /* MUTANT (rep_op) */        } while (delta <= SN_DELTA_LIMIT);
5054: /* MUTANT (rep_op) */        } while (delta < SN_DELTA_LIMIT);
5054: /* MUTANT (rep_op) */        } while (delta > SN_DELTA_LIMIT);
5054: /* MUTANT (rep_op) */        } while (delta == SN_DELTA_LIMIT);
5054: /* MUTANT (rep_op) */        } while (delta != SN_DELTA_LIMIT);
5054: /* MUTANT (negate) */        } while(! (delta >= SN_DELTA_LIMIT));
5063: /* MUTANT (rep_op) */    for (n = (intN)js_SrcNoteSpec[type].arity; n <= 0; n--) {
5063: /* MUTANT (rep_op) */    for (n = (intN)js_SrcNoteSpec[type].arity; n < 0; n--) {
5063: /* MUTANT (rep_op) */    for (n = (intN)js_SrcNoteSpec[type].arity; n >= 0; n--) {
5063: /* MUTANT (rep_op) */    for (n = (intN)js_SrcNoteSpec[type].arity; n == 0; n--) {
5063: /* MUTANT (rep_op) */    for (n = (intN)js_SrcNoteSpec[type].arity; n != 0; n--) {
5063: /* MUTANT (rep_op) */    for (n = (intN)js_SrcNoteSpec[type].arity; n > 0; n++) {
5063: /* MUTANT (rep_const) */    for (n = (intN)js_SrcNoteSpec[type].arity; n > 1; n--) {
5063: /* MUTANT (rep_const) */    for (n = (intN)js_SrcNoteSpec[type].arity; n > -1; n--) {
5064: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_NULL) <= 0)
5064: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_NULL) > 0)
5064: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_NULL) >= 0)
5064: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_NULL) == 0)
5064: /* MUTANT (rep_op) */        if (js_NewSrcNote(cx, cg, SRC_NULL) != 0)
5064: /* MUTANT (rep_const) */        if (js_NewSrcNote(cx, cg, SRC_NULL) < 1)
5064: /* MUTANT (rep_const) */        if (js_NewSrcNote(cx, cg, SRC_NULL) < -1)
5064: /* MUTANT (negate) */        if(! (js_NewSrcNote(cx, cg, SRC_NULL) < 0))
5065: /* MUTANT (rep_const) */            return 0;
5065: /* MUTANT (rep_const) */            return 1;
5065: /* MUTANT (rep_const) */            return ((-1)+1);
5065: /* MUTANT (rep_const) */            return ((-1)-1);
5074: /* MUTANT (del_stmt) */ /*     intN index; */ 
5076: /* MUTANT (del_stmt) */ /*     index = js_NewSrcNote(cx, cg, type); */ 
5077: /* MUTANT (rep_op) */    if (index <= 0) {
5077: /* MUTANT (rep_op) */    if (index < 0) {
5077: /* MUTANT (rep_op) */    if (index > 0) {
5077: /* MUTANT (rep_op) */    if (index == 0) {
5077: /* MUTANT (rep_op) */    if (index != 0) {
5077: /* MUTANT (rep_const) */    if (index >= 1) {
5077: /* MUTANT (rep_const) */    if (index >= -1) {
5077: /* MUTANT (negate) */    if(! (index >= 0)) {
5078: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, index, 1, offset))
5078: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, index, -1, offset))
5078: /* MUTANT (negate) */        if(! (!js_SetSrcNoteOffset(cx, cg, index, 0, offset)))
5079: /* MUTANT (rep_const) */            return 0;
5079: /* MUTANT (rep_const) */            return 1;
5079: /* MUTANT (rep_const) */            return ((-1)+1);
5079: /* MUTANT (rep_const) */            return ((-1)-1);
5088: /* MUTANT (del_stmt) */ /*     intN index; */ 
5090: /* MUTANT (del_stmt) */ /*     index = js_NewSrcNote(cx, cg, type); */ 
5091: /* MUTANT (rep_op) */    if (index <= 0) {
5091: /* MUTANT (rep_op) */    if (index < 0) {
5091: /* MUTANT (rep_op) */    if (index > 0) {
5091: /* MUTANT (rep_op) */    if (index == 0) {
5091: /* MUTANT (rep_op) */    if (index != 0) {
5091: /* MUTANT (rep_const) */    if (index >= 1) {
5091: /* MUTANT (rep_const) */    if (index >= -1) {
5091: /* MUTANT (negate) */    if(! (index >= 0)) {
5092: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, index, 1, offset1))
5092: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, index, -1, offset1))
5092: /* MUTANT (negate) */        if(! (!js_SetSrcNoteOffset(cx, cg, index, 0, offset1)))
5093: /* MUTANT (rep_const) */            return 0;
5093: /* MUTANT (rep_const) */            return 1;
5093: /* MUTANT (rep_const) */            return ((-1)+1);
5093: /* MUTANT (rep_const) */            return ((-1)-1);
5094: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, index, 0, offset2))
5094: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, index, -1, offset2))
5094: /* MUTANT (rep_const) */        if (!js_SetSrcNoteOffset(cx, cg, index, ((1)+1), offset2))
5094: /* MUTANT (negate) */        if(! (!js_SetSrcNoteOffset(cx, cg, index, 1, offset2)))
5095: /* MUTANT (rep_const) */            return 0;
5095: /* MUTANT (rep_const) */            return 1;
5095: /* MUTANT (rep_const) */            return ((-1)+1);
5095: /* MUTANT (rep_const) */            return ((-1)-1);
5103: /* MUTANT (del_stmt) */ /*     JSArenaPool *pool; */ 
5104: /* MUTANT (del_stmt) */ /*     size_t size; */ 
5107: /* MUTANT (del_stmt) */ /*     pool = cg->notePool; */ 
5108: /* MUTANT (del_stmt) */ /*     size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) + 1); */ 
5108: /* MUTANT (rep_op) */    size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) - 1);
5108: /* MUTANT (rep_op) */    size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) * 1);
5108: /* MUTANT (rep_op) */    size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) % 1);
5108: /* MUTANT (rep_const) */    size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) + 0);
5108: /* MUTANT (rep_const) */    size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) + -1);
5108: /* MUTANT (rep_const) */    size = SRCNOTE_SIZE(CG_NOTE_MASK(cg) + ((1)+1));
5109: /* MUTANT (del_stmt) */ /*     JS_ARENA_GROW_CAST(CG_NOTES(cg), jssrcnote *, pool, size, size); */ 
5110: /* MUTANT (negate) */    if(! (!CG_NOTES(cg))) {
5111: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(cx); */ 
5112: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
5114: /* MUTANT (rep_op) */    CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << 1) & 1;
5114: /* MUTANT (rep_const) */    CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << 0) | 1;
5114: /* MUTANT (rep_const) */    CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << -1) | 1;
5114: /* MUTANT (rep_const) */    CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << ((1)+1)) | 1;
5114: /* MUTANT (rep_const) */    CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << 1) | 0;
5114: /* MUTANT (rep_const) */    CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << 1) | -1;
5114: /* MUTANT (rep_const) */    CG_NOTE_MASK(cg) = (CG_NOTE_MASK(cg) << 1) | ((1)+1);
5115: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
5122: /* MUTANT (del_stmt) */ /*     ptrdiff_t base, limit, newdelta, diff; */ 
5123: /* MUTANT (del_stmt) */ /*     intN index; */ 
5129: /* MUTANT (del_stmt) */ /*     JS_ASSERT(cg->current == &cg->main); */ 
5129: /* MUTANT (rep_op) */    JS_ASSERT(cg->current != &cg->main);
5130: /* MUTANT (del_stmt) */ /*     JS_ASSERT((unsigned) delta < (unsigned) SN_XDELTA_LIMIT); */ 
5130: /* MUTANT (rep_op) */    JS_ASSERT((unsigned) delta <= (unsigned) SN_XDELTA_LIMIT);
5130: /* MUTANT (rep_op) */    JS_ASSERT((unsigned) delta > (unsigned) SN_XDELTA_LIMIT);
5130: /* MUTANT (rep_op) */    JS_ASSERT((unsigned) delta >= (unsigned) SN_XDELTA_LIMIT);
5130: /* MUTANT (rep_op) */    JS_ASSERT((unsigned) delta == (unsigned) SN_XDELTA_LIMIT);
5130: /* MUTANT (rep_op) */    JS_ASSERT((unsigned) delta != (unsigned) SN_XDELTA_LIMIT);
5132: /* MUTANT (del_stmt) */ /*     base = SN_DELTA(sn); */ 
5133: /* MUTANT (del_stmt) */ /*     limit = SN_IS_XDELTA(sn) ? SN_XDELTA_LIMIT : SN_DELTA_LIMIT; */ 
5134: /* MUTANT (del_stmt) */ /*     newdelta = base + delta; */ 
5134: /* MUTANT (rep_op) */    newdelta = base - delta;
5134: /* MUTANT (rep_op) */    newdelta = base * delta;
5134: /* MUTANT (rep_op) */    newdelta = base % delta;
5135: /* MUTANT (rep_op) */    if (newdelta <= limit) {
5135: /* MUTANT (rep_op) */    if (newdelta > limit) {
5135: /* MUTANT (rep_op) */    if (newdelta >= limit) {
5135: /* MUTANT (rep_op) */    if (newdelta == limit) {
5135: /* MUTANT (rep_op) */    if (newdelta != limit) {
5135: /* MUTANT (negate) */    if(! (newdelta < limit)) {
5136: /* MUTANT (del_stmt) */ /*         SN_SET_DELTA(sn, newdelta); */ 
5138: /* MUTANT (del_stmt) */ /*         index = sn - cg->main.notes; */ 
5139: /* MUTANT (rep_op) */        if ((cg->main.noteCount & cg->main.noteMask) != 0) {
5139: /* MUTANT (rep_const) */        if ((cg->main.noteCount & cg->main.noteMask) == 1) {
5139: /* MUTANT (rep_const) */        if ((cg->main.noteCount & cg->main.noteMask) == -1) {
5139: /* MUTANT (negate) */        if(! ((cg->main.noteCount & cg->main.noteMask) == 0)) {
5140: /* MUTANT (negate) */            if(! (!GrowSrcNotes(cx, cg)))
5142: /* MUTANT (del_stmt) */ /*             sn = cg->main.notes + index; */ 
5142: /* MUTANT (rep_op) */            sn = cg->main.notes - index;
5142: /* MUTANT (rep_op) */            sn = cg->main.notes * index;
5142: /* MUTANT (rep_op) */            sn = cg->main.notes % index;
5145: /* MUTANT (del_stmt) */ /*         cg->main.noteCount++; */ 
5145: /* MUTANT (rep_op) */        cg->main.noteCount--;
5146: /* MUTANT (del_stmt) */ /*         memmove(sn + 1, sn, SRCNOTE_SIZE(diff)); */ 
5146: /* MUTANT (rep_op) */        memmove(sn - 1, sn, SRCNOTE_SIZE(diff));
5146: /* MUTANT (rep_op) */        memmove(sn * 1, sn, SRCNOTE_SIZE(diff));
5146: /* MUTANT (rep_op) */        memmove(sn % 1, sn, SRCNOTE_SIZE(diff));
5146: /* MUTANT (rep_const) */        memmove(sn + 0, sn, SRCNOTE_SIZE(diff));
5146: /* MUTANT (rep_const) */        memmove(sn + -1, sn, SRCNOTE_SIZE(diff));
5146: /* MUTANT (rep_const) */        memmove(sn + ((1)+1), sn, SRCNOTE_SIZE(diff));
5147: /* MUTANT (del_stmt) */ /*         SN_MAKE_XDELTA(sn, delta); */ 
5148: /* MUTANT (del_stmt) */ /*         sn++; */ 
5148: /* MUTANT (rep_op) */        sn--;
5156: /* MUTANT (del_stmt) */ /*     uintN arity; */ 
5157: /* MUTANT (del_stmt) */ /*     jssrcnote *base; */ 
5159: /* MUTANT (del_stmt) */ /*     arity = (intN)js_SrcNoteSpec[SN_TYPE(sn)].arity; */ 
5160: /* MUTANT (rep_op) */    for (base = sn--; arity; sn++, arity--) {
5160: /* MUTANT (rep_op) */    for (base = sn++; arity; sn--, arity--) {
5160: /* MUTANT (rep_op) */    for (base = sn++; arity; sn++, arity++) {
5161: /* MUTANT (negate) */        if(! (*sn & SN_3BYTE_OFFSET_FLAG))
5162: /* MUTANT (rep_op) */            sn -= 2;
5162: /* MUTANT (rep_op) */            sn *= 2;
5162: /* MUTANT (rep_op) */            sn %= 2;
5162: /* MUTANT (rep_const) */            sn += 0;
5162: /* MUTANT (rep_const) */            sn += 1;
5162: /* MUTANT (rep_const) */            sn += -1;
5162: /* MUTANT (rep_const) */            sn += ((2)+1);
5162: /* MUTANT (rep_const) */            sn += ((2)-1);
5171: /* MUTANT (del_stmt) */ /*     JS_ASSERT(SN_TYPE(sn) != SRC_XDELTA); */ 
5171: /* MUTANT (rep_op) */    JS_ASSERT(SN_TYPE(sn) == SRC_XDELTA);
5172: /* MUTANT (del_stmt) */ /*     JS_ASSERT(which < js_SrcNoteSpec[SN_TYPE(sn)].arity); */ 
5172: /* MUTANT (rep_op) */    JS_ASSERT(which <= js_SrcNoteSpec[SN_TYPE(sn)].arity);
5172: /* MUTANT (rep_op) */    JS_ASSERT(which > js_SrcNoteSpec[SN_TYPE(sn)].arity);
5172: /* MUTANT (rep_op) */    JS_ASSERT(which >= js_SrcNoteSpec[SN_TYPE(sn)].arity);
5172: /* MUTANT (rep_op) */    JS_ASSERT(which == js_SrcNoteSpec[SN_TYPE(sn)].arity);
5172: /* MUTANT (rep_op) */    JS_ASSERT(which != js_SrcNoteSpec[SN_TYPE(sn)].arity);
5173: /* MUTANT (rep_op) */    for (sn--; which; sn++, which--) {
5173: /* MUTANT (rep_op) */    for (sn++; which; sn--, which--) {
5173: /* MUTANT (rep_op) */    for (sn++; which; sn++, which++) {
5174: /* MUTANT (negate) */        if(! (*sn & SN_3BYTE_OFFSET_FLAG))
5175: /* MUTANT (rep_op) */            sn -= 2;
5175: /* MUTANT (rep_op) */            sn *= 2;
5175: /* MUTANT (rep_op) */            sn %= 2;
5175: /* MUTANT (rep_const) */            sn += 0;
5175: /* MUTANT (rep_const) */            sn += 1;
5175: /* MUTANT (rep_const) */            sn += -1;
5175: /* MUTANT (rep_const) */            sn += ((2)+1);
5175: /* MUTANT (rep_const) */            sn += ((2)-1);
5177: /* MUTANT (negate) */    if(! (*sn & SN_3BYTE_OFFSET_FLAG)) {
5178: /* MUTANT (rep_const) */        return (ptrdiff_t)(((uint32)(sn[1] & SN_3BYTE_OFFSET_MASK) << 16)
5178: /* MUTANT (rep_const) */        return (ptrdiff_t)(((uint32)(sn[-1] & SN_3BYTE_OFFSET_MASK) << 16)
5178: /* MUTANT (rep_const) */        return (ptrdiff_t)(((uint32)(sn[0] & SN_3BYTE_OFFSET_MASK) << 0)
5178: /* MUTANT (rep_const) */        return (ptrdiff_t)(((uint32)(sn[0] & SN_3BYTE_OFFSET_MASK) << 1)
5178: /* MUTANT (rep_const) */        return (ptrdiff_t)(((uint32)(sn[0] & SN_3BYTE_OFFSET_MASK) << -1)
5178: /* MUTANT (rep_const) */        return (ptrdiff_t)(((uint32)(sn[0] & SN_3BYTE_OFFSET_MASK) << ((16)+1))
5178: /* MUTANT (rep_const) */        return (ptrdiff_t)(((uint32)(sn[0] & SN_3BYTE_OFFSET_MASK) << ((16)-1))
5179: /* MUTANT (rep_op) */                           & (sn[1] << 8)
5179: /* MUTANT (rep_const) */                           | (sn[0] << 8)
5179: /* MUTANT (rep_const) */                           | (sn[-1] << 8)
5179: /* MUTANT (rep_const) */                           | (sn[((1)+1)] << 8)
5179: /* MUTANT (rep_const) */                           | (sn[1] << 0)
5179: /* MUTANT (rep_const) */                           | (sn[1] << 1)
5179: /* MUTANT (rep_const) */                           | (sn[1] << -1)
5179: /* MUTANT (rep_const) */                           | (sn[1] << ((8)+1))
5179: /* MUTANT (rep_const) */                           | (sn[1] << ((8)-1))
5180: /* MUTANT (rep_op) */                           & sn[2]);
5180: /* MUTANT (rep_const) */                           | sn[0]);
5180: /* MUTANT (rep_const) */                           | sn[1]);
5180: /* MUTANT (rep_const) */                           | sn[-1]);
5180: /* MUTANT (rep_const) */                           | sn[((2)+1)]);
5180: /* MUTANT (rep_const) */                           | sn[((2)-1)]);
5189: /* MUTANT (del_stmt) */ /*     jssrcnote *sn; */ 
5190: /* MUTANT (del_stmt) */ /*     ptrdiff_t diff; */ 
5192: /* MUTANT (rep_op) */    if ((jsuword)offset <= (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << 16)) {
5192: /* MUTANT (rep_op) */    if ((jsuword)offset < (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << 16)) {
5192: /* MUTANT (rep_op) */    if ((jsuword)offset > (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << 16)) {
5192: /* MUTANT (rep_op) */    if ((jsuword)offset == (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << 16)) {
5192: /* MUTANT (rep_op) */    if ((jsuword)offset != (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << 16)) {
5192: /* MUTANT (rep_const) */    if ((jsuword)offset >= (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << 0)) {
5192: /* MUTANT (rep_const) */    if ((jsuword)offset >= (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << 1)) {
5192: /* MUTANT (rep_const) */    if ((jsuword)offset >= (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << -1)) {
5192: /* MUTANT (rep_const) */    if ((jsuword)offset >= (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << ((16)+1))) {
5192: /* MUTANT (rep_const) */    if ((jsuword)offset >= (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << ((16)-1))) {
5192: /* MUTANT (negate) */    if(! ((jsuword)offset >= (jsuword)((ptrdiff_t)SN_3BYTE_OFFSET_FLAG << 16))) {
5193: /* MUTANT (del_stmt) */ /*         ReportStatementTooLarge(cx, cg); */ 
5194: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
5199: /* MUTANT (del_stmt) */ /*     JS_ASSERT(SN_TYPE(sn) != SRC_XDELTA); */ 
5199: /* MUTANT (rep_op) */    JS_ASSERT(SN_TYPE(sn) == SRC_XDELTA);
5200: /* MUTANT (del_stmt) */ /*     JS_ASSERT(which < js_SrcNoteSpec[SN_TYPE(sn)].arity); */ 
5200: /* MUTANT (rep_op) */    JS_ASSERT(which <= js_SrcNoteSpec[SN_TYPE(sn)].arity);
5200: /* MUTANT (rep_op) */    JS_ASSERT(which > js_SrcNoteSpec[SN_TYPE(sn)].arity);
5200: /* MUTANT (rep_op) */    JS_ASSERT(which >= js_SrcNoteSpec[SN_TYPE(sn)].arity);
5200: /* MUTANT (rep_op) */    JS_ASSERT(which == js_SrcNoteSpec[SN_TYPE(sn)].arity);
5200: /* MUTANT (rep_op) */    JS_ASSERT(which != js_SrcNoteSpec[SN_TYPE(sn)].arity);
5201: /* MUTANT (rep_op) */    for (sn--; which; sn++, which--) {
5201: /* MUTANT (rep_op) */    for (sn++; which; sn--, which--) {
5201: /* MUTANT (rep_op) */    for (sn++; which; sn++, which++) {
5202: /* MUTANT (negate) */        if(! (*sn & SN_3BYTE_OFFSET_FLAG))
5203: /* MUTANT (rep_op) */            sn -= 2;
5203: /* MUTANT (rep_op) */            sn *= 2;
5203: /* MUTANT (rep_op) */            sn %= 2;
5203: /* MUTANT (rep_const) */            sn += 0;
5203: /* MUTANT (rep_const) */            sn += 1;
5203: /* MUTANT (rep_const) */            sn += -1;
5203: /* MUTANT (rep_const) */            sn += ((2)+1);
5203: /* MUTANT (rep_const) */            sn += ((2)-1);
5207: /* MUTANT (rep_op) */    if (offset <= (ptrdiff_t)SN_3BYTE_OFFSET_MASK) {
5207: /* MUTANT (rep_op) */    if (offset < (ptrdiff_t)SN_3BYTE_OFFSET_MASK) {
5207: /* MUTANT (rep_op) */    if (offset >= (ptrdiff_t)SN_3BYTE_OFFSET_MASK) {
5207: /* MUTANT (rep_op) */    if (offset == (ptrdiff_t)SN_3BYTE_OFFSET_MASK) {
5207: /* MUTANT (rep_op) */    if (offset != (ptrdiff_t)SN_3BYTE_OFFSET_MASK) {
5207: /* MUTANT (negate) */    if(! (offset > (ptrdiff_t)SN_3BYTE_OFFSET_MASK)) {
5209: /* MUTANT (negate) */        if(! (!(*sn & SN_3BYTE_OFFSET_FLAG))) {
5211: /* MUTANT (del_stmt) */ /*             index = PTRDIFF(sn, CG_NOTES(cg), jssrcnote); */ 
5218: /* MUTANT (rep_op) */            if (((CG_NOTE_COUNT(cg) - 1) & CG_NOTE_MASK(cg)) <= 1) {
5218: /* MUTANT (rep_op) */            if (((CG_NOTE_COUNT(cg) * 1) & CG_NOTE_MASK(cg)) <= 1) {
5218: /* MUTANT (rep_op) */            if (((CG_NOTE_COUNT(cg) % 1) & CG_NOTE_MASK(cg)) <= 1) {
5218: /* MUTANT (rep_op) */            if (((CG_NOTE_COUNT(cg) + 1) & CG_NOTE_MASK(cg)) < 1) {
5218: /* MUTANT (rep_op) */            if (((CG_NOTE_COUNT(cg) + 1) & CG_NOTE_MASK(cg)) > 1) {
5218: /* MUTANT (rep_op) */            if (((CG_NOTE_COUNT(cg) + 1) & CG_NOTE_MASK(cg)) >= 1) {
5218: /* MUTANT (rep_op) */            if (((CG_NOTE_COUNT(cg) + 1) & CG_NOTE_MASK(cg)) == 1) {
5218: /* MUTANT (rep_op) */            if (((CG_NOTE_COUNT(cg) + 1) & CG_NOTE_MASK(cg)) != 1) {
5218: /* MUTANT (rep_const) */            if (((CG_NOTE_COUNT(cg) + 0) & CG_NOTE_MASK(cg)) <= 1) {
5218: /* MUTANT (rep_const) */            if (((CG_NOTE_COUNT(cg) + -1) & CG_NOTE_MASK(cg)) <= 1) {
5218: /* MUTANT (rep_const) */            if (((CG_NOTE_COUNT(cg) + ((1)+1)) & CG_NOTE_MASK(cg)) <= 1) {
5218: /* MUTANT (rep_const) */            if (((CG_NOTE_COUNT(cg) + 1) & CG_NOTE_MASK(cg)) <= 0) {
5218: /* MUTANT (rep_const) */            if (((CG_NOTE_COUNT(cg) + 1) & CG_NOTE_MASK(cg)) <= -1) {
5218: /* MUTANT (rep_const) */            if (((CG_NOTE_COUNT(cg) + 1) & CG_NOTE_MASK(cg)) <= ((1)+1)) {
5218: /* MUTANT (negate) */            if(! (((CG_NOTE_COUNT(cg) + 1) & CG_NOTE_MASK(cg)) <= 1)) {
5219: /* MUTANT (negate) */                if(! (!GrowSrcNotes(cx, cg)))
5221: /* MUTANT (del_stmt) */ /*                 sn = CG_NOTES(cg) + index; */ 
5221: /* MUTANT (rep_op) */                sn = CG_NOTES(cg) - index;
5221: /* MUTANT (rep_op) */                sn = CG_NOTES(cg) * index;
5221: /* MUTANT (rep_op) */                sn = CG_NOTES(cg) % index;
5223: /* MUTANT (rep_op) */            CG_NOTE_COUNT(cg) -= 2;
5223: /* MUTANT (rep_op) */            CG_NOTE_COUNT(cg) *= 2;
5223: /* MUTANT (rep_op) */            CG_NOTE_COUNT(cg) %= 2;
5223: /* MUTANT (rep_const) */            CG_NOTE_COUNT(cg) += 0;
5223: /* MUTANT (rep_const) */            CG_NOTE_COUNT(cg) += 1;
5223: /* MUTANT (rep_const) */            CG_NOTE_COUNT(cg) += -1;
5223: /* MUTANT (rep_const) */            CG_NOTE_COUNT(cg) += ((2)+1);
5223: /* MUTANT (rep_const) */            CG_NOTE_COUNT(cg) += ((2)-1);
5225: /* MUTANT (del_stmt) */ /*             diff = CG_NOTE_COUNT(cg) - (index + 3); */ 
5225: /* MUTANT (rep_op) */            diff = CG_NOTE_COUNT(cg) - (index - 3);
5225: /* MUTANT (rep_op) */            diff = CG_NOTE_COUNT(cg) - (index * 3);
5225: /* MUTANT (rep_op) */            diff = CG_NOTE_COUNT(cg) - (index % 3);
5225: /* MUTANT (rep_const) */            diff = CG_NOTE_COUNT(cg) - (index + 0);
5225: /* MUTANT (rep_const) */            diff = CG_NOTE_COUNT(cg) - (index + 1);
5225: /* MUTANT (rep_const) */            diff = CG_NOTE_COUNT(cg) - (index + -1);
5225: /* MUTANT (rep_const) */            diff = CG_NOTE_COUNT(cg) - (index + ((3)+1));
5225: /* MUTANT (rep_const) */            diff = CG_NOTE_COUNT(cg) - (index + ((3)-1));
5225: /* MUTANT (negate) */            dif(!f = CG_NOTE_COUNT(cg)) - (index + 3);
5226: /* MUTANT (del_stmt) */ /*             JS_ASSERT(diff >= 0); */ 
5226: /* MUTANT (rep_op) */            JS_ASSERT(diff <= 0);
5226: /* MUTANT (rep_op) */            JS_ASSERT(diff < 0);
5226: /* MUTANT (rep_op) */            JS_ASSERT(diff > 0);
5226: /* MUTANT (rep_op) */            JS_ASSERT(diff == 0);
5226: /* MUTANT (rep_op) */            JS_ASSERT(diff != 0);
5226: /* MUTANT (rep_const) */            JS_ASSERT(diff >= 1);
5226: /* MUTANT (rep_const) */            JS_ASSERT(diff >= -1);
5227: /* MUTANT (rep_op) */            if (diff <= 0)
5227: /* MUTANT (rep_op) */            if (diff < 0)
5227: /* MUTANT (rep_op) */            if (diff >= 0)
5227: /* MUTANT (rep_op) */            if (diff == 0)
5227: /* MUTANT (rep_op) */            if (diff != 0)
5227: /* MUTANT (rep_const) */            if (diff > 1)
5227: /* MUTANT (rep_const) */            if (diff > -1)
5227: /* MUTANT (negate) */            if(! (diff > 0))
5228: /* MUTANT (rep_op) */                memmove(sn - 3, sn + 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_op) */                memmove(sn * 3, sn + 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_op) */                memmove(sn % 3, sn + 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_op) */                memmove(sn + 3, sn - 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_op) */                memmove(sn + 3, sn * 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_op) */                memmove(sn + 3, sn % 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_const) */                memmove(sn + 0, sn + 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_const) */                memmove(sn + 1, sn + 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_const) */                memmove(sn + -1, sn + 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_const) */                memmove(sn + ((3)+1), sn + 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_const) */                memmove(sn + ((3)-1), sn + 1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_const) */                memmove(sn + 3, sn + 0, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_const) */                memmove(sn + 3, sn + -1, SRCNOTE_SIZE(diff));
5228: /* MUTANT (rep_const) */                memmove(sn + 3, sn + ((1)+1), SRCNOTE_SIZE(diff));
5230: /* MUTANT (rep_op) */        *sn-- = (jssrcnote)(SN_3BYTE_OFFSET_FLAG | (offset >> 16));
5230: /* MUTANT (rep_op) */        *sn++ = (jssrcnote)(SN_3BYTE_OFFSET_FLAG & (offset >> 16));
5230: /* MUTANT (rep_const) */        *sn++ = (jssrcnote)(SN_3BYTE_OFFSET_FLAG | (offset >> 0));
5230: /* MUTANT (rep_const) */        *sn++ = (jssrcnote)(SN_3BYTE_OFFSET_FLAG | (offset >> 1));
5230: /* MUTANT (rep_const) */        *sn++ = (jssrcnote)(SN_3BYTE_OFFSET_FLAG | (offset >> -1));
5230: /* MUTANT (rep_const) */        *sn++ = (jssrcnote)(SN_3BYTE_OFFSET_FLAG | (offset >> ((16)+1)));
5230: /* MUTANT (rep_const) */        *sn++ = (jssrcnote)(SN_3BYTE_OFFSET_FLAG | (offset >> ((16)-1)));
5231: /* MUTANT (del_stmt) */ /*         *sn++ = (jssrcnote)(offset >> 8); */ 
5231: /* MUTANT (rep_op) */        *sn-- = (jssrcnote)(offset >> 8);
5231: /* MUTANT (rep_const) */        *sn++ = (jssrcnote)(offset >> 0);
5231: /* MUTANT (rep_const) */        *sn++ = (jssrcnote)(offset >> 1);
5231: /* MUTANT (rep_const) */        *sn++ = (jssrcnote)(offset >> -1);
5231: /* MUTANT (rep_const) */        *sn++ = (jssrcnote)(offset >> ((8)+1));
5231: /* MUTANT (rep_const) */        *sn++ = (jssrcnote)(offset >> ((8)-1));
5234: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
5238: #define NBINS 0 /* MUTANT (rep_const) */
5238: #define NBINS 1 /* MUTANT (rep_const) */
5238: #define NBINS -1 /* MUTANT (rep_const) */
5238: #define NBINS ((10)+1) /* MUTANT (rep_const) */
5238: #define NBINS ((10)-1) /* MUTANT (rep_const) */
5243: /* MUTANT (del_stmt) */ /*     static FILE *fp; */ 
5244: /* MUTANT (del_stmt) */ /*     int i, n; */ 
5246: /* MUTANT (negate) */    if(! (!fp)) {
5247: /* MUTANT (del_stmt) */ /*         fp = fopen("/tmp/srcnotes.hist", "w"); */ 
5248: /* MUTANT (negate) */        if(! (!fp))
5250: /* MUTANT (del_stmt) */ /*         setvbuf(fp, NULL, _IONBF, 0); */ 
5250: /* MUTANT (rep_const) */        setvbuf(fp, NULL, _IONBF, 1);
5250: /* MUTANT (rep_const) */        setvbuf(fp, NULL, _IONBF, -1);
5253: /* MUTANT (rep_op) */    for (i = 0; i <= NBINS; i++) {
5253: /* MUTANT (rep_op) */    for (i = 0; i > NBINS; i++) {
5253: /* MUTANT (rep_op) */    for (i = 0; i >= NBINS; i++) {
5253: /* MUTANT (rep_op) */    for (i = 0; i == NBINS; i++) {
5253: /* MUTANT (rep_op) */    for (i = 0; i != NBINS; i++) {
5253: /* MUTANT (rep_op) */    for (i = 0; i < NBINS; i--) {
5253: /* MUTANT (rep_const) */    for (i = 1; i < NBINS; i++) {
5253: /* MUTANT (rep_const) */    for (i = -1; i < NBINS; i++) {
5254: /* MUTANT (del_stmt) */ /*         fprintf(fp, "%4u %4u ", JS_BIT(i), hist[i]); */ 
5254: /* MUTANT (rep_const) */        fprintf(fp, "%0u %4u ", JS_BIT(i), hist[i]);
5254: /* MUTANT (rep_const) */        fprintf(fp, "%1u %4u ", JS_BIT(i), hist[i]);
5254: /* MUTANT (rep_const) */        fprintf(fp, "%-1u %4u ", JS_BIT(i), hist[i]);
5254: /* MUTANT (rep_const) */        fprintf(fp, "%((4)+1)u %4u ", JS_BIT(i), hist[i]);
5254: /* MUTANT (rep_const) */        fprintf(fp, "%((4)-1)u %4u ", JS_BIT(i), hist[i]);
5254: /* MUTANT (rep_const) */        fprintf(fp, "%4u %0u ", JS_BIT(i), hist[i]);
5254: /* MUTANT (rep_const) */        fprintf(fp, "%4u %1u ", JS_BIT(i), hist[i]);
5254: /* MUTANT (rep_const) */        fprintf(fp, "%4u %-1u ", JS_BIT(i), hist[i]);
5254: /* MUTANT (rep_const) */        fprintf(fp, "%4u %((4)+1)u ", JS_BIT(i), hist[i]);
5254: /* MUTANT (rep_const) */        fprintf(fp, "%4u %((4)-1)u ", JS_BIT(i), hist[i]);
5255: /* MUTANT (rep_op) */        for (n = (int) JS_HOWMANY(hist[i], 10); n <= 0; --n)
5255: /* MUTANT (rep_op) */        for (n = (int) JS_HOWMANY(hist[i], 10); n < 0; --n)
5255: /* MUTANT (rep_op) */        for (n = (int) JS_HOWMANY(hist[i], 10); n >= 0; --n)
5255: /* MUTANT (rep_op) */        for (n = (int) JS_HOWMANY(hist[i], 10); n == 0; --n)
5255: /* MUTANT (rep_op) */        for (n = (int) JS_HOWMANY(hist[i], 10); n != 0; --n)
5255: /* MUTANT (rep_op) */        for (n = (int) JS_HOWMANY(hist[i], 10); n > 0; ++n)
5255: /* MUTANT (rep_const) */        for (n = (int) JS_HOWMANY(hist[i], 0); n > 0; --n)
5255: /* MUTANT (rep_const) */        for (n = (int) JS_HOWMANY(hist[i], 1); n > 0; --n)
5255: /* MUTANT (rep_const) */        for (n = (int) JS_HOWMANY(hist[i], -1); n > 0; --n)
5255: /* MUTANT (rep_const) */        for (n = (int) JS_HOWMANY(hist[i], ((10)+1)); n > 0; --n)
5255: /* MUTANT (rep_const) */        for (n = (int) JS_HOWMANY(hist[i], ((10)-1)); n > 0; --n)
5255: /* MUTANT (rep_const) */        for (n = (int) JS_HOWMANY(hist[i], 10); n > 1; --n)
5255: /* MUTANT (rep_const) */        for (n = (int) JS_HOWMANY(hist[i], 10); n > -1; --n)
5257: /* MUTANT (del_stmt) */ /*         fputc('\n', fp); */ 
5272: /* MUTANT (del_stmt) */ /*     uintN prologCount, mainCount, totalCount; */ 
5273: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset, delta; */ 
5274: /* MUTANT (del_stmt) */ /*     jssrcnote *sn; */ 
5276: /* MUTANT (del_stmt) */ /*     JS_ASSERT(cg->current == &cg->main); */ 
5276: /* MUTANT (rep_op) */    JS_ASSERT(cg->current != &cg->main);
5278: /* MUTANT (del_stmt) */ /*     prologCount = cg->prolog.noteCount; */ 
5279: /* MUTANT (rep_op) */    if (prologCount || cg->prolog.currentLine != cg->firstLine) {
5279: /* MUTANT (rep_op) */    if (prologCount && cg->prolog.currentLine == cg->firstLine) {
5279: /* MUTANT (negate) */    if(! (prologCount && cg->prolog.currentLine != cg->firstLine)) {
5280: /* MUTANT (del_stmt) */ /*         CG_SWITCH_TO_PROLOG(cg); */ 
5281: /* MUTANT (rep_op) */        if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)cg->firstLine) <= 0)
5281: /* MUTANT (rep_op) */        if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)cg->firstLine) > 0)
5281: /* MUTANT (rep_op) */        if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)cg->firstLine) >= 0)
5281: /* MUTANT (rep_op) */        if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)cg->firstLine) == 0)
5281: /* MUTANT (rep_op) */        if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)cg->firstLine) != 0)
5281: /* MUTANT (rep_const) */        if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)cg->firstLine) < 1)
5281: /* MUTANT (rep_const) */        if (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)cg->firstLine) < -1)
5281: /* MUTANT (negate) */        if(! (js_NewSrcNote2(cx, cg, SRC_SETLINE, (ptrdiff_t)cg->firstLine) < 0))
5283: /* MUTANT (del_stmt) */ /*         prologCount = cg->prolog.noteCount; */ 
5284: /* MUTANT (del_stmt) */ /*         CG_SWITCH_TO_MAIN(cg); */ 
5293: /* MUTANT (del_stmt) */ /*         offset = CG_PROLOG_OFFSET(cg) - cg->prolog.lastNoteOffset; */ 
5294: /* MUTANT (del_stmt) */ /*         JS_ASSERT(offset >= 0); */ 
5294: /* MUTANT (rep_op) */        JS_ASSERT(offset <= 0);
5294: /* MUTANT (rep_op) */        JS_ASSERT(offset < 0);
5294: /* MUTANT (rep_op) */        JS_ASSERT(offset > 0);
5294: /* MUTANT (rep_op) */        JS_ASSERT(offset == 0);
5294: /* MUTANT (rep_op) */        JS_ASSERT(offset != 0);
5294: /* MUTANT (rep_const) */        JS_ASSERT(offset >= 1);
5294: /* MUTANT (rep_const) */        JS_ASSERT(offset >= -1);
5295: /* MUTANT (rep_op) */        if (offset <= 0) {
5295: /* MUTANT (rep_op) */        if (offset < 0) {
5295: /* MUTANT (rep_op) */        if (offset >= 0) {
5295: /* MUTANT (rep_op) */        if (offset == 0) {
5295: /* MUTANT (rep_op) */        if (offset != 0) {
5295: /* MUTANT (rep_const) */        if (offset > 1) {
5295: /* MUTANT (rep_const) */        if (offset > -1) {
5295: /* MUTANT (negate) */        if(! (offset > 0)) {
5297: /* MUTANT (del_stmt) */ /*             sn = cg->main.notes; */ 
5301: /* MUTANT (rep_op) */            if (offset <= delta)
5301: /* MUTANT (rep_op) */            if (offset > delta)
5301: /* MUTANT (rep_op) */            if (offset >= delta)
5301: /* MUTANT (rep_op) */            if (offset == delta)
5301: /* MUTANT (rep_op) */            if (offset != delta)
5301: /* MUTANT (negate) */            if(! (offset < delta))
5304: /* MUTANT (negate) */                if(! (!js_AddToSrcNoteDelta(cx, cg, sn, delta)))
5306: /* MUTANT (del_stmt) */ /*                 offset -= delta; */ 
5306: /* MUTANT (rep_op) */                offset += delta;
5306: /* MUTANT (rep_op) */                offset *= delta;
5306: /* MUTANT (rep_op) */                offset %= delta;
5307: /* MUTANT (rep_op) */                if (offset != 0)
5307: /* MUTANT (rep_const) */                if (offset == 1)
5307: /* MUTANT (rep_const) */                if (offset == -1)
5307: /* MUTANT (negate) */                if(! (offset == 0))
5309: /* MUTANT (del_stmt) */ /*                 delta = JS_MIN(offset, SN_XDELTA_MASK); */ 
5310: /* MUTANT (del_stmt) */ /*                 sn = cg->main.notes; */ 
5316: /* MUTANT (del_stmt) */ /*     totalCount = prologCount + mainCount; */ 
5316: /* MUTANT (rep_op) */    totalCount = prologCount - mainCount;
5316: /* MUTANT (rep_op) */    totalCount = prologCount * mainCount;
5316: /* MUTANT (rep_op) */    totalCount = prologCount % mainCount;
5317: /* MUTANT (negate) */    if(! (prologCount))
5319: /* MUTANT (del_stmt) */ /*     memcpy(notes + prologCount, cg->main.notes, SRCNOTE_SIZE(mainCount)); */ 
5319: /* MUTANT (rep_op) */    memcpy(notes - prologCount, cg->main.notes, SRCNOTE_SIZE(mainCount));
5319: /* MUTANT (rep_op) */    memcpy(notes * prologCount, cg->main.notes, SRCNOTE_SIZE(mainCount));
5319: /* MUTANT (rep_op) */    memcpy(notes % prologCount, cg->main.notes, SRCNOTE_SIZE(mainCount));
5320: /* MUTANT (del_stmt) */ /*     SN_MAKE_TERMINATOR(&notes[totalCount]); */ 
5324: /* MUTANT (rep_op) */    if (bin <= NBINS)
5324: /* MUTANT (rep_op) */    if (bin < NBINS)
5324: /* MUTANT (rep_op) */    if (bin > NBINS)
5324: /* MUTANT (rep_op) */    if (bin == NBINS)
5324: /* MUTANT (rep_op) */    if (bin != NBINS)
5324: /* MUTANT (negate) */    if(! (bin >= NBINS))
5325: /* MUTANT (rep_const) */        bin = NBINS - 0;
5325: /* MUTANT (rep_const) */        bin = NBINS - -1;
5325: /* MUTANT (rep_const) */        bin = NBINS - ((1)+1);
5326: /* MUTANT (del_stmt) */ /*     ++hist[bin]; */ 
5326: /* MUTANT (rep_op) */    --hist[bin];
5335: /* MUTANT (del_stmt) */ /*     size_t size, incr; */ 
5336: /* MUTANT (del_stmt) */ /*     ptrdiff_t delta; */ 
5338: /* MUTANT (del_stmt) */ /*     size = TRYNOTE_SIZE(cg->treeContext.tryCount); */ 
5339: /* MUTANT (rep_op) */    if (size < cg->tryNoteSpace)
5339: /* MUTANT (rep_op) */    if (size > cg->tryNoteSpace)
5339: /* MUTANT (rep_op) */    if (size >= cg->tryNoteSpace)
5339: /* MUTANT (rep_op) */    if (size == cg->tryNoteSpace)
5339: /* MUTANT (rep_op) */    if (size != cg->tryNoteSpace)
5339: /* MUTANT (negate) */    if(! (size <= cg->tryNoteSpace))
5350: /* MUTANT (negate) */    if(! (!cg->tryBase)) {
5351: /* MUTANT (del_stmt) */ /*         size = JS_ROUNDUP(size, TRYNOTE_SIZE(TRYNOTE_CHUNK)); */ 
5352: /* MUTANT (del_stmt) */ /*         JS_ARENA_ALLOCATE_CAST(cg->tryBase, JSTryNote *, &cx->tempPool, size); */ 
5353: /* MUTANT (negate) */        if(! (!cg->tryBase))
5355: /* MUTANT (del_stmt) */ /*         cg->tryNoteSpace = size; */ 
5356: /* MUTANT (del_stmt) */ /*         cg->tryNext = cg->tryBase; */ 
5358: /* MUTANT (del_stmt) */ /*         delta = PTRDIFF((char *)cg->tryNext, (char *)cg->tryBase, char); */ 
5359: /* MUTANT (del_stmt) */ /*         incr = size - cg->tryNoteSpace; */ 
5360: /* MUTANT (del_stmt) */ /*         incr = JS_ROUNDUP(incr, TRYNOTE_SIZE(TRYNOTE_CHUNK)); */ 
5361: /* MUTANT (del_stmt) */ /*         size = cg->tryNoteSpace; */ 
5362: /* MUTANT (del_stmt) */ /*         JS_ARENA_GROW_CAST(cg->tryBase, JSTryNote *, &cx->tempPool, size, incr); */ 
5363: /* MUTANT (negate) */        if(! (!cg->tryBase))
5365: /* MUTANT (del_stmt) */ /*         cg->tryNoteSpace = size + incr; */ 
5365: /* MUTANT (rep_op) */        cg->tryNoteSpace = size - incr;
5365: /* MUTANT (rep_op) */        cg->tryNoteSpace = size * incr;
5365: /* MUTANT (rep_op) */        cg->tryNoteSpace = size % incr;
5366: /* MUTANT (del_stmt) */ /*         cg->tryNext = (JSTryNote *)((char *)cg->tryBase + delta); */ 
5366: /* MUTANT (rep_op) */        cg->tryNext = (JSTryNote *)((char *)cg->tryBase - delta);
5366: /* MUTANT (rep_op) */        cg->tryNext = (JSTryNote *)((char *)cg->tryBase * delta);
5366: /* MUTANT (rep_op) */        cg->tryNext = (JSTryNote *)((char *)cg->tryBase % delta);
5375: /* MUTANT (del_stmt) */ /*     JSTryNote *tn; */ 
5377: /* MUTANT (del_stmt) */ /*     JS_ASSERT(cg->tryBase <= cg->tryNext); */ 
5377: /* MUTANT (rep_op) */    JS_ASSERT(cg->tryBase < cg->tryNext);
5377: /* MUTANT (rep_op) */    JS_ASSERT(cg->tryBase > cg->tryNext);
5377: /* MUTANT (rep_op) */    JS_ASSERT(cg->tryBase >= cg->tryNext);
5377: /* MUTANT (rep_op) */    JS_ASSERT(cg->tryBase == cg->tryNext);
5377: /* MUTANT (rep_op) */    JS_ASSERT(cg->tryBase != cg->tryNext);
5378: /* MUTANT (del_stmt) */ /*     JS_ASSERT(catchStart >= 0); */ 
5378: /* MUTANT (rep_op) */    JS_ASSERT(catchStart <= 0);
5378: /* MUTANT (rep_op) */    JS_ASSERT(catchStart < 0);
5378: /* MUTANT (rep_op) */    JS_ASSERT(catchStart > 0);
5378: /* MUTANT (rep_op) */    JS_ASSERT(catchStart == 0);
5378: /* MUTANT (rep_op) */    JS_ASSERT(catchStart != 0);
5378: /* MUTANT (rep_const) */    JS_ASSERT(catchStart >= 1);
5378: /* MUTANT (rep_const) */    JS_ASSERT(catchStart >= -1);
5379: /* MUTANT (del_stmt) */ /*     tn = cg->tryNext++; */ 
5379: /* MUTANT (rep_op) */    tn = cg->tryNext--;
5380: /* MUTANT (del_stmt) */ /*     tn->start = start; */ 
5381: /* MUTANT (del_stmt) */ /*     tn->length = end - start; */ 
5382: /* MUTANT (del_stmt) */ /*     tn->catchStart = catchStart; */ 
5383: /* MUTANT (del_stmt) */ /*     return tn; */ 
5389: /* MUTANT (del_stmt) */ /*     uintN count; */ 
5391: /* MUTANT (del_stmt) */ /*     count = PTRDIFF(cg->tryNext, cg->tryBase, JSTryNote); */ 
5392: /* MUTANT (negate) */    if(! (!count))
5395: /* MUTANT (del_stmt) */ /*     memcpy(notes, cg->tryBase, TRYNOTE_SIZE(count)); */ 
5396: /* MUTANT (del_stmt) */ /*     notes[count].start = 0; */ 
5396: /* MUTANT (rep_const) */    notes[count].start = 1;
5396: /* MUTANT (rep_const) */    notes[count].start = -1;
5397: /* MUTANT (del_stmt) */ /*     notes[count].length = CG_OFFSET(cg); */ 
5398: /* MUTANT (del_stmt) */ /*     notes[count].catchStart = 0; */ 
5398: /* MUTANT (rep_const) */    notes[count].catchStart = 1;
5398: /* MUTANT (rep_const) */    notes[count].catchStart = -1;
