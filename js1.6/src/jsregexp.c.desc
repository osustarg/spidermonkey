70: /* MUTANT (rep_const) */    REOP_EMPTY         = 1,  /* match rest of input against rest of r.e. */
70: /* MUTANT (rep_const) */    REOP_EMPTY         = -1,  /* match rest of input against rest of r.e. */
71: /* MUTANT (rep_const) */    REOP_ALT           = 0,  /* alternative subexpressions in kid and next */
71: /* MUTANT (rep_const) */    REOP_ALT           = -1,  /* alternative subexpressions in kid and next */
71: /* MUTANT (rep_const) */    REOP_ALT           = ((1)+1),  /* alternative subexpressions in kid and next */
72: /* MUTANT (rep_const) */    REOP_SIMPLE_START  = 0,  /* start of 'simple opcodes' */
72: /* MUTANT (rep_const) */    REOP_SIMPLE_START  = 1,  /* start of 'simple opcodes' */
72: /* MUTANT (rep_const) */    REOP_SIMPLE_START  = -1,  /* start of 'simple opcodes' */
72: /* MUTANT (rep_const) */    REOP_SIMPLE_START  = ((2)+1),  /* start of 'simple opcodes' */
72: /* MUTANT (rep_const) */    REOP_SIMPLE_START  = ((2)-1),  /* start of 'simple opcodes' */
73: /* MUTANT (rep_const) */    REOP_BOL           = 0,  /* beginning of input (or line if multiline) */
73: /* MUTANT (rep_const) */    REOP_BOL           = 1,  /* beginning of input (or line if multiline) */
73: /* MUTANT (rep_const) */    REOP_BOL           = -1,  /* beginning of input (or line if multiline) */
73: /* MUTANT (rep_const) */    REOP_BOL           = ((2)+1),  /* beginning of input (or line if multiline) */
73: /* MUTANT (rep_const) */    REOP_BOL           = ((2)-1),  /* beginning of input (or line if multiline) */
74: /* MUTANT (rep_const) */    REOP_EOL           = 0,  /* end of input (or line if multiline) */
74: /* MUTANT (rep_const) */    REOP_EOL           = 1,  /* end of input (or line if multiline) */
74: /* MUTANT (rep_const) */    REOP_EOL           = -1,  /* end of input (or line if multiline) */
74: /* MUTANT (rep_const) */    REOP_EOL           = ((3)+1),  /* end of input (or line if multiline) */
74: /* MUTANT (rep_const) */    REOP_EOL           = ((3)-1),  /* end of input (or line if multiline) */
75: /* MUTANT (rep_const) */    REOP_WBDRY         = 0,  /* match "" at word boundary */
75: /* MUTANT (rep_const) */    REOP_WBDRY         = 1,  /* match "" at word boundary */
75: /* MUTANT (rep_const) */    REOP_WBDRY         = -1,  /* match "" at word boundary */
75: /* MUTANT (rep_const) */    REOP_WBDRY         = ((4)+1),  /* match "" at word boundary */
75: /* MUTANT (rep_const) */    REOP_WBDRY         = ((4)-1),  /* match "" at word boundary */
76: /* MUTANT (rep_const) */    REOP_WNONBDRY      = 0,  /* match "" at word non-boundary */
76: /* MUTANT (rep_const) */    REOP_WNONBDRY      = 1,  /* match "" at word non-boundary */
76: /* MUTANT (rep_const) */    REOP_WNONBDRY      = -1,  /* match "" at word non-boundary */
76: /* MUTANT (rep_const) */    REOP_WNONBDRY      = ((5)+1),  /* match "" at word non-boundary */
76: /* MUTANT (rep_const) */    REOP_WNONBDRY      = ((5)-1),  /* match "" at word non-boundary */
77: /* MUTANT (rep_const) */    REOP_DOT           = 0,  /* stands for any character */
77: /* MUTANT (rep_const) */    REOP_DOT           = 1,  /* stands for any character */
77: /* MUTANT (rep_const) */    REOP_DOT           = -1,  /* stands for any character */
77: /* MUTANT (rep_const) */    REOP_DOT           = ((6)+1),  /* stands for any character */
77: /* MUTANT (rep_const) */    REOP_DOT           = ((6)-1),  /* stands for any character */
78: /* MUTANT (rep_const) */    REOP_DIGIT         = 0,  /* match a digit char: [0-9] */
78: /* MUTANT (rep_const) */    REOP_DIGIT         = 1,  /* match a digit char: [0-9] */
78: /* MUTANT (rep_const) */    REOP_DIGIT         = -1,  /* match a digit char: [0-9] */
78: /* MUTANT (rep_const) */    REOP_DIGIT         = ((7)+1),  /* match a digit char: [0-9] */
78: /* MUTANT (rep_const) */    REOP_DIGIT         = ((7)-1),  /* match a digit char: [0-9] */
79: /* MUTANT (rep_const) */    REOP_NONDIGIT      = 0,  /* match a non-digit char: [^0-9] */
79: /* MUTANT (rep_const) */    REOP_NONDIGIT      = 1,  /* match a non-digit char: [^0-9] */
79: /* MUTANT (rep_const) */    REOP_NONDIGIT      = -1,  /* match a non-digit char: [^0-9] */
79: /* MUTANT (rep_const) */    REOP_NONDIGIT      = ((8)+1),  /* match a non-digit char: [^0-9] */
79: /* MUTANT (rep_const) */    REOP_NONDIGIT      = ((8)-1),  /* match a non-digit char: [^0-9] */
80: /* MUTANT (rep_const) */    REOP_ALNUM         = 0,  /* match an alphanumeric char: [0-9a-z_A-Z] */
80: /* MUTANT (rep_const) */    REOP_ALNUM         = 1,  /* match an alphanumeric char: [0-9a-z_A-Z] */
80: /* MUTANT (rep_const) */    REOP_ALNUM         = -1,  /* match an alphanumeric char: [0-9a-z_A-Z] */
80: /* MUTANT (rep_const) */    REOP_ALNUM         = ((9)+1),  /* match an alphanumeric char: [0-9a-z_A-Z] */
80: /* MUTANT (rep_const) */    REOP_ALNUM         = ((9)-1),  /* match an alphanumeric char: [0-9a-z_A-Z] */
81: /* MUTANT (rep_const) */    REOP_NONALNUM      = 0, /* match a non-alphanumeric char: [^0-9a-z_A-Z] */
81: /* MUTANT (rep_const) */    REOP_NONALNUM      = 1, /* match a non-alphanumeric char: [^0-9a-z_A-Z] */
81: /* MUTANT (rep_const) */    REOP_NONALNUM      = -1, /* match a non-alphanumeric char: [^0-9a-z_A-Z] */
81: /* MUTANT (rep_const) */    REOP_NONALNUM      = ((10)+1), /* match a non-alphanumeric char: [^0-9a-z_A-Z] */
81: /* MUTANT (rep_const) */    REOP_NONALNUM      = ((10)-1), /* match a non-alphanumeric char: [^0-9a-z_A-Z] */
82: /* MUTANT (rep_const) */    REOP_SPACE         = 0, /* match a whitespace char */
82: /* MUTANT (rep_const) */    REOP_SPACE         = 1, /* match a whitespace char */
82: /* MUTANT (rep_const) */    REOP_SPACE         = -1, /* match a whitespace char */
82: /* MUTANT (rep_const) */    REOP_SPACE         = ((11)+1), /* match a whitespace char */
82: /* MUTANT (rep_const) */    REOP_SPACE         = ((11)-1), /* match a whitespace char */
83: /* MUTANT (rep_const) */    REOP_NONSPACE      = 0, /* match a non-whitespace char */
83: /* MUTANT (rep_const) */    REOP_NONSPACE      = 1, /* match a non-whitespace char */
83: /* MUTANT (rep_const) */    REOP_NONSPACE      = -1, /* match a non-whitespace char */
83: /* MUTANT (rep_const) */    REOP_NONSPACE      = ((12)+1), /* match a non-whitespace char */
83: /* MUTANT (rep_const) */    REOP_NONSPACE      = ((12)-1), /* match a non-whitespace char */
84: /* MUTANT (rep_const) */    REOP_BACKREF       = 0, /* back-reference (e.g., \1) to a parenthetical */
84: /* MUTANT (rep_const) */    REOP_BACKREF       = 1, /* back-reference (e.g., \1) to a parenthetical */
84: /* MUTANT (rep_const) */    REOP_BACKREF       = -1, /* back-reference (e.g., \1) to a parenthetical */
84: /* MUTANT (rep_const) */    REOP_BACKREF       = ((13)+1), /* back-reference (e.g., \1) to a parenthetical */
84: /* MUTANT (rep_const) */    REOP_BACKREF       = ((13)-1), /* back-reference (e.g., \1) to a parenthetical */
85: /* MUTANT (rep_const) */    REOP_FLAT          = 0, /* match a flat string */
85: /* MUTANT (rep_const) */    REOP_FLAT          = 1, /* match a flat string */
85: /* MUTANT (rep_const) */    REOP_FLAT          = -1, /* match a flat string */
85: /* MUTANT (rep_const) */    REOP_FLAT          = ((14)+1), /* match a flat string */
85: /* MUTANT (rep_const) */    REOP_FLAT          = ((14)-1), /* match a flat string */
86: /* MUTANT (rep_const) */    REOP_FLAT1         = 0, /* match a single char */
86: /* MUTANT (rep_const) */    REOP_FLAT1         = 1, /* match a single char */
86: /* MUTANT (rep_const) */    REOP_FLAT1         = -1, /* match a single char */
86: /* MUTANT (rep_const) */    REOP_FLAT1         = ((15)+1), /* match a single char */
86: /* MUTANT (rep_const) */    REOP_FLAT1         = ((15)-1), /* match a single char */
87: /* MUTANT (rep_const) */    REOP_FLATi         = 0, /* case-independent REOP_FLAT */
87: /* MUTANT (rep_const) */    REOP_FLATi         = 1, /* case-independent REOP_FLAT */
87: /* MUTANT (rep_const) */    REOP_FLATi         = -1, /* case-independent REOP_FLAT */
87: /* MUTANT (rep_const) */    REOP_FLATi         = ((16)+1), /* case-independent REOP_FLAT */
87: /* MUTANT (rep_const) */    REOP_FLATi         = ((16)-1), /* case-independent REOP_FLAT */
88: /* MUTANT (rep_const) */    REOP_FLAT1i        = 0, /* case-independent REOP_FLAT1 */
88: /* MUTANT (rep_const) */    REOP_FLAT1i        = 1, /* case-independent REOP_FLAT1 */
88: /* MUTANT (rep_const) */    REOP_FLAT1i        = -1, /* case-independent REOP_FLAT1 */
88: /* MUTANT (rep_const) */    REOP_FLAT1i        = ((17)+1), /* case-independent REOP_FLAT1 */
88: /* MUTANT (rep_const) */    REOP_FLAT1i        = ((17)-1), /* case-independent REOP_FLAT1 */
89: /* MUTANT (rep_const) */    REOP_UCFLAT1       = 0, /* single Unicode char */
89: /* MUTANT (rep_const) */    REOP_UCFLAT1       = 1, /* single Unicode char */
89: /* MUTANT (rep_const) */    REOP_UCFLAT1       = -1, /* single Unicode char */
89: /* MUTANT (rep_const) */    REOP_UCFLAT1       = ((18)+1), /* single Unicode char */
89: /* MUTANT (rep_const) */    REOP_UCFLAT1       = ((18)-1), /* single Unicode char */
90: /* MUTANT (rep_const) */    REOP_UCFLAT1i      = 0, /* case-independent REOP_UCFLAT1 */
90: /* MUTANT (rep_const) */    REOP_UCFLAT1i      = 1, /* case-independent REOP_UCFLAT1 */
90: /* MUTANT (rep_const) */    REOP_UCFLAT1i      = -1, /* case-independent REOP_UCFLAT1 */
90: /* MUTANT (rep_const) */    REOP_UCFLAT1i      = ((19)+1), /* case-independent REOP_UCFLAT1 */
90: /* MUTANT (rep_const) */    REOP_UCFLAT1i      = ((19)-1), /* case-independent REOP_UCFLAT1 */
91: /* MUTANT (rep_const) */    REOP_UCFLAT        = 0, /* flat Unicode string; len immediate counts chars */
91: /* MUTANT (rep_const) */    REOP_UCFLAT        = 1, /* flat Unicode string; len immediate counts chars */
91: /* MUTANT (rep_const) */    REOP_UCFLAT        = -1, /* flat Unicode string; len immediate counts chars */
91: /* MUTANT (rep_const) */    REOP_UCFLAT        = ((20)+1), /* flat Unicode string; len immediate counts chars */
91: /* MUTANT (rep_const) */    REOP_UCFLAT        = ((20)-1), /* flat Unicode string; len immediate counts chars */
92: /* MUTANT (rep_const) */    REOP_UCFLATi       = 0, /* case-independent REOP_UCFLAT */
92: /* MUTANT (rep_const) */    REOP_UCFLATi       = 1, /* case-independent REOP_UCFLAT */
92: /* MUTANT (rep_const) */    REOP_UCFLATi       = -1, /* case-independent REOP_UCFLAT */
92: /* MUTANT (rep_const) */    REOP_UCFLATi       = ((21)+1), /* case-independent REOP_UCFLAT */
92: /* MUTANT (rep_const) */    REOP_UCFLATi       = ((21)-1), /* case-independent REOP_UCFLAT */
93: /* MUTANT (rep_const) */    REOP_CLASS         = 0, /* character class with index */
93: /* MUTANT (rep_const) */    REOP_CLASS         = 1, /* character class with index */
93: /* MUTANT (rep_const) */    REOP_CLASS         = -1, /* character class with index */
93: /* MUTANT (rep_const) */    REOP_CLASS         = ((22)+1), /* character class with index */
93: /* MUTANT (rep_const) */    REOP_CLASS         = ((22)-1), /* character class with index */
94: /* MUTANT (rep_const) */    REOP_NCLASS        = 0, /* negated character class with index */
94: /* MUTANT (rep_const) */    REOP_NCLASS        = 1, /* negated character class with index */
94: /* MUTANT (rep_const) */    REOP_NCLASS        = -1, /* negated character class with index */
94: /* MUTANT (rep_const) */    REOP_NCLASS        = ((23)+1), /* negated character class with index */
94: /* MUTANT (rep_const) */    REOP_NCLASS        = ((23)-1), /* negated character class with index */
95: /* MUTANT (rep_const) */    REOP_SIMPLE_END    = 0, /* end of 'simple opcodes' */
95: /* MUTANT (rep_const) */    REOP_SIMPLE_END    = 1, /* end of 'simple opcodes' */
95: /* MUTANT (rep_const) */    REOP_SIMPLE_END    = -1, /* end of 'simple opcodes' */
95: /* MUTANT (rep_const) */    REOP_SIMPLE_END    = ((23)+1), /* end of 'simple opcodes' */
95: /* MUTANT (rep_const) */    REOP_SIMPLE_END    = ((23)-1), /* end of 'simple opcodes' */
96: /* MUTANT (rep_const) */    REOP_QUANT         = 0, /* quantified atom: atom{1,2} */
96: /* MUTANT (rep_const) */    REOP_QUANT         = 1, /* quantified atom: atom{1,2} */
96: /* MUTANT (rep_const) */    REOP_QUANT         = -1, /* quantified atom: atom{1,2} */
96: /* MUTANT (rep_const) */    REOP_QUANT         = ((25)+1), /* quantified atom: atom{1,2} */
96: /* MUTANT (rep_const) */    REOP_QUANT         = ((25)-1), /* quantified atom: atom{1,2} */
97: /* MUTANT (rep_const) */    REOP_STAR          = 0, /* zero or more occurrences of kid */
97: /* MUTANT (rep_const) */    REOP_STAR          = 1, /* zero or more occurrences of kid */
97: /* MUTANT (rep_const) */    REOP_STAR          = -1, /* zero or more occurrences of kid */
97: /* MUTANT (rep_const) */    REOP_STAR          = ((26)+1), /* zero or more occurrences of kid */
97: /* MUTANT (rep_const) */    REOP_STAR          = ((26)-1), /* zero or more occurrences of kid */
98: /* MUTANT (rep_const) */    REOP_PLUS          = 0, /* one or more occurrences of kid */
98: /* MUTANT (rep_const) */    REOP_PLUS          = 1, /* one or more occurrences of kid */
98: /* MUTANT (rep_const) */    REOP_PLUS          = -1, /* one or more occurrences of kid */
98: /* MUTANT (rep_const) */    REOP_PLUS          = ((27)+1), /* one or more occurrences of kid */
98: /* MUTANT (rep_const) */    REOP_PLUS          = ((27)-1), /* one or more occurrences of kid */
99: /* MUTANT (rep_const) */    REOP_OPT           = 0, /* optional subexpression in kid */
99: /* MUTANT (rep_const) */    REOP_OPT           = 1, /* optional subexpression in kid */
99: /* MUTANT (rep_const) */    REOP_OPT           = -1, /* optional subexpression in kid */
99: /* MUTANT (rep_const) */    REOP_OPT           = ((28)+1), /* optional subexpression in kid */
99: /* MUTANT (rep_const) */    REOP_OPT           = ((28)-1), /* optional subexpression in kid */
100: /* MUTANT (rep_const) */    REOP_LPAREN        = 0, /* left paren bytecode: kid is u.num'th sub-regexp */
100: /* MUTANT (rep_const) */    REOP_LPAREN        = 1, /* left paren bytecode: kid is u.num'th sub-regexp */
100: /* MUTANT (rep_const) */    REOP_LPAREN        = -1, /* left paren bytecode: kid is u.num'th sub-regexp */
100: /* MUTANT (rep_const) */    REOP_LPAREN        = ((29)+1), /* left paren bytecode: kid is u.num'th sub-regexp */
100: /* MUTANT (rep_const) */    REOP_LPAREN        = ((29)-1), /* left paren bytecode: kid is u.num'th sub-regexp */
101: /* MUTANT (rep_const) */    REOP_RPAREN        = 0, /* right paren bytecode */
101: /* MUTANT (rep_const) */    REOP_RPAREN        = 1, /* right paren bytecode */
101: /* MUTANT (rep_const) */    REOP_RPAREN        = -1, /* right paren bytecode */
101: /* MUTANT (rep_const) */    REOP_RPAREN        = ((30)+1), /* right paren bytecode */
101: /* MUTANT (rep_const) */    REOP_RPAREN        = ((30)-1), /* right paren bytecode */
102: /* MUTANT (rep_const) */    REOP_JUMP          = 0, /* for deoptimized closure loops */
102: /* MUTANT (rep_const) */    REOP_JUMP          = 1, /* for deoptimized closure loops */
102: /* MUTANT (rep_const) */    REOP_JUMP          = -1, /* for deoptimized closure loops */
102: /* MUTANT (rep_const) */    REOP_JUMP          = ((31)+1), /* for deoptimized closure loops */
102: /* MUTANT (rep_const) */    REOP_JUMP          = ((31)-1), /* for deoptimized closure loops */
103: /* MUTANT (rep_const) */    REOP_DOTSTAR       = 0, /* optimize .* to use a single opcode */
103: /* MUTANT (rep_const) */    REOP_DOTSTAR       = 1, /* optimize .* to use a single opcode */
103: /* MUTANT (rep_const) */    REOP_DOTSTAR       = -1, /* optimize .* to use a single opcode */
103: /* MUTANT (rep_const) */    REOP_DOTSTAR       = ((32)+1), /* optimize .* to use a single opcode */
103: /* MUTANT (rep_const) */    REOP_DOTSTAR       = ((32)-1), /* optimize .* to use a single opcode */
104: /* MUTANT (rep_const) */    REOP_ANCHOR        = 0, /* like .* but skips left context to unanchored r.e. */
104: /* MUTANT (rep_const) */    REOP_ANCHOR        = 1, /* like .* but skips left context to unanchored r.e. */
104: /* MUTANT (rep_const) */    REOP_ANCHOR        = -1, /* like .* but skips left context to unanchored r.e. */
104: /* MUTANT (rep_const) */    REOP_ANCHOR        = ((33)+1), /* like .* but skips left context to unanchored r.e. */
104: /* MUTANT (rep_const) */    REOP_ANCHOR        = ((33)-1), /* like .* but skips left context to unanchored r.e. */
105: /* MUTANT (rep_const) */    REOP_EOLONLY       = 0, /* $ not preceded by any pattern */
105: /* MUTANT (rep_const) */    REOP_EOLONLY       = 1, /* $ not preceded by any pattern */
105: /* MUTANT (rep_const) */    REOP_EOLONLY       = -1, /* $ not preceded by any pattern */
105: /* MUTANT (rep_const) */    REOP_EOLONLY       = ((34)+1), /* $ not preceded by any pattern */
105: /* MUTANT (rep_const) */    REOP_EOLONLY       = ((34)-1), /* $ not preceded by any pattern */
106: /* MUTANT (rep_const) */    REOP_BACKREFi      = 0, /* case-independent REOP_BACKREF */
106: /* MUTANT (rep_const) */    REOP_BACKREFi      = 1, /* case-independent REOP_BACKREF */
106: /* MUTANT (rep_const) */    REOP_BACKREFi      = -1, /* case-independent REOP_BACKREF */
106: /* MUTANT (rep_const) */    REOP_BACKREFi      = ((37)+1), /* case-independent REOP_BACKREF */
106: /* MUTANT (rep_const) */    REOP_BACKREFi      = ((37)-1), /* case-independent REOP_BACKREF */
107: /* MUTANT (rep_const) */    REOP_LPARENNON     = 0, /* non-capturing version of REOP_LPAREN */
107: /* MUTANT (rep_const) */    REOP_LPARENNON     = 1, /* non-capturing version of REOP_LPAREN */
107: /* MUTANT (rep_const) */    REOP_LPARENNON     = -1, /* non-capturing version of REOP_LPAREN */
107: /* MUTANT (rep_const) */    REOP_LPARENNON     = ((41)+1), /* non-capturing version of REOP_LPAREN */
107: /* MUTANT (rep_const) */    REOP_LPARENNON     = ((41)-1), /* non-capturing version of REOP_LPAREN */
108: /* MUTANT (rep_const) */    REOP_ASSERT        = 0, /* zero width positive lookahead assertion */
108: /* MUTANT (rep_const) */    REOP_ASSERT        = 1, /* zero width positive lookahead assertion */
108: /* MUTANT (rep_const) */    REOP_ASSERT        = -1, /* zero width positive lookahead assertion */
108: /* MUTANT (rep_const) */    REOP_ASSERT        = ((43)+1), /* zero width positive lookahead assertion */
108: /* MUTANT (rep_const) */    REOP_ASSERT        = ((43)-1), /* zero width positive lookahead assertion */
109: /* MUTANT (rep_const) */    REOP_ASSERT_NOT    = 0, /* zero width negative lookahead assertion */
109: /* MUTANT (rep_const) */    REOP_ASSERT_NOT    = 1, /* zero width negative lookahead assertion */
109: /* MUTANT (rep_const) */    REOP_ASSERT_NOT    = -1, /* zero width negative lookahead assertion */
109: /* MUTANT (rep_const) */    REOP_ASSERT_NOT    = ((44)+1), /* zero width negative lookahead assertion */
109: /* MUTANT (rep_const) */    REOP_ASSERT_NOT    = ((44)-1), /* zero width negative lookahead assertion */
110: /* MUTANT (rep_const) */    REOP_ASSERTTEST    = 0, /* sentinel at end of assertion child */
110: /* MUTANT (rep_const) */    REOP_ASSERTTEST    = 1, /* sentinel at end of assertion child */
110: /* MUTANT (rep_const) */    REOP_ASSERTTEST    = -1, /* sentinel at end of assertion child */
110: /* MUTANT (rep_const) */    REOP_ASSERTTEST    = ((45)+1), /* sentinel at end of assertion child */
110: /* MUTANT (rep_const) */    REOP_ASSERTTEST    = ((45)-1), /* sentinel at end of assertion child */
111: /* MUTANT (rep_const) */    REOP_ASSERTNOTTEST = 0, /* sentinel at end of !assertion child */
111: /* MUTANT (rep_const) */    REOP_ASSERTNOTTEST = 1, /* sentinel at end of !assertion child */
111: /* MUTANT (rep_const) */    REOP_ASSERTNOTTEST = -1, /* sentinel at end of !assertion child */
111: /* MUTANT (rep_const) */    REOP_ASSERTNOTTEST = ((46)+1), /* sentinel at end of !assertion child */
111: /* MUTANT (rep_const) */    REOP_ASSERTNOTTEST = ((46)-1), /* sentinel at end of !assertion child */
112: /* MUTANT (rep_const) */    REOP_MINIMALSTAR   = 0, /* non-greedy version of * */
112: /* MUTANT (rep_const) */    REOP_MINIMALSTAR   = 1, /* non-greedy version of * */
112: /* MUTANT (rep_const) */    REOP_MINIMALSTAR   = -1, /* non-greedy version of * */
112: /* MUTANT (rep_const) */    REOP_MINIMALSTAR   = ((47)+1), /* non-greedy version of * */
112: /* MUTANT (rep_const) */    REOP_MINIMALSTAR   = ((47)-1), /* non-greedy version of * */
113: /* MUTANT (rep_const) */    REOP_MINIMALPLUS   = 0, /* non-greedy version of + */
113: /* MUTANT (rep_const) */    REOP_MINIMALPLUS   = 1, /* non-greedy version of + */
113: /* MUTANT (rep_const) */    REOP_MINIMALPLUS   = -1, /* non-greedy version of + */
113: /* MUTANT (rep_const) */    REOP_MINIMALPLUS   = ((48)+1), /* non-greedy version of + */
113: /* MUTANT (rep_const) */    REOP_MINIMALPLUS   = ((48)-1), /* non-greedy version of + */
114: /* MUTANT (rep_const) */    REOP_MINIMALOPT    = 0, /* non-greedy version of ? */
114: /* MUTANT (rep_const) */    REOP_MINIMALOPT    = 1, /* non-greedy version of ? */
114: /* MUTANT (rep_const) */    REOP_MINIMALOPT    = -1, /* non-greedy version of ? */
114: /* MUTANT (rep_const) */    REOP_MINIMALOPT    = ((49)+1), /* non-greedy version of ? */
114: /* MUTANT (rep_const) */    REOP_MINIMALOPT    = ((49)-1), /* non-greedy version of ? */
115: /* MUTANT (rep_const) */    REOP_MINIMALQUANT  = 0, /* non-greedy version of {} */
115: /* MUTANT (rep_const) */    REOP_MINIMALQUANT  = 1, /* non-greedy version of {} */
115: /* MUTANT (rep_const) */    REOP_MINIMALQUANT  = -1, /* non-greedy version of {} */
115: /* MUTANT (rep_const) */    REOP_MINIMALQUANT  = ((50)+1), /* non-greedy version of {} */
115: /* MUTANT (rep_const) */    REOP_MINIMALQUANT  = ((50)-1), /* non-greedy version of {} */
116: /* MUTANT (rep_const) */    REOP_ENDCHILD      = 0, /* sentinel at end of quantifier child */
116: /* MUTANT (rep_const) */    REOP_ENDCHILD      = 1, /* sentinel at end of quantifier child */
116: /* MUTANT (rep_const) */    REOP_ENDCHILD      = -1, /* sentinel at end of quantifier child */
116: /* MUTANT (rep_const) */    REOP_ENDCHILD      = ((51)+1), /* sentinel at end of quantifier child */
116: /* MUTANT (rep_const) */    REOP_ENDCHILD      = ((51)-1), /* sentinel at end of quantifier child */
117: /* MUTANT (rep_const) */    REOP_REPEAT        = 0, /* directs execution of greedy quantifier */
117: /* MUTANT (rep_const) */    REOP_REPEAT        = 1, /* directs execution of greedy quantifier */
117: /* MUTANT (rep_const) */    REOP_REPEAT        = -1, /* directs execution of greedy quantifier */
117: /* MUTANT (rep_const) */    REOP_REPEAT        = ((52)+1), /* directs execution of greedy quantifier */
117: /* MUTANT (rep_const) */    REOP_REPEAT        = ((52)-1), /* directs execution of greedy quantifier */
118: /* MUTANT (rep_const) */    REOP_MINIMALREPEAT = 0, /* directs execution of non-greedy quantifier */
118: /* MUTANT (rep_const) */    REOP_MINIMALREPEAT = 1, /* directs execution of non-greedy quantifier */
118: /* MUTANT (rep_const) */    REOP_MINIMALREPEAT = -1, /* directs execution of non-greedy quantifier */
118: /* MUTANT (rep_const) */    REOP_MINIMALREPEAT = ((53)+1), /* directs execution of non-greedy quantifier */
118: /* MUTANT (rep_const) */    REOP_MINIMALREPEAT = ((53)-1), /* directs execution of non-greedy quantifier */
119: /* MUTANT (rep_const) */    REOP_ALTPREREQ     = 0, /* prerequisite for ALT, either of two chars */
119: /* MUTANT (rep_const) */    REOP_ALTPREREQ     = 1, /* prerequisite for ALT, either of two chars */
119: /* MUTANT (rep_const) */    REOP_ALTPREREQ     = -1, /* prerequisite for ALT, either of two chars */
119: /* MUTANT (rep_const) */    REOP_ALTPREREQ     = ((54)+1), /* prerequisite for ALT, either of two chars */
119: /* MUTANT (rep_const) */    REOP_ALTPREREQ     = ((54)-1), /* prerequisite for ALT, either of two chars */
120: /* MUTANT (rep_const) */    REOP_ALTPREREQ2    = 0, /* prerequisite for ALT, a char or a class */
120: /* MUTANT (rep_const) */    REOP_ALTPREREQ2    = 1, /* prerequisite for ALT, a char or a class */
120: /* MUTANT (rep_const) */    REOP_ALTPREREQ2    = -1, /* prerequisite for ALT, a char or a class */
120: /* MUTANT (rep_const) */    REOP_ALTPREREQ2    = ((55)+1), /* prerequisite for ALT, a char or a class */
120: /* MUTANT (rep_const) */    REOP_ALTPREREQ2    = ((55)-1), /* prerequisite for ALT, a char or a class */
121: /* MUTANT (rep_const) */    REOP_ENDALT        = 0, /* end of final alternate */
121: /* MUTANT (rep_const) */    REOP_ENDALT        = 1, /* end of final alternate */
121: /* MUTANT (rep_const) */    REOP_ENDALT        = -1, /* end of final alternate */
121: /* MUTANT (rep_const) */    REOP_ENDALT        = ((56)+1), /* end of final alternate */
121: /* MUTANT (rep_const) */    REOP_ENDALT        = ((56)-1), /* end of final alternate */
122: /* MUTANT (rep_const) */    REOP_CONCAT        = 0, /* concatenation of terms (parse time only) */
122: /* MUTANT (rep_const) */    REOP_CONCAT        = 1, /* concatenation of terms (parse time only) */
122: /* MUTANT (rep_const) */    REOP_CONCAT        = -1, /* concatenation of terms (parse time only) */
122: /* MUTANT (rep_const) */    REOP_CONCAT        = ((57)+1), /* concatenation of terms (parse time only) */
122: /* MUTANT (rep_const) */    REOP_CONCAT        = ((57)-1), /* concatenation of terms (parse time only) */
131: /* MUTANT (del_stmt) */ /*     REOp            op; */          /* r.e. op bytecode */
132: /* MUTANT (del_stmt) */ /*     RENode          *next; */       /* next in concatenation order */
133: /* MUTANT (del_stmt) */ /*     void            *kid; */        /* first operand */
135: /* MUTANT (del_stmt) */ /*         void        *kid2; */       /* second operand */
136: /* MUTANT (del_stmt) */ /*         jsint       num; */         /* could be a number */
137: /* MUTANT (del_stmt) */ /*         size_t      parenIndex; */  /* or a parenthesis index */
139: /* MUTANT (del_stmt) */ /*             uintN  min; */ 
140: /* MUTANT (del_stmt) */ /*             uintN  max; */ 
141: /* MUTANT (del_stmt) */ /*             JSPackedBool greedy; */ 
142: /* MUTANT (del_stmt) */ /*         } range; */ 
144: /* MUTANT (del_stmt) */ /*             size_t  startIndex; */ 
145: /* MUTANT (del_stmt) */ /*             size_t  kidlen; */      /* length of string at kid, in jschars */
146: /* MUTANT (del_stmt) */ /*             size_t  index; */       /* index into class list */
147: /* MUTANT (del_stmt) */ /*             uint16  bmsize; */      /* bitmap size, based on max char code */
148: /* MUTANT (del_stmt) */ /*             JSPackedBool sense; */ 
149: /* MUTANT (del_stmt) */ /*         } ucclass; */ 
151: /* MUTANT (del_stmt) */ /*             jschar  chr; */         /* of one character */
152: /* MUTANT (del_stmt) */ /*             size_t  length; */      /* or many (via the kid) */
153: /* MUTANT (del_stmt) */ /*         } flat; */ 
155: /* MUTANT (del_stmt) */ /*             RENode  *kid2; */       /* second operand from ALT */
156: /* MUTANT (del_stmt) */ /*             jschar  ch1; */         /* match char for ALTPREREQ */
157: /* MUTANT (del_stmt) */ /*             jschar  ch2; */         /* ditto, or class index for ALTPREREQ2 */
158: /* MUTANT (del_stmt) */ /*         } altprereq; */ 
159: /* MUTANT (del_stmt) */ /*     } u; */ 
160: /* MUTANT (del_stmt) */ /* }; */ 
163: /* MUTANT (rep_op) */                             ((c <= 'a') && (c <= 'z')) )
163: /* MUTANT (rep_op) */                             ((c < 'a') && (c <= 'z')) )
163: /* MUTANT (rep_op) */                             ((c > 'a') && (c <= 'z')) )
163: /* MUTANT (rep_op) */                             ((c == 'a') && (c <= 'z')) )
163: /* MUTANT (rep_op) */                             ((c != 'a') && (c <= 'z')) )
163: /* MUTANT (rep_op) */                             ((c >= 'a') || (c <= 'z')) )
163: /* MUTANT (rep_op) */                             ((c >= 'a') && (c < 'z')) )
163: /* MUTANT (rep_op) */                             ((c >= 'a') && (c > 'z')) )
163: /* MUTANT (rep_op) */                             ((c >= 'a') && (c >= 'z')) )
163: /* MUTANT (rep_op) */                             ((c >= 'a') && (c == 'z')) )
163: /* MUTANT (rep_op) */                             ((c >= 'a') && (c != 'z')) )
165: /* MUTANT (rep_op) */                             (c != LINE_SEPARATOR) || (c == PARA_SEPARATOR))
165: /* MUTANT (rep_op) */                             (c == LINE_SEPARATOR) && (c == PARA_SEPARATOR))
165: /* MUTANT (rep_op) */                             (c == LINE_SEPARATOR) || (c != PARA_SEPARATOR))
167: #define CLASS_CACHE_SIZE    0 /* MUTANT (rep_const) */
167: #define CLASS_CACHE_SIZE    1 /* MUTANT (rep_const) */
167: #define CLASS_CACHE_SIZE    -1 /* MUTANT (rep_const) */
167: #define CLASS_CACHE_SIZE    ((4)+1) /* MUTANT (rep_const) */
167: #define CLASS_CACHE_SIZE    ((4)-1) /* MUTANT (rep_const) */
170: /* MUTANT (del_stmt) */ /*     JSContext       *context; */ 
171: /* MUTANT (del_stmt) */ /*     JSTokenStream   *tokenStream; */  /* For reporting errors */
172: /* MUTANT (del_stmt) */ /*     const jschar    *cpbegin; */ 
173: /* MUTANT (del_stmt) */ /*     const jschar    *cpend; */ 
174: /* MUTANT (del_stmt) */ /*     const jschar    *cp; */ 
175: /* MUTANT (del_stmt) */ /*     size_t          parenCount; */ 
176: /* MUTANT (del_stmt) */ /*     size_t          classCount; */    /* number of [] encountered */
177: /* MUTANT (del_stmt) */ /*     size_t          treeDepth; */     /* maximum depth of parse tree */
178: /* MUTANT (del_stmt) */ /*     size_t          progLength; */    /* estimated bytecode length */
179: /* MUTANT (del_stmt) */ /*     RENode          *result; */ 
180: /* MUTANT (del_stmt) */ /*     size_t          classBitmapsMem; */  /* memory to hold all class bitmaps */
182: /* MUTANT (del_stmt) */ /*         const jschar *start; */         /* small cache of class strings */
183: /* MUTANT (del_stmt) */ /*         size_t length; */               /* since they're often the same */
184: /* MUTANT (del_stmt) */ /*         size_t index; */ 
185: /* MUTANT (del_stmt) */ /*     } classCache[CLASS_CACHE_SIZE]; */ 
186: /* MUTANT (del_stmt) */ /*     uint16          flags; */ 
187: /* MUTANT (del_stmt) */ /* } CompilerState; */ 
190: /* MUTANT (del_stmt) */ /*     jsbytecode      *altHead; */        /* start of REOP_ALT* opcode */
191: /* MUTANT (del_stmt) */ /*     jsbytecode      *nextAltFixup; */   /* fixup pointer to next-alt offset */
192: /* MUTANT (del_stmt) */ /*     jsbytecode      *nextTermFixup; */  /* fixup ptr. to REOP_JUMP offset */
193: /* MUTANT (del_stmt) */ /*     jsbytecode      *endTermFixup; */   /* fixup ptr. to REOPT_ALTPREREQ* offset */
194: /* MUTANT (del_stmt) */ /*     RENode          *continueNode; */   /* original REOP_ALT* node being stacked */
195: /* MUTANT (del_stmt) */ /*     jsbytecode      continueOp; */      /* REOP_JUMP or REOP_ENDALT continuation */
196: /* MUTANT (del_stmt) */ /*     JSPackedBool    jumpToJumpFlag; */  /* true if we've patched jump-to-jump to
198: /* MUTANT (del_stmt) */ /* } EmitStateStackEntry; */ 
205: #define ARG_LEN             0 /* MUTANT (rep_const) */
205: #define ARG_LEN             1 /* MUTANT (rep_const) */
205: #define ARG_LEN             -1 /* MUTANT (rep_const) */
205: #define ARG_LEN             ((2)+1) /* MUTANT (rep_const) */
205: #define ARG_LEN             ((2)-1) /* MUTANT (rep_const) */
206: #define GET_ARG(pc)         ((uint16)(((pc)[1] << 8) | (pc)[1])) /* MUTANT (rep_const) */
206: #define GET_ARG(pc)         ((uint16)(((pc)[-1] << 8) | (pc)[1])) /* MUTANT (rep_const) */
206: #define GET_ARG(pc)         ((uint16)(((pc)[0] << 0) | (pc)[1])) /* MUTANT (rep_const) */
206: #define GET_ARG(pc)         ((uint16)(((pc)[0] << 1) | (pc)[1])) /* MUTANT (rep_const) */
206: #define GET_ARG(pc)         ((uint16)(((pc)[0] << -1) | (pc)[1])) /* MUTANT (rep_const) */
206: #define GET_ARG(pc)         ((uint16)(((pc)[0] << ((8)+1)) | (pc)[1])) /* MUTANT (rep_const) */
206: #define GET_ARG(pc)         ((uint16)(((pc)[0] << ((8)-1)) | (pc)[1])) /* MUTANT (rep_const) */
206: #define GET_ARG(pc)         ((uint16)(((pc)[0] << 8) | (pc)[0])) /* MUTANT (rep_const) */
206: #define GET_ARG(pc)         ((uint16)(((pc)[0] << 8) | (pc)[-1])) /* MUTANT (rep_const) */
206: #define GET_ARG(pc)         ((uint16)(((pc)[0] << 8) | (pc)[((1)+1)])) /* MUTANT (rep_const) */
207: #define SET_ARG(pc, arg)    ((pc)[1] = (jsbytecode) ((arg) >> 8),       \ /* MUTANT (rep_const) */
207: #define SET_ARG(pc, arg)    ((pc)[-1] = (jsbytecode) ((arg) >> 8),       \ /* MUTANT (rep_const) */
207: #define SET_ARG(pc, arg)    ((pc)[0] = (jsbytecode) ((arg) >> 0),       \ /* MUTANT (rep_const) */
207: #define SET_ARG(pc, arg)    ((pc)[0] = (jsbytecode) ((arg) >> 1),       \ /* MUTANT (rep_const) */
207: #define SET_ARG(pc, arg)    ((pc)[0] = (jsbytecode) ((arg) >> -1),       \ /* MUTANT (rep_const) */
207: #define SET_ARG(pc, arg)    ((pc)[0] = (jsbytecode) ((arg) >> ((8)+1)),       \ /* MUTANT (rep_const) */
207: #define SET_ARG(pc, arg)    ((pc)[0] = (jsbytecode) ((arg) >> ((8)-1)),       \ /* MUTANT (rep_const) */
208: /* MUTANT (rep_const) */                             (pc)[0] = (jsbytecode) (arg))
208: /* MUTANT (rep_const) */                             (pc)[-1] = (jsbytecode) (arg))
208: /* MUTANT (rep_const) */                             (pc)[((1)+1)] = (jsbytecode) (arg))
211: #define OFFSET_MAX          (JS_BIT(ARG_LEN * 0) - 1) /* MUTANT (rep_const) */
211: #define OFFSET_MAX          (JS_BIT(ARG_LEN * 1) - 1) /* MUTANT (rep_const) */
211: #define OFFSET_MAX          (JS_BIT(ARG_LEN * -1) - 1) /* MUTANT (rep_const) */
211: #define OFFSET_MAX          (JS_BIT(ARG_LEN * ((8)+1)) - 1) /* MUTANT (rep_const) */
211: #define OFFSET_MAX          (JS_BIT(ARG_LEN * ((8)-1)) - 1) /* MUTANT (rep_const) */
211: #define OFFSET_MAX          (JS_BIT(ARG_LEN * 8) - 0) /* MUTANT (rep_const) */
211: #define OFFSET_MAX          (JS_BIT(ARG_LEN * 8) - -1) /* MUTANT (rep_const) */
211: #define OFFSET_MAX          (JS_BIT(ARG_LEN * 8) - ((1)+1)) /* MUTANT (rep_const) */
218: #define TREE_DEPTH_MAX  (JS_BIT(0) / sizeof(EmitStateStackEntry)) /* MUTANT (rep_const) */
218: #define TREE_DEPTH_MAX  (JS_BIT(1) / sizeof(EmitStateStackEntry)) /* MUTANT (rep_const) */
218: #define TREE_DEPTH_MAX  (JS_BIT(-1) / sizeof(EmitStateStackEntry)) /* MUTANT (rep_const) */
218: #define TREE_DEPTH_MAX  (JS_BIT(((24)+1)) / sizeof(EmitStateStackEntry)) /* MUTANT (rep_const) */
218: #define TREE_DEPTH_MAX  (JS_BIT(((24)-1)) / sizeof(EmitStateStackEntry)) /* MUTANT (rep_const) */
224: #define CLASS_BITMAPS_MEM_LIMIT JS_BIT(0) /* MUTANT (rep_const) */
224: #define CLASS_BITMAPS_MEM_LIMIT JS_BIT(1) /* MUTANT (rep_const) */
224: #define CLASS_BITMAPS_MEM_LIMIT JS_BIT(-1) /* MUTANT (rep_const) */
224: #define CLASS_BITMAPS_MEM_LIMIT JS_BIT(((24)+1)) /* MUTANT (rep_const) */
224: #define CLASS_BITMAPS_MEM_LIMIT JS_BIT(((24)-1)) /* MUTANT (rep_const) */
236: /* MUTANT (del_stmt) */ /*     size_t width; */ 
238: /* MUTANT (rep_op) */    for (width = 1; (index >>= 7) == 0; ++width) { }
238: /* MUTANT (rep_op) */    for (width = 1; (index >>= 7) != 0; --width) { }
238: /* MUTANT (rep_const) */    for (width = 0; (index >>= 7) != 0; ++width) { }
238: /* MUTANT (rep_const) */    for (width = -1; (index >>= 7) != 0; ++width) { }
238: /* MUTANT (rep_const) */    for (width = ((1)+1); (index >>= 7) != 0; ++width) { }
238: /* MUTANT (rep_const) */    for (width = 1; (index >>= 0) != 0; ++width) { }
238: /* MUTANT (rep_const) */    for (width = 1; (index >>= 1) != 0; ++width) { }
238: /* MUTANT (rep_const) */    for (width = 1; (index >>= -1) != 0; ++width) { }
238: /* MUTANT (rep_const) */    for (width = 1; (index >>= ((7)+1)) != 0; ++width) { }
238: /* MUTANT (rep_const) */    for (width = 1; (index >>= ((7)-1)) != 0; ++width) { }
238: /* MUTANT (rep_const) */    for (width = 1; (index >>= 7) != 1; ++width) { }
238: /* MUTANT (rep_const) */    for (width = 1; (index >>= 7) != -1; ++width) { }
245: /* MUTANT (del_stmt) */ /*     size_t next; */ 
247: /* MUTANT (rep_op) */    while ((next = index >> 7) == 0) {
247: /* MUTANT (rep_const) */    while ((next = index >> 0) != 0) {
247: /* MUTANT (rep_const) */    while ((next = index >> 1) != 0) {
247: /* MUTANT (rep_const) */    while ((next = index >> -1) != 0) {
247: /* MUTANT (rep_const) */    while ((next = index >> ((7)+1)) != 0) {
247: /* MUTANT (rep_const) */    while ((next = index >> ((7)-1)) != 0) {
247: /* MUTANT (rep_const) */    while ((next = index >> 7) != 1) {
247: /* MUTANT (rep_const) */    while ((next = index >> 7) != -1) {
247: /* MUTANT (negate) */    while(! ((next = index >> 7) != 0)) {
248: /* MUTANT (del_stmt) */ /*         *pc++ = (jsbytecode)(index | 0x80); */ 
248: /* MUTANT (rep_op) */        *pc-- = (jsbytecode)(index | 0x80);
248: /* MUTANT (rep_op) */        *pc++ = (jsbytecode)(index & 0x80);
248: /* MUTANT (rep_const) */        *pc++ = (jsbytecode)(index | 1x80);
248: /* MUTANT (rep_const) */        *pc++ = (jsbytecode)(index | -1x80);
249: /* MUTANT (del_stmt) */ /*         index = next; */ 
251: /* MUTANT (rep_op) */    *pc-- = (jsbytecode)index;
252: /* MUTANT (del_stmt) */ /*     return pc; */ 
258: /* MUTANT (del_stmt) */ /*     size_t nextByte; */ 
260: /* MUTANT (del_stmt) */ /*     nextByte = *pc++; */ 
260: /* MUTANT (rep_op) */    nextByte = *pc--;
261: /* MUTANT (rep_op) */    if ((nextByte & 0x80) != 0) {
261: /* MUTANT (rep_const) */    if ((nextByte & 1x80) == 0) {
261: /* MUTANT (rep_const) */    if ((nextByte & -1x80) == 0) {
261: /* MUTANT (rep_const) */    if ((nextByte & 0x80) == 1) {
261: /* MUTANT (rep_const) */    if ((nextByte & 0x80) == -1) {
261: /* MUTANT (negate) */    if(! ((nextByte & 0x80) == 0)) {
265: /* MUTANT (del_stmt) */ /*         *result = nextByte; */ 
267: /* MUTANT (del_stmt) */ /*         size_t shift = 7; */ 
267: /* MUTANT (rep_const) */        size_t shift = 0;
267: /* MUTANT (rep_const) */        size_t shift = 1;
267: /* MUTANT (rep_const) */        size_t shift = -1;
267: /* MUTANT (rep_const) */        size_t shift = ((7)+1);
267: /* MUTANT (rep_const) */        size_t shift = ((7)-1);
268: /* MUTANT (del_stmt) */ /*         *result = 0x7F & nextByte; */ 
268: /* MUTANT (rep_const) */        *result = 1x7F & nextByte;
268: /* MUTANT (rep_const) */        *result = -1x7F & nextByte;
270: /* MUTANT (del_stmt) */ /*             nextByte = *pc++; */ 
270: /* MUTANT (rep_op) */            nextByte = *pc--;
271: /* MUTANT (del_stmt) */ /*             *result |= (nextByte & 0x7F) << shift; */ 
271: /* MUTANT (rep_const) */            *result |= (nextByte & 1x7F) << shift;
271: /* MUTANT (rep_const) */            *result |= (nextByte & -1x7F) << shift;
272: /* MUTANT (del_stmt) */ /*             shift += 7; */ 
272: /* MUTANT (rep_op) */            shift -= 7;
272: /* MUTANT (rep_op) */            shift *= 7;
272: /* MUTANT (rep_op) */            shift %= 7;
272: /* MUTANT (rep_const) */            shift += 0;
272: /* MUTANT (rep_const) */            shift += 1;
272: /* MUTANT (rep_const) */            shift += -1;
272: /* MUTANT (rep_const) */            shift += ((7)+1);
272: /* MUTANT (rep_const) */            shift += ((7)-1);
273: /* MUTANT (del_stmt) */ /*         } while ((nextByte & 0x80) != 0); */ 
273: /* MUTANT (rep_op) */        } while ((nextByte & 0x80) == 0);
273: /* MUTANT (rep_const) */        } while ((nextByte & 1x80) != 0);
273: /* MUTANT (rep_const) */        } while ((nextByte & -1x80) != 0);
273: /* MUTANT (rep_const) */        } while ((nextByte & 0x80) != 1);
273: /* MUTANT (rep_const) */        } while ((nextByte & 0x80) != -1);
273: /* MUTANT (negate) */        } while(! ((nextByte & 0x80) != 0));
279: /* MUTANT (del_stmt) */ /*     ptrdiff_t index; */            /* start of contents, -1 for empty  */
280: /* MUTANT (del_stmt) */ /*     size_t length; */              /* length of capture */
281: /* MUTANT (del_stmt) */ /* } RECapture; */ 
284: /* MUTANT (del_stmt) */ /*     const jschar *cp; */ 
285: /* MUTANT (del_stmt) */ /*     RECapture parens[1]; */       /* first of 're->parenCount' captures,
285: /* MUTANT (rep_const) */    RECapture parens[0];      /* first of 're->parenCount' captures,
285: /* MUTANT (rep_const) */    RECapture parens[-1];      /* first of 're->parenCount' captures,
285: /* MUTANT (rep_const) */    RECapture parens[((1)+1)];      /* first of 're->parenCount' captures,
287: /* MUTANT (del_stmt) */ /* } REMatchState; */ 
289: /* MUTANT (del_stmt) */ /* struct REBackTrackData; */ 
292: /* MUTANT (del_stmt) */ /*     jsbytecode *continue_pc; */         /* current continuation data */
293: /* MUTANT (del_stmt) */ /*     jsbytecode continue_op; */ 
294: /* MUTANT (del_stmt) */ /*     ptrdiff_t index; */                 /* progress in text */
295: /* MUTANT (del_stmt) */ /*     size_t parenSoFar; */               /* highest indexed paren started */
298: /* MUTANT (del_stmt) */ /*             uintN min; */              /* current quantifier limits */
299: /* MUTANT (del_stmt) */ /*             uintN max; */ 
300: /* MUTANT (del_stmt) */ /*         } quantifier; */ 
302: /* MUTANT (del_stmt) */ /*             size_t top; */              /* backtrack stack state */
303: /* MUTANT (del_stmt) */ /*             size_t sz; */ 
304: /* MUTANT (del_stmt) */ /*         } assertion; */ 
305: /* MUTANT (del_stmt) */ /*     } u; */ 
306: /* MUTANT (del_stmt) */ /* } REProgState; */ 
309: /* MUTANT (del_stmt) */ /*     size_t sz; */                       /* size of previous stack entry */
310: /* MUTANT (del_stmt) */ /*     jsbytecode *backtrack_pc; */        /* where to backtrack to */
311: /* MUTANT (del_stmt) */ /*     jsbytecode backtrack_op; */ 
312: /* MUTANT (del_stmt) */ /*     const jschar *cp; */                /* index in text of match at backtrack */
313: /* MUTANT (del_stmt) */ /*     size_t parenIndex; */               /* start index of saved paren contents */
314: /* MUTANT (del_stmt) */ /*     size_t parenCount; */               /* # of saved paren contents */
315: /* MUTANT (del_stmt) */ /*     size_t saveStateStackTop; */        /* number of parent states */
318: /* MUTANT (del_stmt) */ /* } REBackTrackData; */ 
320: #define INITIAL_STATESTACK  0 /* MUTANT (rep_const) */
320: #define INITIAL_STATESTACK  1 /* MUTANT (rep_const) */
320: #define INITIAL_STATESTACK  -1 /* MUTANT (rep_const) */
320: #define INITIAL_STATESTACK  ((100)+1) /* MUTANT (rep_const) */
320: #define INITIAL_STATESTACK  ((100)-1) /* MUTANT (rep_const) */
321: #define INITIAL_BACKTRACK   0 /* MUTANT (rep_const) */
321: #define INITIAL_BACKTRACK   1 /* MUTANT (rep_const) */
321: #define INITIAL_BACKTRACK   -1 /* MUTANT (rep_const) */
321: #define INITIAL_BACKTRACK   ((8000)+1) /* MUTANT (rep_const) */
321: #define INITIAL_BACKTRACK   ((8000)-1) /* MUTANT (rep_const) */
324: /* MUTANT (del_stmt) */ /*     JSContext *cx; */ 
325: /* MUTANT (del_stmt) */ /*     JSRegExp *regexp; */                /* the RE in execution */
326: /* MUTANT (del_stmt) */ /*     JSBool ok; */                       /* runtime error (out_of_memory only?) */
327: /* MUTANT (del_stmt) */ /*     size_t start; */                    /* offset to start at */
328: /* MUTANT (del_stmt) */ /*     ptrdiff_t skipped; */               /* chars skipped anchoring this r.e. */
329: /* MUTANT (del_stmt) */ /*     const jschar    *cpbegin; */        /* text base address */
330: /* MUTANT (del_stmt) */ /*     const jschar    *cpend; */          /* text limit address */
332: /* MUTANT (del_stmt) */ /*     REProgState *stateStack; */         /* stack of state of current parents */
333: /* MUTANT (del_stmt) */ /*     size_t stateStackTop; */ 
334: /* MUTANT (del_stmt) */ /*     size_t stateStackLimit; */ 
336: /* MUTANT (del_stmt) */ /*     REBackTrackData *backTrackStack; */ /* stack of matched-so-far positions */
337: /* MUTANT (del_stmt) */ /*     REBackTrackData *backTrackSP; */ 
338: /* MUTANT (del_stmt) */ /*     size_t backTrackStackSize; */ 
339: /* MUTANT (del_stmt) */ /*     size_t cursz; */                    /* size of current stack entry */
341: /* MUTANT (del_stmt) */ /*     JSArenaPool     pool; */            /* It's faster to use one malloc'd pool
344: /* MUTANT (del_stmt) */ /* } REGlobalData; */ 
359: /* MUTANT (del_stmt) */ /*     jschar cu = JS_TOUPPER(ch); */ 
360: /* MUTANT (rep_op) */    if (ch <= 128 && cu < 128)
360: /* MUTANT (rep_op) */    if (ch < 128 && cu < 128)
360: /* MUTANT (rep_op) */    if (ch > 128 && cu < 128)
360: /* MUTANT (rep_op) */    if (ch == 128 && cu < 128)
360: /* MUTANT (rep_op) */    if (ch != 128 && cu < 128)
360: /* MUTANT (rep_op) */    if (ch >= 128 || cu < 128)
360: /* MUTANT (rep_op) */    if (ch >= 128 && cu <= 128)
360: /* MUTANT (rep_op) */    if (ch >= 128 && cu > 128)
360: /* MUTANT (rep_op) */    if (ch >= 128 && cu >= 128)
360: /* MUTANT (rep_op) */    if (ch >= 128 && cu == 128)
360: /* MUTANT (rep_op) */    if (ch >= 128 && cu != 128)
360: /* MUTANT (rep_const) */    if (ch >= 0 && cu < 128)
360: /* MUTANT (rep_const) */    if (ch >= 1 && cu < 128)
360: /* MUTANT (rep_const) */    if (ch >= -1 && cu < 128)
360: /* MUTANT (rep_const) */    if (ch >= ((128)+1) && cu < 128)
360: /* MUTANT (rep_const) */    if (ch >= ((128)-1) && cu < 128)
360: /* MUTANT (rep_const) */    if (ch >= 128 && cu < 0)
360: /* MUTANT (rep_const) */    if (ch >= 128 && cu < 1)
360: /* MUTANT (rep_const) */    if (ch >= 128 && cu < -1)
360: /* MUTANT (rep_const) */    if (ch >= 128 && cu < ((128)+1))
360: /* MUTANT (rep_const) */    if (ch >= 128 && cu < ((128)-1))
360: /* MUTANT (negate) */    if(! (ch >= 128 && cu < 128))
362: /* MUTANT (del_stmt) */ /*     return cu; */ 
368: /* MUTANT (del_stmt) */ /*     jschar cl = JS_TOLOWER(ch); */ 
369: /* MUTANT (rep_op) */    if (cl <= 128 && ch < 128)
369: /* MUTANT (rep_op) */    if (cl < 128 && ch < 128)
369: /* MUTANT (rep_op) */    if (cl > 128 && ch < 128)
369: /* MUTANT (rep_op) */    if (cl == 128 && ch < 128)
369: /* MUTANT (rep_op) */    if (cl != 128 && ch < 128)
369: /* MUTANT (rep_op) */    if (cl >= 128 || ch < 128)
369: /* MUTANT (rep_op) */    if (cl >= 128 && ch <= 128)
369: /* MUTANT (rep_op) */    if (cl >= 128 && ch > 128)
369: /* MUTANT (rep_op) */    if (cl >= 128 && ch >= 128)
369: /* MUTANT (rep_op) */    if (cl >= 128 && ch == 128)
369: /* MUTANT (rep_op) */    if (cl >= 128 && ch != 128)
369: /* MUTANT (rep_const) */    if (cl >= 0 && ch < 128)
369: /* MUTANT (rep_const) */    if (cl >= 1 && ch < 128)
369: /* MUTANT (rep_const) */    if (cl >= -1 && ch < 128)
369: /* MUTANT (rep_const) */    if (cl >= ((128)+1) && ch < 128)
369: /* MUTANT (rep_const) */    if (cl >= ((128)-1) && ch < 128)
369: /* MUTANT (rep_const) */    if (cl >= 128 && ch < 0)
369: /* MUTANT (rep_const) */    if (cl >= 128 && ch < 1)
369: /* MUTANT (rep_const) */    if (cl >= 128 && ch < -1)
369: /* MUTANT (rep_const) */    if (cl >= 128 && ch < ((128)+1))
369: /* MUTANT (rep_const) */    if (cl >= 128 && ch < ((128)-1))
369: /* MUTANT (negate) */    if(! (cl >= 128 && ch < 128))
371: /* MUTANT (del_stmt) */ /*     return cl; */ 
378: /* MUTANT (del_stmt) */ /*     JSContext *cx; */ 
379: /* MUTANT (del_stmt) */ /*     RENode *ren; */ 
381: /* MUTANT (del_stmt) */ /*     cx = state->context; */ 
382: /* MUTANT (del_stmt) */ /*     JS_ARENA_ALLOCATE_CAST(ren, RENode *, &cx->tempPool, sizeof *ren); */ 
383: /* MUTANT (negate) */    if(! (!ren)) {
384: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(cx); */ 
385: /* MUTANT (del_stmt) */ /*         return NULL; */ 
388: /* MUTANT (del_stmt) */ /*     ren->next = NULL; */ 
389: /* MUTANT (del_stmt) */ /*     ren->kid = NULL; */ 
390: /* MUTANT (del_stmt) */ /*     return ren; */ 
399: /* MUTANT (del_stmt) */ /*     uintN cv = c; */ 
401: /* MUTANT (rep_op) */    if (cv <= '0')
401: /* MUTANT (rep_op) */    if (cv > '0')
401: /* MUTANT (rep_op) */    if (cv >= '0')
401: /* MUTANT (rep_op) */    if (cv == '0')
401: /* MUTANT (rep_op) */    if (cv != '0')
401: /* MUTANT (rep_const) */    if (cv < '1')
401: /* MUTANT (rep_const) */    if (cv < '-1')
401: /* MUTANT (negate) */    if(! (cv < '0'))
403: /* MUTANT (rep_op) */    if (cv < '9') {
403: /* MUTANT (rep_op) */    if (cv > '9') {
403: /* MUTANT (rep_op) */    if (cv >= '9') {
403: /* MUTANT (rep_op) */    if (cv == '9') {
403: /* MUTANT (rep_op) */    if (cv != '9') {
403: /* MUTANT (rep_const) */    if (cv <= '0') {
403: /* MUTANT (rep_const) */    if (cv <= '1') {
403: /* MUTANT (rep_const) */    if (cv <= '-1') {
403: /* MUTANT (rep_const) */    if (cv <= '((9)+1)') {
403: /* MUTANT (rep_const) */    if (cv <= '((9)-1)') {
403: /* MUTANT (negate) */    if(! (cv <= '9')) {
404: /* MUTANT (del_stmt) */ /*         *digit = cv - '0'; */ 
404: /* MUTANT (rep_const) */        *digit = cv - '1';
404: /* MUTANT (rep_const) */        *digit = cv - '-1';
405: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
407: /* MUTANT (rep_const) */    cv |= 1x20;
407: /* MUTANT (rep_const) */    cv |= -1x20;
408: /* MUTANT (rep_op) */    if (cv <= 'a' && cv <= 'f') {
408: /* MUTANT (rep_op) */    if (cv < 'a' && cv <= 'f') {
408: /* MUTANT (rep_op) */    if (cv > 'a' && cv <= 'f') {
408: /* MUTANT (rep_op) */    if (cv == 'a' && cv <= 'f') {
408: /* MUTANT (rep_op) */    if (cv != 'a' && cv <= 'f') {
408: /* MUTANT (rep_op) */    if (cv >= 'a' || cv <= 'f') {
408: /* MUTANT (rep_op) */    if (cv >= 'a' && cv < 'f') {
408: /* MUTANT (rep_op) */    if (cv >= 'a' && cv > 'f') {
408: /* MUTANT (rep_op) */    if (cv >= 'a' && cv >= 'f') {
408: /* MUTANT (rep_op) */    if (cv >= 'a' && cv == 'f') {
408: /* MUTANT (rep_op) */    if (cv >= 'a' && cv != 'f') {
408: /* MUTANT (negate) */    if(! (cv >= 'a' && cv <= 'f')) {
409: /* MUTANT (del_stmt) */ /*         *digit = cv - 'a' + 10; */ 
409: /* MUTANT (rep_op) */        *digit = cv - 'a' - 10;
409: /* MUTANT (rep_op) */        *digit = cv - 'a' * 10;
409: /* MUTANT (rep_op) */        *digit = cv - 'a' % 10;
409: /* MUTANT (rep_const) */        *digit = cv - 'a' + 0;
409: /* MUTANT (rep_const) */        *digit = cv - 'a' + 1;
409: /* MUTANT (rep_const) */        *digit = cv - 'a' + -1;
409: /* MUTANT (rep_const) */        *digit = cv - 'a' + ((10)+1);
409: /* MUTANT (rep_const) */        *digit = cv - 'a' + ((10)-1);
410: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
417: /* MUTANT (del_stmt) */ /*     REOp op; */ 
418: /* MUTANT (del_stmt) */ /*     const jschar *errPos; */ 
419: /* MUTANT (del_stmt) */ /*     size_t parenIndex; */ 
420: /* MUTANT (del_stmt) */ /* } REOpData; */ 
431: /* MUTANT (del_stmt) */ /*     RENode *result; */ 
436: /* MUTANT (negate) */        if(! (!result))
438: /* MUTANT (del_stmt) */ /*         result->kid = operandStack[operandSP - 2]; */ 
438: /* MUTANT (rep_const) */        result->kid = operandStack[operandSP - 0];
438: /* MUTANT (rep_const) */        result->kid = operandStack[operandSP - 1];
438: /* MUTANT (rep_const) */        result->kid = operandStack[operandSP - -1];
438: /* MUTANT (rep_const) */        result->kid = operandStack[operandSP - ((2)+1)];
438: /* MUTANT (rep_const) */        result->kid = operandStack[operandSP - ((2)-1)];
439: /* MUTANT (del_stmt) */ /*         result->u.kid2 = operandStack[operandSP - 1]; */ 
439: /* MUTANT (rep_const) */        result->u.kid2 = operandStack[operandSP - 0];
439: /* MUTANT (rep_const) */        result->u.kid2 = operandStack[operandSP - -1];
439: /* MUTANT (rep_const) */        result->u.kid2 = operandStack[operandSP - ((1)+1)];
440: /* MUTANT (del_stmt) */ /*         operandStack[operandSP - 2] = result; */ 
440: /* MUTANT (rep_const) */        operandStack[operandSP - 0] = result;
440: /* MUTANT (rep_const) */        operandStack[operandSP - 1] = result;
440: /* MUTANT (rep_const) */        operandStack[operandSP - -1] = result;
440: /* MUTANT (rep_const) */        operandStack[operandSP - ((2)+1)] = result;
440: /* MUTANT (rep_const) */        operandStack[operandSP - ((2)-1)] = result;
442: /* MUTANT (rep_op) */        if (state->treeDepth != TREE_DEPTH_MAX) {
442: /* MUTANT (negate) */        if(! (state->treeDepth == TREE_DEPTH_MAX)) {
444: /* MUTANT (rep_op) */                                        JSREPORT_TS & JSREPORT_ERROR,
446: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
448: /* MUTANT (rep_op) */        --state->treeDepth;
454: /* MUTANT (rep_op) */        if (((RENode *) result->kid)->op != REOP_FLAT &&
454: /* MUTANT (rep_op) */        if (((RENode *) result->kid)->op == REOP_FLAT ||
455: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->op != REOP_FLAT &&
455: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->op == REOP_FLAT ||
456: /* MUTANT (rep_op) */            (state->flags & JSREG_FOLD) != 0) {
456: /* MUTANT (rep_const) */            (state->flags & JSREG_FOLD) == 1) {
456: /* MUTANT (rep_const) */            (state->flags & JSREG_FOLD) == -1) {
457: /* MUTANT (del_stmt) */ /*             result->op = REOP_ALTPREREQ; */ 
458: /* MUTANT (del_stmt) */ /*             result->u.altprereq.ch1 = ((RENode *) result->kid)->u.flat.chr; */ 
459: /* MUTANT (del_stmt) */ /*             result->u.altprereq.ch2 = ((RENode *) result->u.kid2)->u.flat.chr; */ 
462: /* MUTANT (del_stmt) */ /*             state->progLength += 13; */ 
462: /* MUTANT (rep_op) */            state->progLength -= 13;
462: /* MUTANT (rep_op) */            state->progLength *= 13;
462: /* MUTANT (rep_op) */            state->progLength %= 13;
462: /* MUTANT (rep_const) */            state->progLength += 0;
462: /* MUTANT (rep_const) */            state->progLength += 1;
462: /* MUTANT (rep_const) */            state->progLength += -1;
462: /* MUTANT (rep_const) */            state->progLength += ((13)+1);
462: /* MUTANT (rep_const) */            state->progLength += ((13)-1);
465: /* MUTANT (rep_op) */        if (((RENode *) result->kid)->op != REOP_CLASS &&
465: /* MUTANT (rep_op) */        if (((RENode *) result->kid)->op == REOP_CLASS ||
466: /* MUTANT (rep_op) */            ((RENode *) result->kid)->u.ucclass.index <= 256 &&
466: /* MUTANT (rep_op) */            ((RENode *) result->kid)->u.ucclass.index > 256 &&
466: /* MUTANT (rep_op) */            ((RENode *) result->kid)->u.ucclass.index >= 256 &&
466: /* MUTANT (rep_op) */            ((RENode *) result->kid)->u.ucclass.index == 256 &&
466: /* MUTANT (rep_op) */            ((RENode *) result->kid)->u.ucclass.index != 256 &&
466: /* MUTANT (rep_op) */            ((RENode *) result->kid)->u.ucclass.index < 256 ||
466: /* MUTANT (rep_const) */            ((RENode *) result->kid)->u.ucclass.index < 0 &&
466: /* MUTANT (rep_const) */            ((RENode *) result->kid)->u.ucclass.index < 1 &&
466: /* MUTANT (rep_const) */            ((RENode *) result->kid)->u.ucclass.index < -1 &&
466: /* MUTANT (rep_const) */            ((RENode *) result->kid)->u.ucclass.index < ((256)+1) &&
466: /* MUTANT (rep_const) */            ((RENode *) result->kid)->u.ucclass.index < ((256)-1) &&
467: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->op != REOP_FLAT &&
467: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->op == REOP_FLAT ||
468: /* MUTANT (rep_op) */            (state->flags & JSREG_FOLD) != 0) {
468: /* MUTANT (rep_const) */            (state->flags & JSREG_FOLD) == 1) {
468: /* MUTANT (rep_const) */            (state->flags & JSREG_FOLD) == -1) {
469: /* MUTANT (del_stmt) */ /*             result->op = REOP_ALTPREREQ2; */ 
470: /* MUTANT (del_stmt) */ /*             result->u.altprereq.ch1 = ((RENode *) result->u.kid2)->u.flat.chr; */ 
471: /* MUTANT (del_stmt) */ /*             result->u.altprereq.ch2 = ((RENode *) result->kid)->u.ucclass.index; */ 
474: /* MUTANT (del_stmt) */ /*             state->progLength += 13; */ 
474: /* MUTANT (rep_op) */            state->progLength -= 13;
474: /* MUTANT (rep_op) */            state->progLength *= 13;
474: /* MUTANT (rep_op) */            state->progLength %= 13;
474: /* MUTANT (rep_const) */            state->progLength += 0;
474: /* MUTANT (rep_const) */            state->progLength += 1;
474: /* MUTANT (rep_const) */            state->progLength += -1;
474: /* MUTANT (rep_const) */            state->progLength += ((13)+1);
474: /* MUTANT (rep_const) */            state->progLength += ((13)-1);
477: /* MUTANT (rep_op) */        if (((RENode *) result->kid)->op != REOP_FLAT &&
477: /* MUTANT (rep_op) */        if (((RENode *) result->kid)->op == REOP_FLAT ||
478: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->op != REOP_CLASS &&
478: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->op == REOP_CLASS ||
479: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->u.ucclass.index <= 256 &&
479: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->u.ucclass.index > 256 &&
479: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->u.ucclass.index >= 256 &&
479: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->u.ucclass.index == 256 &&
479: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->u.ucclass.index != 256 &&
479: /* MUTANT (rep_op) */            ((RENode *) result->u.kid2)->u.ucclass.index < 256 ||
479: /* MUTANT (rep_const) */            ((RENode *) result->u.kid2)->u.ucclass.index < 0 &&
479: /* MUTANT (rep_const) */            ((RENode *) result->u.kid2)->u.ucclass.index < 1 &&
479: /* MUTANT (rep_const) */            ((RENode *) result->u.kid2)->u.ucclass.index < -1 &&
479: /* MUTANT (rep_const) */            ((RENode *) result->u.kid2)->u.ucclass.index < ((256)+1) &&
479: /* MUTANT (rep_const) */            ((RENode *) result->u.kid2)->u.ucclass.index < ((256)-1) &&
480: /* MUTANT (rep_op) */            (state->flags & JSREG_FOLD) != 0) {
480: /* MUTANT (rep_const) */            (state->flags & JSREG_FOLD) == 1) {
480: /* MUTANT (rep_const) */            (state->flags & JSREG_FOLD) == -1) {
481: /* MUTANT (del_stmt) */ /*             result->op = REOP_ALTPREREQ2; */ 
482: /* MUTANT (del_stmt) */ /*             result->u.altprereq.ch1 = ((RENode *) result->kid)->u.flat.chr; */ 
487: /* MUTANT (del_stmt) */ /*             state->progLength += 13; */ 
487: /* MUTANT (rep_op) */            state->progLength -= 13;
487: /* MUTANT (rep_op) */            state->progLength *= 13;
487: /* MUTANT (rep_op) */            state->progLength %= 13;
487: /* MUTANT (rep_const) */            state->progLength += 0;
487: /* MUTANT (rep_const) */            state->progLength += 1;
487: /* MUTANT (rep_const) */            state->progLength += -1;
487: /* MUTANT (rep_const) */            state->progLength += ((13)+1);
487: /* MUTANT (rep_const) */            state->progLength += ((13)-1);
491: /* MUTANT (del_stmt) */ /*             state->progLength += 7; */ 
491: /* MUTANT (rep_op) */            state->progLength -= 7;
491: /* MUTANT (rep_op) */            state->progLength *= 7;
491: /* MUTANT (rep_op) */            state->progLength %= 7;
491: /* MUTANT (rep_const) */            state->progLength += 0;
491: /* MUTANT (rep_const) */            state->progLength += 1;
491: /* MUTANT (rep_const) */            state->progLength += -1;
491: /* MUTANT (rep_const) */            state->progLength += ((7)+1);
491: /* MUTANT (rep_const) */            state->progLength += ((7)-1);
496: /* MUTANT (rep_const) */        result = operandStack[operandSP - 0];
496: /* MUTANT (rep_const) */        result = operandStack[operandSP - 1];
496: /* MUTANT (rep_const) */        result = operandStack[operandSP - -1];
496: /* MUTANT (rep_const) */        result = operandStack[operandSP - ((2)+1)];
496: /* MUTANT (rep_const) */        result = operandStack[operandSP - ((2)-1)];
497: /* MUTANT (negate) */        while(! (result->next))
499: /* MUTANT (del_stmt) */ /*         result->next = operandStack[operandSP - 1]; */ 
499: /* MUTANT (rep_const) */        result->next = operandStack[operandSP - 0];
499: /* MUTANT (rep_const) */        result->next = operandStack[operandSP - -1];
499: /* MUTANT (rep_const) */        result->next = operandStack[operandSP - ((1)+1)];
500: /* MUTANT (del_stmt) */ /*         break; */ 
508: /* MUTANT (rep_op) */                                      JSREPORT_TS & JSREPORT_ERROR,
510: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
512: /* MUTANT (del_stmt) */ /*     default:; */ 
521: /* MUTANT (del_stmt) */ /* static JSBool ParseQuantifier(CompilerState *state); */ 
521: /* MUTANT (negate) */static JSBool ParseQuantif(!ier(CompilerState *state));
522: /* MUTANT (del_stmt) */ /* static intN ParseMinMaxQuantifier(CompilerState *state, JSBool ignoreValues); */ 
522: /* MUTANT (negate) */static intN ParseMinMaxQuantif(!ier(CompilerState *state, JSBool ignoreValues));
530: #define INITIAL_STACK_SIZE  0 /* MUTANT (rep_const) */
530: #define INITIAL_STACK_SIZE  1 /* MUTANT (rep_const) */
530: #define INITIAL_STACK_SIZE  -1 /* MUTANT (rep_const) */
530: #define INITIAL_STACK_SIZE  ((128)+1) /* MUTANT (rep_const) */
530: #define INITIAL_STACK_SIZE  ((128)-1) /* MUTANT (rep_const) */
535: /* MUTANT (del_stmt) */ /*     size_t parenIndex; */ 
536: /* MUTANT (del_stmt) */ /*     RENode *operand; */ 
537: /* MUTANT (del_stmt) */ /*     REOpData *operatorStack; */ 
538: /* MUTANT (del_stmt) */ /*     RENode **operandStack; */ 
539: /* MUTANT (del_stmt) */ /*     REOp op; */ 
540: /* MUTANT (del_stmt) */ /*     intN i; */ 
541: /* MUTANT (del_stmt) */ /*     JSBool result = JS_FALSE; */ 
543: /* MUTANT (del_stmt) */ /*     intN operatorSP = 0, operatorStackSize = INITIAL_STACK_SIZE; */ 
543: /* MUTANT (rep_const) */    intN operatorSP = 1, operatorStackSize = INITIAL_STACK_SIZE;
543: /* MUTANT (rep_const) */    intN operatorSP = -1, operatorStackSize = INITIAL_STACK_SIZE;
544: /* MUTANT (del_stmt) */ /*     intN operandSP = 0, operandStackSize = INITIAL_STACK_SIZE; */ 
544: /* MUTANT (rep_const) */    intN operandSP = 1, operandStackSize = INITIAL_STACK_SIZE;
544: /* MUTANT (rep_const) */    intN operandSP = -1, operandStackSize = INITIAL_STACK_SIZE;
547: /* MUTANT (rep_op) */    if (state->cp != state->cpend) {
547: /* MUTANT (negate) */    if(! (state->cp == state->cpend)) {
548: /* MUTANT (del_stmt) */ /*         state->result = NewRENode(state, REOP_EMPTY); */ 
549: /* MUTANT (del_stmt) */ /*         return (state->result != NULL); */ 
549: /* MUTANT (rep_op) */        return (state->result == NULL);
554: /* MUTANT (negate) */    if(! (!operatorStack))
559: /* MUTANT (negate) */    if(! (!operandStack))
563: /* MUTANT (del_stmt) */ /*         parenIndex = state->parenCount; */ 
564: /* MUTANT (rep_op) */        if (state->cp != state->cpend) {
564: /* MUTANT (negate) */        if(! (state->cp == state->cpend)) {
570: /* MUTANT (rep_op) */            if (operatorSP <= operandSP) {
570: /* MUTANT (rep_op) */            if (operatorSP < operandSP) {
570: /* MUTANT (rep_op) */            if (operatorSP > operandSP) {
570: /* MUTANT (rep_op) */            if (operatorSP == operandSP) {
570: /* MUTANT (rep_op) */            if (operatorSP != operandSP) {
570: /* MUTANT (negate) */            if(! (operatorSP >= operandSP)) {
571: /* MUTANT (del_stmt) */ /*                 operand = NewRENode(state, REOP_EMPTY); */ 
572: /* MUTANT (negate) */                if(! (!operand))
574: /* MUTANT (del_stmt) */ /*                 goto pushOperand; */ 
579: /* MUTANT (rep_op) */                --state->cp;
580: /* MUTANT (rep_op) */                if (state->cp - 1 < state->cpend &&
580: /* MUTANT (rep_op) */                if (state->cp * 1 < state->cpend &&
580: /* MUTANT (rep_op) */                if (state->cp % 1 < state->cpend &&
580: /* MUTANT (rep_op) */                if (state->cp + 1 <= state->cpend &&
580: /* MUTANT (rep_op) */                if (state->cp + 1 > state->cpend &&
580: /* MUTANT (rep_op) */                if (state->cp + 1 >= state->cpend &&
580: /* MUTANT (rep_op) */                if (state->cp + 1 == state->cpend &&
580: /* MUTANT (rep_op) */                if (state->cp + 1 != state->cpend &&
580: /* MUTANT (rep_op) */                if (state->cp + 1 < state->cpend ||
580: /* MUTANT (rep_const) */                if (state->cp + 0 < state->cpend &&
580: /* MUTANT (rep_const) */                if (state->cp + -1 < state->cpend &&
580: /* MUTANT (rep_const) */                if (state->cp + ((1)+1) < state->cpend &&
581: /* MUTANT (rep_op) */                    *state->cp != '?' &&
581: /* MUTANT (rep_op) */                    *state->cp == '?' ||
582: /* MUTANT (rep_op) */                    (state->cp[1] != '=' ||
582: /* MUTANT (rep_op) */                    (state->cp[1] == '=' &&
582: /* MUTANT (rep_const) */                    (state->cp[0] == '=' ||
582: /* MUTANT (rep_const) */                    (state->cp[-1] == '=' ||
582: /* MUTANT (rep_const) */                    (state->cp[((1)+1)] == '=' ||
583: /* MUTANT (rep_op) */                     state->cp[1] != '!' ||
583: /* MUTANT (rep_op) */                     state->cp[1] == '!' &&
583: /* MUTANT (rep_const) */                     state->cp[0] == '!' ||
583: /* MUTANT (rep_const) */                     state->cp[-1] == '!' ||
583: /* MUTANT (rep_const) */                     state->cp[((1)+1)] == '!' ||
584: /* MUTANT (rep_op) */                     state->cp[1] != ':')) {
584: /* MUTANT (rep_const) */                     state->cp[0] == ':')) {
584: /* MUTANT (rep_const) */                     state->cp[-1] == ':')) {
584: /* MUTANT (rep_const) */                     state->cp[((1)+1)] == ':')) {
585: /* MUTANT (rep_const) */                    switch (state->cp[0]) {
585: /* MUTANT (rep_const) */                    switch (state->cp[-1]) {
585: /* MUTANT (rep_const) */                    switch (state->cp[((1)+1)]) {
589: /* MUTANT (del_stmt) */ /*                         state->progLength += 4; */ 
589: /* MUTANT (rep_op) */                        state->progLength -= 4;
589: /* MUTANT (rep_op) */                        state->progLength *= 4;
589: /* MUTANT (rep_op) */                        state->progLength %= 4;
589: /* MUTANT (rep_const) */                        state->progLength += 0;
589: /* MUTANT (rep_const) */                        state->progLength += 1;
589: /* MUTANT (rep_const) */                        state->progLength += -1;
589: /* MUTANT (rep_const) */                        state->progLength += ((4)+1);
589: /* MUTANT (rep_const) */                        state->progLength += ((4)-1);
590: /* MUTANT (del_stmt) */ /*                         break; */ 
594: /* MUTANT (del_stmt) */ /*                         state->progLength += 4; */ 
594: /* MUTANT (rep_op) */                        state->progLength -= 4;
594: /* MUTANT (rep_op) */                        state->progLength *= 4;
594: /* MUTANT (rep_op) */                        state->progLength %= 4;
594: /* MUTANT (rep_const) */                        state->progLength += 0;
594: /* MUTANT (rep_const) */                        state->progLength += 1;
594: /* MUTANT (rep_const) */                        state->progLength += -1;
594: /* MUTANT (rep_const) */                        state->progLength += ((4)+1);
594: /* MUTANT (rep_const) */                        state->progLength += ((4)-1);
595: /* MUTANT (del_stmt) */ /*                         break; */ 
598: /* MUTANT (del_stmt) */ /*                         break; */ 
600: /* MUTANT (rep_op) */                    state->cp -= 2;
600: /* MUTANT (rep_op) */                    state->cp *= 2;
600: /* MUTANT (rep_op) */                    state->cp %= 2;
600: /* MUTANT (rep_const) */                    state->cp += 0;
600: /* MUTANT (rep_const) */                    state->cp += 1;
600: /* MUTANT (rep_const) */                    state->cp += -1;
600: /* MUTANT (rep_const) */                    state->cp += ((2)+1);
600: /* MUTANT (rep_const) */                    state->cp += ((2)-1);
602: /* MUTANT (del_stmt) */ /*                     op = REOP_LPAREN; */ 
605: /* MUTANT (rep_op) */                        -= 2 * (1 + GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_op) */                        *= 2 * (1 + GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_op) */                        %= 2 * (1 + GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_op) */                        += 2 * (1 - GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_op) */                        += 2 * (1 * GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_op) */                        += 2 * (1 % GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_const) */                        += 0 * (1 + GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_const) */                        += 1 * (1 + GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_const) */                        += -1 * (1 + GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_const) */                        += ((2)+1) * (1 + GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_const) */                        += ((2)-1) * (1 + GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_const) */                        += 2 * (0 + GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_const) */                        += 2 * (-1 + GetCompactIndexWidth(parenIndex));
605: /* MUTANT (rep_const) */                        += 2 * (((1)+1) + GetCompactIndexWidth(parenIndex));
606: /* MUTANT (del_stmt) */ /*                     state->parenCount++; */ 
606: /* MUTANT (rep_op) */                    state->parenCount--;
607: /* MUTANT (rep_op) */                    if (state->parenCount != 65535) {
607: /* MUTANT (rep_const) */                    if (state->parenCount == 0) {
607: /* MUTANT (rep_const) */                    if (state->parenCount == 1) {
607: /* MUTANT (rep_const) */                    if (state->parenCount == -1) {
607: /* MUTANT (rep_const) */                    if (state->parenCount == ((65535)+1)) {
607: /* MUTANT (rep_const) */                    if (state->parenCount == ((65535)-1)) {
607: /* MUTANT (negate) */                    if(! (state->parenCount == 65535)) {
610: /* MUTANT (rep_op) */                                                    JSREPORT_TS &
613: /* MUTANT (del_stmt) */ /*                         goto out; */ 
622: /* MUTANT (rep_op) */                for (i = operatorSP - 1; ; i++) {
622: /* MUTANT (rep_const) */                for (i = operatorSP - 0; ; i--) {
622: /* MUTANT (rep_const) */                for (i = operatorSP - -1; ; i--) {
622: /* MUTANT (rep_const) */                for (i = operatorSP - ((1)+1); ; i--) {
623: /* MUTANT (rep_op) */                    if (i <= 0) {
623: /* MUTANT (rep_op) */                    if (i > 0) {
623: /* MUTANT (rep_op) */                    if (i >= 0) {
623: /* MUTANT (rep_op) */                    if (i == 0) {
623: /* MUTANT (rep_op) */                    if (i != 0) {
623: /* MUTANT (rep_const) */                    if (i < 1) {
623: /* MUTANT (rep_const) */                    if (i < -1) {
623: /* MUTANT (negate) */                    if(! (i < 0)) {
626: /* MUTANT (rep_op) */                                                    JSREPORT_TS &
629: /* MUTANT (del_stmt) */ /*                         goto out; */ 
631: /* MUTANT (rep_op) */                    if (operatorStack[i].op != REOP_ASSERT ||
631: /* MUTANT (rep_op) */                    if (operatorStack[i].op == REOP_ASSERT &&
632: /* MUTANT (rep_op) */                        operatorStack[i].op != REOP_ASSERT_NOT ||
632: /* MUTANT (rep_op) */                        operatorStack[i].op == REOP_ASSERT_NOT &&
633: /* MUTANT (rep_op) */                        operatorStack[i].op != REOP_LPARENNON ||
633: /* MUTANT (rep_op) */                        operatorStack[i].op == REOP_LPARENNON &&
634: /* MUTANT (rep_op) */                        operatorStack[i].op != REOP_LPAREN) {
635: /* MUTANT (del_stmt) */ /*                         break; */ 
640: /* MUTANT (rep_op) */            case '&':
643: /* MUTANT (negate) */                if(! (!operand))
645: /* MUTANT (del_stmt) */ /*                 goto pushOperand; */ 
648: /* MUTANT (negate) */                if(! (!ParseTerm(state)))
650: /* MUTANT (del_stmt) */ /*                 operand = state->result; */ 
652: /* MUTANT (rep_op) */                if (operandSP != operandStackSize) {
652: /* MUTANT (negate) */                if(! (operandSP == operandStackSize)) {
653: /* MUTANT (del_stmt) */ /*                     operandStackSize += operandStackSize; */ 
653: /* MUTANT (rep_op) */                    operandStackSize -= operandStackSize;
653: /* MUTANT (rep_op) */                    operandStackSize *= operandStackSize;
653: /* MUTANT (rep_op) */                    operandStackSize %= operandStackSize;
657: /* MUTANT (negate) */                    if(! (!operandStack))
660: /* MUTANT (rep_op) */                operandStack[operandSP--] = operand;
661: /* MUTANT (del_stmt) */ /*                 break; */ 
667: /* MUTANT (rep_op) */        if (state->cp != state->cpend) {
667: /* MUTANT (negate) */        if(! (state->cp == state->cpend)) {
668: /* MUTANT (negate) */            while(! (operatorSP)) {
669: /* MUTANT (del_stmt) */ /*                 --operatorSP; */ 
669: /* MUTANT (rep_op) */                ++operatorSP;
673: /* MUTANT (del_stmt) */ /*                 --operandSP; */ 
673: /* MUTANT (rep_op) */                ++operandSP;
675: /* MUTANT (rep_op) */            JS_ASSERT(operandSP != 1);
675: /* MUTANT (rep_const) */            JS_ASSERT(operandSP == 0);
675: /* MUTANT (rep_const) */            JS_ASSERT(operandSP == -1);
675: /* MUTANT (rep_const) */            JS_ASSERT(operandSP == ((1)+1));
676: /* MUTANT (del_stmt) */ /*             state->result = operandStack[0]; */ 
676: /* MUTANT (rep_const) */            state->result = operandStack[1];
676: /* MUTANT (rep_const) */            state->result = operandStack[-1];
677: /* MUTANT (del_stmt) */ /*             result = JS_TRUE; */ 
678: /* MUTANT (del_stmt) */ /*             goto out; */ 
682: /* MUTANT (rep_op) */        case '&':
684: /* MUTANT (rep_op) */            --state->cp;
685: /* MUTANT (rep_op) */            while (operatorSP ||
686: /* MUTANT (rep_op) */                   operatorStack[operatorSP - 1].op != REOP_CONCAT) {
686: /* MUTANT (rep_const) */                   operatorStack[operatorSP - 0].op == REOP_CONCAT) {
686: /* MUTANT (rep_const) */                   operatorStack[operatorSP - -1].op == REOP_CONCAT) {
686: /* MUTANT (rep_const) */                   operatorStack[operatorSP - ((1)+1)].op == REOP_CONCAT) {
687: /* MUTANT (del_stmt) */ /*                 --operatorSP; */ 
687: /* MUTANT (rep_op) */                ++operatorSP;
690: /* MUTANT (del_stmt) */ /*                     goto out; */ 
692: /* MUTANT (rep_op) */                ++operandSP;
695: /* MUTANT (del_stmt) */ /*             goto pushOperator; */ 
701: /* MUTANT (rep_op) */            for (i = operatorSP - 1; ; i++) {
701: /* MUTANT (rep_const) */            for (i = operatorSP - 0; ; i--) {
701: /* MUTANT (rep_const) */            for (i = operatorSP - -1; ; i--) {
701: /* MUTANT (rep_const) */            for (i = operatorSP - ((1)+1); ; i--) {
702: /* MUTANT (rep_op) */                if (i <= 0) {
702: /* MUTANT (rep_op) */                if (i > 0) {
702: /* MUTANT (rep_op) */                if (i >= 0) {
702: /* MUTANT (rep_op) */                if (i == 0) {
702: /* MUTANT (rep_op) */                if (i != 0) {
702: /* MUTANT (rep_const) */                if (i < 1) {
702: /* MUTANT (rep_const) */                if (i < -1) {
702: /* MUTANT (negate) */                if(! (i < 0)) {
705: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
707: /* MUTANT (del_stmt) */ /*                     goto out; */ 
709: /* MUTANT (rep_op) */                if (operatorStack[i].op != REOP_ASSERT ||
709: /* MUTANT (rep_op) */                if (operatorStack[i].op == REOP_ASSERT &&
710: /* MUTANT (rep_op) */                    operatorStack[i].op != REOP_ASSERT_NOT ||
710: /* MUTANT (rep_op) */                    operatorStack[i].op == REOP_ASSERT_NOT &&
711: /* MUTANT (rep_op) */                    operatorStack[i].op != REOP_LPARENNON ||
711: /* MUTANT (rep_op) */                    operatorStack[i].op == REOP_LPARENNON &&
712: /* MUTANT (rep_op) */                    operatorStack[i].op != REOP_LPAREN) {
713: /* MUTANT (del_stmt) */ /*                     break; */ 
716: /* MUTANT (rep_op) */            --state->cp;
720: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(operatorSP); */ 
721: /* MUTANT (del_stmt) */ /*                 --operatorSP; */ 
721: /* MUTANT (rep_op) */                ++operatorSP;
727: /* MUTANT (negate) */                    if(! (!operand))
731: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(operandSP); */ 
732: /* MUTANT (del_stmt) */ /*                     operand->kid = operandStack[operandSP - 1]; */ 
732: /* MUTANT (rep_const) */                    operand->kid = operandStack[operandSP - 0];
732: /* MUTANT (rep_const) */                    operand->kid = operandStack[operandSP - -1];
732: /* MUTANT (rep_const) */                    operand->kid = operandStack[operandSP - ((1)+1)];
733: /* MUTANT (del_stmt) */ /*                     operandStack[operandSP - 1] = operand; */ 
733: /* MUTANT (rep_const) */                    operandStack[operandSP - 0] = operand;
733: /* MUTANT (rep_const) */                    operandStack[operandSP - -1] = operand;
733: /* MUTANT (rep_const) */                    operandStack[operandSP - ((1)+1)] = operand;
734: /* MUTANT (rep_op) */                    if (state->treeDepth != TREE_DEPTH_MAX) {
734: /* MUTANT (negate) */                    if(! (state->treeDepth == TREE_DEPTH_MAX)) {
737: /* MUTANT (rep_op) */                                                    JSREPORT_TS &
740: /* MUTANT (del_stmt) */ /*                         goto out; */ 
742: /* MUTANT (rep_op) */                    --state->treeDepth;
746: /* MUTANT (rep_const) */                    state->result = operandStack[operandSP - 0];
746: /* MUTANT (rep_const) */                    state->result = operandStack[operandSP - -1];
746: /* MUTANT (rep_const) */                    state->result = operandStack[operandSP - ((1)+1)];
747: /* MUTANT (negate) */                    if(! (!ParseQuantifier(state)))
749: /* MUTANT (del_stmt) */ /*                     operandStack[operandSP - 1] = state->result; */ 
749: /* MUTANT (rep_const) */                    operandStack[operandSP - 0] = state->result;
749: /* MUTANT (rep_const) */                    operandStack[operandSP - -1] = state->result;
749: /* MUTANT (rep_const) */                    operandStack[operandSP - ((1)+1)] = state->result;
750: /* MUTANT (del_stmt) */ /*                     goto restartOperator; */ 
755: /* MUTANT (del_stmt) */ /*                     --operandSP; */ 
755: /* MUTANT (rep_op) */                    ++operandSP;
756: /* MUTANT (del_stmt) */ /*                     break; */ 
763: /* MUTANT (del_stmt) */ /*             const jschar *errp = state->cp; */ 
765: /* MUTANT (rep_op) */            if (ParseMinMaxQuantifier(state, JS_TRUE) <= 0) {
765: /* MUTANT (rep_op) */            if (ParseMinMaxQuantifier(state, JS_TRUE) > 0) {
765: /* MUTANT (rep_op) */            if (ParseMinMaxQuantifier(state, JS_TRUE) >= 0) {
765: /* MUTANT (rep_op) */            if (ParseMinMaxQuantifier(state, JS_TRUE) == 0) {
765: /* MUTANT (rep_op) */            if (ParseMinMaxQuantifier(state, JS_TRUE) != 0) {
765: /* MUTANT (rep_const) */            if (ParseMinMaxQuantifier(state, JS_TRUE) < 1) {
765: /* MUTANT (rep_const) */            if (ParseMinMaxQuantifier(state, JS_TRUE) < -1) {
765: /* MUTANT (negate) */            if(! (ParseMinMaxQuantifier(state, JS_TRUE) < 0)) {
770: /* MUTANT (del_stmt) */ /*                 op = REOP_CONCAT; */ 
771: /* MUTANT (del_stmt) */ /*                 goto pushOperator; */ 
778: /* MUTANT (rep_op) */        case '-':
778: /* MUTANT (rep_op) */        case '*':
778: /* MUTANT (rep_op) */        case '%':
782: /* MUTANT (rep_op) */                                          JSREPORT_TS & JSREPORT_ERROR,
784: /* MUTANT (del_stmt) */ /*             result = JS_FALSE; */ 
785: /* MUTANT (del_stmt) */ /*             goto out; */ 
791: /* MUTANT (rep_op) */            if (operatorSP != operatorStackSize) {
791: /* MUTANT (negate) */            if(! (operatorSP == operatorStackSize)) {
792: /* MUTANT (del_stmt) */ /*                 operatorStackSize += operatorStackSize; */ 
792: /* MUTANT (rep_op) */                operatorStackSize -= operatorStackSize;
792: /* MUTANT (rep_op) */                operatorStackSize *= operatorStackSize;
792: /* MUTANT (rep_op) */                operatorStackSize %= operatorStackSize;
796: /* MUTANT (negate) */                if(! (!operatorStack))
800: /* MUTANT (del_stmt) */ /*             operatorStack[operatorSP].errPos = state->cp; */ 
801: /* MUTANT (del_stmt) */ /*             operatorStack[operatorSP++].parenIndex = parenIndex; */ 
801: /* MUTANT (rep_op) */            operatorStack[operatorSP--].parenIndex = parenIndex;
802: /* MUTANT (del_stmt) */ /*             break; */ 
806: /* MUTANT (negate) */    if(! (operatorStack))
808: /* MUTANT (negate) */    if(! (operandStack))
810: /* MUTANT (del_stmt) */ /*     return result; */ 
817: #define JSREG_FIND_PAREN_COUNT  1x8000 /* MUTANT (rep_const) */
817: #define JSREG_FIND_PAREN_COUNT  -1x8000 /* MUTANT (rep_const) */
818: #define JSREG_FIND_PAREN_ERROR  1x4000 /* MUTANT (rep_const) */
818: #define JSREG_FIND_PAREN_ERROR  -1x4000 /* MUTANT (rep_const) */
825: #define OVERFLOW_VALUE          ((uintN)0) /* MUTANT (rep_const) */
825: #define OVERFLOW_VALUE          ((uintN)1) /* MUTANT (rep_const) */
825: #define OVERFLOW_VALUE          ((uintN)((-1)+1)) /* MUTANT (rep_const) */
825: #define OVERFLOW_VALUE          ((uintN)((-1)-1)) /* MUTANT (rep_const) */
830: /* MUTANT (del_stmt) */ /*     CompilerState temp; */ 
831: /* MUTANT (del_stmt) */ /*     int i; */ 
833: /* MUTANT (negate) */    if(! (state->flags & JSREG_FIND_PAREN_COUNT))
842: /* MUTANT (del_stmt) */ /*     temp = *state; */ 
843: /* MUTANT (del_stmt) */ /*     temp.flags |= JSREG_FIND_PAREN_COUNT; */ 
844: /* MUTANT (del_stmt) */ /*     temp.cp = temp.cpbegin; */ 
845: /* MUTANT (del_stmt) */ /*     temp.parenCount = 0; */ 
845: /* MUTANT (rep_const) */    temp.parenCount = 1;
845: /* MUTANT (rep_const) */    temp.parenCount = -1;
846: /* MUTANT (del_stmt) */ /*     temp.classCount = 0; */ 
846: /* MUTANT (rep_const) */    temp.classCount = 1;
846: /* MUTANT (rep_const) */    temp.classCount = -1;
847: /* MUTANT (del_stmt) */ /*     temp.progLength = 0; */ 
847: /* MUTANT (rep_const) */    temp.progLength = 1;
847: /* MUTANT (rep_const) */    temp.progLength = -1;
848: /* MUTANT (del_stmt) */ /*     temp.treeDepth = 0; */ 
848: /* MUTANT (rep_const) */    temp.treeDepth = 1;
848: /* MUTANT (rep_const) */    temp.treeDepth = -1;
849: /* MUTANT (del_stmt) */ /*     temp.classBitmapsMem = 0; */ 
849: /* MUTANT (rep_const) */    temp.classBitmapsMem = 1;
849: /* MUTANT (rep_const) */    temp.classBitmapsMem = -1;
850: /* MUTANT (rep_op) */    for (i = 0; i <= CLASS_CACHE_SIZE; i++)
850: /* MUTANT (rep_op) */    for (i = 0; i > CLASS_CACHE_SIZE; i++)
850: /* MUTANT (rep_op) */    for (i = 0; i >= CLASS_CACHE_SIZE; i++)
850: /* MUTANT (rep_op) */    for (i = 0; i == CLASS_CACHE_SIZE; i++)
850: /* MUTANT (rep_op) */    for (i = 0; i != CLASS_CACHE_SIZE; i++)
850: /* MUTANT (rep_op) */    for (i = 0; i < CLASS_CACHE_SIZE; i--)
850: /* MUTANT (rep_const) */    for (i = 1; i < CLASS_CACHE_SIZE; i++)
850: /* MUTANT (rep_const) */    for (i = -1; i < CLASS_CACHE_SIZE; i++)
853: /* MUTANT (negate) */    if(! (!ParseRegExp(&temp))) {
854: /* MUTANT (del_stmt) */ /*         state->flags |= JSREG_FIND_PAREN_ERROR; */ 
855: /* MUTANT (del_stmt) */ /*         return OVERFLOW_VALUE; */ 
870: /* MUTANT (del_stmt) */ /*     uintN value = JS7_UNDEC(c); */ 
871: /* MUTANT (del_stmt) */ /*     JSBool overflow = (value > max && (!findMax || value > findMax(state))); */ 
871: /* MUTANT (rep_op) */    JSBool overflow = (value <= max && (!findMax || value > findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value < max && (!findMax || value > findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value >= max && (!findMax || value > findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value == max && (!findMax || value > findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value != max && (!findMax || value > findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value > max || (!findMax || value > findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value > max && (!findMax && value > findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value > max && (!findMax || value <= findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value > max && (!findMax || value < findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value > max && (!findMax || value >= findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value > max && (!findMax || value == findMax(state)));
871: /* MUTANT (rep_op) */    JSBool overflow = (value > max && (!findMax || value != findMax(state)));
874: /* MUTANT (del_stmt) */ /*     JS_ASSERT(max <= ((uintN)-1 - 9) / 10); */ 
874: /* MUTANT (rep_op) */    JS_ASSERT(max < ((uintN)-1 - 9) / 10);
874: /* MUTANT (rep_op) */    JS_ASSERT(max > ((uintN)-1 - 9) / 10);
874: /* MUTANT (rep_op) */    JS_ASSERT(max >= ((uintN)-1 - 9) / 10);
874: /* MUTANT (rep_op) */    JS_ASSERT(max == ((uintN)-1 - 9) / 10);
874: /* MUTANT (rep_op) */    JS_ASSERT(max != ((uintN)-1 - 9) / 10);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)0 - 9) / 10);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)1 - 9) / 10);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)((-1)+1) - 9) / 10);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)((-1)-1) - 9) / 10);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)-1 - 0) / 10);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)-1 - 1) / 10);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)-1 - -1) / 10);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)-1 - ((9)+1)) / 10);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)-1 - ((9)-1)) / 10);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)-1 - 9) / 0);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)-1 - 9) / 1);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)-1 - 9) / -1);
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)-1 - 9) / ((10)+1));
874: /* MUTANT (rep_const) */    JS_ASSERT(max <= ((uintN)-1 - 9) / ((10)-1));
875: /* MUTANT (rep_op) */    while (state->cp <= state->cpend) {
875: /* MUTANT (rep_op) */    while (state->cp > state->cpend) {
875: /* MUTANT (rep_op) */    while (state->cp >= state->cpend) {
875: /* MUTANT (rep_op) */    while (state->cp == state->cpend) {
875: /* MUTANT (rep_op) */    while (state->cp != state->cpend) {
875: /* MUTANT (negate) */    while(! (state->cp < state->cpend)) {
876: /* MUTANT (del_stmt) */ /*         c = *state->cp; */ 
877: /* MUTANT (negate) */        if(! (!JS7_ISDEC(c)))
879: /* MUTANT (del_stmt) */ /*         value = 10 * value + JS7_UNDEC(c); */ 
879: /* MUTANT (rep_op) */        value = 10 * value - JS7_UNDEC(c);
879: /* MUTANT (rep_op) */        value = 10 * value * JS7_UNDEC(c);
879: /* MUTANT (rep_op) */        value = 10 * value % JS7_UNDEC(c);
879: /* MUTANT (rep_const) */        value = 0 * value + JS7_UNDEC(c);
879: /* MUTANT (rep_const) */        value = 1 * value + JS7_UNDEC(c);
879: /* MUTANT (rep_const) */        value = -1 * value + JS7_UNDEC(c);
879: /* MUTANT (rep_const) */        value = ((10)+1) * value + JS7_UNDEC(c);
879: /* MUTANT (rep_const) */        value = ((10)-1) * value + JS7_UNDEC(c);
880: /* MUTANT (rep_op) */        if (!overflow || value > max && (!findMax || value > findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value <= max && (!findMax || value > findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value < max && (!findMax || value > findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value >= max && (!findMax || value > findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value == max && (!findMax || value > findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value != max && (!findMax || value > findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value > max || (!findMax || value > findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value > max && (!findMax && value > findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value > max && (!findMax || value <= findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value > max && (!findMax || value < findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value > max && (!findMax || value >= findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value > max && (!findMax || value == findMax(state)))
880: /* MUTANT (rep_op) */        if (!overflow && value > max && (!findMax || value != findMax(state)))
880: /* MUTANT (negate) */        if(! (!overflow && value > max && (!findMax || value > findMax(state))))
882: /* MUTANT (del_stmt) */ /*         ++state->cp; */ 
882: /* MUTANT (rep_op) */        --state->cp;
894: /* MUTANT (del_stmt) */ /*     uintN max = 0; */ 
894: /* MUTANT (rep_const) */    uintN max = 1;
894: /* MUTANT (rep_const) */    uintN max = -1;
895: /* MUTANT (del_stmt) */ /*     JSBool inRange = JS_FALSE; */ 
896: /* MUTANT (del_stmt) */ /*     jschar c, rangeStart = 0; */ 
896: /* MUTANT (rep_const) */    jschar c, rangeStart = 1;
896: /* MUTANT (rep_const) */    jschar c, rangeStart = -1;
897: /* MUTANT (del_stmt) */ /*     uintN n, digit, nDigits, i; */ 
899: /* MUTANT (del_stmt) */ /*     target->u.ucclass.bmsize = 0; */ 
899: /* MUTANT (rep_const) */    target->u.ucclass.bmsize = 1;
899: /* MUTANT (rep_const) */    target->u.ucclass.bmsize = -1;
900: /* MUTANT (del_stmt) */ /*     target->u.ucclass.sense = JS_TRUE; */ 
902: /* MUTANT (rep_op) */    if (src != end)
902: /* MUTANT (negate) */    if(! (src == end))
905: /* MUTANT (rep_op) */    if (*src != '^') {
905: /* MUTANT (negate) */    if(! (*src == '^')) {
906: /* MUTANT (del_stmt) */ /*         ++src; */ 
906: /* MUTANT (rep_op) */        --src;
907: /* MUTANT (del_stmt) */ /*         target->u.ucclass.sense = JS_FALSE; */ 
910: /* MUTANT (rep_op) */    while (src == end) {
910: /* MUTANT (negate) */    while(! (src != end)) {
911: /* MUTANT (del_stmt) */ /*         uintN localMax = 0; */ 
911: /* MUTANT (rep_const) */        uintN localMax = 1;
911: /* MUTANT (rep_const) */        uintN localMax = -1;
914: /* MUTANT (rep_op) */            --src;
915: /* MUTANT (del_stmt) */ /*             c = *src++; */ 
915: /* MUTANT (rep_op) */            c = *src--;
918: /* MUTANT (rep_const) */                localMax = 1x8;
918: /* MUTANT (rep_const) */                localMax = -1x8;
919: /* MUTANT (del_stmt) */ /*                 break; */ 
921: /* MUTANT (rep_const) */                localMax = 1xC;
921: /* MUTANT (rep_const) */                localMax = -1xC;
922: /* MUTANT (del_stmt) */ /*                 break; */ 
924: /* MUTANT (rep_const) */                localMax = 1xA;
924: /* MUTANT (rep_const) */                localMax = -1xA;
925: /* MUTANT (del_stmt) */ /*                 break; */ 
927: /* MUTANT (rep_const) */                localMax = 1xD;
927: /* MUTANT (rep_const) */                localMax = -1xD;
928: /* MUTANT (del_stmt) */ /*                 break; */ 
930: /* MUTANT (rep_const) */                localMax = 1x9;
930: /* MUTANT (rep_const) */                localMax = -1x9;
931: /* MUTANT (del_stmt) */ /*                 break; */ 
933: /* MUTANT (rep_const) */                localMax = 1xB;
933: /* MUTANT (rep_const) */                localMax = -1xB;
934: /* MUTANT (del_stmt) */ /*                 break; */ 
936: /* MUTANT (rep_op) */                if (src - 1 < end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_op) */                if (src * 1 < end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_op) */                if (src % 1 < end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_op) */                if (src + 1 <= end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_op) */                if (src + 1 > end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_op) */                if (src + 1 >= end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_op) */                if (src + 1 == end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_op) */                if (src + 1 != end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_op) */                if (src + 1 < end || RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_const) */                if (src + 0 < end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_const) */                if (src + -1 < end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_const) */                if (src + ((1)+1) < end && RE_IS_LETTER(src[1]))
936: /* MUTANT (rep_const) */                if (src + 1 < end && RE_IS_LETTER(src[0]))
936: /* MUTANT (rep_const) */                if (src + 1 < end && RE_IS_LETTER(src[-1]))
936: /* MUTANT (rep_const) */                if (src + 1 < end && RE_IS_LETTER(src[((1)+1)]))
936: /* MUTANT (negate) */                if(! (src + 1 < end && RE_IS_LETTER(src[1])))
937: /* MUTANT (rep_op) */                    localMax = (jschar) (*src-- & 0x1F);
937: /* MUTANT (rep_const) */                    localMax = (jschar) (*src++ & 1x1F);
937: /* MUTANT (rep_const) */                    localMax = (jschar) (*src++ & -1x1F);
940: /* MUTANT (del_stmt) */ /*                 break; */ 
942: /* MUTANT (rep_const) */                nDigits = 0;
942: /* MUTANT (rep_const) */                nDigits = 1;
942: /* MUTANT (rep_const) */                nDigits = -1;
942: /* MUTANT (rep_const) */                nDigits = ((2)+1);
942: /* MUTANT (rep_const) */                nDigits = ((2)-1);
943: /* MUTANT (del_stmt) */ /*                 goto lexHex; */ 
945: /* MUTANT (rep_const) */                nDigits = 0;
945: /* MUTANT (rep_const) */                nDigits = 1;
945: /* MUTANT (rep_const) */                nDigits = -1;
945: /* MUTANT (rep_const) */                nDigits = ((4)+1);
945: /* MUTANT (rep_const) */                nDigits = ((4)-1);
947: /* MUTANT (rep_const) */                n = 1;
947: /* MUTANT (rep_const) */                n = -1;
948: /* MUTANT (rep_op) */                for (i = 0; (i <= nDigits) && (src < end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i > nDigits) && (src < end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i >= nDigits) && (src < end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i == nDigits) && (src < end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i != nDigits) && (src < end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) || (src < end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src <= end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src > end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src >= end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src == end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src != end); i++) {
948: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src < end); i--) {
948: /* MUTANT (rep_const) */                for (i = 1; (i < nDigits) && (src < end); i++) {
948: /* MUTANT (rep_const) */                for (i = -1; (i < nDigits) && (src < end); i++) {
949: /* MUTANT (del_stmt) */ /*                     c = *src++; */ 
949: /* MUTANT (rep_op) */                    c = *src--;
950: /* MUTANT (negate) */                    if(! (!isASCIIHexDigit(c, &digit))) {
955: /* MUTANT (del_stmt) */ /*                         src -= i + 1; */ 
955: /* MUTANT (rep_op) */                        src += i + 1;
955: /* MUTANT (rep_op) */                        src *= i + 1;
955: /* MUTANT (rep_op) */                        src %= i + 1;
955: /* MUTANT (rep_op) */                        src -= i - 1;
955: /* MUTANT (rep_op) */                        src -= i * 1;
955: /* MUTANT (rep_op) */                        src -= i % 1;
955: /* MUTANT (rep_const) */                        src -= i + 0;
955: /* MUTANT (rep_const) */                        src -= i + -1;
955: /* MUTANT (rep_const) */                        src -= i + ((1)+1);
956: /* MUTANT (del_stmt) */ /*                         n = '\\'; */ 
957: /* MUTANT (del_stmt) */ /*                         break; */ 
959: /* MUTANT (rep_op) */                    n = (n << 4) & digit;
959: /* MUTANT (rep_const) */                    n = (n << 0) | digit;
959: /* MUTANT (rep_const) */                    n = (n << 1) | digit;
959: /* MUTANT (rep_const) */                    n = (n << -1) | digit;
959: /* MUTANT (rep_const) */                    n = (n << ((4)+1)) | digit;
959: /* MUTANT (rep_const) */                    n = (n << ((4)-1)) | digit;
962: /* MUTANT (del_stmt) */ /*                 break; */ 
964: /* MUTANT (negate) */                if(! (inRange)) {
968: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
970: /* MUTANT (rep_const) */                localMax = '0';
970: /* MUTANT (rep_const) */                localMax = '1';
970: /* MUTANT (rep_const) */                localMax = '-1';
970: /* MUTANT (rep_const) */                localMax = '((9)+1)';
970: /* MUTANT (rep_const) */                localMax = '((9)-1)';
971: /* MUTANT (del_stmt) */ /*                 break; */ 
977: /* MUTANT (negate) */                if(! (inRange)) {
981: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
983: /* MUTANT (rep_const) */                target->u.ucclass.bmsize = 0;
983: /* MUTANT (rep_const) */                target->u.ucclass.bmsize = 1;
983: /* MUTANT (rep_const) */                target->u.ucclass.bmsize = -1;
983: /* MUTANT (rep_const) */                target->u.ucclass.bmsize = ((65535)+1);
983: /* MUTANT (rep_const) */                target->u.ucclass.bmsize = ((65535)-1);
984: /* MUTANT (del_stmt) */ /*                 return JS_TRUE; */ 
985: /* MUTANT (rep_const) */            case '1':
985: /* MUTANT (rep_const) */            case '-1':
986: /* MUTANT (rep_const) */            case '0':
986: /* MUTANT (rep_const) */            case '-1':
986: /* MUTANT (rep_const) */            case '((1)+1)':
987: /* MUTANT (rep_const) */            case '0':
987: /* MUTANT (rep_const) */            case '1':
987: /* MUTANT (rep_const) */            case '-1':
987: /* MUTANT (rep_const) */            case '((2)+1)':
987: /* MUTANT (rep_const) */            case '((2)-1)':
988: /* MUTANT (rep_const) */            case '0':
988: /* MUTANT (rep_const) */            case '1':
988: /* MUTANT (rep_const) */            case '-1':
988: /* MUTANT (rep_const) */            case '((3)+1)':
988: /* MUTANT (rep_const) */            case '((3)-1)':
989: /* MUTANT (rep_const) */            case '0':
989: /* MUTANT (rep_const) */            case '1':
989: /* MUTANT (rep_const) */            case '-1':
989: /* MUTANT (rep_const) */            case '((4)+1)':
989: /* MUTANT (rep_const) */            case '((4)-1)':
990: /* MUTANT (rep_const) */            case '0':
990: /* MUTANT (rep_const) */            case '1':
990: /* MUTANT (rep_const) */            case '-1':
990: /* MUTANT (rep_const) */            case '((5)+1)':
990: /* MUTANT (rep_const) */            case '((5)-1)':
991: /* MUTANT (rep_const) */            case '0':
991: /* MUTANT (rep_const) */            case '1':
991: /* MUTANT (rep_const) */            case '-1':
991: /* MUTANT (rep_const) */            case '((6)+1)':
991: /* MUTANT (rep_const) */            case '((6)-1)':
992: /* MUTANT (rep_const) */            case '0':
992: /* MUTANT (rep_const) */            case '1':
992: /* MUTANT (rep_const) */            case '-1':
992: /* MUTANT (rep_const) */            case '((7)+1)':
992: /* MUTANT (rep_const) */            case '((7)-1)':
1000: /* MUTANT (del_stmt) */ /*                 c = *src; */ 
1001: /* MUTANT (rep_op) */                if ('0' < c && c <= '7') {
1001: /* MUTANT (rep_op) */                if ('0' > c && c <= '7') {
1001: /* MUTANT (rep_op) */                if ('0' >= c && c <= '7') {
1001: /* MUTANT (rep_op) */                if ('0' == c && c <= '7') {
1001: /* MUTANT (rep_op) */                if ('0' != c && c <= '7') {
1001: /* MUTANT (rep_op) */                if ('0' <= c || c <= '7') {
1001: /* MUTANT (rep_op) */                if ('0' <= c && c < '7') {
1001: /* MUTANT (rep_op) */                if ('0' <= c && c > '7') {
1001: /* MUTANT (rep_op) */                if ('0' <= c && c >= '7') {
1001: /* MUTANT (rep_op) */                if ('0' <= c && c == '7') {
1001: /* MUTANT (rep_op) */                if ('0' <= c && c != '7') {
1001: /* MUTANT (rep_const) */                if ('1' <= c && c <= '7') {
1001: /* MUTANT (rep_const) */                if ('-1' <= c && c <= '7') {
1001: /* MUTANT (rep_const) */                if ('0' <= c && c <= '0') {
1001: /* MUTANT (rep_const) */                if ('0' <= c && c <= '1') {
1001: /* MUTANT (rep_const) */                if ('0' <= c && c <= '-1') {
1001: /* MUTANT (rep_const) */                if ('0' <= c && c <= '((7)+1)') {
1001: /* MUTANT (rep_const) */                if ('0' <= c && c <= '((7)-1)') {
1001: /* MUTANT (negate) */                if(! ('0' <= c && c <= '7')) {
1002: /* MUTANT (del_stmt) */ /*                     src++; */ 
1002: /* MUTANT (rep_op) */                    src--;
1003: /* MUTANT (del_stmt) */ /*                     n = 8 * n + JS7_UNDEC(c); */ 
1003: /* MUTANT (rep_op) */                    n = 8 * n - JS7_UNDEC(c);
1003: /* MUTANT (rep_op) */                    n = 8 * n * JS7_UNDEC(c);
1003: /* MUTANT (rep_op) */                    n = 8 * n % JS7_UNDEC(c);
1003: /* MUTANT (rep_const) */                    n = 0 * n + JS7_UNDEC(c);
1003: /* MUTANT (rep_const) */                    n = 1 * n + JS7_UNDEC(c);
1003: /* MUTANT (rep_const) */                    n = -1 * n + JS7_UNDEC(c);
1003: /* MUTANT (rep_const) */                    n = ((8)+1) * n + JS7_UNDEC(c);
1003: /* MUTANT (rep_const) */                    n = ((8)-1) * n + JS7_UNDEC(c);
1004: /* MUTANT (del_stmt) */ /*                     c = *src; */ 
1005: /* MUTANT (rep_op) */                    if ('0' < c && c <= '7') {
1005: /* MUTANT (rep_op) */                    if ('0' > c && c <= '7') {
1005: /* MUTANT (rep_op) */                    if ('0' >= c && c <= '7') {
1005: /* MUTANT (rep_op) */                    if ('0' == c && c <= '7') {
1005: /* MUTANT (rep_op) */                    if ('0' != c && c <= '7') {
1005: /* MUTANT (rep_op) */                    if ('0' <= c || c <= '7') {
1005: /* MUTANT (rep_op) */                    if ('0' <= c && c < '7') {
1005: /* MUTANT (rep_op) */                    if ('0' <= c && c > '7') {
1005: /* MUTANT (rep_op) */                    if ('0' <= c && c >= '7') {
1005: /* MUTANT (rep_op) */                    if ('0' <= c && c == '7') {
1005: /* MUTANT (rep_op) */                    if ('0' <= c && c != '7') {
1005: /* MUTANT (rep_const) */                    if ('1' <= c && c <= '7') {
1005: /* MUTANT (rep_const) */                    if ('-1' <= c && c <= '7') {
1005: /* MUTANT (rep_const) */                    if ('0' <= c && c <= '0') {
1005: /* MUTANT (rep_const) */                    if ('0' <= c && c <= '1') {
1005: /* MUTANT (rep_const) */                    if ('0' <= c && c <= '-1') {
1005: /* MUTANT (rep_const) */                    if ('0' <= c && c <= '((7)+1)') {
1005: /* MUTANT (rep_const) */                    if ('0' <= c && c <= '((7)-1)') {
1005: /* MUTANT (negate) */                    if(! ('0' <= c && c <= '7')) {
1006: /* MUTANT (del_stmt) */ /*                         src++; */ 
1006: /* MUTANT (rep_op) */                        src--;
1007: /* MUTANT (del_stmt) */ /*                         i = 8 * n + JS7_UNDEC(c); */ 
1007: /* MUTANT (rep_op) */                        i = 8 * n - JS7_UNDEC(c);
1007: /* MUTANT (rep_op) */                        i = 8 * n * JS7_UNDEC(c);
1007: /* MUTANT (rep_op) */                        i = 8 * n % JS7_UNDEC(c);
1007: /* MUTANT (rep_const) */                        i = 0 * n + JS7_UNDEC(c);
1007: /* MUTANT (rep_const) */                        i = 1 * n + JS7_UNDEC(c);
1007: /* MUTANT (rep_const) */                        i = -1 * n + JS7_UNDEC(c);
1007: /* MUTANT (rep_const) */                        i = ((8)+1) * n + JS7_UNDEC(c);
1007: /* MUTANT (rep_const) */                        i = ((8)-1) * n + JS7_UNDEC(c);
1008: /* MUTANT (rep_op) */                        if (i < 0377)
1008: /* MUTANT (rep_op) */                        if (i > 0377)
1008: /* MUTANT (rep_op) */                        if (i >= 0377)
1008: /* MUTANT (rep_op) */                        if (i == 0377)
1008: /* MUTANT (rep_op) */                        if (i != 0377)
1008: /* MUTANT (rep_const) */                        if (i <= 0)
1008: /* MUTANT (rep_const) */                        if (i <= 1)
1008: /* MUTANT (rep_const) */                        if (i <= -1)
1008: /* MUTANT (rep_const) */                        if (i <= ((0377)+1))
1008: /* MUTANT (rep_const) */                        if (i <= ((0377)-1))
1008: /* MUTANT (negate) */                        if(! (i <= 0377))
1011: /* MUTANT (rep_op) */                            src++;
1015: /* MUTANT (del_stmt) */ /*                 break; */ 
1019: /* MUTANT (del_stmt) */ /*                 break; */ 
1023: /* MUTANT (rep_op) */            localMax = *src--;
1024: /* MUTANT (del_stmt) */ /*             break; */ 
1026: /* MUTANT (negate) */        if(! (inRange)) {
1027: /* MUTANT (rep_op) */            if (rangeStart <= localMax) {
1027: /* MUTANT (rep_op) */            if (rangeStart < localMax) {
1027: /* MUTANT (rep_op) */            if (rangeStart >= localMax) {
1027: /* MUTANT (rep_op) */            if (rangeStart == localMax) {
1027: /* MUTANT (rep_op) */            if (rangeStart != localMax) {
1027: /* MUTANT (negate) */            if(! (rangeStart > localMax)) {
1031: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
1035: /* MUTANT (rep_op) */            if (src <= end - 1) {
1035: /* MUTANT (rep_op) */            if (src > end - 1) {
1035: /* MUTANT (rep_op) */            if (src >= end - 1) {
1035: /* MUTANT (rep_op) */            if (src == end - 1) {
1035: /* MUTANT (rep_op) */            if (src != end - 1) {
1035: /* MUTANT (rep_const) */            if (src < end - 0) {
1035: /* MUTANT (rep_const) */            if (src < end - -1) {
1035: /* MUTANT (rep_const) */            if (src < end - ((1)+1)) {
1035: /* MUTANT (negate) */            if(! (src < end - 1)) {
1036: /* MUTANT (rep_op) */                if (*src != '-') {
1036: /* MUTANT (negate) */                if(! (*src == '-')) {
1037: /* MUTANT (del_stmt) */ /*                     ++src; */ 
1037: /* MUTANT (rep_op) */                    --src;
1038: /* MUTANT (del_stmt) */ /*                     inRange = JS_TRUE; */ 
1039: /* MUTANT (del_stmt) */ /*                     rangeStart = (jschar)localMax; */ 
1040: /* MUTANT (del_stmt) */ /*                     continue; */ 
1044: /* MUTANT (negate) */        if(! (state->flags & JSREG_FOLD)) {
1045: /* MUTANT (del_stmt) */ /*             c = JS_MAX(upcase((jschar)localMax), downcase((jschar)localMax)); */ 
1046: /* MUTANT (rep_op) */            if (c <= localMax)
1046: /* MUTANT (rep_op) */            if (c < localMax)
1046: /* MUTANT (rep_op) */            if (c >= localMax)
1046: /* MUTANT (rep_op) */            if (c == localMax)
1046: /* MUTANT (rep_op) */            if (c != localMax)
1046: /* MUTANT (negate) */            if(! (c > localMax))
1049: /* MUTANT (rep_op) */        if (localMax <= max)
1049: /* MUTANT (rep_op) */        if (localMax < max)
1049: /* MUTANT (rep_op) */        if (localMax >= max)
1049: /* MUTANT (rep_op) */        if (localMax == max)
1049: /* MUTANT (rep_op) */        if (localMax != max)
1049: /* MUTANT (negate) */        if(! (localMax > max))
1053: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1113: /* MUTANT (del_stmt) */ /*     jschar c = *state->cp++; */ 
1113: /* MUTANT (rep_op) */    jschar c = *state->cp--;
1114: /* MUTANT (del_stmt) */ /*     uintN nDigits; */ 
1115: /* MUTANT (del_stmt) */ /*     uintN num, tmp, n, i; */ 
1116: /* MUTANT (del_stmt) */ /*     const jschar *termStart; */ 
1122: /* MUTANT (negate) */        if(! (!state->result))
1124: /* MUTANT (del_stmt) */ /*         state->progLength++; */ 
1124: /* MUTANT (rep_op) */        state->progLength--;
1125: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
1128: /* MUTANT (negate) */        if(! (!state->result))
1130: /* MUTANT (del_stmt) */ /*         state->progLength++; */ 
1130: /* MUTANT (rep_op) */        state->progLength--;
1131: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
1133: /* MUTANT (rep_op) */        if (state->cp <= state->cpend) {
1133: /* MUTANT (rep_op) */        if (state->cp < state->cpend) {
1133: /* MUTANT (rep_op) */        if (state->cp > state->cpend) {
1133: /* MUTANT (rep_op) */        if (state->cp == state->cpend) {
1133: /* MUTANT (rep_op) */        if (state->cp != state->cpend) {
1133: /* MUTANT (negate) */        if(! (state->cp >= state->cpend)) {
1136: /* MUTANT (rep_op) */                                        JSREPORT_TS & JSREPORT_ERROR,
1138: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
1140: /* MUTANT (rep_op) */        c = *state->cp--;
1145: /* MUTANT (negate) */            if(! (!state->result))
1147: /* MUTANT (del_stmt) */ /*             state->progLength++; */ 
1147: /* MUTANT (rep_op) */            state->progLength--;
1148: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
1151: /* MUTANT (negate) */            if(! (!state->result))
1153: /* MUTANT (del_stmt) */ /*             state->progLength++; */ 
1153: /* MUTANT (rep_op) */            state->progLength--;
1154: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
1156: /* MUTANT (rep_const) */        case '1':
1156: /* MUTANT (rep_const) */        case '-1':
1160: /* MUTANT (rep_op) */                                             JSREPORT_TS &
1161: /* MUTANT (rep_op) */                                             JSREPORT_WARNING &
1164: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
1167: /* MUTANT (rep_const) */            num = 1;
1167: /* MUTANT (rep_const) */            num = -1;
1168: /* MUTANT (rep_op) */            while (state->cp <= state->cpend) {
1168: /* MUTANT (rep_op) */            while (state->cp > state->cpend) {
1168: /* MUTANT (rep_op) */            while (state->cp >= state->cpend) {
1168: /* MUTANT (rep_op) */            while (state->cp == state->cpend) {
1168: /* MUTANT (rep_op) */            while (state->cp != state->cpend) {
1168: /* MUTANT (negate) */            while(! (state->cp < state->cpend)) {
1169: /* MUTANT (del_stmt) */ /*                 c = *state->cp; */ 
1170: /* MUTANT (rep_op) */                if (c <= '0' || '7' < c)
1170: /* MUTANT (rep_op) */                if (c > '0' || '7' < c)
1170: /* MUTANT (rep_op) */                if (c >= '0' || '7' < c)
1170: /* MUTANT (rep_op) */                if (c == '0' || '7' < c)
1170: /* MUTANT (rep_op) */                if (c != '0' || '7' < c)
1170: /* MUTANT (rep_op) */                if (c < '0' && '7' < c)
1170: /* MUTANT (rep_op) */                if (c < '0' || '7' <= c)
1170: /* MUTANT (rep_op) */                if (c < '0' || '7' > c)
1170: /* MUTANT (rep_op) */                if (c < '0' || '7' >= c)
1170: /* MUTANT (rep_op) */                if (c < '0' || '7' == c)
1170: /* MUTANT (rep_op) */                if (c < '0' || '7' != c)
1170: /* MUTANT (rep_const) */                if (c < '1' || '7' < c)
1170: /* MUTANT (rep_const) */                if (c < '-1' || '7' < c)
1170: /* MUTANT (rep_const) */                if (c < '0' || '0' < c)
1170: /* MUTANT (rep_const) */                if (c < '0' || '1' < c)
1170: /* MUTANT (rep_const) */                if (c < '0' || '-1' < c)
1170: /* MUTANT (rep_const) */                if (c < '0' || '((7)+1)' < c)
1170: /* MUTANT (rep_const) */                if (c < '0' || '((7)-1)' < c)
1170: /* MUTANT (negate) */                if(! (c < '0' || '7' < c))
1172: /* MUTANT (del_stmt) */ /*                 state->cp++; */ 
1172: /* MUTANT (rep_op) */                state->cp--;
1173: /* MUTANT (del_stmt) */ /*                 tmp = 8 * num + (uintN)JS7_UNDEC(c); */ 
1173: /* MUTANT (rep_op) */                tmp = 8 * num - (uintN)JS7_UNDEC(c);
1173: /* MUTANT (rep_op) */                tmp = 8 * num * (uintN)JS7_UNDEC(c);
1173: /* MUTANT (rep_op) */                tmp = 8 * num % (uintN)JS7_UNDEC(c);
1173: /* MUTANT (rep_const) */                tmp = 0 * num + (uintN)JS7_UNDEC(c);
1173: /* MUTANT (rep_const) */                tmp = 1 * num + (uintN)JS7_UNDEC(c);
1173: /* MUTANT (rep_const) */                tmp = -1 * num + (uintN)JS7_UNDEC(c);
1173: /* MUTANT (rep_const) */                tmp = ((8)+1) * num + (uintN)JS7_UNDEC(c);
1173: /* MUTANT (rep_const) */                tmp = ((8)-1) * num + (uintN)JS7_UNDEC(c);
1174: /* MUTANT (rep_op) */                if (tmp <= 0377)
1174: /* MUTANT (rep_op) */                if (tmp < 0377)
1174: /* MUTANT (rep_op) */                if (tmp >= 0377)
1174: /* MUTANT (rep_op) */                if (tmp == 0377)
1174: /* MUTANT (rep_op) */                if (tmp != 0377)
1174: /* MUTANT (rep_const) */                if (tmp > 0)
1174: /* MUTANT (rep_const) */                if (tmp > 1)
1174: /* MUTANT (rep_const) */                if (tmp > -1)
1174: /* MUTANT (rep_const) */                if (tmp > ((0377)+1))
1174: /* MUTANT (rep_const) */                if (tmp > ((0377)-1))
1174: /* MUTANT (negate) */                if(! (tmp > 0377))
1176: /* MUTANT (del_stmt) */ /*                 num = tmp; */ 
1181: /* MUTANT (negate) */            if(! (!state->result))
1183: /* MUTANT (del_stmt) */ /*             state->result->u.flat.chr = c; */ 
1184: /* MUTANT (del_stmt) */ /*             state->result->u.flat.length = 1; */ 
1184: /* MUTANT (rep_const) */            state->result->u.flat.length = 0;
1184: /* MUTANT (rep_const) */            state->result->u.flat.length = -1;
1184: /* MUTANT (rep_const) */            state->result->u.flat.length = ((1)+1);
1185: /* MUTANT (del_stmt) */ /*             state->progLength += 3; */ 
1185: /* MUTANT (rep_op) */            state->progLength -= 3;
1185: /* MUTANT (rep_op) */            state->progLength *= 3;
1185: /* MUTANT (rep_op) */            state->progLength %= 3;
1185: /* MUTANT (rep_const) */            state->progLength += 0;
1185: /* MUTANT (rep_const) */            state->progLength += 1;
1185: /* MUTANT (rep_const) */            state->progLength += -1;
1185: /* MUTANT (rep_const) */            state->progLength += ((3)+1);
1185: /* MUTANT (rep_const) */            state->progLength += ((3)-1);
1186: /* MUTANT (del_stmt) */ /*             break; */ 
1187: /* MUTANT (rep_const) */        case '0':
1187: /* MUTANT (rep_const) */        case '-1':
1187: /* MUTANT (rep_const) */        case '((1)+1)':
1188: /* MUTANT (rep_const) */        case '0':
1188: /* MUTANT (rep_const) */        case '1':
1188: /* MUTANT (rep_const) */        case '-1':
1188: /* MUTANT (rep_const) */        case '((2)+1)':
1188: /* MUTANT (rep_const) */        case '((2)-1)':
1189: /* MUTANT (rep_const) */        case '0':
1189: /* MUTANT (rep_const) */        case '1':
1189: /* MUTANT (rep_const) */        case '-1':
1189: /* MUTANT (rep_const) */        case '((3)+1)':
1189: /* MUTANT (rep_const) */        case '((3)-1)':
1190: /* MUTANT (rep_const) */        case '0':
1190: /* MUTANT (rep_const) */        case '1':
1190: /* MUTANT (rep_const) */        case '-1':
1190: /* MUTANT (rep_const) */        case '((4)+1)':
1190: /* MUTANT (rep_const) */        case '((4)-1)':
1191: /* MUTANT (rep_const) */        case '0':
1191: /* MUTANT (rep_const) */        case '1':
1191: /* MUTANT (rep_const) */        case '-1':
1191: /* MUTANT (rep_const) */        case '((5)+1)':
1191: /* MUTANT (rep_const) */        case '((5)-1)':
1192: /* MUTANT (rep_const) */        case '0':
1192: /* MUTANT (rep_const) */        case '1':
1192: /* MUTANT (rep_const) */        case '-1':
1192: /* MUTANT (rep_const) */        case '((6)+1)':
1192: /* MUTANT (rep_const) */        case '((6)-1)':
1193: /* MUTANT (rep_const) */        case '0':
1193: /* MUTANT (rep_const) */        case '1':
1193: /* MUTANT (rep_const) */        case '-1':
1193: /* MUTANT (rep_const) */        case '((7)+1)':
1193: /* MUTANT (rep_const) */        case '((7)-1)':
1194: /* MUTANT (rep_const) */        case '0':
1194: /* MUTANT (rep_const) */        case '1':
1194: /* MUTANT (rep_const) */        case '-1':
1194: /* MUTANT (rep_const) */        case '((8)+1)':
1194: /* MUTANT (rep_const) */        case '((8)-1)':
1195: /* MUTANT (rep_const) */        case '0':
1195: /* MUTANT (rep_const) */        case '1':
1195: /* MUTANT (rep_const) */        case '-1':
1195: /* MUTANT (rep_const) */        case '((9)+1)':
1195: /* MUTANT (rep_const) */        case '((9)-1)':
1196: /* MUTANT (rep_const) */            termStart = state->cp - 0;
1196: /* MUTANT (rep_const) */            termStart = state->cp - -1;
1196: /* MUTANT (rep_const) */            termStart = state->cp - ((1)+1);
1197: /* MUTANT (del_stmt) */ /*             num = GetDecimalValue(c, state->parenCount, FindParenCount, state); */ 
1198: /* MUTANT (negate) */            if(! (state->flags & JSREG_FIND_PAREN_ERROR))
1200: /* MUTANT (rep_op) */            if (num != OVERFLOW_VALUE) {
1200: /* MUTANT (negate) */            if(! (num == OVERFLOW_VALUE)) {
1204: /* MUTANT (rep_op) */                                                 JSREPORT_TS &
1205: /* MUTANT (rep_op) */                                                 JSREPORT_WARNING &
1207: /* MUTANT (rep_op) */                                                 (c <= '8')
1207: /* MUTANT (rep_op) */                                                 (c < '8')
1207: /* MUTANT (rep_op) */                                                 (c > '8')
1207: /* MUTANT (rep_op) */                                                 (c == '8')
1207: /* MUTANT (rep_op) */                                                 (c != '8')
1207: /* MUTANT (rep_const) */                                                 (c >= '0')
1207: /* MUTANT (rep_const) */                                                 (c >= '1')
1207: /* MUTANT (rep_const) */                                                 (c >= '-1')
1207: /* MUTANT (rep_const) */                                                 (c >= '((8)+1)')
1207: /* MUTANT (rep_const) */                                                 (c >= '((8)-1)')
1210: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
1220: /* MUTANT (rep_op) */                if (c <= '8') {
1220: /* MUTANT (rep_op) */                if (c < '8') {
1220: /* MUTANT (rep_op) */                if (c > '8') {
1220: /* MUTANT (rep_op) */                if (c == '8') {
1220: /* MUTANT (rep_op) */                if (c != '8') {
1220: /* MUTANT (rep_const) */                if (c >= '0') {
1220: /* MUTANT (rep_const) */                if (c >= '1') {
1220: /* MUTANT (rep_const) */                if (c >= '-1') {
1220: /* MUTANT (rep_const) */                if (c >= '((8)+1)') {
1220: /* MUTANT (rep_const) */                if (c >= '((8)-1)') {
1220: /* MUTANT (negate) */                if(! (c >= '8')) {
1222: /* MUTANT (del_stmt) */ /*                     c = '\\'; */ 
1223: /* MUTANT (del_stmt) */ /*                     goto asFlat; */ 
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 < num && num <= 0x10000);
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 > num && num <= 0x10000);
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 >= num && num <= 0x10000);
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 == num && num <= 0x10000);
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 != num && num <= 0x10000);
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 <= num || num <= 0x10000);
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 <= num && num < 0x10000);
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 <= num && num > 0x10000);
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 <= num && num >= 0x10000);
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 <= num && num == 0x10000);
1229: /* MUTANT (rep_op) */            JS_ASSERT(1 <= num && num != 0x10000);
1229: /* MUTANT (rep_const) */            JS_ASSERT(0 <= num && num <= 0x10000);
1229: /* MUTANT (rep_const) */            JS_ASSERT(-1 <= num && num <= 0x10000);
1229: /* MUTANT (rep_const) */            JS_ASSERT(((1)+1) <= num && num <= 0x10000);
1229: /* MUTANT (rep_const) */            JS_ASSERT(1 <= num && num <= 1x10000);
1229: /* MUTANT (rep_const) */            JS_ASSERT(1 <= num && num <= -1x10000);
1230: /* MUTANT (del_stmt) */ /*             state->result = NewRENode(state, REOP_BACKREF); */ 
1231: /* MUTANT (negate) */            if(! (!state->result))
1233: /* MUTANT (del_stmt) */ /*             state->result->u.parenIndex = num - 1; */ 
1233: /* MUTANT (rep_const) */            state->result->u.parenIndex = num - 0;
1233: /* MUTANT (rep_const) */            state->result->u.parenIndex = num - -1;
1233: /* MUTANT (rep_const) */            state->result->u.parenIndex = num - ((1)+1);
1235: /* MUTANT (rep_op) */                -= 1 + GetCompactIndexWidth(state->result->u.parenIndex);
1235: /* MUTANT (rep_op) */                *= 1 + GetCompactIndexWidth(state->result->u.parenIndex);
1235: /* MUTANT (rep_op) */                %= 1 + GetCompactIndexWidth(state->result->u.parenIndex);
1235: /* MUTANT (rep_op) */                += 1 - GetCompactIndexWidth(state->result->u.parenIndex);
1235: /* MUTANT (rep_op) */                += 1 * GetCompactIndexWidth(state->result->u.parenIndex);
1235: /* MUTANT (rep_op) */                += 1 % GetCompactIndexWidth(state->result->u.parenIndex);
1235: /* MUTANT (rep_const) */                += 0 + GetCompactIndexWidth(state->result->u.parenIndex);
1235: /* MUTANT (rep_const) */                += -1 + GetCompactIndexWidth(state->result->u.parenIndex);
1235: /* MUTANT (rep_const) */                += ((1)+1) + GetCompactIndexWidth(state->result->u.parenIndex);
1236: /* MUTANT (del_stmt) */ /*             break; */ 
1239: /* MUTANT (rep_const) */            c = 1xC;
1239: /* MUTANT (rep_const) */            c = -1xC;
1240: /* MUTANT (del_stmt) */ /*             goto doFlat; */ 
1242: /* MUTANT (rep_const) */            c = 1xA;
1242: /* MUTANT (rep_const) */            c = -1xA;
1243: /* MUTANT (del_stmt) */ /*             goto doFlat; */ 
1245: /* MUTANT (rep_const) */            c = 1xD;
1245: /* MUTANT (rep_const) */            c = -1xD;
1246: /* MUTANT (del_stmt) */ /*             goto doFlat; */ 
1248: /* MUTANT (rep_const) */            c = 1x9;
1248: /* MUTANT (rep_const) */            c = -1x9;
1249: /* MUTANT (del_stmt) */ /*             goto doFlat; */ 
1251: /* MUTANT (rep_const) */            c = 1xB;
1251: /* MUTANT (rep_const) */            c = -1xB;
1252: /* MUTANT (del_stmt) */ /*             goto doFlat; */ 
1255: /* MUTANT (rep_op) */            if (state->cp - 1 < state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_op) */            if (state->cp * 1 < state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_op) */            if (state->cp % 1 < state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_op) */            if (state->cp + 1 <= state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_op) */            if (state->cp + 1 > state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_op) */            if (state->cp + 1 >= state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_op) */            if (state->cp + 1 == state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_op) */            if (state->cp + 1 != state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_op) */            if (state->cp + 1 < state->cpend || RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_const) */            if (state->cp + 0 < state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_const) */            if (state->cp + -1 < state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_const) */            if (state->cp + ((1)+1) < state->cpend && RE_IS_LETTER(state->cp[1])) {
1255: /* MUTANT (rep_const) */            if (state->cp + 1 < state->cpend && RE_IS_LETTER(state->cp[0])) {
1255: /* MUTANT (rep_const) */            if (state->cp + 1 < state->cpend && RE_IS_LETTER(state->cp[-1])) {
1255: /* MUTANT (rep_const) */            if (state->cp + 1 < state->cpend && RE_IS_LETTER(state->cp[((1)+1)])) {
1255: /* MUTANT (negate) */            if(! (state->cp + 1 < state->cpend && RE_IS_LETTER(state->cp[1]))) {
1256: /* MUTANT (del_stmt) */ /*                 c = (jschar) (*state->cp++ & 0x1F); */ 
1256: /* MUTANT (rep_op) */                c = (jschar) (*state->cp-- & 0x1F);
1256: /* MUTANT (rep_const) */                c = (jschar) (*state->cp++ & 1x1F);
1256: /* MUTANT (rep_const) */                c = (jschar) (*state->cp++ & -1x1F);
1259: /* MUTANT (del_stmt) */ /*                 --state->cp; */ 
1259: /* MUTANT (rep_op) */                ++state->cp;
1260: /* MUTANT (del_stmt) */ /*                 c = '\\'; */ 
1265: /* MUTANT (rep_const) */            nDigits = 0;
1265: /* MUTANT (rep_const) */            nDigits = 1;
1265: /* MUTANT (rep_const) */            nDigits = -1;
1265: /* MUTANT (rep_const) */            nDigits = ((2)+1);
1265: /* MUTANT (rep_const) */            nDigits = ((2)-1);
1266: /* MUTANT (del_stmt) */ /*             goto lexHex; */ 
1269: /* MUTANT (rep_const) */            nDigits = 0;
1269: /* MUTANT (rep_const) */            nDigits = 1;
1269: /* MUTANT (rep_const) */            nDigits = -1;
1269: /* MUTANT (rep_const) */            nDigits = ((4)+1);
1269: /* MUTANT (rep_const) */            nDigits = ((4)-1);
1271: /* MUTANT (rep_const) */            n = 1;
1271: /* MUTANT (rep_const) */            n = -1;
1272: /* MUTANT (rep_op) */            for (i = 0; i <= nDigits && state->cp < state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i > nDigits && state->cp < state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i >= nDigits && state->cp < state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i == nDigits && state->cp < state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i != nDigits && state->cp < state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i < nDigits || state->cp < state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i < nDigits && state->cp <= state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i < nDigits && state->cp > state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i < nDigits && state->cp >= state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i < nDigits && state->cp == state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i < nDigits && state->cp != state->cpend; i++) {
1272: /* MUTANT (rep_op) */            for (i = 0; i < nDigits && state->cp < state->cpend; i--) {
1272: /* MUTANT (rep_const) */            for (i = 1; i < nDigits && state->cp < state->cpend; i++) {
1272: /* MUTANT (rep_const) */            for (i = -1; i < nDigits && state->cp < state->cpend; i++) {
1273: /* MUTANT (del_stmt) */ /*                 uintN digit; */ 
1274: /* MUTANT (del_stmt) */ /*                 c = *state->cp++; */ 
1274: /* MUTANT (rep_op) */                c = *state->cp--;
1275: /* MUTANT (negate) */                if(! (!isASCIIHexDigit(c, &digit))) {
1280: /* MUTANT (del_stmt) */ /*                     state->cp -= i + 2; */ 
1280: /* MUTANT (rep_op) */                    state->cp += i + 2;
1280: /* MUTANT (rep_op) */                    state->cp *= i + 2;
1280: /* MUTANT (rep_op) */                    state->cp %= i + 2;
1280: /* MUTANT (rep_op) */                    state->cp -= i - 2;
1280: /* MUTANT (rep_op) */                    state->cp -= i * 2;
1280: /* MUTANT (rep_op) */                    state->cp -= i % 2;
1280: /* MUTANT (rep_const) */                    state->cp -= i + 0;
1280: /* MUTANT (rep_const) */                    state->cp -= i + 1;
1280: /* MUTANT (rep_const) */                    state->cp -= i + -1;
1280: /* MUTANT (rep_const) */                    state->cp -= i + ((2)+1);
1280: /* MUTANT (rep_const) */                    state->cp -= i + ((2)-1);
1281: /* MUTANT (del_stmt) */ /*                     n = *state->cp++; */ 
1281: /* MUTANT (rep_op) */                    n = *state->cp--;
1282: /* MUTANT (del_stmt) */ /*                     break; */ 
1284: /* MUTANT (rep_op) */                n = (n << 4) & digit;
1284: /* MUTANT (rep_const) */                n = (n << 0) | digit;
1284: /* MUTANT (rep_const) */                n = (n << 1) | digit;
1284: /* MUTANT (rep_const) */                n = (n << -1) | digit;
1284: /* MUTANT (rep_const) */                n = (n << ((4)+1)) | digit;
1284: /* MUTANT (rep_const) */                n = (n << ((4)-1)) | digit;
1287: /* MUTANT (del_stmt) */ /*             goto doFlat; */ 
1292: /* MUTANT (negate) */            if(! (!state->result))
1294: /* MUTANT (del_stmt) */ /*             state->progLength++; */ 
1294: /* MUTANT (rep_op) */            state->progLength--;
1295: /* MUTANT (del_stmt) */ /*             break; */ 
1298: /* MUTANT (del_stmt) */ /*             goto doSimple; */ 
1301: /* MUTANT (del_stmt) */ /*             goto doSimple; */ 
1304: /* MUTANT (del_stmt) */ /*             goto doSimple; */ 
1307: /* MUTANT (del_stmt) */ /*             goto doSimple; */ 
1310: /* MUTANT (del_stmt) */ /*             goto doSimple; */ 
1314: /* MUTANT (negate) */            if(! (!state->result))
1316: /* MUTANT (del_stmt) */ /*             state->result->u.flat.chr = c; */ 
1317: /* MUTANT (del_stmt) */ /*             state->result->u.flat.length = 1; */ 
1317: /* MUTANT (rep_const) */            state->result->u.flat.length = 0;
1317: /* MUTANT (rep_const) */            state->result->u.flat.length = -1;
1317: /* MUTANT (rep_const) */            state->result->u.flat.length = ((1)+1);
1318: /* MUTANT (del_stmt) */ /*             state->result->kid = (void *) (state->cp - 1); */ 
1318: /* MUTANT (rep_const) */            state->result->kid = (void *) (state->cp - 0);
1318: /* MUTANT (rep_const) */            state->result->kid = (void *) (state->cp - -1);
1318: /* MUTANT (rep_const) */            state->result->kid = (void *) (state->cp - ((1)+1));
1319: /* MUTANT (del_stmt) */ /*             state->progLength += 3; */ 
1319: /* MUTANT (rep_op) */            state->progLength -= 3;
1319: /* MUTANT (rep_op) */            state->progLength *= 3;
1319: /* MUTANT (rep_op) */            state->progLength %= 3;
1319: /* MUTANT (rep_const) */            state->progLength += 0;
1319: /* MUTANT (rep_const) */            state->progLength += 1;
1319: /* MUTANT (rep_const) */            state->progLength += -1;
1319: /* MUTANT (rep_const) */            state->progLength += ((3)+1);
1319: /* MUTANT (rep_const) */            state->progLength += ((3)-1);
1320: /* MUTANT (del_stmt) */ /*             break; */ 
1325: /* MUTANT (negate) */        if(! (!state->result))
1327: /* MUTANT (del_stmt) */ /*         termStart = state->cp; */ 
1328: /* MUTANT (del_stmt) */ /*         state->result->u.ucclass.startIndex = termStart - state->cpbegin; */ 
1330: /* MUTANT (rep_op) */            if (state->cp != state->cpend) {
1330: /* MUTANT (negate) */            if(! (state->cp == state->cpend)) {
1332: /* MUTANT (rep_op) */                                              JSREPORT_TS & JSREPORT_ERROR,
1335: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
1337: /* MUTANT (rep_op) */            if (*state->cp != '\\') {
1337: /* MUTANT (negate) */            if(! (*state->cp == '\\')) {
1338: /* MUTANT (del_stmt) */ /*                 state->cp++; */ 
1338: /* MUTANT (rep_op) */                state->cp--;
1339: /* MUTANT (rep_op) */                if (state->cp == state->cpend)
1339: /* MUTANT (negate) */                if(! (state->cp != state->cpend))
1340: /* MUTANT (rep_op) */                    state->cp--;
1341: /* MUTANT (del_stmt) */ /*                 continue; */ 
1343: /* MUTANT (rep_op) */            if (*state->cp != ']') {
1343: /* MUTANT (negate) */            if(! (*state->cp == ']')) {
1344: /* MUTANT (del_stmt) */ /*                 state->result->u.ucclass.kidlen = state->cp - termStart; */ 
1345: /* MUTANT (del_stmt) */ /*                 break; */ 
1347: /* MUTANT (rep_op) */            state->cp--;
1349: /* MUTANT (rep_op) */        for (i = 0; i <= CLASS_CACHE_SIZE; i++) {
1349: /* MUTANT (rep_op) */        for (i = 0; i > CLASS_CACHE_SIZE; i++) {
1349: /* MUTANT (rep_op) */        for (i = 0; i >= CLASS_CACHE_SIZE; i++) {
1349: /* MUTANT (rep_op) */        for (i = 0; i == CLASS_CACHE_SIZE; i++) {
1349: /* MUTANT (rep_op) */        for (i = 0; i != CLASS_CACHE_SIZE; i++) {
1349: /* MUTANT (rep_op) */        for (i = 0; i < CLASS_CACHE_SIZE; i--) {
1349: /* MUTANT (rep_const) */        for (i = 1; i < CLASS_CACHE_SIZE; i++) {
1349: /* MUTANT (rep_const) */        for (i = -1; i < CLASS_CACHE_SIZE; i++) {
1350: /* MUTANT (negate) */            if(! (!state->classCache[i].start)) {
1351: /* MUTANT (del_stmt) */ /*                 state->classCache[i].start = termStart; */ 
1352: /* MUTANT (del_stmt) */ /*                 state->classCache[i].length = state->result->u.ucclass.kidlen; */ 
1353: /* MUTANT (del_stmt) */ /*                 state->classCache[i].index = state->classCount; */ 
1354: /* MUTANT (del_stmt) */ /*                 break; */ 
1356: /* MUTANT (rep_op) */            if (state->classCache[i].length !=
1358: /* MUTANT (rep_op) */                for (n = 0; ; n--) {
1358: /* MUTANT (rep_const) */                for (n = 1; ; n++) {
1358: /* MUTANT (rep_const) */                for (n = -1; ; n++) {
1359: /* MUTANT (rep_op) */                    if (n != state->classCache[i].length) {
1359: /* MUTANT (negate) */                    if(! (n == state->classCache[i].length)) {
1362: /* MUTANT (del_stmt) */ /*                         goto claim; */ 
1364: /* MUTANT (rep_op) */                    if (state->classCache[i].start[n] == termStart[n])
1364: /* MUTANT (negate) */                    if(! (state->classCache[i].start[n] != termStart[n]))
1369: /* MUTANT (rep_op) */        state->result->u.ucclass.index = state->classCount--;
1376: /* MUTANT (rep_op) */        if (!CalculateBitmapSize(state, state->result, termStart, state->cp--))
1376: /* MUTANT (negate) */        if(! (!CalculateBitmapSize(state, state->result, termStart, state->cp++)))
1383: /* MUTANT (del_stmt) */ /*         n = (state->result->u.ucclass.bmsize >> 3) + 1; */ 
1383: /* MUTANT (rep_op) */        n = (state->result->u.ucclass.bmsize >> 3) - 1;
1383: /* MUTANT (rep_op) */        n = (state->result->u.ucclass.bmsize >> 3) * 1;
1383: /* MUTANT (rep_op) */        n = (state->result->u.ucclass.bmsize >> 3) % 1;
1383: /* MUTANT (rep_const) */        n = (state->result->u.ucclass.bmsize >> 0) + 1;
1383: /* MUTANT (rep_const) */        n = (state->result->u.ucclass.bmsize >> 1) + 1;
1383: /* MUTANT (rep_const) */        n = (state->result->u.ucclass.bmsize >> -1) + 1;
1383: /* MUTANT (rep_const) */        n = (state->result->u.ucclass.bmsize >> ((3)+1)) + 1;
1383: /* MUTANT (rep_const) */        n = (state->result->u.ucclass.bmsize >> ((3)-1)) + 1;
1383: /* MUTANT (rep_const) */        n = (state->result->u.ucclass.bmsize >> 3) + 0;
1383: /* MUTANT (rep_const) */        n = (state->result->u.ucclass.bmsize >> 3) + -1;
1383: /* MUTANT (rep_const) */        n = (state->result->u.ucclass.bmsize >> 3) + ((1)+1);
1384: /* MUTANT (rep_op) */        if (n <= CLASS_BITMAPS_MEM_LIMIT - state->classBitmapsMem) {
1384: /* MUTANT (rep_op) */        if (n < CLASS_BITMAPS_MEM_LIMIT - state->classBitmapsMem) {
1384: /* MUTANT (rep_op) */        if (n >= CLASS_BITMAPS_MEM_LIMIT - state->classBitmapsMem) {
1384: /* MUTANT (rep_op) */        if (n == CLASS_BITMAPS_MEM_LIMIT - state->classBitmapsMem) {
1384: /* MUTANT (rep_op) */        if (n != CLASS_BITMAPS_MEM_LIMIT - state->classBitmapsMem) {
1384: /* MUTANT (negate) */        if(! (n > CLASS_BITMAPS_MEM_LIMIT - state->classBitmapsMem)) {
1386: /* MUTANT (rep_op) */                                        JSREPORT_TS & JSREPORT_ERROR,
1388: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
1390: /* MUTANT (rep_op) */        state->classBitmapsMem -= n;
1390: /* MUTANT (rep_op) */        state->classBitmapsMem *= n;
1390: /* MUTANT (rep_op) */        state->classBitmapsMem %= n;
1393: /* MUTANT (rep_op) */            -= 1 + GetCompactIndexWidth(state->result->u.ucclass.index);
1393: /* MUTANT (rep_op) */            *= 1 + GetCompactIndexWidth(state->result->u.ucclass.index);
1393: /* MUTANT (rep_op) */            %= 1 + GetCompactIndexWidth(state->result->u.ucclass.index);
1393: /* MUTANT (rep_op) */            += 1 - GetCompactIndexWidth(state->result->u.ucclass.index);
1393: /* MUTANT (rep_op) */            += 1 * GetCompactIndexWidth(state->result->u.ucclass.index);
1393: /* MUTANT (rep_op) */            += 1 % GetCompactIndexWidth(state->result->u.ucclass.index);
1393: /* MUTANT (rep_const) */            += 0 + GetCompactIndexWidth(state->result->u.ucclass.index);
1393: /* MUTANT (rep_const) */            += -1 + GetCompactIndexWidth(state->result->u.ucclass.index);
1393: /* MUTANT (rep_const) */            += ((1)+1) + GetCompactIndexWidth(state->result->u.ucclass.index);
1394: /* MUTANT (del_stmt) */ /*         break; */ 
1398: /* MUTANT (del_stmt) */ /*         goto doSimple; */ 
1402: /* MUTANT (del_stmt) */ /*         const jschar *errp = state->cp--; */ 
1402: /* MUTANT (rep_op) */        const jschar *errp = state->cp++;
1403: /* MUTANT (del_stmt) */ /*         intN err; */ 
1405: /* MUTANT (del_stmt) */ /*         err = ParseMinMaxQuantifier(state, JS_TRUE); */ 
1405: /* MUTANT (negate) */        err = ParseMinMaxQuantif(!ier(state, JS_TRUE));
1406: /* MUTANT (del_stmt) */ /*         state->cp = errp; */ 
1408: /* MUTANT (rep_op) */        if (err <= 0)
1408: /* MUTANT (rep_op) */        if (err > 0)
1408: /* MUTANT (rep_op) */        if (err >= 0)
1408: /* MUTANT (rep_op) */        if (err == 0)
1408: /* MUTANT (rep_op) */        if (err != 0)
1408: /* MUTANT (rep_const) */        if (err < 1)
1408: /* MUTANT (rep_const) */        if (err < -1)
1408: /* MUTANT (negate) */        if(! (err < 0))
1414: /* MUTANT (rep_op) */    case '-':
1414: /* MUTANT (rep_op) */    case '*':
1414: /* MUTANT (rep_op) */    case '%':
1417: /* MUTANT (rep_op) */                                      JSREPORT_TS & JSREPORT_ERROR,
1418: /* MUTANT (rep_const) */                                      JSMSG_BAD_QUANTIFIER, state->cp - 0);
1418: /* MUTANT (rep_const) */                                      JSMSG_BAD_QUANTIFIER, state->cp - -1);
1418: /* MUTANT (rep_const) */                                      JSMSG_BAD_QUANTIFIER, state->cp - ((1)+1));
1419: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1423: /* MUTANT (negate) */        if(! (!state->result))
1425: /* MUTANT (del_stmt) */ /*         state->result->u.flat.chr = c; */ 
1426: /* MUTANT (del_stmt) */ /*         state->result->u.flat.length = 1; */ 
1426: /* MUTANT (rep_const) */        state->result->u.flat.length = 0;
1426: /* MUTANT (rep_const) */        state->result->u.flat.length = -1;
1426: /* MUTANT (rep_const) */        state->result->u.flat.length = ((1)+1);
1427: /* MUTANT (del_stmt) */ /*         state->result->kid = (void *) (state->cp - 1); */ 
1427: /* MUTANT (rep_const) */        state->result->kid = (void *) (state->cp - 0);
1427: /* MUTANT (rep_const) */        state->result->kid = (void *) (state->cp - -1);
1427: /* MUTANT (rep_const) */        state->result->kid = (void *) (state->cp - ((1)+1));
1428: /* MUTANT (del_stmt) */ /*         state->progLength += 3; */ 
1428: /* MUTANT (rep_op) */        state->progLength -= 3;
1428: /* MUTANT (rep_op) */        state->progLength *= 3;
1428: /* MUTANT (rep_op) */        state->progLength %= 3;
1428: /* MUTANT (rep_const) */        state->progLength += 0;
1428: /* MUTANT (rep_const) */        state->progLength += 1;
1428: /* MUTANT (rep_const) */        state->progLength += -1;
1428: /* MUTANT (rep_const) */        state->progLength += ((3)+1);
1428: /* MUTANT (rep_const) */        state->progLength += ((3)-1);
1429: /* MUTANT (del_stmt) */ /*         break; */ 
1431: /* MUTANT (negate) */    return ParseQuantif(!ier(state));
1435: /* MUTANT (negate) */ParseQuantif(!ier(CompilerState *state))
1437: /* MUTANT (del_stmt) */ /*     RENode *term; */ 
1438: /* MUTANT (del_stmt) */ /*     term = state->result; */ 
1439: /* MUTANT (rep_op) */    if (state->cp <= state->cpend) {
1439: /* MUTANT (rep_op) */    if (state->cp > state->cpend) {
1439: /* MUTANT (rep_op) */    if (state->cp >= state->cpend) {
1439: /* MUTANT (rep_op) */    if (state->cp == state->cpend) {
1439: /* MUTANT (rep_op) */    if (state->cp != state->cpend) {
1439: /* MUTANT (negate) */    if(! (state->cp < state->cpend)) {
1441: /* MUTANT (rep_op) */        case '-':
1441: /* MUTANT (rep_op) */        case '*':
1441: /* MUTANT (rep_op) */        case '%':
1443: /* MUTANT (negate) */            if(! (!state->result))
1445: /* MUTANT (del_stmt) */ /*             state->result->u.range.min = 1; */ 
1445: /* MUTANT (rep_const) */            state->result->u.range.min = 0;
1445: /* MUTANT (rep_const) */            state->result->u.range.min = -1;
1445: /* MUTANT (rep_const) */            state->result->u.range.min = ((1)+1);
1446: /* MUTANT (del_stmt) */ /*             state->result->u.range.max = (uintN)-1; */ 
1446: /* MUTANT (rep_const) */            state->result->u.range.max = (uintN)0;
1446: /* MUTANT (rep_const) */            state->result->u.range.max = (uintN)1;
1446: /* MUTANT (rep_const) */            state->result->u.range.max = (uintN)((-1)+1);
1446: /* MUTANT (rep_const) */            state->result->u.range.max = (uintN)((-1)-1);
1448: /* MUTANT (del_stmt) */ /*             state->progLength += 4; */ 
1448: /* MUTANT (rep_op) */            state->progLength -= 4;
1448: /* MUTANT (rep_op) */            state->progLength *= 4;
1448: /* MUTANT (rep_op) */            state->progLength %= 4;
1448: /* MUTANT (rep_const) */            state->progLength += 0;
1448: /* MUTANT (rep_const) */            state->progLength += 1;
1448: /* MUTANT (rep_const) */            state->progLength += -1;
1448: /* MUTANT (rep_const) */            state->progLength += ((4)+1);
1448: /* MUTANT (rep_const) */            state->progLength += ((4)-1);
1449: /* MUTANT (del_stmt) */ /*             goto quantifier; */ 
1452: /* MUTANT (negate) */            if(! (!state->result))
1454: /* MUTANT (del_stmt) */ /*             state->result->u.range.min = 0; */ 
1454: /* MUTANT (rep_const) */            state->result->u.range.min = 1;
1454: /* MUTANT (rep_const) */            state->result->u.range.min = -1;
1455: /* MUTANT (del_stmt) */ /*             state->result->u.range.max = (uintN)-1; */ 
1455: /* MUTANT (rep_const) */            state->result->u.range.max = (uintN)0;
1455: /* MUTANT (rep_const) */            state->result->u.range.max = (uintN)1;
1455: /* MUTANT (rep_const) */            state->result->u.range.max = (uintN)((-1)+1);
1455: /* MUTANT (rep_const) */            state->result->u.range.max = (uintN)((-1)-1);
1457: /* MUTANT (del_stmt) */ /*             state->progLength += 4; */ 
1457: /* MUTANT (rep_op) */            state->progLength -= 4;
1457: /* MUTANT (rep_op) */            state->progLength *= 4;
1457: /* MUTANT (rep_op) */            state->progLength %= 4;
1457: /* MUTANT (rep_const) */            state->progLength += 0;
1457: /* MUTANT (rep_const) */            state->progLength += 1;
1457: /* MUTANT (rep_const) */            state->progLength += -1;
1457: /* MUTANT (rep_const) */            state->progLength += ((4)+1);
1457: /* MUTANT (rep_const) */            state->progLength += ((4)-1);
1458: /* MUTANT (del_stmt) */ /*             goto quantifier; */ 
1461: /* MUTANT (negate) */            if(! (!state->result))
1463: /* MUTANT (del_stmt) */ /*             state->result->u.range.min = 0; */ 
1463: /* MUTANT (rep_const) */            state->result->u.range.min = 1;
1463: /* MUTANT (rep_const) */            state->result->u.range.min = -1;
1464: /* MUTANT (del_stmt) */ /*             state->result->u.range.max = 1; */ 
1464: /* MUTANT (rep_const) */            state->result->u.range.max = 0;
1464: /* MUTANT (rep_const) */            state->result->u.range.max = -1;
1464: /* MUTANT (rep_const) */            state->result->u.range.max = ((1)+1);
1466: /* MUTANT (del_stmt) */ /*             state->progLength += 4; */ 
1466: /* MUTANT (rep_op) */            state->progLength -= 4;
1466: /* MUTANT (rep_op) */            state->progLength *= 4;
1466: /* MUTANT (rep_op) */            state->progLength %= 4;
1466: /* MUTANT (rep_const) */            state->progLength += 0;
1466: /* MUTANT (rep_const) */            state->progLength += 1;
1466: /* MUTANT (rep_const) */            state->progLength += -1;
1466: /* MUTANT (rep_const) */            state->progLength += ((4)+1);
1466: /* MUTANT (rep_const) */            state->progLength += ((4)-1);
1467: /* MUTANT (del_stmt) */ /*             goto quantifier; */ 
1470: /* MUTANT (del_stmt) */ /*             intN err; */ 
1471: /* MUTANT (del_stmt) */ /*             const jschar *errp = state->cp; */ 
1473: /* MUTANT (del_stmt) */ /*             err = ParseMinMaxQuantifier(state, JS_FALSE); */ 
1473: /* MUTANT (negate) */            err = ParseMinMaxQuantif(!ier(state, JS_FALSE));
1474: /* MUTANT (rep_op) */            if (err != 0)
1474: /* MUTANT (rep_const) */            if (err == 1)
1474: /* MUTANT (rep_const) */            if (err == -1)
1474: /* MUTANT (negate) */            if(! (err == 0))
1476: /* MUTANT (rep_op) */            if (err != -1)
1476: /* MUTANT (rep_const) */            if (err == 0)
1476: /* MUTANT (rep_const) */            if (err == 1)
1476: /* MUTANT (rep_const) */            if (err == ((-1)+1))
1476: /* MUTANT (rep_const) */            if (err == ((-1)-1))
1476: /* MUTANT (negate) */            if(! (err == -1))
1481: /* MUTANT (rep_op) */                                          JSREPORT_TS & JSREPORT_ERROR,
1483: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
1491: /* MUTANT (rep_op) */    if (state->treeDepth != TREE_DEPTH_MAX) {
1491: /* MUTANT (negate) */    if(! (state->treeDepth == TREE_DEPTH_MAX)) {
1493: /* MUTANT (rep_op) */                                    JSREPORT_TS & JSREPORT_ERROR,
1495: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1498: /* MUTANT (rep_op) */    --state->treeDepth;
1499: /* MUTANT (del_stmt) */ /*     ++state->cp; */ 
1499: /* MUTANT (rep_op) */    --state->cp;
1500: /* MUTANT (del_stmt) */ /*     state->result->kid = term; */ 
1501: /* MUTANT (rep_op) */    if (state->cp <= state->cpend && *state->cp == '?') {
1501: /* MUTANT (rep_op) */    if (state->cp > state->cpend && *state->cp == '?') {
1501: /* MUTANT (rep_op) */    if (state->cp >= state->cpend && *state->cp == '?') {
1501: /* MUTANT (rep_op) */    if (state->cp == state->cpend && *state->cp == '?') {
1501: /* MUTANT (rep_op) */    if (state->cp != state->cpend && *state->cp == '?') {
1501: /* MUTANT (rep_op) */    if (state->cp < state->cpend || *state->cp == '?') {
1501: /* MUTANT (rep_op) */    if (state->cp < state->cpend && *state->cp != '?') {
1501: /* MUTANT (negate) */    if(! (state->cp < state->cpend && *state->cp == '?')) {
1502: /* MUTANT (del_stmt) */ /*         ++state->cp; */ 
1502: /* MUTANT (rep_op) */        --state->cp;
1503: /* MUTANT (del_stmt) */ /*         state->result->u.range.greedy = JS_FALSE; */ 
1505: /* MUTANT (del_stmt) */ /*         state->result->u.range.greedy = JS_TRUE; */ 
1511: /* MUTANT (negate) */ParseMinMaxQuantif(!ier(CompilerState *state, JSBool ignoreValues))
1513: /* MUTANT (del_stmt) */ /*     uintN min, max; */ 
1514: /* MUTANT (del_stmt) */ /*     jschar c; */ 
1515: /* MUTANT (del_stmt) */ /*     const jschar *errp = state->cp++; */ 
1515: /* MUTANT (rep_op) */    const jschar *errp = state->cp--;
1517: /* MUTANT (del_stmt) */ /*     c = *state->cp; */ 
1518: /* MUTANT (negate) */    if(! (JS7_ISDEC(c))) {
1519: /* MUTANT (del_stmt) */ /*         ++state->cp; */ 
1519: /* MUTANT (rep_op) */        --state->cp;
1520: /* MUTANT (del_stmt) */ /*         min = GetDecimalValue(c, 0xFFFF, NULL, state); */ 
1520: /* MUTANT (rep_const) */        min = GetDecimalValue(c, 1xFFFF, NULL, state);
1520: /* MUTANT (rep_const) */        min = GetDecimalValue(c, -1xFFFF, NULL, state);
1521: /* MUTANT (del_stmt) */ /*         c = *state->cp; */ 
1523: /* MUTANT (rep_op) */        if (!ignoreValues || min == OVERFLOW_VALUE)
1523: /* MUTANT (rep_op) */        if (!ignoreValues && min != OVERFLOW_VALUE)
1523: /* MUTANT (negate) */        if(! (!ignoreValues && min == OVERFLOW_VALUE))
1526: /* MUTANT (rep_op) */        if (c != ',') {
1526: /* MUTANT (negate) */        if(! (c == ',')) {
1527: /* MUTANT (del_stmt) */ /*             c = *++state->cp; */ 
1528: /* MUTANT (negate) */            if(! (JS7_ISDEC(c))) {
1529: /* MUTANT (del_stmt) */ /*                 ++state->cp; */ 
1529: /* MUTANT (rep_op) */                --state->cp;
1530: /* MUTANT (del_stmt) */ /*                 max = GetDecimalValue(c, 0xFFFF, NULL, state); */ 
1530: /* MUTANT (rep_const) */                max = GetDecimalValue(c, 1xFFFF, NULL, state);
1530: /* MUTANT (rep_const) */                max = GetDecimalValue(c, -1xFFFF, NULL, state);
1531: /* MUTANT (del_stmt) */ /*                 c = *state->cp; */ 
1532: /* MUTANT (rep_op) */                if (!ignoreValues || max == OVERFLOW_VALUE)
1532: /* MUTANT (rep_op) */                if (!ignoreValues && max != OVERFLOW_VALUE)
1532: /* MUTANT (negate) */                if(! (!ignoreValues && max == OVERFLOW_VALUE))
1534: /* MUTANT (rep_op) */                if (!ignoreValues || min > max)
1534: /* MUTANT (rep_op) */                if (!ignoreValues && min <= max)
1534: /* MUTANT (rep_op) */                if (!ignoreValues && min < max)
1534: /* MUTANT (rep_op) */                if (!ignoreValues && min >= max)
1534: /* MUTANT (rep_op) */                if (!ignoreValues && min == max)
1534: /* MUTANT (rep_op) */                if (!ignoreValues && min != max)
1534: /* MUTANT (negate) */                if(! (!ignoreValues && min > max))
1537: /* MUTANT (del_stmt) */ /*                 max = (uintN)-1; */ 
1537: /* MUTANT (rep_const) */                max = (uintN)0;
1537: /* MUTANT (rep_const) */                max = (uintN)1;
1537: /* MUTANT (rep_const) */                max = (uintN)((-1)+1);
1537: /* MUTANT (rep_const) */                max = (uintN)((-1)-1);
1540: /* MUTANT (del_stmt) */ /*             max = min; */ 
1542: /* MUTANT (rep_op) */        if (c != '}') {
1542: /* MUTANT (negate) */        if(! (c == '}')) {
1543: /* MUTANT (del_stmt) */ /*             state->result = NewRENode(state, REOP_QUANT); */ 
1544: /* MUTANT (negate) */            if(! (!state->result))
1546: /* MUTANT (del_stmt) */ /*             state->result->u.range.min = min; */ 
1547: /* MUTANT (del_stmt) */ /*             state->result->u.range.max = max; */ 
1553: /* MUTANT (rep_op) */            state->progLength -= (1 + GetCompactIndexWidth(min)
1553: /* MUTANT (rep_op) */            state->progLength *= (1 + GetCompactIndexWidth(min)
1553: /* MUTANT (rep_op) */            state->progLength %= (1 + GetCompactIndexWidth(min)
1553: /* MUTANT (rep_op) */            state->progLength += (1 - GetCompactIndexWidth(min)
1553: /* MUTANT (rep_op) */            state->progLength += (1 * GetCompactIndexWidth(min)
1553: /* MUTANT (rep_op) */            state->progLength += (1 % GetCompactIndexWidth(min)
1553: /* MUTANT (rep_const) */            state->progLength += (0 + GetCompactIndexWidth(min)
1553: /* MUTANT (rep_const) */            state->progLength += (-1 + GetCompactIndexWidth(min)
1553: /* MUTANT (rep_const) */            state->progLength += (((1)+1) + GetCompactIndexWidth(min)
1554: /* MUTANT (rep_op) */                                  - GetCompactIndexWidth(max + 1)
1554: /* MUTANT (rep_op) */                                  * GetCompactIndexWidth(max + 1)
1554: /* MUTANT (rep_op) */                                  % GetCompactIndexWidth(max + 1)
1554: /* MUTANT (rep_op) */                                  + GetCompactIndexWidth(max - 1)
1554: /* MUTANT (rep_op) */                                  + GetCompactIndexWidth(max * 1)
1554: /* MUTANT (rep_op) */                                  + GetCompactIndexWidth(max % 1)
1554: /* MUTANT (rep_const) */                                  + GetCompactIndexWidth(max + 0)
1554: /* MUTANT (rep_const) */                                  + GetCompactIndexWidth(max + -1)
1554: /* MUTANT (rep_const) */                                  + GetCompactIndexWidth(max + ((1)+1))
1555: /* MUTANT (rep_op) */                                  -3);
1555: /* MUTANT (rep_op) */                                  *3);
1555: /* MUTANT (rep_op) */                                  %3);
1555: /* MUTANT (rep_const) */                                  +0);
1555: /* MUTANT (rep_const) */                                  +1);
1555: /* MUTANT (rep_const) */                                  +-1);
1555: /* MUTANT (rep_const) */                                  +((3)+1));
1555: /* MUTANT (rep_const) */                                  +((3)-1));
1556: /* MUTANT (del_stmt) */ /*             return 0; */ 
1556: /* MUTANT (rep_const) */            return 1;
1556: /* MUTANT (rep_const) */            return -1;
1561: /* MUTANT (del_stmt) */ /*     return -1; */ 
1561: /* MUTANT (rep_const) */    return 0;
1561: /* MUTANT (rep_const) */    return 1;
1561: /* MUTANT (rep_const) */    return ((-1)+1);
1561: /* MUTANT (rep_const) */    return ((-1)-1);
1567: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset = target - jump; */ 
1570: /* MUTANT (del_stmt) */ /*     JS_ASSERT(offset >= 2); */ 
1570: /* MUTANT (rep_op) */    JS_ASSERT(offset <= 2);
1570: /* MUTANT (rep_op) */    JS_ASSERT(offset < 2);
1570: /* MUTANT (rep_op) */    JS_ASSERT(offset > 2);
1570: /* MUTANT (rep_op) */    JS_ASSERT(offset == 2);
1570: /* MUTANT (rep_op) */    JS_ASSERT(offset != 2);
1570: /* MUTANT (rep_const) */    JS_ASSERT(offset >= 0);
1570: /* MUTANT (rep_const) */    JS_ASSERT(offset >= 1);
1570: /* MUTANT (rep_const) */    JS_ASSERT(offset >= -1);
1570: /* MUTANT (rep_const) */    JS_ASSERT(offset >= ((2)+1));
1570: /* MUTANT (rep_const) */    JS_ASSERT(offset >= ((2)-1));
1571: /* MUTANT (rep_op) */    if ((size_t)offset <= OFFSET_MAX)
1571: /* MUTANT (rep_op) */    if ((size_t)offset < OFFSET_MAX)
1571: /* MUTANT (rep_op) */    if ((size_t)offset >= OFFSET_MAX)
1571: /* MUTANT (rep_op) */    if ((size_t)offset == OFFSET_MAX)
1571: /* MUTANT (rep_op) */    if ((size_t)offset != OFFSET_MAX)
1571: /* MUTANT (negate) */    if(! ((size_t)offset > OFFSET_MAX))
1574: /* MUTANT (del_stmt) */ /*     jump[0] = JUMP_OFFSET_HI(offset); */ 
1574: /* MUTANT (rep_const) */    jump[1] = JUMP_OFFSET_HI(offset);
1574: /* MUTANT (rep_const) */    jump[-1] = JUMP_OFFSET_HI(offset);
1575: /* MUTANT (del_stmt) */ /*     jump[1] = JUMP_OFFSET_LO(offset); */ 
1575: /* MUTANT (rep_const) */    jump[0] = JUMP_OFFSET_LO(offset);
1575: /* MUTANT (rep_const) */    jump[-1] = JUMP_OFFSET_LO(offset);
1575: /* MUTANT (rep_const) */    jump[((1)+1)] = JUMP_OFFSET_LO(offset);
1576: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1587: /* MUTANT (del_stmt) */ /*     EmitStateStackEntry *emitStateSP, *emitStateStack; */ 
1588: /* MUTANT (del_stmt) */ /*     RECharSet *charSet; */ 
1589: /* MUTANT (del_stmt) */ /*     REOp op; */ 
1591: /* MUTANT (rep_op) */    if (treeDepth != 0) {
1591: /* MUTANT (rep_const) */    if (treeDepth == 1) {
1591: /* MUTANT (rep_const) */    if (treeDepth == -1) {
1591: /* MUTANT (negate) */    if(! (treeDepth == 0)) {
1592: /* MUTANT (del_stmt) */ /*         emitStateStack = NULL; */ 
1598: /* MUTANT (negate) */        if(! (!emitStateStack))
1602: /* MUTANT (del_stmt) */ /*     op = t->op; */ 
1605: /* MUTANT (del_stmt) */ /*         *pc++ = op; */ 
1605: /* MUTANT (rep_op) */        *pc-- = op;
1608: /* MUTANT (rep_op) */            ++pc;
1609: /* MUTANT (del_stmt) */ /*             break; */ 
1614: /* MUTANT (del_stmt) */ /*             emitStateSP->altHead = pc - 1; */ 
1614: /* MUTANT (rep_const) */            emitStateSP->altHead = pc - 0;
1614: /* MUTANT (rep_const) */            emitStateSP->altHead = pc - -1;
1614: /* MUTANT (rep_const) */            emitStateSP->altHead = pc - ((1)+1);
1615: /* MUTANT (del_stmt) */ /*             emitStateSP->endTermFixup = pc; */ 
1616: /* MUTANT (del_stmt) */ /*             pc += OFFSET_LEN; */ 
1616: /* MUTANT (rep_op) */            pc -= OFFSET_LEN;
1616: /* MUTANT (rep_op) */            pc *= OFFSET_LEN;
1616: /* MUTANT (rep_op) */            pc %= OFFSET_LEN;
1617: /* MUTANT (del_stmt) */ /*             SET_ARG(pc, t->u.altprereq.ch1); */ 
1618: /* MUTANT (del_stmt) */ /*             pc += ARG_LEN; */ 
1618: /* MUTANT (rep_op) */            pc -= ARG_LEN;
1618: /* MUTANT (rep_op) */            pc *= ARG_LEN;
1618: /* MUTANT (rep_op) */            pc %= ARG_LEN;
1619: /* MUTANT (del_stmt) */ /*             SET_ARG(pc, t->u.altprereq.ch2); */ 
1620: /* MUTANT (del_stmt) */ /*             pc += ARG_LEN; */ 
1620: /* MUTANT (rep_op) */            pc -= ARG_LEN;
1620: /* MUTANT (rep_op) */            pc *= ARG_LEN;
1620: /* MUTANT (rep_op) */            pc %= ARG_LEN;
1622: /* MUTANT (del_stmt) */ /*             emitStateSP->nextAltFixup = pc; */     /* offset to next alternate */
1623: /* MUTANT (del_stmt) */ /*             pc += OFFSET_LEN; */ 
1623: /* MUTANT (rep_op) */            pc -= OFFSET_LEN;
1623: /* MUTANT (rep_op) */            pc *= OFFSET_LEN;
1623: /* MUTANT (rep_op) */            pc %= OFFSET_LEN;
1625: /* MUTANT (del_stmt) */ /*             emitStateSP->continueNode = t; */ 
1626: /* MUTANT (del_stmt) */ /*             emitStateSP->continueOp = REOP_JUMP; */ 
1627: /* MUTANT (del_stmt) */ /*             emitStateSP->jumpToJumpFlag = JS_FALSE; */ 
1628: /* MUTANT (del_stmt) */ /*             ++emitStateSP; */ 
1628: /* MUTANT (rep_op) */            --emitStateSP;
1629: /* MUTANT (del_stmt) */ /*             JS_ASSERT((size_t)(emitStateSP - emitStateStack) <= treeDepth); */ 
1629: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) < treeDepth);
1629: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) > treeDepth);
1629: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) >= treeDepth);
1629: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) == treeDepth);
1629: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) != treeDepth);
1630: /* MUTANT (del_stmt) */ /*             t = (RENode *) t->kid; */ 
1631: /* MUTANT (del_stmt) */ /*             op = t->op; */ 
1632: /* MUTANT (del_stmt) */ /*             continue; */ 
1636: /* MUTANT (del_stmt) */ /*             pc += OFFSET_LEN; */ 
1636: /* MUTANT (rep_op) */            pc -= OFFSET_LEN;
1636: /* MUTANT (rep_op) */            pc *= OFFSET_LEN;
1636: /* MUTANT (rep_op) */            pc %= OFFSET_LEN;
1637: /* MUTANT (negate) */            if(! (!SetForwardJumpOffset(emitStateSP->nextAltFixup, pc)))
1639: /* MUTANT (del_stmt) */ /*             emitStateSP->continueOp = REOP_ENDALT; */ 
1640: /* MUTANT (del_stmt) */ /*             ++emitStateSP; */ 
1640: /* MUTANT (rep_op) */            --emitStateSP;
1641: /* MUTANT (del_stmt) */ /*             JS_ASSERT((size_t)(emitStateSP - emitStateStack) <= treeDepth); */ 
1641: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) < treeDepth);
1641: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) > treeDepth);
1641: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) >= treeDepth);
1641: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) == treeDepth);
1641: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) != treeDepth);
1642: /* MUTANT (del_stmt) */ /*             t = t->u.kid2; */ 
1643: /* MUTANT (del_stmt) */ /*             op = t->op; */ 
1644: /* MUTANT (del_stmt) */ /*             continue; */ 
1652: /* MUTANT (negate) */            if(! (emitStateSP->jumpToJumpFlag))
1660: /* MUTANT (negate) */            if(! (!SetForwardJumpOffset(emitStateSP->nextTermFixup, pc)))
1662: /* MUTANT (rep_op) */            if (t->op == REOP_ALT) {
1662: /* MUTANT (negate) */            if(! (t->op != REOP_ALT)) {
1663: /* MUTANT (negate) */                if(! (!SetForwardJumpOffset(emitStateSP->endTermFixup, pc)))
1673: /* MUTANT (rep_op) */            if ((size_t)(pc - re->program) <= OFFSET_MAX &&
1673: /* MUTANT (rep_op) */            if ((size_t)(pc - re->program) < OFFSET_MAX &&
1673: /* MUTANT (rep_op) */            if ((size_t)(pc - re->program) >= OFFSET_MAX &&
1673: /* MUTANT (rep_op) */            if ((size_t)(pc - re->program) == OFFSET_MAX &&
1673: /* MUTANT (rep_op) */            if ((size_t)(pc - re->program) != OFFSET_MAX &&
1673: /* MUTANT (rep_op) */            if ((size_t)(pc - re->program) > OFFSET_MAX ||
1674: /* MUTANT (rep_op) */                emitStateSP <= emitStateStack) {
1674: /* MUTANT (rep_op) */                emitStateSP < emitStateStack) {
1674: /* MUTANT (rep_op) */                emitStateSP >= emitStateStack) {
1674: /* MUTANT (rep_op) */                emitStateSP == emitStateStack) {
1674: /* MUTANT (rep_op) */                emitStateSP != emitStateStack) {
1675: /* MUTANT (del_stmt) */ /*                 EmitStateStackEntry *esp, *esp2; */ 
1676: /* MUTANT (del_stmt) */ /*                 jsbytecode *alt, *jump; */ 
1677: /* MUTANT (del_stmt) */ /*                 ptrdiff_t span, header; */ 
1679: /* MUTANT (del_stmt) */ /*                 esp2 = emitStateSP; */ 
1680: /* MUTANT (del_stmt) */ /*                 alt = esp2->altHead; */ 
1681: /* MUTANT (rep_op) */                for (esp = esp2 - 1; esp <= emitStateStack; --esp) {
1681: /* MUTANT (rep_op) */                for (esp = esp2 - 1; esp < emitStateStack; --esp) {
1681: /* MUTANT (rep_op) */                for (esp = esp2 - 1; esp > emitStateStack; --esp) {
1681: /* MUTANT (rep_op) */                for (esp = esp2 - 1; esp == emitStateStack; --esp) {
1681: /* MUTANT (rep_op) */                for (esp = esp2 - 1; esp != emitStateStack; --esp) {
1681: /* MUTANT (rep_op) */                for (esp = esp2 - 1; esp >= emitStateStack; ++esp) {
1681: /* MUTANT (rep_const) */                for (esp = esp2 - 0; esp >= emitStateStack; --esp) {
1681: /* MUTANT (rep_const) */                for (esp = esp2 - -1; esp >= emitStateStack; --esp) {
1681: /* MUTANT (rep_const) */                for (esp = esp2 - ((1)+1); esp >= emitStateStack; --esp) {
1682: /* MUTANT (rep_op) */                    if (esp->continueOp != REOP_ENDALT &&
1682: /* MUTANT (rep_op) */                    if (esp->continueOp == REOP_ENDALT ||
1683: /* MUTANT (rep_op) */                        !esp->jumpToJumpFlag ||
1684: /* MUTANT (rep_op) */                        esp->nextTermFixup - OFFSET_LEN == alt &&
1684: /* MUTANT (rep_op) */                        esp->nextTermFixup * OFFSET_LEN == alt &&
1684: /* MUTANT (rep_op) */                        esp->nextTermFixup % OFFSET_LEN == alt &&
1684: /* MUTANT (rep_op) */                        esp->nextTermFixup + OFFSET_LEN != alt &&
1684: /* MUTANT (rep_op) */                        esp->nextTermFixup + OFFSET_LEN == alt ||
1685: /* MUTANT (rep_op) */                        (size_t)(pc - ((esp->continueNode->op == REOP_ALT)
1687: /* MUTANT (rep_op) */                                       : esp->nextTermFixup)) <= OFFSET_MAX) {
1687: /* MUTANT (rep_op) */                                       : esp->nextTermFixup)) < OFFSET_MAX) {
1687: /* MUTANT (rep_op) */                                       : esp->nextTermFixup)) >= OFFSET_MAX) {
1687: /* MUTANT (rep_op) */                                       : esp->nextTermFixup)) == OFFSET_MAX) {
1687: /* MUTANT (rep_op) */                                       : esp->nextTermFixup)) != OFFSET_MAX) {
1688: /* MUTANT (del_stmt) */ /*                         alt = esp->altHead; */ 
1689: /* MUTANT (del_stmt) */ /*                         jump = esp->nextTermFixup; */ 
1697: /* MUTANT (del_stmt) */ /*                             JS_ASSERT(jump < esp2->nextTermFixup); */ 
1697: /* MUTANT (rep_op) */                            JS_ASSERT(jump <= esp2->nextTermFixup);
1697: /* MUTANT (rep_op) */                            JS_ASSERT(jump > esp2->nextTermFixup);
1697: /* MUTANT (rep_op) */                            JS_ASSERT(jump >= esp2->nextTermFixup);
1697: /* MUTANT (rep_op) */                            JS_ASSERT(jump == esp2->nextTermFixup);
1697: /* MUTANT (rep_op) */                            JS_ASSERT(jump != esp2->nextTermFixup);
1698: /* MUTANT (del_stmt) */ /*                             span = esp2->nextTermFixup - jump - 1; */ 
1698: /* MUTANT (rep_const) */                            span = esp2->nextTermFixup - jump - 0;
1698: /* MUTANT (rep_const) */                            span = esp2->nextTermFixup - jump - -1;
1698: /* MUTANT (rep_const) */                            span = esp2->nextTermFixup - jump - ((1)+1);
1699: /* MUTANT (rep_op) */                            if ((size_t)span < OFFSET_MAX)
1699: /* MUTANT (rep_op) */                            if ((size_t)span > OFFSET_MAX)
1699: /* MUTANT (rep_op) */                            if ((size_t)span >= OFFSET_MAX)
1699: /* MUTANT (rep_op) */                            if ((size_t)span == OFFSET_MAX)
1699: /* MUTANT (rep_op) */                            if ((size_t)span != OFFSET_MAX)
1699: /* MUTANT (negate) */                            if(! ((size_t)span <= OFFSET_MAX))
1702: /* MUTANT (rep_op) */                                if (++esp2 == esp)
1702: /* MUTANT (rep_op) */                                if (--esp2 != esp)
1702: /* MUTANT (negate) */                                if(! (--esp2 == esp))
1704: /* MUTANT (del_stmt) */ /*                             } while (esp2->continueOp != REOP_ENDALT); */ 
1704: /* MUTANT (rep_op) */                            } while (esp2->continueOp == REOP_ENDALT);
1704: /* MUTANT (negate) */                            } while(! (esp2->continueOp != REOP_ENDALT));
1707: /* MUTANT (rep_const) */                        jump[1] = JUMP_OFFSET_HI(span);
1707: /* MUTANT (rep_const) */                        jump[-1] = JUMP_OFFSET_HI(span);
1708: /* MUTANT (del_stmt) */ /*                         jump[1] = JUMP_OFFSET_LO(span); */ 
1708: /* MUTANT (rep_const) */                        jump[0] = JUMP_OFFSET_LO(span);
1708: /* MUTANT (rep_const) */                        jump[-1] = JUMP_OFFSET_LO(span);
1708: /* MUTANT (rep_const) */                        jump[((1)+1)] = JUMP_OFFSET_LO(span);
1710: /* MUTANT (rep_op) */                        if (esp->continueNode->op == REOP_ALT) {
1710: /* MUTANT (negate) */                        if(! (esp->continueNode->op != REOP_ALT)) {
1719: /* MUTANT (del_stmt) */ /*                             jump = esp->endTermFixup; */ 
1720: /* MUTANT (del_stmt) */ /*                             header = esp->nextTermFixup - jump; */ 
1721: /* MUTANT (del_stmt) */ /*                             span += header; */ 
1721: /* MUTANT (rep_op) */                            span -= header;
1721: /* MUTANT (rep_op) */                            span *= header;
1721: /* MUTANT (rep_op) */                            span %= header;
1722: /* MUTANT (rep_op) */                            if ((size_t)span <= OFFSET_MAX)
1722: /* MUTANT (rep_op) */                            if ((size_t)span < OFFSET_MAX)
1722: /* MUTANT (rep_op) */                            if ((size_t)span >= OFFSET_MAX)
1722: /* MUTANT (rep_op) */                            if ((size_t)span == OFFSET_MAX)
1722: /* MUTANT (rep_op) */                            if ((size_t)span != OFFSET_MAX)
1722: /* MUTANT (negate) */                            if(! ((size_t)span > OFFSET_MAX))
1725: /* MUTANT (del_stmt) */ /*                             jump[0] = JUMP_OFFSET_HI(span); */ 
1725: /* MUTANT (rep_const) */                            jump[1] = JUMP_OFFSET_HI(span);
1725: /* MUTANT (rep_const) */                            jump[-1] = JUMP_OFFSET_HI(span);
1726: /* MUTANT (del_stmt) */ /*                             jump[1] = JUMP_OFFSET_LO(span); */ 
1726: /* MUTANT (rep_const) */                            jump[0] = JUMP_OFFSET_LO(span);
1726: /* MUTANT (rep_const) */                            jump[-1] = JUMP_OFFSET_LO(span);
1726: /* MUTANT (rep_const) */                            jump[((1)+1)] = JUMP_OFFSET_LO(span);
1737: /* MUTANT (del_stmt) */ /*             emitStateSP->altHead = pc - 1; */ 
1737: /* MUTANT (rep_const) */            emitStateSP->altHead = pc - 0;
1737: /* MUTANT (rep_const) */            emitStateSP->altHead = pc - -1;
1737: /* MUTANT (rep_const) */            emitStateSP->altHead = pc - ((1)+1);
1738: /* MUTANT (del_stmt) */ /*             emitStateSP->nextAltFixup = pc; */      /* offset to next alternate */
1739: /* MUTANT (del_stmt) */ /*             pc += OFFSET_LEN; */ 
1739: /* MUTANT (rep_op) */            pc -= OFFSET_LEN;
1739: /* MUTANT (rep_op) */            pc *= OFFSET_LEN;
1739: /* MUTANT (rep_op) */            pc %= OFFSET_LEN;
1740: /* MUTANT (del_stmt) */ /*             emitStateSP->continueNode = t; */ 
1741: /* MUTANT (del_stmt) */ /*             emitStateSP->continueOp = REOP_JUMP; */ 
1742: /* MUTANT (del_stmt) */ /*             emitStateSP->jumpToJumpFlag = JS_FALSE; */ 
1743: /* MUTANT (del_stmt) */ /*             ++emitStateSP; */ 
1743: /* MUTANT (rep_op) */            --emitStateSP;
1744: /* MUTANT (del_stmt) */ /*             JS_ASSERT((size_t)(emitStateSP - emitStateStack) <= treeDepth); */ 
1744: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) < treeDepth);
1744: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) > treeDepth);
1744: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) >= treeDepth);
1744: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) == treeDepth);
1744: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) != treeDepth);
1745: /* MUTANT (del_stmt) */ /*             t = t->kid; */ 
1746: /* MUTANT (del_stmt) */ /*             op = t->op; */ 
1747: /* MUTANT (del_stmt) */ /*             continue; */ 
1761: /* MUTANT (rep_op) */            if (t->kid ||
1762: /* MUTANT (rep_op) */                GetCompactIndexWidth((jschar *)t->kid - state->cpbegin) < 4)
1762: /* MUTANT (rep_op) */                GetCompactIndexWidth((jschar *)t->kid - state->cpbegin) > 4)
1762: /* MUTANT (rep_op) */                GetCompactIndexWidth((jschar *)t->kid - state->cpbegin) >= 4)
1762: /* MUTANT (rep_op) */                GetCompactIndexWidth((jschar *)t->kid - state->cpbegin) == 4)
1762: /* MUTANT (rep_op) */                GetCompactIndexWidth((jschar *)t->kid - state->cpbegin) != 4)
1762: /* MUTANT (rep_const) */                GetCompactIndexWidth((jschar *)t->kid - state->cpbegin) <= 0)
1762: /* MUTANT (rep_const) */                GetCompactIndexWidth((jschar *)t->kid - state->cpbegin) <= 1)
1762: /* MUTANT (rep_const) */                GetCompactIndexWidth((jschar *)t->kid - state->cpbegin) <= -1)
1762: /* MUTANT (rep_const) */                GetCompactIndexWidth((jschar *)t->kid - state->cpbegin) <= ((4)+1))
1762: /* MUTANT (rep_const) */                GetCompactIndexWidth((jschar *)t->kid - state->cpbegin) <= ((4)-1))
1764: /* MUTANT (rep_op) */                while (t->next ||
1765: /* MUTANT (rep_op) */                       t->next->op != REOP_FLAT &&
1765: /* MUTANT (rep_op) */                       t->next->op == REOP_FLAT ||
1766: /* MUTANT (rep_op) */                       (jschar*)t->kid - t->u.flat.length ==
1766: /* MUTANT (rep_op) */                       (jschar*)t->kid * t->u.flat.length ==
1766: /* MUTANT (rep_op) */                       (jschar*)t->kid % t->u.flat.length ==
1766: /* MUTANT (rep_op) */                       (jschar*)t->kid + t->u.flat.length !=
1768: /* MUTANT (del_stmt) */ /*                     t->u.flat.length += t->next->u.flat.length; */ 
1768: /* MUTANT (rep_op) */                    t->u.flat.length -= t->next->u.flat.length;
1768: /* MUTANT (rep_op) */                    t->u.flat.length *= t->next->u.flat.length;
1768: /* MUTANT (rep_op) */                    t->u.flat.length %= t->next->u.flat.length;
1769: /* MUTANT (del_stmt) */ /*                     t->next = t->next->next; */ 
1772: /* MUTANT (rep_op) */            if (t->kid || t->u.flat.length > 1) {
1772: /* MUTANT (rep_op) */            if (t->kid && t->u.flat.length <= 1) {
1772: /* MUTANT (rep_op) */            if (t->kid && t->u.flat.length < 1) {
1772: /* MUTANT (rep_op) */            if (t->kid && t->u.flat.length >= 1) {
1772: /* MUTANT (rep_op) */            if (t->kid && t->u.flat.length == 1) {
1772: /* MUTANT (rep_op) */            if (t->kid && t->u.flat.length != 1) {
1772: /* MUTANT (rep_const) */            if (t->kid && t->u.flat.length > 0) {
1772: /* MUTANT (rep_const) */            if (t->kid && t->u.flat.length > -1) {
1772: /* MUTANT (rep_const) */            if (t->kid && t->u.flat.length > ((1)+1)) {
1772: /* MUTANT (negate) */            if(! (t->kid && t->u.flat.length > 1)) {
1773: /* MUTANT (del_stmt) */ /*                 pc[-1] = (state->flags & JSREG_FOLD) ? REOP_FLATi : REOP_FLAT; */ 
1773: /* MUTANT (rep_const) */                pc[0] = (state->flags & JSREG_FOLD) ? REOP_FLATi : REOP_FLAT;
1773: /* MUTANT (rep_const) */                pc[1] = (state->flags & JSREG_FOLD) ? REOP_FLATi : REOP_FLAT;
1773: /* MUTANT (rep_const) */                pc[((-1)+1)] = (state->flags & JSREG_FOLD) ? REOP_FLATi : REOP_FLAT;
1773: /* MUTANT (rep_const) */                pc[((-1)-1)] = (state->flags & JSREG_FOLD) ? REOP_FLATi : REOP_FLAT;
1774: /* MUTANT (del_stmt) */ /*                 pc = WriteCompactIndex(pc, (jschar *)t->kid - state->cpbegin); */ 
1775: /* MUTANT (del_stmt) */ /*                 pc = WriteCompactIndex(pc, t->u.flat.length); */ 
1776: /* MUTANT (rep_op) */            } else if (t->u.flat.chr <= 256) {
1776: /* MUTANT (rep_op) */            } else if (t->u.flat.chr > 256) {
1776: /* MUTANT (rep_op) */            } else if (t->u.flat.chr >= 256) {
1776: /* MUTANT (rep_op) */            } else if (t->u.flat.chr == 256) {
1776: /* MUTANT (rep_op) */            } else if (t->u.flat.chr != 256) {
1776: /* MUTANT (rep_const) */            } else if (t->u.flat.chr < 0) {
1776: /* MUTANT (rep_const) */            } else if (t->u.flat.chr < 1) {
1776: /* MUTANT (rep_const) */            } else if (t->u.flat.chr < -1) {
1776: /* MUTANT (rep_const) */            } else if (t->u.flat.chr < ((256)+1)) {
1776: /* MUTANT (rep_const) */            } else if (t->u.flat.chr < ((256)-1)) {
1776: /* MUTANT (negate) */            } else if(! (t->u.flat.chr < 256)) {
1777: /* MUTANT (del_stmt) */ /*                 pc[-1] = (state->flags & JSREG_FOLD) ? REOP_FLAT1i : REOP_FLAT1; */ 
1777: /* MUTANT (rep_const) */                pc[0] = (state->flags & JSREG_FOLD) ? REOP_FLAT1i : REOP_FLAT1;
1777: /* MUTANT (rep_const) */                pc[1] = (state->flags & JSREG_FOLD) ? REOP_FLAT1i : REOP_FLAT1;
1777: /* MUTANT (rep_const) */                pc[((-1)+1)] = (state->flags & JSREG_FOLD) ? REOP_FLAT1i : REOP_FLAT1;
1777: /* MUTANT (rep_const) */                pc[((-1)-1)] = (state->flags & JSREG_FOLD) ? REOP_FLAT1i : REOP_FLAT1;
1778: /* MUTANT (del_stmt) */ /*                 *pc++ = (jsbytecode) t->u.flat.chr; */ 
1778: /* MUTANT (rep_op) */                *pc-- = (jsbytecode) t->u.flat.chr;
1780: /* MUTANT (rep_const) */                pc[0] = (state->flags & JSREG_FOLD)
1780: /* MUTANT (rep_const) */                pc[1] = (state->flags & JSREG_FOLD)
1780: /* MUTANT (rep_const) */                pc[((-1)+1)] = (state->flags & JSREG_FOLD)
1780: /* MUTANT (rep_const) */                pc[((-1)-1)] = (state->flags & JSREG_FOLD)
1783: /* MUTANT (del_stmt) */ /*                 SET_ARG(pc, t->u.flat.chr); */ 
1784: /* MUTANT (del_stmt) */ /*                 pc += ARG_LEN; */ 
1784: /* MUTANT (rep_op) */                pc -= ARG_LEN;
1784: /* MUTANT (rep_op) */                pc *= ARG_LEN;
1784: /* MUTANT (rep_op) */                pc %= ARG_LEN;
1790: /* MUTANT (del_stmt) */ /*             pc = WriteCompactIndex(pc, t->u.parenIndex); */ 
1791: /* MUTANT (del_stmt) */ /*             emitStateSP->continueNode = t; */ 
1792: /* MUTANT (del_stmt) */ /*             emitStateSP->continueOp = REOP_RPAREN; */ 
1793: /* MUTANT (del_stmt) */ /*             ++emitStateSP; */ 
1793: /* MUTANT (rep_op) */            --emitStateSP;
1794: /* MUTANT (del_stmt) */ /*             JS_ASSERT((size_t)(emitStateSP - emitStateStack) <= treeDepth); */ 
1794: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) < treeDepth);
1794: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) > treeDepth);
1794: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) >= treeDepth);
1794: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) == treeDepth);
1794: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) != treeDepth);
1795: /* MUTANT (del_stmt) */ /*             t = (RENode *) t->kid; */ 
1796: /* MUTANT (del_stmt) */ /*             op = t->op; */ 
1797: /* MUTANT (del_stmt) */ /*             continue; */ 
1801: /* MUTANT (del_stmt) */ /*             break; */ 
1805: /* MUTANT (del_stmt) */ /*             break; */ 
1809: /* MUTANT (del_stmt) */ /*             emitStateSP->nextTermFixup = pc; */ 
1810: /* MUTANT (del_stmt) */ /*             pc += OFFSET_LEN; */ 
1810: /* MUTANT (rep_op) */            pc -= OFFSET_LEN;
1810: /* MUTANT (rep_op) */            pc *= OFFSET_LEN;
1810: /* MUTANT (rep_op) */            pc %= OFFSET_LEN;
1811: /* MUTANT (del_stmt) */ /*             emitStateSP->continueNode = t; */ 
1812: /* MUTANT (del_stmt) */ /*             emitStateSP->continueOp = REOP_ASSERTTEST; */ 
1813: /* MUTANT (del_stmt) */ /*             ++emitStateSP; */ 
1813: /* MUTANT (rep_op) */            --emitStateSP;
1814: /* MUTANT (del_stmt) */ /*             JS_ASSERT((size_t)(emitStateSP - emitStateStack) <= treeDepth); */ 
1814: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) < treeDepth);
1814: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) > treeDepth);
1814: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) >= treeDepth);
1814: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) == treeDepth);
1814: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) != treeDepth);
1815: /* MUTANT (del_stmt) */ /*             t = (RENode *) t->kid; */ 
1816: /* MUTANT (del_stmt) */ /*             op = t->op; */ 
1817: /* MUTANT (del_stmt) */ /*             continue; */ 
1821: /* MUTANT (negate) */            if(! (!SetForwardJumpOffset(emitStateSP->nextTermFixup, pc)))
1823: /* MUTANT (del_stmt) */ /*             break; */ 
1827: /* MUTANT (del_stmt) */ /*             emitStateSP->nextTermFixup = pc; */ 
1828: /* MUTANT (del_stmt) */ /*             pc += OFFSET_LEN; */ 
1828: /* MUTANT (rep_op) */            pc -= OFFSET_LEN;
1828: /* MUTANT (rep_op) */            pc *= OFFSET_LEN;
1828: /* MUTANT (rep_op) */            pc %= OFFSET_LEN;
1829: /* MUTANT (del_stmt) */ /*             emitStateSP->continueNode = t; */ 
1830: /* MUTANT (del_stmt) */ /*             emitStateSP->continueOp = REOP_ASSERTNOTTEST; */ 
1831: /* MUTANT (del_stmt) */ /*             ++emitStateSP; */ 
1831: /* MUTANT (rep_op) */            --emitStateSP;
1832: /* MUTANT (del_stmt) */ /*             JS_ASSERT((size_t)(emitStateSP - emitStateStack) <= treeDepth); */ 
1832: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) < treeDepth);
1832: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) > treeDepth);
1832: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) >= treeDepth);
1832: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) == treeDepth);
1832: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) != treeDepth);
1833: /* MUTANT (del_stmt) */ /*             t = (RENode *) t->kid; */ 
1834: /* MUTANT (del_stmt) */ /*             op = t->op; */ 
1835: /* MUTANT (del_stmt) */ /*             continue; */ 
1839: /* MUTANT (rep_op) */            if (t->u.range.min != 0 && t->u.range.max == (uintN)-1) {
1839: /* MUTANT (rep_op) */            if (t->u.range.min == 0 || t->u.range.max == (uintN)-1) {
1839: /* MUTANT (rep_op) */            if (t->u.range.min == 0 && t->u.range.max != (uintN)-1) {
1839: /* MUTANT (rep_const) */            if (t->u.range.min == 1 && t->u.range.max == (uintN)-1) {
1839: /* MUTANT (rep_const) */            if (t->u.range.min == -1 && t->u.range.max == (uintN)-1) {
1839: /* MUTANT (rep_const) */            if (t->u.range.min == 0 && t->u.range.max == (uintN)0) {
1839: /* MUTANT (rep_const) */            if (t->u.range.min == 0 && t->u.range.max == (uintN)1) {
1839: /* MUTANT (rep_const) */            if (t->u.range.min == 0 && t->u.range.max == (uintN)((-1)+1)) {
1839: /* MUTANT (rep_const) */            if (t->u.range.min == 0 && t->u.range.max == (uintN)((-1)-1)) {
1839: /* MUTANT (negate) */            if(! (t->u.range.min == 0 && t->u.range.max == (uintN)-1)) {
1840: /* MUTANT (del_stmt) */ /*                 pc[-1] = (t->u.range.greedy) ? REOP_STAR : REOP_MINIMALSTAR; */ 
1840: /* MUTANT (rep_const) */                pc[0] = (t->u.range.greedy) ? REOP_STAR : REOP_MINIMALSTAR;
1840: /* MUTANT (rep_const) */                pc[1] = (t->u.range.greedy) ? REOP_STAR : REOP_MINIMALSTAR;
1840: /* MUTANT (rep_const) */                pc[((-1)+1)] = (t->u.range.greedy) ? REOP_STAR : REOP_MINIMALSTAR;
1840: /* MUTANT (rep_const) */                pc[((-1)-1)] = (t->u.range.greedy) ? REOP_STAR : REOP_MINIMALSTAR;
1841: /* MUTANT (rep_op) */            } else if (t->u.range.min != 0 && t->u.range.max == 1) {
1841: /* MUTANT (rep_op) */            } else if (t->u.range.min == 0 || t->u.range.max == 1) {
1841: /* MUTANT (rep_op) */            } else if (t->u.range.min == 0 && t->u.range.max != 1) {
1841: /* MUTANT (rep_const) */            } else if (t->u.range.min == 1 && t->u.range.max == 1) {
1841: /* MUTANT (rep_const) */            } else if (t->u.range.min == -1 && t->u.range.max == 1) {
1841: /* MUTANT (rep_const) */            } else if (t->u.range.min == 0 && t->u.range.max == 0) {
1841: /* MUTANT (rep_const) */            } else if (t->u.range.min == 0 && t->u.range.max == -1) {
1841: /* MUTANT (rep_const) */            } else if (t->u.range.min == 0 && t->u.range.max == ((1)+1)) {
1841: /* MUTANT (negate) */            } else if(! (t->u.range.min == 0 && t->u.range.max == 1)) {
1842: /* MUTANT (del_stmt) */ /*                 pc[-1] = (t->u.range.greedy) ? REOP_OPT : REOP_MINIMALOPT; */ 
1842: /* MUTANT (rep_const) */                pc[0] = (t->u.range.greedy) ? REOP_OPT : REOP_MINIMALOPT;
1842: /* MUTANT (rep_const) */                pc[1] = (t->u.range.greedy) ? REOP_OPT : REOP_MINIMALOPT;
1842: /* MUTANT (rep_const) */                pc[((-1)+1)] = (t->u.range.greedy) ? REOP_OPT : REOP_MINIMALOPT;
1842: /* MUTANT (rep_const) */                pc[((-1)-1)] = (t->u.range.greedy) ? REOP_OPT : REOP_MINIMALOPT;
1843: /* MUTANT (rep_op) */            } else if (t->u.range.min != 1 && t->u.range.max == (uintN) -1) {
1843: /* MUTANT (rep_op) */            } else if (t->u.range.min == 1 || t->u.range.max == (uintN) -1) {
1843: /* MUTANT (rep_op) */            } else if (t->u.range.min == 1 && t->u.range.max != (uintN) -1) {
1843: /* MUTANT (rep_const) */            } else if (t->u.range.min == 0 && t->u.range.max == (uintN) -1) {
1843: /* MUTANT (rep_const) */            } else if (t->u.range.min == -1 && t->u.range.max == (uintN) -1) {
1843: /* MUTANT (rep_const) */            } else if (t->u.range.min == ((1)+1) && t->u.range.max == (uintN) -1) {
1843: /* MUTANT (rep_const) */            } else if (t->u.range.min == 1 && t->u.range.max == (uintN) 0) {
1843: /* MUTANT (rep_const) */            } else if (t->u.range.min == 1 && t->u.range.max == (uintN) 1) {
1843: /* MUTANT (rep_const) */            } else if (t->u.range.min == 1 && t->u.range.max == (uintN) ((-1)+1)) {
1843: /* MUTANT (rep_const) */            } else if (t->u.range.min == 1 && t->u.range.max == (uintN) ((-1)-1)) {
1843: /* MUTANT (negate) */            } else if(! (t->u.range.min == 1 && t->u.range.max == (uintN) -1)) {
1844: /* MUTANT (del_stmt) */ /*                 pc[-1] = (t->u.range.greedy) ? REOP_PLUS : REOP_MINIMALPLUS; */ 
1844: /* MUTANT (rep_const) */                pc[0] = (t->u.range.greedy) ? REOP_PLUS : REOP_MINIMALPLUS;
1844: /* MUTANT (rep_const) */                pc[1] = (t->u.range.greedy) ? REOP_PLUS : REOP_MINIMALPLUS;
1844: /* MUTANT (rep_const) */                pc[((-1)+1)] = (t->u.range.greedy) ? REOP_PLUS : REOP_MINIMALPLUS;
1844: /* MUTANT (rep_const) */                pc[((-1)-1)] = (t->u.range.greedy) ? REOP_PLUS : REOP_MINIMALPLUS;
1846: /* MUTANT (negate) */                if(! (!t->u.range.greedy))
1847: /* MUTANT (rep_const) */                    pc[0] = REOP_MINIMALQUANT;
1847: /* MUTANT (rep_const) */                    pc[1] = REOP_MINIMALQUANT;
1847: /* MUTANT (rep_const) */                    pc[((-1)+1)] = REOP_MINIMALQUANT;
1847: /* MUTANT (rep_const) */                    pc[((-1)-1)] = REOP_MINIMALQUANT;
1848: /* MUTANT (del_stmt) */ /*                 pc = WriteCompactIndex(pc, t->u.range.min); */ 
1853: /* MUTANT (del_stmt) */ /*                 pc = WriteCompactIndex(pc, t->u.range.max + 1); */ 
1853: /* MUTANT (rep_op) */                pc = WriteCompactIndex(pc, t->u.range.max - 1);
1853: /* MUTANT (rep_op) */                pc = WriteCompactIndex(pc, t->u.range.max * 1);
1853: /* MUTANT (rep_op) */                pc = WriteCompactIndex(pc, t->u.range.max % 1);
1853: /* MUTANT (rep_const) */                pc = WriteCompactIndex(pc, t->u.range.max + 0);
1853: /* MUTANT (rep_const) */                pc = WriteCompactIndex(pc, t->u.range.max + -1);
1853: /* MUTANT (rep_const) */                pc = WriteCompactIndex(pc, t->u.range.max + ((1)+1));
1856: /* MUTANT (del_stmt) */ /*             pc += OFFSET_LEN; */ 
1856: /* MUTANT (rep_op) */            pc -= OFFSET_LEN;
1856: /* MUTANT (rep_op) */            pc *= OFFSET_LEN;
1856: /* MUTANT (rep_op) */            pc %= OFFSET_LEN;
1857: /* MUTANT (del_stmt) */ /*             emitStateSP->continueNode = t; */ 
1858: /* MUTANT (del_stmt) */ /*             emitStateSP->continueOp = REOP_ENDCHILD; */ 
1859: /* MUTANT (del_stmt) */ /*             ++emitStateSP; */ 
1859: /* MUTANT (rep_op) */            --emitStateSP;
1860: /* MUTANT (del_stmt) */ /*             JS_ASSERT((size_t)(emitStateSP - emitStateStack) <= treeDepth); */ 
1860: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) < treeDepth);
1860: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) > treeDepth);
1860: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) >= treeDepth);
1860: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) == treeDepth);
1860: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(emitStateSP - emitStateStack) != treeDepth);
1861: /* MUTANT (del_stmt) */ /*             t = (RENode *) t->kid; */ 
1862: /* MUTANT (del_stmt) */ /*             op = t->op; */ 
1863: /* MUTANT (del_stmt) */ /*             continue; */ 
1866: /* MUTANT (negate) */            if(! (!SetForwardJumpOffset(emitStateSP->nextTermFixup, pc)))
1868: /* MUTANT (del_stmt) */ /*             break; */ 
1871: /* MUTANT (negate) */            if(! (!t->u.ucclass.sense))
1872: /* MUTANT (rep_const) */                pc[0] = REOP_NCLASS;
1872: /* MUTANT (rep_const) */                pc[1] = REOP_NCLASS;
1872: /* MUTANT (rep_const) */                pc[((-1)+1)] = REOP_NCLASS;
1872: /* MUTANT (rep_const) */                pc[((-1)-1)] = REOP_NCLASS;
1873: /* MUTANT (del_stmt) */ /*             pc = WriteCompactIndex(pc, t->u.ucclass.index); */ 
1874: /* MUTANT (del_stmt) */ /*             charSet = &re->classList[t->u.ucclass.index]; */ 
1875: /* MUTANT (del_stmt) */ /*             charSet->converted = JS_FALSE; */ 
1876: /* MUTANT (del_stmt) */ /*             charSet->length = t->u.ucclass.bmsize; */ 
1877: /* MUTANT (del_stmt) */ /*             charSet->u.src.startIndex = t->u.ucclass.startIndex; */ 
1878: /* MUTANT (del_stmt) */ /*             charSet->u.src.length = t->u.ucclass.kidlen; */ 
1879: /* MUTANT (del_stmt) */ /*             charSet->sense = t->u.ucclass.sense; */ 
1880: /* MUTANT (del_stmt) */ /*             break; */ 
1887: /* MUTANT (negate) */        if(! (t)) {
1888: /* MUTANT (del_stmt) */ /*             op = t->op; */ 
1890: /* MUTANT (rep_op) */            if (emitStateSP != emitStateStack)
1890: /* MUTANT (negate) */            if(! (emitStateSP == emitStateStack))
1892: /* MUTANT (del_stmt) */ /*             --emitStateSP; */ 
1892: /* MUTANT (rep_op) */            ++emitStateSP;
1893: /* MUTANT (del_stmt) */ /*             t = emitStateSP->continueNode; */ 
1894: /* MUTANT (del_stmt) */ /*             op = emitStateSP->continueOp; */ 
1899: /* MUTANT (negate) */    if(! (emitStateStack))
1901: /* MUTANT (del_stmt) */ /*     return pc; */ 
1905: /* MUTANT (rep_op) */                                JSREPORT_TS & JSREPORT_ERROR,
1907: /* MUTANT (del_stmt) */ /*     pc = NULL; */ 
1908: /* MUTANT (del_stmt) */ /*     goto cleanup; */ 
1916: /* MUTANT (del_stmt) */ /*     JSRegExp *re; */ 
1917: /* MUTANT (del_stmt) */ /*     void *mark; */ 
1918: /* MUTANT (del_stmt) */ /*     CompilerState state; */ 
1919: /* MUTANT (del_stmt) */ /*     size_t resize; */ 
1920: /* MUTANT (del_stmt) */ /*     jsbytecode *endPC; */ 
1921: /* MUTANT (del_stmt) */ /*     uintN i; */ 
1922: /* MUTANT (del_stmt) */ /*     size_t len; */ 
1924: /* MUTANT (del_stmt) */ /*     re = NULL; */ 
1925: /* MUTANT (del_stmt) */ /*     mark = JS_ARENA_MARK(&cx->tempPool); */ 
1926: /* MUTANT (del_stmt) */ /*     len = JSSTRING_LENGTH(str); */ 
1928: /* MUTANT (del_stmt) */ /*     state.context = cx; */ 
1929: /* MUTANT (del_stmt) */ /*     state.tokenStream = ts; */ 
1930: /* MUTANT (del_stmt) */ /*     state.cpbegin = state.cp = JSSTRING_CHARS(str); */ 
1931: /* MUTANT (del_stmt) */ /*     state.cpend = state.cp + len; */ 
1931: /* MUTANT (rep_op) */    state.cpend = state.cp - len;
1931: /* MUTANT (rep_op) */    state.cpend = state.cp * len;
1931: /* MUTANT (rep_op) */    state.cpend = state.cp % len;
1932: /* MUTANT (del_stmt) */ /*     state.flags = flags; */ 
1933: /* MUTANT (del_stmt) */ /*     state.parenCount = 0; */ 
1933: /* MUTANT (rep_const) */    state.parenCount = 1;
1933: /* MUTANT (rep_const) */    state.parenCount = -1;
1934: /* MUTANT (del_stmt) */ /*     state.classCount = 0; */ 
1934: /* MUTANT (rep_const) */    state.classCount = 1;
1934: /* MUTANT (rep_const) */    state.classCount = -1;
1935: /* MUTANT (del_stmt) */ /*     state.progLength = 0; */ 
1935: /* MUTANT (rep_const) */    state.progLength = 1;
1935: /* MUTANT (rep_const) */    state.progLength = -1;
1936: /* MUTANT (del_stmt) */ /*     state.treeDepth = 0; */ 
1936: /* MUTANT (rep_const) */    state.treeDepth = 1;
1936: /* MUTANT (rep_const) */    state.treeDepth = -1;
1937: /* MUTANT (del_stmt) */ /*     state.classBitmapsMem = 0; */ 
1937: /* MUTANT (rep_const) */    state.classBitmapsMem = 1;
1937: /* MUTANT (rep_const) */    state.classBitmapsMem = -1;
1938: /* MUTANT (rep_op) */    for (i = 0; i <= CLASS_CACHE_SIZE; i++)
1938: /* MUTANT (rep_op) */    for (i = 0; i > CLASS_CACHE_SIZE; i++)
1938: /* MUTANT (rep_op) */    for (i = 0; i >= CLASS_CACHE_SIZE; i++)
1938: /* MUTANT (rep_op) */    for (i = 0; i == CLASS_CACHE_SIZE; i++)
1938: /* MUTANT (rep_op) */    for (i = 0; i != CLASS_CACHE_SIZE; i++)
1938: /* MUTANT (rep_op) */    for (i = 0; i < CLASS_CACHE_SIZE; i--)
1938: /* MUTANT (rep_const) */    for (i = 1; i < CLASS_CACHE_SIZE; i++)
1938: /* MUTANT (rep_const) */    for (i = -1; i < CLASS_CACHE_SIZE; i++)
1941: /* MUTANT (rep_op) */    if (len == 0 && flat) {
1941: /* MUTANT (rep_op) */    if (len != 0 || flat) {
1941: /* MUTANT (rep_const) */    if (len != 1 && flat) {
1941: /* MUTANT (rep_const) */    if (len != -1 && flat) {
1941: /* MUTANT (negate) */    if(! (len != 0 && flat)) {
1942: /* MUTANT (del_stmt) */ /*         state.result = NewRENode(&state, REOP_FLAT); */ 
1943: /* MUTANT (del_stmt) */ /*         state.result->u.flat.chr = *state.cpbegin; */ 
1944: /* MUTANT (del_stmt) */ /*         state.result->u.flat.length = len; */ 
1945: /* MUTANT (del_stmt) */ /*         state.result->kid = (void *) state.cpbegin; */ 
1947: /* MUTANT (rep_op) */        state.progLength -= 1 + GetCompactIndexWidth(0)
1947: /* MUTANT (rep_op) */        state.progLength *= 1 + GetCompactIndexWidth(0)
1947: /* MUTANT (rep_op) */        state.progLength %= 1 + GetCompactIndexWidth(0)
1947: /* MUTANT (rep_op) */        state.progLength += 1 - GetCompactIndexWidth(0)
1947: /* MUTANT (rep_op) */        state.progLength += 1 * GetCompactIndexWidth(0)
1947: /* MUTANT (rep_op) */        state.progLength += 1 % GetCompactIndexWidth(0)
1947: /* MUTANT (rep_const) */        state.progLength += 0 + GetCompactIndexWidth(0)
1947: /* MUTANT (rep_const) */        state.progLength += -1 + GetCompactIndexWidth(0)
1947: /* MUTANT (rep_const) */        state.progLength += ((1)+1) + GetCompactIndexWidth(0)
1947: /* MUTANT (rep_const) */        state.progLength += 1 + GetCompactIndexWidth(1)
1947: /* MUTANT (rep_const) */        state.progLength += 1 + GetCompactIndexWidth(-1)
1948: /* MUTANT (rep_op) */                          - GetCompactIndexWidth(len);
1948: /* MUTANT (rep_op) */                          * GetCompactIndexWidth(len);
1948: /* MUTANT (rep_op) */                          % GetCompactIndexWidth(len);
1950: /* MUTANT (negate) */        if(! (!ParseRegExp(&state)))
1953: /* MUTANT (rep_op) */    resize = offsetof(JSRegExp, program) - state.progLength + 1;
1953: /* MUTANT (rep_op) */    resize = offsetof(JSRegExp, program) * state.progLength + 1;
1953: /* MUTANT (rep_op) */    resize = offsetof(JSRegExp, program) % state.progLength + 1;
1953: /* MUTANT (rep_op) */    resize = offsetof(JSRegExp, program) + state.progLength - 1;
1953: /* MUTANT (rep_op) */    resize = offsetof(JSRegExp, program) + state.progLength * 1;
1953: /* MUTANT (rep_op) */    resize = offsetof(JSRegExp, program) + state.progLength % 1;
1953: /* MUTANT (rep_const) */    resize = offsetof(JSRegExp, program) + state.progLength + 0;
1953: /* MUTANT (rep_const) */    resize = offsetof(JSRegExp, program) + state.progLength + -1;
1953: /* MUTANT (rep_const) */    resize = offsetof(JSRegExp, program) + state.progLength + ((1)+1);
1954: /* MUTANT (del_stmt) */ /*     re = (JSRegExp *) JS_malloc(cx, resize); */ 
1955: /* MUTANT (negate) */    if(! (!re))
1958: /* MUTANT (del_stmt) */ /*     re->nrefs = 1; */ 
1958: /* MUTANT (rep_const) */    re->nrefs = 0;
1958: /* MUTANT (rep_const) */    re->nrefs = -1;
1958: /* MUTANT (rep_const) */    re->nrefs = ((1)+1);
1959: /* MUTANT (del_stmt) */ /*     JS_ASSERT(state.classBitmapsMem <= CLASS_BITMAPS_MEM_LIMIT); */ 
1959: /* MUTANT (rep_op) */    JS_ASSERT(state.classBitmapsMem < CLASS_BITMAPS_MEM_LIMIT);
1959: /* MUTANT (rep_op) */    JS_ASSERT(state.classBitmapsMem > CLASS_BITMAPS_MEM_LIMIT);
1959: /* MUTANT (rep_op) */    JS_ASSERT(state.classBitmapsMem >= CLASS_BITMAPS_MEM_LIMIT);
1959: /* MUTANT (rep_op) */    JS_ASSERT(state.classBitmapsMem == CLASS_BITMAPS_MEM_LIMIT);
1959: /* MUTANT (rep_op) */    JS_ASSERT(state.classBitmapsMem != CLASS_BITMAPS_MEM_LIMIT);
1960: /* MUTANT (del_stmt) */ /*     re->classCount = state.classCount; */ 
1961: /* MUTANT (negate) */    if(! (re->classCount)) {
1964: /* MUTANT (negate) */        if(! (!re->classList)) {
1965: /* MUTANT (del_stmt) */ /*             js_DestroyRegExp(cx, re); */ 
1966: /* MUTANT (del_stmt) */ /*             re = NULL; */ 
1967: /* MUTANT (del_stmt) */ /*             goto out; */ 
1970: /* MUTANT (del_stmt) */ /*         re->classList = NULL; */ 
1973: /* MUTANT (negate) */    if(! (!endPC)) {
1974: /* MUTANT (del_stmt) */ /*         js_DestroyRegExp(cx, re); */ 
1975: /* MUTANT (del_stmt) */ /*         re = NULL; */ 
1976: /* MUTANT (del_stmt) */ /*         goto out; */ 
1978: /* MUTANT (rep_op) */    *endPC-- = REOP_END;
1984: /* MUTANT (rep_op) */    if ((size_t)(endPC - re->program) == state.progLength + 1) {
1984: /* MUTANT (rep_op) */    if ((size_t)(endPC - re->program) != state.progLength - 1) {
1984: /* MUTANT (rep_op) */    if ((size_t)(endPC - re->program) != state.progLength * 1) {
1984: /* MUTANT (rep_op) */    if ((size_t)(endPC - re->program) != state.progLength % 1) {
1984: /* MUTANT (rep_const) */    if ((size_t)(endPC - re->program) != state.progLength + 0) {
1984: /* MUTANT (rep_const) */    if ((size_t)(endPC - re->program) != state.progLength + -1) {
1984: /* MUTANT (rep_const) */    if ((size_t)(endPC - re->program) != state.progLength + ((1)+1)) {
1984: /* MUTANT (negate) */    if(! ((size_t)(endPC - re->program) != state.progLength + 1)) {
1985: /* MUTANT (del_stmt) */ /*         JSRegExp *tmp; */ 
1986: /* MUTANT (del_stmt) */ /*         JS_ASSERT((size_t)(endPC - re->program) < state.progLength + 1); */ 
1986: /* MUTANT (rep_op) */        JS_ASSERT((size_t)(endPC - re->program) <= state.progLength + 1);
1986: /* MUTANT (rep_op) */        JS_ASSERT((size_t)(endPC - re->program) > state.progLength + 1);
1986: /* MUTANT (rep_op) */        JS_ASSERT((size_t)(endPC - re->program) >= state.progLength + 1);
1986: /* MUTANT (rep_op) */        JS_ASSERT((size_t)(endPC - re->program) == state.progLength + 1);
1986: /* MUTANT (rep_op) */        JS_ASSERT((size_t)(endPC - re->program) != state.progLength + 1);
1986: /* MUTANT (rep_op) */        JS_ASSERT((size_t)(endPC - re->program) < state.progLength - 1);
1986: /* MUTANT (rep_op) */        JS_ASSERT((size_t)(endPC - re->program) < state.progLength * 1);
1986: /* MUTANT (rep_op) */        JS_ASSERT((size_t)(endPC - re->program) < state.progLength % 1);
1986: /* MUTANT (rep_const) */        JS_ASSERT((size_t)(endPC - re->program) < state.progLength + 0);
1986: /* MUTANT (rep_const) */        JS_ASSERT((size_t)(endPC - re->program) < state.progLength + -1);
1986: /* MUTANT (rep_const) */        JS_ASSERT((size_t)(endPC - re->program) < state.progLength + ((1)+1));
1987: /* MUTANT (del_stmt) */ /*         resize = offsetof(JSRegExp, program) + (endPC - re->program); */ 
1987: /* MUTANT (rep_op) */        resize = offsetof(JSRegExp, program) - (endPC - re->program);
1987: /* MUTANT (rep_op) */        resize = offsetof(JSRegExp, program) * (endPC - re->program);
1987: /* MUTANT (rep_op) */        resize = offsetof(JSRegExp, program) % (endPC - re->program);
1988: /* MUTANT (del_stmt) */ /*         tmp = (JSRegExp *) JS_realloc(cx, re, resize); */ 
1989: /* MUTANT (negate) */        if(! (tmp))
1994: /* MUTANT (del_stmt) */ /*     re->cloneIndex = 0; */ 
1994: /* MUTANT (rep_const) */    re->cloneIndex = 1;
1994: /* MUTANT (rep_const) */    re->cloneIndex = -1;
1995: /* MUTANT (del_stmt) */ /*     re->parenCount = state.parenCount; */ 
1996: /* MUTANT (del_stmt) */ /*     re->source = str; */ 
2000: /* MUTANT (del_stmt) */ /*     return re; */ 
2007: /* MUTANT (del_stmt) */ /*     uintN flags; */ 
2008: /* MUTANT (del_stmt) */ /*     jschar *s; */ 
2009: /* MUTANT (del_stmt) */ /*     size_t i, n; */ 
2010: /* MUTANT (del_stmt) */ /*     char charBuf[2]; */ 
2010: /* MUTANT (rep_const) */    char charBuf[0];
2010: /* MUTANT (rep_const) */    char charBuf[1];
2010: /* MUTANT (rep_const) */    char charBuf[-1];
2010: /* MUTANT (rep_const) */    char charBuf[((2)+1)];
2010: /* MUTANT (rep_const) */    char charBuf[((2)-1)];
2012: /* MUTANT (del_stmt) */ /*     flags = 0; */ 
2012: /* MUTANT (rep_const) */    flags = 1;
2012: /* MUTANT (rep_const) */    flags = -1;
2013: /* MUTANT (negate) */    if(! (opt)) {
2014: /* MUTANT (del_stmt) */ /*         s = JSSTRING_CHARS(opt); */ 
2015: /* MUTANT (rep_op) */        for (i = 0, n = JSSTRING_LENGTH(opt); i <= n; i++) {
2015: /* MUTANT (rep_op) */        for (i = 0, n = JSSTRING_LENGTH(opt); i > n; i++) {
2015: /* MUTANT (rep_op) */        for (i = 0, n = JSSTRING_LENGTH(opt); i >= n; i++) {
2015: /* MUTANT (rep_op) */        for (i = 0, n = JSSTRING_LENGTH(opt); i == n; i++) {
2015: /* MUTANT (rep_op) */        for (i = 0, n = JSSTRING_LENGTH(opt); i != n; i++) {
2015: /* MUTANT (rep_op) */        for (i = 0, n = JSSTRING_LENGTH(opt); i < n; i--) {
2015: /* MUTANT (rep_const) */        for (i = 1, n = JSSTRING_LENGTH(opt); i < n; i++) {
2015: /* MUTANT (rep_const) */        for (i = -1, n = JSSTRING_LENGTH(opt); i < n; i++) {
2019: /* MUTANT (del_stmt) */ /*                 break; */ 
2022: /* MUTANT (del_stmt) */ /*                 break; */ 
2025: /* MUTANT (del_stmt) */ /*                 break; */ 
2027: /* MUTANT (rep_const) */                charBuf[1] = (char)s[i];
2027: /* MUTANT (rep_const) */                charBuf[-1] = (char)s[i];
2028: /* MUTANT (del_stmt) */ /*                 charBuf[1] = '\0'; */ 
2028: /* MUTANT (rep_const) */                charBuf[0] = '\0';
2028: /* MUTANT (rep_const) */                charBuf[-1] = '\0';
2028: /* MUTANT (rep_const) */                charBuf[((1)+1)] = '\0';
2028: /* MUTANT (rep_const) */                charBuf[1] = '\1';
2028: /* MUTANT (rep_const) */                charBuf[1] = '\-1';
2030: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,
2032: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
2050: /* MUTANT (del_stmt) */ /*     size_t i; */ 
2052: /* MUTANT (rep_op) */        (REBackTrackData *) ((char *)gData->backTrackSP - gData->cursz);
2052: /* MUTANT (rep_op) */        (REBackTrackData *) ((char *)gData->backTrackSP * gData->cursz);
2052: /* MUTANT (rep_op) */        (REBackTrackData *) ((char *)gData->backTrackSP % gData->cursz);
2054: /* MUTANT (rep_op) */    size_t sz = sizeof(REBackTrackData) -
2054: /* MUTANT (rep_op) */    size_t sz = sizeof(REBackTrackData) *
2054: /* MUTANT (rep_op) */    size_t sz = sizeof(REBackTrackData) %
2055: /* MUTANT (rep_op) */                gData->stateStackTop * sizeof(REProgState) -
2055: /* MUTANT (rep_op) */                gData->stateStackTop * sizeof(REProgState) *
2055: /* MUTANT (rep_op) */                gData->stateStackTop * sizeof(REProgState) %
2058: /* MUTANT (del_stmt) */ /*     ptrdiff_t btsize = gData->backTrackStackSize; */ 
2059: /* MUTANT (rep_op) */    ptrdiff_t btincr = ((char *)result - sz) -
2059: /* MUTANT (rep_op) */    ptrdiff_t btincr = ((char *)result * sz) -
2059: /* MUTANT (rep_op) */    ptrdiff_t btincr = ((char *)result % sz) -
2059: /* MUTANT (negate) */    ptrdif(!f_t btincr = ((char *)result + sz)) -
2060: /* MUTANT (rep_op) */                       ((char *)gData->backTrackStack - btsize);
2060: /* MUTANT (rep_op) */                       ((char *)gData->backTrackStack * btsize);
2060: /* MUTANT (rep_op) */                       ((char *)gData->backTrackStack % btsize);
2062: /* MUTANT (rep_op) */    if (btincr <= 0) {
2062: /* MUTANT (rep_op) */    if (btincr < 0) {
2062: /* MUTANT (rep_op) */    if (btincr >= 0) {
2062: /* MUTANT (rep_op) */    if (btincr == 0) {
2062: /* MUTANT (rep_op) */    if (btincr != 0) {
2062: /* MUTANT (rep_const) */    if (btincr > 1) {
2062: /* MUTANT (rep_const) */    if (btincr > -1) {
2062: /* MUTANT (negate) */    if(! (btincr > 0)) {
2063: /* MUTANT (del_stmt) */ /*         ptrdiff_t offset = (char *)result - (char *)gData->backTrackStack; */ 
2063: /* MUTANT (negate) */        ptrdif(!f_t offset = (char *))result - (char *)gData->backTrackStack;
2065: /* MUTANT (del_stmt) */ /*         btincr = JS_ROUNDUP(btincr, btsize); */ 
2068: /* MUTANT (negate) */        if(! (!gData->backTrackStack))
2070: /* MUTANT (del_stmt) */ /*         gData->backTrackStackSize = btsize + btincr; */ 
2070: /* MUTANT (rep_op) */        gData->backTrackStackSize = btsize - btincr;
2070: /* MUTANT (rep_op) */        gData->backTrackStackSize = btsize * btincr;
2070: /* MUTANT (rep_op) */        gData->backTrackStackSize = btsize % btincr;
2071: /* MUTANT (del_stmt) */ /*         result = (REBackTrackData *) ((char *)gData->backTrackStack + offset); */ 
2071: /* MUTANT (rep_op) */        result = (REBackTrackData *) ((char *)gData->backTrackStack - offset);
2071: /* MUTANT (rep_op) */        result = (REBackTrackData *) ((char *)gData->backTrackStack * offset);
2071: /* MUTANT (rep_op) */        result = (REBackTrackData *) ((char *)gData->backTrackStack % offset);
2074: /* MUTANT (del_stmt) */ /*     result->sz = gData->cursz; */ 
2075: /* MUTANT (del_stmt) */ /*     gData->cursz = sz; */ 
2077: /* MUTANT (del_stmt) */ /*     result->backtrack_op = op; */ 
2078: /* MUTANT (del_stmt) */ /*     result->backtrack_pc = target; */ 
2079: /* MUTANT (del_stmt) */ /*     result->cp = cp; */ 
2080: /* MUTANT (del_stmt) */ /*     result->parenCount = parenCount; */ 
2082: /* MUTANT (del_stmt) */ /*     result->saveStateStackTop = gData->stateStackTop; */ 
2083: /* MUTANT (del_stmt) */ /*     JS_ASSERT(gData->stateStackTop); */ 
2084: /* MUTANT (rep_op) */    memcpy(result - 1, gData->stateStack,
2084: /* MUTANT (rep_op) */    memcpy(result * 1, gData->stateStack,
2084: /* MUTANT (rep_op) */    memcpy(result % 1, gData->stateStack,
2084: /* MUTANT (rep_const) */    memcpy(result + 0, gData->stateStack,
2084: /* MUTANT (rep_const) */    memcpy(result + -1, gData->stateStack,
2084: /* MUTANT (rep_const) */    memcpy(result + ((1)+1), gData->stateStack,
2087: /* MUTANT (rep_op) */    if (parenCount == 0) {
2087: /* MUTANT (rep_const) */    if (parenCount != 1) {
2087: /* MUTANT (rep_const) */    if (parenCount != -1) {
2087: /* MUTANT (negate) */    if(! (parenCount != 0)) {
2088: /* MUTANT (del_stmt) */ /*         result->parenIndex = parenIndex; */ 
2089: /* MUTANT (rep_op) */        memcpy((char *)(result - 1) +
2089: /* MUTANT (rep_op) */        memcpy((char *)(result * 1) +
2089: /* MUTANT (rep_op) */        memcpy((char *)(result % 1) +
2089: /* MUTANT (rep_op) */        memcpy((char *)(result + 1) -
2089: /* MUTANT (rep_op) */        memcpy((char *)(result + 1) *
2089: /* MUTANT (rep_op) */        memcpy((char *)(result + 1) %
2089: /* MUTANT (rep_const) */        memcpy((char *)(result + 0) +
2089: /* MUTANT (rep_const) */        memcpy((char *)(result + -1) +
2089: /* MUTANT (rep_const) */        memcpy((char *)(result + ((1)+1)) +
2093: /* MUTANT (rep_op) */        for (i = 0; i == parenCount; i++)
2093: /* MUTANT (rep_op) */        for (i = 0; i != parenCount; i--)
2093: /* MUTANT (rep_const) */        for (i = 1; i != parenCount; i++)
2093: /* MUTANT (rep_const) */        for (i = -1; i != parenCount; i++)
2094: /* MUTANT (rep_op) */            x->parens[parenIndex - i].index = -1;
2094: /* MUTANT (rep_op) */            x->parens[parenIndex * i].index = -1;
2094: /* MUTANT (rep_op) */            x->parens[parenIndex % i].index = -1;
2094: /* MUTANT (rep_const) */            x->parens[parenIndex + i].index = 0;
2094: /* MUTANT (rep_const) */            x->parens[parenIndex + i].index = 1;
2094: /* MUTANT (rep_const) */            x->parens[parenIndex + i].index = ((-1)+1);
2094: /* MUTANT (rep_const) */            x->parens[parenIndex + i].index = ((-1)-1);
2104: #if 1 /* MUTANT (rep_const) */
2104: #if -1 /* MUTANT (rep_const) */
2109: /* MUTANT (del_stmt) */ /*     size_t i; */ 
2110: /* MUTANT (rep_op) */    if (length <= gData->cpend - x->cp)
2110: /* MUTANT (rep_op) */    if (length < gData->cpend - x->cp)
2110: /* MUTANT (rep_op) */    if (length >= gData->cpend - x->cp)
2110: /* MUTANT (rep_op) */    if (length == gData->cpend - x->cp)
2110: /* MUTANT (rep_op) */    if (length != gData->cpend - x->cp)
2110: /* MUTANT (negate) */    if(! (length > gData->cpend - x->cp))
2112: /* MUTANT (rep_op) */    for (i = 0; i == length; i++) {
2112: /* MUTANT (rep_op) */    for (i = 0; i != length; i--) {
2112: /* MUTANT (rep_const) */    for (i = 1; i != length; i++) {
2112: /* MUTANT (rep_const) */    for (i = -1; i != length; i++) {
2113: /* MUTANT (rep_op) */        if (matchChars[i] == x->cp[i])
2113: /* MUTANT (negate) */        if(! (matchChars[i] != x->cp[i]))
2116: /* MUTANT (rep_op) */    x->cp -= length;
2116: /* MUTANT (rep_op) */    x->cp *= length;
2116: /* MUTANT (rep_op) */    x->cp %= length;
2117: /* MUTANT (del_stmt) */ /*     return x; */ 
2125: /* MUTANT (del_stmt) */ /*     size_t i; */ 
2126: /* MUTANT (del_stmt) */ /*     JS_ASSERT(gData->cpend >= x->cp); */ 
2126: /* MUTANT (rep_op) */    JS_ASSERT(gData->cpend <= x->cp);
2126: /* MUTANT (rep_op) */    JS_ASSERT(gData->cpend < x->cp);
2126: /* MUTANT (rep_op) */    JS_ASSERT(gData->cpend > x->cp);
2126: /* MUTANT (rep_op) */    JS_ASSERT(gData->cpend == x->cp);
2126: /* MUTANT (rep_op) */    JS_ASSERT(gData->cpend != x->cp);
2127: /* MUTANT (rep_op) */    if (length <= (size_t)(gData->cpend - x->cp))
2127: /* MUTANT (rep_op) */    if (length < (size_t)(gData->cpend - x->cp))
2127: /* MUTANT (rep_op) */    if (length >= (size_t)(gData->cpend - x->cp))
2127: /* MUTANT (rep_op) */    if (length == (size_t)(gData->cpend - x->cp))
2127: /* MUTANT (rep_op) */    if (length != (size_t)(gData->cpend - x->cp))
2127: /* MUTANT (negate) */    if(! (length > (size_t)(gData->cpend - x->cp)))
2129: /* MUTANT (rep_op) */    for (i = 0; i == length; i++) {
2129: /* MUTANT (rep_op) */    for (i = 0; i != length; i--) {
2129: /* MUTANT (rep_const) */    for (i = 1; i != length; i++) {
2129: /* MUTANT (rep_const) */    for (i = -1; i != length; i++) {
2130: /* MUTANT (rep_op) */        if (upcase(matchChars[i]) == upcase(x->cp[i]))
2130: /* MUTANT (negate) */        if(! (upcase(matchChars[i]) != upcase(x->cp[i])))
2133: /* MUTANT (rep_op) */    x->cp -= length;
2133: /* MUTANT (rep_op) */    x->cp *= length;
2133: /* MUTANT (rep_op) */    x->cp %= length;
2134: /* MUTANT (del_stmt) */ /*     return x; */ 
2163: /* MUTANT (del_stmt) */ /*     size_t len, i; */ 
2164: /* MUTANT (del_stmt) */ /*     const jschar *parenContent; */ 
2165: /* MUTANT (del_stmt) */ /*     RECapture *cap = &x->parens[parenIndex]; */ 
2167: /* MUTANT (rep_op) */    if (cap->index != -1)
2167: /* MUTANT (rep_const) */    if (cap->index == 0)
2167: /* MUTANT (rep_const) */    if (cap->index == 1)
2167: /* MUTANT (rep_const) */    if (cap->index == ((-1)+1))
2167: /* MUTANT (rep_const) */    if (cap->index == ((-1)-1))
2167: /* MUTANT (negate) */    if(! (cap->index == -1))
2170: /* MUTANT (del_stmt) */ /*     len = cap->length; */ 
2171: /* MUTANT (rep_op) */    if (x->cp - len > gData->cpend)
2171: /* MUTANT (rep_op) */    if (x->cp * len > gData->cpend)
2171: /* MUTANT (rep_op) */    if (x->cp % len > gData->cpend)
2171: /* MUTANT (rep_op) */    if (x->cp + len <= gData->cpend)
2171: /* MUTANT (rep_op) */    if (x->cp + len < gData->cpend)
2171: /* MUTANT (rep_op) */    if (x->cp + len >= gData->cpend)
2171: /* MUTANT (rep_op) */    if (x->cp + len == gData->cpend)
2171: /* MUTANT (rep_op) */    if (x->cp + len != gData->cpend)
2171: /* MUTANT (negate) */    if(! (x->cp + len > gData->cpend))
2174: /* MUTANT (del_stmt) */ /*     parenContent = &gData->cpbegin[cap->index]; */ 
2175: /* MUTANT (negate) */    if(! (gData->regexp->flags & JSREG_FOLD)) {
2176: /* MUTANT (rep_op) */        for (i = 0; i <= len; i++) {
2176: /* MUTANT (rep_op) */        for (i = 0; i > len; i++) {
2176: /* MUTANT (rep_op) */        for (i = 0; i >= len; i++) {
2176: /* MUTANT (rep_op) */        for (i = 0; i == len; i++) {
2176: /* MUTANT (rep_op) */        for (i = 0; i != len; i++) {
2176: /* MUTANT (rep_op) */        for (i = 0; i < len; i--) {
2176: /* MUTANT (rep_const) */        for (i = 1; i < len; i++) {
2176: /* MUTANT (rep_const) */        for (i = -1; i < len; i++) {
2177: /* MUTANT (rep_op) */            if (upcase(parenContent[i]) == upcase(x->cp[i]))
2177: /* MUTANT (negate) */            if(! (upcase(parenContent[i]) != upcase(x->cp[i])))
2181: /* MUTANT (rep_op) */        for (i = 0; i <= len; i++) {
2181: /* MUTANT (rep_op) */        for (i = 0; i > len; i++) {
2181: /* MUTANT (rep_op) */        for (i = 0; i >= len; i++) {
2181: /* MUTANT (rep_op) */        for (i = 0; i == len; i++) {
2181: /* MUTANT (rep_op) */        for (i = 0; i != len; i++) {
2181: /* MUTANT (rep_op) */        for (i = 0; i < len; i--) {
2181: /* MUTANT (rep_const) */        for (i = 1; i < len; i++) {
2181: /* MUTANT (rep_const) */        for (i = -1; i < len; i++) {
2182: /* MUTANT (rep_op) */            if (parenContent[i] == x->cp[i])
2182: /* MUTANT (negate) */            if(! (parenContent[i] != x->cp[i]))
2186: /* MUTANT (rep_op) */    x->cp -= len;
2186: /* MUTANT (rep_op) */    x->cp *= len;
2186: /* MUTANT (rep_op) */    x->cp %= len;
2187: /* MUTANT (del_stmt) */ /*     return x; */ 
2195: /* MUTANT (del_stmt) */ /*     uintN byteIndex = (uintN)(c >> 3); */ 
2195: /* MUTANT (rep_const) */    uintN byteIndex = (uintN)(c >> 0);
2195: /* MUTANT (rep_const) */    uintN byteIndex = (uintN)(c >> 1);
2195: /* MUTANT (rep_const) */    uintN byteIndex = (uintN)(c >> -1);
2195: /* MUTANT (rep_const) */    uintN byteIndex = (uintN)(c >> ((3)+1));
2195: /* MUTANT (rep_const) */    uintN byteIndex = (uintN)(c >> ((3)-1));
2196: /* MUTANT (del_stmt) */ /*     JS_ASSERT(c <= cs->length); */ 
2196: /* MUTANT (rep_op) */    JS_ASSERT(c < cs->length);
2196: /* MUTANT (rep_op) */    JS_ASSERT(c > cs->length);
2196: /* MUTANT (rep_op) */    JS_ASSERT(c >= cs->length);
2196: /* MUTANT (rep_op) */    JS_ASSERT(c == cs->length);
2196: /* MUTANT (rep_op) */    JS_ASSERT(c != cs->length);
2197: /* MUTANT (del_stmt) */ /*     cs->u.bits[byteIndex] |= 1 << (c & 0x7); */ 
2197: /* MUTANT (rep_const) */    cs->u.bits[byteIndex] |= 0 << (c & 0x7);
2197: /* MUTANT (rep_const) */    cs->u.bits[byteIndex] |= -1 << (c & 0x7);
2197: /* MUTANT (rep_const) */    cs->u.bits[byteIndex] |= ((1)+1) << (c & 0x7);
2197: /* MUTANT (rep_const) */    cs->u.bits[byteIndex] |= 1 << (c & 1x7);
2197: /* MUTANT (rep_const) */    cs->u.bits[byteIndex] |= 1 << (c & -1x7);
2205: /* MUTANT (del_stmt) */ /*     uintN i; */ 
2207: /* MUTANT (del_stmt) */ /*     uintN byteIndex1 = (uintN)(c1 >> 3); */ 
2207: /* MUTANT (rep_const) */    uintN byteIndex1 = (uintN)(c1 >> 0);
2207: /* MUTANT (rep_const) */    uintN byteIndex1 = (uintN)(c1 >> 1);
2207: /* MUTANT (rep_const) */    uintN byteIndex1 = (uintN)(c1 >> -1);
2207: /* MUTANT (rep_const) */    uintN byteIndex1 = (uintN)(c1 >> ((3)+1));
2207: /* MUTANT (rep_const) */    uintN byteIndex1 = (uintN)(c1 >> ((3)-1));
2208: /* MUTANT (del_stmt) */ /*     uintN byteIndex2 = (uintN)(c2 >> 3); */ 
2208: /* MUTANT (rep_const) */    uintN byteIndex2 = (uintN)(c2 >> 0);
2208: /* MUTANT (rep_const) */    uintN byteIndex2 = (uintN)(c2 >> 1);
2208: /* MUTANT (rep_const) */    uintN byteIndex2 = (uintN)(c2 >> -1);
2208: /* MUTANT (rep_const) */    uintN byteIndex2 = (uintN)(c2 >> ((3)+1));
2208: /* MUTANT (rep_const) */    uintN byteIndex2 = (uintN)(c2 >> ((3)-1));
2210: /* MUTANT (del_stmt) */ /*     JS_ASSERT((c2 <= cs->length) && (c1 <= c2)); */ 
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 < cs->length) && (c1 <= c2));
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 > cs->length) && (c1 <= c2));
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 >= cs->length) && (c1 <= c2));
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 == cs->length) && (c1 <= c2));
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 != cs->length) && (c1 <= c2));
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 <= cs->length) || (c1 <= c2));
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 <= cs->length) && (c1 < c2));
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 <= cs->length) && (c1 > c2));
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 <= cs->length) && (c1 >= c2));
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 <= cs->length) && (c1 == c2));
2210: /* MUTANT (rep_op) */    JS_ASSERT((c2 <= cs->length) && (c1 != c2));
2212: /* MUTANT (del_stmt) */ /*     c1 &= 0x7; */ 
2212: /* MUTANT (rep_const) */    c1 &= 1x7;
2212: /* MUTANT (rep_const) */    c1 &= -1x7;
2213: /* MUTANT (del_stmt) */ /*     c2 &= 0x7; */ 
2213: /* MUTANT (rep_const) */    c2 &= 1x7;
2213: /* MUTANT (rep_const) */    c2 &= -1x7;
2215: /* MUTANT (rep_op) */    if (byteIndex1 != byteIndex2) {
2215: /* MUTANT (negate) */    if(! (byteIndex1 == byteIndex2)) {
2216: /* MUTANT (del_stmt) */ /*         cs->u.bits[byteIndex1] |= ((uint8)0xFF >> (7 - (c2 - c1))) << c1; */ 
2216: /* MUTANT (rep_const) */        cs->u.bits[byteIndex1] |= ((uint8)1xFF >> (7 - (c2 - c1))) << c1;
2216: /* MUTANT (rep_const) */        cs->u.bits[byteIndex1] |= ((uint8)-1xFF >> (7 - (c2 - c1))) << c1;
2216: /* MUTANT (rep_const) */        cs->u.bits[byteIndex1] |= ((uint8)0xFF >> (0 - (c2 - c1))) << c1;
2216: /* MUTANT (rep_const) */        cs->u.bits[byteIndex1] |= ((uint8)0xFF >> (1 - (c2 - c1))) << c1;
2216: /* MUTANT (rep_const) */        cs->u.bits[byteIndex1] |= ((uint8)0xFF >> (-1 - (c2 - c1))) << c1;
2216: /* MUTANT (rep_const) */        cs->u.bits[byteIndex1] |= ((uint8)0xFF >> (((7)+1) - (c2 - c1))) << c1;
2216: /* MUTANT (rep_const) */        cs->u.bits[byteIndex1] |= ((uint8)0xFF >> (((7)-1) - (c2 - c1))) << c1;
2218: /* MUTANT (del_stmt) */ /*         cs->u.bits[byteIndex1] |= 0xFF << c1; */ 
2218: /* MUTANT (rep_const) */        cs->u.bits[byteIndex1] |= 1xFF << c1;
2218: /* MUTANT (rep_const) */        cs->u.bits[byteIndex1] |= -1xFF << c1;
2219: /* MUTANT (rep_op) */        for (i = byteIndex1 - 1; i < byteIndex2; i++)
2219: /* MUTANT (rep_op) */        for (i = byteIndex1 * 1; i < byteIndex2; i++)
2219: /* MUTANT (rep_op) */        for (i = byteIndex1 % 1; i < byteIndex2; i++)
2219: /* MUTANT (rep_op) */        for (i = byteIndex1 + 1; i <= byteIndex2; i++)
2219: /* MUTANT (rep_op) */        for (i = byteIndex1 + 1; i > byteIndex2; i++)
2219: /* MUTANT (rep_op) */        for (i = byteIndex1 + 1; i >= byteIndex2; i++)
2219: /* MUTANT (rep_op) */        for (i = byteIndex1 + 1; i == byteIndex2; i++)
2219: /* MUTANT (rep_op) */        for (i = byteIndex1 + 1; i != byteIndex2; i++)
2219: /* MUTANT (rep_op) */        for (i = byteIndex1 + 1; i < byteIndex2; i--)
2219: /* MUTANT (rep_const) */        for (i = byteIndex1 + 0; i < byteIndex2; i++)
2219: /* MUTANT (rep_const) */        for (i = byteIndex1 + -1; i < byteIndex2; i++)
2219: /* MUTANT (rep_const) */        for (i = byteIndex1 + ((1)+1); i < byteIndex2; i++)
2220: /* MUTANT (rep_const) */            cs->u.bits[i] = 1xFF;
2220: /* MUTANT (rep_const) */            cs->u.bits[i] = -1xFF;
2221: /* MUTANT (del_stmt) */ /*         cs->u.bits[byteIndex2] |= (uint8)0xFF >> (7 - c2); */ 
2221: /* MUTANT (rep_const) */        cs->u.bits[byteIndex2] |= (uint8)1xFF >> (7 - c2);
2221: /* MUTANT (rep_const) */        cs->u.bits[byteIndex2] |= (uint8)-1xFF >> (7 - c2);
2221: /* MUTANT (rep_const) */        cs->u.bits[byteIndex2] |= (uint8)0xFF >> (0 - c2);
2221: /* MUTANT (rep_const) */        cs->u.bits[byteIndex2] |= (uint8)0xFF >> (1 - c2);
2221: /* MUTANT (rep_const) */        cs->u.bits[byteIndex2] |= (uint8)0xFF >> (-1 - c2);
2221: /* MUTANT (rep_const) */        cs->u.bits[byteIndex2] |= (uint8)0xFF >> (((7)+1) - c2);
2221: /* MUTANT (rep_const) */        cs->u.bits[byteIndex2] |= (uint8)0xFF >> (((7)-1) - c2);
2229: /* MUTANT (del_stmt) */ /*     const jschar *src, *end; */ 
2230: /* MUTANT (del_stmt) */ /*     JSBool inRange = JS_FALSE; */ 
2231: /* MUTANT (del_stmt) */ /*     jschar rangeStart = 0; */ 
2231: /* MUTANT (rep_const) */    jschar rangeStart = 1;
2231: /* MUTANT (rep_const) */    jschar rangeStart = -1;
2232: /* MUTANT (del_stmt) */ /*     uintN byteLength, n; */ 
2233: /* MUTANT (del_stmt) */ /*     jschar c, thisCh; */ 
2234: /* MUTANT (del_stmt) */ /*     intN nDigits, i; */ 
2236: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!charSet->converted); */ 
2241: /* MUTANT (del_stmt) */ /*     JS_ASSERT(1 <= charSet->u.src.startIndex); */ 
2241: /* MUTANT (rep_op) */    JS_ASSERT(1 < charSet->u.src.startIndex);
2241: /* MUTANT (rep_op) */    JS_ASSERT(1 > charSet->u.src.startIndex);
2241: /* MUTANT (rep_op) */    JS_ASSERT(1 >= charSet->u.src.startIndex);
2241: /* MUTANT (rep_op) */    JS_ASSERT(1 == charSet->u.src.startIndex);
2241: /* MUTANT (rep_op) */    JS_ASSERT(1 != charSet->u.src.startIndex);
2241: /* MUTANT (rep_const) */    JS_ASSERT(0 <= charSet->u.src.startIndex);
2241: /* MUTANT (rep_const) */    JS_ASSERT(-1 <= charSet->u.src.startIndex);
2241: /* MUTANT (rep_const) */    JS_ASSERT(((1)+1) <= charSet->u.src.startIndex);
2243: /* MUTANT (rep_op) */              <= JSSTRING_LENGTH(gData->regexp->source));
2243: /* MUTANT (rep_op) */              > JSSTRING_LENGTH(gData->regexp->source));
2243: /* MUTANT (rep_op) */              >= JSSTRING_LENGTH(gData->regexp->source));
2243: /* MUTANT (rep_op) */              == JSSTRING_LENGTH(gData->regexp->source));
2243: /* MUTANT (rep_op) */              != JSSTRING_LENGTH(gData->regexp->source));
2244: /* MUTANT (rep_op) */    JS_ASSERT(charSet->u.src.length < JSSTRING_LENGTH(gData->regexp->source)
2244: /* MUTANT (rep_op) */    JS_ASSERT(charSet->u.src.length > JSSTRING_LENGTH(gData->regexp->source)
2244: /* MUTANT (rep_op) */    JS_ASSERT(charSet->u.src.length >= JSSTRING_LENGTH(gData->regexp->source)
2244: /* MUTANT (rep_op) */    JS_ASSERT(charSet->u.src.length == JSSTRING_LENGTH(gData->regexp->source)
2244: /* MUTANT (rep_op) */    JS_ASSERT(charSet->u.src.length != JSSTRING_LENGTH(gData->regexp->source)
2245: /* MUTANT (rep_const) */                                       - 0 - charSet->u.src.startIndex);
2245: /* MUTANT (rep_const) */                                       - -1 - charSet->u.src.startIndex);
2245: /* MUTANT (rep_const) */                                       - ((1)+1) - charSet->u.src.startIndex);
2247: /* MUTANT (del_stmt) */ /*     charSet->converted = JS_TRUE; */ 
2248: /* MUTANT (del_stmt) */ /*     src = JSSTRING_CHARS(gData->regexp->source) + charSet->u.src.startIndex; */ 
2248: /* MUTANT (rep_op) */    src = JSSTRING_CHARS(gData->regexp->source) - charSet->u.src.startIndex;
2248: /* MUTANT (rep_op) */    src = JSSTRING_CHARS(gData->regexp->source) * charSet->u.src.startIndex;
2248: /* MUTANT (rep_op) */    src = JSSTRING_CHARS(gData->regexp->source) % charSet->u.src.startIndex;
2249: /* MUTANT (del_stmt) */ /*     end = src + charSet->u.src.length; */ 
2249: /* MUTANT (rep_op) */    end = src - charSet->u.src.length;
2249: /* MUTANT (rep_op) */    end = src * charSet->u.src.length;
2249: /* MUTANT (rep_op) */    end = src % charSet->u.src.length;
2250: /* MUTANT (del_stmt) */ /*     JS_ASSERT(src[-1] == '['); */ 
2250: /* MUTANT (rep_op) */    JS_ASSERT(src[-1] != '[');
2250: /* MUTANT (rep_const) */    JS_ASSERT(src[0] == '[');
2250: /* MUTANT (rep_const) */    JS_ASSERT(src[1] == '[');
2250: /* MUTANT (rep_const) */    JS_ASSERT(src[((-1)+1)] == '[');
2250: /* MUTANT (rep_const) */    JS_ASSERT(src[((-1)-1)] == '[');
2251: /* MUTANT (del_stmt) */ /*     JS_ASSERT(end[0] == ']'); */ 
2251: /* MUTANT (rep_op) */    JS_ASSERT(end[0] != ']');
2251: /* MUTANT (rep_const) */    JS_ASSERT(end[1] == ']');
2251: /* MUTANT (rep_const) */    JS_ASSERT(end[-1] == ']');
2253: /* MUTANT (del_stmt) */ /*     byteLength = (charSet->length >> 3) + 1; */ 
2253: /* MUTANT (rep_op) */    byteLength = (charSet->length >> 3) - 1;
2253: /* MUTANT (rep_op) */    byteLength = (charSet->length >> 3) * 1;
2253: /* MUTANT (rep_op) */    byteLength = (charSet->length >> 3) % 1;
2253: /* MUTANT (rep_const) */    byteLength = (charSet->length >> 0) + 1;
2253: /* MUTANT (rep_const) */    byteLength = (charSet->length >> 1) + 1;
2253: /* MUTANT (rep_const) */    byteLength = (charSet->length >> -1) + 1;
2253: /* MUTANT (rep_const) */    byteLength = (charSet->length >> ((3)+1)) + 1;
2253: /* MUTANT (rep_const) */    byteLength = (charSet->length >> ((3)-1)) + 1;
2253: /* MUTANT (rep_const) */    byteLength = (charSet->length >> 3) + 0;
2253: /* MUTANT (rep_const) */    byteLength = (charSet->length >> 3) + -1;
2253: /* MUTANT (rep_const) */    byteLength = (charSet->length >> 3) + ((1)+1);
2254: /* MUTANT (del_stmt) */ /*     charSet->u.bits = (uint8 *)JS_malloc(gData->cx, byteLength); */ 
2255: /* MUTANT (negate) */    if(! (!charSet->u.bits))
2257: /* MUTANT (del_stmt) */ /*     memset(charSet->u.bits, 0, byteLength); */ 
2257: /* MUTANT (rep_const) */    memset(charSet->u.bits, 1, byteLength);
2257: /* MUTANT (rep_const) */    memset(charSet->u.bits, -1, byteLength);
2259: /* MUTANT (rep_op) */    if (src != end)
2259: /* MUTANT (negate) */    if(! (src == end))
2262: /* MUTANT (rep_op) */    if (*src != '^') {
2262: /* MUTANT (negate) */    if(! (*src == '^')) {
2263: /* MUTANT (del_stmt) */ /*         JS_ASSERT(charSet->sense == JS_FALSE); */ 
2263: /* MUTANT (rep_op) */        JS_ASSERT(charSet->sense != JS_FALSE);
2264: /* MUTANT (del_stmt) */ /*         ++src; */ 
2264: /* MUTANT (rep_op) */        --src;
2266: /* MUTANT (del_stmt) */ /*         JS_ASSERT(charSet->sense == JS_TRUE); */ 
2266: /* MUTANT (rep_op) */        JS_ASSERT(charSet->sense != JS_TRUE);
2269: /* MUTANT (rep_op) */    while (src == end) {
2269: /* MUTANT (negate) */    while(! (src != end)) {
2272: /* MUTANT (rep_op) */            --src;
2273: /* MUTANT (del_stmt) */ /*             c = *src++; */ 
2273: /* MUTANT (rep_op) */            c = *src--;
2276: /* MUTANT (rep_const) */                thisCh = 1x8;
2276: /* MUTANT (rep_const) */                thisCh = -1x8;
2277: /* MUTANT (del_stmt) */ /*                 break; */ 
2279: /* MUTANT (rep_const) */                thisCh = 1xC;
2279: /* MUTANT (rep_const) */                thisCh = -1xC;
2280: /* MUTANT (del_stmt) */ /*                 break; */ 
2282: /* MUTANT (rep_const) */                thisCh = 1xA;
2282: /* MUTANT (rep_const) */                thisCh = -1xA;
2283: /* MUTANT (del_stmt) */ /*                 break; */ 
2285: /* MUTANT (rep_const) */                thisCh = 1xD;
2285: /* MUTANT (rep_const) */                thisCh = -1xD;
2286: /* MUTANT (del_stmt) */ /*                 break; */ 
2288: /* MUTANT (rep_const) */                thisCh = 1x9;
2288: /* MUTANT (rep_const) */                thisCh = -1x9;
2289: /* MUTANT (del_stmt) */ /*                 break; */ 
2291: /* MUTANT (rep_const) */                thisCh = 1xB;
2291: /* MUTANT (rep_const) */                thisCh = -1xB;
2292: /* MUTANT (del_stmt) */ /*                 break; */ 
2294: /* MUTANT (rep_op) */                if (src - 1 < end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_op) */                if (src * 1 < end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_op) */                if (src % 1 < end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_op) */                if (src + 1 <= end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_op) */                if (src + 1 > end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_op) */                if (src + 1 >= end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_op) */                if (src + 1 == end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_op) */                if (src + 1 != end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_op) */                if (src + 1 < end || JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_const) */                if (src + 0 < end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_const) */                if (src + -1 < end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_const) */                if (src + ((1)+1) < end && JS_ISWORD(src[1])) {
2294: /* MUTANT (rep_const) */                if (src + 1 < end && JS_ISWORD(src[0])) {
2294: /* MUTANT (rep_const) */                if (src + 1 < end && JS_ISWORD(src[-1])) {
2294: /* MUTANT (rep_const) */                if (src + 1 < end && JS_ISWORD(src[((1)+1)])) {
2294: /* MUTANT (negate) */                if(! (src + 1 < end && JS_ISWORD(src[1]))) {
2295: /* MUTANT (del_stmt) */ /*                     thisCh = (jschar)(*src++ & 0x1F); */ 
2295: /* MUTANT (rep_op) */                    thisCh = (jschar)(*src-- & 0x1F);
2295: /* MUTANT (rep_const) */                    thisCh = (jschar)(*src++ & 1x1F);
2295: /* MUTANT (rep_const) */                    thisCh = (jschar)(*src++ & -1x1F);
2297: /* MUTANT (del_stmt) */ /*                     --src; */ 
2297: /* MUTANT (rep_op) */                    ++src;
2298: /* MUTANT (del_stmt) */ /*                     thisCh = '\\'; */ 
2302: /* MUTANT (rep_const) */                nDigits = 0;
2302: /* MUTANT (rep_const) */                nDigits = 1;
2302: /* MUTANT (rep_const) */                nDigits = -1;
2302: /* MUTANT (rep_const) */                nDigits = ((2)+1);
2302: /* MUTANT (rep_const) */                nDigits = ((2)-1);
2303: /* MUTANT (del_stmt) */ /*                 goto lexHex; */ 
2305: /* MUTANT (rep_const) */                nDigits = 0;
2305: /* MUTANT (rep_const) */                nDigits = 1;
2305: /* MUTANT (rep_const) */                nDigits = -1;
2305: /* MUTANT (rep_const) */                nDigits = ((4)+1);
2305: /* MUTANT (rep_const) */                nDigits = ((4)-1);
2307: /* MUTANT (rep_const) */                n = 1;
2307: /* MUTANT (rep_const) */                n = -1;
2308: /* MUTANT (rep_op) */                for (i = 0; (i <= nDigits) && (src < end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i > nDigits) && (src < end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i >= nDigits) && (src < end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i == nDigits) && (src < end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i != nDigits) && (src < end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) || (src < end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src <= end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src > end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src >= end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src == end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src != end); i++) {
2308: /* MUTANT (rep_op) */                for (i = 0; (i < nDigits) && (src < end); i--) {
2308: /* MUTANT (rep_const) */                for (i = 1; (i < nDigits) && (src < end); i++) {
2308: /* MUTANT (rep_const) */                for (i = -1; (i < nDigits) && (src < end); i++) {
2309: /* MUTANT (del_stmt) */ /*                     uintN digit; */ 
2310: /* MUTANT (del_stmt) */ /*                     c = *src++; */ 
2310: /* MUTANT (rep_op) */                    c = *src--;
2311: /* MUTANT (negate) */                    if(! (!isASCIIHexDigit(c, &digit))) {
2316: /* MUTANT (del_stmt) */ /*                         src -= i + 1; */ 
2316: /* MUTANT (rep_op) */                        src += i + 1;
2316: /* MUTANT (rep_op) */                        src *= i + 1;
2316: /* MUTANT (rep_op) */                        src %= i + 1;
2316: /* MUTANT (rep_op) */                        src -= i - 1;
2316: /* MUTANT (rep_op) */                        src -= i * 1;
2316: /* MUTANT (rep_op) */                        src -= i % 1;
2316: /* MUTANT (rep_const) */                        src -= i + 0;
2316: /* MUTANT (rep_const) */                        src -= i + -1;
2316: /* MUTANT (rep_const) */                        src -= i + ((1)+1);
2317: /* MUTANT (del_stmt) */ /*                         n = '\\'; */ 
2318: /* MUTANT (del_stmt) */ /*                         break; */ 
2320: /* MUTANT (rep_op) */                    n = (n << 4) & digit;
2320: /* MUTANT (rep_const) */                    n = (n << 0) | digit;
2320: /* MUTANT (rep_const) */                    n = (n << 1) | digit;
2320: /* MUTANT (rep_const) */                    n = (n << -1) | digit;
2320: /* MUTANT (rep_const) */                    n = (n << ((4)+1)) | digit;
2320: /* MUTANT (rep_const) */                    n = (n << ((4)-1)) | digit;
2323: /* MUTANT (del_stmt) */ /*                 break; */ 
2324: /* MUTANT (rep_const) */            case '1':
2324: /* MUTANT (rep_const) */            case '-1':
2325: /* MUTANT (rep_const) */            case '0':
2325: /* MUTANT (rep_const) */            case '-1':
2325: /* MUTANT (rep_const) */            case '((1)+1)':
2326: /* MUTANT (rep_const) */            case '0':
2326: /* MUTANT (rep_const) */            case '1':
2326: /* MUTANT (rep_const) */            case '-1':
2326: /* MUTANT (rep_const) */            case '((2)+1)':
2326: /* MUTANT (rep_const) */            case '((2)-1)':
2327: /* MUTANT (rep_const) */            case '0':
2327: /* MUTANT (rep_const) */            case '1':
2327: /* MUTANT (rep_const) */            case '-1':
2327: /* MUTANT (rep_const) */            case '((3)+1)':
2327: /* MUTANT (rep_const) */            case '((3)-1)':
2328: /* MUTANT (rep_const) */            case '0':
2328: /* MUTANT (rep_const) */            case '1':
2328: /* MUTANT (rep_const) */            case '-1':
2328: /* MUTANT (rep_const) */            case '((4)+1)':
2328: /* MUTANT (rep_const) */            case '((4)-1)':
2329: /* MUTANT (rep_const) */            case '0':
2329: /* MUTANT (rep_const) */            case '1':
2329: /* MUTANT (rep_const) */            case '-1':
2329: /* MUTANT (rep_const) */            case '((5)+1)':
2329: /* MUTANT (rep_const) */            case '((5)-1)':
2330: /* MUTANT (rep_const) */            case '0':
2330: /* MUTANT (rep_const) */            case '1':
2330: /* MUTANT (rep_const) */            case '-1':
2330: /* MUTANT (rep_const) */            case '((6)+1)':
2330: /* MUTANT (rep_const) */            case '((6)-1)':
2331: /* MUTANT (rep_const) */            case '0':
2331: /* MUTANT (rep_const) */            case '1':
2331: /* MUTANT (rep_const) */            case '-1':
2331: /* MUTANT (rep_const) */            case '((7)+1)':
2331: /* MUTANT (rep_const) */            case '((7)-1)':
2338: /* MUTANT (del_stmt) */ /*                 c = *src; */ 
2339: /* MUTANT (rep_op) */                if ('0' < c && c <= '7') {
2339: /* MUTANT (rep_op) */                if ('0' > c && c <= '7') {
2339: /* MUTANT (rep_op) */                if ('0' >= c && c <= '7') {
2339: /* MUTANT (rep_op) */                if ('0' == c && c <= '7') {
2339: /* MUTANT (rep_op) */                if ('0' != c && c <= '7') {
2339: /* MUTANT (rep_op) */                if ('0' <= c || c <= '7') {
2339: /* MUTANT (rep_op) */                if ('0' <= c && c < '7') {
2339: /* MUTANT (rep_op) */                if ('0' <= c && c > '7') {
2339: /* MUTANT (rep_op) */                if ('0' <= c && c >= '7') {
2339: /* MUTANT (rep_op) */                if ('0' <= c && c == '7') {
2339: /* MUTANT (rep_op) */                if ('0' <= c && c != '7') {
2339: /* MUTANT (rep_const) */                if ('1' <= c && c <= '7') {
2339: /* MUTANT (rep_const) */                if ('-1' <= c && c <= '7') {
2339: /* MUTANT (rep_const) */                if ('0' <= c && c <= '0') {
2339: /* MUTANT (rep_const) */                if ('0' <= c && c <= '1') {
2339: /* MUTANT (rep_const) */                if ('0' <= c && c <= '-1') {
2339: /* MUTANT (rep_const) */                if ('0' <= c && c <= '((7)+1)') {
2339: /* MUTANT (rep_const) */                if ('0' <= c && c <= '((7)-1)') {
2339: /* MUTANT (negate) */                if(! ('0' <= c && c <= '7')) {
2340: /* MUTANT (del_stmt) */ /*                     src++; */ 
2340: /* MUTANT (rep_op) */                    src--;
2341: /* MUTANT (del_stmt) */ /*                     n = 8 * n + JS7_UNDEC(c); */ 
2341: /* MUTANT (rep_op) */                    n = 8 * n - JS7_UNDEC(c);
2341: /* MUTANT (rep_op) */                    n = 8 * n * JS7_UNDEC(c);
2341: /* MUTANT (rep_op) */                    n = 8 * n % JS7_UNDEC(c);
2341: /* MUTANT (rep_const) */                    n = 0 * n + JS7_UNDEC(c);
2341: /* MUTANT (rep_const) */                    n = 1 * n + JS7_UNDEC(c);
2341: /* MUTANT (rep_const) */                    n = -1 * n + JS7_UNDEC(c);
2341: /* MUTANT (rep_const) */                    n = ((8)+1) * n + JS7_UNDEC(c);
2341: /* MUTANT (rep_const) */                    n = ((8)-1) * n + JS7_UNDEC(c);
2342: /* MUTANT (del_stmt) */ /*                     c = *src; */ 
2343: /* MUTANT (rep_op) */                    if ('0' < c && c <= '7') {
2343: /* MUTANT (rep_op) */                    if ('0' > c && c <= '7') {
2343: /* MUTANT (rep_op) */                    if ('0' >= c && c <= '7') {
2343: /* MUTANT (rep_op) */                    if ('0' == c && c <= '7') {
2343: /* MUTANT (rep_op) */                    if ('0' != c && c <= '7') {
2343: /* MUTANT (rep_op) */                    if ('0' <= c || c <= '7') {
2343: /* MUTANT (rep_op) */                    if ('0' <= c && c < '7') {
2343: /* MUTANT (rep_op) */                    if ('0' <= c && c > '7') {
2343: /* MUTANT (rep_op) */                    if ('0' <= c && c >= '7') {
2343: /* MUTANT (rep_op) */                    if ('0' <= c && c == '7') {
2343: /* MUTANT (rep_op) */                    if ('0' <= c && c != '7') {
2343: /* MUTANT (rep_const) */                    if ('1' <= c && c <= '7') {
2343: /* MUTANT (rep_const) */                    if ('-1' <= c && c <= '7') {
2343: /* MUTANT (rep_const) */                    if ('0' <= c && c <= '0') {
2343: /* MUTANT (rep_const) */                    if ('0' <= c && c <= '1') {
2343: /* MUTANT (rep_const) */                    if ('0' <= c && c <= '-1') {
2343: /* MUTANT (rep_const) */                    if ('0' <= c && c <= '((7)+1)') {
2343: /* MUTANT (rep_const) */                    if ('0' <= c && c <= '((7)-1)') {
2343: /* MUTANT (negate) */                    if(! ('0' <= c && c <= '7')) {
2344: /* MUTANT (del_stmt) */ /*                         src++; */ 
2344: /* MUTANT (rep_op) */                        src--;
2345: /* MUTANT (del_stmt) */ /*                         i = 8 * n + JS7_UNDEC(c); */ 
2345: /* MUTANT (rep_op) */                        i = 8 * n - JS7_UNDEC(c);
2345: /* MUTANT (rep_op) */                        i = 8 * n * JS7_UNDEC(c);
2345: /* MUTANT (rep_op) */                        i = 8 * n % JS7_UNDEC(c);
2345: /* MUTANT (rep_const) */                        i = 0 * n + JS7_UNDEC(c);
2345: /* MUTANT (rep_const) */                        i = 1 * n + JS7_UNDEC(c);
2345: /* MUTANT (rep_const) */                        i = -1 * n + JS7_UNDEC(c);
2345: /* MUTANT (rep_const) */                        i = ((8)+1) * n + JS7_UNDEC(c);
2345: /* MUTANT (rep_const) */                        i = ((8)-1) * n + JS7_UNDEC(c);
2346: /* MUTANT (rep_op) */                        if (i < 0377)
2346: /* MUTANT (rep_op) */                        if (i > 0377)
2346: /* MUTANT (rep_op) */                        if (i >= 0377)
2346: /* MUTANT (rep_op) */                        if (i == 0377)
2346: /* MUTANT (rep_op) */                        if (i != 0377)
2346: /* MUTANT (rep_const) */                        if (i <= 0)
2346: /* MUTANT (rep_const) */                        if (i <= 1)
2346: /* MUTANT (rep_const) */                        if (i <= -1)
2346: /* MUTANT (rep_const) */                        if (i <= ((0377)+1))
2346: /* MUTANT (rep_const) */                        if (i <= ((0377)-1))
2346: /* MUTANT (negate) */                        if(! (i <= 0377))
2349: /* MUTANT (rep_op) */                            src++;
2353: /* MUTANT (del_stmt) */ /*                 break; */ 
2356: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, '1', '9');
2356: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, '-1', '9');
2356: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, '0', '0');
2356: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, '0', '1');
2356: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, '0', '-1');
2356: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, '0', '((9)+1)');
2356: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, '0', '((9)-1)');
2357: /* MUTANT (del_stmt) */ /*                 continue; */    /* don't need range processing */
2359: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, 1, '0' - 1);
2359: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, -1, '0' - 1);
2359: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, 0, '1' - 1);
2359: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, 0, '-1' - 1);
2359: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, 0, '0' - 0);
2359: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, 0, '0' - -1);
2359: /* MUTANT (rep_const) */                AddCharacterRangeToCharSet(charSet, 0, '0' - ((1)+1));
2361: /* MUTANT (rep_op) */                                           (jschar)('9' - 1),
2361: /* MUTANT (rep_op) */                                           (jschar)('9' * 1),
2361: /* MUTANT (rep_op) */                                           (jschar)('9' % 1),
2361: /* MUTANT (rep_const) */                                           (jschar)('0' + 1),
2361: /* MUTANT (rep_const) */                                           (jschar)('1' + 1),
2361: /* MUTANT (rep_const) */                                           (jschar)('-1' + 1),
2361: /* MUTANT (rep_const) */                                           (jschar)('((9)+1)' + 1),
2361: /* MUTANT (rep_const) */                                           (jschar)('((9)-1)' + 1),
2361: /* MUTANT (rep_const) */                                           (jschar)('9' + 0),
2361: /* MUTANT (rep_const) */                                           (jschar)('9' + -1),
2361: /* MUTANT (rep_const) */                                           (jschar)('9' + ((1)+1)),
2363: /* MUTANT (del_stmt) */ /*                 continue; */ 
2365: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i <= 0; i--)
2365: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i < 0; i--)
2365: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i > 0; i--)
2365: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i == 0; i--)
2365: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i != 0; i--)
2365: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i >= 0; i++)
2365: /* MUTANT (rep_const) */                for (i = (intN)charSet->length; i >= 1; i--)
2365: /* MUTANT (rep_const) */                for (i = (intN)charSet->length; i >= -1; i--)
2366: /* MUTANT (negate) */                    if(! (JS_ISSPACE(i)))
2368: /* MUTANT (del_stmt) */ /*                 continue; */ 
2370: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i <= 0; i--)
2370: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i < 0; i--)
2370: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i > 0; i--)
2370: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i == 0; i--)
2370: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i != 0; i--)
2370: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i >= 0; i++)
2370: /* MUTANT (rep_const) */                for (i = (intN)charSet->length; i >= 1; i--)
2370: /* MUTANT (rep_const) */                for (i = (intN)charSet->length; i >= -1; i--)
2371: /* MUTANT (negate) */                    if(! (!JS_ISSPACE(i)))
2373: /* MUTANT (del_stmt) */ /*                 continue; */ 
2375: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i <= 0; i--)
2375: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i < 0; i--)
2375: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i > 0; i--)
2375: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i == 0; i--)
2375: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i != 0; i--)
2375: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i >= 0; i++)
2375: /* MUTANT (rep_const) */                for (i = (intN)charSet->length; i >= 1; i--)
2375: /* MUTANT (rep_const) */                for (i = (intN)charSet->length; i >= -1; i--)
2376: /* MUTANT (negate) */                    if(! (JS_ISWORD(i)))
2378: /* MUTANT (del_stmt) */ /*                 continue; */ 
2380: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i <= 0; i--)
2380: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i < 0; i--)
2380: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i > 0; i--)
2380: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i == 0; i--)
2380: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i != 0; i--)
2380: /* MUTANT (rep_op) */                for (i = (intN)charSet->length; i >= 0; i++)
2380: /* MUTANT (rep_const) */                for (i = (intN)charSet->length; i >= 1; i--)
2380: /* MUTANT (rep_const) */                for (i = (intN)charSet->length; i >= -1; i--)
2381: /* MUTANT (negate) */                    if(! (!JS_ISWORD(i)))
2383: /* MUTANT (del_stmt) */ /*                 continue; */ 
2386: /* MUTANT (del_stmt) */ /*                 break; */ 
2392: /* MUTANT (rep_op) */            thisCh = *src--;
2393: /* MUTANT (del_stmt) */ /*             break; */ 
2396: /* MUTANT (negate) */        if(! (inRange)) {
2397: /* MUTANT (negate) */            if(! (gData->regexp->flags & JSREG_FOLD)) {
2403: /* MUTANT (del_stmt) */ /*                 AddCharacterRangeToCharSet(charSet, rangeStart, thisCh); */ 
2407: /* MUTANT (negate) */            if(! (gData->regexp->flags & JSREG_FOLD)) {
2408: /* MUTANT (del_stmt) */ /*                 AddCharacterToCharSet(charSet, upcase(thisCh)); */ 
2409: /* MUTANT (del_stmt) */ /*                 AddCharacterToCharSet(charSet, downcase(thisCh)); */ 
2411: /* MUTANT (del_stmt) */ /*                 AddCharacterToCharSet(charSet, thisCh); */ 
2413: /* MUTANT (rep_op) */            if (src <= end - 1) {
2413: /* MUTANT (rep_op) */            if (src > end - 1) {
2413: /* MUTANT (rep_op) */            if (src >= end - 1) {
2413: /* MUTANT (rep_op) */            if (src == end - 1) {
2413: /* MUTANT (rep_op) */            if (src != end - 1) {
2413: /* MUTANT (rep_const) */            if (src < end - 0) {
2413: /* MUTANT (rep_const) */            if (src < end - -1) {
2413: /* MUTANT (rep_const) */            if (src < end - ((1)+1)) {
2413: /* MUTANT (negate) */            if(! (src < end - 1)) {
2414: /* MUTANT (rep_op) */                if (*src != '-') {
2414: /* MUTANT (negate) */                if(! (*src == '-')) {
2415: /* MUTANT (del_stmt) */ /*                     ++src; */ 
2415: /* MUTANT (rep_op) */                    --src;
2416: /* MUTANT (del_stmt) */ /*                     inRange = JS_TRUE; */ 
2417: /* MUTANT (del_stmt) */ /*                     rangeStart = thisCh; */ 
2428: /* MUTANT (rep_op) */    if (JS_ATOMIC_DECREMENT(&re->nrefs) != 0) {
2428: /* MUTANT (rep_const) */    if (JS_ATOMIC_DECREMENT(&re->nrefs) == 1) {
2428: /* MUTANT (rep_const) */    if (JS_ATOMIC_DECREMENT(&re->nrefs) == -1) {
2428: /* MUTANT (negate) */    if(! (JS_ATOMIC_DECREMENT(&re->nrefs) == 0)) {
2429: /* MUTANT (negate) */        if(! (re->classList)) {
2430: /* MUTANT (del_stmt) */ /*             uintN i; */ 
2431: /* MUTANT (rep_op) */            for (i = 0; i <= re->classCount; i++) {
2431: /* MUTANT (rep_op) */            for (i = 0; i > re->classCount; i++) {
2431: /* MUTANT (rep_op) */            for (i = 0; i >= re->classCount; i++) {
2431: /* MUTANT (rep_op) */            for (i = 0; i == re->classCount; i++) {
2431: /* MUTANT (rep_op) */            for (i = 0; i != re->classCount; i++) {
2431: /* MUTANT (rep_op) */            for (i = 0; i < re->classCount; i--) {
2431: /* MUTANT (rep_const) */            for (i = 1; i < re->classCount; i++) {
2431: /* MUTANT (rep_const) */            for (i = -1; i < re->classCount; i++) {
2432: /* MUTANT (negate) */                if(! (re->classList[i].converted))
2434: /* MUTANT (del_stmt) */ /*                 re->classList[i].u.bits = NULL; */ 
2445: /* MUTANT (del_stmt) */ /*     size_t limit = gData->stateStackLimit; */ 
2446: /* MUTANT (del_stmt) */ /*     size_t sz = sizeof(REProgState) * limit; */ 
2448: /* MUTANT (del_stmt) */ /*     JS_ARENA_GROW_CAST(gData->stateStack, REProgState *, &gData->pool, sz, sz); */ 
2449: /* MUTANT (negate) */    if(! (!gData->stateStack)) {
2450: /* MUTANT (del_stmt) */ /*         gData->ok = JS_FALSE; */ 
2451: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
2453: /* MUTANT (rep_op) */    gData->stateStackLimit = limit - limit;
2453: /* MUTANT (rep_op) */    gData->stateStackLimit = limit * limit;
2453: /* MUTANT (rep_op) */    gData->stateStackLimit = limit % limit;
2454: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
2459: /* MUTANT (rep_op) */        --(data)->stateStackTop;                                              \
2460: /* MUTANT (rep_op) */        if ((data)->stateStackTop != (data)->stateStackLimit &&               \
2460: /* MUTANT (rep_op) */        if ((data)->stateStackTop == (data)->stateStackLimit ||               \
2475: /* MUTANT (del_stmt) */ /*     REMatchState *result = NULL; */ 
2476: /* MUTANT (del_stmt) */ /*     jschar matchCh; */ 
2477: /* MUTANT (del_stmt) */ /*     size_t parenIndex; */ 
2478: /* MUTANT (del_stmt) */ /*     size_t offset, length, index; */ 
2479: /* MUTANT (del_stmt) */ /*     jsbytecode *pc = *startpc; */   /* pc has already been incremented past op */
2480: /* MUTANT (del_stmt) */ /*     jschar *source; */ 
2481: /* MUTANT (del_stmt) */ /*     const jschar *startcp = x->cp; */ 
2482: /* MUTANT (del_stmt) */ /*     jschar ch; */ 
2483: /* MUTANT (del_stmt) */ /*     RECharSet *charSet; */ 
2487: /* MUTANT (rep_op) */        if (x->cp == gData->cpbegin) {
2487: /* MUTANT (negate) */        if(! (x->cp != gData->cpbegin)) {
2488: /* MUTANT (rep_op) */            if (!gData->cx->regExpStatics.multiline ||
2490: /* MUTANT (del_stmt) */ /*                 break; */ 
2492: /* MUTANT (rep_const) */            if (!RE_IS_LINE_TERM(x->cp[0]))
2492: /* MUTANT (rep_const) */            if (!RE_IS_LINE_TERM(x->cp[1]))
2492: /* MUTANT (rep_const) */            if (!RE_IS_LINE_TERM(x->cp[((-1)+1)]))
2492: /* MUTANT (rep_const) */            if (!RE_IS_LINE_TERM(x->cp[((-1)-1)]))
2492: /* MUTANT (negate) */            if(! (!RE_IS_LINE_TERM(x->cp[-1])))
2496: /* MUTANT (del_stmt) */ /*         break; */ 
2498: /* MUTANT (rep_op) */        if (x->cp == gData->cpend) {
2498: /* MUTANT (negate) */        if(! (x->cp != gData->cpend)) {
2499: /* MUTANT (rep_op) */            if (!gData->cx->regExpStatics.multiline ||
2501: /* MUTANT (del_stmt) */ /*                 break; */ 
2503: /* MUTANT (negate) */            if(! (!RE_IS_LINE_TERM(*x->cp)))
2507: /* MUTANT (del_stmt) */ /*         break; */ 
2509: /* MUTANT (rep_op) */        if ((x->cp != gData->cpbegin || !JS_ISWORD(x->cp[-1])) ^
2509: /* MUTANT (rep_op) */        if ((x->cp == gData->cpbegin && !JS_ISWORD(x->cp[-1])) ^
2509: /* MUTANT (rep_const) */        if ((x->cp == gData->cpbegin || !JS_ISWORD(x->cp[0])) ^
2509: /* MUTANT (rep_const) */        if ((x->cp == gData->cpbegin || !JS_ISWORD(x->cp[1])) ^
2509: /* MUTANT (rep_const) */        if ((x->cp == gData->cpbegin || !JS_ISWORD(x->cp[((-1)+1)])) ^
2509: /* MUTANT (rep_const) */        if ((x->cp == gData->cpbegin || !JS_ISWORD(x->cp[((-1)-1)])) ^
2510: /* MUTANT (rep_op) */            !(x->cp == gData->cpend && JS_ISWORD(*x->cp))) {
2510: /* MUTANT (rep_op) */            !(x->cp != gData->cpend || JS_ISWORD(*x->cp))) {
2511: /* MUTANT (del_stmt) */ /*             result = x; */ 
2515: /* MUTANT (rep_op) */        if ((x->cp != gData->cpbegin || !JS_ISWORD(x->cp[-1])) ^
2515: /* MUTANT (rep_op) */        if ((x->cp == gData->cpbegin && !JS_ISWORD(x->cp[-1])) ^
2515: /* MUTANT (rep_const) */        if ((x->cp == gData->cpbegin || !JS_ISWORD(x->cp[0])) ^
2515: /* MUTANT (rep_const) */        if ((x->cp == gData->cpbegin || !JS_ISWORD(x->cp[1])) ^
2515: /* MUTANT (rep_const) */        if ((x->cp == gData->cpbegin || !JS_ISWORD(x->cp[((-1)+1)])) ^
2515: /* MUTANT (rep_const) */        if ((x->cp == gData->cpbegin || !JS_ISWORD(x->cp[((-1)-1)])) ^
2516: /* MUTANT (rep_op) */            (x->cp == gData->cpend && JS_ISWORD(*x->cp))) {
2516: /* MUTANT (rep_op) */            (x->cp != gData->cpend || JS_ISWORD(*x->cp))) {
2517: /* MUTANT (del_stmt) */ /*             result = x; */ 
2521: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && !RE_IS_LINE_TERM(*x->cp)) {
2521: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || !RE_IS_LINE_TERM(*x->cp)) {
2521: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && !RE_IS_LINE_TERM(*x->cp))) {
2522: /* MUTANT (del_stmt) */ /*             result = x; */ 
2523: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2523: /* MUTANT (rep_op) */            result->cp--;
2527: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && JS_ISDIGIT(*x->cp)) {
2527: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || JS_ISDIGIT(*x->cp)) {
2527: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && JS_ISDIGIT(*x->cp))) {
2528: /* MUTANT (del_stmt) */ /*             result = x; */ 
2529: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2529: /* MUTANT (rep_op) */            result->cp--;
2533: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && !JS_ISDIGIT(*x->cp)) {
2533: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || !JS_ISDIGIT(*x->cp)) {
2533: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && !JS_ISDIGIT(*x->cp))) {
2534: /* MUTANT (del_stmt) */ /*             result = x; */ 
2535: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2535: /* MUTANT (rep_op) */            result->cp--;
2539: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && JS_ISWORD(*x->cp)) {
2539: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || JS_ISWORD(*x->cp)) {
2539: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && JS_ISWORD(*x->cp))) {
2540: /* MUTANT (del_stmt) */ /*             result = x; */ 
2541: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2541: /* MUTANT (rep_op) */            result->cp--;
2545: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && !JS_ISWORD(*x->cp)) {
2545: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || !JS_ISWORD(*x->cp)) {
2545: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && !JS_ISWORD(*x->cp))) {
2546: /* MUTANT (del_stmt) */ /*             result = x; */ 
2547: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2547: /* MUTANT (rep_op) */            result->cp--;
2551: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && JS_ISSPACE(*x->cp)) {
2551: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || JS_ISSPACE(*x->cp)) {
2551: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && JS_ISSPACE(*x->cp))) {
2552: /* MUTANT (del_stmt) */ /*             result = x; */ 
2553: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2553: /* MUTANT (rep_op) */            result->cp--;
2557: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && !JS_ISSPACE(*x->cp)) {
2557: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || !JS_ISSPACE(*x->cp)) {
2557: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && !JS_ISSPACE(*x->cp))) {
2558: /* MUTANT (del_stmt) */ /*             result = x; */ 
2559: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2559: /* MUTANT (rep_op) */            result->cp--;
2564: /* MUTANT (del_stmt) */ /*         JS_ASSERT(parenIndex < gData->regexp->parenCount); */ 
2564: /* MUTANT (rep_op) */        JS_ASSERT(parenIndex <= gData->regexp->parenCount);
2564: /* MUTANT (rep_op) */        JS_ASSERT(parenIndex > gData->regexp->parenCount);
2564: /* MUTANT (rep_op) */        JS_ASSERT(parenIndex >= gData->regexp->parenCount);
2564: /* MUTANT (rep_op) */        JS_ASSERT(parenIndex == gData->regexp->parenCount);
2564: /* MUTANT (rep_op) */        JS_ASSERT(parenIndex != gData->regexp->parenCount);
2565: /* MUTANT (del_stmt) */ /*         result = BackrefMatcher(gData, x, parenIndex); */ 
2566: /* MUTANT (del_stmt) */ /*         break; */ 
2569: /* MUTANT (del_stmt) */ /*         JS_ASSERT(offset < JSSTRING_LENGTH(gData->regexp->source)); */ 
2569: /* MUTANT (rep_op) */        JS_ASSERT(offset <= JSSTRING_LENGTH(gData->regexp->source));
2569: /* MUTANT (rep_op) */        JS_ASSERT(offset > JSSTRING_LENGTH(gData->regexp->source));
2569: /* MUTANT (rep_op) */        JS_ASSERT(offset >= JSSTRING_LENGTH(gData->regexp->source));
2569: /* MUTANT (rep_op) */        JS_ASSERT(offset == JSSTRING_LENGTH(gData->regexp->source));
2569: /* MUTANT (rep_op) */        JS_ASSERT(offset != JSSTRING_LENGTH(gData->regexp->source));
2570: /* MUTANT (del_stmt) */ /*         pc = ReadCompactIndex(pc, &length); */ 
2571: /* MUTANT (del_stmt) */ /*         JS_ASSERT(1 <= length); */ 
2571: /* MUTANT (rep_op) */        JS_ASSERT(1 < length);
2571: /* MUTANT (rep_op) */        JS_ASSERT(1 > length);
2571: /* MUTANT (rep_op) */        JS_ASSERT(1 >= length);
2571: /* MUTANT (rep_op) */        JS_ASSERT(1 == length);
2571: /* MUTANT (rep_op) */        JS_ASSERT(1 != length);
2571: /* MUTANT (rep_const) */        JS_ASSERT(0 <= length);
2571: /* MUTANT (rep_const) */        JS_ASSERT(-1 <= length);
2571: /* MUTANT (rep_const) */        JS_ASSERT(((1)+1) <= length);
2572: /* MUTANT (del_stmt) */ /*         JS_ASSERT(length <= JSSTRING_LENGTH(gData->regexp->source) - offset); */ 
2572: /* MUTANT (rep_op) */        JS_ASSERT(length < JSSTRING_LENGTH(gData->regexp->source) - offset);
2572: /* MUTANT (rep_op) */        JS_ASSERT(length > JSSTRING_LENGTH(gData->regexp->source) - offset);
2572: /* MUTANT (rep_op) */        JS_ASSERT(length >= JSSTRING_LENGTH(gData->regexp->source) - offset);
2572: /* MUTANT (rep_op) */        JS_ASSERT(length == JSSTRING_LENGTH(gData->regexp->source) - offset);
2572: /* MUTANT (rep_op) */        JS_ASSERT(length != JSSTRING_LENGTH(gData->regexp->source) - offset);
2573: /* MUTANT (rep_op) */        if (length < (size_t)(gData->cpend - x->cp)) {
2573: /* MUTANT (rep_op) */        if (length > (size_t)(gData->cpend - x->cp)) {
2573: /* MUTANT (rep_op) */        if (length >= (size_t)(gData->cpend - x->cp)) {
2573: /* MUTANT (rep_op) */        if (length == (size_t)(gData->cpend - x->cp)) {
2573: /* MUTANT (rep_op) */        if (length != (size_t)(gData->cpend - x->cp)) {
2573: /* MUTANT (negate) */        if(! (length <= (size_t)(gData->cpend - x->cp))) {
2574: /* MUTANT (del_stmt) */ /*             source = JSSTRING_CHARS(gData->regexp->source) + offset; */ 
2574: /* MUTANT (rep_op) */            source = JSSTRING_CHARS(gData->regexp->source) - offset;
2574: /* MUTANT (rep_op) */            source = JSSTRING_CHARS(gData->regexp->source) * offset;
2574: /* MUTANT (rep_op) */            source = JSSTRING_CHARS(gData->regexp->source) % offset;
2575: /* MUTANT (rep_op) */            for (index = 0; index == length; index++) {
2575: /* MUTANT (rep_op) */            for (index = 0; index != length; index--) {
2575: /* MUTANT (rep_const) */            for (index = 1; index != length; index++) {
2575: /* MUTANT (rep_const) */            for (index = -1; index != length; index++) {
2576: /* MUTANT (rep_op) */                if (source[index] == x->cp[index])
2576: /* MUTANT (negate) */                if(! (source[index] != x->cp[index]))
2579: /* MUTANT (rep_op) */            x->cp -= length;
2579: /* MUTANT (rep_op) */            x->cp *= length;
2579: /* MUTANT (rep_op) */            x->cp %= length;
2580: /* MUTANT (del_stmt) */ /*             result = x; */ 
2584: /* MUTANT (rep_op) */        matchCh = *pc--;
2585: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && *x->cp == matchCh) {
2585: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || *x->cp == matchCh) {
2585: /* MUTANT (rep_op) */        if (x->cp != gData->cpend && *x->cp != matchCh) {
2585: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && *x->cp == matchCh)) {
2586: /* MUTANT (del_stmt) */ /*             result = x; */ 
2587: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2587: /* MUTANT (rep_op) */            result->cp--;
2592: /* MUTANT (del_stmt) */ /*         JS_ASSERT(offset < JSSTRING_LENGTH(gData->regexp->source)); */ 
2592: /* MUTANT (rep_op) */        JS_ASSERT(offset <= JSSTRING_LENGTH(gData->regexp->source));
2592: /* MUTANT (rep_op) */        JS_ASSERT(offset > JSSTRING_LENGTH(gData->regexp->source));
2592: /* MUTANT (rep_op) */        JS_ASSERT(offset >= JSSTRING_LENGTH(gData->regexp->source));
2592: /* MUTANT (rep_op) */        JS_ASSERT(offset == JSSTRING_LENGTH(gData->regexp->source));
2592: /* MUTANT (rep_op) */        JS_ASSERT(offset != JSSTRING_LENGTH(gData->regexp->source));
2593: /* MUTANT (del_stmt) */ /*         pc = ReadCompactIndex(pc, &length); */ 
2594: /* MUTANT (del_stmt) */ /*         JS_ASSERT(1 <= length); */ 
2594: /* MUTANT (rep_op) */        JS_ASSERT(1 < length);
2594: /* MUTANT (rep_op) */        JS_ASSERT(1 > length);
2594: /* MUTANT (rep_op) */        JS_ASSERT(1 >= length);
2594: /* MUTANT (rep_op) */        JS_ASSERT(1 == length);
2594: /* MUTANT (rep_op) */        JS_ASSERT(1 != length);
2594: /* MUTANT (rep_const) */        JS_ASSERT(0 <= length);
2594: /* MUTANT (rep_const) */        JS_ASSERT(-1 <= length);
2594: /* MUTANT (rep_const) */        JS_ASSERT(((1)+1) <= length);
2595: /* MUTANT (del_stmt) */ /*         JS_ASSERT(length <= JSSTRING_LENGTH(gData->regexp->source) - offset); */ 
2595: /* MUTANT (rep_op) */        JS_ASSERT(length < JSSTRING_LENGTH(gData->regexp->source) - offset);
2595: /* MUTANT (rep_op) */        JS_ASSERT(length > JSSTRING_LENGTH(gData->regexp->source) - offset);
2595: /* MUTANT (rep_op) */        JS_ASSERT(length >= JSSTRING_LENGTH(gData->regexp->source) - offset);
2595: /* MUTANT (rep_op) */        JS_ASSERT(length == JSSTRING_LENGTH(gData->regexp->source) - offset);
2595: /* MUTANT (rep_op) */        JS_ASSERT(length != JSSTRING_LENGTH(gData->regexp->source) - offset);
2596: /* MUTANT (del_stmt) */ /*         source = JSSTRING_CHARS(gData->regexp->source); */ 
2597: /* MUTANT (del_stmt) */ /*         result = FlatNIMatcher(gData, x, source + offset, length); */ 
2597: /* MUTANT (rep_op) */        result = FlatNIMatcher(gData, x, source - offset, length);
2597: /* MUTANT (rep_op) */        result = FlatNIMatcher(gData, x, source * offset, length);
2597: /* MUTANT (rep_op) */        result = FlatNIMatcher(gData, x, source % offset, length);
2598: /* MUTANT (del_stmt) */ /*         break; */ 
2600: /* MUTANT (rep_op) */        matchCh = *pc--;
2601: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && upcase(*x->cp) == upcase(matchCh)) {
2601: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || upcase(*x->cp) == upcase(matchCh)) {
2601: /* MUTANT (rep_op) */        if (x->cp != gData->cpend && upcase(*x->cp) != upcase(matchCh)) {
2601: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && upcase(*x->cp) == upcase(matchCh))) {
2602: /* MUTANT (del_stmt) */ /*             result = x; */ 
2603: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2603: /* MUTANT (rep_op) */            result->cp--;
2608: /* MUTANT (del_stmt) */ /*         pc += ARG_LEN; */ 
2608: /* MUTANT (rep_op) */        pc -= ARG_LEN;
2608: /* MUTANT (rep_op) */        pc *= ARG_LEN;
2608: /* MUTANT (rep_op) */        pc %= ARG_LEN;
2609: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && *x->cp == matchCh) {
2609: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || *x->cp == matchCh) {
2609: /* MUTANT (rep_op) */        if (x->cp != gData->cpend && *x->cp != matchCh) {
2609: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && *x->cp == matchCh)) {
2610: /* MUTANT (del_stmt) */ /*             result = x; */ 
2611: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2611: /* MUTANT (rep_op) */            result->cp--;
2616: /* MUTANT (del_stmt) */ /*         pc += ARG_LEN; */ 
2616: /* MUTANT (rep_op) */        pc -= ARG_LEN;
2616: /* MUTANT (rep_op) */        pc *= ARG_LEN;
2616: /* MUTANT (rep_op) */        pc %= ARG_LEN;
2617: /* MUTANT (rep_op) */        if (x->cp == gData->cpend && upcase(*x->cp) == upcase(matchCh)) {
2617: /* MUTANT (rep_op) */        if (x->cp != gData->cpend || upcase(*x->cp) == upcase(matchCh)) {
2617: /* MUTANT (rep_op) */        if (x->cp != gData->cpend && upcase(*x->cp) != upcase(matchCh)) {
2617: /* MUTANT (negate) */        if(! (x->cp != gData->cpend && upcase(*x->cp) == upcase(matchCh))) {
2618: /* MUTANT (del_stmt) */ /*             result = x; */ 
2619: /* MUTANT (del_stmt) */ /*             result->cp++; */ 
2619: /* MUTANT (rep_op) */            result->cp--;
2624: /* MUTANT (del_stmt) */ /*         JS_ASSERT(index < gData->regexp->classCount); */ 
2624: /* MUTANT (rep_op) */        JS_ASSERT(index <= gData->regexp->classCount);
2624: /* MUTANT (rep_op) */        JS_ASSERT(index > gData->regexp->classCount);
2624: /* MUTANT (rep_op) */        JS_ASSERT(index >= gData->regexp->classCount);
2624: /* MUTANT (rep_op) */        JS_ASSERT(index == gData->regexp->classCount);
2624: /* MUTANT (rep_op) */        JS_ASSERT(index != gData->regexp->classCount);
2625: /* MUTANT (rep_op) */        if (x->cp == gData->cpend) {
2625: /* MUTANT (negate) */        if(! (x->cp != gData->cpend)) {
2626: /* MUTANT (del_stmt) */ /*             charSet = &gData->regexp->classList[index]; */ 
2627: /* MUTANT (del_stmt) */ /*             JS_ASSERT(charSet->converted); */ 
2628: /* MUTANT (del_stmt) */ /*             ch = *x->cp; */ 
2629: /* MUTANT (del_stmt) */ /*             index = ch >> 3; */ 
2629: /* MUTANT (rep_const) */            index = ch >> 0;
2629: /* MUTANT (rep_const) */            index = ch >> 1;
2629: /* MUTANT (rep_const) */            index = ch >> -1;
2629: /* MUTANT (rep_const) */            index = ch >> ((3)+1);
2629: /* MUTANT (rep_const) */            index = ch >> ((3)-1);
2630: /* MUTANT (rep_op) */            if (charSet->length == 0 &&
2630: /* MUTANT (rep_op) */            if (charSet->length != 0 ||
2630: /* MUTANT (rep_const) */            if (charSet->length != 1 &&
2630: /* MUTANT (rep_const) */            if (charSet->length != -1 &&
2631: /* MUTANT (rep_op) */                ch < charSet->length &&
2631: /* MUTANT (rep_op) */                ch > charSet->length &&
2631: /* MUTANT (rep_op) */                ch >= charSet->length &&
2631: /* MUTANT (rep_op) */                ch == charSet->length &&
2631: /* MUTANT (rep_op) */                ch != charSet->length &&
2631: /* MUTANT (rep_op) */                ch <= charSet->length ||
2632: /* MUTANT (rep_const) */                (charSet->u.bits[index] & (0 << (ch & 0x7)))) {
2632: /* MUTANT (rep_const) */                (charSet->u.bits[index] & (-1 << (ch & 0x7)))) {
2632: /* MUTANT (rep_const) */                (charSet->u.bits[index] & (((1)+1) << (ch & 0x7)))) {
2632: /* MUTANT (rep_const) */                (charSet->u.bits[index] & (1 << (ch & 1x7)))) {
2632: /* MUTANT (rep_const) */                (charSet->u.bits[index] & (1 << (ch & -1x7)))) {
2633: /* MUTANT (del_stmt) */ /*                 result = x; */ 
2634: /* MUTANT (del_stmt) */ /*                 result->cp++; */ 
2634: /* MUTANT (rep_op) */                result->cp--;
2640: /* MUTANT (del_stmt) */ /*         JS_ASSERT(index < gData->regexp->classCount); */ 
2640: /* MUTANT (rep_op) */        JS_ASSERT(index <= gData->regexp->classCount);
2640: /* MUTANT (rep_op) */        JS_ASSERT(index > gData->regexp->classCount);
2640: /* MUTANT (rep_op) */        JS_ASSERT(index >= gData->regexp->classCount);
2640: /* MUTANT (rep_op) */        JS_ASSERT(index == gData->regexp->classCount);
2640: /* MUTANT (rep_op) */        JS_ASSERT(index != gData->regexp->classCount);
2641: /* MUTANT (rep_op) */        if (x->cp == gData->cpend) {
2641: /* MUTANT (negate) */        if(! (x->cp != gData->cpend)) {
2642: /* MUTANT (del_stmt) */ /*             charSet = &gData->regexp->classList[index]; */ 
2643: /* MUTANT (del_stmt) */ /*             JS_ASSERT(charSet->converted); */ 
2644: /* MUTANT (del_stmt) */ /*             ch = *x->cp; */ 
2645: /* MUTANT (del_stmt) */ /*             index = ch >> 3; */ 
2645: /* MUTANT (rep_const) */            index = ch >> 0;
2645: /* MUTANT (rep_const) */            index = ch >> 1;
2645: /* MUTANT (rep_const) */            index = ch >> -1;
2645: /* MUTANT (rep_const) */            index = ch >> ((3)+1);
2645: /* MUTANT (rep_const) */            index = ch >> ((3)-1);
2646: /* MUTANT (rep_op) */            if (charSet->length != 0 ||
2646: /* MUTANT (rep_op) */            if (charSet->length == 0 &&
2646: /* MUTANT (rep_const) */            if (charSet->length == 1 ||
2646: /* MUTANT (rep_const) */            if (charSet->length == -1 ||
2647: /* MUTANT (rep_op) */                ch <= charSet->length ||
2647: /* MUTANT (rep_op) */                ch < charSet->length ||
2647: /* MUTANT (rep_op) */                ch >= charSet->length ||
2647: /* MUTANT (rep_op) */                ch == charSet->length ||
2647: /* MUTANT (rep_op) */                ch != charSet->length ||
2647: /* MUTANT (rep_op) */                ch > charSet->length &&
2648: /* MUTANT (rep_const) */                !(charSet->u.bits[index] & (0 << (ch & 0x7)))) {
2648: /* MUTANT (rep_const) */                !(charSet->u.bits[index] & (-1 << (ch & 0x7)))) {
2648: /* MUTANT (rep_const) */                !(charSet->u.bits[index] & (((1)+1) << (ch & 0x7)))) {
2648: /* MUTANT (rep_const) */                !(charSet->u.bits[index] & (1 << (ch & 1x7)))) {
2648: /* MUTANT (rep_const) */                !(charSet->u.bits[index] & (1 << (ch & -1x7)))) {
2649: /* MUTANT (del_stmt) */ /*                 result = x; */ 
2650: /* MUTANT (del_stmt) */ /*                 result->cp++; */ 
2650: /* MUTANT (rep_op) */                result->cp--;
2657: /* MUTANT (negate) */    if(! (result)) {
2658: /* MUTANT (negate) */        if(! (update))
2662: /* MUTANT (del_stmt) */ /*         return result; */ 
2665: /* MUTANT (del_stmt) */ /*     return NULL; */ 
2671: /* MUTANT (del_stmt) */ /*     REMatchState *result = NULL; */ 
2672: /* MUTANT (del_stmt) */ /*     REBackTrackData *backTrackData; */ 
2673: /* MUTANT (del_stmt) */ /*     jsbytecode *nextpc; */ 
2674: /* MUTANT (del_stmt) */ /*     REOp nextop; */ 
2675: /* MUTANT (del_stmt) */ /*     RECapture *cap; */ 
2676: /* MUTANT (del_stmt) */ /*     REProgState *curState; */ 
2677: /* MUTANT (del_stmt) */ /*     const jschar *startcp; */ 
2678: /* MUTANT (del_stmt) */ /*     size_t parenIndex, k; */ 
2679: /* MUTANT (del_stmt) */ /*     size_t parenSoFar = 0; */ 
2679: /* MUTANT (rep_const) */    size_t parenSoFar = 1;
2679: /* MUTANT (rep_const) */    size_t parenSoFar = -1;
2681: /* MUTANT (del_stmt) */ /*     jschar matchCh1, matchCh2; */ 
2682: /* MUTANT (del_stmt) */ /*     RECharSet *charSet; */ 
2684: /* MUTANT (del_stmt) */ /*     JSBool anchor; */ 
2685: /* MUTANT (del_stmt) */ /*     jsbytecode *pc = gData->regexp->program; */ 
2686: /* MUTANT (del_stmt) */ /*     REOp op = (REOp) *pc++; */ 
2686: /* MUTANT (rep_op) */    REOp op = (REOp) *pc--;
2692: /* MUTANT (negate) */    if(! (REOP_IS_SIMPLE(op))) {
2693: /* MUTANT (del_stmt) */ /*         anchor = JS_FALSE; */ 
2694: /* MUTANT (rep_op) */        while (x->cp < gData->cpend) {
2694: /* MUTANT (rep_op) */        while (x->cp > gData->cpend) {
2694: /* MUTANT (rep_op) */        while (x->cp >= gData->cpend) {
2694: /* MUTANT (rep_op) */        while (x->cp == gData->cpend) {
2694: /* MUTANT (rep_op) */        while (x->cp != gData->cpend) {
2694: /* MUTANT (negate) */        while(! (x->cp <= gData->cpend)) {
2695: /* MUTANT (del_stmt) */ /*             nextpc = pc; */     /* reset back to start each time */
2696: /* MUTANT (del_stmt) */ /*             result = SimpleMatch(gData, x, op, &nextpc, JS_TRUE); */ 
2697: /* MUTANT (negate) */            if(! (result)) {
2698: /* MUTANT (del_stmt) */ /*                 anchor = JS_TRUE; */ 
2699: /* MUTANT (del_stmt) */ /*                 x = result; */ 
2700: /* MUTANT (del_stmt) */ /*                 pc = nextpc; */     /* accept skip to next opcode */
2701: /* MUTANT (del_stmt) */ /*                 op = (REOp) *pc++; */ 
2701: /* MUTANT (rep_op) */                op = (REOp) *pc--;
2702: /* MUTANT (del_stmt) */ /*                 break; */ 
2704: /* MUTANT (rep_op) */            gData->skipped--;
2705: /* MUTANT (del_stmt) */ /*             x->cp++; */ 
2705: /* MUTANT (rep_op) */            x->cp--;
2707: /* MUTANT (negate) */        if(! (!anchor))
2712: /* MUTANT (negate) */        if(! (REOP_IS_SIMPLE(op))) {
2713: /* MUTANT (del_stmt) */ /*             result = SimpleMatch(gData, x, op, &pc, JS_TRUE); */ 
2715: /* MUTANT (del_stmt) */ /*             curState = &gData->stateStack[gData->stateStackTop]; */ 
2719: /* MUTANT (del_stmt) */ /*                 break; */ 
2722: /* MUTANT (rep_op) */                nextpc = pc - GET_OFFSET(pc);   /* start of next op */
2722: /* MUTANT (rep_op) */                nextpc = pc * GET_OFFSET(pc);   /* start of next op */
2722: /* MUTANT (rep_op) */                nextpc = pc % GET_OFFSET(pc);   /* start of next op */
2723: /* MUTANT (del_stmt) */ /*                 pc += ARG_LEN; */ 
2723: /* MUTANT (rep_op) */                pc -= ARG_LEN;
2723: /* MUTANT (rep_op) */                pc *= ARG_LEN;
2723: /* MUTANT (rep_op) */                pc %= ARG_LEN;
2724: /* MUTANT (del_stmt) */ /*                 matchCh2 = GET_ARG(pc); */ 
2725: /* MUTANT (del_stmt) */ /*                 pc += ARG_LEN; */ 
2725: /* MUTANT (rep_op) */                pc -= ARG_LEN;
2725: /* MUTANT (rep_op) */                pc *= ARG_LEN;
2725: /* MUTANT (rep_op) */                pc %= ARG_LEN;
2726: /* MUTANT (del_stmt) */ /*                 k = GET_ARG(pc); */ 
2727: /* MUTANT (del_stmt) */ /*                 pc += ARG_LEN; */ 
2727: /* MUTANT (rep_op) */                pc -= ARG_LEN;
2727: /* MUTANT (rep_op) */                pc *= ARG_LEN;
2727: /* MUTANT (rep_op) */                pc %= ARG_LEN;
2729: /* MUTANT (rep_op) */                if (x->cp == gData->cpend) {
2729: /* MUTANT (negate) */                if(! (x->cp != gData->cpend)) {
2730: /* MUTANT (rep_op) */                    if (*x->cp != matchCh2)
2730: /* MUTANT (negate) */                    if(! (*x->cp == matchCh2))
2733: /* MUTANT (del_stmt) */ /*                     charSet = &gData->regexp->classList[k]; */ 
2734: /* MUTANT (negate) */                    if(! (!charSet->converted))
2735: /* MUTANT (negate) */                        if(! (!ProcessCharSet(gData, charSet)))
2737: /* MUTANT (del_stmt) */ /*                     matchCh1 = *x->cp; */ 
2738: /* MUTANT (del_stmt) */ /*                     k = matchCh1 >> 3; */ 
2738: /* MUTANT (rep_const) */                    k = matchCh1 >> 0;
2738: /* MUTANT (rep_const) */                    k = matchCh1 >> 1;
2738: /* MUTANT (rep_const) */                    k = matchCh1 >> -1;
2738: /* MUTANT (rep_const) */                    k = matchCh1 >> ((3)+1);
2738: /* MUTANT (rep_const) */                    k = matchCh1 >> ((3)-1);
2739: /* MUTANT (rep_op) */                    if ((charSet->length != 0 ||
2739: /* MUTANT (rep_op) */                    if ((charSet->length == 0 &&
2739: /* MUTANT (rep_const) */                    if ((charSet->length == 1 ||
2739: /* MUTANT (rep_const) */                    if ((charSet->length == -1 ||
2740: /* MUTANT (rep_op) */                         matchCh1 <= charSet->length ||
2740: /* MUTANT (rep_op) */                         matchCh1 < charSet->length ||
2740: /* MUTANT (rep_op) */                         matchCh1 >= charSet->length ||
2740: /* MUTANT (rep_op) */                         matchCh1 == charSet->length ||
2740: /* MUTANT (rep_op) */                         matchCh1 != charSet->length ||
2740: /* MUTANT (rep_op) */                         matchCh1 > charSet->length &&
2741: /* MUTANT (rep_const) */                         !(charSet->u.bits[k] & (0 << (matchCh1 & 0x7)))) ^
2741: /* MUTANT (rep_const) */                         !(charSet->u.bits[k] & (-1 << (matchCh1 & 0x7)))) ^
2741: /* MUTANT (rep_const) */                         !(charSet->u.bits[k] & (((1)+1) << (matchCh1 & 0x7)))) ^
2741: /* MUTANT (rep_const) */                         !(charSet->u.bits[k] & (1 << (matchCh1 & 1x7)))) ^
2741: /* MUTANT (rep_const) */                         !(charSet->u.bits[k] & (1 << (matchCh1 & -1x7)))) ^
2743: /* MUTANT (del_stmt) */ /*                         goto doAlt; */ 
2747: /* MUTANT (del_stmt) */ /*                 break; */ 
2750: /* MUTANT (rep_op) */                nextpc = pc - GET_OFFSET(pc);   /* start of next op */
2750: /* MUTANT (rep_op) */                nextpc = pc * GET_OFFSET(pc);   /* start of next op */
2750: /* MUTANT (rep_op) */                nextpc = pc % GET_OFFSET(pc);   /* start of next op */
2751: /* MUTANT (del_stmt) */ /*                 pc += ARG_LEN; */ 
2751: /* MUTANT (rep_op) */                pc -= ARG_LEN;
2751: /* MUTANT (rep_op) */                pc *= ARG_LEN;
2751: /* MUTANT (rep_op) */                pc %= ARG_LEN;
2752: /* MUTANT (del_stmt) */ /*                 matchCh1 = GET_ARG(pc); */ 
2753: /* MUTANT (del_stmt) */ /*                 pc += ARG_LEN; */ 
2753: /* MUTANT (rep_op) */                pc -= ARG_LEN;
2753: /* MUTANT (rep_op) */                pc *= ARG_LEN;
2753: /* MUTANT (rep_op) */                pc %= ARG_LEN;
2754: /* MUTANT (del_stmt) */ /*                 matchCh2 = GET_ARG(pc); */ 
2755: /* MUTANT (del_stmt) */ /*                 pc += ARG_LEN; */ 
2755: /* MUTANT (rep_op) */                pc -= ARG_LEN;
2755: /* MUTANT (rep_op) */                pc *= ARG_LEN;
2755: /* MUTANT (rep_op) */                pc %= ARG_LEN;
2756: /* MUTANT (rep_op) */                if (x->cp != gData->cpend ||
2756: /* MUTANT (rep_op) */                if (x->cp == gData->cpend &&
2757: /* MUTANT (rep_op) */                    (*x->cp == matchCh1 && *x->cp != matchCh2)) {
2757: /* MUTANT (rep_op) */                    (*x->cp != matchCh1 || *x->cp != matchCh2)) {
2757: /* MUTANT (rep_op) */                    (*x->cp != matchCh1 && *x->cp == matchCh2)) {
2758: /* MUTANT (del_stmt) */ /*                     result = NULL; */ 
2759: /* MUTANT (del_stmt) */ /*                     break; */ 
2765: /* MUTANT (rep_op) */                nextpc = pc - GET_OFFSET(pc);   /* start of next alternate */
2765: /* MUTANT (rep_op) */                nextpc = pc * GET_OFFSET(pc);   /* start of next alternate */
2765: /* MUTANT (rep_op) */                nextpc = pc % GET_OFFSET(pc);   /* start of next alternate */
2766: /* MUTANT (del_stmt) */ /*                 pc += ARG_LEN; */                   /* start of this alternate */
2766: /* MUTANT (rep_op) */                pc -= ARG_LEN;                  /* start of this alternate */
2766: /* MUTANT (rep_op) */                pc *= ARG_LEN;                  /* start of this alternate */
2766: /* MUTANT (rep_op) */                pc %= ARG_LEN;                  /* start of this alternate */
2767: /* MUTANT (del_stmt) */ /*                 curState->parenSoFar = parenSoFar; */ 
2768: /* MUTANT (del_stmt) */ /*                 PUSH_STATE_STACK(gData); */ 
2769: /* MUTANT (del_stmt) */ /*                 op = (REOp) *pc++; */ 
2769: /* MUTANT (rep_op) */                op = (REOp) *pc--;
2770: /* MUTANT (del_stmt) */ /*                 startcp = x->cp; */ 
2771: /* MUTANT (negate) */                if(! (REOP_IS_SIMPLE(op))) {
2772: /* MUTANT (negate) */                    if(! (!SimpleMatch(gData, x, op, &pc, JS_TRUE))) {
2773: /* MUTANT (del_stmt) */ /*                         op = (REOp) *nextpc++; */ 
2773: /* MUTANT (rep_op) */                        op = (REOp) *nextpc--;
2774: /* MUTANT (del_stmt) */ /*                         pc = nextpc; */ 
2775: /* MUTANT (del_stmt) */ /*                         continue; */ 
2778: /* MUTANT (del_stmt) */ /*                     op = (REOp) *pc++; */ 
2778: /* MUTANT (rep_op) */                    op = (REOp) *pc--;
2780: /* MUTANT (rep_op) */                nextop = (REOp) *nextpc--;
2781: /* MUTANT (rep_const) */                if (!PushBackTrackState(gData, nextop, nextpc, x, startcp, 1, 0))
2781: /* MUTANT (rep_const) */                if (!PushBackTrackState(gData, nextop, nextpc, x, startcp, -1, 0))
2781: /* MUTANT (rep_const) */                if (!PushBackTrackState(gData, nextop, nextpc, x, startcp, 0, 1))
2781: /* MUTANT (rep_const) */                if (!PushBackTrackState(gData, nextop, nextpc, x, startcp, 0, -1))
2781: /* MUTANT (negate) */                if(! (!PushBackTrackState(gData, nextop, nextpc, x, startcp, 0, 0)))
2783: /* MUTANT (del_stmt) */ /*                 continue; */ 
2789: /* MUTANT (rep_op) */                ++gData->stateStackTop;
2790: /* MUTANT (del_stmt) */ /*                 pc += GET_OFFSET(pc); */ 
2790: /* MUTANT (rep_op) */                pc -= GET_OFFSET(pc);
2790: /* MUTANT (rep_op) */                pc *= GET_OFFSET(pc);
2790: /* MUTANT (rep_op) */                pc %= GET_OFFSET(pc);
2791: /* MUTANT (del_stmt) */ /*                 op = (REOp) *pc++; */ 
2791: /* MUTANT (rep_op) */                op = (REOp) *pc--;
2792: /* MUTANT (del_stmt) */ /*                 continue; */ 
2798: /* MUTANT (rep_op) */                ++gData->stateStackTop;
2799: /* MUTANT (del_stmt) */ /*                 op = (REOp) *pc++; */ 
2799: /* MUTANT (rep_op) */                op = (REOp) *pc--;
2800: /* MUTANT (del_stmt) */ /*                 continue; */ 
2804: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(parenIndex < gData->regexp->parenCount); */ 
2804: /* MUTANT (rep_op) */                JS_ASSERT(parenIndex <= gData->regexp->parenCount);
2804: /* MUTANT (rep_op) */                JS_ASSERT(parenIndex > gData->regexp->parenCount);
2804: /* MUTANT (rep_op) */                JS_ASSERT(parenIndex >= gData->regexp->parenCount);
2804: /* MUTANT (rep_op) */                JS_ASSERT(parenIndex == gData->regexp->parenCount);
2804: /* MUTANT (rep_op) */                JS_ASSERT(parenIndex != gData->regexp->parenCount);
2805: /* MUTANT (rep_op) */                if (parenIndex - 1 > parenSoFar)
2805: /* MUTANT (rep_op) */                if (parenIndex * 1 > parenSoFar)
2805: /* MUTANT (rep_op) */                if (parenIndex % 1 > parenSoFar)
2805: /* MUTANT (rep_op) */                if (parenIndex + 1 <= parenSoFar)
2805: /* MUTANT (rep_op) */                if (parenIndex + 1 < parenSoFar)
2805: /* MUTANT (rep_op) */                if (parenIndex + 1 >= parenSoFar)
2805: /* MUTANT (rep_op) */                if (parenIndex + 1 == parenSoFar)
2805: /* MUTANT (rep_op) */                if (parenIndex + 1 != parenSoFar)
2805: /* MUTANT (rep_const) */                if (parenIndex + 0 > parenSoFar)
2805: /* MUTANT (rep_const) */                if (parenIndex + -1 > parenSoFar)
2805: /* MUTANT (rep_const) */                if (parenIndex + ((1)+1) > parenSoFar)
2805: /* MUTANT (negate) */                if(! (parenIndex + 1 > parenSoFar))
2806: /* MUTANT (rep_op) */                    parenSoFar = parenIndex - 1;
2806: /* MUTANT (rep_op) */                    parenSoFar = parenIndex * 1;
2806: /* MUTANT (rep_op) */                    parenSoFar = parenIndex % 1;
2806: /* MUTANT (rep_const) */                    parenSoFar = parenIndex + 0;
2806: /* MUTANT (rep_const) */                    parenSoFar = parenIndex + -1;
2806: /* MUTANT (rep_const) */                    parenSoFar = parenIndex + ((1)+1);
2807: /* MUTANT (del_stmt) */ /*                 x->parens[parenIndex].index = x->cp - gData->cpbegin; */ 
2808: /* MUTANT (del_stmt) */ /*                 x->parens[parenIndex].length = 0; */ 
2808: /* MUTANT (rep_const) */                x->parens[parenIndex].length = 1;
2808: /* MUTANT (rep_const) */                x->parens[parenIndex].length = -1;
2809: /* MUTANT (del_stmt) */ /*                 op = (REOp) *pc++; */ 
2809: /* MUTANT (rep_op) */                op = (REOp) *pc--;
2810: /* MUTANT (del_stmt) */ /*                 continue; */ 
2814: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(parenIndex < gData->regexp->parenCount); */ 
2814: /* MUTANT (rep_op) */                JS_ASSERT(parenIndex <= gData->regexp->parenCount);
2814: /* MUTANT (rep_op) */                JS_ASSERT(parenIndex > gData->regexp->parenCount);
2814: /* MUTANT (rep_op) */                JS_ASSERT(parenIndex >= gData->regexp->parenCount);
2814: /* MUTANT (rep_op) */                JS_ASSERT(parenIndex == gData->regexp->parenCount);
2814: /* MUTANT (rep_op) */                JS_ASSERT(parenIndex != gData->regexp->parenCount);
2815: /* MUTANT (del_stmt) */ /*                 cap = &x->parens[parenIndex]; */ 
2822: /* MUTANT (rep_op) */                if (x->cp <= gData->cpbegin + cap->index)
2822: /* MUTANT (rep_op) */                if (x->cp > gData->cpbegin + cap->index)
2822: /* MUTANT (rep_op) */                if (x->cp >= gData->cpbegin + cap->index)
2822: /* MUTANT (rep_op) */                if (x->cp == gData->cpbegin + cap->index)
2822: /* MUTANT (rep_op) */                if (x->cp != gData->cpbegin + cap->index)
2822: /* MUTANT (rep_op) */                if (x->cp < gData->cpbegin - cap->index)
2822: /* MUTANT (rep_op) */                if (x->cp < gData->cpbegin * cap->index)
2822: /* MUTANT (rep_op) */                if (x->cp < gData->cpbegin % cap->index)
2822: /* MUTANT (negate) */                if(! (x->cp < gData->cpbegin + cap->index))
2823: /* MUTANT (rep_const) */                    cap->index = 0;
2823: /* MUTANT (rep_const) */                    cap->index = 1;
2823: /* MUTANT (rep_const) */                    cap->index = ((-1)+1);
2823: /* MUTANT (rep_const) */                    cap->index = ((-1)-1);
2824: /* MUTANT (del_stmt) */ /*                 cap->length = x->cp - (gData->cpbegin + cap->index); */ 
2824: /* MUTANT (rep_op) */                cap->length = x->cp - (gData->cpbegin - cap->index);
2824: /* MUTANT (rep_op) */                cap->length = x->cp - (gData->cpbegin * cap->index);
2824: /* MUTANT (rep_op) */                cap->length = x->cp - (gData->cpbegin % cap->index);
2825: /* MUTANT (del_stmt) */ /*                 op = (REOp) *pc++; */ 
2825: /* MUTANT (rep_op) */                op = (REOp) *pc--;
2826: /* MUTANT (del_stmt) */ /*                 continue; */ 
2829: /* MUTANT (rep_op) */                nextpc = pc - GET_OFFSET(pc);  /* start of term after ASSERT */
2829: /* MUTANT (rep_op) */                nextpc = pc * GET_OFFSET(pc);  /* start of term after ASSERT */
2829: /* MUTANT (rep_op) */                nextpc = pc % GET_OFFSET(pc);  /* start of term after ASSERT */
2830: /* MUTANT (del_stmt) */ /*                 pc += ARG_LEN; */                  /* start of ASSERT child */
2830: /* MUTANT (rep_op) */                pc -= ARG_LEN;                 /* start of ASSERT child */
2830: /* MUTANT (rep_op) */                pc *= ARG_LEN;                 /* start of ASSERT child */
2830: /* MUTANT (rep_op) */                pc %= ARG_LEN;                 /* start of ASSERT child */
2831: /* MUTANT (del_stmt) */ /*                 op = (REOp) *pc++; */ 
2831: /* MUTANT (rep_op) */                op = (REOp) *pc--;
2832: /* MUTANT (rep_op) */                if (REOP_IS_SIMPLE(op) ||
2834: /* MUTANT (del_stmt) */ /*                     result = NULL; */ 
2835: /* MUTANT (del_stmt) */ /*                     break; */ 
2839: /* MUTANT (del_stmt) */ /*                 curState->u.assertion.sz = gData->cursz; */ 
2840: /* MUTANT (del_stmt) */ /*                 curState->index = x->cp - gData->cpbegin; */ 
2841: /* MUTANT (del_stmt) */ /*                 curState->parenSoFar = parenSoFar; */ 
2842: /* MUTANT (del_stmt) */ /*                 PUSH_STATE_STACK(gData); */ 
2844: /* MUTANT (rep_const) */                                        nextpc, x, x->cp, 1, 0)) {
2844: /* MUTANT (rep_const) */                                        nextpc, x, x->cp, -1, 0)) {
2844: /* MUTANT (rep_const) */                                        nextpc, x, x->cp, 0, 1)) {
2844: /* MUTANT (rep_const) */                                        nextpc, x, x->cp, 0, -1)) {
2845: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
2850: /* MUTANT (rep_op) */                nextpc = pc - GET_OFFSET(pc);
2850: /* MUTANT (rep_op) */                nextpc = pc * GET_OFFSET(pc);
2850: /* MUTANT (rep_op) */                nextpc = pc % GET_OFFSET(pc);
2851: /* MUTANT (del_stmt) */ /*                 pc += ARG_LEN; */ 
2851: /* MUTANT (rep_op) */                pc -= ARG_LEN;
2851: /* MUTANT (rep_op) */                pc *= ARG_LEN;
2851: /* MUTANT (rep_op) */                pc %= ARG_LEN;
2852: /* MUTANT (del_stmt) */ /*                 op = (REOp) *pc++; */ 
2852: /* MUTANT (rep_op) */                op = (REOp) *pc--;
2854: /* MUTANT (rep_op) */                    SimpleMatch(gData, x, op, &pc, JS_FALSE) ||
2855: /* MUTANT (rep_op) */                    pc != nextpc) {
2856: /* MUTANT (del_stmt) */ /*                     result = NULL; */ 
2857: /* MUTANT (del_stmt) */ /*                     break; */ 
2862: /* MUTANT (del_stmt) */ /*                 curState->u.assertion.sz = gData->cursz; */ 
2863: /* MUTANT (del_stmt) */ /*                 curState->index = x->cp - gData->cpbegin; */ 
2864: /* MUTANT (del_stmt) */ /*                 curState->parenSoFar = parenSoFar; */ 
2865: /* MUTANT (del_stmt) */ /*                 PUSH_STATE_STACK(gData); */ 
2867: /* MUTANT (rep_const) */                                        nextpc, x, x->cp, 1, 0))
2867: /* MUTANT (rep_const) */                                        nextpc, x, x->cp, -1, 0))
2867: /* MUTANT (rep_const) */                                        nextpc, x, x->cp, 0, 1))
2867: /* MUTANT (rep_const) */                                        nextpc, x, x->cp, 0, -1))
2869: /* MUTANT (del_stmt) */ /*                 continue; */ 
2872: /* MUTANT (rep_op) */                ++gData->stateStackTop;
2873: /* MUTANT (del_stmt) */ /*                 --curState; */ 
2873: /* MUTANT (rep_op) */                ++curState;
2874: /* MUTANT (del_stmt) */ /*                 x->cp = gData->cpbegin + curState->index; */ 
2874: /* MUTANT (rep_op) */                x->cp = gData->cpbegin - curState->index;
2874: /* MUTANT (rep_op) */                x->cp = gData->cpbegin * curState->index;
2874: /* MUTANT (rep_op) */                x->cp = gData->cpbegin % curState->index;
2876: /* MUTANT (rep_op) */                    (REBackTrackData *) ((char *)gData->backTrackStack -
2876: /* MUTANT (rep_op) */                    (REBackTrackData *) ((char *)gData->backTrackStack *
2876: /* MUTANT (rep_op) */                    (REBackTrackData *) ((char *)gData->backTrackStack %
2878: /* MUTANT (del_stmt) */ /*                 gData->cursz = curState->u.assertion.sz; */ 
2879: /* MUTANT (negate) */                if(! (result))
2881: /* MUTANT (del_stmt) */ /*                 break; */ 
2884: /* MUTANT (rep_op) */                ++gData->stateStackTop;
2885: /* MUTANT (del_stmt) */ /*                 --curState; */ 
2885: /* MUTANT (rep_op) */                ++curState;
2886: /* MUTANT (del_stmt) */ /*                 x->cp = gData->cpbegin + curState->index; */ 
2886: /* MUTANT (rep_op) */                x->cp = gData->cpbegin - curState->index;
2886: /* MUTANT (rep_op) */                x->cp = gData->cpbegin * curState->index;
2886: /* MUTANT (rep_op) */                x->cp = gData->cpbegin % curState->index;
2888: /* MUTANT (rep_op) */                    (REBackTrackData *) ((char *)gData->backTrackStack -
2888: /* MUTANT (rep_op) */                    (REBackTrackData *) ((char *)gData->backTrackStack *
2888: /* MUTANT (rep_op) */                    (REBackTrackData *) ((char *)gData->backTrackStack %
2890: /* MUTANT (del_stmt) */ /*                 gData->cursz = curState->u.assertion.sz; */ 
2891: /* MUTANT (del_stmt) */ /*                 result = (!result) ? x : NULL; */ 
2892: /* MUTANT (del_stmt) */ /*                 break; */ 
2895: /* MUTANT (negate) */                if(! (x))
2897: /* MUTANT (del_stmt) */ /*                 break; */ 
2900: /* MUTANT (rep_const) */                curState->u.quantifier.min = 1;
2900: /* MUTANT (rep_const) */                curState->u.quantifier.min = -1;
2901: /* MUTANT (del_stmt) */ /*                 curState->u.quantifier.max = (uintN)-1; */ 
2901: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)0;
2901: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)1;
2901: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)((-1)+1);
2901: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)((-1)-1);
2901: /* MUTANT (negate) */                curState->u.quantif(!ier.max = (uintN))-1;
2902: /* MUTANT (del_stmt) */ /*                 goto quantcommon; */ 
2904: /* MUTANT (rep_const) */                curState->u.quantifier.min = 0;
2904: /* MUTANT (rep_const) */                curState->u.quantifier.min = -1;
2904: /* MUTANT (rep_const) */                curState->u.quantifier.min = ((1)+1);
2905: /* MUTANT (del_stmt) */ /*                 curState->u.quantifier.max = (uintN)-1; */ 
2905: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)0;
2905: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)1;
2905: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)((-1)+1);
2905: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)((-1)-1);
2905: /* MUTANT (negate) */                curState->u.quantif(!ier.max = (uintN))-1;
2906: /* MUTANT (del_stmt) */ /*                 goto quantcommon; */ 
2908: /* MUTANT (rep_const) */                curState->u.quantifier.min = 1;
2908: /* MUTANT (rep_const) */                curState->u.quantifier.min = -1;
2909: /* MUTANT (del_stmt) */ /*                 curState->u.quantifier.max = 1; */ 
2909: /* MUTANT (rep_const) */                curState->u.quantifier.max = 0;
2909: /* MUTANT (rep_const) */                curState->u.quantifier.max = -1;
2909: /* MUTANT (rep_const) */                curState->u.quantifier.max = ((1)+1);
2910: /* MUTANT (del_stmt) */ /*                 goto quantcommon; */ 
2913: /* MUTANT (del_stmt) */ /*                 curState->u.quantifier.min = k; */ 
2914: /* MUTANT (del_stmt) */ /*                 pc = ReadCompactIndex(pc, &k); */ 
2916: /* MUTANT (del_stmt) */ /*                 curState->u.quantifier.max = k - 1; */ 
2916: /* MUTANT (rep_const) */                curState->u.quantifier.max = k - 0;
2916: /* MUTANT (rep_const) */                curState->u.quantifier.max = k - -1;
2916: /* MUTANT (rep_const) */                curState->u.quantifier.max = k - ((1)+1);
2918: /* MUTANT (rep_op) */                          < curState->u.quantifier.max);
2918: /* MUTANT (rep_op) */                          > curState->u.quantifier.max);
2918: /* MUTANT (rep_op) */                          >= curState->u.quantifier.max);
2918: /* MUTANT (rep_op) */                          == curState->u.quantifier.max);
2918: /* MUTANT (rep_op) */                          != curState->u.quantifier.max);
2920: /* MUTANT (rep_op) */                if (curState->u.quantifier.max != 0) {
2920: /* MUTANT (rep_const) */                if (curState->u.quantifier.max == 1) {
2920: /* MUTANT (rep_const) */                if (curState->u.quantifier.max == -1) {
2920: /* MUTANT (negate) */                if(! (curState->u.quantifier.max == 0)) {
2921: /* MUTANT (del_stmt) */ /*                     pc = pc + GET_OFFSET(pc); */ 
2921: /* MUTANT (rep_op) */                    pc = pc - GET_OFFSET(pc);
2921: /* MUTANT (rep_op) */                    pc = pc * GET_OFFSET(pc);
2921: /* MUTANT (rep_op) */                    pc = pc % GET_OFFSET(pc);
2922: /* MUTANT (del_stmt) */ /*                     op = (REOp) *pc++; */ 
2922: /* MUTANT (rep_op) */                    op = (REOp) *pc--;
2923: /* MUTANT (del_stmt) */ /*                     result = x; */ 
2924: /* MUTANT (del_stmt) */ /*                     continue; */ 
2927: /* MUTANT (rep_op) */                nextpc = pc - ARG_LEN;
2927: /* MUTANT (rep_op) */                nextpc = pc * ARG_LEN;
2927: /* MUTANT (rep_op) */                nextpc = pc % ARG_LEN;
2928: /* MUTANT (del_stmt) */ /*                 op = (REOp) *nextpc++; */ 
2928: /* MUTANT (rep_op) */                op = (REOp) *nextpc--;
2929: /* MUTANT (del_stmt) */ /*                 startcp = x->cp; */ 
2930: /* MUTANT (negate) */                if(! (REOP_IS_SIMPLE(op))) {
2931: /* MUTANT (negate) */                    if(! (!SimpleMatch(gData, x, op, &nextpc, JS_TRUE))) {
2932: /* MUTANT (rep_op) */                        if (curState->u.quantifier.min != 0)
2932: /* MUTANT (rep_const) */                        if (curState->u.quantifier.min == 1)
2932: /* MUTANT (rep_const) */                        if (curState->u.quantifier.min == -1)
2932: /* MUTANT (negate) */                        if(! (curState->u.quantifier.min == 0))
2936: /* MUTANT (del_stmt) */ /*                         pc = pc + GET_OFFSET(pc); */ 
2936: /* MUTANT (rep_op) */                        pc = pc - GET_OFFSET(pc);
2936: /* MUTANT (rep_op) */                        pc = pc * GET_OFFSET(pc);
2936: /* MUTANT (rep_op) */                        pc = pc % GET_OFFSET(pc);
2937: /* MUTANT (del_stmt) */ /*                         break; */ 
2939: /* MUTANT (rep_op) */                    op = (REOp) *nextpc--;
2940: /* MUTANT (del_stmt) */ /*                     result = x; */ 
2943: /* MUTANT (del_stmt) */ /*                 curState->continue_op = REOP_REPEAT; */ 
2944: /* MUTANT (del_stmt) */ /*                 curState->continue_pc = pc; */ 
2945: /* MUTANT (del_stmt) */ /*                 curState->parenSoFar = parenSoFar; */ 
2946: /* MUTANT (del_stmt) */ /*                 PUSH_STATE_STACK(gData); */ 
2947: /* MUTANT (rep_op) */                if (curState->u.quantifier.min != 0 &&
2947: /* MUTANT (rep_op) */                if (curState->u.quantifier.min == 0 ||
2947: /* MUTANT (rep_const) */                if (curState->u.quantifier.min == 1 &&
2947: /* MUTANT (rep_const) */                if (curState->u.quantifier.min == -1 &&
2949: /* MUTANT (rep_const) */                                        1, 0)) {
2949: /* MUTANT (rep_const) */                                        -1, 0)) {
2949: /* MUTANT (rep_const) */                                        0, 1)) {
2949: /* MUTANT (rep_const) */                                        0, -1)) {
2950: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
2953: /* MUTANT (del_stmt) */ /*                 continue; */ 
2956: /* MUTANT (rep_const) */                pc = curState[0].continue_pc;
2956: /* MUTANT (rep_const) */                pc = curState[1].continue_pc;
2956: /* MUTANT (rep_const) */                pc = curState[((-1)+1)].continue_pc;
2956: /* MUTANT (rep_const) */                pc = curState[((-1)-1)].continue_pc;
2957: /* MUTANT (del_stmt) */ /*                 op = curState[-1].continue_op; */ 
2957: /* MUTANT (rep_const) */                op = curState[0].continue_op;
2957: /* MUTANT (rep_const) */                op = curState[1].continue_op;
2957: /* MUTANT (rep_const) */                op = curState[((-1)+1)].continue_op;
2957: /* MUTANT (rep_const) */                op = curState[((-1)-1)].continue_op;
2958: /* MUTANT (del_stmt) */ /*                 continue; */ 
2961: /* MUTANT (rep_op) */                ++curState;
2963: /* MUTANT (del_stmt) */ /*                     --gData->stateStackTop; */ 
2963: /* MUTANT (rep_op) */                    ++gData->stateStackTop;
2964: /* MUTANT (negate) */                    if(! (!result)) {
2966: /* MUTANT (rep_op) */                        if (curState->u.quantifier.min != 0)
2966: /* MUTANT (rep_const) */                        if (curState->u.quantifier.min == 1)
2966: /* MUTANT (rep_const) */                        if (curState->u.quantifier.min == -1)
2966: /* MUTANT (negate) */                        if(! (curState->u.quantifier.min == 0))
2968: /* MUTANT (del_stmt) */ /*                         goto break_switch; */ 
2970: /* MUTANT (rep_op) */                    if (curState->u.quantifier.min != 0 &&
2970: /* MUTANT (rep_op) */                    if (curState->u.quantifier.min == 0 ||
2970: /* MUTANT (rep_const) */                    if (curState->u.quantifier.min == 1 &&
2970: /* MUTANT (rep_const) */                    if (curState->u.quantifier.min == -1 &&
2971: /* MUTANT (rep_op) */                        x->cp != gData->cpbegin + curState->index) {
2971: /* MUTANT (rep_op) */                        x->cp == gData->cpbegin - curState->index) {
2971: /* MUTANT (rep_op) */                        x->cp == gData->cpbegin * curState->index) {
2971: /* MUTANT (rep_op) */                        x->cp == gData->cpbegin % curState->index) {
2973: /* MUTANT (del_stmt) */ /*                         result = NULL; */ 
2974: /* MUTANT (del_stmt) */ /*                         goto break_switch; */ 
2976: /* MUTANT (rep_op) */                    if (curState->u.quantifier.min == 0)
2976: /* MUTANT (rep_const) */                    if (curState->u.quantifier.min != 1)
2976: /* MUTANT (rep_const) */                    if (curState->u.quantifier.min != -1)
2976: /* MUTANT (negate) */                    if(! (curState->u.quantifier.min != 0))
2977: /* MUTANT (rep_op) */                        curState->u.quantifier.min++;
2978: /* MUTANT (rep_op) */                    if (curState->u.quantifier.max == (uintN) -1)
2978: /* MUTANT (rep_const) */                    if (curState->u.quantifier.max != (uintN) 0)
2978: /* MUTANT (rep_const) */                    if (curState->u.quantifier.max != (uintN) 1)
2978: /* MUTANT (rep_const) */                    if (curState->u.quantifier.max != (uintN) ((-1)+1))
2978: /* MUTANT (rep_const) */                    if (curState->u.quantifier.max != (uintN) ((-1)-1))
2978: /* MUTANT (negate) */                    if(! (curState->u.quantifier.max != (uintN) -1))
2979: /* MUTANT (rep_op) */                        curState->u.quantifier.max++;
2980: /* MUTANT (rep_op) */                    if (curState->u.quantifier.max != 0)
2980: /* MUTANT (rep_const) */                    if (curState->u.quantifier.max == 1)
2980: /* MUTANT (rep_const) */                    if (curState->u.quantifier.max == -1)
2980: /* MUTANT (negate) */                    if(! (curState->u.quantifier.max == 0))
2982: /* MUTANT (del_stmt) */ /*                     nextpc = pc + ARG_LEN; */ 
2982: /* MUTANT (rep_op) */                    nextpc = pc - ARG_LEN;
2982: /* MUTANT (rep_op) */                    nextpc = pc * ARG_LEN;
2982: /* MUTANT (rep_op) */                    nextpc = pc % ARG_LEN;
2983: /* MUTANT (del_stmt) */ /*                     nextop = (REOp) *nextpc; */ 
2984: /* MUTANT (del_stmt) */ /*                     startcp = x->cp; */ 
2985: /* MUTANT (negate) */                    if(! (REOP_IS_SIMPLE(nextop))) {
2986: /* MUTANT (del_stmt) */ /*                         nextpc++; */ 
2986: /* MUTANT (rep_op) */                        nextpc--;
2987: /* MUTANT (negate) */                        if(! (!SimpleMatch(gData, x, nextop, &nextpc, JS_TRUE))) {
2988: /* MUTANT (rep_op) */                            if (curState->u.quantifier.min != 0)
2988: /* MUTANT (rep_const) */                            if (curState->u.quantifier.min == 1)
2988: /* MUTANT (rep_const) */                            if (curState->u.quantifier.min == -1)
2988: /* MUTANT (negate) */                            if(! (curState->u.quantifier.min == 0))
2990: /* MUTANT (del_stmt) */ /*                             result = NULL; */ 
2991: /* MUTANT (del_stmt) */ /*                             goto break_switch; */ 
2996: /* MUTANT (del_stmt) */ /*                     PUSH_STATE_STACK(gData); */ 
2997: /* MUTANT (rep_op) */                    if (curState->u.quantifier.min != 0 &&
2997: /* MUTANT (rep_op) */                    if (curState->u.quantifier.min == 0 ||
2997: /* MUTANT (rep_const) */                    if (curState->u.quantifier.min == 1 &&
2997: /* MUTANT (rep_const) */                    if (curState->u.quantifier.min == -1 &&
3003: /* MUTANT (del_stmt) */ /*                         return NULL; */ 
3005: /* MUTANT (rep_op) */                } while (*nextpc != REOP_ENDCHILD);
3005: /* MUTANT (negate) */                } while(! (*nextpc == REOP_ENDCHILD));
3006: /* MUTANT (del_stmt) */ /*                 pc = nextpc; */ 
3007: /* MUTANT (del_stmt) */ /*                 op = (REOp) *pc++; */ 
3007: /* MUTANT (rep_op) */                op = (REOp) *pc--;
3008: /* MUTANT (del_stmt) */ /*                 parenSoFar = curState->parenSoFar; */ 
3009: /* MUTANT (del_stmt) */ /*                 continue; */ 
3013: /* MUTANT (del_stmt) */ /*                 pc += GET_OFFSET(pc); */ 
3013: /* MUTANT (rep_op) */                pc -= GET_OFFSET(pc);
3013: /* MUTANT (rep_op) */                pc *= GET_OFFSET(pc);
3013: /* MUTANT (rep_op) */                pc %= GET_OFFSET(pc);
3014: /* MUTANT (del_stmt) */ /*                 goto break_switch; */ 
3017: /* MUTANT (rep_const) */                curState->u.quantifier.min = 1;
3017: /* MUTANT (rep_const) */                curState->u.quantifier.min = -1;
3018: /* MUTANT (del_stmt) */ /*                 curState->u.quantifier.max = (uintN)-1; */ 
3018: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)0;
3018: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)1;
3018: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)((-1)+1);
3018: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)((-1)-1);
3018: /* MUTANT (negate) */                curState->u.quantif(!ier.max = (uintN))-1;
3019: /* MUTANT (del_stmt) */ /*                 goto minimalquantcommon; */ 
3021: /* MUTANT (rep_const) */                curState->u.quantifier.min = 0;
3021: /* MUTANT (rep_const) */                curState->u.quantifier.min = -1;
3021: /* MUTANT (rep_const) */                curState->u.quantifier.min = ((1)+1);
3022: /* MUTANT (del_stmt) */ /*                 curState->u.quantifier.max = (uintN)-1; */ 
3022: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)0;
3022: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)1;
3022: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)((-1)+1);
3022: /* MUTANT (rep_const) */                curState->u.quantifier.max = (uintN)((-1)-1);
3022: /* MUTANT (negate) */                curState->u.quantif(!ier.max = (uintN))-1;
3023: /* MUTANT (del_stmt) */ /*                 goto minimalquantcommon; */ 
3025: /* MUTANT (rep_const) */                curState->u.quantifier.min = 1;
3025: /* MUTANT (rep_const) */                curState->u.quantifier.min = -1;
3026: /* MUTANT (del_stmt) */ /*                 curState->u.quantifier.max = 1; */ 
3026: /* MUTANT (rep_const) */                curState->u.quantifier.max = 0;
3026: /* MUTANT (rep_const) */                curState->u.quantifier.max = -1;
3026: /* MUTANT (rep_const) */                curState->u.quantifier.max = ((1)+1);
3027: /* MUTANT (del_stmt) */ /*                 goto minimalquantcommon; */ 
3030: /* MUTANT (del_stmt) */ /*                 curState->u.quantifier.min = k; */ 
3031: /* MUTANT (del_stmt) */ /*                 pc = ReadCompactIndex(pc, &k); */ 
3033: /* MUTANT (del_stmt) */ /*                 curState->u.quantifier.max = k - 1; */ 
3033: /* MUTANT (rep_const) */                curState->u.quantifier.max = k - 0;
3033: /* MUTANT (rep_const) */                curState->u.quantifier.max = k - -1;
3033: /* MUTANT (rep_const) */                curState->u.quantifier.max = k - ((1)+1);
3035: /* MUTANT (rep_op) */                          < curState->u.quantifier.max);
3035: /* MUTANT (rep_op) */                          > curState->u.quantifier.max);
3035: /* MUTANT (rep_op) */                          >= curState->u.quantifier.max);
3035: /* MUTANT (rep_op) */                          == curState->u.quantifier.max);
3035: /* MUTANT (rep_op) */                          != curState->u.quantifier.max);
3038: /* MUTANT (del_stmt) */ /*                 curState->parenSoFar = parenSoFar; */ 
3039: /* MUTANT (del_stmt) */ /*                 PUSH_STATE_STACK(gData); */ 
3040: /* MUTANT (rep_op) */                if (curState->u.quantifier.min == 0) {
3040: /* MUTANT (rep_const) */                if (curState->u.quantifier.min != 1) {
3040: /* MUTANT (rep_const) */                if (curState->u.quantifier.min != -1) {
3040: /* MUTANT (negate) */                if(! (curState->u.quantifier.min != 0)) {
3041: /* MUTANT (del_stmt) */ /*                     curState->continue_op = REOP_MINIMALREPEAT; */ 
3042: /* MUTANT (del_stmt) */ /*                     curState->continue_pc = pc; */ 
3044: /* MUTANT (del_stmt) */ /*                     pc += OFFSET_LEN; */ 
3044: /* MUTANT (rep_op) */                    pc -= OFFSET_LEN;
3044: /* MUTANT (rep_op) */                    pc *= OFFSET_LEN;
3044: /* MUTANT (rep_op) */                    pc %= OFFSET_LEN;
3045: /* MUTANT (del_stmt) */ /*                     op = (REOp) *pc++; */ 
3045: /* MUTANT (rep_op) */                    op = (REOp) *pc--;
3048: /* MUTANT (rep_const) */                                            pc, x, x->cp, 1, 0)) {
3048: /* MUTANT (rep_const) */                                            pc, x, x->cp, -1, 0)) {
3048: /* MUTANT (rep_const) */                                            pc, x, x->cp, 0, 1)) {
3048: /* MUTANT (rep_const) */                                            pc, x, x->cp, 0, -1)) {
3049: /* MUTANT (del_stmt) */ /*                         return NULL; */ 
3051: /* MUTANT (rep_op) */                    ++gData->stateStackTop;
3052: /* MUTANT (del_stmt) */ /*                     pc = pc + GET_OFFSET(pc); */ 
3052: /* MUTANT (rep_op) */                    pc = pc - GET_OFFSET(pc);
3052: /* MUTANT (rep_op) */                    pc = pc * GET_OFFSET(pc);
3052: /* MUTANT (rep_op) */                    pc = pc % GET_OFFSET(pc);
3053: /* MUTANT (del_stmt) */ /*                     op = (REOp) *pc++; */ 
3053: /* MUTANT (rep_op) */                    op = (REOp) *pc--;
3058: /* MUTANT (rep_op) */                ++gData->stateStackTop;
3059: /* MUTANT (del_stmt) */ /*                 --curState; */ 
3059: /* MUTANT (rep_op) */                ++curState;
3061: /* MUTANT (negate) */                if(! (!result)) {
3065: /* MUTANT (rep_op) */                    if (curState->u.quantifier.max != (uintN) -1 ||
3065: /* MUTANT (rep_op) */                    if (curState->u.quantifier.max == (uintN) -1 &&
3065: /* MUTANT (rep_const) */                    if (curState->u.quantifier.max == (uintN) 0 ||
3065: /* MUTANT (rep_const) */                    if (curState->u.quantifier.max == (uintN) 1 ||
3065: /* MUTANT (rep_const) */                    if (curState->u.quantifier.max == (uintN) ((-1)+1) ||
3065: /* MUTANT (rep_const) */                    if (curState->u.quantifier.max == (uintN) ((-1)-1) ||
3065: /* MUTANT (negate) */                    if (curState->u.quantif(!ier.max == (uintN)) -1 ||
3066: /* MUTANT (rep_op) */                        curState->u.quantifier.max <= 0) {
3066: /* MUTANT (rep_op) */                        curState->u.quantifier.max < 0) {
3066: /* MUTANT (rep_op) */                        curState->u.quantifier.max >= 0) {
3066: /* MUTANT (rep_op) */                        curState->u.quantifier.max == 0) {
3066: /* MUTANT (rep_op) */                        curState->u.quantifier.max != 0) {
3066: /* MUTANT (rep_const) */                        curState->u.quantifier.max > 1) {
3066: /* MUTANT (rep_const) */                        curState->u.quantifier.max > -1) {
3067: /* MUTANT (del_stmt) */ /*                         curState->index = x->cp - gData->cpbegin; */ 
3068: /* MUTANT (del_stmt) */ /*                         curState->continue_op = REOP_MINIMALREPEAT; */ 
3069: /* MUTANT (del_stmt) */ /*                         curState->continue_pc = pc; */ 
3070: /* MUTANT (del_stmt) */ /*                         pc += ARG_LEN; */ 
3070: /* MUTANT (rep_op) */                        pc -= ARG_LEN;
3070: /* MUTANT (rep_op) */                        pc *= ARG_LEN;
3070: /* MUTANT (rep_op) */                        pc %= ARG_LEN;
3071: /* MUTANT (rep_op) */                        for (k = curState->parenSoFar; k <= parenSoFar; k++)
3071: /* MUTANT (rep_op) */                        for (k = curState->parenSoFar; k > parenSoFar; k++)
3071: /* MUTANT (rep_op) */                        for (k = curState->parenSoFar; k >= parenSoFar; k++)
3071: /* MUTANT (rep_op) */                        for (k = curState->parenSoFar; k == parenSoFar; k++)
3071: /* MUTANT (rep_op) */                        for (k = curState->parenSoFar; k != parenSoFar; k++)
3071: /* MUTANT (rep_op) */                        for (k = curState->parenSoFar; k < parenSoFar; k--)
3072: /* MUTANT (rep_const) */                            x->parens[k].index = 0;
3072: /* MUTANT (rep_const) */                            x->parens[k].index = 1;
3072: /* MUTANT (rep_const) */                            x->parens[k].index = ((-1)+1);
3072: /* MUTANT (rep_const) */                            x->parens[k].index = ((-1)-1);
3073: /* MUTANT (del_stmt) */ /*                         PUSH_STATE_STACK(gData); */ 
3074: /* MUTANT (del_stmt) */ /*                         op = (REOp) *pc++; */ 
3074: /* MUTANT (rep_op) */                        op = (REOp) *pc--;
3075: /* MUTANT (del_stmt) */ /*                         continue; */ 
3080: /* MUTANT (rep_op) */                if (curState->u.quantifier.min != 0 &&
3080: /* MUTANT (rep_op) */                if (curState->u.quantifier.min == 0 ||
3080: /* MUTANT (rep_const) */                if (curState->u.quantifier.min == 1 &&
3080: /* MUTANT (rep_const) */                if (curState->u.quantifier.min == -1 &&
3081: /* MUTANT (rep_op) */                    x->cp != gData->cpbegin + curState->index) {
3081: /* MUTANT (rep_op) */                    x->cp == gData->cpbegin - curState->index) {
3081: /* MUTANT (rep_op) */                    x->cp == gData->cpbegin * curState->index) {
3081: /* MUTANT (rep_op) */                    x->cp == gData->cpbegin % curState->index) {
3083: /* MUTANT (del_stmt) */ /*                     result = NULL; */ 
3084: /* MUTANT (del_stmt) */ /*                     break; */ 
3086: /* MUTANT (rep_op) */                if (curState->u.quantifier.min == 0)
3086: /* MUTANT (rep_const) */                if (curState->u.quantifier.min != 1)
3086: /* MUTANT (rep_const) */                if (curState->u.quantifier.min != -1)
3086: /* MUTANT (negate) */                if(! (curState->u.quantifier.min != 0))
3087: /* MUTANT (rep_op) */                    curState->u.quantifier.min++;
3088: /* MUTANT (rep_op) */                if (curState->u.quantifier.max == (uintN) -1)
3088: /* MUTANT (rep_const) */                if (curState->u.quantifier.max != (uintN) 0)
3088: /* MUTANT (rep_const) */                if (curState->u.quantifier.max != (uintN) 1)
3088: /* MUTANT (rep_const) */                if (curState->u.quantifier.max != (uintN) ((-1)+1))
3088: /* MUTANT (rep_const) */                if (curState->u.quantifier.max != (uintN) ((-1)-1))
3088: /* MUTANT (negate) */                if(! (curState->u.quantifier.max != (uintN) -1))
3089: /* MUTANT (rep_op) */                    curState->u.quantifier.max++;
3090: /* MUTANT (rep_op) */                if (curState->u.quantifier.min == 0) {
3090: /* MUTANT (rep_const) */                if (curState->u.quantifier.min != 1) {
3090: /* MUTANT (rep_const) */                if (curState->u.quantifier.min != -1) {
3090: /* MUTANT (negate) */                if(! (curState->u.quantifier.min != 0)) {
3091: /* MUTANT (del_stmt) */ /*                     curState->continue_op = REOP_MINIMALREPEAT; */ 
3092: /* MUTANT (del_stmt) */ /*                     curState->continue_pc = pc; */ 
3093: /* MUTANT (del_stmt) */ /*                     pc += ARG_LEN; */ 
3093: /* MUTANT (rep_op) */                    pc -= ARG_LEN;
3093: /* MUTANT (rep_op) */                    pc *= ARG_LEN;
3093: /* MUTANT (rep_op) */                    pc %= ARG_LEN;
3094: /* MUTANT (rep_op) */                    for (k = curState->parenSoFar; k <= parenSoFar; k++)
3094: /* MUTANT (rep_op) */                    for (k = curState->parenSoFar; k > parenSoFar; k++)
3094: /* MUTANT (rep_op) */                    for (k = curState->parenSoFar; k >= parenSoFar; k++)
3094: /* MUTANT (rep_op) */                    for (k = curState->parenSoFar; k == parenSoFar; k++)
3094: /* MUTANT (rep_op) */                    for (k = curState->parenSoFar; k != parenSoFar; k++)
3094: /* MUTANT (rep_op) */                    for (k = curState->parenSoFar; k < parenSoFar; k--)
3095: /* MUTANT (rep_const) */                        x->parens[k].index = 0;
3095: /* MUTANT (rep_const) */                        x->parens[k].index = 1;
3095: /* MUTANT (rep_const) */                        x->parens[k].index = ((-1)+1);
3095: /* MUTANT (rep_const) */                        x->parens[k].index = ((-1)-1);
3096: /* MUTANT (del_stmt) */ /*                     curState->index = x->cp - gData->cpbegin; */ 
3097: /* MUTANT (del_stmt) */ /*                     PUSH_STATE_STACK(gData); */ 
3098: /* MUTANT (del_stmt) */ /*                     op = (REOp) *pc++; */ 
3098: /* MUTANT (rep_op) */                    op = (REOp) *pc--;
3099: /* MUTANT (del_stmt) */ /*                     continue; */ 
3102: /* MUTANT (del_stmt) */ /*                 curState->parenSoFar = parenSoFar; */ 
3103: /* MUTANT (del_stmt) */ /*                 PUSH_STATE_STACK(gData); */ 
3108: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
3110: /* MUTANT (rep_op) */                ++gData->stateStackTop;
3111: /* MUTANT (del_stmt) */ /*                 pc = pc + GET_OFFSET(pc); */ 
3111: /* MUTANT (rep_op) */                pc = pc - GET_OFFSET(pc);
3111: /* MUTANT (rep_op) */                pc = pc * GET_OFFSET(pc);
3111: /* MUTANT (rep_op) */                pc = pc % GET_OFFSET(pc);
3112: /* MUTANT (del_stmt) */ /*                 op = (REOp) *pc++; */ 
3112: /* MUTANT (rep_op) */                op = (REOp) *pc--;
3113: /* MUTANT (del_stmt) */ /*                 continue; */ 
3117: /* MUTANT (del_stmt) */ /*                 result = NULL; */ 
3126: /* MUTANT (negate) */        if(! (!result)) {
3127: /* MUTANT (rep_op) */            if (gData->cursz != 0)
3127: /* MUTANT (rep_const) */            if (gData->cursz == 1)
3127: /* MUTANT (rep_const) */            if (gData->cursz == -1)
3127: /* MUTANT (negate) */            if(! (gData->cursz == 0))
3129: /* MUTANT (del_stmt) */ /*             backTrackData = gData->backTrackSP; */ 
3130: /* MUTANT (del_stmt) */ /*             gData->cursz = backTrackData->sz; */ 
3133: /* MUTANT (del_stmt) */ /*             x->cp = backTrackData->cp; */ 
3134: /* MUTANT (del_stmt) */ /*             pc = backTrackData->backtrack_pc; */ 
3135: /* MUTANT (del_stmt) */ /*             op = backTrackData->backtrack_op; */ 
3136: /* MUTANT (del_stmt) */ /*             gData->stateStackTop = backTrackData->saveStateStackTop; */ 
3137: /* MUTANT (del_stmt) */ /*             JS_ASSERT(gData->stateStackTop); */ 
3139: /* MUTANT (rep_op) */            memcpy(gData->stateStack, backTrackData - 1,
3139: /* MUTANT (rep_op) */            memcpy(gData->stateStack, backTrackData * 1,
3139: /* MUTANT (rep_op) */            memcpy(gData->stateStack, backTrackData % 1,
3139: /* MUTANT (rep_const) */            memcpy(gData->stateStack, backTrackData + 0,
3139: /* MUTANT (rep_const) */            memcpy(gData->stateStack, backTrackData + -1,
3139: /* MUTANT (rep_const) */            memcpy(gData->stateStack, backTrackData + ((1)+1),
3141: /* MUTANT (del_stmt) */ /*             curState = &gData->stateStack[gData->stateStackTop - 1]; */ 
3141: /* MUTANT (rep_const) */            curState = &gData->stateStack[gData->stateStackTop - 0];
3141: /* MUTANT (rep_const) */            curState = &gData->stateStack[gData->stateStackTop - -1];
3141: /* MUTANT (rep_const) */            curState = &gData->stateStack[gData->stateStackTop - ((1)+1)];
3143: /* MUTANT (negate) */            if(! (backTrackData->parenCount)) {
3145: /* MUTANT (rep_op) */                       (char *)(backTrackData - 1) +
3145: /* MUTANT (rep_op) */                       (char *)(backTrackData * 1) +
3145: /* MUTANT (rep_op) */                       (char *)(backTrackData % 1) +
3145: /* MUTANT (rep_op) */                       (char *)(backTrackData + 1) -
3145: /* MUTANT (rep_op) */                       (char *)(backTrackData + 1) *
3145: /* MUTANT (rep_op) */                       (char *)(backTrackData + 1) %
3145: /* MUTANT (rep_const) */                       (char *)(backTrackData + 0) +
3145: /* MUTANT (rep_const) */                       (char *)(backTrackData + -1) +
3145: /* MUTANT (rep_const) */                       (char *)(backTrackData + ((1)+1)) +
3148: /* MUTANT (del_stmt) */ /*                 parenSoFar = backTrackData->parenIndex + backTrackData->parenCount; */ 
3148: /* MUTANT (rep_op) */                parenSoFar = backTrackData->parenIndex - backTrackData->parenCount;
3148: /* MUTANT (rep_op) */                parenSoFar = backTrackData->parenIndex * backTrackData->parenCount;
3148: /* MUTANT (rep_op) */                parenSoFar = backTrackData->parenIndex % backTrackData->parenCount;
3150: /* MUTANT (rep_op) */                for (k = curState->parenSoFar; k <= parenSoFar; k++)
3150: /* MUTANT (rep_op) */                for (k = curState->parenSoFar; k > parenSoFar; k++)
3150: /* MUTANT (rep_op) */                for (k = curState->parenSoFar; k >= parenSoFar; k++)
3150: /* MUTANT (rep_op) */                for (k = curState->parenSoFar; k == parenSoFar; k++)
3150: /* MUTANT (rep_op) */                for (k = curState->parenSoFar; k != parenSoFar; k++)
3150: /* MUTANT (rep_op) */                for (k = curState->parenSoFar; k < parenSoFar; k--)
3151: /* MUTANT (rep_const) */                    x->parens[k].index = 0;
3151: /* MUTANT (rep_const) */                    x->parens[k].index = 1;
3151: /* MUTANT (rep_const) */                    x->parens[k].index = ((-1)+1);
3151: /* MUTANT (rep_const) */                    x->parens[k].index = ((-1)-1);
3152: /* MUTANT (del_stmt) */ /*                 parenSoFar = curState->parenSoFar; */ 
3161: /* MUTANT (del_stmt) */ /*         op = (REOp)*pc++; */ 
3161: /* MUTANT (rep_op) */        op = (REOp)*pc--;
3169: /* MUTANT (del_stmt) */ /*     REMatchState *result; */ 
3170: /* MUTANT (del_stmt) */ /*     const jschar *cp = x->cp; */ 
3171: /* MUTANT (del_stmt) */ /*     const jschar *cp2; */ 
3172: /* MUTANT (del_stmt) */ /*     uintN j; */ 
3178: /* MUTANT (rep_op) */    for (cp2 = cp; cp2 < gData->cpend; cp2++) {
3178: /* MUTANT (rep_op) */    for (cp2 = cp; cp2 > gData->cpend; cp2++) {
3178: /* MUTANT (rep_op) */    for (cp2 = cp; cp2 >= gData->cpend; cp2++) {
3178: /* MUTANT (rep_op) */    for (cp2 = cp; cp2 == gData->cpend; cp2++) {
3178: /* MUTANT (rep_op) */    for (cp2 = cp; cp2 != gData->cpend; cp2++) {
3178: /* MUTANT (rep_op) */    for (cp2 = cp; cp2 <= gData->cpend; cp2--) {
3179: /* MUTANT (del_stmt) */ /*         gData->skipped = cp2 - cp; */ 
3180: /* MUTANT (del_stmt) */ /*         x->cp = cp2; */ 
3181: /* MUTANT (rep_op) */        for (j = 0; j <= gData->regexp->parenCount; j++)
3181: /* MUTANT (rep_op) */        for (j = 0; j > gData->regexp->parenCount; j++)
3181: /* MUTANT (rep_op) */        for (j = 0; j >= gData->regexp->parenCount; j++)
3181: /* MUTANT (rep_op) */        for (j = 0; j == gData->regexp->parenCount; j++)
3181: /* MUTANT (rep_op) */        for (j = 0; j != gData->regexp->parenCount; j++)
3181: /* MUTANT (rep_op) */        for (j = 0; j < gData->regexp->parenCount; j--)
3181: /* MUTANT (rep_const) */        for (j = 1; j < gData->regexp->parenCount; j++)
3181: /* MUTANT (rep_const) */        for (j = -1; j < gData->regexp->parenCount; j++)
3182: /* MUTANT (rep_const) */            x->parens[j].index = 0;
3182: /* MUTANT (rep_const) */            x->parens[j].index = 1;
3182: /* MUTANT (rep_const) */            x->parens[j].index = ((-1)+1);
3182: /* MUTANT (rep_const) */            x->parens[j].index = ((-1)-1);
3183: /* MUTANT (del_stmt) */ /*         result = ExecuteREBytecode(gData, x); */ 
3184: /* MUTANT (rep_op) */        if (!gData->ok && result)
3184: /* MUTANT (negate) */        if(! (!gData->ok || result))
3186: /* MUTANT (del_stmt) */ /*         gData->backTrackSP = gData->backTrackStack; */ 
3187: /* MUTANT (del_stmt) */ /*         gData->cursz = 0; */ 
3187: /* MUTANT (rep_const) */        gData->cursz = 1;
3187: /* MUTANT (rep_const) */        gData->cursz = -1;
3188: /* MUTANT (del_stmt) */ /*         gData->stateStackTop = 0; */ 
3188: /* MUTANT (rep_const) */        gData->stateStackTop = 1;
3188: /* MUTANT (rep_const) */        gData->stateStackTop = -1;
3189: /* MUTANT (del_stmt) */ /*         cp2 = cp + gData->skipped; */ 
3189: /* MUTANT (rep_op) */        cp2 = cp - gData->skipped;
3189: /* MUTANT (rep_op) */        cp2 = cp * gData->skipped;
3189: /* MUTANT (rep_op) */        cp2 = cp % gData->skipped;
3198: /* MUTANT (del_stmt) */ /*     REMatchState *result; */ 
3199: /* MUTANT (del_stmt) */ /*     uintN i; */ 
3201: /* MUTANT (del_stmt) */ /*     gData->backTrackStackSize = INITIAL_BACKTRACK; */ 
3205: /* MUTANT (negate) */    if(! (!gData->backTrackStack))
3207: /* MUTANT (del_stmt) */ /*     gData->backTrackSP = gData->backTrackStack; */ 
3208: /* MUTANT (del_stmt) */ /*     gData->cursz = 0; */ 
3208: /* MUTANT (rep_const) */    gData->cursz = 1;
3208: /* MUTANT (rep_const) */    gData->cursz = -1;
3211: /* MUTANT (del_stmt) */ /*     gData->stateStackLimit = INITIAL_STATESTACK; */ 
3215: /* MUTANT (negate) */    if(! (!gData->stateStack))
3217: /* MUTANT (del_stmt) */ /*     gData->stateStackTop = 0; */ 
3217: /* MUTANT (rep_const) */    gData->stateStackTop = 1;
3217: /* MUTANT (rep_const) */    gData->stateStackTop = -1;
3219: /* MUTANT (del_stmt) */ /*     gData->cx = cx; */ 
3220: /* MUTANT (del_stmt) */ /*     gData->regexp = re; */ 
3221: /* MUTANT (del_stmt) */ /*     gData->ok = JS_TRUE; */ 
3226: /* MUTANT (rep_op) */                           - re->parenCount * sizeof(RECapture));
3226: /* MUTANT (rep_op) */                           * re->parenCount * sizeof(RECapture));
3226: /* MUTANT (rep_op) */                           % re->parenCount * sizeof(RECapture));
3227: /* MUTANT (negate) */    if(! (!result))
3230: /* MUTANT (rep_op) */    for (i = 0; i <= re->classCount; i++)
3230: /* MUTANT (rep_op) */    for (i = 0; i > re->classCount; i++)
3230: /* MUTANT (rep_op) */    for (i = 0; i >= re->classCount; i++)
3230: /* MUTANT (rep_op) */    for (i = 0; i == re->classCount; i++)
3230: /* MUTANT (rep_op) */    for (i = 0; i != re->classCount; i++)
3230: /* MUTANT (rep_op) */    for (i = 0; i < re->classCount; i--)
3230: /* MUTANT (rep_const) */    for (i = 1; i < re->classCount; i++)
3230: /* MUTANT (rep_const) */    for (i = -1; i < re->classCount; i++)
3231: /* MUTANT (negate) */        if(! (!re->classList[i].converted))
3232: /* MUTANT (negate) */            if(! (!ProcessCharSet(gData, &re->classList[i])))
3235: /* MUTANT (del_stmt) */ /*     return result; */ 
3242: /* MUTANT (del_stmt) */ /*     REGlobalData gData; */ 
3243: /* MUTANT (del_stmt) */ /*     REMatchState *x, *result; */ 
3245: /* MUTANT (del_stmt) */ /*     const jschar *cp, *ep; */ 
3246: /* MUTANT (del_stmt) */ /*     size_t i, length, start; */ 
3247: /* MUTANT (del_stmt) */ /*     JSSubString *morepar; */ 
3248: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
3249: /* MUTANT (del_stmt) */ /*     JSRegExpStatics *res; */ 
3250: /* MUTANT (del_stmt) */ /*     ptrdiff_t matchlen; */ 
3251: /* MUTANT (del_stmt) */ /*     uintN num, morenum; */ 
3252: /* MUTANT (del_stmt) */ /*     JSString *parstr, *matchstr; */ 
3253: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
3255: /* MUTANT (del_stmt) */ /*     RECapture *parsub = NULL; */ 
3261: /* MUTANT (del_stmt) */ /*     start = *indexp; */ 
3262: /* MUTANT (del_stmt) */ /*     length = JSSTRING_LENGTH(str); */ 
3263: /* MUTANT (rep_op) */    if (start <= length)
3263: /* MUTANT (rep_op) */    if (start < length)
3263: /* MUTANT (rep_op) */    if (start >= length)
3263: /* MUTANT (rep_op) */    if (start == length)
3263: /* MUTANT (rep_op) */    if (start != length)
3263: /* MUTANT (negate) */    if(! (start > length))
3265: /* MUTANT (del_stmt) */ /*     cp = JSSTRING_CHARS(str); */ 
3266: /* MUTANT (del_stmt) */ /*     gData.cpbegin = cp; */ 
3267: /* MUTANT (del_stmt) */ /*     gData.cpend = cp + length; */ 
3267: /* MUTANT (rep_op) */    gData.cpend = cp - length;
3267: /* MUTANT (rep_op) */    gData.cpend = cp * length;
3267: /* MUTANT (rep_op) */    gData.cpend = cp % length;
3268: /* MUTANT (del_stmt) */ /*     cp += start; */ 
3268: /* MUTANT (rep_op) */    cp -= start;
3268: /* MUTANT (rep_op) */    cp *= start;
3268: /* MUTANT (rep_op) */    cp %= start;
3269: /* MUTANT (del_stmt) */ /*     gData.start = start; */ 
3270: /* MUTANT (del_stmt) */ /*     gData.skipped = 0; */ 
3270: /* MUTANT (rep_const) */    gData.skipped = 1;
3270: /* MUTANT (rep_const) */    gData.skipped = -1;
3272: /* MUTANT (del_stmt) */ /*     JS_InitArenaPool(&gData.pool, "RegExpPool", 8096, 4); */ 
3272: /* MUTANT (rep_const) */    JS_InitArenaPool(&gData.pool, "RegExpPool", 0, 4);
3272: /* MUTANT (rep_const) */    JS_InitArenaPool(&gData.pool, "RegExpPool", 1, 4);
3272: /* MUTANT (rep_const) */    JS_InitArenaPool(&gData.pool, "RegExpPool", -1, 4);
3272: /* MUTANT (rep_const) */    JS_InitArenaPool(&gData.pool, "RegExpPool", ((8096)+1), 4);
3272: /* MUTANT (rep_const) */    JS_InitArenaPool(&gData.pool, "RegExpPool", ((8096)-1), 4);
3272: /* MUTANT (rep_const) */    JS_InitArenaPool(&gData.pool, "RegExpPool", 8096, 0);
3272: /* MUTANT (rep_const) */    JS_InitArenaPool(&gData.pool, "RegExpPool", 8096, 1);
3272: /* MUTANT (rep_const) */    JS_InitArenaPool(&gData.pool, "RegExpPool", 8096, -1);
3272: /* MUTANT (rep_const) */    JS_InitArenaPool(&gData.pool, "RegExpPool", 8096, ((4)+1));
3272: /* MUTANT (rep_const) */    JS_InitArenaPool(&gData.pool, "RegExpPool", 8096, ((4)-1));
3273: /* MUTANT (del_stmt) */ /*     x = InitMatch(cx, &gData, re); */ 
3274: /* MUTANT (negate) */    if(! (!x))
3276: /* MUTANT (del_stmt) */ /*     x->cp = cp; */ 
3282: /* MUTANT (del_stmt) */ /*     result = MatchRegExp(&gData, x); */ 
3283: /* MUTANT (del_stmt) */ /*     ok = gData.ok; */ 
3284: /* MUTANT (negate) */    if(! (!ok))
3286: /* MUTANT (negate) */    if(! (!result)) {
3287: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_NULL; */ 
3288: /* MUTANT (del_stmt) */ /*         goto out; */ 
3291: /* MUTANT (del_stmt) */ /*     i = cp - gData.cpbegin; */ 
3292: /* MUTANT (del_stmt) */ /*     *indexp = i; */ 
3293: /* MUTANT (del_stmt) */ /*     matchlen = i - (start + gData.skipped); */ 
3293: /* MUTANT (rep_op) */    matchlen = i - (start - gData.skipped);
3293: /* MUTANT (rep_op) */    matchlen = i - (start * gData.skipped);
3293: /* MUTANT (rep_op) */    matchlen = i - (start % gData.skipped);
3294: /* MUTANT (del_stmt) */ /*     ep = cp; */ 
3295: /* MUTANT (del_stmt) */ /*     cp -= matchlen; */ 
3295: /* MUTANT (rep_op) */    cp += matchlen;
3295: /* MUTANT (rep_op) */    cp *= matchlen;
3295: /* MUTANT (rep_op) */    cp %= matchlen;
3297: /* MUTANT (negate) */    if(! (test)) {
3302: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_TRUE; */ 
3305: /* MUTANT (del_stmt) */ /*         obj = NULL; */ 
3313: /* MUTANT (del_stmt) */ /*         obj = js_NewArrayObject(cx, 0, NULL); */ 
3313: /* MUTANT (rep_const) */        obj = js_NewArrayObject(cx, 1, NULL);
3313: /* MUTANT (rep_const) */        obj = js_NewArrayObject(cx, -1, NULL);
3314: /* MUTANT (negate) */        if(! (!obj)) {
3315: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
3316: /* MUTANT (del_stmt) */ /*             goto out; */ 
3324: /* MUTANT (negate) */    if(! (!ok)) {                                                                \
3331: /* MUTANT (rep_const) */        matchstr = js_NewStringCopyN(cx, cp, matchlen, 1);
3331: /* MUTANT (rep_const) */        matchstr = js_NewStringCopyN(cx, cp, matchlen, -1);
3332: /* MUTANT (negate) */        if(! (!matchstr)) {
3333: /* MUTANT (del_stmt) */ /*             cx->newborn[GCX_OBJECT] = NULL; */ 
3334: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
3335: /* MUTANT (del_stmt) */ /*             goto out; */ 
3337: /* MUTANT (rep_const) */        DEFVAL(STRING_TO_JSVAL(matchstr), INT_TO_JSID(1));
3337: /* MUTANT (rep_const) */        DEFVAL(STRING_TO_JSVAL(matchstr), INT_TO_JSID(-1));
3341: /* MUTANT (del_stmt) */ /*     res->input = str; */ 
3342: /* MUTANT (del_stmt) */ /*     res->parenCount = re->parenCount; */ 
3343: /* MUTANT (rep_op) */    if (re->parenCount != 0) {
3343: /* MUTANT (rep_const) */    if (re->parenCount == 1) {
3343: /* MUTANT (rep_const) */    if (re->parenCount == -1) {
3343: /* MUTANT (negate) */    if(! (re->parenCount == 0)) {
3344: /* MUTANT (del_stmt) */ /*         res->lastParen = js_EmptySubString; */ 
3346: /* MUTANT (rep_op) */        for (num = 0; num <= re->parenCount; num++) {
3346: /* MUTANT (rep_op) */        for (num = 0; num > re->parenCount; num++) {
3346: /* MUTANT (rep_op) */        for (num = 0; num >= re->parenCount; num++) {
3346: /* MUTANT (rep_op) */        for (num = 0; num == re->parenCount; num++) {
3346: /* MUTANT (rep_op) */        for (num = 0; num != re->parenCount; num++) {
3346: /* MUTANT (rep_op) */        for (num = 0; num < re->parenCount; num--) {
3346: /* MUTANT (rep_const) */        for (num = 1; num < re->parenCount; num++) {
3346: /* MUTANT (rep_const) */        for (num = -1; num < re->parenCount; num++) {
3347: /* MUTANT (del_stmt) */ /*             parsub = &result->parens[num]; */ 
3348: /* MUTANT (rep_op) */            if (num <= 9) {
3348: /* MUTANT (rep_op) */            if (num > 9) {
3348: /* MUTANT (rep_op) */            if (num >= 9) {
3348: /* MUTANT (rep_op) */            if (num == 9) {
3348: /* MUTANT (rep_op) */            if (num != 9) {
3348: /* MUTANT (rep_const) */            if (num < 0) {
3348: /* MUTANT (rep_const) */            if (num < 1) {
3348: /* MUTANT (rep_const) */            if (num < -1) {
3348: /* MUTANT (rep_const) */            if (num < ((9)+1)) {
3348: /* MUTANT (rep_const) */            if (num < ((9)-1)) {
3348: /* MUTANT (negate) */            if(! (num < 9)) {
3349: /* MUTANT (rep_op) */                if (parsub->index != -1) {
3349: /* MUTANT (rep_const) */                if (parsub->index == 0) {
3349: /* MUTANT (rep_const) */                if (parsub->index == 1) {
3349: /* MUTANT (rep_const) */                if (parsub->index == ((-1)+1)) {
3349: /* MUTANT (rep_const) */                if (parsub->index == ((-1)-1)) {
3349: /* MUTANT (negate) */                if(! (parsub->index == -1)) {
3350: /* MUTANT (del_stmt) */ /*                     res->parens[num].chars = NULL; */ 
3351: /* MUTANT (del_stmt) */ /*                     res->parens[num].length = 0; */ 
3351: /* MUTANT (rep_const) */                    res->parens[num].length = 1;
3351: /* MUTANT (rep_const) */                    res->parens[num].length = -1;
3353: /* MUTANT (del_stmt) */ /*                     res->parens[num].chars = gData.cpbegin + parsub->index; */ 
3353: /* MUTANT (rep_op) */                    res->parens[num].chars = gData.cpbegin - parsub->index;
3353: /* MUTANT (rep_op) */                    res->parens[num].chars = gData.cpbegin * parsub->index;
3353: /* MUTANT (rep_op) */                    res->parens[num].chars = gData.cpbegin % parsub->index;
3354: /* MUTANT (del_stmt) */ /*                     res->parens[num].length = parsub->length; */ 
3357: /* MUTANT (del_stmt) */ /*                 morenum = num - 9; */ 
3357: /* MUTANT (rep_const) */                morenum = num - 0;
3357: /* MUTANT (rep_const) */                morenum = num - 1;
3357: /* MUTANT (rep_const) */                morenum = num - -1;
3357: /* MUTANT (rep_const) */                morenum = num - ((9)+1);
3357: /* MUTANT (rep_const) */                morenum = num - ((9)-1);
3358: /* MUTANT (del_stmt) */ /*                 morepar = res->moreParens; */ 
3359: /* MUTANT (negate) */                if(! (!morepar)) {
3360: /* MUTANT (del_stmt) */ /*                     res->moreLength = 10; */ 
3360: /* MUTANT (rep_const) */                    res->moreLength = 0;
3360: /* MUTANT (rep_const) */                    res->moreLength = 1;
3360: /* MUTANT (rep_const) */                    res->moreLength = -1;
3360: /* MUTANT (rep_const) */                    res->moreLength = ((10)+1);
3360: /* MUTANT (rep_const) */                    res->moreLength = ((10)-1);
3362: /* MUTANT (rep_const) */                        JS_malloc(cx, 0 * sizeof(JSSubString));
3362: /* MUTANT (rep_const) */                        JS_malloc(cx, 1 * sizeof(JSSubString));
3362: /* MUTANT (rep_const) */                        JS_malloc(cx, -1 * sizeof(JSSubString));
3362: /* MUTANT (rep_const) */                        JS_malloc(cx, ((10)+1) * sizeof(JSSubString));
3362: /* MUTANT (rep_const) */                        JS_malloc(cx, ((10)-1) * sizeof(JSSubString));
3363: /* MUTANT (rep_op) */                } else if (morenum <= res->moreLength) {
3363: /* MUTANT (rep_op) */                } else if (morenum < res->moreLength) {
3363: /* MUTANT (rep_op) */                } else if (morenum > res->moreLength) {
3363: /* MUTANT (rep_op) */                } else if (morenum == res->moreLength) {
3363: /* MUTANT (rep_op) */                } else if (morenum != res->moreLength) {
3363: /* MUTANT (negate) */                } else if(! (morenum >= res->moreLength)) {
3364: /* MUTANT (del_stmt) */ /*                     res->moreLength += 10; */ 
3364: /* MUTANT (rep_op) */                    res->moreLength -= 10;
3364: /* MUTANT (rep_op) */                    res->moreLength *= 10;
3364: /* MUTANT (rep_op) */                    res->moreLength %= 10;
3364: /* MUTANT (rep_const) */                    res->moreLength += 0;
3364: /* MUTANT (rep_const) */                    res->moreLength += 1;
3364: /* MUTANT (rep_const) */                    res->moreLength += -1;
3364: /* MUTANT (rep_const) */                    res->moreLength += ((10)+1);
3364: /* MUTANT (rep_const) */                    res->moreLength += ((10)-1);
3369: /* MUTANT (negate) */                if(! (!morepar)) {
3370: /* MUTANT (del_stmt) */ /*                     cx->newborn[GCX_OBJECT] = NULL; */ 
3371: /* MUTANT (del_stmt) */ /*                     cx->newborn[GCX_STRING] = NULL; */ 
3372: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
3373: /* MUTANT (del_stmt) */ /*                     goto out; */ 
3376: /* MUTANT (rep_op) */                if (parsub->index != -1) {
3376: /* MUTANT (rep_const) */                if (parsub->index == 0) {
3376: /* MUTANT (rep_const) */                if (parsub->index == 1) {
3376: /* MUTANT (rep_const) */                if (parsub->index == ((-1)+1)) {
3376: /* MUTANT (rep_const) */                if (parsub->index == ((-1)-1)) {
3376: /* MUTANT (negate) */                if(! (parsub->index == -1)) {
3377: /* MUTANT (del_stmt) */ /*                     morepar[morenum].chars = NULL; */ 
3378: /* MUTANT (del_stmt) */ /*                     morepar[morenum].length = 0; */ 
3378: /* MUTANT (rep_const) */                    morepar[morenum].length = 1;
3378: /* MUTANT (rep_const) */                    morepar[morenum].length = -1;
3380: /* MUTANT (del_stmt) */ /*                     morepar[morenum].chars = gData.cpbegin + parsub->index; */ 
3380: /* MUTANT (rep_op) */                    morepar[morenum].chars = gData.cpbegin - parsub->index;
3380: /* MUTANT (rep_op) */                    morepar[morenum].chars = gData.cpbegin * parsub->index;
3380: /* MUTANT (rep_op) */                    morepar[morenum].chars = gData.cpbegin % parsub->index;
3381: /* MUTANT (del_stmt) */ /*                     morepar[morenum].length = parsub->length; */ 
3384: /* MUTANT (negate) */            if(! (test))
3386: /* MUTANT (rep_op) */            if (parsub->index != -1) {
3386: /* MUTANT (rep_const) */            if (parsub->index == 0) {
3386: /* MUTANT (rep_const) */            if (parsub->index == 1) {
3386: /* MUTANT (rep_const) */            if (parsub->index == ((-1)+1)) {
3386: /* MUTANT (rep_const) */            if (parsub->index == ((-1)-1)) {
3386: /* MUTANT (negate) */            if(! (parsub->index == -1)) {
3387: /* MUTANT (rep_op) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num - 1),
3387: /* MUTANT (rep_op) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num * 1),
3387: /* MUTANT (rep_op) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num % 1),
3387: /* MUTANT (rep_const) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num + 0),
3387: /* MUTANT (rep_const) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num + -1),
3387: /* MUTANT (rep_const) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num + ((1)+1)),
3391: /* MUTANT (rep_op) */                parstr = js_NewStringCopyN(cx, gData.cpbegin - parsub->index,
3391: /* MUTANT (rep_op) */                parstr = js_NewStringCopyN(cx, gData.cpbegin * parsub->index,
3391: /* MUTANT (rep_op) */                parstr = js_NewStringCopyN(cx, gData.cpbegin % parsub->index,
3392: /* MUTANT (rep_const) */                                           parsub->length, 1);
3392: /* MUTANT (rep_const) */                                           parsub->length, -1);
3393: /* MUTANT (negate) */                if(! (!parstr)) {
3394: /* MUTANT (del_stmt) */ /*                     cx->newborn[GCX_OBJECT] = NULL; */ 
3395: /* MUTANT (del_stmt) */ /*                     cx->newborn[GCX_STRING] = NULL; */ 
3396: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
3397: /* MUTANT (del_stmt) */ /*                     goto out; */ 
3399: /* MUTANT (rep_op) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num - 1),
3399: /* MUTANT (rep_op) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num * 1),
3399: /* MUTANT (rep_op) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num % 1),
3399: /* MUTANT (rep_const) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num + 0),
3399: /* MUTANT (rep_const) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num + -1),
3399: /* MUTANT (rep_const) */                ok = js_DefineProperty(cx, obj, INT_TO_JSID(num + ((1)+1)),
3403: /* MUTANT (negate) */            if(! (!ok)) {
3404: /* MUTANT (del_stmt) */ /*                 cx->newborn[GCX_OBJECT] = NULL; */ 
3405: /* MUTANT (del_stmt) */ /*                 cx->newborn[GCX_STRING] = NULL; */ 
3406: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3409: /* MUTANT (rep_op) */        if (parsub->index != -1) {
3409: /* MUTANT (rep_const) */        if (parsub->index == 0) {
3409: /* MUTANT (rep_const) */        if (parsub->index == 1) {
3409: /* MUTANT (rep_const) */        if (parsub->index == ((-1)+1)) {
3409: /* MUTANT (rep_const) */        if (parsub->index == ((-1)-1)) {
3409: /* MUTANT (negate) */        if(! (parsub->index == -1)) {
3410: /* MUTANT (del_stmt) */ /*             res->lastParen = js_EmptySubString; */ 
3412: /* MUTANT (del_stmt) */ /*             res->lastParen.chars = gData.cpbegin + parsub->index; */ 
3412: /* MUTANT (rep_op) */            res->lastParen.chars = gData.cpbegin - parsub->index;
3412: /* MUTANT (rep_op) */            res->lastParen.chars = gData.cpbegin * parsub->index;
3412: /* MUTANT (rep_op) */            res->lastParen.chars = gData.cpbegin % parsub->index;
3413: /* MUTANT (del_stmt) */ /*             res->lastParen.length = parsub->length; */ 
3417: /* MUTANT (negate) */    if(! (!test)) {
3422: /* MUTANT (rep_op) */        DEFVAL(INT_TO_JSVAL(start - gData.skipped),
3422: /* MUTANT (rep_op) */        DEFVAL(INT_TO_JSVAL(start * gData.skipped),
3422: /* MUTANT (rep_op) */        DEFVAL(INT_TO_JSVAL(start % gData.skipped),
3431: /* MUTANT (del_stmt) */ /*     res->lastMatch.length = matchlen; */ 
3432: /* MUTANT (negate) */    if(! (JS_VERSION_IS_1_2(cx))) {
3443: /* MUTANT (del_stmt) */ /*         res->leftContext.chars = JSSTRING_CHARS(str) + start; */ 
3443: /* MUTANT (rep_op) */        res->leftContext.chars = JSSTRING_CHARS(str) - start;
3443: /* MUTANT (rep_op) */        res->leftContext.chars = JSSTRING_CHARS(str) * start;
3443: /* MUTANT (rep_op) */        res->leftContext.chars = JSSTRING_CHARS(str) % start;
3444: /* MUTANT (del_stmt) */ /*         res->leftContext.length = gData.skipped; */ 
3451: /* MUTANT (del_stmt) */ /*         res->leftContext.chars = JSSTRING_CHARS(str); */ 
3452: /* MUTANT (del_stmt) */ /*         res->leftContext.length = start + gData.skipped; */ 
3452: /* MUTANT (rep_op) */        res->leftContext.length = start - gData.skipped;
3452: /* MUTANT (rep_op) */        res->leftContext.length = start * gData.skipped;
3452: /* MUTANT (rep_op) */        res->leftContext.length = start % gData.skipped;
3455: /* MUTANT (del_stmt) */ /*     res->rightContext.length = gData.cpend - ep; */ 
3459: /* MUTANT (del_stmt) */ /*     return ok; */ 
3465: /* MUTANT (rep_const) */    REGEXP_SOURCE       = 0,
3465: /* MUTANT (rep_const) */    REGEXP_SOURCE       = 1,
3465: /* MUTANT (rep_const) */    REGEXP_SOURCE       = ((-1)+1),
3465: /* MUTANT (rep_const) */    REGEXP_SOURCE       = ((-1)-1),
3466: /* MUTANT (rep_const) */    REGEXP_GLOBAL       = 0,
3466: /* MUTANT (rep_const) */    REGEXP_GLOBAL       = 1,
3466: /* MUTANT (rep_const) */    REGEXP_GLOBAL       = -1,
3466: /* MUTANT (rep_const) */    REGEXP_GLOBAL       = ((-2)+1),
3466: /* MUTANT (rep_const) */    REGEXP_GLOBAL       = ((-2)-1),
3467: /* MUTANT (rep_const) */    REGEXP_IGNORE_CASE  = 0,
3467: /* MUTANT (rep_const) */    REGEXP_IGNORE_CASE  = 1,
3467: /* MUTANT (rep_const) */    REGEXP_IGNORE_CASE  = -1,
3467: /* MUTANT (rep_const) */    REGEXP_IGNORE_CASE  = ((-3)+1),
3467: /* MUTANT (rep_const) */    REGEXP_IGNORE_CASE  = ((-3)-1),
3468: /* MUTANT (rep_const) */    REGEXP_LAST_INDEX   = 0,
3468: /* MUTANT (rep_const) */    REGEXP_LAST_INDEX   = 1,
3468: /* MUTANT (rep_const) */    REGEXP_LAST_INDEX   = -1,
3468: /* MUTANT (rep_const) */    REGEXP_LAST_INDEX   = ((-4)+1),
3468: /* MUTANT (rep_const) */    REGEXP_LAST_INDEX   = ((-4)-1),
3469: /* MUTANT (rep_const) */    REGEXP_MULTILINE    = 0
3469: /* MUTANT (rep_const) */    REGEXP_MULTILINE    = 1
3469: /* MUTANT (rep_const) */    REGEXP_MULTILINE    = -1
3469: /* MUTANT (rep_const) */    REGEXP_MULTILINE    = ((-5)+1)
3469: /* MUTANT (rep_const) */    REGEXP_MULTILINE    = ((-5)-1)
3475: /* MUTANT (rep_op) */    {"source",     REGEXP_SOURCE,      REGEXP_PROP_ATTRS & JSPROP_READONLY,0,0},
3475: /* MUTANT (rep_const) */    {"source",     REGEXP_SOURCE,      REGEXP_PROP_ATTRS | JSPROP_READONLY,1,0},
3475: /* MUTANT (rep_const) */    {"source",     REGEXP_SOURCE,      REGEXP_PROP_ATTRS | JSPROP_READONLY,-1,0},
3475: /* MUTANT (rep_const) */    {"source",     REGEXP_SOURCE,      REGEXP_PROP_ATTRS | JSPROP_READONLY,0,1},
3475: /* MUTANT (rep_const) */    {"source",     REGEXP_SOURCE,      REGEXP_PROP_ATTRS | JSPROP_READONLY,0,-1},
3476: /* MUTANT (rep_op) */    {"global",     REGEXP_GLOBAL,      REGEXP_PROP_ATTRS & JSPROP_READONLY,0,0},
3476: /* MUTANT (rep_const) */    {"global",     REGEXP_GLOBAL,      REGEXP_PROP_ATTRS | JSPROP_READONLY,1,0},
3476: /* MUTANT (rep_const) */    {"global",     REGEXP_GLOBAL,      REGEXP_PROP_ATTRS | JSPROP_READONLY,-1,0},
3476: /* MUTANT (rep_const) */    {"global",     REGEXP_GLOBAL,      REGEXP_PROP_ATTRS | JSPROP_READONLY,0,1},
3476: /* MUTANT (rep_const) */    {"global",     REGEXP_GLOBAL,      REGEXP_PROP_ATTRS | JSPROP_READONLY,0,-1},
3477: /* MUTANT (rep_op) */    {"ignoreCase", REGEXP_IGNORE_CASE, REGEXP_PROP_ATTRS & JSPROP_READONLY,0,0},
3477: /* MUTANT (rep_const) */    {"ignoreCase", REGEXP_IGNORE_CASE, REGEXP_PROP_ATTRS | JSPROP_READONLY,1,0},
3477: /* MUTANT (rep_const) */    {"ignoreCase", REGEXP_IGNORE_CASE, REGEXP_PROP_ATTRS | JSPROP_READONLY,-1,0},
3477: /* MUTANT (rep_const) */    {"ignoreCase", REGEXP_IGNORE_CASE, REGEXP_PROP_ATTRS | JSPROP_READONLY,0,1},
3477: /* MUTANT (rep_const) */    {"ignoreCase", REGEXP_IGNORE_CASE, REGEXP_PROP_ATTRS | JSPROP_READONLY,0,-1},
3478: /* MUTANT (rep_const) */    {"lastIndex",  REGEXP_LAST_INDEX,  REGEXP_PROP_ATTRS,1,0},
3478: /* MUTANT (rep_const) */    {"lastIndex",  REGEXP_LAST_INDEX,  REGEXP_PROP_ATTRS,-1,0},
3478: /* MUTANT (rep_const) */    {"lastIndex",  REGEXP_LAST_INDEX,  REGEXP_PROP_ATTRS,0,1},
3478: /* MUTANT (rep_const) */    {"lastIndex",  REGEXP_LAST_INDEX,  REGEXP_PROP_ATTRS,0,-1},
3479: /* MUTANT (rep_op) */    {"multiline",  REGEXP_MULTILINE,   REGEXP_PROP_ATTRS & JSPROP_READONLY,0,0},
3479: /* MUTANT (rep_const) */    {"multiline",  REGEXP_MULTILINE,   REGEXP_PROP_ATTRS | JSPROP_READONLY,1,0},
3479: /* MUTANT (rep_const) */    {"multiline",  REGEXP_MULTILINE,   REGEXP_PROP_ATTRS | JSPROP_READONLY,-1,0},
3479: /* MUTANT (rep_const) */    {"multiline",  REGEXP_MULTILINE,   REGEXP_PROP_ATTRS | JSPROP_READONLY,0,1},
3479: /* MUTANT (rep_const) */    {"multiline",  REGEXP_MULTILINE,   REGEXP_PROP_ATTRS | JSPROP_READONLY,0,-1},
3480: /* MUTANT (rep_const) */    {1,0,0,0,0}
3480: /* MUTANT (rep_const) */    {-1,0,0,0,0}
3480: /* MUTANT (rep_const) */    {0,1,0,0,0}
3480: /* MUTANT (rep_const) */    {0,-1,0,0,0}
3480: /* MUTANT (rep_const) */    {0,0,1,0,0}
3480: /* MUTANT (rep_const) */    {0,0,-1,0,0}
3480: /* MUTANT (rep_const) */    {0,0,0,1,0}
3480: /* MUTANT (rep_const) */    {0,0,0,-1,0}
3480: /* MUTANT (rep_const) */    {0,0,0,0,1}
3480: /* MUTANT (rep_const) */    {0,0,0,0,-1}
3486: /* MUTANT (del_stmt) */ /*     jsint slot; */ 
3487: /* MUTANT (del_stmt) */ /*     JSRegExp *re; */ 
3489: /* MUTANT (negate) */    if(! (!JSVAL_IS_INT(id)))
3491: /* MUTANT (del_stmt) */ /*     slot = JSVAL_TO_INT(id); */ 
3492: /* MUTANT (rep_op) */    if (slot != REGEXP_LAST_INDEX)
3492: /* MUTANT (negate) */    if(! (slot == REGEXP_LAST_INDEX))
3493: /* MUTANT (rep_const) */        return JS_GetReservedSlot(cx, obj, 1, vp);
3493: /* MUTANT (rep_const) */        return JS_GetReservedSlot(cx, obj, -1, vp);
3495: /* MUTANT (del_stmt) */ /*     JS_LOCK_OBJ(cx, obj); */ 
3496: /* MUTANT (del_stmt) */ /*     re = (JSRegExp *) JS_GetInstancePrivate(cx, obj, &js_RegExpClass, NULL); */ 
3497: /* MUTANT (negate) */    if(! (re)) {
3501: /* MUTANT (del_stmt) */ /*             break; */ 
3503: /* MUTANT (rep_op) */            *vp = BOOLEAN_TO_JSVAL((re->flags & JSREG_GLOB) == 0);
3503: /* MUTANT (rep_const) */            *vp = BOOLEAN_TO_JSVAL((re->flags & JSREG_GLOB) != 1);
3503: /* MUTANT (rep_const) */            *vp = BOOLEAN_TO_JSVAL((re->flags & JSREG_GLOB) != -1);
3504: /* MUTANT (del_stmt) */ /*             break; */ 
3506: /* MUTANT (rep_op) */            *vp = BOOLEAN_TO_JSVAL((re->flags & JSREG_FOLD) == 0);
3506: /* MUTANT (rep_const) */            *vp = BOOLEAN_TO_JSVAL((re->flags & JSREG_FOLD) != 1);
3506: /* MUTANT (rep_const) */            *vp = BOOLEAN_TO_JSVAL((re->flags & JSREG_FOLD) != -1);
3507: /* MUTANT (del_stmt) */ /*             break; */ 
3509: /* MUTANT (rep_op) */            *vp = BOOLEAN_TO_JSVAL((re->flags & JSREG_MULTILINE) == 0);
3509: /* MUTANT (rep_const) */            *vp = BOOLEAN_TO_JSVAL((re->flags & JSREG_MULTILINE) != 1);
3509: /* MUTANT (rep_const) */            *vp = BOOLEAN_TO_JSVAL((re->flags & JSREG_MULTILINE) != -1);
3510: /* MUTANT (del_stmt) */ /*             break; */ 
3514: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3520: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
3521: /* MUTANT (del_stmt) */ /*     jsint slot; */ 
3522: /* MUTANT (del_stmt) */ /*     jsdouble lastIndex; */ 
3524: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
3525: /* MUTANT (negate) */    if(! (!JSVAL_IS_INT(id)))
3527: /* MUTANT (del_stmt) */ /*     slot = JSVAL_TO_INT(id); */ 
3528: /* MUTANT (rep_op) */    if (slot != REGEXP_LAST_INDEX) {
3528: /* MUTANT (negate) */    if(! (slot == REGEXP_LAST_INDEX)) {
3529: /* MUTANT (negate) */        if(! (!js_ValueToNumber(cx, *vp, &lastIndex)))
3531: /* MUTANT (del_stmt) */ /*         lastIndex = js_DoubleToInteger(lastIndex); */ 
3532: /* MUTANT (rep_op) */        ok = js_NewNumberValue(cx, lastIndex, vp) ||
3533: /* MUTANT (rep_const) */             JS_SetReservedSlot(cx, obj, 1, *vp);
3533: /* MUTANT (rep_const) */             JS_SetReservedSlot(cx, obj, -1, *vp);
3549: /* MUTANT (rep_const) */    REGEXP_STATIC_INPUT         = 0,
3549: /* MUTANT (rep_const) */    REGEXP_STATIC_INPUT         = 1,
3549: /* MUTANT (rep_const) */    REGEXP_STATIC_INPUT         = ((-1)+1),
3549: /* MUTANT (rep_const) */    REGEXP_STATIC_INPUT         = ((-1)-1),
3550: /* MUTANT (rep_const) */    REGEXP_STATIC_MULTILINE     = 0,
3550: /* MUTANT (rep_const) */    REGEXP_STATIC_MULTILINE     = 1,
3550: /* MUTANT (rep_const) */    REGEXP_STATIC_MULTILINE     = -1,
3550: /* MUTANT (rep_const) */    REGEXP_STATIC_MULTILINE     = ((-2)+1),
3550: /* MUTANT (rep_const) */    REGEXP_STATIC_MULTILINE     = ((-2)-1),
3551: /* MUTANT (rep_const) */    REGEXP_STATIC_LAST_MATCH    = 0,
3551: /* MUTANT (rep_const) */    REGEXP_STATIC_LAST_MATCH    = 1,
3551: /* MUTANT (rep_const) */    REGEXP_STATIC_LAST_MATCH    = -1,
3551: /* MUTANT (rep_const) */    REGEXP_STATIC_LAST_MATCH    = ((-3)+1),
3551: /* MUTANT (rep_const) */    REGEXP_STATIC_LAST_MATCH    = ((-3)-1),
3552: /* MUTANT (rep_const) */    REGEXP_STATIC_LAST_PAREN    = 0,
3552: /* MUTANT (rep_const) */    REGEXP_STATIC_LAST_PAREN    = 1,
3552: /* MUTANT (rep_const) */    REGEXP_STATIC_LAST_PAREN    = -1,
3552: /* MUTANT (rep_const) */    REGEXP_STATIC_LAST_PAREN    = ((-4)+1),
3552: /* MUTANT (rep_const) */    REGEXP_STATIC_LAST_PAREN    = ((-4)-1),
3553: /* MUTANT (rep_const) */    REGEXP_STATIC_LEFT_CONTEXT  = 0,
3553: /* MUTANT (rep_const) */    REGEXP_STATIC_LEFT_CONTEXT  = 1,
3553: /* MUTANT (rep_const) */    REGEXP_STATIC_LEFT_CONTEXT  = -1,
3553: /* MUTANT (rep_const) */    REGEXP_STATIC_LEFT_CONTEXT  = ((-5)+1),
3553: /* MUTANT (rep_const) */    REGEXP_STATIC_LEFT_CONTEXT  = ((-5)-1),
3554: /* MUTANT (rep_const) */    REGEXP_STATIC_RIGHT_CONTEXT = 0
3554: /* MUTANT (rep_const) */    REGEXP_STATIC_RIGHT_CONTEXT = 1
3554: /* MUTANT (rep_const) */    REGEXP_STATIC_RIGHT_CONTEXT = -1
3554: /* MUTANT (rep_const) */    REGEXP_STATIC_RIGHT_CONTEXT = ((-6)+1)
3554: /* MUTANT (rep_const) */    REGEXP_STATIC_RIGHT_CONTEXT = ((-6)-1)
3560: /* MUTANT (del_stmt) */ /*     JS_ClearRegExpStatics(cx); */ 
3561: /* MUTANT (del_stmt) */ /*     return js_AddRoot(cx, &res->input, "res->input"); */ 
3567: /* MUTANT (negate) */    if(! (res->moreParens)) {
3568: /* MUTANT (del_stmt) */ /*         JS_free(cx, res->moreParens); */ 
3569: /* MUTANT (del_stmt) */ /*         res->moreParens = NULL; */ 
3577: /* MUTANT (del_stmt) */ /*     jsint slot; */ 
3578: /* MUTANT (del_stmt) */ /*     JSRegExpStatics *res; */ 
3579: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
3580: /* MUTANT (del_stmt) */ /*     JSSubString *sub; */ 
3582: /* MUTANT (del_stmt) */ /*     res = &cx->regExpStatics; */ 
3583: /* MUTANT (negate) */    if(! (!JSVAL_IS_INT(id)))
3585: /* MUTANT (del_stmt) */ /*     slot = JSVAL_TO_INT(id); */ 
3590: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
3593: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
3596: /* MUTANT (del_stmt) */ /*         break; */ 
3599: /* MUTANT (del_stmt) */ /*         break; */ 
3602: /* MUTANT (del_stmt) */ /*         break; */ 
3605: /* MUTANT (del_stmt) */ /*         break; */ 
3608: /* MUTANT (del_stmt) */ /*         break; */ 
3610: /* MUTANT (rep_const) */    str = js_NewStringCopyN(cx, sub->chars, sub->length, 1);
3610: /* MUTANT (rep_const) */    str = js_NewStringCopyN(cx, sub->chars, sub->length, -1);
3611: /* MUTANT (negate) */    if(! (!str))
3613: /* MUTANT (del_stmt) */ /*     *vp = STRING_TO_JSVAL(str); */ 
3614: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3620: /* MUTANT (del_stmt) */ /*     JSRegExpStatics *res; */ 
3622: /* MUTANT (negate) */    if(! (!JSVAL_IS_INT(id)))
3624: /* MUTANT (del_stmt) */ /*     res = &cx->regExpStatics; */ 
3626: /* MUTANT (rep_op) */    if (JSVAL_TO_INT(id) != REGEXP_STATIC_INPUT) {
3626: /* MUTANT (negate) */    if(! (JSVAL_TO_INT(id) == REGEXP_STATIC_INPUT)) {
3627: /* MUTANT (rep_op) */        if (!JSVAL_IS_STRING(*vp) ||
3629: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3632: /* MUTANT (rep_op) */    } else if (JSVAL_TO_INT(id) != REGEXP_STATIC_MULTILINE) {
3632: /* MUTANT (negate) */    } else if(! (JSVAL_TO_INT(id) == REGEXP_STATIC_MULTILINE)) {
3633: /* MUTANT (rep_op) */        if (!JSVAL_IS_BOOLEAN(*vp) ||
3635: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3645: /* MUTANT (rep_op) */     JSPROP_ENUMERATE&JSPROP_SHARED,
3649: /* MUTANT (rep_op) */     JSPROP_ENUMERATE&JSPROP_SHARED,
3653: /* MUTANT (rep_op) */     JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3653: /* MUTANT (rep_op) */     JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3657: /* MUTANT (rep_op) */     JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3657: /* MUTANT (rep_op) */     JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3661: /* MUTANT (rep_op) */     JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3661: /* MUTANT (rep_op) */     JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3665: /* MUTANT (rep_op) */     JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3665: /* MUTANT (rep_op) */     JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3669: /* MUTANT (rep_op) */    {"$1", 0, JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3669: /* MUTANT (rep_op) */    {"$1", 0, JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3669: /* MUTANT (rep_const) */    {"$0", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3669: /* MUTANT (rep_const) */    {"$-1", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3669: /* MUTANT (rep_const) */    {"$((1)+1)", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3669: /* MUTANT (rep_const) */    {"$1", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3669: /* MUTANT (rep_const) */    {"$1", -1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3671: /* MUTANT (rep_op) */    {"$2", 1, JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3671: /* MUTANT (rep_op) */    {"$2", 1, JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3671: /* MUTANT (rep_const) */    {"$0", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3671: /* MUTANT (rep_const) */    {"$1", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3671: /* MUTANT (rep_const) */    {"$-1", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3671: /* MUTANT (rep_const) */    {"$((2)+1)", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3671: /* MUTANT (rep_const) */    {"$((2)-1)", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3671: /* MUTANT (rep_const) */    {"$2", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3671: /* MUTANT (rep_const) */    {"$2", -1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3671: /* MUTANT (rep_const) */    {"$2", ((1)+1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_op) */    {"$3", 2, JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_op) */    {"$3", 2, JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3673: /* MUTANT (rep_const) */    {"$0", 2, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_const) */    {"$1", 2, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_const) */    {"$-1", 2, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_const) */    {"$((3)+1)", 2, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_const) */    {"$((3)-1)", 2, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_const) */    {"$3", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_const) */    {"$3", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_const) */    {"$3", -1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_const) */    {"$3", ((2)+1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3673: /* MUTANT (rep_const) */    {"$3", ((2)-1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_op) */    {"$4", 3, JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_op) */    {"$4", 3, JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3675: /* MUTANT (rep_const) */    {"$0", 3, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_const) */    {"$1", 3, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_const) */    {"$-1", 3, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_const) */    {"$((4)+1)", 3, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_const) */    {"$((4)-1)", 3, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_const) */    {"$4", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_const) */    {"$4", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_const) */    {"$4", -1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_const) */    {"$4", ((3)+1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3675: /* MUTANT (rep_const) */    {"$4", ((3)-1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_op) */    {"$5", 4, JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_op) */    {"$5", 4, JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3677: /* MUTANT (rep_const) */    {"$0", 4, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_const) */    {"$1", 4, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_const) */    {"$-1", 4, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_const) */    {"$((5)+1)", 4, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_const) */    {"$((5)-1)", 4, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_const) */    {"$5", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_const) */    {"$5", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_const) */    {"$5", -1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_const) */    {"$5", ((4)+1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3677: /* MUTANT (rep_const) */    {"$5", ((4)-1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_op) */    {"$6", 5, JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_op) */    {"$6", 5, JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3679: /* MUTANT (rep_const) */    {"$0", 5, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_const) */    {"$1", 5, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_const) */    {"$-1", 5, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_const) */    {"$((6)+1)", 5, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_const) */    {"$((6)-1)", 5, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_const) */    {"$6", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_const) */    {"$6", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_const) */    {"$6", -1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_const) */    {"$6", ((5)+1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3679: /* MUTANT (rep_const) */    {"$6", ((5)-1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_op) */    {"$7", 6, JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_op) */    {"$7", 6, JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3681: /* MUTANT (rep_const) */    {"$0", 6, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_const) */    {"$1", 6, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_const) */    {"$-1", 6, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_const) */    {"$((7)+1)", 6, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_const) */    {"$((7)-1)", 6, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_const) */    {"$7", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_const) */    {"$7", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_const) */    {"$7", -1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_const) */    {"$7", ((6)+1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3681: /* MUTANT (rep_const) */    {"$7", ((6)-1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_op) */    {"$8", 7, JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_op) */    {"$8", 7, JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3683: /* MUTANT (rep_const) */    {"$0", 7, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_const) */    {"$1", 7, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_const) */    {"$-1", 7, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_const) */    {"$((8)+1)", 7, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_const) */    {"$((8)-1)", 7, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_const) */    {"$8", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_const) */    {"$8", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_const) */    {"$8", -1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_const) */    {"$8", ((7)+1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3683: /* MUTANT (rep_const) */    {"$8", ((7)-1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_op) */    {"$9", 8, JSPROP_ENUMERATE&JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_op) */    {"$9", 8, JSPROP_ENUMERATE|JSPROP_READONLY&JSPROP_SHARED,
3685: /* MUTANT (rep_const) */    {"$0", 8, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_const) */    {"$1", 8, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_const) */    {"$-1", 8, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_const) */    {"$((9)+1)", 8, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_const) */    {"$((9)-1)", 8, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_const) */    {"$9", 0, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_const) */    {"$9", 1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_const) */    {"$9", -1, JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_const) */    {"$9", ((8)+1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3685: /* MUTANT (rep_const) */    {"$9", ((8)-1), JSPROP_ENUMERATE|JSPROP_READONLY|JSPROP_SHARED,
3688: /* MUTANT (rep_const) */    {1,0,0,0,0}
3688: /* MUTANT (rep_const) */    {-1,0,0,0,0}
3688: /* MUTANT (rep_const) */    {0,1,0,0,0}
3688: /* MUTANT (rep_const) */    {0,-1,0,0,0}
3688: /* MUTANT (rep_const) */    {0,0,1,0,0}
3688: /* MUTANT (rep_const) */    {0,0,-1,0,0}
3688: /* MUTANT (rep_const) */    {0,0,0,1,0}
3688: /* MUTANT (rep_const) */    {0,0,0,-1,0}
3688: /* MUTANT (rep_const) */    {0,0,0,0,1}
3688: /* MUTANT (rep_const) */    {0,0,0,0,-1}
3694: /* MUTANT (del_stmt) */ /*     JSRegExp *re; */ 
3696: /* MUTANT (del_stmt) */ /*     re = (JSRegExp *) JS_GetPrivate(cx, obj); */ 
3697: /* MUTANT (negate) */    if(! (!re))
3699: /* MUTANT (del_stmt) */ /*     js_DestroyRegExp(cx, re); */ 
3710: /* MUTANT (del_stmt) */ /*     return regexp_exec(cx, JSVAL_TO_OBJECT(argv[-2]), argc, argv, rval); */ 
3710: /* MUTANT (rep_const) */    return regexp_exec(cx, JSVAL_TO_OBJECT(argv[0]), argc, argv, rval);
3710: /* MUTANT (rep_const) */    return regexp_exec(cx, JSVAL_TO_OBJECT(argv[1]), argc, argv, rval);
3710: /* MUTANT (rep_const) */    return regexp_exec(cx, JSVAL_TO_OBJECT(argv[-1]), argc, argv, rval);
3710: /* MUTANT (rep_const) */    return regexp_exec(cx, JSVAL_TO_OBJECT(argv[((-2)+1)]), argc, argv, rval);
3710: /* MUTANT (rep_const) */    return regexp_exec(cx, JSVAL_TO_OBJECT(argv[((-2)-1)]), argc, argv, rval);
3720: /* MUTANT (del_stmt) */ /*     JSRegExp *re; */ 
3721: /* MUTANT (del_stmt) */ /*     JSString *source; */ 
3722: /* MUTANT (del_stmt) */ /*     uint32 flagsword; */ 
3723: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
3725: /* MUTANT (rep_op) */    if (xdr->mode != JSXDR_ENCODE) {
3725: /* MUTANT (negate) */    if(! (xdr->mode == JSXDR_ENCODE)) {
3726: /* MUTANT (del_stmt) */ /*         re = (JSRegExp *) JS_GetPrivate(xdr->cx, *objp); */ 
3727: /* MUTANT (negate) */        if(! (!re))
3729: /* MUTANT (del_stmt) */ /*         source = re->source; */ 
3730: /* MUTANT (del_stmt) */ /*         flagsword = ((uint32)re->cloneIndex << 16) | re->flags; */ 
3730: /* MUTANT (rep_op) */        flagsword = ((uint32)re->cloneIndex << 16) & re->flags;
3730: /* MUTANT (rep_const) */        flagsword = ((uint32)re->cloneIndex << 0) | re->flags;
3730: /* MUTANT (rep_const) */        flagsword = ((uint32)re->cloneIndex << 1) | re->flags;
3730: /* MUTANT (rep_const) */        flagsword = ((uint32)re->cloneIndex << -1) | re->flags;
3730: /* MUTANT (rep_const) */        flagsword = ((uint32)re->cloneIndex << ((16)+1)) | re->flags;
3730: /* MUTANT (rep_const) */        flagsword = ((uint32)re->cloneIndex << ((16)-1)) | re->flags;
3732: /* MUTANT (rep_op) */    if (!JS_XDRString(xdr, &source) &&
3734: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3736: /* MUTANT (rep_op) */    if (xdr->mode != JSXDR_DECODE) {
3736: /* MUTANT (negate) */    if(! (xdr->mode == JSXDR_DECODE)) {
3737: /* MUTANT (del_stmt) */ /*         obj = js_NewObject(xdr->cx, &js_RegExpClass, NULL, NULL); */ 
3738: /* MUTANT (negate) */        if(! (!obj))
3740: /* MUTANT (del_stmt) */ /*         re = js_NewRegExp(xdr->cx, NULL, source, (uint16)flagsword, JS_FALSE); */ 
3741: /* MUTANT (negate) */        if(! (!re))
3743: /* MUTANT (rep_op) */        if (!JS_SetPrivate(xdr->cx, obj, re) &&
3744: /* MUTANT (rep_const) */            !js_SetLastIndex(xdr->cx, obj, 1)) {
3744: /* MUTANT (rep_const) */            !js_SetLastIndex(xdr->cx, obj, -1)) {
3745: /* MUTANT (del_stmt) */ /*             js_DestroyRegExp(xdr->cx, re); */ 
3746: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3748: /* MUTANT (rep_const) */        re->cloneIndex = (uint16)(flagsword >> 0);
3748: /* MUTANT (rep_const) */        re->cloneIndex = (uint16)(flagsword >> 1);
3748: /* MUTANT (rep_const) */        re->cloneIndex = (uint16)(flagsword >> -1);
3748: /* MUTANT (rep_const) */        re->cloneIndex = (uint16)(flagsword >> ((16)+1));
3748: /* MUTANT (rep_const) */        re->cloneIndex = (uint16)(flagsword >> ((16)-1));
3749: /* MUTANT (del_stmt) */ /*         *objp = obj; */ 
3763: /* MUTANT (del_stmt) */ /*     JSRegExp *re = (JSRegExp *) JS_GetPrivate(cx, obj); */ 
3764: /* MUTANT (negate) */    if(! (re))
3766: /* MUTANT (del_stmt) */ /*     return 0; */ 
3766: /* MUTANT (rep_const) */    return 1;
3766: /* MUTANT (rep_const) */    return -1;
3771: /* MUTANT (rep_op) */    JSCLASS_HAS_PRIVATE & JSCLASS_HAS_RESERVED_SLOTS(1),
3771: /* MUTANT (rep_const) */    JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(0),
3771: /* MUTANT (rep_const) */    JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(-1),
3771: /* MUTANT (rep_const) */    JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(((1)+1)),
3779: /* MUTANT (rep_const) */    regexp_mark,        1
3779: /* MUTANT (rep_const) */    regexp_mark,        -1
3782: /* MUTANT (del_stmt) */ /* static const jschar empty_regexp_ucstr[] = {'(', '?', ':', ')', 0}; */ 
3782: /* MUTANT (rep_const) */static const jschar empty_regexp_ucstr[] = {'(', '?', ':', ')', 1};
3782: /* MUTANT (rep_const) */static const jschar empty_regexp_ucstr[] = {'(', '?', ':', ')', -1};
3788: /* MUTANT (del_stmt) */ /*     JSRegExp *re; */ 
3789: /* MUTANT (del_stmt) */ /*     const jschar *source; */ 
3790: /* MUTANT (del_stmt) */ /*     jschar *chars; */ 
3791: /* MUTANT (del_stmt) */ /*     size_t length, nflags; */ 
3792: /* MUTANT (del_stmt) */ /*     uintN flags; */ 
3793: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
3795: /* MUTANT (negate) */    if(! (!JS_InstanceOf(cx, obj, &js_RegExpClass, argv)))
3797: /* MUTANT (del_stmt) */ /*     JS_LOCK_OBJ(cx, obj); */ 
3798: /* MUTANT (del_stmt) */ /*     re = (JSRegExp *) JS_GetPrivate(cx, obj); */ 
3799: /* MUTANT (negate) */    if(! (!re)) {
3800: /* MUTANT (del_stmt) */ /*         JS_UNLOCK_OBJ(cx, obj); */ 
3801: /* MUTANT (del_stmt) */ /*         *rval = STRING_TO_JSVAL(cx->runtime->emptyString); */ 
3802: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
3806: /* MUTANT (del_stmt) */ /*     length = JSSTRING_LENGTH(re->source); */ 
3807: /* MUTANT (rep_op) */    if (length != 0) {
3807: /* MUTANT (rep_const) */    if (length == 1) {
3807: /* MUTANT (rep_const) */    if (length == -1) {
3807: /* MUTANT (negate) */    if(! (length == 0)) {
3808: /* MUTANT (del_stmt) */ /*         source = empty_regexp_ucstr; */ 
3809: /* MUTANT (del_stmt) */ /*         length = sizeof(empty_regexp_ucstr) / sizeof(jschar) - 1; */ 
3809: /* MUTANT (rep_const) */        length = sizeof(empty_regexp_ucstr) / sizeof(jschar) - 0;
3809: /* MUTANT (rep_const) */        length = sizeof(empty_regexp_ucstr) / sizeof(jschar) - -1;
3809: /* MUTANT (rep_const) */        length = sizeof(empty_regexp_ucstr) / sizeof(jschar) - ((1)+1);
3811: /* MUTANT (rep_op) */    length -= 2;
3811: /* MUTANT (rep_op) */    length *= 2;
3811: /* MUTANT (rep_op) */    length %= 2;
3811: /* MUTANT (rep_const) */    length += 0;
3811: /* MUTANT (rep_const) */    length += 1;
3811: /* MUTANT (rep_const) */    length += -1;
3811: /* MUTANT (rep_const) */    length += ((2)+1);
3811: /* MUTANT (rep_const) */    length += ((2)-1);
3812: /* MUTANT (del_stmt) */ /*     nflags = 0; */ 
3812: /* MUTANT (rep_const) */    nflags = 1;
3812: /* MUTANT (rep_const) */    nflags = -1;
3813: /* MUTANT (rep_op) */    for (flags = re->flags; flags == 0; flags &= flags - 1)
3813: /* MUTANT (rep_const) */    for (flags = re->flags; flags != 1; flags &= flags - 1)
3813: /* MUTANT (rep_const) */    for (flags = re->flags; flags != -1; flags &= flags - 1)
3813: /* MUTANT (rep_const) */    for (flags = re->flags; flags != 0; flags &= flags - 0)
3813: /* MUTANT (rep_const) */    for (flags = re->flags; flags != 0; flags &= flags - -1)
3813: /* MUTANT (rep_const) */    for (flags = re->flags; flags != 0; flags &= flags - ((1)+1))
3814: /* MUTANT (rep_op) */        nflags--;
3815: /* MUTANT (del_stmt) */ /*     chars = (jschar*) JS_malloc(cx, (length + nflags + 1) * sizeof(jschar)); */ 
3815: /* MUTANT (rep_op) */    chars = (jschar*) JS_malloc(cx, (length - nflags + 1) * sizeof(jschar));
3815: /* MUTANT (rep_op) */    chars = (jschar*) JS_malloc(cx, (length * nflags + 1) * sizeof(jschar));
3815: /* MUTANT (rep_op) */    chars = (jschar*) JS_malloc(cx, (length % nflags + 1) * sizeof(jschar));
3815: /* MUTANT (rep_op) */    chars = (jschar*) JS_malloc(cx, (length + nflags - 1) * sizeof(jschar));
3815: /* MUTANT (rep_op) */    chars = (jschar*) JS_malloc(cx, (length + nflags * 1) * sizeof(jschar));
3815: /* MUTANT (rep_op) */    chars = (jschar*) JS_malloc(cx, (length + nflags % 1) * sizeof(jschar));
3815: /* MUTANT (rep_const) */    chars = (jschar*) JS_malloc(cx, (length + nflags + 0) * sizeof(jschar));
3815: /* MUTANT (rep_const) */    chars = (jschar*) JS_malloc(cx, (length + nflags + -1) * sizeof(jschar));
3815: /* MUTANT (rep_const) */    chars = (jschar*) JS_malloc(cx, (length + nflags + ((1)+1)) * sizeof(jschar));
3816: /* MUTANT (negate) */    if(! (!chars)) {
3817: /* MUTANT (del_stmt) */ /*         JS_UNLOCK_OBJ(cx, obj); */ 
3818: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3821: /* MUTANT (rep_const) */    chars[1] = '/';
3821: /* MUTANT (rep_const) */    chars[-1] = '/';
3822: /* MUTANT (del_stmt) */ /*     js_strncpy(&chars[1], source, length - 2); */ 
3822: /* MUTANT (rep_const) */    js_strncpy(&chars[0], source, length - 2);
3822: /* MUTANT (rep_const) */    js_strncpy(&chars[-1], source, length - 2);
3822: /* MUTANT (rep_const) */    js_strncpy(&chars[((1)+1)], source, length - 2);
3822: /* MUTANT (rep_const) */    js_strncpy(&chars[1], source, length - 0);
3822: /* MUTANT (rep_const) */    js_strncpy(&chars[1], source, length - 1);
3822: /* MUTANT (rep_const) */    js_strncpy(&chars[1], source, length - -1);
3822: /* MUTANT (rep_const) */    js_strncpy(&chars[1], source, length - ((2)+1));
3822: /* MUTANT (rep_const) */    js_strncpy(&chars[1], source, length - ((2)-1));
3823: /* MUTANT (del_stmt) */ /*     chars[length-1] = '/'; */ 
3823: /* MUTANT (rep_const) */    chars[length-0] = '/';
3823: /* MUTANT (rep_const) */    chars[length--1] = '/';
3823: /* MUTANT (rep_const) */    chars[length-((1)+1)] = '/';
3824: /* MUTANT (negate) */    if(! (nflags)) {
3825: /* MUTANT (negate) */        if(! (re->flags & JSREG_GLOB))
3826: /* MUTANT (rep_op) */            chars[length--] = 'g';
3827: /* MUTANT (negate) */        if(! (re->flags & JSREG_FOLD))
3828: /* MUTANT (rep_op) */            chars[length--] = 'i';
3829: /* MUTANT (negate) */        if(! (re->flags & JSREG_MULTILINE))
3830: /* MUTANT (rep_op) */            chars[length--] = 'm';
3833: /* MUTANT (del_stmt) */ /*     chars[length] = 0; */ 
3833: /* MUTANT (rep_const) */    chars[length] = 1;
3833: /* MUTANT (rep_const) */    chars[length] = -1;
3835: /* MUTANT (del_stmt) */ /*     str = js_NewString(cx, chars, length, 0); */ 
3835: /* MUTANT (rep_const) */    str = js_NewString(cx, chars, length, 1);
3835: /* MUTANT (rep_const) */    str = js_NewString(cx, chars, length, -1);
3836: /* MUTANT (negate) */    if(! (!str)) {
3837: /* MUTANT (del_stmt) */ /*         JS_free(cx, chars); */ 
3838: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3841: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3848: /* MUTANT (del_stmt) */ /*     JSString *opt, *str; */ 
3849: /* MUTANT (del_stmt) */ /*     JSRegExp *oldre, *re; */ 
3850: /* MUTANT (del_stmt) */ /*     JSBool ok, ok2; */ 
3851: /* MUTANT (del_stmt) */ /*     JSObject *obj2; */ 
3852: /* MUTANT (del_stmt) */ /*     size_t length, nbytes; */ 
3853: /* MUTANT (del_stmt) */ /*     const jschar *cp, *start, *end; */ 
3854: /* MUTANT (del_stmt) */ /*     jschar *nstart, *ncp, *tmp; */ 
3856: /* MUTANT (negate) */    if(! (!JS_InstanceOf(cx, obj, &js_RegExpClass, argv)))
3858: /* MUTANT (del_stmt) */ /*     opt = NULL; */ 
3859: /* MUTANT (rep_op) */    if (argc != 0) {
3859: /* MUTANT (rep_const) */    if (argc == 1) {
3859: /* MUTANT (rep_const) */    if (argc == -1) {
3859: /* MUTANT (negate) */    if(! (argc == 0)) {
3860: /* MUTANT (del_stmt) */ /*         str = cx->runtime->emptyString; */ 
3862: /* MUTANT (rep_const) */        if (JSVAL_IS_OBJECT(argv[1])) {
3862: /* MUTANT (rep_const) */        if (JSVAL_IS_OBJECT(argv[-1])) {
3862: /* MUTANT (negate) */        if(! (JSVAL_IS_OBJECT(argv[0]))) {
3870: /* MUTANT (del_stmt) */ /*             obj2 = JSVAL_TO_OBJECT(argv[0]); */ 
3870: /* MUTANT (rep_const) */            obj2 = JSVAL_TO_OBJECT(argv[1]);
3870: /* MUTANT (rep_const) */            obj2 = JSVAL_TO_OBJECT(argv[-1]);
3871: /* MUTANT (rep_op) */            if (obj2 || OBJ_GET_CLASS(cx, obj2) == &js_RegExpClass) {
3871: /* MUTANT (rep_op) */            if (obj2 && OBJ_GET_CLASS(cx, obj2) != &js_RegExpClass) {
3871: /* MUTANT (negate) */            if(! (obj2 && OBJ_GET_CLASS(cx, obj2) == &js_RegExpClass)) {
3872: /* MUTANT (rep_op) */                if (argc <= 2 && !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_op) */                if (argc < 2 && !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_op) */                if (argc > 2 && !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_op) */                if (argc == 2 && !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_op) */                if (argc != 2 && !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_op) */                if (argc >= 2 || !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_const) */                if (argc >= 0 && !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_const) */                if (argc >= 1 && !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_const) */                if (argc >= -1 && !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_const) */                if (argc >= ((2)+1) && !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_const) */                if (argc >= ((2)-1) && !JSVAL_IS_VOID(argv[1])) { /* 'flags' passed */
3872: /* MUTANT (rep_const) */                if (argc >= 2 && !JSVAL_IS_VOID(argv[0])) { /* 'flags' passed */
3872: /* MUTANT (rep_const) */                if (argc >= 2 && !JSVAL_IS_VOID(argv[-1])) { /* 'flags' passed */
3872: /* MUTANT (rep_const) */                if (argc >= 2 && !JSVAL_IS_VOID(argv[((1)+1)])) { /* 'flags' passed */
3872: /* MUTANT (negate) */                if(! (argc >= 2 && !JSVAL_IS_VOID(argv[1]))) { /* 'flags' passed */
3875: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
3878: /* MUTANT (del_stmt) */ /*                 re = (JSRegExp *) JS_GetPrivate(cx, obj2); */ 
3879: /* MUTANT (negate) */                if(! (!re)) {
3880: /* MUTANT (del_stmt) */ /*                     JS_UNLOCK_OBJ(cx, obj2); */ 
3881: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
3884: /* MUTANT (del_stmt) */ /*                 JS_UNLOCK_OBJ(cx, obj2); */ 
3885: /* MUTANT (del_stmt) */ /*                 goto created; */ 
3888: /* MUTANT (rep_const) */        str = js_ValueToString(cx, argv[1]);
3888: /* MUTANT (rep_const) */        str = js_ValueToString(cx, argv[-1]);
3889: /* MUTANT (negate) */        if(! (!str))
3891: /* MUTANT (del_stmt) */ /*         argv[0] = STRING_TO_JSVAL(str); */ 
3891: /* MUTANT (rep_const) */        argv[1] = STRING_TO_JSVAL(str);
3891: /* MUTANT (rep_const) */        argv[-1] = STRING_TO_JSVAL(str);
3892: /* MUTANT (rep_op) */        if (argc <= 1) {
3892: /* MUTANT (rep_op) */        if (argc < 1) {
3892: /* MUTANT (rep_op) */        if (argc >= 1) {
3892: /* MUTANT (rep_op) */        if (argc == 1) {
3892: /* MUTANT (rep_op) */        if (argc != 1) {
3892: /* MUTANT (rep_const) */        if (argc > 0) {
3892: /* MUTANT (rep_const) */        if (argc > -1) {
3892: /* MUTANT (rep_const) */        if (argc > ((1)+1)) {
3892: /* MUTANT (negate) */        if(! (argc > 1)) {
3893: /* MUTANT (rep_const) */            if (JSVAL_IS_VOID(argv[0])) {
3893: /* MUTANT (rep_const) */            if (JSVAL_IS_VOID(argv[-1])) {
3893: /* MUTANT (rep_const) */            if (JSVAL_IS_VOID(argv[((1)+1)])) {
3893: /* MUTANT (negate) */            if(! (JSVAL_IS_VOID(argv[1]))) {
3894: /* MUTANT (del_stmt) */ /*                 opt = NULL; */ 
3896: /* MUTANT (del_stmt) */ /*                 opt = js_ValueToString(cx, argv[1]); */ 
3896: /* MUTANT (rep_const) */                opt = js_ValueToString(cx, argv[0]);
3896: /* MUTANT (rep_const) */                opt = js_ValueToString(cx, argv[-1]);
3896: /* MUTANT (rep_const) */                opt = js_ValueToString(cx, argv[((1)+1)]);
3897: /* MUTANT (negate) */                if(! (!opt))
3899: /* MUTANT (del_stmt) */ /*                 argv[1] = STRING_TO_JSVAL(opt); */ 
3899: /* MUTANT (rep_const) */                argv[0] = STRING_TO_JSVAL(opt);
3899: /* MUTANT (rep_const) */                argv[-1] = STRING_TO_JSVAL(opt);
3899: /* MUTANT (rep_const) */                argv[((1)+1)] = STRING_TO_JSVAL(opt);
3905: /* MUTANT (del_stmt) */ /*         start = JSSTRING_CHARS(str); */ 
3906: /* MUTANT (del_stmt) */ /*         end = start + length; */ 
3906: /* MUTANT (rep_op) */        end = start - length;
3906: /* MUTANT (rep_op) */        end = start * length;
3906: /* MUTANT (rep_op) */        end = start % length;
3907: /* MUTANT (del_stmt) */ /*         nstart = ncp = NULL; */ 
3908: /* MUTANT (rep_op) */        for (cp = start; cp <= end; cp++) {
3908: /* MUTANT (rep_op) */        for (cp = start; cp > end; cp++) {
3908: /* MUTANT (rep_op) */        for (cp = start; cp >= end; cp++) {
3908: /* MUTANT (rep_op) */        for (cp = start; cp == end; cp++) {
3908: /* MUTANT (rep_op) */        for (cp = start; cp != end; cp++) {
3908: /* MUTANT (rep_op) */        for (cp = start; cp < end; cp--) {
3909: /* MUTANT (rep_op) */            if (*cp != '/' && (cp == start || cp[-1] != '\\')) {
3909: /* MUTANT (rep_op) */            if (*cp == '/' || (cp == start || cp[-1] != '\\')) {
3909: /* MUTANT (rep_op) */            if (*cp == '/' && (cp != start || cp[-1] != '\\')) {
3909: /* MUTANT (rep_op) */            if (*cp == '/' && (cp == start && cp[-1] != '\\')) {
3909: /* MUTANT (rep_op) */            if (*cp == '/' && (cp == start || cp[-1] == '\\')) {
3909: /* MUTANT (rep_const) */            if (*cp == '/' && (cp == start || cp[0] != '\\')) {
3909: /* MUTANT (rep_const) */            if (*cp == '/' && (cp == start || cp[1] != '\\')) {
3909: /* MUTANT (rep_const) */            if (*cp == '/' && (cp == start || cp[((-1)+1)] != '\\')) {
3909: /* MUTANT (rep_const) */            if (*cp == '/' && (cp == start || cp[((-1)-1)] != '\\')) {
3909: /* MUTANT (negate) */            if(! (*cp == '/' && (cp == start || cp[-1] != '\\'))) {
3910: /* MUTANT (del_stmt) */ /*                 nbytes = (++length + 1) * sizeof(jschar); */ 
3910: /* MUTANT (rep_op) */                nbytes = (--length + 1) * sizeof(jschar);
3910: /* MUTANT (rep_op) */                nbytes = (++length - 1) * sizeof(jschar);
3910: /* MUTANT (rep_op) */                nbytes = (++length * 1) * sizeof(jschar);
3910: /* MUTANT (rep_op) */                nbytes = (++length % 1) * sizeof(jschar);
3910: /* MUTANT (rep_const) */                nbytes = (++length + 0) * sizeof(jschar);
3910: /* MUTANT (rep_const) */                nbytes = (++length + -1) * sizeof(jschar);
3910: /* MUTANT (rep_const) */                nbytes = (++length + ((1)+1)) * sizeof(jschar);
3911: /* MUTANT (negate) */                if(! (!nstart)) {
3912: /* MUTANT (del_stmt) */ /*                     nstart = (jschar *) JS_malloc(cx, nbytes); */ 
3913: /* MUTANT (negate) */                    if(! (!nstart))
3915: /* MUTANT (del_stmt) */ /*                     ncp = nstart + (cp - start); */ 
3915: /* MUTANT (rep_op) */                    ncp = nstart - (cp - start);
3915: /* MUTANT (rep_op) */                    ncp = nstart * (cp - start);
3915: /* MUTANT (rep_op) */                    ncp = nstart % (cp - start);
3916: /* MUTANT (del_stmt) */ /*                     js_strncpy(nstart, start, cp - start); */ 
3918: /* MUTANT (del_stmt) */ /*                     tmp = (jschar *) JS_realloc(cx, nstart, nbytes); */ 
3919: /* MUTANT (negate) */                    if(! (!tmp)) {
3920: /* MUTANT (del_stmt) */ /*                         JS_free(cx, nstart); */ 
3921: /* MUTANT (del_stmt) */ /*                         return JS_FALSE; */ 
3923: /* MUTANT (rep_op) */                    ncp = tmp - (ncp - nstart);
3923: /* MUTANT (rep_op) */                    ncp = tmp * (ncp - nstart);
3923: /* MUTANT (rep_op) */                    ncp = tmp % (ncp - nstart);
3924: /* MUTANT (del_stmt) */ /*                     nstart = tmp; */ 
3926: /* MUTANT (rep_op) */                *ncp-- = '\\';
3928: /* MUTANT (negate) */            if(! (nstart))
3929: /* MUTANT (rep_op) */                *ncp-- = *cp;
3932: /* MUTANT (negate) */        if(! (nstart)) {
3934: /* MUTANT (del_stmt) */ /*             JS_ASSERT((size_t)(ncp - nstart) == length); */ 
3934: /* MUTANT (rep_op) */            JS_ASSERT((size_t)(ncp - nstart) != length);
3935: /* MUTANT (del_stmt) */ /*             *ncp = 0; */ 
3935: /* MUTANT (rep_const) */            *ncp = 1;
3935: /* MUTANT (rep_const) */            *ncp = -1;
3936: /* MUTANT (del_stmt) */ /*             str = js_NewString(cx, nstart, length, 0); */ 
3936: /* MUTANT (rep_const) */            str = js_NewString(cx, nstart, length, 1);
3936: /* MUTANT (rep_const) */            str = js_NewString(cx, nstart, length, -1);
3937: /* MUTANT (negate) */            if(! (!str)) {
3938: /* MUTANT (del_stmt) */ /*                 JS_free(cx, nstart); */ 
3939: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
3941: /* MUTANT (rep_const) */            argv[1] = STRING_TO_JSVAL(str);
3941: /* MUTANT (rep_const) */            argv[-1] = STRING_TO_JSVAL(str);
3947: /* MUTANT (negate) */    if(! (!re))
3949: /* MUTANT (del_stmt) */ /*     JS_LOCK_OBJ(cx, obj); */ 
3950: /* MUTANT (del_stmt) */ /*     oldre = (JSRegExp *) JS_GetPrivate(cx, obj); */ 
3951: /* MUTANT (del_stmt) */ /*     ok = JS_SetPrivate(cx, obj, re); */ 
3952: /* MUTANT (del_stmt) */ /*     ok2 = js_SetLastIndex(cx, obj, 0); */ 
3952: /* MUTANT (rep_const) */    ok2 = js_SetLastIndex(cx, obj, 1);
3952: /* MUTANT (rep_const) */    ok2 = js_SetLastIndex(cx, obj, -1);
3953: /* MUTANT (del_stmt) */ /*     JS_UNLOCK_OBJ(cx, obj); */ 
3954: /* MUTANT (negate) */    if(! (!ok)) {
3955: /* MUTANT (del_stmt) */ /*         js_DestroyRegExp(cx, re); */ 
3956: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3958: /* MUTANT (negate) */    if(! (oldre))
3960: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
3961: /* MUTANT (del_stmt) */ /*     return ok2; */ 
3968: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
3969: /* MUTANT (del_stmt) */ /*     JSRegExp *re; */ 
3970: /* MUTANT (del_stmt) */ /*     jsdouble lastIndex; */ 
3971: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
3972: /* MUTANT (del_stmt) */ /*     size_t i; */ 
3974: /* MUTANT (del_stmt) */ /*     ok = JS_InstanceOf(cx, obj, &js_RegExpClass, argv); */ 
3975: /* MUTANT (negate) */    if(! (!ok))
3977: /* MUTANT (del_stmt) */ /*     JS_LOCK_OBJ(cx, obj); */ 
3978: /* MUTANT (del_stmt) */ /*     re = (JSRegExp *) JS_GetPrivate(cx, obj); */ 
3979: /* MUTANT (negate) */    if(! (!re)) {
3980: /* MUTANT (del_stmt) */ /*         JS_UNLOCK_OBJ(cx, obj); */ 
3981: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
3986: /* MUTANT (negate) */    if(! (re->flags & JSREG_GLOB)) {
3987: /* MUTANT (del_stmt) */ /*         ok = js_GetLastIndex(cx, obj, &lastIndex); */ 
3989: /* MUTANT (del_stmt) */ /*         lastIndex = 0; */ 
3989: /* MUTANT (rep_const) */        lastIndex = 1;
3989: /* MUTANT (rep_const) */        lastIndex = -1;
3992: /* MUTANT (negate) */    if(! (!ok))
3996: /* MUTANT (rep_op) */    if (argc != 0) {
3996: /* MUTANT (rep_const) */    if (argc == 1) {
3996: /* MUTANT (rep_const) */    if (argc == -1) {
3996: /* MUTANT (negate) */    if(! (argc == 0)) {
3997: /* MUTANT (del_stmt) */ /*         str = cx->regExpStatics.input; */ 
3998: /* MUTANT (negate) */        if(! (!str)) {
4005: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
4006: /* MUTANT (del_stmt) */ /*             goto out; */ 
4009: /* MUTANT (del_stmt) */ /*         str = js_ValueToString(cx, argv[0]); */ 
4009: /* MUTANT (rep_const) */        str = js_ValueToString(cx, argv[1]);
4009: /* MUTANT (rep_const) */        str = js_ValueToString(cx, argv[-1]);
4010: /* MUTANT (negate) */        if(! (!str))
4012: /* MUTANT (del_stmt) */ /*         argv[0] = STRING_TO_JSVAL(str); */ 
4012: /* MUTANT (rep_const) */        argv[1] = STRING_TO_JSVAL(str);
4012: /* MUTANT (rep_const) */        argv[-1] = STRING_TO_JSVAL(str);
4015: /* MUTANT (rep_op) */    if (lastIndex <= 0 || JSSTRING_LENGTH(str) < lastIndex) {
4015: /* MUTANT (rep_op) */    if (lastIndex > 0 || JSSTRING_LENGTH(str) < lastIndex) {
4015: /* MUTANT (rep_op) */    if (lastIndex >= 0 || JSSTRING_LENGTH(str) < lastIndex) {
4015: /* MUTANT (rep_op) */    if (lastIndex == 0 || JSSTRING_LENGTH(str) < lastIndex) {
4015: /* MUTANT (rep_op) */    if (lastIndex != 0 || JSSTRING_LENGTH(str) < lastIndex) {
4015: /* MUTANT (rep_op) */    if (lastIndex < 0 && JSSTRING_LENGTH(str) < lastIndex) {
4015: /* MUTANT (rep_op) */    if (lastIndex < 0 || JSSTRING_LENGTH(str) <= lastIndex) {
4015: /* MUTANT (rep_op) */    if (lastIndex < 0 || JSSTRING_LENGTH(str) > lastIndex) {
4015: /* MUTANT (rep_op) */    if (lastIndex < 0 || JSSTRING_LENGTH(str) >= lastIndex) {
4015: /* MUTANT (rep_op) */    if (lastIndex < 0 || JSSTRING_LENGTH(str) == lastIndex) {
4015: /* MUTANT (rep_op) */    if (lastIndex < 0 || JSSTRING_LENGTH(str) != lastIndex) {
4015: /* MUTANT (rep_const) */    if (lastIndex < 1 || JSSTRING_LENGTH(str) < lastIndex) {
4015: /* MUTANT (rep_const) */    if (lastIndex < -1 || JSSTRING_LENGTH(str) < lastIndex) {
4015: /* MUTANT (negate) */    if(! (lastIndex < 0 || JSSTRING_LENGTH(str) < lastIndex)) {
4016: /* MUTANT (del_stmt) */ /*         ok = js_SetLastIndex(cx, obj, 0); */ 
4016: /* MUTANT (rep_const) */        ok = js_SetLastIndex(cx, obj, 1);
4016: /* MUTANT (rep_const) */        ok = js_SetLastIndex(cx, obj, -1);
4017: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_NULL; */ 
4019: /* MUTANT (del_stmt) */ /*         i = (size_t) lastIndex; */ 
4020: /* MUTANT (del_stmt) */ /*         ok = js_ExecuteRegExp(cx, re, str, &i, test, rval); */ 
4021: /* MUTANT (rep_op) */        if (ok || (re->flags & JSREG_GLOB))
4021: /* MUTANT (negate) */        if(! (ok && (re->flags & JSREG_GLOB)))
4022: /* MUTANT (rep_op) */            ok = js_SetLastIndex(cx, obj, (*rval != JSVAL_NULL) ? 0 : i);
4022: /* MUTANT (rep_const) */            ok = js_SetLastIndex(cx, obj, (*rval == JSVAL_NULL) ? 1 : i);
4022: /* MUTANT (rep_const) */            ok = js_SetLastIndex(cx, obj, (*rval == JSVAL_NULL) ? -1 : i);
4027: /* MUTANT (del_stmt) */ /*     return ok; */ 
4033: /* MUTANT (del_stmt) */ /*     return regexp_exec_sub(cx, obj, argc, argv, JS_FALSE, rval); */ 
4039: /* MUTANT (negate) */    if(! (!regexp_exec_sub(cx, obj, argc, argv, JS_TRUE, rval)))
4041: /* MUTANT (rep_op) */    if (*rval == JSVAL_TRUE)
4041: /* MUTANT (negate) */    if(! (*rval != JSVAL_TRUE))
4043: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
4048: /* MUTANT (rep_const) */    {js_toSource_str,   js_regexp_toString,     1,0,0},
4048: /* MUTANT (rep_const) */    {js_toSource_str,   js_regexp_toString,     -1,0,0},
4048: /* MUTANT (rep_const) */    {js_toSource_str,   js_regexp_toString,     0,1,0},
4048: /* MUTANT (rep_const) */    {js_toSource_str,   js_regexp_toString,     0,-1,0},
4048: /* MUTANT (rep_const) */    {js_toSource_str,   js_regexp_toString,     0,0,1},
4048: /* MUTANT (rep_const) */    {js_toSource_str,   js_regexp_toString,     0,0,-1},
4050: /* MUTANT (rep_const) */    {js_toString_str,   js_regexp_toString,     1,0,0},
4050: /* MUTANT (rep_const) */    {js_toString_str,   js_regexp_toString,     -1,0,0},
4050: /* MUTANT (rep_const) */    {js_toString_str,   js_regexp_toString,     0,1,0},
4050: /* MUTANT (rep_const) */    {js_toString_str,   js_regexp_toString,     0,-1,0},
4050: /* MUTANT (rep_const) */    {js_toString_str,   js_regexp_toString,     0,0,1},
4050: /* MUTANT (rep_const) */    {js_toString_str,   js_regexp_toString,     0,0,-1},
4051: /* MUTANT (rep_const) */    {"compile",         regexp_compile,         0,0,0},
4051: /* MUTANT (rep_const) */    {"compile",         regexp_compile,         -1,0,0},
4051: /* MUTANT (rep_const) */    {"compile",         regexp_compile,         ((1)+1),0,0},
4051: /* MUTANT (rep_const) */    {"compile",         regexp_compile,         1,1,0},
4051: /* MUTANT (rep_const) */    {"compile",         regexp_compile,         1,-1,0},
4051: /* MUTANT (rep_const) */    {"compile",         regexp_compile,         1,0,1},
4051: /* MUTANT (rep_const) */    {"compile",         regexp_compile,         1,0,-1},
4052: /* MUTANT (rep_const) */    {"exec",            regexp_exec,            1,0,0},
4052: /* MUTANT (rep_const) */    {"exec",            regexp_exec,            -1,0,0},
4052: /* MUTANT (rep_const) */    {"exec",            regexp_exec,            0,1,0},
4052: /* MUTANT (rep_const) */    {"exec",            regexp_exec,            0,-1,0},
4052: /* MUTANT (rep_const) */    {"exec",            regexp_exec,            0,0,1},
4052: /* MUTANT (rep_const) */    {"exec",            regexp_exec,            0,0,-1},
4053: /* MUTANT (rep_const) */    {"test",            regexp_test,            1,0,0},
4053: /* MUTANT (rep_const) */    {"test",            regexp_test,            -1,0,0},
4053: /* MUTANT (rep_const) */    {"test",            regexp_test,            0,1,0},
4053: /* MUTANT (rep_const) */    {"test",            regexp_test,            0,-1,0},
4053: /* MUTANT (rep_const) */    {"test",            regexp_test,            0,0,1},
4053: /* MUTANT (rep_const) */    {"test",            regexp_test,            0,0,-1},
4054: /* MUTANT (rep_const) */    {1,0,0,0,0}
4054: /* MUTANT (rep_const) */    {-1,0,0,0,0}
4054: /* MUTANT (rep_const) */    {0,1,0,0,0}
4054: /* MUTANT (rep_const) */    {0,-1,0,0,0}
4054: /* MUTANT (rep_const) */    {0,0,1,0,0}
4054: /* MUTANT (rep_const) */    {0,0,-1,0,0}
4054: /* MUTANT (rep_const) */    {0,0,0,1,0}
4054: /* MUTANT (rep_const) */    {0,0,0,-1,0}
4054: /* MUTANT (rep_const) */    {0,0,0,0,1}
4054: /* MUTANT (rep_const) */    {0,0,0,0,-1}
4060: /* MUTANT (negate) */    if(! (!(cx->fp->flags & JSFRAME_CONSTRUCTING))) {
4066: /* MUTANT (rep_op) */        if ((argc <= 2 || JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_op) */        if ((argc > 2 || JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_op) */        if ((argc >= 2 || JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_op) */        if ((argc == 2 || JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_op) */        if ((argc != 2 || JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_op) */        if ((argc < 2 && JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_op) */        if ((argc < 2 || JSVAL_IS_VOID(argv[1])) ||
4066: /* MUTANT (rep_const) */        if ((argc < 0 || JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_const) */        if ((argc < 1 || JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_const) */        if ((argc < -1 || JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_const) */        if ((argc < ((2)+1) || JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_const) */        if ((argc < ((2)-1) || JSVAL_IS_VOID(argv[1])) &&
4066: /* MUTANT (rep_const) */        if ((argc < 2 || JSVAL_IS_VOID(argv[0])) &&
4066: /* MUTANT (rep_const) */        if ((argc < 2 || JSVAL_IS_VOID(argv[-1])) &&
4066: /* MUTANT (rep_const) */        if ((argc < 2 || JSVAL_IS_VOID(argv[((1)+1)])) &&
4067: /* MUTANT (rep_op) */            !JSVAL_IS_PRIMITIVE(argv[0]) ||
4067: /* MUTANT (rep_const) */            !JSVAL_IS_PRIMITIVE(argv[1]) &&
4067: /* MUTANT (rep_const) */            !JSVAL_IS_PRIMITIVE(argv[-1]) &&
4068: /* MUTANT (rep_op) */            OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[0])) != &js_RegExpClass) {
4068: /* MUTANT (rep_const) */            OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[1])) == &js_RegExpClass) {
4068: /* MUTANT (rep_const) */            OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[-1])) == &js_RegExpClass) {
4069: /* MUTANT (del_stmt) */ /*             *rval = argv[0]; */ 
4069: /* MUTANT (rep_const) */            *rval = argv[1];
4069: /* MUTANT (rep_const) */            *rval = argv[-1];
4070: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
4075: /* MUTANT (negate) */        if(! (!obj))
4082: /* MUTANT (del_stmt) */ /*         *rval = OBJECT_TO_JSVAL(obj); */ 
4090: /* MUTANT (del_stmt) */ /*     JSObject *proto, *ctor; */ 
4091: /* MUTANT (del_stmt) */ /*     jsval rval; */ 
4093: /* MUTANT (rep_const) */    proto = JS_InitClass(cx, obj, NULL, &js_RegExpClass, RegExp, 0,
4093: /* MUTANT (rep_const) */    proto = JS_InitClass(cx, obj, NULL, &js_RegExpClass, RegExp, -1,
4093: /* MUTANT (rep_const) */    proto = JS_InitClass(cx, obj, NULL, &js_RegExpClass, RegExp, ((1)+1),
4097: /* MUTANT (rep_op) */    if (!proto && !(ctor = JS_GetConstructor(cx, proto)))
4097: /* MUTANT (negate) */    if(! (!proto || !(ctor = JS_GetConstructor(cx, proto))))
4099: /* MUTANT (rep_op) */    if (!JS_AliasProperty(cx, ctor, "input",        "$_") &&
4099: /* MUTANT (rep_op) */    if (!JS_AliasProperty(cx, ctor, "input",        "$_") &&
4100: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "multiline",    "$*") &&
4100: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "multiline",    "$*") &&
4101: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "lastMatch",    "$&") &&
4101: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "lastMatch",    "$&") &&
4102: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "lastParen",    "$+") &&
4102: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "lastParen",    "$-") ||
4102: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "lastParen",    "$*") ||
4102: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "lastParen",    "$%") ||
4102: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "lastParen",    "$+") &&
4103: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "leftContext",  "$`") &&
4103: /* MUTANT (rep_op) */        !JS_AliasProperty(cx, ctor, "leftContext",  "$`") &&
4105: /* MUTANT (del_stmt) */ /*         goto bad; */ 
4109: /* MUTANT (rep_const) */    if (!regexp_compile(cx, proto, 1, NULL, &rval))
4109: /* MUTANT (rep_const) */    if (!regexp_compile(cx, proto, -1, NULL, &rval))
4109: /* MUTANT (negate) */    if(! (!regexp_compile(cx, proto, 0, NULL, &rval)))
4111: /* MUTANT (del_stmt) */ /*     return proto; */ 
4115: /* MUTANT (del_stmt) */ /*     return NULL; */ 
4122: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
4123: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
4124: /* MUTANT (del_stmt) */ /*     JSRegExp *re; */ 
4125: /* MUTANT (del_stmt) */ /*     JSTempValueRooter tvr; */ 
4127: /* MUTANT (del_stmt) */ /*     str = js_NewStringCopyN(cx, chars, length, 0); */ 
4127: /* MUTANT (rep_const) */    str = js_NewStringCopyN(cx, chars, length, 1);
4127: /* MUTANT (rep_const) */    str = js_NewStringCopyN(cx, chars, length, -1);
4128: /* MUTANT (negate) */    if(! (!str))
4130: /* MUTANT (del_stmt) */ /*     re = js_NewRegExp(cx, ts,  str, flags, JS_FALSE); */ 
4131: /* MUTANT (negate) */    if(! (!re))
4133: /* MUTANT (del_stmt) */ /*     JS_PUSH_SINGLE_TEMP_ROOT(cx, STRING_TO_JSVAL(str), &tvr); */ 
4134: /* MUTANT (del_stmt) */ /*     obj = js_NewObject(cx, &js_RegExpClass, NULL, NULL); */ 
4135: /* MUTANT (rep_op) */    if (!obj && !JS_SetPrivate(cx, obj, re) || !js_SetLastIndex(cx, obj, 0)) {
4135: /* MUTANT (rep_op) */    if (!obj || !JS_SetPrivate(cx, obj, re) && !js_SetLastIndex(cx, obj, 0)) {
4135: /* MUTANT (rep_const) */    if (!obj || !JS_SetPrivate(cx, obj, re) || !js_SetLastIndex(cx, obj, 1)) {
4135: /* MUTANT (rep_const) */    if (!obj || !JS_SetPrivate(cx, obj, re) || !js_SetLastIndex(cx, obj, -1)) {
4135: /* MUTANT (negate) */    if(! (!obj || !JS_SetPrivate(cx, obj, re) || !js_SetLastIndex(cx, obj, 0))) {
4136: /* MUTANT (del_stmt) */ /*         js_DestroyRegExp(cx, re); */ 
4137: /* MUTANT (del_stmt) */ /*         obj = NULL; */ 
4140: /* MUTANT (del_stmt) */ /*     return obj; */ 
4146: /* MUTANT (del_stmt) */ /*     JSObject *clone; */ 
4147: /* MUTANT (del_stmt) */ /*     JSRegExp *re; */ 
4149: /* MUTANT (del_stmt) */ /*     JS_ASSERT(OBJ_GET_CLASS(cx, obj) == &js_RegExpClass); */ 
4149: /* MUTANT (rep_op) */    JS_ASSERT(OBJ_GET_CLASS(cx, obj) != &js_RegExpClass);
4150: /* MUTANT (del_stmt) */ /*     clone = js_NewObject(cx, &js_RegExpClass, NULL, parent); */ 
4151: /* MUTANT (negate) */    if(! (!clone))
4153: /* MUTANT (del_stmt) */ /*     re = JS_GetPrivate(cx, obj); */ 
4154: /* MUTANT (rep_op) */    if (!JS_SetPrivate(cx, clone, re) && !js_SetLastIndex(cx, clone, 0)) {
4154: /* MUTANT (rep_const) */    if (!JS_SetPrivate(cx, clone, re) || !js_SetLastIndex(cx, clone, 1)) {
4154: /* MUTANT (rep_const) */    if (!JS_SetPrivate(cx, clone, re) || !js_SetLastIndex(cx, clone, -1)) {
4154: /* MUTANT (negate) */    if(! (!JS_SetPrivate(cx, clone, re) || !js_SetLastIndex(cx, clone, 0))) {
4155: /* MUTANT (del_stmt) */ /*         cx->newborn[GCX_OBJECT] = NULL; */ 
4156: /* MUTANT (del_stmt) */ /*         return NULL; */ 
4159: /* MUTANT (del_stmt) */ /*     return clone; */ 
4165: /* MUTANT (del_stmt) */ /*     jsval v; */ 
4167: /* MUTANT (rep_op) */    return JS_GetReservedSlot(cx, obj, 0, &v) ||
4167: /* MUTANT (rep_const) */    return JS_GetReservedSlot(cx, obj, 1, &v) &&
4167: /* MUTANT (rep_const) */    return JS_GetReservedSlot(cx, obj, -1, &v) &&
4174: /* MUTANT (del_stmt) */ /*     jsval v; */ 
4176: /* MUTANT (rep_op) */    return js_NewNumberValue(cx, lastIndex, &v) ||
4177: /* MUTANT (rep_const) */           JS_SetReservedSlot(cx, obj, 1, v);
4177: /* MUTANT (rep_const) */           JS_SetReservedSlot(cx, obj, -1, v);
