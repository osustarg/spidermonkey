149: #define HalfTimeDomain  8.0e15 /* MUTANT (rep_const) */
149: #define HalfTimeDomain  8.1e15 /* MUTANT (rep_const) */
149: #define HalfTimeDomain  8.-1e15 /* MUTANT (rep_const) */
149: #define HalfTimeDomain  8.((64)+1)e15 /* MUTANT (rep_const) */
149: #define HalfTimeDomain  8.((64)-1)e15 /* MUTANT (rep_const) */
150: #define HoursPerDay     24.1 /* MUTANT (rep_const) */
150: #define HoursPerDay     24.-1 /* MUTANT (rep_const) */
152: #define MinutesPerHour  60.1 /* MUTANT (rep_const) */
152: #define MinutesPerHour  60.-1 /* MUTANT (rep_const) */
155: #define SecondsPerMinute 60.1 /* MUTANT (rep_const) */
155: #define SecondsPerMinute 60.-1 /* MUTANT (rep_const) */
163: /* MUTANT (rep_const) */static jsdouble msPerSecond = 1000.1;
163: /* MUTANT (rep_const) */static jsdouble msPerSecond = 1000.-1;
164: /* MUTANT (del_stmt) */ /* static jsdouble msPerDay = SecondsPerDay * 1000.0; */ 
164: /* MUTANT (rep_const) */static jsdouble msPerDay = SecondsPerDay * 1000.1;
164: /* MUTANT (rep_const) */static jsdouble msPerDay = SecondsPerDay * 1000.-1;
165: /* MUTANT (del_stmt) */ /* static jsdouble msPerHour = SecondsPerHour * 1000.0; */ 
165: /* MUTANT (rep_const) */static jsdouble msPerHour = SecondsPerHour * 1000.1;
165: /* MUTANT (rep_const) */static jsdouble msPerHour = SecondsPerHour * 1000.-1;
166: /* MUTANT (del_stmt) */ /* static jsdouble msPerMinute = SecondsPerMinute * 1000.0; */ 
166: /* MUTANT (rep_const) */static jsdouble msPerMinute = SecondsPerMinute * 1000.1;
166: /* MUTANT (rep_const) */static jsdouble msPerMinute = SecondsPerMinute * 1000.-1;
171: #define msPerSecond     1000.1 /* MUTANT (rep_const) */
171: #define msPerSecond     1000.-1 /* MUTANT (rep_const) */
179: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
180: /* MUTANT (del_stmt) */ /*     result = fmod(t, msPerDay); */ 
181: /* MUTANT (rep_op) */    if (result <= 0)
181: /* MUTANT (rep_op) */    if (result > 0)
181: /* MUTANT (rep_op) */    if (result >= 0)
181: /* MUTANT (rep_op) */    if (result == 0)
181: /* MUTANT (rep_op) */    if (result != 0)
181: /* MUTANT (rep_const) */    if (result < 1)
181: /* MUTANT (rep_const) */    if (result < -1)
181: /* MUTANT (negate) */    if(! (result < 0))
182: /* MUTANT (rep_op) */        result -= msPerDay;
182: /* MUTANT (rep_op) */        result *= msPerDay;
182: /* MUTANT (rep_op) */        result %= msPerDay;
183: /* MUTANT (del_stmt) */ /*     return result; */ 
186: #define DaysInYear(y)   ((y) % 0 == 0 && ((y) % 100 || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 1 == 0 && ((y) % 100 || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % -1 == 0 && ((y) % 100 || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % ((4)+1) == 0 && ((y) % 100 || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % ((4)-1) == 0 && ((y) % 100 || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 1 && ((y) % 100 || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == -1 && ((y) % 100 || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % 0 || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % 1 || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % -1 || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % ((100)+1) || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % ((100)-1) || ((y) % 400 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % 100 || ((y) % 0 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % 100 || ((y) % 1 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % 100 || ((y) % -1 == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % 100 || ((y) % ((400)+1) == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % 100 || ((y) % ((400)-1) == 0))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % 100 || ((y) % 400 == 1))  \ /* MUTANT (rep_const) */
186: #define DaysInYear(y)   ((y) % 4 == 0 && ((y) % 100 || ((y) % 400 == -1))  \ /* MUTANT (rep_const) */
187: /* MUTANT (rep_const) */                         ? 0 : 365)
187: /* MUTANT (rep_const) */                         ? 1 : 365)
187: /* MUTANT (rep_const) */                         ? -1 : 365)
187: /* MUTANT (rep_const) */                         ? ((366)+1) : 365)
187: /* MUTANT (rep_const) */                         ? ((366)-1) : 365)
187: /* MUTANT (rep_const) */                         ? 366 : 0)
187: /* MUTANT (rep_const) */                         ? 366 : 1)
187: /* MUTANT (rep_const) */                         ? 366 : -1)
187: /* MUTANT (rep_const) */                         ? 366 : ((365)+1))
187: /* MUTANT (rep_const) */                         ? 366 : ((365)-1))
192: #define DayFromYear(y)  (0 * ((y)-1970) + floor(((y)-1969)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (1 * ((y)-1970) + floor(((y)-1969)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (-1 * ((y)-1970) + floor(((y)-1969)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (((365)+1) * ((y)-1970) + floor(((y)-1969)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (((365)-1) * ((y)-1970) + floor(((y)-1969)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)0) + floor(((y)-1969)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)1) + floor(((y)-1969)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)-1) + floor(((y)-1969)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)((-1970)+1)) + floor(((y)-1969)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)((-1970)-1)) + floor(((y)-1969)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)-1970) + floor(((y)0)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)-1970) + floor(((y)1)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)-1970) + floor(((y)-1)/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)-1970) + floor(((y)((-1969)+1))/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)-1970) + floor(((y)((-1969)-1))/4.0)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)-1970) + floor(((y)-1969)/4.1)            \ /* MUTANT (rep_const) */
192: #define DayFromYear(y)  (365 * ((y)-1970) + floor(((y)-1969)/4.-1)            \ /* MUTANT (rep_const) */
193: /* MUTANT (rep_op) */                         - floor(((y)-1901)/100.0) - floor(((y)-1601)/400.0))
193: /* MUTANT (rep_op) */                         - floor(((y)-1901)/100.0) * floor(((y)-1601)/400.0))
193: /* MUTANT (rep_op) */                         - floor(((y)-1901)/100.0) % floor(((y)-1601)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)0)/100.0) + floor(((y)-1601)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)1)/100.0) + floor(((y)-1601)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)-1)/100.0) + floor(((y)-1601)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)((-1901)+1))/100.0) + floor(((y)-1601)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)((-1901)-1))/100.0) + floor(((y)-1601)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)-1901)/100.1) + floor(((y)-1601)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)-1901)/100.-1) + floor(((y)-1601)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)-1901)/100.0) + floor(((y)0)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)-1901)/100.0) + floor(((y)1)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)-1901)/100.0) + floor(((y)-1)/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)-1901)/100.0) + floor(((y)((-1601)+1))/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)-1901)/100.0) + floor(((y)((-1601)-1))/400.0))
193: /* MUTANT (rep_const) */                         - floor(((y)-1901)/100.0) + floor(((y)-1601)/400.1))
193: /* MUTANT (rep_const) */                         - floor(((y)-1901)/100.0) + floor(((y)-1601)/400.-1))
199: /* MUTANT (del_stmt) */ /*     jsint y = (jsint) floor(t /(msPerDay*365.2425)) + 1970; */ 
199: /* MUTANT (rep_op) */    jsint y = (jsint) floor(t /(msPerDay*365.2425)) - 1970;
199: /* MUTANT (rep_op) */    jsint y = (jsint) floor(t /(msPerDay*365.2425)) * 1970;
199: /* MUTANT (rep_op) */    jsint y = (jsint) floor(t /(msPerDay*365.2425)) % 1970;
199: /* MUTANT (rep_const) */    jsint y = (jsint) floor(t /(msPerDay*365.0)) + 1970;
199: /* MUTANT (rep_const) */    jsint y = (jsint) floor(t /(msPerDay*365.1)) + 1970;
199: /* MUTANT (rep_const) */    jsint y = (jsint) floor(t /(msPerDay*365.-1)) + 1970;
199: /* MUTANT (rep_const) */    jsint y = (jsint) floor(t /(msPerDay*365.((2425)+1))) + 1970;
199: /* MUTANT (rep_const) */    jsint y = (jsint) floor(t /(msPerDay*365.((2425)-1))) + 1970;
199: /* MUTANT (rep_const) */    jsint y = (jsint) floor(t /(msPerDay*365.2425)) + 0;
199: /* MUTANT (rep_const) */    jsint y = (jsint) floor(t /(msPerDay*365.2425)) + 1;
199: /* MUTANT (rep_const) */    jsint y = (jsint) floor(t /(msPerDay*365.2425)) + -1;
199: /* MUTANT (rep_const) */    jsint y = (jsint) floor(t /(msPerDay*365.2425)) + ((1970)+1);
199: /* MUTANT (rep_const) */    jsint y = (jsint) floor(t /(msPerDay*365.2425)) + ((1970)-1);
200: /* MUTANT (del_stmt) */ /*     jsdouble t2 = (jsdouble) TimeFromYear(y); */ 
202: /* MUTANT (rep_op) */    if (t2 <= t) {
202: /* MUTANT (rep_op) */    if (t2 < t) {
202: /* MUTANT (rep_op) */    if (t2 >= t) {
202: /* MUTANT (rep_op) */    if (t2 == t) {
202: /* MUTANT (rep_op) */    if (t2 != t) {
202: /* MUTANT (negate) */    if(! (t2 > t)) {
203: /* MUTANT (del_stmt) */ /*         y--; */ 
203: /* MUTANT (rep_op) */        y++;
205: /* MUTANT (rep_op) */        if (t2 - msPerDay * DaysInYear(y) <= t)
205: /* MUTANT (rep_op) */        if (t2 * msPerDay * DaysInYear(y) <= t)
205: /* MUTANT (rep_op) */        if (t2 % msPerDay * DaysInYear(y) <= t)
205: /* MUTANT (rep_op) */        if (t2 + msPerDay * DaysInYear(y) < t)
205: /* MUTANT (rep_op) */        if (t2 + msPerDay * DaysInYear(y) > t)
205: /* MUTANT (rep_op) */        if (t2 + msPerDay * DaysInYear(y) >= t)
205: /* MUTANT (rep_op) */        if (t2 + msPerDay * DaysInYear(y) == t)
205: /* MUTANT (rep_op) */        if (t2 + msPerDay * DaysInYear(y) != t)
205: /* MUTANT (negate) */        if(! (t2 + msPerDay * DaysInYear(y) <= t))
206: /* MUTANT (rep_op) */            y--;
211: #define InLeapYear(t)   (JSBool) (DaysInYear(YearFromTime(t)) == 0) /* MUTANT (rep_const) */
211: #define InLeapYear(t)   (JSBool) (DaysInYear(YearFromTime(t)) == 1) /* MUTANT (rep_const) */
211: #define InLeapYear(t)   (JSBool) (DaysInYear(YearFromTime(t)) == -1) /* MUTANT (rep_const) */
211: #define InLeapYear(t)   (JSBool) (DaysInYear(YearFromTime(t)) == ((366)+1)) /* MUTANT (rep_const) */
211: #define InLeapYear(t)   (JSBool) (DaysInYear(YearFromTime(t)) == ((366)-1)) /* MUTANT (rep_const) */
219: /* MUTANT (rep_const) */static jsdouble firstDayOfMonth[0][12] = {
219: /* MUTANT (rep_const) */static jsdouble firstDayOfMonth[1][12] = {
219: /* MUTANT (rep_const) */static jsdouble firstDayOfMonth[-1][12] = {
219: /* MUTANT (rep_const) */static jsdouble firstDayOfMonth[((2)+1)][12] = {
219: /* MUTANT (rep_const) */static jsdouble firstDayOfMonth[((2)-1)][12] = {
219: /* MUTANT (rep_const) */static jsdouble firstDayOfMonth[2][0] = {
219: /* MUTANT (rep_const) */static jsdouble firstDayOfMonth[2][1] = {
219: /* MUTANT (rep_const) */static jsdouble firstDayOfMonth[2][-1] = {
219: /* MUTANT (rep_const) */static jsdouble firstDayOfMonth[2][((12)+1)] = {
219: /* MUTANT (rep_const) */static jsdouble firstDayOfMonth[2][((12)-1)] = {
220: /* MUTANT (rep_const) */    {0.1, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.-1, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.1, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.-1, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.1, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.-1, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.1, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.-1, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.1, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.-1, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.1, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.-1, 181.0, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.1, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.-1, 212.0, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.1, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.-1, 243.0, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.1, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.-1, 273.0, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.1, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.-1, 304.0, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.1, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.-1, 334.0},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.1},
220: /* MUTANT (rep_const) */    {0.0, 31.0, 59.0, 90.0, 120.0, 151.0, 181.0, 212.0, 243.0, 273.0, 304.0, 334.-1},
221: /* MUTANT (rep_const) */    {0.1, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.-1, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.1, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.-1, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.1, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.-1, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.1, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.-1, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.1, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.-1, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.1, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.-1, 182.0, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.1, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.-1, 213.0, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.1, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.-1, 244.0, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.1, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.-1, 274.0, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.1, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.-1, 305.0, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.1, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.-1, 335.0}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.1}
221: /* MUTANT (rep_const) */    {0.0, 31.0, 60.0, 91.0, 121.0, 152.0, 182.0, 213.0, 244.0, 274.0, 305.0, 335.-1}
229: /* MUTANT (del_stmt) */ /*     intN d, step; */ 
230: /* MUTANT (del_stmt) */ /*     jsint year = YearFromTime(t); */ 
231: /* MUTANT (del_stmt) */ /*     d = DayWithinYear(t, year); */ 
233: /* MUTANT (rep_op) */    if (d <= (step = 31))
233: /* MUTANT (rep_op) */    if (d > (step = 31))
233: /* MUTANT (rep_op) */    if (d >= (step = 31))
233: /* MUTANT (rep_op) */    if (d == (step = 31))
233: /* MUTANT (rep_op) */    if (d != (step = 31))
233: /* MUTANT (rep_const) */    if (d < (step = 0))
233: /* MUTANT (rep_const) */    if (d < (step = 1))
233: /* MUTANT (rep_const) */    if (d < (step = -1))
233: /* MUTANT (rep_const) */    if (d < (step = ((31)+1)))
233: /* MUTANT (rep_const) */    if (d < (step = ((31)-1)))
233: /* MUTANT (negate) */    if(! (d < (step = 31)))
234: /* MUTANT (rep_const) */        return 1;
234: /* MUTANT (rep_const) */        return -1;
235: /* MUTANT (del_stmt) */ /*     step += (InLeapYear(t) ? 29 : 28); */ 
235: /* MUTANT (rep_op) */    step -= (InLeapYear(t) ? 29 : 28);
235: /* MUTANT (rep_op) */    step *= (InLeapYear(t) ? 29 : 28);
235: /* MUTANT (rep_op) */    step %= (InLeapYear(t) ? 29 : 28);
235: /* MUTANT (rep_const) */    step += (InLeapYear(t) ? 0 : 28);
235: /* MUTANT (rep_const) */    step += (InLeapYear(t) ? 1 : 28);
235: /* MUTANT (rep_const) */    step += (InLeapYear(t) ? -1 : 28);
235: /* MUTANT (rep_const) */    step += (InLeapYear(t) ? ((29)+1) : 28);
235: /* MUTANT (rep_const) */    step += (InLeapYear(t) ? ((29)-1) : 28);
235: /* MUTANT (rep_const) */    step += (InLeapYear(t) ? 29 : 0);
235: /* MUTANT (rep_const) */    step += (InLeapYear(t) ? 29 : 1);
235: /* MUTANT (rep_const) */    step += (InLeapYear(t) ? 29 : -1);
235: /* MUTANT (rep_const) */    step += (InLeapYear(t) ? 29 : ((28)+1));
235: /* MUTANT (rep_const) */    step += (InLeapYear(t) ? 29 : ((28)-1));
236: /* MUTANT (rep_op) */    if (d <= step)
236: /* MUTANT (rep_op) */    if (d > step)
236: /* MUTANT (rep_op) */    if (d >= step)
236: /* MUTANT (rep_op) */    if (d == step)
236: /* MUTANT (rep_op) */    if (d != step)
236: /* MUTANT (negate) */    if(! (d < step))
237: /* MUTANT (rep_const) */        return 0;
237: /* MUTANT (rep_const) */        return -1;
237: /* MUTANT (rep_const) */        return ((1)+1);
238: /* MUTANT (rep_op) */    if (d <= (step += 31))
238: /* MUTANT (rep_op) */    if (d > (step += 31))
238: /* MUTANT (rep_op) */    if (d >= (step += 31))
238: /* MUTANT (rep_op) */    if (d == (step += 31))
238: /* MUTANT (rep_op) */    if (d != (step += 31))
238: /* MUTANT (rep_op) */    if (d < (step -= 31))
238: /* MUTANT (rep_op) */    if (d < (step *= 31))
238: /* MUTANT (rep_op) */    if (d < (step %= 31))
238: /* MUTANT (rep_const) */    if (d < (step += 0))
238: /* MUTANT (rep_const) */    if (d < (step += 1))
238: /* MUTANT (rep_const) */    if (d < (step += -1))
238: /* MUTANT (rep_const) */    if (d < (step += ((31)+1)))
238: /* MUTANT (rep_const) */    if (d < (step += ((31)-1)))
238: /* MUTANT (negate) */    if(! (d < (step += 31)))
239: /* MUTANT (rep_const) */        return 0;
239: /* MUTANT (rep_const) */        return 1;
239: /* MUTANT (rep_const) */        return -1;
239: /* MUTANT (rep_const) */        return ((2)+1);
239: /* MUTANT (rep_const) */        return ((2)-1);
240: /* MUTANT (rep_op) */    if (d <= (step += 30))
240: /* MUTANT (rep_op) */    if (d > (step += 30))
240: /* MUTANT (rep_op) */    if (d >= (step += 30))
240: /* MUTANT (rep_op) */    if (d == (step += 30))
240: /* MUTANT (rep_op) */    if (d != (step += 30))
240: /* MUTANT (rep_op) */    if (d < (step -= 30))
240: /* MUTANT (rep_op) */    if (d < (step *= 30))
240: /* MUTANT (rep_op) */    if (d < (step %= 30))
240: /* MUTANT (rep_const) */    if (d < (step += 0))
240: /* MUTANT (rep_const) */    if (d < (step += 1))
240: /* MUTANT (rep_const) */    if (d < (step += -1))
240: /* MUTANT (rep_const) */    if (d < (step += ((30)+1)))
240: /* MUTANT (rep_const) */    if (d < (step += ((30)-1)))
240: /* MUTANT (negate) */    if(! (d < (step += 30)))
241: /* MUTANT (rep_const) */        return 0;
241: /* MUTANT (rep_const) */        return 1;
241: /* MUTANT (rep_const) */        return -1;
241: /* MUTANT (rep_const) */        return ((3)+1);
241: /* MUTANT (rep_const) */        return ((3)-1);
242: /* MUTANT (rep_op) */    if (d <= (step += 31))
242: /* MUTANT (rep_op) */    if (d > (step += 31))
242: /* MUTANT (rep_op) */    if (d >= (step += 31))
242: /* MUTANT (rep_op) */    if (d == (step += 31))
242: /* MUTANT (rep_op) */    if (d != (step += 31))
242: /* MUTANT (rep_op) */    if (d < (step -= 31))
242: /* MUTANT (rep_op) */    if (d < (step *= 31))
242: /* MUTANT (rep_op) */    if (d < (step %= 31))
242: /* MUTANT (rep_const) */    if (d < (step += 0))
242: /* MUTANT (rep_const) */    if (d < (step += 1))
242: /* MUTANT (rep_const) */    if (d < (step += -1))
242: /* MUTANT (rep_const) */    if (d < (step += ((31)+1)))
242: /* MUTANT (rep_const) */    if (d < (step += ((31)-1)))
242: /* MUTANT (negate) */    if(! (d < (step += 31)))
243: /* MUTANT (rep_const) */        return 0;
243: /* MUTANT (rep_const) */        return 1;
243: /* MUTANT (rep_const) */        return -1;
243: /* MUTANT (rep_const) */        return ((4)+1);
243: /* MUTANT (rep_const) */        return ((4)-1);
244: /* MUTANT (rep_op) */    if (d <= (step += 30))
244: /* MUTANT (rep_op) */    if (d > (step += 30))
244: /* MUTANT (rep_op) */    if (d >= (step += 30))
244: /* MUTANT (rep_op) */    if (d == (step += 30))
244: /* MUTANT (rep_op) */    if (d != (step += 30))
244: /* MUTANT (rep_op) */    if (d < (step -= 30))
244: /* MUTANT (rep_op) */    if (d < (step *= 30))
244: /* MUTANT (rep_op) */    if (d < (step %= 30))
244: /* MUTANT (rep_const) */    if (d < (step += 0))
244: /* MUTANT (rep_const) */    if (d < (step += 1))
244: /* MUTANT (rep_const) */    if (d < (step += -1))
244: /* MUTANT (rep_const) */    if (d < (step += ((30)+1)))
244: /* MUTANT (rep_const) */    if (d < (step += ((30)-1)))
244: /* MUTANT (negate) */    if(! (d < (step += 30)))
245: /* MUTANT (rep_const) */        return 0;
245: /* MUTANT (rep_const) */        return 1;
245: /* MUTANT (rep_const) */        return -1;
245: /* MUTANT (rep_const) */        return ((5)+1);
245: /* MUTANT (rep_const) */        return ((5)-1);
246: /* MUTANT (rep_op) */    if (d <= (step += 31))
246: /* MUTANT (rep_op) */    if (d > (step += 31))
246: /* MUTANT (rep_op) */    if (d >= (step += 31))
246: /* MUTANT (rep_op) */    if (d == (step += 31))
246: /* MUTANT (rep_op) */    if (d != (step += 31))
246: /* MUTANT (rep_op) */    if (d < (step -= 31))
246: /* MUTANT (rep_op) */    if (d < (step *= 31))
246: /* MUTANT (rep_op) */    if (d < (step %= 31))
246: /* MUTANT (rep_const) */    if (d < (step += 0))
246: /* MUTANT (rep_const) */    if (d < (step += 1))
246: /* MUTANT (rep_const) */    if (d < (step += -1))
246: /* MUTANT (rep_const) */    if (d < (step += ((31)+1)))
246: /* MUTANT (rep_const) */    if (d < (step += ((31)-1)))
246: /* MUTANT (negate) */    if(! (d < (step += 31)))
247: /* MUTANT (rep_const) */        return 0;
247: /* MUTANT (rep_const) */        return 1;
247: /* MUTANT (rep_const) */        return -1;
247: /* MUTANT (rep_const) */        return ((6)+1);
247: /* MUTANT (rep_const) */        return ((6)-1);
248: /* MUTANT (rep_op) */    if (d <= (step += 31))
248: /* MUTANT (rep_op) */    if (d > (step += 31))
248: /* MUTANT (rep_op) */    if (d >= (step += 31))
248: /* MUTANT (rep_op) */    if (d == (step += 31))
248: /* MUTANT (rep_op) */    if (d != (step += 31))
248: /* MUTANT (rep_op) */    if (d < (step -= 31))
248: /* MUTANT (rep_op) */    if (d < (step *= 31))
248: /* MUTANT (rep_op) */    if (d < (step %= 31))
248: /* MUTANT (rep_const) */    if (d < (step += 0))
248: /* MUTANT (rep_const) */    if (d < (step += 1))
248: /* MUTANT (rep_const) */    if (d < (step += -1))
248: /* MUTANT (rep_const) */    if (d < (step += ((31)+1)))
248: /* MUTANT (rep_const) */    if (d < (step += ((31)-1)))
248: /* MUTANT (negate) */    if(! (d < (step += 31)))
249: /* MUTANT (rep_const) */        return 0;
249: /* MUTANT (rep_const) */        return 1;
249: /* MUTANT (rep_const) */        return -1;
249: /* MUTANT (rep_const) */        return ((7)+1);
249: /* MUTANT (rep_const) */        return ((7)-1);
250: /* MUTANT (rep_op) */    if (d <= (step += 30))
250: /* MUTANT (rep_op) */    if (d > (step += 30))
250: /* MUTANT (rep_op) */    if (d >= (step += 30))
250: /* MUTANT (rep_op) */    if (d == (step += 30))
250: /* MUTANT (rep_op) */    if (d != (step += 30))
250: /* MUTANT (rep_op) */    if (d < (step -= 30))
250: /* MUTANT (rep_op) */    if (d < (step *= 30))
250: /* MUTANT (rep_op) */    if (d < (step %= 30))
250: /* MUTANT (rep_const) */    if (d < (step += 0))
250: /* MUTANT (rep_const) */    if (d < (step += 1))
250: /* MUTANT (rep_const) */    if (d < (step += -1))
250: /* MUTANT (rep_const) */    if (d < (step += ((30)+1)))
250: /* MUTANT (rep_const) */    if (d < (step += ((30)-1)))
250: /* MUTANT (negate) */    if(! (d < (step += 30)))
251: /* MUTANT (rep_const) */        return 0;
251: /* MUTANT (rep_const) */        return 1;
251: /* MUTANT (rep_const) */        return -1;
251: /* MUTANT (rep_const) */        return ((8)+1);
251: /* MUTANT (rep_const) */        return ((8)-1);
252: /* MUTANT (rep_op) */    if (d <= (step += 31))
252: /* MUTANT (rep_op) */    if (d > (step += 31))
252: /* MUTANT (rep_op) */    if (d >= (step += 31))
252: /* MUTANT (rep_op) */    if (d == (step += 31))
252: /* MUTANT (rep_op) */    if (d != (step += 31))
252: /* MUTANT (rep_op) */    if (d < (step -= 31))
252: /* MUTANT (rep_op) */    if (d < (step *= 31))
252: /* MUTANT (rep_op) */    if (d < (step %= 31))
252: /* MUTANT (rep_const) */    if (d < (step += 0))
252: /* MUTANT (rep_const) */    if (d < (step += 1))
252: /* MUTANT (rep_const) */    if (d < (step += -1))
252: /* MUTANT (rep_const) */    if (d < (step += ((31)+1)))
252: /* MUTANT (rep_const) */    if (d < (step += ((31)-1)))
252: /* MUTANT (negate) */    if(! (d < (step += 31)))
253: /* MUTANT (rep_const) */        return 0;
253: /* MUTANT (rep_const) */        return 1;
253: /* MUTANT (rep_const) */        return -1;
253: /* MUTANT (rep_const) */        return ((9)+1);
253: /* MUTANT (rep_const) */        return ((9)-1);
254: /* MUTANT (rep_op) */    if (d <= (step += 30))
254: /* MUTANT (rep_op) */    if (d > (step += 30))
254: /* MUTANT (rep_op) */    if (d >= (step += 30))
254: /* MUTANT (rep_op) */    if (d == (step += 30))
254: /* MUTANT (rep_op) */    if (d != (step += 30))
254: /* MUTANT (rep_op) */    if (d < (step -= 30))
254: /* MUTANT (rep_op) */    if (d < (step *= 30))
254: /* MUTANT (rep_op) */    if (d < (step %= 30))
254: /* MUTANT (rep_const) */    if (d < (step += 0))
254: /* MUTANT (rep_const) */    if (d < (step += 1))
254: /* MUTANT (rep_const) */    if (d < (step += -1))
254: /* MUTANT (rep_const) */    if (d < (step += ((30)+1)))
254: /* MUTANT (rep_const) */    if (d < (step += ((30)-1)))
254: /* MUTANT (negate) */    if(! (d < (step += 30)))
255: /* MUTANT (rep_const) */        return 0;
255: /* MUTANT (rep_const) */        return 1;
255: /* MUTANT (rep_const) */        return -1;
255: /* MUTANT (rep_const) */        return ((10)+1);
255: /* MUTANT (rep_const) */        return ((10)-1);
256: /* MUTANT (del_stmt) */ /*     return 11; */ 
256: /* MUTANT (rep_const) */    return 0;
256: /* MUTANT (rep_const) */    return 1;
256: /* MUTANT (rep_const) */    return -1;
256: /* MUTANT (rep_const) */    return ((11)+1);
256: /* MUTANT (rep_const) */    return ((11)-1);
262: /* MUTANT (del_stmt) */ /*     intN d, step, next; */ 
263: /* MUTANT (del_stmt) */ /*     jsint year = YearFromTime(t); */ 
264: /* MUTANT (del_stmt) */ /*     d = DayWithinYear(t, year); */ 
266: /* MUTANT (rep_op) */    if (d < (next = 30))
266: /* MUTANT (rep_op) */    if (d > (next = 30))
266: /* MUTANT (rep_op) */    if (d >= (next = 30))
266: /* MUTANT (rep_op) */    if (d == (next = 30))
266: /* MUTANT (rep_op) */    if (d != (next = 30))
266: /* MUTANT (rep_const) */    if (d <= (next = 0))
266: /* MUTANT (rep_const) */    if (d <= (next = 1))
266: /* MUTANT (rep_const) */    if (d <= (next = -1))
266: /* MUTANT (rep_const) */    if (d <= (next = ((30)+1)))
266: /* MUTANT (rep_const) */    if (d <= (next = ((30)-1)))
266: /* MUTANT (negate) */    if(! (d <= (next = 30)))
267: /* MUTANT (rep_op) */        return d - 1;
267: /* MUTANT (rep_op) */        return d * 1;
267: /* MUTANT (rep_op) */        return d % 1;
267: /* MUTANT (rep_const) */        return d + 0;
267: /* MUTANT (rep_const) */        return d + -1;
267: /* MUTANT (rep_const) */        return d + ((1)+1);
268: /* MUTANT (del_stmt) */ /*     step = next; */ 
269: /* MUTANT (del_stmt) */ /*     next += (InLeapYear(t) ? 29 : 28); */ 
269: /* MUTANT (rep_op) */    next -= (InLeapYear(t) ? 29 : 28);
269: /* MUTANT (rep_op) */    next *= (InLeapYear(t) ? 29 : 28);
269: /* MUTANT (rep_op) */    next %= (InLeapYear(t) ? 29 : 28);
269: /* MUTANT (rep_const) */    next += (InLeapYear(t) ? 0 : 28);
269: /* MUTANT (rep_const) */    next += (InLeapYear(t) ? 1 : 28);
269: /* MUTANT (rep_const) */    next += (InLeapYear(t) ? -1 : 28);
269: /* MUTANT (rep_const) */    next += (InLeapYear(t) ? ((29)+1) : 28);
269: /* MUTANT (rep_const) */    next += (InLeapYear(t) ? ((29)-1) : 28);
269: /* MUTANT (rep_const) */    next += (InLeapYear(t) ? 29 : 0);
269: /* MUTANT (rep_const) */    next += (InLeapYear(t) ? 29 : 1);
269: /* MUTANT (rep_const) */    next += (InLeapYear(t) ? 29 : -1);
269: /* MUTANT (rep_const) */    next += (InLeapYear(t) ? 29 : ((28)+1));
269: /* MUTANT (rep_const) */    next += (InLeapYear(t) ? 29 : ((28)-1));
270: /* MUTANT (rep_op) */    if (d < next)
270: /* MUTANT (rep_op) */    if (d > next)
270: /* MUTANT (rep_op) */    if (d >= next)
270: /* MUTANT (rep_op) */    if (d == next)
270: /* MUTANT (rep_op) */    if (d != next)
270: /* MUTANT (negate) */    if(! (d <= next))
272: /* MUTANT (del_stmt) */ /*     step = next; */ 
273: /* MUTANT (rep_op) */    if (d < (next += 31))
273: /* MUTANT (rep_op) */    if (d > (next += 31))
273: /* MUTANT (rep_op) */    if (d >= (next += 31))
273: /* MUTANT (rep_op) */    if (d == (next += 31))
273: /* MUTANT (rep_op) */    if (d != (next += 31))
273: /* MUTANT (rep_op) */    if (d <= (next -= 31))
273: /* MUTANT (rep_op) */    if (d <= (next *= 31))
273: /* MUTANT (rep_op) */    if (d <= (next %= 31))
273: /* MUTANT (rep_const) */    if (d <= (next += 0))
273: /* MUTANT (rep_const) */    if (d <= (next += 1))
273: /* MUTANT (rep_const) */    if (d <= (next += -1))
273: /* MUTANT (rep_const) */    if (d <= (next += ((31)+1)))
273: /* MUTANT (rep_const) */    if (d <= (next += ((31)-1)))
273: /* MUTANT (negate) */    if(! (d <= (next += 31)))
275: /* MUTANT (del_stmt) */ /*     step = next; */ 
276: /* MUTANT (rep_op) */    if (d < (next += 30))
276: /* MUTANT (rep_op) */    if (d > (next += 30))
276: /* MUTANT (rep_op) */    if (d >= (next += 30))
276: /* MUTANT (rep_op) */    if (d == (next += 30))
276: /* MUTANT (rep_op) */    if (d != (next += 30))
276: /* MUTANT (rep_op) */    if (d <= (next -= 30))
276: /* MUTANT (rep_op) */    if (d <= (next *= 30))
276: /* MUTANT (rep_op) */    if (d <= (next %= 30))
276: /* MUTANT (rep_const) */    if (d <= (next += 0))
276: /* MUTANT (rep_const) */    if (d <= (next += 1))
276: /* MUTANT (rep_const) */    if (d <= (next += -1))
276: /* MUTANT (rep_const) */    if (d <= (next += ((30)+1)))
276: /* MUTANT (rep_const) */    if (d <= (next += ((30)-1)))
276: /* MUTANT (negate) */    if(! (d <= (next += 30)))
278: /* MUTANT (del_stmt) */ /*     step = next; */ 
279: /* MUTANT (rep_op) */    if (d < (next += 31))
279: /* MUTANT (rep_op) */    if (d > (next += 31))
279: /* MUTANT (rep_op) */    if (d >= (next += 31))
279: /* MUTANT (rep_op) */    if (d == (next += 31))
279: /* MUTANT (rep_op) */    if (d != (next += 31))
279: /* MUTANT (rep_op) */    if (d <= (next -= 31))
279: /* MUTANT (rep_op) */    if (d <= (next *= 31))
279: /* MUTANT (rep_op) */    if (d <= (next %= 31))
279: /* MUTANT (rep_const) */    if (d <= (next += 0))
279: /* MUTANT (rep_const) */    if (d <= (next += 1))
279: /* MUTANT (rep_const) */    if (d <= (next += -1))
279: /* MUTANT (rep_const) */    if (d <= (next += ((31)+1)))
279: /* MUTANT (rep_const) */    if (d <= (next += ((31)-1)))
279: /* MUTANT (negate) */    if(! (d <= (next += 31)))
281: /* MUTANT (del_stmt) */ /*     step = next; */ 
282: /* MUTANT (rep_op) */    if (d < (next += 30))
282: /* MUTANT (rep_op) */    if (d > (next += 30))
282: /* MUTANT (rep_op) */    if (d >= (next += 30))
282: /* MUTANT (rep_op) */    if (d == (next += 30))
282: /* MUTANT (rep_op) */    if (d != (next += 30))
282: /* MUTANT (rep_op) */    if (d <= (next -= 30))
282: /* MUTANT (rep_op) */    if (d <= (next *= 30))
282: /* MUTANT (rep_op) */    if (d <= (next %= 30))
282: /* MUTANT (rep_const) */    if (d <= (next += 0))
282: /* MUTANT (rep_const) */    if (d <= (next += 1))
282: /* MUTANT (rep_const) */    if (d <= (next += -1))
282: /* MUTANT (rep_const) */    if (d <= (next += ((30)+1)))
282: /* MUTANT (rep_const) */    if (d <= (next += ((30)-1)))
282: /* MUTANT (negate) */    if(! (d <= (next += 30)))
284: /* MUTANT (del_stmt) */ /*     step = next; */ 
285: /* MUTANT (rep_op) */    if (d < (next += 31))
285: /* MUTANT (rep_op) */    if (d > (next += 31))
285: /* MUTANT (rep_op) */    if (d >= (next += 31))
285: /* MUTANT (rep_op) */    if (d == (next += 31))
285: /* MUTANT (rep_op) */    if (d != (next += 31))
285: /* MUTANT (rep_op) */    if (d <= (next -= 31))
285: /* MUTANT (rep_op) */    if (d <= (next *= 31))
285: /* MUTANT (rep_op) */    if (d <= (next %= 31))
285: /* MUTANT (rep_const) */    if (d <= (next += 0))
285: /* MUTANT (rep_const) */    if (d <= (next += 1))
285: /* MUTANT (rep_const) */    if (d <= (next += -1))
285: /* MUTANT (rep_const) */    if (d <= (next += ((31)+1)))
285: /* MUTANT (rep_const) */    if (d <= (next += ((31)-1)))
285: /* MUTANT (negate) */    if(! (d <= (next += 31)))
287: /* MUTANT (del_stmt) */ /*     step = next; */ 
288: /* MUTANT (rep_op) */    if (d < (next += 31))
288: /* MUTANT (rep_op) */    if (d > (next += 31))
288: /* MUTANT (rep_op) */    if (d >= (next += 31))
288: /* MUTANT (rep_op) */    if (d == (next += 31))
288: /* MUTANT (rep_op) */    if (d != (next += 31))
288: /* MUTANT (rep_op) */    if (d <= (next -= 31))
288: /* MUTANT (rep_op) */    if (d <= (next *= 31))
288: /* MUTANT (rep_op) */    if (d <= (next %= 31))
288: /* MUTANT (rep_const) */    if (d <= (next += 0))
288: /* MUTANT (rep_const) */    if (d <= (next += 1))
288: /* MUTANT (rep_const) */    if (d <= (next += -1))
288: /* MUTANT (rep_const) */    if (d <= (next += ((31)+1)))
288: /* MUTANT (rep_const) */    if (d <= (next += ((31)-1)))
288: /* MUTANT (negate) */    if(! (d <= (next += 31)))
290: /* MUTANT (del_stmt) */ /*     step = next; */ 
291: /* MUTANT (rep_op) */    if (d < (next += 30))
291: /* MUTANT (rep_op) */    if (d > (next += 30))
291: /* MUTANT (rep_op) */    if (d >= (next += 30))
291: /* MUTANT (rep_op) */    if (d == (next += 30))
291: /* MUTANT (rep_op) */    if (d != (next += 30))
291: /* MUTANT (rep_op) */    if (d <= (next -= 30))
291: /* MUTANT (rep_op) */    if (d <= (next *= 30))
291: /* MUTANT (rep_op) */    if (d <= (next %= 30))
291: /* MUTANT (rep_const) */    if (d <= (next += 0))
291: /* MUTANT (rep_const) */    if (d <= (next += 1))
291: /* MUTANT (rep_const) */    if (d <= (next += -1))
291: /* MUTANT (rep_const) */    if (d <= (next += ((30)+1)))
291: /* MUTANT (rep_const) */    if (d <= (next += ((30)-1)))
291: /* MUTANT (negate) */    if(! (d <= (next += 30)))
293: /* MUTANT (del_stmt) */ /*     step = next; */ 
294: /* MUTANT (rep_op) */    if (d < (next += 31))
294: /* MUTANT (rep_op) */    if (d > (next += 31))
294: /* MUTANT (rep_op) */    if (d >= (next += 31))
294: /* MUTANT (rep_op) */    if (d == (next += 31))
294: /* MUTANT (rep_op) */    if (d != (next += 31))
294: /* MUTANT (rep_op) */    if (d <= (next -= 31))
294: /* MUTANT (rep_op) */    if (d <= (next *= 31))
294: /* MUTANT (rep_op) */    if (d <= (next %= 31))
294: /* MUTANT (rep_const) */    if (d <= (next += 0))
294: /* MUTANT (rep_const) */    if (d <= (next += 1))
294: /* MUTANT (rep_const) */    if (d <= (next += -1))
294: /* MUTANT (rep_const) */    if (d <= (next += ((31)+1)))
294: /* MUTANT (rep_const) */    if (d <= (next += ((31)-1)))
294: /* MUTANT (negate) */    if(! (d <= (next += 31)))
296: /* MUTANT (del_stmt) */ /*     step = next; */ 
297: /* MUTANT (rep_op) */    if (d < (next += 30))
297: /* MUTANT (rep_op) */    if (d > (next += 30))
297: /* MUTANT (rep_op) */    if (d >= (next += 30))
297: /* MUTANT (rep_op) */    if (d == (next += 30))
297: /* MUTANT (rep_op) */    if (d != (next += 30))
297: /* MUTANT (rep_op) */    if (d <= (next -= 30))
297: /* MUTANT (rep_op) */    if (d <= (next *= 30))
297: /* MUTANT (rep_op) */    if (d <= (next %= 30))
297: /* MUTANT (rep_const) */    if (d <= (next += 0))
297: /* MUTANT (rep_const) */    if (d <= (next += 1))
297: /* MUTANT (rep_const) */    if (d <= (next += -1))
297: /* MUTANT (rep_const) */    if (d <= (next += ((30)+1)))
297: /* MUTANT (rep_const) */    if (d <= (next += ((30)-1)))
297: /* MUTANT (negate) */    if(! (d <= (next += 30)))
299: /* MUTANT (del_stmt) */ /*     step = next; */ 
300: /* MUTANT (del_stmt) */ /*     return d - step; */ 
306: /* MUTANT (del_stmt) */ /*     jsint result; */ 
307: /* MUTANT (del_stmt) */ /*     result = (jsint) Day(t) + 4; */ 
307: /* MUTANT (rep_op) */    result = (jsint) Day(t) - 4;
307: /* MUTANT (rep_op) */    result = (jsint) Day(t) * 4;
307: /* MUTANT (rep_op) */    result = (jsint) Day(t) % 4;
307: /* MUTANT (rep_const) */    result = (jsint) Day(t) + 0;
307: /* MUTANT (rep_const) */    result = (jsint) Day(t) + 1;
307: /* MUTANT (rep_const) */    result = (jsint) Day(t) + -1;
307: /* MUTANT (rep_const) */    result = (jsint) Day(t) + ((4)+1);
307: /* MUTANT (rep_const) */    result = (jsint) Day(t) + ((4)-1);
308: /* MUTANT (del_stmt) */ /*     result = result % 7; */ 
308: /* MUTANT (rep_op) */    result = result + 7;
308: /* MUTANT (rep_op) */    result = result - 7;
308: /* MUTANT (rep_op) */    result = result * 7;
308: /* MUTANT (rep_const) */    result = result % 0;
308: /* MUTANT (rep_const) */    result = result % 1;
308: /* MUTANT (rep_const) */    result = result % -1;
308: /* MUTANT (rep_const) */    result = result % ((7)+1);
308: /* MUTANT (rep_const) */    result = result % ((7)-1);
309: /* MUTANT (rep_op) */    if (result <= 0)
309: /* MUTANT (rep_op) */    if (result > 0)
309: /* MUTANT (rep_op) */    if (result >= 0)
309: /* MUTANT (rep_op) */    if (result == 0)
309: /* MUTANT (rep_op) */    if (result != 0)
309: /* MUTANT (rep_const) */    if (result < 1)
309: /* MUTANT (rep_const) */    if (result < -1)
309: /* MUTANT (negate) */    if(! (result < 0))
310: /* MUTANT (rep_op) */        result -= 7;
310: /* MUTANT (rep_op) */        result *= 7;
310: /* MUTANT (rep_op) */        result %= 7;
310: /* MUTANT (rep_const) */        result += 0;
310: /* MUTANT (rep_const) */        result += 1;
310: /* MUTANT (rep_const) */        result += -1;
310: /* MUTANT (rep_const) */        result += ((7)+1);
310: /* MUTANT (rep_const) */        result += ((7)-1);
311: /* MUTANT (del_stmt) */ /*     return (intN) result; */ 
315: /* MUTANT (rep_op) */((((hour) * MinutesPerHour - (min)) * SecondsPerMinute + (sec)) * msPerSecond + (ms))
315: /* MUTANT (rep_op) */((((hour) * MinutesPerHour * (min)) * SecondsPerMinute + (sec)) * msPerSecond + (ms))
315: /* MUTANT (rep_op) */((((hour) * MinutesPerHour % (min)) * SecondsPerMinute + (sec)) * msPerSecond + (ms))
315: /* MUTANT (rep_op) */((((hour) * MinutesPerHour + (min)) * SecondsPerMinute - (sec)) * msPerSecond + (ms))
315: /* MUTANT (rep_op) */((((hour) * MinutesPerHour + (min)) * SecondsPerMinute * (sec)) * msPerSecond + (ms))
315: /* MUTANT (rep_op) */((((hour) * MinutesPerHour + (min)) * SecondsPerMinute % (sec)) * msPerSecond + (ms))
315: /* MUTANT (rep_op) */((((hour) * MinutesPerHour + (min)) * SecondsPerMinute + (sec)) * msPerSecond - (ms))
315: /* MUTANT (rep_op) */((((hour) * MinutesPerHour + (min)) * SecondsPerMinute + (sec)) * msPerSecond * (ms))
315: /* MUTANT (rep_op) */((((hour) * MinutesPerHour + (min)) * SecondsPerMinute + (sec)) * msPerSecond % (ms))
320: /* MUTANT (del_stmt) */ /*     JSBool leap; */ 
321: /* MUTANT (del_stmt) */ /*     jsdouble yearday; */ 
322: /* MUTANT (del_stmt) */ /*     jsdouble monthday; */ 
324: /* MUTANT (del_stmt) */ /*     year += floor(month / 12); */ 
324: /* MUTANT (rep_op) */    year -= floor(month / 12);
324: /* MUTANT (rep_op) */    year *= floor(month / 12);
324: /* MUTANT (rep_op) */    year %= floor(month / 12);
324: /* MUTANT (rep_const) */    year += floor(month / 0);
324: /* MUTANT (rep_const) */    year += floor(month / 1);
324: /* MUTANT (rep_const) */    year += floor(month / -1);
324: /* MUTANT (rep_const) */    year += floor(month / ((12)+1));
324: /* MUTANT (rep_const) */    year += floor(month / ((12)-1));
326: /* MUTANT (del_stmt) */ /*     month = fmod(month, 12.0); */ 
326: /* MUTANT (rep_const) */    month = fmod(month, 12.1);
326: /* MUTANT (rep_const) */    month = fmod(month, 12.-1);
327: /* MUTANT (rep_op) */    if (month <= 0)
327: /* MUTANT (rep_op) */    if (month > 0)
327: /* MUTANT (rep_op) */    if (month >= 0)
327: /* MUTANT (rep_op) */    if (month == 0)
327: /* MUTANT (rep_op) */    if (month != 0)
327: /* MUTANT (rep_const) */    if (month < 1)
327: /* MUTANT (rep_const) */    if (month < -1)
327: /* MUTANT (negate) */    if(! (month < 0))
328: /* MUTANT (rep_op) */        month -= 12;
328: /* MUTANT (rep_op) */        month *= 12;
328: /* MUTANT (rep_op) */        month %= 12;
328: /* MUTANT (rep_const) */        month += 0;
328: /* MUTANT (rep_const) */        month += 1;
328: /* MUTANT (rep_const) */        month += -1;
328: /* MUTANT (rep_const) */        month += ((12)+1);
328: /* MUTANT (rep_const) */        month += ((12)-1);
330: /* MUTANT (del_stmt) */ /*     leap = (DaysInYear((jsint) year) == 366); */ 
330: /* MUTANT (rep_op) */    leap = (DaysInYear((jsint) year) != 366);
330: /* MUTANT (rep_const) */    leap = (DaysInYear((jsint) year) == 0);
330: /* MUTANT (rep_const) */    leap = (DaysInYear((jsint) year) == 1);
330: /* MUTANT (rep_const) */    leap = (DaysInYear((jsint) year) == -1);
330: /* MUTANT (rep_const) */    leap = (DaysInYear((jsint) year) == ((366)+1));
330: /* MUTANT (rep_const) */    leap = (DaysInYear((jsint) year) == ((366)-1));
332: /* MUTANT (del_stmt) */ /*     yearday = floor(TimeFromYear(year) / msPerDay); */ 
333: /* MUTANT (del_stmt) */ /*     monthday = DayFromMonth(month, leap); */ 
335: /* MUTANT (del_stmt) */ /*     return yearday + monthday + date - 1; */ 
335: /* MUTANT (rep_op) */    return yearday - monthday + date - 1;
335: /* MUTANT (rep_op) */    return yearday * monthday + date - 1;
335: /* MUTANT (rep_op) */    return yearday % monthday + date - 1;
335: /* MUTANT (rep_op) */    return yearday + monthday - date - 1;
335: /* MUTANT (rep_op) */    return yearday + monthday * date - 1;
335: /* MUTANT (rep_op) */    return yearday + monthday % date - 1;
335: /* MUTANT (rep_const) */    return yearday + monthday + date - 0;
335: /* MUTANT (rep_const) */    return yearday + monthday + date - -1;
335: /* MUTANT (rep_const) */    return yearday + monthday + date - ((1)+1);
349: /* MUTANT (rep_const) */static jsint yearStartingWith[0][7] = {
349: /* MUTANT (rep_const) */static jsint yearStartingWith[1][7] = {
349: /* MUTANT (rep_const) */static jsint yearStartingWith[-1][7] = {
349: /* MUTANT (rep_const) */static jsint yearStartingWith[((2)+1)][7] = {
349: /* MUTANT (rep_const) */static jsint yearStartingWith[((2)-1)][7] = {
349: /* MUTANT (rep_const) */static jsint yearStartingWith[2][0] = {
349: /* MUTANT (rep_const) */static jsint yearStartingWith[2][1] = {
349: /* MUTANT (rep_const) */static jsint yearStartingWith[2][-1] = {
349: /* MUTANT (rep_const) */static jsint yearStartingWith[2][((7)+1)] = {
349: /* MUTANT (rep_const) */static jsint yearStartingWith[2][((7)-1)] = {
350: /* MUTANT (rep_const) */    {0, 1973, 1974, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1, 1973, 1974, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {-1, 1973, 1974, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {((1978)+1), 1973, 1974, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {((1978)-1), 1973, 1974, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 0, 1974, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1, 1974, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, -1, 1974, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, ((1973)+1), 1974, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, ((1973)-1), 1974, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 0, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, -1, 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, ((1974)+1), 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, ((1974)-1), 1975, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 0, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, -1, 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, ((1975)+1), 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, ((1975)-1), 1981, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 0, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, -1, 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, ((1981)+1), 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, ((1981)-1), 1971, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1981, 0, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1981, 1, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1981, -1, 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1981, ((1971)+1), 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1981, ((1971)-1), 1977},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1981, 1971, 0},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1981, 1971, 1},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1981, 1971, -1},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1981, 1971, ((1977)+1)},
350: /* MUTANT (rep_const) */    {1978, 1973, 1974, 1975, 1981, 1971, ((1977)-1)},
351: /* MUTANT (rep_const) */    {0, 1996, 1980, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1, 1996, 1980, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {-1, 1996, 1980, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {((1984)+1), 1996, 1980, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {((1984)-1), 1996, 1980, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 0, 1980, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1, 1980, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, -1, 1980, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, ((1996)+1), 1980, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, ((1996)-1), 1980, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 0, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, -1, 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, ((1980)+1), 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, ((1980)-1), 1992, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 0, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, -1, 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, ((1992)+1), 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, ((1992)-1), 1976, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 0, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, -1, 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, ((1976)+1), 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, ((1976)-1), 1988, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1976, 0, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1976, 1, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1976, -1, 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1976, ((1988)+1), 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1976, ((1988)-1), 1972}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1976, 1988, 0}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1976, 1988, 1}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1976, 1988, -1}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1976, 1988, ((1972)+1)}
351: /* MUTANT (rep_const) */    {1984, 1996, 1980, 1992, 1976, 1988, ((1972)-1)}
363: /* MUTANT (del_stmt) */ /*     jsint day; */ 
364: /* MUTANT (del_stmt) */ /*     JSBool isLeapYear; */ 
366: /* MUTANT (del_stmt) */ /*     day = (jsint) DayFromYear(year) + 4; */ 
366: /* MUTANT (rep_op) */    day = (jsint) DayFromYear(year) - 4;
366: /* MUTANT (rep_op) */    day = (jsint) DayFromYear(year) * 4;
366: /* MUTANT (rep_op) */    day = (jsint) DayFromYear(year) % 4;
366: /* MUTANT (rep_const) */    day = (jsint) DayFromYear(year) + 0;
366: /* MUTANT (rep_const) */    day = (jsint) DayFromYear(year) + 1;
366: /* MUTANT (rep_const) */    day = (jsint) DayFromYear(year) + -1;
366: /* MUTANT (rep_const) */    day = (jsint) DayFromYear(year) + ((4)+1);
366: /* MUTANT (rep_const) */    day = (jsint) DayFromYear(year) + ((4)-1);
367: /* MUTANT (del_stmt) */ /*     day = day % 7; */ 
367: /* MUTANT (rep_op) */    day = day + 7;
367: /* MUTANT (rep_op) */    day = day - 7;
367: /* MUTANT (rep_op) */    day = day * 7;
367: /* MUTANT (rep_const) */    day = day % 0;
367: /* MUTANT (rep_const) */    day = day % 1;
367: /* MUTANT (rep_const) */    day = day % -1;
367: /* MUTANT (rep_const) */    day = day % ((7)+1);
367: /* MUTANT (rep_const) */    day = day % ((7)-1);
368: /* MUTANT (rep_op) */    if (day <= 0)
368: /* MUTANT (rep_op) */    if (day > 0)
368: /* MUTANT (rep_op) */    if (day >= 0)
368: /* MUTANT (rep_op) */    if (day == 0)
368: /* MUTANT (rep_op) */    if (day != 0)
368: /* MUTANT (rep_const) */    if (day < 1)
368: /* MUTANT (rep_const) */    if (day < -1)
368: /* MUTANT (negate) */    if(! (day < 0))
369: /* MUTANT (rep_op) */	day -= 7;
369: /* MUTANT (rep_op) */	day *= 7;
369: /* MUTANT (rep_op) */	day %= 7;
369: /* MUTANT (rep_const) */	day += 0;
369: /* MUTANT (rep_const) */	day += 1;
369: /* MUTANT (rep_const) */	day += -1;
369: /* MUTANT (rep_const) */	day += ((7)+1);
369: /* MUTANT (rep_const) */	day += ((7)-1);
371: /* MUTANT (del_stmt) */ /*     isLeapYear = (DaysInYear(year) == 366); */ 
371: /* MUTANT (rep_op) */    isLeapYear = (DaysInYear(year) != 366);
371: /* MUTANT (rep_const) */    isLeapYear = (DaysInYear(year) == 0);
371: /* MUTANT (rep_const) */    isLeapYear = (DaysInYear(year) == 1);
371: /* MUTANT (rep_const) */    isLeapYear = (DaysInYear(year) == -1);
371: /* MUTANT (rep_const) */    isLeapYear = (DaysInYear(year) == ((366)+1));
371: /* MUTANT (rep_const) */    isLeapYear = (DaysInYear(year) == ((366)-1));
373: /* MUTANT (del_stmt) */ /*     return yearStartingWith[isLeapYear][day]; */ 
382: /* MUTANT (del_stmt) */ /*     volatile int64 PR_t; */ 
383: /* MUTANT (del_stmt) */ /*     int64 ms2us; */ 
384: /* MUTANT (del_stmt) */ /*     int64 offset; */ 
385: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
388: /* MUTANT (negate) */    if(! (JSDOUBLE_IS_NaN(t)))
395: /* MUTANT (rep_op) */    if (t <= 0.0 || t > 2145916800000.0) {
395: /* MUTANT (rep_op) */    if (t > 0.0 || t > 2145916800000.0) {
395: /* MUTANT (rep_op) */    if (t >= 0.0 || t > 2145916800000.0) {
395: /* MUTANT (rep_op) */    if (t == 0.0 || t > 2145916800000.0) {
395: /* MUTANT (rep_op) */    if (t != 0.0 || t > 2145916800000.0) {
395: /* MUTANT (rep_op) */    if (t < 0.0 && t > 2145916800000.0) {
395: /* MUTANT (rep_op) */    if (t < 0.0 || t <= 2145916800000.0) {
395: /* MUTANT (rep_op) */    if (t < 0.0 || t < 2145916800000.0) {
395: /* MUTANT (rep_op) */    if (t < 0.0 || t >= 2145916800000.0) {
395: /* MUTANT (rep_op) */    if (t < 0.0 || t == 2145916800000.0) {
395: /* MUTANT (rep_op) */    if (t < 0.0 || t != 2145916800000.0) {
395: /* MUTANT (rep_const) */    if (t < 0.1 || t > 2145916800000.0) {
395: /* MUTANT (rep_const) */    if (t < 0.-1 || t > 2145916800000.0) {
395: /* MUTANT (rep_const) */    if (t < 0.0 || t > 2145916800000.1) {
395: /* MUTANT (rep_const) */    if (t < 0.0 || t > 2145916800000.-1) {
395: /* MUTANT (negate) */    if(! (t < 0.0 || t > 2145916800000.0)) {
396: /* MUTANT (del_stmt) */ /*         jsint year; */ 
397: /* MUTANT (del_stmt) */ /*         jsdouble day; */ 
399: /* MUTANT (del_stmt) */ /*         year = EquivalentYearForDST(YearFromTime(t)); */ 
400: /* MUTANT (del_stmt) */ /*         day = MakeDay(year, MonthFromTime(t), DateFromTime(t)); */ 
401: /* MUTANT (del_stmt) */ /*         t = MakeDate(day, TimeWithinDay(t)); */ 
406: /* MUTANT (del_stmt) */ /*     JSLL_I2L(ms2us, PRMJ_USEC_PER_MSEC); */ 
407: /* MUTANT (del_stmt) */ /*     JSLL_MUL(PR_t, PR_t, ms2us); */ 
409: /* MUTANT (del_stmt) */ /*     offset = PRMJ_DSTOffset(PR_t); */ 
411: /* MUTANT (del_stmt) */ /*     JSLL_DIV(offset, offset, ms2us); */ 
412: /* MUTANT (del_stmt) */ /*     JSLL_L2D(result, offset); */ 
413: /* MUTANT (del_stmt) */ /*     return result; */ 
424: /* MUTANT (del_stmt) */ /*     return t - AdjustTime(t - LocalTZA); */ 
430: /* MUTANT (del_stmt) */ /*     intN result = (intN) fmod(floor(t/msPerHour), HoursPerDay); */ 
431: /* MUTANT (rep_op) */    if (result <= 0)
431: /* MUTANT (rep_op) */    if (result > 0)
431: /* MUTANT (rep_op) */    if (result >= 0)
431: /* MUTANT (rep_op) */    if (result == 0)
431: /* MUTANT (rep_op) */    if (result != 0)
431: /* MUTANT (rep_const) */    if (result < 1)
431: /* MUTANT (rep_const) */    if (result < -1)
431: /* MUTANT (negate) */    if(! (result < 0))
432: /* MUTANT (rep_op) */        result -= (intN)HoursPerDay;
432: /* MUTANT (rep_op) */        result *= (intN)HoursPerDay;
432: /* MUTANT (rep_op) */        result %= (intN)HoursPerDay;
433: /* MUTANT (del_stmt) */ /*     return result; */ 
439: /* MUTANT (del_stmt) */ /*     intN result = (intN) fmod(floor(t / msPerMinute), MinutesPerHour); */ 
440: /* MUTANT (rep_op) */    if (result <= 0)
440: /* MUTANT (rep_op) */    if (result > 0)
440: /* MUTANT (rep_op) */    if (result >= 0)
440: /* MUTANT (rep_op) */    if (result == 0)
440: /* MUTANT (rep_op) */    if (result != 0)
440: /* MUTANT (rep_const) */    if (result < 1)
440: /* MUTANT (rep_const) */    if (result < -1)
440: /* MUTANT (negate) */    if(! (result < 0))
441: /* MUTANT (rep_op) */        result -= (intN)MinutesPerHour;
441: /* MUTANT (rep_op) */        result *= (intN)MinutesPerHour;
441: /* MUTANT (rep_op) */        result %= (intN)MinutesPerHour;
442: /* MUTANT (del_stmt) */ /*     return result; */ 
448: /* MUTANT (del_stmt) */ /*     intN result = (intN) fmod(floor(t / msPerSecond), SecondsPerMinute); */ 
449: /* MUTANT (rep_op) */    if (result <= 0)
449: /* MUTANT (rep_op) */    if (result > 0)
449: /* MUTANT (rep_op) */    if (result >= 0)
449: /* MUTANT (rep_op) */    if (result == 0)
449: /* MUTANT (rep_op) */    if (result != 0)
449: /* MUTANT (rep_const) */    if (result < 1)
449: /* MUTANT (rep_const) */    if (result < -1)
449: /* MUTANT (negate) */    if(! (result < 0))
450: /* MUTANT (rep_op) */        result -= (intN)SecondsPerMinute;
450: /* MUTANT (rep_op) */        result *= (intN)SecondsPerMinute;
450: /* MUTANT (rep_op) */        result %= (intN)SecondsPerMinute;
451: /* MUTANT (del_stmt) */ /*     return result; */ 
457: /* MUTANT (del_stmt) */ /*     intN result = (intN) fmod(t, msPerSecond); */ 
458: /* MUTANT (rep_op) */    if (result <= 0)
458: /* MUTANT (rep_op) */    if (result > 0)
458: /* MUTANT (rep_op) */    if (result >= 0)
458: /* MUTANT (rep_op) */    if (result == 0)
458: /* MUTANT (rep_op) */    if (result != 0)
458: /* MUTANT (rep_const) */    if (result < 1)
458: /* MUTANT (rep_const) */    if (result < -1)
458: /* MUTANT (negate) */    if(! (result < 0))
459: /* MUTANT (rep_op) */        result -= (intN)msPerSecond;
459: /* MUTANT (rep_op) */        result *= (intN)msPerSecond;
459: /* MUTANT (rep_op) */        result %= (intN)msPerSecond;
460: /* MUTANT (del_stmt) */ /*     return result; */ 
464: /* MUTANT (rep_op) */                      || !((d < 0 ? -d : d) > HalfTimeDomain)) \
464: /* MUTANT (rep_op) */                      && !((d <= 0 ? -d : d) > HalfTimeDomain)) \
464: /* MUTANT (rep_op) */                      && !((d > 0 ? -d : d) > HalfTimeDomain)) \
464: /* MUTANT (rep_op) */                      && !((d >= 0 ? -d : d) > HalfTimeDomain)) \
464: /* MUTANT (rep_op) */                      && !((d == 0 ? -d : d) > HalfTimeDomain)) \
464: /* MUTANT (rep_op) */                      && !((d != 0 ? -d : d) > HalfTimeDomain)) \
464: /* MUTANT (rep_op) */                      && !((d < 0 ? -d : d) <= HalfTimeDomain)) \
464: /* MUTANT (rep_op) */                      && !((d < 0 ? -d : d) < HalfTimeDomain)) \
464: /* MUTANT (rep_op) */                      && !((d < 0 ? -d : d) >= HalfTimeDomain)) \
464: /* MUTANT (rep_op) */                      && !((d < 0 ? -d : d) == HalfTimeDomain)) \
464: /* MUTANT (rep_op) */                      && !((d < 0 ? -d : d) != HalfTimeDomain)) \
464: /* MUTANT (rep_const) */                      && !((d < 1 ? -d : d) > HalfTimeDomain)) \
464: /* MUTANT (rep_const) */                      && !((d < -1 ? -d : d) > HalfTimeDomain)) \
465: /* MUTANT (rep_op) */                     ? js_DoubleToInteger(d - (+0.)) : *cx->runtime->jsNaN)
465: /* MUTANT (rep_op) */                     ? js_DoubleToInteger(d * (+0.)) : *cx->runtime->jsNaN)
465: /* MUTANT (rep_op) */                     ? js_DoubleToInteger(d % (+0.)) : *cx->runtime->jsNaN)
465: /* MUTANT (rep_op) */                     ? js_DoubleToInteger(d + (-0.)) : *cx->runtime->jsNaN)
465: /* MUTANT (rep_op) */                     ? js_DoubleToInteger(d + (*0.)) : *cx->runtime->jsNaN)
465: /* MUTANT (rep_op) */                     ? js_DoubleToInteger(d + (%0.)) : *cx->runtime->jsNaN)
500: /* MUTANT (rep_const) */    0, -2, 0, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    1, -2, 0, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    ((-1)+1), -2, 0, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    ((-1)-1), -2, 0, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, 0, 0, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, 1, 0, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -1, 0, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, ((-2)+1), 0, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, ((-2)-1), 0, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 1, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, -1, 0, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 1, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, -1, 0, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 0, 1, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 0, -1, 0, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 0, 0, 1, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 0, 0, -1, 0, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 0, 0, 0, 1, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 0, 0, 0, -1, 0, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 0, 0, 0, 0, 1, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 0, 0, 0, 0, -1, 0,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 0, 0, 0, 0, 0, 1,       /* AM/PM */
500: /* MUTANT (rep_const) */    -1, -2, 0, 0, 0, 0, 0, 0, -1,       /* AM/PM */
501: /* MUTANT (rep_const) */    0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    -1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    ((2)+1), 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    ((2)-1), 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, -1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, ((3)+1), 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, ((3)-1), 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, -1, 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, ((4)+1), 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, ((4)-1), 5, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 0, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 1, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, -1, 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, ((5)+1), 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, ((5)-1), 6, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 0, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 1, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, -1, 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, ((6)+1), 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, ((6)-1), 7, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 0, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 1, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, -1, 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, ((7)+1), 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, ((7)-1), 8, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 0, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 1, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, -1, 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, ((8)+1), 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, ((8)-1), 9, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 0, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, -1, 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, ((9)+1), 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, ((9)-1), 10, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, -1, 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, ((10)+1), 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, ((10)-1), 11, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, -1, 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, ((11)+1), 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, ((11)-1), 12, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, -1, 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ((12)+1), 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ((12)-1), 13,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, -1,
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, ((13)+1),
501: /* MUTANT (rep_const) */    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, ((13)-1),
502: /* MUTANT (rep_op) */    10000 - 0, 10000 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_op) */    10000 * 0, 10000 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_op) */    10000 % 0, 10000 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_op) */    10000 + 0, 10000 - 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_op) */    10000 + 0, 10000 * 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_op) */    10000 + 0, 10000 % 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_op) */    10000 + 0, 10000 + 0, 10000 - 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_op) */    10000 + 0, 10000 + 0, 10000 * 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_op) */    10000 + 0, 10000 + 0, 10000 % 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    0 + 0, 10000 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    1 + 0, 10000 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    -1 + 0, 10000 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    ((10000)+1) + 0, 10000 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    ((10000)-1) + 0, 10000 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 1, 10000 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + -1, 10000 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 0 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 1 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, -1 + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, ((10000)+1) + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, ((10000)-1) + 0, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 10000 + 1, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 10000 + -1, 10000 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 10000 + 0, 0 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 10000 + 0, 1 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 10000 + 0, -1 + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 10000 + 0, ((10000)+1) + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 10000 + 0, ((10000)-1) + 0,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 10000 + 0, 10000 + 1,   /* GMT/UT/UTC */
502: /* MUTANT (rep_const) */    10000 + 0, 10000 + 0, 10000 + -1,   /* GMT/UT/UTC */
503: /* MUTANT (rep_op) */    10000 - 5 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_op) */    10000 * 5 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_op) */    10000 % 5 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_op) */    10000 + 5 * 60, 10000 - 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_op) */    10000 + 5 * 60, 10000 * 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_op) */    10000 + 5 * 60, 10000 % 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    0 + 5 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    1 + 5 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    -1 + 5 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    ((10000)+1) + 5 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    ((10000)-1) + 5 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 0 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 1 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + -1 * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + ((5)+1) * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + ((5)-1) * 60, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 0, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 1, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * -1, 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * ((60)+1), 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * ((60)-1), 10000 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 0 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 1 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, -1 + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, ((10000)+1) + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, ((10000)-1) + 4 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 10000 + 0 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 10000 + 1 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 10000 + -1 * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 10000 + ((4)+1) * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 10000 + ((4)-1) * 60,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 10000 + 4 * 0,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 10000 + 4 * 1,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 10000 + 4 * -1,    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 10000 + 4 * ((60)+1),    /* EST/EDT */
503: /* MUTANT (rep_const) */    10000 + 5 * 60, 10000 + 4 * ((60)-1),    /* EST/EDT */
504: /* MUTANT (rep_op) */    10000 - 6 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_op) */    10000 * 6 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_op) */    10000 % 6 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_op) */    10000 + 6 * 60, 10000 - 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_op) */    10000 + 6 * 60, 10000 * 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_op) */    10000 + 6 * 60, 10000 % 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    0 + 6 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    1 + 6 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    -1 + 6 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    ((10000)+1) + 6 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    ((10000)-1) + 6 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 0 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 1 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + -1 * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + ((6)+1) * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + ((6)-1) * 60, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 0, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 1, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * -1, 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * ((60)+1), 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * ((60)-1), 10000 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 0 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 1 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, -1 + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, ((10000)+1) + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, ((10000)-1) + 5 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 10000 + 0 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 10000 + 1 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 10000 + -1 * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 10000 + ((5)+1) * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 10000 + ((5)-1) * 60,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 10000 + 5 * 0,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 10000 + 5 * 1,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 10000 + 5 * -1,    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 10000 + 5 * ((60)+1),    /* CST/CDT */
504: /* MUTANT (rep_const) */    10000 + 6 * 60, 10000 + 5 * ((60)-1),    /* CST/CDT */
505: /* MUTANT (rep_op) */    10000 - 7 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_op) */    10000 * 7 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_op) */    10000 % 7 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_op) */    10000 + 7 * 60, 10000 - 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_op) */    10000 + 7 * 60, 10000 * 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_op) */    10000 + 7 * 60, 10000 % 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    0 + 7 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    1 + 7 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    -1 + 7 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    ((10000)+1) + 7 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    ((10000)-1) + 7 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 0 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 1 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + -1 * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + ((7)+1) * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + ((7)-1) * 60, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 0, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 1, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * -1, 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * ((60)+1), 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * ((60)-1), 10000 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 0 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 1 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, -1 + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, ((10000)+1) + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, ((10000)-1) + 6 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 10000 + 0 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 10000 + 1 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 10000 + -1 * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 10000 + ((6)+1) * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 10000 + ((6)-1) * 60,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 10000 + 6 * 0,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 10000 + 6 * 1,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 10000 + 6 * -1,    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 10000 + 6 * ((60)+1),    /* MST/MDT */
505: /* MUTANT (rep_const) */    10000 + 7 * 60, 10000 + 6 * ((60)-1),    /* MST/MDT */
506: /* MUTANT (rep_op) */    10000 - 8 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_op) */    10000 * 8 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_op) */    10000 % 8 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_op) */    10000 + 8 * 60, 10000 - 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_op) */    10000 + 8 * 60, 10000 * 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_op) */    10000 + 8 * 60, 10000 % 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    0 + 8 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    1 + 8 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    -1 + 8 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    ((10000)+1) + 8 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    ((10000)-1) + 8 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 0 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 1 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + -1 * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + ((8)+1) * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + ((8)-1) * 60, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 0, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 1, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * -1, 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * ((60)+1), 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * ((60)-1), 10000 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 0 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 1 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, -1 + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, ((10000)+1) + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, ((10000)-1) + 7 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 10000 + 0 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 10000 + 1 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 10000 + -1 * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 10000 + ((7)+1) * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 10000 + ((7)-1) * 60     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 10000 + 7 * 0     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 10000 + 7 * 1     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 10000 + 7 * -1     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 10000 + 7 * ((60)+1)     /* PST/PDT */
506: /* MUTANT (rep_const) */    10000 + 8 * 60, 10000 + 7 * ((60)-1)     /* PST/PDT */
514: /* MUTANT (del_stmt) */ /*     JSBool result = JS_FALSE; */ 
517: /* MUTANT (rep_op) */    while (count <= 0 && s1[s1off] && s2[s2off]) {
517: /* MUTANT (rep_op) */    while (count < 0 && s1[s1off] && s2[s2off]) {
517: /* MUTANT (rep_op) */    while (count >= 0 && s1[s1off] && s2[s2off]) {
517: /* MUTANT (rep_op) */    while (count == 0 && s1[s1off] && s2[s2off]) {
517: /* MUTANT (rep_op) */    while (count != 0 && s1[s1off] && s2[s2off]) {
517: /* MUTANT (rep_op) */    while (count > 0 || s1[s1off] && s2[s2off]) {
517: /* MUTANT (rep_op) */    while (count > 0 && s1[s1off] || s2[s2off]) {
517: /* MUTANT (rep_const) */    while (count > 1 && s1[s1off] && s2[s2off]) {
517: /* MUTANT (rep_const) */    while (count > -1 && s1[s1off] && s2[s2off]) {
517: /* MUTANT (negate) */    while(! (count > 0 && s1[s1off] && s2[s2off])) {
518: /* MUTANT (negate) */        if(! (ignoreCase)) {
519: /* MUTANT (rep_op) */            if (JS_TOLOWER((jschar)s1[s1off]) == JS_TOLOWER(s2[s2off])) {
519: /* MUTANT (negate) */            if(! (JS_TOLOWER((jschar)s1[s1off]) != JS_TOLOWER(s2[s2off]))) {
520: /* MUTANT (del_stmt) */ /*                 break; */ 
523: /* MUTANT (rep_op) */            if ((jschar)s1[s1off] == s2[s2off]) {
523: /* MUTANT (negate) */            if(! ((jschar)s1[s1off] != s2[s2off])) {
524: /* MUTANT (del_stmt) */ /*                 break; */ 
527: /* MUTANT (rep_op) */        s1off--;
528: /* MUTANT (del_stmt) */ /*         s2off++; */ 
528: /* MUTANT (rep_op) */        s2off--;
529: /* MUTANT (del_stmt) */ /*         count--; */ 
529: /* MUTANT (rep_op) */        count++;
532: /* MUTANT (rep_op) */    if (count != 0) {
532: /* MUTANT (rep_const) */    if (count == 1) {
532: /* MUTANT (rep_const) */    if (count == -1) {
532: /* MUTANT (negate) */    if(! (count == 0)) {
533: /* MUTANT (del_stmt) */ /*         result = JS_TRUE; */ 
544: /* MUTANT (del_stmt) */ /*     jsdouble day; */ 
545: /* MUTANT (del_stmt) */ /*     jsdouble msec_time; */ 
546: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
548: /* MUTANT (del_stmt) */ /*     day = MakeDay(year, mon, mday); */ 
549: /* MUTANT (del_stmt) */ /*     msec_time = MakeTime(hour, min, sec, msec); */ 
550: /* MUTANT (del_stmt) */ /*     result = MakeDate(day, msec_time); */ 
551: /* MUTANT (del_stmt) */ /*     return result; */ 
559: #define MAXARGS        0 /* MUTANT (rep_const) */
559: #define MAXARGS        1 /* MUTANT (rep_const) */
559: #define MAXARGS        -1 /* MUTANT (rep_const) */
559: #define MAXARGS        ((7)+1) /* MUTANT (rep_const) */
559: #define MAXARGS        ((7)-1) /* MUTANT (rep_const) */
563: /* MUTANT (del_stmt) */ /*     jsdouble array[MAXARGS]; */ 
564: /* MUTANT (del_stmt) */ /*     uintN loop; */ 
565: /* MUTANT (del_stmt) */ /*     jsdouble d; */ 
567: /* MUTANT (rep_op) */    for (loop = 0; loop <= MAXARGS; loop++) {
567: /* MUTANT (rep_op) */    for (loop = 0; loop > MAXARGS; loop++) {
567: /* MUTANT (rep_op) */    for (loop = 0; loop >= MAXARGS; loop++) {
567: /* MUTANT (rep_op) */    for (loop = 0; loop == MAXARGS; loop++) {
567: /* MUTANT (rep_op) */    for (loop = 0; loop != MAXARGS; loop++) {
567: /* MUTANT (rep_op) */    for (loop = 0; loop < MAXARGS; loop--) {
567: /* MUTANT (rep_const) */    for (loop = 1; loop < MAXARGS; loop++) {
567: /* MUTANT (rep_const) */    for (loop = -1; loop < MAXARGS; loop++) {
568: /* MUTANT (rep_op) */        if (loop <= argc) {
568: /* MUTANT (rep_op) */        if (loop > argc) {
568: /* MUTANT (rep_op) */        if (loop >= argc) {
568: /* MUTANT (rep_op) */        if (loop == argc) {
568: /* MUTANT (rep_op) */        if (loop != argc) {
568: /* MUTANT (negate) */        if(! (loop < argc)) {
569: /* MUTANT (negate) */            if(! (!js_ValueToNumber(cx, argv[loop], &d)))
572: /* MUTANT (negate) */            if(! (!JSDOUBLE_IS_FINITE(d))) {
573: /* MUTANT (del_stmt) */ /*                 return js_NewNumberValue(cx, d, rval); */ 
577: /* MUTANT (del_stmt) */ /*             array[loop] = 0; */ 
577: /* MUTANT (rep_const) */            array[loop] = 1;
577: /* MUTANT (rep_const) */            array[loop] = -1;
582: /* MUTANT (rep_op) */    if (array[0] <= 0 && array[0] <= 99)
582: /* MUTANT (rep_op) */    if (array[0] < 0 && array[0] <= 99)
582: /* MUTANT (rep_op) */    if (array[0] > 0 && array[0] <= 99)
582: /* MUTANT (rep_op) */    if (array[0] == 0 && array[0] <= 99)
582: /* MUTANT (rep_op) */    if (array[0] != 0 && array[0] <= 99)
582: /* MUTANT (rep_op) */    if (array[0] >= 0 || array[0] <= 99)
582: /* MUTANT (rep_op) */    if (array[0] >= 0 && array[0] < 99)
582: /* MUTANT (rep_op) */    if (array[0] >= 0 && array[0] > 99)
582: /* MUTANT (rep_op) */    if (array[0] >= 0 && array[0] >= 99)
582: /* MUTANT (rep_op) */    if (array[0] >= 0 && array[0] == 99)
582: /* MUTANT (rep_op) */    if (array[0] >= 0 && array[0] != 99)
582: /* MUTANT (rep_const) */    if (array[1] >= 0 && array[0] <= 99)
582: /* MUTANT (rep_const) */    if (array[-1] >= 0 && array[0] <= 99)
582: /* MUTANT (rep_const) */    if (array[0] >= 1 && array[0] <= 99)
582: /* MUTANT (rep_const) */    if (array[0] >= -1 && array[0] <= 99)
582: /* MUTANT (rep_const) */    if (array[0] >= 0 && array[1] <= 99)
582: /* MUTANT (rep_const) */    if (array[0] >= 0 && array[-1] <= 99)
582: /* MUTANT (rep_const) */    if (array[0] >= 0 && array[0] <= 0)
582: /* MUTANT (rep_const) */    if (array[0] >= 0 && array[0] <= 1)
582: /* MUTANT (rep_const) */    if (array[0] >= 0 && array[0] <= -1)
582: /* MUTANT (rep_const) */    if (array[0] >= 0 && array[0] <= ((99)+1))
582: /* MUTANT (rep_const) */    if (array[0] >= 0 && array[0] <= ((99)-1))
582: /* MUTANT (negate) */    if(! (array[0] >= 0 && array[0] <= 99))
583: /* MUTANT (rep_op) */        array[0] -= 1900;
583: /* MUTANT (rep_op) */        array[0] *= 1900;
583: /* MUTANT (rep_op) */        array[0] %= 1900;
583: /* MUTANT (rep_const) */        array[1] += 1900;
583: /* MUTANT (rep_const) */        array[-1] += 1900;
583: /* MUTANT (rep_const) */        array[0] += 0;
583: /* MUTANT (rep_const) */        array[0] += 1;
583: /* MUTANT (rep_const) */        array[0] += -1;
583: /* MUTANT (rep_const) */        array[0] += ((1900)+1);
583: /* MUTANT (rep_const) */        array[0] += ((1900)-1);
587: /* MUTANT (rep_op) */    if (array[2] <= 1)
587: /* MUTANT (rep_op) */    if (array[2] > 1)
587: /* MUTANT (rep_op) */    if (array[2] >= 1)
587: /* MUTANT (rep_op) */    if (array[2] == 1)
587: /* MUTANT (rep_op) */    if (array[2] != 1)
587: /* MUTANT (rep_const) */    if (array[0] < 1)
587: /* MUTANT (rep_const) */    if (array[1] < 1)
587: /* MUTANT (rep_const) */    if (array[-1] < 1)
587: /* MUTANT (rep_const) */    if (array[((2)+1)] < 1)
587: /* MUTANT (rep_const) */    if (array[((2)-1)] < 1)
587: /* MUTANT (rep_const) */    if (array[2] < 0)
587: /* MUTANT (rep_const) */    if (array[2] < -1)
587: /* MUTANT (rep_const) */    if (array[2] < ((1)+1))
587: /* MUTANT (negate) */    if(! (array[2] < 1))
588: /* MUTANT (rep_const) */        array[0] = 1;
588: /* MUTANT (rep_const) */        array[1] = 1;
588: /* MUTANT (rep_const) */        array[-1] = 1;
588: /* MUTANT (rep_const) */        array[((2)+1)] = 1;
588: /* MUTANT (rep_const) */        array[((2)-1)] = 1;
588: /* MUTANT (rep_const) */        array[2] = 0;
588: /* MUTANT (rep_const) */        array[2] = -1;
588: /* MUTANT (rep_const) */        array[2] = ((1)+1);
590: /* MUTANT (rep_const) */    d = date_msecFromDate(array[1], array[1], array[2],
590: /* MUTANT (rep_const) */    d = date_msecFromDate(array[-1], array[1], array[2],
590: /* MUTANT (rep_const) */    d = date_msecFromDate(array[0], array[0], array[2],
590: /* MUTANT (rep_const) */    d = date_msecFromDate(array[0], array[-1], array[2],
590: /* MUTANT (rep_const) */    d = date_msecFromDate(array[0], array[((1)+1)], array[2],
590: /* MUTANT (rep_const) */    d = date_msecFromDate(array[0], array[1], array[0],
590: /* MUTANT (rep_const) */    d = date_msecFromDate(array[0], array[1], array[1],
590: /* MUTANT (rep_const) */    d = date_msecFromDate(array[0], array[1], array[-1],
590: /* MUTANT (rep_const) */    d = date_msecFromDate(array[0], array[1], array[((2)+1)],
590: /* MUTANT (rep_const) */    d = date_msecFromDate(array[0], array[1], array[((2)-1)],
591: /* MUTANT (rep_const) */                              array[0], array[4], array[5], array[6]);
591: /* MUTANT (rep_const) */                              array[1], array[4], array[5], array[6]);
591: /* MUTANT (rep_const) */                              array[-1], array[4], array[5], array[6]);
591: /* MUTANT (rep_const) */                              array[((3)+1)], array[4], array[5], array[6]);
591: /* MUTANT (rep_const) */                              array[((3)-1)], array[4], array[5], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[0], array[5], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[1], array[5], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[-1], array[5], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[((4)+1)], array[5], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[((4)-1)], array[5], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[4], array[0], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[4], array[1], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[4], array[-1], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[4], array[((5)+1)], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[4], array[((5)-1)], array[6]);
591: /* MUTANT (rep_const) */                              array[3], array[4], array[5], array[0]);
591: /* MUTANT (rep_const) */                              array[3], array[4], array[5], array[1]);
591: /* MUTANT (rep_const) */                              array[3], array[4], array[5], array[-1]);
591: /* MUTANT (rep_const) */                              array[3], array[4], array[5], array[((6)+1)]);
591: /* MUTANT (rep_const) */                              array[3], array[4], array[5], array[((6)-1)]);
592: /* MUTANT (del_stmt) */ /*     d = TIMECLIP(d); */ 
594: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, d, rval); */ 
600: /* MUTANT (del_stmt) */ /*     jsdouble msec; */ 
602: /* MUTANT (del_stmt) */ /*     const jschar *s = JSSTRING_CHARS(str); */ 
603: /* MUTANT (del_stmt) */ /*     size_t limit = JSSTRING_LENGTH(str); */ 
604: /* MUTANT (del_stmt) */ /*     size_t i = 0; */ 
604: /* MUTANT (rep_const) */    size_t i = 1;
604: /* MUTANT (rep_const) */    size_t i = -1;
605: /* MUTANT (del_stmt) */ /*     int year = -1; */ 
605: /* MUTANT (rep_const) */    int year = 0;
605: /* MUTANT (rep_const) */    int year = 1;
605: /* MUTANT (rep_const) */    int year = ((-1)+1);
605: /* MUTANT (rep_const) */    int year = ((-1)-1);
606: /* MUTANT (del_stmt) */ /*     int mon = -1; */ 
606: /* MUTANT (rep_const) */    int mon = 0;
606: /* MUTANT (rep_const) */    int mon = 1;
606: /* MUTANT (rep_const) */    int mon = ((-1)+1);
606: /* MUTANT (rep_const) */    int mon = ((-1)-1);
607: /* MUTANT (del_stmt) */ /*     int mday = -1; */ 
607: /* MUTANT (rep_const) */    int mday = 0;
607: /* MUTANT (rep_const) */    int mday = 1;
607: /* MUTANT (rep_const) */    int mday = ((-1)+1);
607: /* MUTANT (rep_const) */    int mday = ((-1)-1);
608: /* MUTANT (del_stmt) */ /*     int hour = -1; */ 
608: /* MUTANT (rep_const) */    int hour = 0;
608: /* MUTANT (rep_const) */    int hour = 1;
608: /* MUTANT (rep_const) */    int hour = ((-1)+1);
608: /* MUTANT (rep_const) */    int hour = ((-1)-1);
609: /* MUTANT (del_stmt) */ /*     int min = -1; */ 
609: /* MUTANT (rep_const) */    int min = 0;
609: /* MUTANT (rep_const) */    int min = 1;
609: /* MUTANT (rep_const) */    int min = ((-1)+1);
609: /* MUTANT (rep_const) */    int min = ((-1)-1);
610: /* MUTANT (del_stmt) */ /*     int sec = -1; */ 
610: /* MUTANT (rep_const) */    int sec = 0;
610: /* MUTANT (rep_const) */    int sec = 1;
610: /* MUTANT (rep_const) */    int sec = ((-1)+1);
610: /* MUTANT (rep_const) */    int sec = ((-1)-1);
611: /* MUTANT (del_stmt) */ /*     int c = -1; */ 
611: /* MUTANT (rep_const) */    int c = 0;
611: /* MUTANT (rep_const) */    int c = 1;
611: /* MUTANT (rep_const) */    int c = ((-1)+1);
611: /* MUTANT (rep_const) */    int c = ((-1)-1);
612: /* MUTANT (del_stmt) */ /*     int n = -1; */ 
612: /* MUTANT (rep_const) */    int n = 0;
612: /* MUTANT (rep_const) */    int n = 1;
612: /* MUTANT (rep_const) */    int n = ((-1)+1);
612: /* MUTANT (rep_const) */    int n = ((-1)-1);
613: /* MUTANT (del_stmt) */ /*     jsdouble tzoffset = -1; */   /* was an int, overflowed on win16!!! */
613: /* MUTANT (rep_const) */    jsdouble tzoffset = 0;  /* was an int, overflowed on win16!!! */
613: /* MUTANT (rep_const) */    jsdouble tzoffset = 1;  /* was an int, overflowed on win16!!! */
613: /* MUTANT (rep_const) */    jsdouble tzoffset = ((-1)+1);  /* was an int, overflowed on win16!!! */
613: /* MUTANT (rep_const) */    jsdouble tzoffset = ((-1)-1);  /* was an int, overflowed on win16!!! */
614: /* MUTANT (del_stmt) */ /*     int prevc = 0; */ 
614: /* MUTANT (rep_const) */    int prevc = 1;
614: /* MUTANT (rep_const) */    int prevc = -1;
615: /* MUTANT (del_stmt) */ /*     JSBool seenplusminus = JS_FALSE; */ 
616: /* MUTANT (del_stmt) */ /*     int temp; */ 
617: /* MUTANT (del_stmt) */ /*     JSBool seenmonthname = JS_FALSE; */ 
619: /* MUTANT (rep_op) */    if (limit != 0)
619: /* MUTANT (rep_const) */    if (limit == 1)
619: /* MUTANT (rep_const) */    if (limit == -1)
619: /* MUTANT (negate) */    if(! (limit == 0))
621: /* MUTANT (rep_op) */    while (i <= limit) {
621: /* MUTANT (rep_op) */    while (i > limit) {
621: /* MUTANT (rep_op) */    while (i >= limit) {
621: /* MUTANT (rep_op) */    while (i == limit) {
621: /* MUTANT (rep_op) */    while (i != limit) {
621: /* MUTANT (negate) */    while(! (i < limit)) {
622: /* MUTANT (del_stmt) */ /*         c = s[i]; */ 
623: /* MUTANT (del_stmt) */ /*         i++; */ 
623: /* MUTANT (rep_op) */        i--;
624: /* MUTANT (rep_op) */        if (c < ' ' || c == ',' || c == '-') {
624: /* MUTANT (rep_op) */        if (c > ' ' || c == ',' || c == '-') {
624: /* MUTANT (rep_op) */        if (c >= ' ' || c == ',' || c == '-') {
624: /* MUTANT (rep_op) */        if (c == ' ' || c == ',' || c == '-') {
624: /* MUTANT (rep_op) */        if (c != ' ' || c == ',' || c == '-') {
624: /* MUTANT (rep_op) */        if (c <= ' ' && c == ',' || c == '-') {
624: /* MUTANT (rep_op) */        if (c <= ' ' || c != ',' || c == '-') {
624: /* MUTANT (rep_op) */        if (c <= ' ' || c == ',' && c == '-') {
624: /* MUTANT (rep_op) */        if (c <= ' ' || c == ',' || c != '-') {
624: /* MUTANT (negate) */        if(! (c <= ' ' || c == ',' || c == '-')) {
625: /* MUTANT (rep_op) */            if (c != '-' && '0' <= s[i] && s[i] <= '9') {
625: /* MUTANT (rep_op) */            if (c == '-' || '0' <= s[i] && s[i] <= '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' < s[i] && s[i] <= '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' > s[i] && s[i] <= '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' >= s[i] && s[i] <= '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' == s[i] && s[i] <= '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' != s[i] && s[i] <= '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' <= s[i] || s[i] <= '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' <= s[i] && s[i] < '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' <= s[i] && s[i] > '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' <= s[i] && s[i] >= '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' <= s[i] && s[i] == '9') {
625: /* MUTANT (rep_op) */            if (c == '-' && '0' <= s[i] && s[i] != '9') {
625: /* MUTANT (rep_const) */            if (c == '-' && '1' <= s[i] && s[i] <= '9') {
625: /* MUTANT (rep_const) */            if (c == '-' && '-1' <= s[i] && s[i] <= '9') {
625: /* MUTANT (rep_const) */            if (c == '-' && '0' <= s[i] && s[i] <= '0') {
625: /* MUTANT (rep_const) */            if (c == '-' && '0' <= s[i] && s[i] <= '1') {
625: /* MUTANT (rep_const) */            if (c == '-' && '0' <= s[i] && s[i] <= '-1') {
625: /* MUTANT (rep_const) */            if (c == '-' && '0' <= s[i] && s[i] <= '((9)+1)') {
625: /* MUTANT (rep_const) */            if (c == '-' && '0' <= s[i] && s[i] <= '((9)-1)') {
625: /* MUTANT (negate) */            if(! (c == '-' && '0' <= s[i] && s[i] <= '9')) {
626: /* MUTANT (del_stmt) */ /*               prevc = c; */ 
630: /* MUTANT (rep_op) */        if (c != '(') { /* comments) */
631: /* MUTANT (del_stmt) */ /*             int depth = 1; */ 
631: /* MUTANT (rep_const) */            int depth = 0;
631: /* MUTANT (rep_const) */            int depth = -1;
631: /* MUTANT (rep_const) */            int depth = ((1)+1);
632: /* MUTANT (rep_op) */            while (i <= limit) {
632: /* MUTANT (rep_op) */            while (i > limit) {
632: /* MUTANT (rep_op) */            while (i >= limit) {
632: /* MUTANT (rep_op) */            while (i == limit) {
632: /* MUTANT (rep_op) */            while (i != limit) {
632: /* MUTANT (negate) */            while(! (i < limit)) {
633: /* MUTANT (del_stmt) */ /*                 c = s[i]; */ 
634: /* MUTANT (del_stmt) */ /*                 i++; */ 
634: /* MUTANT (rep_op) */                i--;
635: /* MUTANT (rep_op) */                if (c != '(') depth++;
635: /* MUTANT (rep_op) */                if (c == '(') depth--;
636: /* MUTANT (rep_op) */                else if (c != ')')
636: /* MUTANT (negate) */                else if(! (c == '))')
637: /* MUTANT (rep_op) */                    if (++depth <= 0)
637: /* MUTANT (rep_op) */                    if (--depth < 0)
637: /* MUTANT (rep_op) */                    if (--depth > 0)
637: /* MUTANT (rep_op) */                    if (--depth >= 0)
637: /* MUTANT (rep_op) */                    if (--depth == 0)
637: /* MUTANT (rep_op) */                    if (--depth != 0)
637: /* MUTANT (rep_const) */                    if (--depth <= 1)
637: /* MUTANT (rep_const) */                    if (--depth <= -1)
637: /* MUTANT (negate) */                    if(! (--depth <= 0))
642: /* MUTANT (rep_op) */        if ('0' < c && c <= '9') {
642: /* MUTANT (rep_op) */        if ('0' > c && c <= '9') {
642: /* MUTANT (rep_op) */        if ('0' >= c && c <= '9') {
642: /* MUTANT (rep_op) */        if ('0' == c && c <= '9') {
642: /* MUTANT (rep_op) */        if ('0' != c && c <= '9') {
642: /* MUTANT (rep_op) */        if ('0' <= c || c <= '9') {
642: /* MUTANT (rep_op) */        if ('0' <= c && c < '9') {
642: /* MUTANT (rep_op) */        if ('0' <= c && c > '9') {
642: /* MUTANT (rep_op) */        if ('0' <= c && c >= '9') {
642: /* MUTANT (rep_op) */        if ('0' <= c && c == '9') {
642: /* MUTANT (rep_op) */        if ('0' <= c && c != '9') {
642: /* MUTANT (rep_const) */        if ('1' <= c && c <= '9') {
642: /* MUTANT (rep_const) */        if ('-1' <= c && c <= '9') {
642: /* MUTANT (rep_const) */        if ('0' <= c && c <= '0') {
642: /* MUTANT (rep_const) */        if ('0' <= c && c <= '1') {
642: /* MUTANT (rep_const) */        if ('0' <= c && c <= '-1') {
642: /* MUTANT (rep_const) */        if ('0' <= c && c <= '((9)+1)') {
642: /* MUTANT (rep_const) */        if ('0' <= c && c <= '((9)-1)') {
642: /* MUTANT (negate) */        if(! ('0' <= c && c <= '9')) {
643: /* MUTANT (del_stmt) */ /*             n = c - '0'; */ 
643: /* MUTANT (rep_const) */            n = c - '1';
643: /* MUTANT (rep_const) */            n = c - '-1';
644: /* MUTANT (rep_op) */            while (i <= limit && '0' <= (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i > limit && '0' <= (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i >= limit && '0' <= (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i == limit && '0' <= (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i != limit && '0' <= (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i < limit || '0' <= (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' < (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' > (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' >= (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' == (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' != (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' <= (c = s[i]) || c <= '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' <= (c = s[i]) && c < '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' <= (c = s[i]) && c > '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' <= (c = s[i]) && c >= '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' <= (c = s[i]) && c == '9') {
644: /* MUTANT (rep_op) */            while (i < limit && '0' <= (c = s[i]) && c != '9') {
644: /* MUTANT (rep_const) */            while (i < limit && '1' <= (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_const) */            while (i < limit && '-1' <= (c = s[i]) && c <= '9') {
644: /* MUTANT (rep_const) */            while (i < limit && '0' <= (c = s[i]) && c <= '0') {
644: /* MUTANT (rep_const) */            while (i < limit && '0' <= (c = s[i]) && c <= '1') {
644: /* MUTANT (rep_const) */            while (i < limit && '0' <= (c = s[i]) && c <= '-1') {
644: /* MUTANT (rep_const) */            while (i < limit && '0' <= (c = s[i]) && c <= '((9)+1)') {
644: /* MUTANT (rep_const) */            while (i < limit && '0' <= (c = s[i]) && c <= '((9)-1)') {
644: /* MUTANT (negate) */            while(! (i < limit && '0' <= (c = s[i]) && c <= '9')) {
645: /* MUTANT (del_stmt) */ /*                 n = n * 10 + c - '0'; */ 
645: /* MUTANT (rep_op) */                n = n * 10 - c - '0';
645: /* MUTANT (rep_op) */                n = n * 10 * c - '0';
645: /* MUTANT (rep_op) */                n = n * 10 % c - '0';
645: /* MUTANT (rep_const) */                n = n * 0 + c - '0';
645: /* MUTANT (rep_const) */                n = n * 1 + c - '0';
645: /* MUTANT (rep_const) */                n = n * -1 + c - '0';
645: /* MUTANT (rep_const) */                n = n * ((10)+1) + c - '0';
645: /* MUTANT (rep_const) */                n = n * ((10)-1) + c - '0';
645: /* MUTANT (rep_const) */                n = n * 10 + c - '1';
645: /* MUTANT (rep_const) */                n = n * 10 + c - '-1';
646: /* MUTANT (del_stmt) */ /*                 i++; */ 
646: /* MUTANT (rep_op) */                i--;
657: /* MUTANT (rep_op) */            if ((prevc != '+' || prevc == '-')/*  && year>=0 */) {
657: /* MUTANT (rep_op) */            if ((prevc == '-' || prevc == '-')/*  && year>=0 */) {
657: /* MUTANT (rep_op) */            if ((prevc == '*' || prevc == '-')/*  && year>=0 */) {
657: /* MUTANT (rep_op) */            if ((prevc == '%' || prevc == '-')/*  && year>=0 */) {
657: /* MUTANT (rep_op) */            if ((prevc == '+' && prevc == '-')/*  && year>=0 */) {
657: /* MUTANT (rep_op) */            if ((prevc == '+' || prevc != '-')/*  && year>=0 */) {
659: /* MUTANT (del_stmt) */ /*                 seenplusminus = JS_TRUE; */ 
662: /* MUTANT (rep_op) */                if (n <= 24)
662: /* MUTANT (rep_op) */                if (n > 24)
662: /* MUTANT (rep_op) */                if (n >= 24)
662: /* MUTANT (rep_op) */                if (n == 24)
662: /* MUTANT (rep_op) */                if (n != 24)
662: /* MUTANT (rep_const) */                if (n < 0)
662: /* MUTANT (rep_const) */                if (n < 1)
662: /* MUTANT (rep_const) */                if (n < -1)
662: /* MUTANT (rep_const) */                if (n < ((24)+1))
662: /* MUTANT (rep_const) */                if (n < ((24)-1))
662: /* MUTANT (negate) */                if(! (n < 24))
663: /* MUTANT (rep_const) */                    n = n * 0; /* EG. "GMT-3" */
663: /* MUTANT (rep_const) */                    n = n * 1; /* EG. "GMT-3" */
663: /* MUTANT (rep_const) */                    n = n * -1; /* EG. "GMT-3" */
663: /* MUTANT (rep_const) */                    n = n * ((60)+1); /* EG. "GMT-3" */
663: /* MUTANT (rep_const) */                    n = n * ((60)-1); /* EG. "GMT-3" */
665: /* MUTANT (rep_op) */                    n = n + 100 + n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_op) */                    n = n - 100 + n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_op) */                    n = n * 100 + n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_op) */                    n = n % 100 - n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_op) */                    n = n % 100 * n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_op) */                    n = n % 100 % n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 0 + n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 1 + n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % -1 + n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % ((100)+1) + n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % ((100)-1) + n / 100 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 100 + n / 0 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 100 + n / 1 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 100 + n / -1 * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 100 + n / ((100)+1) * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 100 + n / ((100)-1) * 60; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 100 + n / 100 * 0; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 100 + n / 100 * 1; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 100 + n / 100 * -1; /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 100 + n / 100 * ((60)+1); /* eg "GMT-0430" */
665: /* MUTANT (rep_const) */                    n = n % 100 + n / 100 * ((60)-1); /* eg "GMT-0430" */
666: /* MUTANT (rep_op) */                if (prevc != '+')       /* plus means east of GMT */
666: /* MUTANT (rep_op) */                if (prevc == '-')       /* plus means east of GMT */
666: /* MUTANT (rep_op) */                if (prevc == '*')       /* plus means east of GMT */
666: /* MUTANT (rep_op) */                if (prevc == '%')       /* plus means east of GMT */
666: /* MUTANT (negate) */                if(! (prevc == '+'))       /* plus means east of GMT */
668: /* MUTANT (rep_op) */                if (tzoffset == 0 && tzoffset != -1)
668: /* MUTANT (rep_op) */                if (tzoffset != 0 || tzoffset != -1)
668: /* MUTANT (rep_op) */                if (tzoffset != 0 && tzoffset == -1)
668: /* MUTANT (rep_const) */                if (tzoffset != 1 && tzoffset != -1)
668: /* MUTANT (rep_const) */                if (tzoffset != -1 && tzoffset != -1)
668: /* MUTANT (rep_const) */                if (tzoffset != 0 && tzoffset != 0)
668: /* MUTANT (rep_const) */                if (tzoffset != 0 && tzoffset != 1)
668: /* MUTANT (rep_const) */                if (tzoffset != 0 && tzoffset != ((-1)+1))
668: /* MUTANT (rep_const) */                if (tzoffset != 0 && tzoffset != ((-1)-1))
668: /* MUTANT (negate) */                if(! (tzoffset != 0 && tzoffset != -1))
670: /* MUTANT (del_stmt) */ /*                 tzoffset = n; */ 
671: /* MUTANT (rep_op) */            } else if (prevc != '/' && mon >= 0 && mday >= 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' || mon >= 0 && mday >= 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon <= 0 && mday >= 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon < 0 && mday >= 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon > 0 && mday >= 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon == 0 && mday >= 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon != 0 && mday >= 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 || mday >= 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday <= 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday < 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday > 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday == 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday != 0 && year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday >= 0 || year < 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday >= 0 && year <= 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday >= 0 && year > 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday >= 0 && year >= 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday >= 0 && year == 0) {
671: /* MUTANT (rep_op) */            } else if (prevc == '/' && mon >= 0 && mday >= 0 && year != 0) {
671: /* MUTANT (rep_const) */            } else if (prevc == '/' && mon >= 1 && mday >= 0 && year < 0) {
671: /* MUTANT (rep_const) */            } else if (prevc == '/' && mon >= -1 && mday >= 0 && year < 0) {
671: /* MUTANT (rep_const) */            } else if (prevc == '/' && mon >= 0 && mday >= 1 && year < 0) {
671: /* MUTANT (rep_const) */            } else if (prevc == '/' && mon >= 0 && mday >= -1 && year < 0) {
671: /* MUTANT (rep_const) */            } else if (prevc == '/' && mon >= 0 && mday >= 0 && year < 1) {
671: /* MUTANT (rep_const) */            } else if (prevc == '/' && mon >= 0 && mday >= 0 && year < -1) {
671: /* MUTANT (negate) */            } else if(! (prevc == '/' && mon >= 0 && mday >= 0 && year < 0)) {
672: /* MUTANT (rep_op) */                if (c < ' ' || c == ',' || c == '/' || i >= limit)
672: /* MUTANT (rep_op) */                if (c > ' ' || c == ',' || c == '/' || i >= limit)
672: /* MUTANT (rep_op) */                if (c >= ' ' || c == ',' || c == '/' || i >= limit)
672: /* MUTANT (rep_op) */                if (c == ' ' || c == ',' || c == '/' || i >= limit)
672: /* MUTANT (rep_op) */                if (c != ' ' || c == ',' || c == '/' || i >= limit)
672: /* MUTANT (rep_op) */                if (c <= ' ' && c == ',' || c == '/' || i >= limit)
672: /* MUTANT (rep_op) */                if (c <= ' ' || c != ',' || c == '/' || i >= limit)
672: /* MUTANT (rep_op) */                if (c <= ' ' || c == ',' && c == '/' || i >= limit)
672: /* MUTANT (rep_op) */                if (c <= ' ' || c == ',' || c != '/' || i >= limit)
672: /* MUTANT (rep_op) */                if (c <= ' ' || c == ',' || c == '/' && i >= limit)
672: /* MUTANT (rep_op) */                if (c <= ' ' || c == ',' || c == '/' || i <= limit)
672: /* MUTANT (rep_op) */                if (c <= ' ' || c == ',' || c == '/' || i < limit)
672: /* MUTANT (rep_op) */                if (c <= ' ' || c == ',' || c == '/' || i > limit)
672: /* MUTANT (rep_op) */                if (c <= ' ' || c == ',' || c == '/' || i == limit)
672: /* MUTANT (rep_op) */                if (c <= ' ' || c == ',' || c == '/' || i != limit)
672: /* MUTANT (negate) */                if(! (c <= ' ' || c == ',' || c == '/' || i >= limit))
676: /* MUTANT (rep_op) */            } else if (c != ':') {
676: /* MUTANT (negate) */            } else if(! (c == ':')) {
677: /* MUTANT (rep_op) */                if (hour <= 0)
677: /* MUTANT (rep_op) */                if (hour > 0)
677: /* MUTANT (rep_op) */                if (hour >= 0)
677: /* MUTANT (rep_op) */                if (hour == 0)
677: /* MUTANT (rep_op) */                if (hour != 0)
677: /* MUTANT (rep_const) */                if (hour < 1)
677: /* MUTANT (rep_const) */                if (hour < -1)
677: /* MUTANT (negate) */                if(! (hour < 0))
679: /* MUTANT (rep_op) */                else if (min <= 0)
679: /* MUTANT (rep_op) */                else if (min > 0)
679: /* MUTANT (rep_op) */                else if (min >= 0)
679: /* MUTANT (rep_op) */                else if (min == 0)
679: /* MUTANT (rep_op) */                else if (min != 0)
679: /* MUTANT (rep_const) */                else if (min < 1)
679: /* MUTANT (rep_const) */                else if (min < -1)
679: /* MUTANT (negate) */                else if(! (min < 0))
683: /* MUTANT (rep_op) */            } else if (c != '/') {
683: /* MUTANT (negate) */            } else if(! (c == '/')) {
686: /* MUTANT (rep_op) */                if (mon <= 0)
686: /* MUTANT (rep_op) */                if (mon > 0)
686: /* MUTANT (rep_op) */                if (mon >= 0)
686: /* MUTANT (rep_op) */                if (mon == 0)
686: /* MUTANT (rep_op) */                if (mon != 0)
686: /* MUTANT (rep_const) */                if (mon < 1)
686: /* MUTANT (rep_const) */                if (mon < -1)
686: /* MUTANT (negate) */                if(! (mon < 0))
688: /* MUTANT (rep_op) */                else if (mday <= 0)
688: /* MUTANT (rep_op) */                else if (mday > 0)
688: /* MUTANT (rep_op) */                else if (mday >= 0)
688: /* MUTANT (rep_op) */                else if (mday == 0)
688: /* MUTANT (rep_op) */                else if (mday != 0)
688: /* MUTANT (rep_const) */                else if (mday < 1)
688: /* MUTANT (rep_const) */                else if (mday < -1)
688: /* MUTANT (negate) */                else if(! (mday < 0))
692: /* MUTANT (rep_op) */            } else if (i <= limit && c != ',' && c > ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i > limit && c != ',' && c > ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i >= limit && c != ',' && c > ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i == limit && c != ',' && c > ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i != limit && c != ',' && c > ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit || c != ',' && c > ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c == ',' && c > ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c != ',' || c > ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c != ',' && c <= ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c != ',' && c < ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c != ',' && c >= ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c != ',' && c == ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c != ',' && c != ' ' && c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c != ',' && c > ' ' || c != '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c != ',' && c > ' ' && c == '-' && c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c != ',' && c > ' ' && c != '-' || c != '(') {
692: /* MUTANT (rep_op) */            } else if (i < limit && c != ',' && c > ' ' && c != '-' && c == '(') {
693: /* MUTANT (del_stmt) */ /*                 goto syntax; */ 
694: /* MUTANT (rep_op) */            } else if (seenplusminus || n < 60) {  /* handle GMT-3:30 */
694: /* MUTANT (rep_op) */            } else if (seenplusminus && n <= 60) {  /* handle GMT-3:30 */
694: /* MUTANT (rep_op) */            } else if (seenplusminus && n > 60) {  /* handle GMT-3:30 */
694: /* MUTANT (rep_op) */            } else if (seenplusminus && n >= 60) {  /* handle GMT-3:30 */
694: /* MUTANT (rep_op) */            } else if (seenplusminus && n == 60) {  /* handle GMT-3:30 */
694: /* MUTANT (rep_op) */            } else if (seenplusminus && n != 60) {  /* handle GMT-3:30 */
694: /* MUTANT (rep_const) */            } else if (seenplusminus && n < 0) {  /* handle GMT-3:30 */
694: /* MUTANT (rep_const) */            } else if (seenplusminus && n < 1) {  /* handle GMT-3:30 */
694: /* MUTANT (rep_const) */            } else if (seenplusminus && n < -1) {  /* handle GMT-3:30 */
694: /* MUTANT (rep_const) */            } else if (seenplusminus && n < ((60)+1)) {  /* handle GMT-3:30 */
694: /* MUTANT (rep_const) */            } else if (seenplusminus && n < ((60)-1)) {  /* handle GMT-3:30 */
694: /* MUTANT (negate) */            } else if(! (seenplusminus && n < 60)) {  /* handle GMT-3:30 */
695: /* MUTANT (rep_op) */                if (tzoffset <= 0)
695: /* MUTANT (rep_op) */                if (tzoffset > 0)
695: /* MUTANT (rep_op) */                if (tzoffset >= 0)
695: /* MUTANT (rep_op) */                if (tzoffset == 0)
695: /* MUTANT (rep_op) */                if (tzoffset != 0)
695: /* MUTANT (rep_const) */                if (tzoffset < 1)
695: /* MUTANT (rep_const) */                if (tzoffset < -1)
695: /* MUTANT (negate) */                if(! (tzoffset < 0))
696: /* MUTANT (rep_op) */                    tzoffset += n;
696: /* MUTANT (rep_op) */                    tzoffset *= n;
696: /* MUTANT (rep_op) */                    tzoffset %= n;
698: /* MUTANT (rep_op) */                    tzoffset -= n;
698: /* MUTANT (rep_op) */                    tzoffset *= n;
698: /* MUTANT (rep_op) */                    tzoffset %= n;
699: /* MUTANT (rep_op) */            } else if (hour <= 0 && min < 0) {
699: /* MUTANT (rep_op) */            } else if (hour < 0 && min < 0) {
699: /* MUTANT (rep_op) */            } else if (hour > 0 && min < 0) {
699: /* MUTANT (rep_op) */            } else if (hour == 0 && min < 0) {
699: /* MUTANT (rep_op) */            } else if (hour != 0 && min < 0) {
699: /* MUTANT (rep_op) */            } else if (hour >= 0 || min < 0) {
699: /* MUTANT (rep_op) */            } else if (hour >= 0 && min <= 0) {
699: /* MUTANT (rep_op) */            } else if (hour >= 0 && min > 0) {
699: /* MUTANT (rep_op) */            } else if (hour >= 0 && min >= 0) {
699: /* MUTANT (rep_op) */            } else if (hour >= 0 && min == 0) {
699: /* MUTANT (rep_op) */            } else if (hour >= 0 && min != 0) {
699: /* MUTANT (rep_const) */            } else if (hour >= 1 && min < 0) {
699: /* MUTANT (rep_const) */            } else if (hour >= -1 && min < 0) {
699: /* MUTANT (rep_const) */            } else if (hour >= 0 && min < 1) {
699: /* MUTANT (rep_const) */            } else if (hour >= 0 && min < -1) {
699: /* MUTANT (negate) */            } else if(! (hour >= 0 && min < 0)) {
701: /* MUTANT (rep_op) */            } else if (prevc != ':' && min >= 0 && sec < 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' || min >= 0 && sec < 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min <= 0 && sec < 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min < 0 && sec < 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min > 0 && sec < 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min == 0 && sec < 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min != 0 && sec < 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min >= 0 || sec < 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min >= 0 && sec <= 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min >= 0 && sec > 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min >= 0 && sec >= 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min >= 0 && sec == 0) {
701: /* MUTANT (rep_op) */            } else if (prevc == ':' && min >= 0 && sec != 0) {
701: /* MUTANT (rep_const) */            } else if (prevc == ':' && min >= 1 && sec < 0) {
701: /* MUTANT (rep_const) */            } else if (prevc == ':' && min >= -1 && sec < 0) {
701: /* MUTANT (rep_const) */            } else if (prevc == ':' && min >= 0 && sec < 1) {
701: /* MUTANT (rep_const) */            } else if (prevc == ':' && min >= 0 && sec < -1) {
701: /* MUTANT (negate) */            } else if(! (prevc == ':' && min >= 0 && sec < 0)) {
703: /* MUTANT (rep_op) */            } else if (mon <= 0) {
703: /* MUTANT (rep_op) */            } else if (mon > 0) {
703: /* MUTANT (rep_op) */            } else if (mon >= 0) {
703: /* MUTANT (rep_op) */            } else if (mon == 0) {
703: /* MUTANT (rep_op) */            } else if (mon != 0) {
703: /* MUTANT (rep_const) */            } else if (mon < 1) {
703: /* MUTANT (rep_const) */            } else if (mon < -1) {
703: /* MUTANT (negate) */            } else if(! (mon < 0)) {
705: /* MUTANT (rep_op) */            } else if (mon <= 0 && mday < 0) {
705: /* MUTANT (rep_op) */            } else if (mon < 0 && mday < 0) {
705: /* MUTANT (rep_op) */            } else if (mon > 0 && mday < 0) {
705: /* MUTANT (rep_op) */            } else if (mon == 0 && mday < 0) {
705: /* MUTANT (rep_op) */            } else if (mon != 0 && mday < 0) {
705: /* MUTANT (rep_op) */            } else if (mon >= 0 || mday < 0) {
705: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday <= 0) {
705: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday > 0) {
705: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday >= 0) {
705: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday == 0) {
705: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday != 0) {
705: /* MUTANT (rep_const) */            } else if (mon >= 1 && mday < 0) {
705: /* MUTANT (rep_const) */            } else if (mon >= -1 && mday < 0) {
705: /* MUTANT (rep_const) */            } else if (mon >= 0 && mday < 1) {
705: /* MUTANT (rep_const) */            } else if (mon >= 0 && mday < -1) {
705: /* MUTANT (negate) */            } else if(! (mon >= 0 && mday < 0)) {
707: /* MUTANT (rep_op) */            } else if (mon <= 0 && mday >= 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon < 0 && mday >= 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon > 0 && mday >= 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon == 0 && mday >= 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon != 0 && mday >= 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 || mday >= 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday <= 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday < 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday > 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday == 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday != 0 && year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday >= 0 || year < 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday >= 0 && year <= 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday >= 0 && year > 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday >= 0 && year >= 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday >= 0 && year == 0) {
707: /* MUTANT (rep_op) */            } else if (mon >= 0 && mday >= 0 && year != 0) {
707: /* MUTANT (rep_const) */            } else if (mon >= 1 && mday >= 0 && year < 0) {
707: /* MUTANT (rep_const) */            } else if (mon >= -1 && mday >= 0 && year < 0) {
707: /* MUTANT (rep_const) */            } else if (mon >= 0 && mday >= 1 && year < 0) {
707: /* MUTANT (rep_const) */            } else if (mon >= 0 && mday >= -1 && year < 0) {
707: /* MUTANT (rep_const) */            } else if (mon >= 0 && mday >= 0 && year < 1) {
707: /* MUTANT (rep_const) */            } else if (mon >= 0 && mday >= 0 && year < -1) {
707: /* MUTANT (negate) */            } else if(! (mon >= 0 && mday >= 0 && year < 0)) {
708: /* MUTANT (del_stmt) */ /*                 year = n; */ 
710: /* MUTANT (del_stmt) */ /*                 goto syntax; */ 
712: /* MUTANT (rep_const) */            prevc = 1;
712: /* MUTANT (rep_const) */            prevc = -1;
713: /* MUTANT (rep_op) */        } else if (c != '/' || c == ':' || c == '+' || c == '-') {
713: /* MUTANT (rep_op) */        } else if (c == '/' && c == ':' || c == '+' || c == '-') {
713: /* MUTANT (rep_op) */        } else if (c == '/' || c != ':' || c == '+' || c == '-') {
713: /* MUTANT (rep_op) */        } else if (c == '/' || c == ':' && c == '+' || c == '-') {
713: /* MUTANT (rep_op) */        } else if (c == '/' || c == ':' || c != '+' || c == '-') {
713: /* MUTANT (rep_op) */        } else if (c == '/' || c == ':' || c == '-' || c == '-') {
713: /* MUTANT (rep_op) */        } else if (c == '/' || c == ':' || c == '*' || c == '-') {
713: /* MUTANT (rep_op) */        } else if (c == '/' || c == ':' || c == '%' || c == '-') {
713: /* MUTANT (rep_op) */        } else if (c == '/' || c == ':' || c == '+' && c == '-') {
713: /* MUTANT (rep_op) */        } else if (c == '/' || c == ':' || c == '+' || c != '-') {
713: /* MUTANT (negate) */        } else if(! (c == '/' || c == ':' || c == '+' || c == '-')) {
714: /* MUTANT (del_stmt) */ /*             prevc = c; */ 
716: /* MUTANT (del_stmt) */ /*             size_t st = i - 1; */ 
716: /* MUTANT (rep_const) */            size_t st = i - 0;
716: /* MUTANT (rep_const) */            size_t st = i - -1;
716: /* MUTANT (rep_const) */            size_t st = i - ((1)+1);
717: /* MUTANT (del_stmt) */ /*             int k; */ 
718: /* MUTANT (rep_op) */            while (i <= limit) {
718: /* MUTANT (rep_op) */            while (i > limit) {
718: /* MUTANT (rep_op) */            while (i >= limit) {
718: /* MUTANT (rep_op) */            while (i == limit) {
718: /* MUTANT (rep_op) */            while (i != limit) {
718: /* MUTANT (negate) */            while(! (i < limit)) {
719: /* MUTANT (del_stmt) */ /*                 c = s[i]; */ 
720: /* MUTANT (rep_op) */                if (!(('A' < c && c <= 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' > c && c <= 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' >= c && c <= 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' == c && c <= 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' != c && c <= 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c || c <= 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c < 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c > 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c >= 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c == 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c != 'Z') || ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') && ('a' <= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' < c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' > c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' >= c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' == c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' != c && c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' <= c || c <= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' <= c && c < 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' <= c && c > 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' <= c && c >= 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' <= c && c == 'z')))
720: /* MUTANT (rep_op) */                if (!(('A' <= c && c <= 'Z') || ('a' <= c && c != 'z')))
720: /* MUTANT (negate) */                if(! (!(('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z'))))
722: /* MUTANT (del_stmt) */ /*                 i++; */ 
722: /* MUTANT (rep_op) */                i--;
724: /* MUTANT (rep_op) */            if (i < st + 1)
724: /* MUTANT (rep_op) */            if (i > st + 1)
724: /* MUTANT (rep_op) */            if (i >= st + 1)
724: /* MUTANT (rep_op) */            if (i == st + 1)
724: /* MUTANT (rep_op) */            if (i != st + 1)
724: /* MUTANT (rep_op) */            if (i <= st - 1)
724: /* MUTANT (rep_op) */            if (i <= st * 1)
724: /* MUTANT (rep_op) */            if (i <= st % 1)
724: /* MUTANT (rep_const) */            if (i <= st + 0)
724: /* MUTANT (rep_const) */            if (i <= st + -1)
724: /* MUTANT (rep_const) */            if (i <= st + ((1)+1))
724: /* MUTANT (negate) */            if(! (i <= st + 1))
726: /* MUTANT (rep_op) */            for (k = (sizeof(wtb)/sizeof(char*)); ++k >= 0;)
726: /* MUTANT (rep_op) */            for (k = (sizeof(wtb)/sizeof(char*)); --k <= 0;)
726: /* MUTANT (rep_op) */            for (k = (sizeof(wtb)/sizeof(char*)); --k < 0;)
726: /* MUTANT (rep_op) */            for (k = (sizeof(wtb)/sizeof(char*)); --k > 0;)
726: /* MUTANT (rep_op) */            for (k = (sizeof(wtb)/sizeof(char*)); --k == 0;)
726: /* MUTANT (rep_op) */            for (k = (sizeof(wtb)/sizeof(char*)); --k != 0;)
726: /* MUTANT (rep_const) */            for (k = (sizeof(wtb)/sizeof(char*)); --k >= 1;)
726: /* MUTANT (rep_const) */            for (k = (sizeof(wtb)/sizeof(char*)); --k >= -1;)
727: /* MUTANT (rep_const) */                if (date_regionMatches(wtb[k], 1, s, st, i-st, 1)) {
727: /* MUTANT (rep_const) */                if (date_regionMatches(wtb[k], -1, s, st, i-st, 1)) {
727: /* MUTANT (rep_const) */                if (date_regionMatches(wtb[k], 0, s, st, i-st, 0)) {
727: /* MUTANT (rep_const) */                if (date_regionMatches(wtb[k], 0, s, st, i-st, -1)) {
727: /* MUTANT (rep_const) */                if (date_regionMatches(wtb[k], 0, s, st, i-st, ((1)+1))) {
727: /* MUTANT (negate) */                if(! (date_regionMatches(wtb[k], 0, s, st, i-st, 1))) {
728: /* MUTANT (del_stmt) */ /*                     int action = ttb[k]; */ 
729: /* MUTANT (rep_op) */                    if (action == 0) {
729: /* MUTANT (rep_const) */                    if (action != 1) {
729: /* MUTANT (rep_const) */                    if (action != -1) {
729: /* MUTANT (negate) */                    if(! (action != 0)) {
730: /* MUTANT (rep_op) */                        if (action <= 0) {
730: /* MUTANT (rep_op) */                        if (action > 0) {
730: /* MUTANT (rep_op) */                        if (action >= 0) {
730: /* MUTANT (rep_op) */                        if (action == 0) {
730: /* MUTANT (rep_op) */                        if (action != 0) {
730: /* MUTANT (rep_const) */                        if (action < 1) {
730: /* MUTANT (rep_const) */                        if (action < -1) {
730: /* MUTANT (negate) */                        if(! (action < 0)) {
735: /* MUTANT (del_stmt) */ /*                             JS_ASSERT(action == -1 || action == -2); */ 
735: /* MUTANT (rep_op) */                            JS_ASSERT(action != -1 || action == -2);
735: /* MUTANT (rep_op) */                            JS_ASSERT(action == -1 && action == -2);
735: /* MUTANT (rep_op) */                            JS_ASSERT(action == -1 || action != -2);
735: /* MUTANT (rep_const) */                            JS_ASSERT(action == 0 || action == -2);
735: /* MUTANT (rep_const) */                            JS_ASSERT(action == 1 || action == -2);
735: /* MUTANT (rep_const) */                            JS_ASSERT(action == ((-1)+1) || action == -2);
735: /* MUTANT (rep_const) */                            JS_ASSERT(action == ((-1)-1) || action == -2);
735: /* MUTANT (rep_const) */                            JS_ASSERT(action == -1 || action == 0);
735: /* MUTANT (rep_const) */                            JS_ASSERT(action == -1 || action == 1);
735: /* MUTANT (rep_const) */                            JS_ASSERT(action == -1 || action == -1);
735: /* MUTANT (rep_const) */                            JS_ASSERT(action == -1 || action == ((-2)+1));
735: /* MUTANT (rep_const) */                            JS_ASSERT(action == -1 || action == ((-2)-1));
736: /* MUTANT (rep_op) */                            if (hour <= 12 || hour < 0) {
736: /* MUTANT (rep_op) */                            if (hour < 12 || hour < 0) {
736: /* MUTANT (rep_op) */                            if (hour >= 12 || hour < 0) {
736: /* MUTANT (rep_op) */                            if (hour == 12 || hour < 0) {
736: /* MUTANT (rep_op) */                            if (hour != 12 || hour < 0) {
736: /* MUTANT (rep_op) */                            if (hour > 12 && hour < 0) {
736: /* MUTANT (rep_op) */                            if (hour > 12 || hour <= 0) {
736: /* MUTANT (rep_op) */                            if (hour > 12 || hour > 0) {
736: /* MUTANT (rep_op) */                            if (hour > 12 || hour >= 0) {
736: /* MUTANT (rep_op) */                            if (hour > 12 || hour == 0) {
736: /* MUTANT (rep_op) */                            if (hour > 12 || hour != 0) {
736: /* MUTANT (rep_const) */                            if (hour > 0 || hour < 0) {
736: /* MUTANT (rep_const) */                            if (hour > 1 || hour < 0) {
736: /* MUTANT (rep_const) */                            if (hour > -1 || hour < 0) {
736: /* MUTANT (rep_const) */                            if (hour > ((12)+1) || hour < 0) {
736: /* MUTANT (rep_const) */                            if (hour > ((12)-1) || hour < 0) {
736: /* MUTANT (rep_const) */                            if (hour > 12 || hour < 1) {
736: /* MUTANT (rep_const) */                            if (hour > 12 || hour < -1) {
736: /* MUTANT (negate) */                            if(! (hour > 12 || hour < 0)) {
737: /* MUTANT (del_stmt) */ /*                                 goto syntax; */ 
739: /* MUTANT (rep_op) */                                if (action != -1 && hour == 12) { /* am */
739: /* MUTANT (rep_op) */                                if (action == -1 || hour == 12) { /* am */
739: /* MUTANT (rep_op) */                                if (action == -1 && hour != 12) { /* am */
739: /* MUTANT (rep_const) */                                if (action == 0 && hour == 12) { /* am */
739: /* MUTANT (rep_const) */                                if (action == 1 && hour == 12) { /* am */
739: /* MUTANT (rep_const) */                                if (action == ((-1)+1) && hour == 12) { /* am */
739: /* MUTANT (rep_const) */                                if (action == ((-1)-1) && hour == 12) { /* am */
739: /* MUTANT (rep_const) */                                if (action == -1 && hour == 0) { /* am */
739: /* MUTANT (rep_const) */                                if (action == -1 && hour == 1) { /* am */
739: /* MUTANT (rep_const) */                                if (action == -1 && hour == -1) { /* am */
739: /* MUTANT (rep_const) */                                if (action == -1 && hour == ((12)+1)) { /* am */
739: /* MUTANT (rep_const) */                                if (action == -1 && hour == ((12)-1)) { /* am */
739: /* MUTANT (negate) */                                if(! (action == -1 && hour == 12)) { /* am */
740: /* MUTANT (del_stmt) */ /*                                     hour = 0; */ 
740: /* MUTANT (rep_const) */                                    hour = 1;
740: /* MUTANT (rep_const) */                                    hour = -1;
741: /* MUTANT (rep_op) */                                } else if (action != -2 && hour != 12) { /* pm */
741: /* MUTANT (rep_op) */                                } else if (action == -2 || hour != 12) { /* pm */
741: /* MUTANT (rep_op) */                                } else if (action == -2 && hour == 12) { /* pm */
741: /* MUTANT (rep_const) */                                } else if (action == 0 && hour != 12) { /* pm */
741: /* MUTANT (rep_const) */                                } else if (action == 1 && hour != 12) { /* pm */
741: /* MUTANT (rep_const) */                                } else if (action == -1 && hour != 12) { /* pm */
741: /* MUTANT (rep_const) */                                } else if (action == ((-2)+1) && hour != 12) { /* pm */
741: /* MUTANT (rep_const) */                                } else if (action == ((-2)-1) && hour != 12) { /* pm */
741: /* MUTANT (rep_const) */                                } else if (action == -2 && hour != 0) { /* pm */
741: /* MUTANT (rep_const) */                                } else if (action == -2 && hour != 1) { /* pm */
741: /* MUTANT (rep_const) */                                } else if (action == -2 && hour != -1) { /* pm */
741: /* MUTANT (rep_const) */                                } else if (action == -2 && hour != ((12)+1)) { /* pm */
741: /* MUTANT (rep_const) */                                } else if (action == -2 && hour != ((12)-1)) { /* pm */
741: /* MUTANT (negate) */                                } else if(! (action == -2 && hour != 12)) { /* pm */
742: /* MUTANT (del_stmt) */ /*                                     hour += 12; */ 
742: /* MUTANT (rep_op) */                                    hour -= 12;
742: /* MUTANT (rep_op) */                                    hour *= 12;
742: /* MUTANT (rep_op) */                                    hour %= 12;
742: /* MUTANT (rep_const) */                                    hour += 0;
742: /* MUTANT (rep_const) */                                    hour += 1;
742: /* MUTANT (rep_const) */                                    hour += -1;
742: /* MUTANT (rep_const) */                                    hour += ((12)+1);
742: /* MUTANT (rep_const) */                                    hour += ((12)-1);
745: /* MUTANT (rep_op) */                        } else if (action < 13) { /* month! */
745: /* MUTANT (rep_op) */                        } else if (action > 13) { /* month! */
745: /* MUTANT (rep_op) */                        } else if (action >= 13) { /* month! */
745: /* MUTANT (rep_op) */                        } else if (action == 13) { /* month! */
745: /* MUTANT (rep_op) */                        } else if (action != 13) { /* month! */
745: /* MUTANT (rep_const) */                        } else if (action <= 0) { /* month! */
745: /* MUTANT (rep_const) */                        } else if (action <= 1) { /* month! */
745: /* MUTANT (rep_const) */                        } else if (action <= -1) { /* month! */
745: /* MUTANT (rep_const) */                        } else if (action <= ((13)+1)) { /* month! */
745: /* MUTANT (rep_const) */                        } else if (action <= ((13)-1)) { /* month! */
745: /* MUTANT (negate) */                        } else if(! (action <= 13)) { /* month! */
748: /* MUTANT (negate) */                            if(! (seenmonthname)) {
749: /* MUTANT (del_stmt) */ /*                                 goto syntax; */ 
754: /* MUTANT (rep_op) */                            if (mon <= 0) {
754: /* MUTANT (rep_op) */                            if (mon > 0) {
754: /* MUTANT (rep_op) */                            if (mon >= 0) {
754: /* MUTANT (rep_op) */                            if (mon == 0) {
754: /* MUTANT (rep_op) */                            if (mon != 0) {
754: /* MUTANT (rep_const) */                            if (mon < 1) {
754: /* MUTANT (rep_const) */                            if (mon < -1) {
754: /* MUTANT (negate) */                            if(! (mon < 0)) {
755: /* MUTANT (del_stmt) */ /*                                 mon = temp; */ 
756: /* MUTANT (rep_op) */                            } else if (mday <= 0) {
756: /* MUTANT (rep_op) */                            } else if (mday > 0) {
756: /* MUTANT (rep_op) */                            } else if (mday >= 0) {
756: /* MUTANT (rep_op) */                            } else if (mday == 0) {
756: /* MUTANT (rep_op) */                            } else if (mday != 0) {
756: /* MUTANT (rep_const) */                            } else if (mday < 1) {
756: /* MUTANT (rep_const) */                            } else if (mday < -1) {
756: /* MUTANT (negate) */                            } else if(! (mday < 0)) {
757: /* MUTANT (del_stmt) */ /*                                 mday = mon; */ 
758: /* MUTANT (del_stmt) */ /*                                 mon = temp; */ 
759: /* MUTANT (rep_op) */                            } else if (year <= 0) {
759: /* MUTANT (rep_op) */                            } else if (year > 0) {
759: /* MUTANT (rep_op) */                            } else if (year >= 0) {
759: /* MUTANT (rep_op) */                            } else if (year == 0) {
759: /* MUTANT (rep_op) */                            } else if (year != 0) {
759: /* MUTANT (rep_const) */                            } else if (year < 1) {
759: /* MUTANT (rep_const) */                            } else if (year < -1) {
759: /* MUTANT (negate) */                            } else if(! (year < 0)) {
760: /* MUTANT (del_stmt) */ /*                                 year = mon; */ 
761: /* MUTANT (del_stmt) */ /*                                 mon = temp; */ 
763: /* MUTANT (del_stmt) */ /*                                 goto syntax; */ 
766: /* MUTANT (del_stmt) */ /*                             tzoffset = action - 10000; */ 
766: /* MUTANT (rep_const) */                            tzoffset = action - 0;
766: /* MUTANT (rep_const) */                            tzoffset = action - 1;
766: /* MUTANT (rep_const) */                            tzoffset = action - -1;
766: /* MUTANT (rep_const) */                            tzoffset = action - ((10000)+1);
766: /* MUTANT (rep_const) */                            tzoffset = action - ((10000)-1);
771: /* MUTANT (rep_op) */            if (k <= 0)
771: /* MUTANT (rep_op) */            if (k > 0)
771: /* MUTANT (rep_op) */            if (k >= 0)
771: /* MUTANT (rep_op) */            if (k == 0)
771: /* MUTANT (rep_op) */            if (k != 0)
771: /* MUTANT (rep_const) */            if (k < 1)
771: /* MUTANT (rep_const) */            if (k < -1)
771: /* MUTANT (negate) */            if(! (k < 0))
773: /* MUTANT (del_stmt) */ /*             prevc = 0; */ 
773: /* MUTANT (rep_const) */            prevc = 1;
773: /* MUTANT (rep_const) */            prevc = -1;
776: /* MUTANT (rep_op) */    if (year <= 0 || mon < 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year > 0 || mon < 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year >= 0 || mon < 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year == 0 || mon < 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year != 0 || mon < 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year < 0 && mon < 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon <= 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon > 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon >= 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon == 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon != 0 || mday < 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon < 0 && mday < 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon < 0 || mday <= 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon < 0 || mday > 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon < 0 || mday >= 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon < 0 || mday == 0)
776: /* MUTANT (rep_op) */    if (year < 0 || mon < 0 || mday != 0)
776: /* MUTANT (rep_const) */    if (year < 1 || mon < 0 || mday < 0)
776: /* MUTANT (rep_const) */    if (year < -1 || mon < 0 || mday < 0)
776: /* MUTANT (rep_const) */    if (year < 0 || mon < 1 || mday < 0)
776: /* MUTANT (rep_const) */    if (year < 0 || mon < -1 || mday < 0)
776: /* MUTANT (rep_const) */    if (year < 0 || mon < 0 || mday < 1)
776: /* MUTANT (rep_const) */    if (year < 0 || mon < 0 || mday < -1)
776: /* MUTANT (negate) */    if(! (year < 0 || mon < 0 || mday < 0))
804: /* MUTANT (negate) */    if(! (seenmonthname)) {
805: /* MUTANT (rep_op) */        if ((mday <= 70 && year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday < 70 && year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday > 70 && year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday == 70 && year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday != 70 && year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 || year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year <= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year < 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year > 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year == 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year != 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) && (mday < 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday <= 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday > 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday >= 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday == 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday != 70 && year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday < 70 || year < 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday < 70 && year <= 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday < 70 && year > 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday < 70 && year >= 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday < 70 && year == 70)) {
805: /* MUTANT (rep_op) */        if ((mday >= 70 && year >= 70) || (mday < 70 && year != 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 0 && year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 1 && year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= -1 && year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= ((70)+1) && year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= ((70)-1) && year >= 70) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 0) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 1) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= -1) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= ((70)+1)) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= ((70)-1)) || (mday < 70 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 70) || (mday < 0 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 70) || (mday < 1 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 70) || (mday < -1 && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 70) || (mday < ((70)+1) && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 70) || (mday < ((70)-1) && year < 70)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 70) || (mday < 70 && year < 0)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 70) || (mday < 70 && year < 1)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 70) || (mday < 70 && year < -1)) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 70) || (mday < 70 && year < ((70)+1))) {
805: /* MUTANT (rep_const) */        if ((mday >= 70 && year >= 70) || (mday < 70 && year < ((70)-1))) {
805: /* MUTANT (negate) */        if(! ((mday >= 70 && year >= 70) || (mday < 70 && year < 70))) {
806: /* MUTANT (del_stmt) */ /*             goto syntax; */ 
808: /* MUTANT (rep_op) */        if (mday <= year) {
808: /* MUTANT (rep_op) */        if (mday < year) {
808: /* MUTANT (rep_op) */        if (mday >= year) {
808: /* MUTANT (rep_op) */        if (mday == year) {
808: /* MUTANT (rep_op) */        if (mday != year) {
808: /* MUTANT (negate) */        if(! (mday > year)) {
809: /* MUTANT (del_stmt) */ /*             temp = year; */ 
810: /* MUTANT (del_stmt) */ /*             year = mday; */ 
811: /* MUTANT (del_stmt) */ /*             mday = temp; */ 
813: /* MUTANT (rep_op) */        if (year <= 70 && year < 100) {
813: /* MUTANT (rep_op) */        if (year < 70 && year < 100) {
813: /* MUTANT (rep_op) */        if (year > 70 && year < 100) {
813: /* MUTANT (rep_op) */        if (year == 70 && year < 100) {
813: /* MUTANT (rep_op) */        if (year != 70 && year < 100) {
813: /* MUTANT (rep_op) */        if (year >= 70 || year < 100) {
813: /* MUTANT (rep_op) */        if (year >= 70 && year <= 100) {
813: /* MUTANT (rep_op) */        if (year >= 70 && year > 100) {
813: /* MUTANT (rep_op) */        if (year >= 70 && year >= 100) {
813: /* MUTANT (rep_op) */        if (year >= 70 && year == 100) {
813: /* MUTANT (rep_op) */        if (year >= 70 && year != 100) {
813: /* MUTANT (rep_const) */        if (year >= 0 && year < 100) {
813: /* MUTANT (rep_const) */        if (year >= 1 && year < 100) {
813: /* MUTANT (rep_const) */        if (year >= -1 && year < 100) {
813: /* MUTANT (rep_const) */        if (year >= ((70)+1) && year < 100) {
813: /* MUTANT (rep_const) */        if (year >= ((70)-1) && year < 100) {
813: /* MUTANT (rep_const) */        if (year >= 70 && year < 0) {
813: /* MUTANT (rep_const) */        if (year >= 70 && year < 1) {
813: /* MUTANT (rep_const) */        if (year >= 70 && year < -1) {
813: /* MUTANT (rep_const) */        if (year >= 70 && year < ((100)+1)) {
813: /* MUTANT (rep_const) */        if (year >= 70 && year < ((100)-1)) {
813: /* MUTANT (negate) */        if(! (year >= 70 && year < 100)) {
814: /* MUTANT (del_stmt) */ /*             year += 1900; */ 
814: /* MUTANT (rep_op) */            year -= 1900;
814: /* MUTANT (rep_op) */            year *= 1900;
814: /* MUTANT (rep_op) */            year %= 1900;
814: /* MUTANT (rep_const) */            year += 0;
814: /* MUTANT (rep_const) */            year += 1;
814: /* MUTANT (rep_const) */            year += -1;
814: /* MUTANT (rep_const) */            year += ((1900)+1);
814: /* MUTANT (rep_const) */            year += ((1900)-1);
816: /* MUTANT (rep_op) */    } else if (mon <= 70) { /* (a) month/day/year */
816: /* MUTANT (rep_op) */    } else if (mon > 70) { /* (a) month/day/year */
816: /* MUTANT (rep_op) */    } else if (mon >= 70) { /* (a) month/day/year */
816: /* MUTANT (rep_op) */    } else if (mon == 70) { /* (a) month/day/year */
816: /* MUTANT (rep_op) */    } else if (mon != 70) { /* (a) month/day/year */
816: /* MUTANT (rep_const) */    } else if (mon < 0) { /* (a) month/day/year */
816: /* MUTANT (rep_const) */    } else if (mon < 1) { /* (a) month/day/year */
816: /* MUTANT (rep_const) */    } else if (mon < -1) { /* (a) month/day/year */
816: /* MUTANT (rep_const) */    } else if (mon < ((70)+1)) { /* (a) month/day/year */
816: /* MUTANT (rep_const) */    } else if (mon < ((70)-1)) { /* (a) month/day/year */
816: /* MUTANT (negate) */    } else if(! (mon < 70)) { /* (a) month/day/year */
817: /* MUTANT (rep_op) */        if (year <= 100) {
817: /* MUTANT (rep_op) */        if (year > 100) {
817: /* MUTANT (rep_op) */        if (year >= 100) {
817: /* MUTANT (rep_op) */        if (year == 100) {
817: /* MUTANT (rep_op) */        if (year != 100) {
817: /* MUTANT (rep_const) */        if (year < 0) {
817: /* MUTANT (rep_const) */        if (year < 1) {
817: /* MUTANT (rep_const) */        if (year < -1) {
817: /* MUTANT (rep_const) */        if (year < ((100)+1)) {
817: /* MUTANT (rep_const) */        if (year < ((100)-1)) {
817: /* MUTANT (negate) */        if(! (year < 100)) {
818: /* MUTANT (del_stmt) */ /*             year += 1900; */ 
818: /* MUTANT (rep_op) */            year -= 1900;
818: /* MUTANT (rep_op) */            year *= 1900;
818: /* MUTANT (rep_op) */            year %= 1900;
818: /* MUTANT (rep_const) */            year += 0;
818: /* MUTANT (rep_const) */            year += 1;
818: /* MUTANT (rep_const) */            year += -1;
818: /* MUTANT (rep_const) */            year += ((1900)+1);
818: /* MUTANT (rep_const) */            year += ((1900)-1);
820: /* MUTANT (rep_op) */    } else if (mon <= 100) { /* (b) year/month/day */
820: /* MUTANT (rep_op) */    } else if (mon > 100) { /* (b) year/month/day */
820: /* MUTANT (rep_op) */    } else if (mon >= 100) { /* (b) year/month/day */
820: /* MUTANT (rep_op) */    } else if (mon == 100) { /* (b) year/month/day */
820: /* MUTANT (rep_op) */    } else if (mon != 100) { /* (b) year/month/day */
820: /* MUTANT (rep_const) */    } else if (mon < 0) { /* (b) year/month/day */
820: /* MUTANT (rep_const) */    } else if (mon < 1) { /* (b) year/month/day */
820: /* MUTANT (rep_const) */    } else if (mon < -1) { /* (b) year/month/day */
820: /* MUTANT (rep_const) */    } else if (mon < ((100)+1)) { /* (b) year/month/day */
820: /* MUTANT (rep_const) */    } else if (mon < ((100)-1)) { /* (b) year/month/day */
820: /* MUTANT (negate) */    } else if(! (mon < 100)) { /* (b) year/month/day */
821: /* MUTANT (rep_op) */        if (mday <= 70) { 
821: /* MUTANT (rep_op) */        if (mday > 70) { 
821: /* MUTANT (rep_op) */        if (mday >= 70) { 
821: /* MUTANT (rep_op) */        if (mday == 70) { 
821: /* MUTANT (rep_op) */        if (mday != 70) { 
821: /* MUTANT (rep_const) */        if (mday < 0) { 
821: /* MUTANT (rep_const) */        if (mday < 1) { 
821: /* MUTANT (rep_const) */        if (mday < -1) { 
821: /* MUTANT (rep_const) */        if (mday < ((70)+1)) { 
821: /* MUTANT (rep_const) */        if (mday < ((70)-1)) { 
821: /* MUTANT (negate) */        if(! (mday < 70)) { 
822: /* MUTANT (del_stmt) */ /*             temp = year; */ 
823: /* MUTANT (del_stmt) */ /*             year = mon + 1900; */ 
823: /* MUTANT (rep_op) */            year = mon - 1900;
823: /* MUTANT (rep_op) */            year = mon * 1900;
823: /* MUTANT (rep_op) */            year = mon % 1900;
823: /* MUTANT (rep_const) */            year = mon + 0;
823: /* MUTANT (rep_const) */            year = mon + 1;
823: /* MUTANT (rep_const) */            year = mon + -1;
823: /* MUTANT (rep_const) */            year = mon + ((1900)+1);
823: /* MUTANT (rep_const) */            year = mon + ((1900)-1);
824: /* MUTANT (del_stmt) */ /*             mon = mday; */ 
825: /* MUTANT (del_stmt) */ /*             mday = temp; */ 
827: /* MUTANT (del_stmt) */ /*             goto syntax; */ 
830: /* MUTANT (rep_op) */        if (mday <= 70) {
830: /* MUTANT (rep_op) */        if (mday > 70) {
830: /* MUTANT (rep_op) */        if (mday >= 70) {
830: /* MUTANT (rep_op) */        if (mday == 70) {
830: /* MUTANT (rep_op) */        if (mday != 70) {
830: /* MUTANT (rep_const) */        if (mday < 0) {
830: /* MUTANT (rep_const) */        if (mday < 1) {
830: /* MUTANT (rep_const) */        if (mday < -1) {
830: /* MUTANT (rep_const) */        if (mday < ((70)+1)) {
830: /* MUTANT (rep_const) */        if (mday < ((70)-1)) {
830: /* MUTANT (negate) */        if(! (mday < 70)) {
831: /* MUTANT (del_stmt) */ /*             temp = year; */ 
832: /* MUTANT (del_stmt) */ /*             year = mon; */ 
833: /* MUTANT (del_stmt) */ /*             mon = mday; */ 
834: /* MUTANT (del_stmt) */ /*             mday = temp; */ 
836: /* MUTANT (del_stmt) */ /*             goto syntax; */ 
839: /* MUTANT (rep_op) */    mon += 1; /* convert month to 0-based */
839: /* MUTANT (rep_op) */    mon *= 1; /* convert month to 0-based */
839: /* MUTANT (rep_op) */    mon %= 1; /* convert month to 0-based */
839: /* MUTANT (rep_const) */    mon -= 0; /* convert month to 0-based */
839: /* MUTANT (rep_const) */    mon -= -1; /* convert month to 0-based */
839: /* MUTANT (rep_const) */    mon -= ((1)+1); /* convert month to 0-based */
840: /* MUTANT (rep_op) */    if (sec <= 0)
840: /* MUTANT (rep_op) */    if (sec > 0)
840: /* MUTANT (rep_op) */    if (sec >= 0)
840: /* MUTANT (rep_op) */    if (sec == 0)
840: /* MUTANT (rep_op) */    if (sec != 0)
840: /* MUTANT (rep_const) */    if (sec < 1)
840: /* MUTANT (rep_const) */    if (sec < -1)
840: /* MUTANT (negate) */    if(! (sec < 0))
841: /* MUTANT (rep_const) */        sec = 1;
841: /* MUTANT (rep_const) */        sec = -1;
842: /* MUTANT (rep_op) */    if (min <= 0)
842: /* MUTANT (rep_op) */    if (min > 0)
842: /* MUTANT (rep_op) */    if (min >= 0)
842: /* MUTANT (rep_op) */    if (min == 0)
842: /* MUTANT (rep_op) */    if (min != 0)
842: /* MUTANT (rep_const) */    if (min < 1)
842: /* MUTANT (rep_const) */    if (min < -1)
842: /* MUTANT (negate) */    if(! (min < 0))
843: /* MUTANT (rep_const) */        min = 1;
843: /* MUTANT (rep_const) */        min = -1;
844: /* MUTANT (rep_op) */    if (hour <= 0)
844: /* MUTANT (rep_op) */    if (hour > 0)
844: /* MUTANT (rep_op) */    if (hour >= 0)
844: /* MUTANT (rep_op) */    if (hour == 0)
844: /* MUTANT (rep_op) */    if (hour != 0)
844: /* MUTANT (rep_const) */    if (hour < 1)
844: /* MUTANT (rep_const) */    if (hour < -1)
844: /* MUTANT (negate) */    if(! (hour < 0))
845: /* MUTANT (rep_const) */        hour = 1;
845: /* MUTANT (rep_const) */        hour = -1;
846: /* MUTANT (rep_op) */    if (tzoffset != -1) { /* no time zone specified, have to use local */
846: /* MUTANT (rep_const) */    if (tzoffset == 0) { /* no time zone specified, have to use local */
846: /* MUTANT (rep_const) */    if (tzoffset == 1) { /* no time zone specified, have to use local */
846: /* MUTANT (rep_const) */    if (tzoffset == ((-1)+1)) { /* no time zone specified, have to use local */
846: /* MUTANT (rep_const) */    if (tzoffset == ((-1)-1)) { /* no time zone specified, have to use local */
846: /* MUTANT (negate) */    if(! (tzoffset == -1)) { /* no time zone specified, have to use local */
847: /* MUTANT (del_stmt) */ /*         jsdouble msec_time; */ 
848: /* MUTANT (del_stmt) */ /*         msec_time = date_msecFromDate(year, mon, mday, hour, min, sec, 0); */ 
848: /* MUTANT (rep_const) */        msec_time = date_msecFromDate(year, mon, mday, hour, min, sec, 1);
848: /* MUTANT (rep_const) */        msec_time = date_msecFromDate(year, mon, mday, hour, min, sec, -1);
850: /* MUTANT (del_stmt) */ /*         *result = UTC(msec_time); */ 
851: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
854: /* MUTANT (rep_const) */    msec = date_msecFromDate(year, mon, mday, hour, min, sec, 1);
854: /* MUTANT (rep_const) */    msec = date_msecFromDate(year, mon, mday, hour, min, sec, -1);
855: /* MUTANT (del_stmt) */ /*     msec += tzoffset * msPerMinute; */ 
855: /* MUTANT (rep_op) */    msec -= tzoffset * msPerMinute;
855: /* MUTANT (rep_op) */    msec *= tzoffset * msPerMinute;
855: /* MUTANT (rep_op) */    msec %= tzoffset * msPerMinute;
856: /* MUTANT (del_stmt) */ /*     *result = msec; */ 
857: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
861: /* MUTANT (rep_const) */    *result = 1;
861: /* MUTANT (rep_const) */    *result = -1;
862: /* MUTANT (del_stmt) */ /*     return JS_FALSE; */ 
868: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
869: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
871: /* MUTANT (del_stmt) */ /*     str = js_ValueToString(cx, argv[0]); */ 
871: /* MUTANT (rep_const) */    str = js_ValueToString(cx, argv[1]);
871: /* MUTANT (rep_const) */    str = js_ValueToString(cx, argv[-1]);
872: /* MUTANT (negate) */    if(! (!str))
874: /* MUTANT (negate) */    if(! (!date_parseString(str, &result))) {
875: /* MUTANT (del_stmt) */ /*         *rval = DOUBLE_TO_JSVAL(cx->runtime->jsNaN); */ 
876: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
880: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
886: /* MUTANT (del_stmt) */ /*     int64 us, ms, us2ms; */ 
887: /* MUTANT (del_stmt) */ /*     jsdouble msec_time; */ 
889: /* MUTANT (del_stmt) */ /*     us = PRMJ_Now(); */ 
890: /* MUTANT (del_stmt) */ /*     JSLL_UI2L(us2ms, PRMJ_USEC_PER_MSEC); */ 
891: /* MUTANT (del_stmt) */ /*     JSLL_DIV(ms, us, us2ms); */ 
892: /* MUTANT (del_stmt) */ /*     JSLL_L2D(msec_time, ms); */ 
894: /* MUTANT (del_stmt) */ /*     return js_NewDoubleValue(cx, msec_time, rval); */ 
904: /* MUTANT (negate) */    if(! (!JS_InstanceOf(cx, obj, &date_class, argv)))
906: /* MUTANT (del_stmt) */ /*     return JSVAL_TO_DOUBLE(OBJ_GET_SLOT(cx, obj, JSSLOT_PRIVATE)); */ 
915: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
916: /* MUTANT (negate) */    if(! (!date))
919: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, *date, rval); */ 
925: /* MUTANT (del_stmt) */ /*     jsdouble *date; */ 
926: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
927: /* MUTANT (del_stmt) */ /*     JSVersion version; */ 
929: /* MUTANT (del_stmt) */ /*     date = date_getProlog(cx, obj, argv); */ 
930: /* MUTANT (negate) */    if(! (!date))
933: /* MUTANT (del_stmt) */ /*     result = *date; */ 
934: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
937: /* MUTANT (del_stmt) */ /*     result = YearFromTime(LocalTime(result)); */ 
948: /* MUTANT (del_stmt) */ /*     version = cx->version & JSVERSION_MASK; */ 
949: /* MUTANT (rep_op) */    if (version != JSVERSION_1_0 ||
949: /* MUTANT (rep_op) */    if (version == JSVERSION_1_0 &&
950: /* MUTANT (rep_op) */        version != JSVERSION_1_1 ||
950: /* MUTANT (rep_op) */        version == JSVERSION_1_1 &&
951: /* MUTANT (rep_op) */        version != JSVERSION_1_2)
953: /* MUTANT (rep_op) */        if (result <= 1900 && result < 2000)
953: /* MUTANT (rep_op) */        if (result < 1900 && result < 2000)
953: /* MUTANT (rep_op) */        if (result > 1900 && result < 2000)
953: /* MUTANT (rep_op) */        if (result == 1900 && result < 2000)
953: /* MUTANT (rep_op) */        if (result != 1900 && result < 2000)
953: /* MUTANT (rep_op) */        if (result >= 1900 || result < 2000)
953: /* MUTANT (rep_op) */        if (result >= 1900 && result <= 2000)
953: /* MUTANT (rep_op) */        if (result >= 1900 && result > 2000)
953: /* MUTANT (rep_op) */        if (result >= 1900 && result >= 2000)
953: /* MUTANT (rep_op) */        if (result >= 1900 && result == 2000)
953: /* MUTANT (rep_op) */        if (result >= 1900 && result != 2000)
953: /* MUTANT (rep_const) */        if (result >= 0 && result < 2000)
953: /* MUTANT (rep_const) */        if (result >= 1 && result < 2000)
953: /* MUTANT (rep_const) */        if (result >= -1 && result < 2000)
953: /* MUTANT (rep_const) */        if (result >= ((1900)+1) && result < 2000)
953: /* MUTANT (rep_const) */        if (result >= ((1900)-1) && result < 2000)
953: /* MUTANT (rep_const) */        if (result >= 1900 && result < 0)
953: /* MUTANT (rep_const) */        if (result >= 1900 && result < 1)
953: /* MUTANT (rep_const) */        if (result >= 1900 && result < -1)
953: /* MUTANT (rep_const) */        if (result >= 1900 && result < ((2000)+1))
953: /* MUTANT (rep_const) */        if (result >= 1900 && result < ((2000)-1))
953: /* MUTANT (negate) */        if(! (result >= 1900 && result < 2000))
954: /* MUTANT (rep_op) */            result += 1900;
954: /* MUTANT (rep_op) */            result *= 1900;
954: /* MUTANT (rep_op) */            result %= 1900;
954: /* MUTANT (rep_const) */            result -= 0;
954: /* MUTANT (rep_const) */            result -= 1;
954: /* MUTANT (rep_const) */            result -= -1;
954: /* MUTANT (rep_const) */            result -= ((1900)+1);
954: /* MUTANT (rep_const) */            result -= ((1900)-1);
956: /* MUTANT (del_stmt) */ /*         result -= 1900; */ 
956: /* MUTANT (rep_op) */        result += 1900;
956: /* MUTANT (rep_op) */        result *= 1900;
956: /* MUTANT (rep_op) */        result %= 1900;
956: /* MUTANT (rep_const) */        result -= 0;
956: /* MUTANT (rep_const) */        result -= 1;
956: /* MUTANT (rep_const) */        result -= -1;
956: /* MUTANT (rep_const) */        result -= ((1900)+1);
956: /* MUTANT (rep_const) */        result -= ((1900)-1);
965: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
966: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
967: /* MUTANT (negate) */    if(! (!date))
969: /* MUTANT (del_stmt) */ /*     result = *date; */ 
971: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
974: /* MUTANT (del_stmt) */ /*     result = YearFromTime(LocalTime(result)); */ 
975: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
982: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
983: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
984: /* MUTANT (negate) */    if(! (!date))
986: /* MUTANT (del_stmt) */ /*     result = *date; */ 
988: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
991: /* MUTANT (del_stmt) */ /*     result = YearFromTime(result); */ 
992: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
999: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1000: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1001: /* MUTANT (negate) */    if(! (!date))
1003: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1005: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1008: /* MUTANT (del_stmt) */ /*     result = MonthFromTime(LocalTime(result)); */ 
1009: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1016: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1017: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1018: /* MUTANT (negate) */    if(! (!date))
1020: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1022: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1025: /* MUTANT (del_stmt) */ /*     result = MonthFromTime(result); */ 
1026: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1032: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1033: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1034: /* MUTANT (negate) */    if(! (!date))
1036: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1038: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1041: /* MUTANT (del_stmt) */ /*     result = LocalTime(result); */ 
1042: /* MUTANT (del_stmt) */ /*     result = DateFromTime(result); */ 
1043: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1050: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1051: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1052: /* MUTANT (negate) */    if(! (!date))
1054: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1056: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1059: /* MUTANT (del_stmt) */ /*     result = DateFromTime(result); */ 
1060: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1066: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1067: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1068: /* MUTANT (negate) */    if(! (!date))
1070: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1072: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1075: /* MUTANT (del_stmt) */ /*     result = LocalTime(result); */ 
1076: /* MUTANT (del_stmt) */ /*     result = WeekDay(result); */ 
1077: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1084: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1085: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1086: /* MUTANT (negate) */    if(! (!date))
1088: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1090: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1093: /* MUTANT (del_stmt) */ /*     result = WeekDay(result); */ 
1094: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1101: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1102: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1103: /* MUTANT (negate) */    if(! (!date))
1105: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1107: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1110: /* MUTANT (del_stmt) */ /*     result = HourFromTime(LocalTime(result)); */ 
1111: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1118: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1119: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1120: /* MUTANT (negate) */    if(! (!date))
1122: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1124: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1127: /* MUTANT (del_stmt) */ /*     result = HourFromTime(result); */ 
1128: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1135: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1136: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1137: /* MUTANT (negate) */    if(! (!date))
1139: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1141: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1144: /* MUTANT (del_stmt) */ /*     result = MinFromTime(LocalTime(result)); */ 
1145: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1152: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1153: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1154: /* MUTANT (negate) */    if(! (!date))
1156: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1158: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1161: /* MUTANT (del_stmt) */ /*     result = MinFromTime(result); */ 
1162: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1171: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1172: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1173: /* MUTANT (negate) */    if(! (!date))
1175: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1177: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1180: /* MUTANT (del_stmt) */ /*     result = SecFromTime(result); */ 
1181: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1190: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1191: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1192: /* MUTANT (negate) */    if(! (!date))
1194: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1196: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1199: /* MUTANT (del_stmt) */ /*     result = msFromTime(result); */ 
1200: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1207: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1208: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1209: /* MUTANT (negate) */    if(! (!date))
1211: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1218: /* MUTANT (del_stmt) */ /*     result = (result - LocalTime(result)) / msPerMinute; */ 
1219: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1225: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1226: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1227: /* MUTANT (negate) */    if(! (!date))
1230: /* MUTANT (rep_const) */    if (!js_ValueToNumber(cx, argv[1], &result))
1230: /* MUTANT (rep_const) */    if (!js_ValueToNumber(cx, argv[-1], &result))
1230: /* MUTANT (negate) */    if(! (!js_ValueToNumber(cx, argv[0], &result)))
1233: /* MUTANT (del_stmt) */ /*     result = TIMECLIP(result); */ 
1235: /* MUTANT (del_stmt) */ /*     *date = result; */ 
1236: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, result, rval); */ 
1243: /* MUTANT (del_stmt) */ /*     uintN i; */ 
1244: /* MUTANT (del_stmt) */ /*     jsdouble args[4], *argp, *stop; */ 
1244: /* MUTANT (rep_const) */    jsdouble args[0], *argp, *stop;
1244: /* MUTANT (rep_const) */    jsdouble args[1], *argp, *stop;
1244: /* MUTANT (rep_const) */    jsdouble args[-1], *argp, *stop;
1244: /* MUTANT (rep_const) */    jsdouble args[((4)+1)], *argp, *stop;
1244: /* MUTANT (rep_const) */    jsdouble args[((4)-1)], *argp, *stop;
1245: /* MUTANT (del_stmt) */ /*     jsdouble hour, min, sec, msec; */ 
1246: /* MUTANT (del_stmt) */ /*     jsdouble lorutime; */  /* Local or UTC version of *date */
1248: /* MUTANT (del_stmt) */ /*     jsdouble msec_time; */ 
1249: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1251: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1252: /* MUTANT (negate) */    if(! (!date))
1255: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1258: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result)))
1269: /* MUTANT (rep_op) */    if (argc != 0)
1269: /* MUTANT (rep_const) */    if (argc == 1)
1269: /* MUTANT (rep_const) */    if (argc == -1)
1269: /* MUTANT (negate) */    if(! (argc == 0))
1270: /* MUTANT (rep_const) */        argc = 0;   /* should be safe, because length of all setters is 1 */
1270: /* MUTANT (rep_const) */        argc = -1;   /* should be safe, because length of all setters is 1 */
1270: /* MUTANT (rep_const) */        argc = ((1)+1);   /* should be safe, because length of all setters is 1 */
1271: /* MUTANT (rep_op) */    else if (argc <= maxargs)
1271: /* MUTANT (rep_op) */    else if (argc < maxargs)
1271: /* MUTANT (rep_op) */    else if (argc >= maxargs)
1271: /* MUTANT (rep_op) */    else if (argc == maxargs)
1271: /* MUTANT (rep_op) */    else if (argc != maxargs)
1271: /* MUTANT (negate) */    else if(! (argc > maxargs))
1274: /* MUTANT (rep_op) */    for (i = 0; i <= argc; i++) {
1274: /* MUTANT (rep_op) */    for (i = 0; i > argc; i++) {
1274: /* MUTANT (rep_op) */    for (i = 0; i >= argc; i++) {
1274: /* MUTANT (rep_op) */    for (i = 0; i == argc; i++) {
1274: /* MUTANT (rep_op) */    for (i = 0; i != argc; i++) {
1274: /* MUTANT (rep_op) */    for (i = 0; i < argc; i--) {
1274: /* MUTANT (rep_const) */    for (i = 1; i < argc; i++) {
1274: /* MUTANT (rep_const) */    for (i = -1; i < argc; i++) {
1275: /* MUTANT (negate) */        if(! (!js_ValueToNumber(cx, argv[i], &args[i])))
1277: /* MUTANT (negate) */        if(! (!JSDOUBLE_IS_FINITE(args[i]))) {
1278: /* MUTANT (del_stmt) */ /*             *date = *cx->runtime->jsNaN; */ 
1279: /* MUTANT (del_stmt) */ /*             return js_NewNumberValue(cx, *date, rval); */ 
1284: /* MUTANT (negate) */    if(! (local))
1289: /* MUTANT (del_stmt) */ /*     argp = args; */ 
1290: /* MUTANT (del_stmt) */ /*     stop = argp + argc; */ 
1290: /* MUTANT (rep_op) */    stop = argp - argc;
1290: /* MUTANT (rep_op) */    stop = argp * argc;
1290: /* MUTANT (rep_op) */    stop = argp % argc;
1291: /* MUTANT (rep_op) */    if (maxargs <= 4 && argp < stop)
1291: /* MUTANT (rep_op) */    if (maxargs < 4 && argp < stop)
1291: /* MUTANT (rep_op) */    if (maxargs > 4 && argp < stop)
1291: /* MUTANT (rep_op) */    if (maxargs == 4 && argp < stop)
1291: /* MUTANT (rep_op) */    if (maxargs != 4 && argp < stop)
1291: /* MUTANT (rep_op) */    if (maxargs >= 4 || argp < stop)
1291: /* MUTANT (rep_op) */    if (maxargs >= 4 && argp <= stop)
1291: /* MUTANT (rep_op) */    if (maxargs >= 4 && argp > stop)
1291: /* MUTANT (rep_op) */    if (maxargs >= 4 && argp >= stop)
1291: /* MUTANT (rep_op) */    if (maxargs >= 4 && argp == stop)
1291: /* MUTANT (rep_op) */    if (maxargs >= 4 && argp != stop)
1291: /* MUTANT (rep_const) */    if (maxargs >= 0 && argp < stop)
1291: /* MUTANT (rep_const) */    if (maxargs >= 1 && argp < stop)
1291: /* MUTANT (rep_const) */    if (maxargs >= -1 && argp < stop)
1291: /* MUTANT (rep_const) */    if (maxargs >= ((4)+1) && argp < stop)
1291: /* MUTANT (rep_const) */    if (maxargs >= ((4)-1) && argp < stop)
1291: /* MUTANT (negate) */    if(! (maxargs >= 4 && argp < stop))
1292: /* MUTANT (rep_op) */        hour = *argp--;
1296: /* MUTANT (rep_op) */    if (maxargs <= 3 && argp < stop)
1296: /* MUTANT (rep_op) */    if (maxargs < 3 && argp < stop)
1296: /* MUTANT (rep_op) */    if (maxargs > 3 && argp < stop)
1296: /* MUTANT (rep_op) */    if (maxargs == 3 && argp < stop)
1296: /* MUTANT (rep_op) */    if (maxargs != 3 && argp < stop)
1296: /* MUTANT (rep_op) */    if (maxargs >= 3 || argp < stop)
1296: /* MUTANT (rep_op) */    if (maxargs >= 3 && argp <= stop)
1296: /* MUTANT (rep_op) */    if (maxargs >= 3 && argp > stop)
1296: /* MUTANT (rep_op) */    if (maxargs >= 3 && argp >= stop)
1296: /* MUTANT (rep_op) */    if (maxargs >= 3 && argp == stop)
1296: /* MUTANT (rep_op) */    if (maxargs >= 3 && argp != stop)
1296: /* MUTANT (rep_const) */    if (maxargs >= 0 && argp < stop)
1296: /* MUTANT (rep_const) */    if (maxargs >= 1 && argp < stop)
1296: /* MUTANT (rep_const) */    if (maxargs >= -1 && argp < stop)
1296: /* MUTANT (rep_const) */    if (maxargs >= ((3)+1) && argp < stop)
1296: /* MUTANT (rep_const) */    if (maxargs >= ((3)-1) && argp < stop)
1296: /* MUTANT (negate) */    if(! (maxargs >= 3 && argp < stop))
1297: /* MUTANT (rep_op) */        min = *argp--;
1301: /* MUTANT (rep_op) */    if (maxargs <= 2 && argp < stop)
1301: /* MUTANT (rep_op) */    if (maxargs < 2 && argp < stop)
1301: /* MUTANT (rep_op) */    if (maxargs > 2 && argp < stop)
1301: /* MUTANT (rep_op) */    if (maxargs == 2 && argp < stop)
1301: /* MUTANT (rep_op) */    if (maxargs != 2 && argp < stop)
1301: /* MUTANT (rep_op) */    if (maxargs >= 2 || argp < stop)
1301: /* MUTANT (rep_op) */    if (maxargs >= 2 && argp <= stop)
1301: /* MUTANT (rep_op) */    if (maxargs >= 2 && argp > stop)
1301: /* MUTANT (rep_op) */    if (maxargs >= 2 && argp >= stop)
1301: /* MUTANT (rep_op) */    if (maxargs >= 2 && argp == stop)
1301: /* MUTANT (rep_op) */    if (maxargs >= 2 && argp != stop)
1301: /* MUTANT (rep_const) */    if (maxargs >= 0 && argp < stop)
1301: /* MUTANT (rep_const) */    if (maxargs >= 1 && argp < stop)
1301: /* MUTANT (rep_const) */    if (maxargs >= -1 && argp < stop)
1301: /* MUTANT (rep_const) */    if (maxargs >= ((2)+1) && argp < stop)
1301: /* MUTANT (rep_const) */    if (maxargs >= ((2)-1) && argp < stop)
1301: /* MUTANT (negate) */    if(! (maxargs >= 2 && argp < stop))
1302: /* MUTANT (rep_op) */        sec = *argp--;
1306: /* MUTANT (rep_op) */    if (maxargs <= 1 && argp < stop)
1306: /* MUTANT (rep_op) */    if (maxargs < 1 && argp < stop)
1306: /* MUTANT (rep_op) */    if (maxargs > 1 && argp < stop)
1306: /* MUTANT (rep_op) */    if (maxargs == 1 && argp < stop)
1306: /* MUTANT (rep_op) */    if (maxargs != 1 && argp < stop)
1306: /* MUTANT (rep_op) */    if (maxargs >= 1 || argp < stop)
1306: /* MUTANT (rep_op) */    if (maxargs >= 1 && argp <= stop)
1306: /* MUTANT (rep_op) */    if (maxargs >= 1 && argp > stop)
1306: /* MUTANT (rep_op) */    if (maxargs >= 1 && argp >= stop)
1306: /* MUTANT (rep_op) */    if (maxargs >= 1 && argp == stop)
1306: /* MUTANT (rep_op) */    if (maxargs >= 1 && argp != stop)
1306: /* MUTANT (rep_const) */    if (maxargs >= 0 && argp < stop)
1306: /* MUTANT (rep_const) */    if (maxargs >= -1 && argp < stop)
1306: /* MUTANT (rep_const) */    if (maxargs >= ((1)+1) && argp < stop)
1306: /* MUTANT (negate) */    if(! (maxargs >= 1 && argp < stop))
1311: /* MUTANT (del_stmt) */ /*     msec_time = MakeTime(hour, min, sec, msec); */ 
1312: /* MUTANT (del_stmt) */ /*     result = MakeDate(Day(lorutime), msec_time); */ 
1316: /* MUTANT (negate) */    if(! (local))
1321: /* MUTANT (del_stmt) */ /*     *date = TIMECLIP(result); */ 
1322: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, *date, rval); */ 
1329: /* MUTANT (del_stmt) */ /*     return date_makeTime(cx, obj, argc, argv, 1, JS_TRUE, rval); */ 
1329: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 0, JS_TRUE, rval);
1329: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, -1, JS_TRUE, rval);
1329: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((1)+1), JS_TRUE, rval);
1336: /* MUTANT (del_stmt) */ /*     return date_makeTime(cx, obj, argc, argv, 1, JS_FALSE, rval); */ 
1336: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 0, JS_FALSE, rval);
1336: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, -1, JS_FALSE, rval);
1336: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((1)+1), JS_FALSE, rval);
1343: /* MUTANT (del_stmt) */ /*     return date_makeTime(cx, obj, argc, argv, 2, JS_TRUE, rval); */ 
1343: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 0, JS_TRUE, rval);
1343: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 1, JS_TRUE, rval);
1343: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, -1, JS_TRUE, rval);
1343: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((2)+1), JS_TRUE, rval);
1343: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((2)-1), JS_TRUE, rval);
1350: /* MUTANT (del_stmt) */ /*     return date_makeTime(cx, obj, argc, argv, 2, JS_FALSE, rval); */ 
1350: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 0, JS_FALSE, rval);
1350: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 1, JS_FALSE, rval);
1350: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, -1, JS_FALSE, rval);
1350: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((2)+1), JS_FALSE, rval);
1350: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((2)-1), JS_FALSE, rval);
1357: /* MUTANT (del_stmt) */ /*     return date_makeTime(cx, obj, argc, argv, 3, JS_TRUE, rval); */ 
1357: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 0, JS_TRUE, rval);
1357: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 1, JS_TRUE, rval);
1357: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, -1, JS_TRUE, rval);
1357: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((3)+1), JS_TRUE, rval);
1357: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((3)-1), JS_TRUE, rval);
1364: /* MUTANT (del_stmt) */ /*     return date_makeTime(cx, obj, argc, argv, 3, JS_FALSE, rval); */ 
1364: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 0, JS_FALSE, rval);
1364: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 1, JS_FALSE, rval);
1364: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, -1, JS_FALSE, rval);
1364: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((3)+1), JS_FALSE, rval);
1364: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((3)-1), JS_FALSE, rval);
1371: /* MUTANT (del_stmt) */ /*     return date_makeTime(cx, obj, argc, argv, 4, JS_TRUE, rval); */ 
1371: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 0, JS_TRUE, rval);
1371: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 1, JS_TRUE, rval);
1371: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, -1, JS_TRUE, rval);
1371: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((4)+1), JS_TRUE, rval);
1371: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((4)-1), JS_TRUE, rval);
1378: /* MUTANT (del_stmt) */ /*     return date_makeTime(cx, obj, argc, argv, 4, JS_FALSE, rval); */ 
1378: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 0, JS_FALSE, rval);
1378: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, 1, JS_FALSE, rval);
1378: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, -1, JS_FALSE, rval);
1378: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((4)+1), JS_FALSE, rval);
1378: /* MUTANT (rep_const) */    return date_makeTime(cx, obj, argc, argv, ((4)-1), JS_FALSE, rval);
1385: /* MUTANT (del_stmt) */ /*     uintN i; */ 
1386: /* MUTANT (del_stmt) */ /*     jsdouble lorutime; */  /* local or UTC version of *date */
1387: /* MUTANT (del_stmt) */ /*     jsdouble args[3], *argp, *stop; */ 
1387: /* MUTANT (rep_const) */    jsdouble args[0], *argp, *stop;
1387: /* MUTANT (rep_const) */    jsdouble args[1], *argp, *stop;
1387: /* MUTANT (rep_const) */    jsdouble args[-1], *argp, *stop;
1387: /* MUTANT (rep_const) */    jsdouble args[((3)+1)], *argp, *stop;
1387: /* MUTANT (rep_const) */    jsdouble args[((3)-1)], *argp, *stop;
1388: /* MUTANT (del_stmt) */ /*     jsdouble year, month, day; */ 
1389: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1391: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1392: /* MUTANT (negate) */    if(! (!date))
1395: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1398: /* MUTANT (rep_op) */    if (argc != 0)
1398: /* MUTANT (rep_const) */    if (argc == 1)
1398: /* MUTANT (rep_const) */    if (argc == -1)
1398: /* MUTANT (negate) */    if(! (argc == 0))
1399: /* MUTANT (rep_const) */        argc = 0;   /* should be safe, because length of all setters is 1 */
1399: /* MUTANT (rep_const) */        argc = -1;   /* should be safe, because length of all setters is 1 */
1399: /* MUTANT (rep_const) */        argc = ((1)+1);   /* should be safe, because length of all setters is 1 */
1400: /* MUTANT (rep_op) */    else if (argc <= maxargs)
1400: /* MUTANT (rep_op) */    else if (argc < maxargs)
1400: /* MUTANT (rep_op) */    else if (argc >= maxargs)
1400: /* MUTANT (rep_op) */    else if (argc == maxargs)
1400: /* MUTANT (rep_op) */    else if (argc != maxargs)
1400: /* MUTANT (negate) */    else if(! (argc > maxargs))
1403: /* MUTANT (rep_op) */    for (i = 0; i <= argc; i++) {
1403: /* MUTANT (rep_op) */    for (i = 0; i > argc; i++) {
1403: /* MUTANT (rep_op) */    for (i = 0; i >= argc; i++) {
1403: /* MUTANT (rep_op) */    for (i = 0; i == argc; i++) {
1403: /* MUTANT (rep_op) */    for (i = 0; i != argc; i++) {
1403: /* MUTANT (rep_op) */    for (i = 0; i < argc; i--) {
1403: /* MUTANT (rep_const) */    for (i = 1; i < argc; i++) {
1403: /* MUTANT (rep_const) */    for (i = -1; i < argc; i++) {
1404: /* MUTANT (negate) */        if(! (!js_ValueToNumber(cx, argv[i], &args[i])))
1406: /* MUTANT (negate) */        if(! (!JSDOUBLE_IS_FINITE(args[i]))) {
1407: /* MUTANT (del_stmt) */ /*             *date = *cx->runtime->jsNaN; */ 
1408: /* MUTANT (del_stmt) */ /*             return js_NewNumberValue(cx, *date, rval); */ 
1415: /* MUTANT (negate) */    if(! (!(JSDOUBLE_IS_FINITE(result)))) {
1416: /* MUTANT (rep_op) */        if (argc <= 3)
1416: /* MUTANT (rep_op) */        if (argc > 3)
1416: /* MUTANT (rep_op) */        if (argc >= 3)
1416: /* MUTANT (rep_op) */        if (argc == 3)
1416: /* MUTANT (rep_op) */        if (argc != 3)
1416: /* MUTANT (rep_const) */        if (argc < 0)
1416: /* MUTANT (rep_const) */        if (argc < 1)
1416: /* MUTANT (rep_const) */        if (argc < -1)
1416: /* MUTANT (rep_const) */        if (argc < ((3)+1))
1416: /* MUTANT (rep_const) */        if (argc < ((3)-1))
1416: /* MUTANT (negate) */        if(! (argc < 3))
1419: /* MUTANT (rep_op) */            lorutime = -0.;
1419: /* MUTANT (rep_op) */            lorutime = *0.;
1419: /* MUTANT (rep_op) */            lorutime = %0.;
1421: /* MUTANT (negate) */        if(! (local))
1428: /* MUTANT (del_stmt) */ /*     stop = argp + argc; */ 
1428: /* MUTANT (rep_op) */    stop = argp - argc;
1428: /* MUTANT (rep_op) */    stop = argp * argc;
1428: /* MUTANT (rep_op) */    stop = argp % argc;
1429: /* MUTANT (rep_op) */    if (maxargs <= 3 && argp < stop)
1429: /* MUTANT (rep_op) */    if (maxargs < 3 && argp < stop)
1429: /* MUTANT (rep_op) */    if (maxargs > 3 && argp < stop)
1429: /* MUTANT (rep_op) */    if (maxargs == 3 && argp < stop)
1429: /* MUTANT (rep_op) */    if (maxargs != 3 && argp < stop)
1429: /* MUTANT (rep_op) */    if (maxargs >= 3 || argp < stop)
1429: /* MUTANT (rep_op) */    if (maxargs >= 3 && argp <= stop)
1429: /* MUTANT (rep_op) */    if (maxargs >= 3 && argp > stop)
1429: /* MUTANT (rep_op) */    if (maxargs >= 3 && argp >= stop)
1429: /* MUTANT (rep_op) */    if (maxargs >= 3 && argp == stop)
1429: /* MUTANT (rep_op) */    if (maxargs >= 3 && argp != stop)
1429: /* MUTANT (rep_const) */    if (maxargs >= 0 && argp < stop)
1429: /* MUTANT (rep_const) */    if (maxargs >= 1 && argp < stop)
1429: /* MUTANT (rep_const) */    if (maxargs >= -1 && argp < stop)
1429: /* MUTANT (rep_const) */    if (maxargs >= ((3)+1) && argp < stop)
1429: /* MUTANT (rep_const) */    if (maxargs >= ((3)-1) && argp < stop)
1429: /* MUTANT (negate) */    if(! (maxargs >= 3 && argp < stop))
1430: /* MUTANT (rep_op) */        year = *argp--;
1434: /* MUTANT (rep_op) */    if (maxargs <= 2 && argp < stop)
1434: /* MUTANT (rep_op) */    if (maxargs < 2 && argp < stop)
1434: /* MUTANT (rep_op) */    if (maxargs > 2 && argp < stop)
1434: /* MUTANT (rep_op) */    if (maxargs == 2 && argp < stop)
1434: /* MUTANT (rep_op) */    if (maxargs != 2 && argp < stop)
1434: /* MUTANT (rep_op) */    if (maxargs >= 2 || argp < stop)
1434: /* MUTANT (rep_op) */    if (maxargs >= 2 && argp <= stop)
1434: /* MUTANT (rep_op) */    if (maxargs >= 2 && argp > stop)
1434: /* MUTANT (rep_op) */    if (maxargs >= 2 && argp >= stop)
1434: /* MUTANT (rep_op) */    if (maxargs >= 2 && argp == stop)
1434: /* MUTANT (rep_op) */    if (maxargs >= 2 && argp != stop)
1434: /* MUTANT (rep_const) */    if (maxargs >= 0 && argp < stop)
1434: /* MUTANT (rep_const) */    if (maxargs >= 1 && argp < stop)
1434: /* MUTANT (rep_const) */    if (maxargs >= -1 && argp < stop)
1434: /* MUTANT (rep_const) */    if (maxargs >= ((2)+1) && argp < stop)
1434: /* MUTANT (rep_const) */    if (maxargs >= ((2)-1) && argp < stop)
1434: /* MUTANT (negate) */    if(! (maxargs >= 2 && argp < stop))
1435: /* MUTANT (rep_op) */        month = *argp--;
1439: /* MUTANT (rep_op) */    if (maxargs <= 1 && argp < stop)
1439: /* MUTANT (rep_op) */    if (maxargs < 1 && argp < stop)
1439: /* MUTANT (rep_op) */    if (maxargs > 1 && argp < stop)
1439: /* MUTANT (rep_op) */    if (maxargs == 1 && argp < stop)
1439: /* MUTANT (rep_op) */    if (maxargs != 1 && argp < stop)
1439: /* MUTANT (rep_op) */    if (maxargs >= 1 || argp < stop)
1439: /* MUTANT (rep_op) */    if (maxargs >= 1 && argp <= stop)
1439: /* MUTANT (rep_op) */    if (maxargs >= 1 && argp > stop)
1439: /* MUTANT (rep_op) */    if (maxargs >= 1 && argp >= stop)
1439: /* MUTANT (rep_op) */    if (maxargs >= 1 && argp == stop)
1439: /* MUTANT (rep_op) */    if (maxargs >= 1 && argp != stop)
1439: /* MUTANT (rep_const) */    if (maxargs >= 0 && argp < stop)
1439: /* MUTANT (rep_const) */    if (maxargs >= -1 && argp < stop)
1439: /* MUTANT (rep_const) */    if (maxargs >= ((1)+1) && argp < stop)
1439: /* MUTANT (negate) */    if(! (maxargs >= 1 && argp < stop))
1440: /* MUTANT (rep_op) */        day = *argp--;
1444: /* MUTANT (del_stmt) */ /*     day = MakeDay(year, month, day); */  /* day within year */
1445: /* MUTANT (del_stmt) */ /*     result = MakeDate(day, TimeWithinDay(lorutime)); */ 
1447: /* MUTANT (negate) */    if(! (local))
1450: /* MUTANT (del_stmt) */ /*     *date = TIMECLIP(result); */ 
1451: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, *date, rval); */ 
1458: /* MUTANT (del_stmt) */ /*     return date_makeDate(cx, obj, argc, argv, 1, JS_TRUE, rval); */ 
1458: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, 0, JS_TRUE, rval);
1458: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, -1, JS_TRUE, rval);
1458: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, ((1)+1), JS_TRUE, rval);
1465: /* MUTANT (del_stmt) */ /*     return date_makeDate(cx, obj, argc, argv, 1, JS_FALSE, rval); */ 
1465: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, 0, JS_FALSE, rval);
1465: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, -1, JS_FALSE, rval);
1465: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, ((1)+1), JS_FALSE, rval);
1472: /* MUTANT (del_stmt) */ /*     return date_makeDate(cx, obj, argc, argv, 2, JS_TRUE, rval); */ 
1472: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, 0, JS_TRUE, rval);
1472: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, 1, JS_TRUE, rval);
1472: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, -1, JS_TRUE, rval);
1472: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, ((2)+1), JS_TRUE, rval);
1472: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, ((2)-1), JS_TRUE, rval);
1479: /* MUTANT (del_stmt) */ /*     return date_makeDate(cx, obj, argc, argv, 2, JS_FALSE, rval); */ 
1479: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, 0, JS_FALSE, rval);
1479: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, 1, JS_FALSE, rval);
1479: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, -1, JS_FALSE, rval);
1479: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, ((2)+1), JS_FALSE, rval);
1479: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, ((2)-1), JS_FALSE, rval);
1486: /* MUTANT (del_stmt) */ /*     return date_makeDate(cx, obj, argc, argv, 3, JS_TRUE, rval); */ 
1486: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, 0, JS_TRUE, rval);
1486: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, 1, JS_TRUE, rval);
1486: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, -1, JS_TRUE, rval);
1486: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, ((3)+1), JS_TRUE, rval);
1486: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, ((3)-1), JS_TRUE, rval);
1493: /* MUTANT (del_stmt) */ /*     return date_makeDate(cx, obj, argc, argv, 3, JS_FALSE, rval); */ 
1493: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, 0, JS_FALSE, rval);
1493: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, 1, JS_FALSE, rval);
1493: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, -1, JS_FALSE, rval);
1493: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, ((3)+1), JS_FALSE, rval);
1493: /* MUTANT (rep_const) */    return date_makeDate(cx, obj, argc, argv, ((3)-1), JS_FALSE, rval);
1500: /* MUTANT (del_stmt) */ /*     jsdouble t; */ 
1501: /* MUTANT (del_stmt) */ /*     jsdouble year; */ 
1502: /* MUTANT (del_stmt) */ /*     jsdouble day; */ 
1503: /* MUTANT (del_stmt) */ /*     jsdouble result; */ 
1505: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1506: /* MUTANT (negate) */    if(! (!date))
1509: /* MUTANT (del_stmt) */ /*     result = *date; */ 
1511: /* MUTANT (rep_const) */    if (!js_ValueToNumber(cx, argv[1], &year))
1511: /* MUTANT (rep_const) */    if (!js_ValueToNumber(cx, argv[-1], &year))
1511: /* MUTANT (negate) */    if(! (!js_ValueToNumber(cx, argv[0], &year)))
1513: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(year))) {
1514: /* MUTANT (del_stmt) */ /*         *date = *cx->runtime->jsNaN; */ 
1515: /* MUTANT (del_stmt) */ /*         return js_NewNumberValue(cx, *date, rval); */ 
1520: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(result))) {
1521: /* MUTANT (del_stmt) */ /*         t = +0.0; */ 
1521: /* MUTANT (rep_op) */        t = -0.0;
1521: /* MUTANT (rep_op) */        t = *0.0;
1521: /* MUTANT (rep_op) */        t = %0.0;
1521: /* MUTANT (rep_const) */        t = +0.1;
1521: /* MUTANT (rep_const) */        t = +0.-1;
1523: /* MUTANT (del_stmt) */ /*         t = LocalTime(result); */ 
1526: /* MUTANT (rep_op) */    if (year <= 0 && year <= 99)
1526: /* MUTANT (rep_op) */    if (year < 0 && year <= 99)
1526: /* MUTANT (rep_op) */    if (year > 0 && year <= 99)
1526: /* MUTANT (rep_op) */    if (year == 0 && year <= 99)
1526: /* MUTANT (rep_op) */    if (year != 0 && year <= 99)
1526: /* MUTANT (rep_op) */    if (year >= 0 || year <= 99)
1526: /* MUTANT (rep_op) */    if (year >= 0 && year < 99)
1526: /* MUTANT (rep_op) */    if (year >= 0 && year > 99)
1526: /* MUTANT (rep_op) */    if (year >= 0 && year >= 99)
1526: /* MUTANT (rep_op) */    if (year >= 0 && year == 99)
1526: /* MUTANT (rep_op) */    if (year >= 0 && year != 99)
1526: /* MUTANT (rep_const) */    if (year >= 1 && year <= 99)
1526: /* MUTANT (rep_const) */    if (year >= -1 && year <= 99)
1526: /* MUTANT (rep_const) */    if (year >= 0 && year <= 0)
1526: /* MUTANT (rep_const) */    if (year >= 0 && year <= 1)
1526: /* MUTANT (rep_const) */    if (year >= 0 && year <= -1)
1526: /* MUTANT (rep_const) */    if (year >= 0 && year <= ((99)+1))
1526: /* MUTANT (rep_const) */    if (year >= 0 && year <= ((99)-1))
1526: /* MUTANT (negate) */    if(! (year >= 0 && year <= 99))
1527: /* MUTANT (rep_op) */        year -= 1900;
1527: /* MUTANT (rep_op) */        year *= 1900;
1527: /* MUTANT (rep_op) */        year %= 1900;
1527: /* MUTANT (rep_const) */        year += 0;
1527: /* MUTANT (rep_const) */        year += 1;
1527: /* MUTANT (rep_const) */        year += -1;
1527: /* MUTANT (rep_const) */        year += ((1900)+1);
1527: /* MUTANT (rep_const) */        year += ((1900)-1);
1529: /* MUTANT (del_stmt) */ /*     day = MakeDay(year, MonthFromTime(t), DateFromTime(t)); */ 
1530: /* MUTANT (del_stmt) */ /*     result = MakeDate(day, TimeWithinDay(t)); */ 
1531: /* MUTANT (del_stmt) */ /*     result = UTC(result); */ 
1533: /* MUTANT (del_stmt) */ /*     *date = TIMECLIP(result); */ 
1534: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, *date, rval); */ 
1552: /* MUTANT (del_stmt) */ /*     char buf[100]; */ 
1552: /* MUTANT (rep_const) */    char buf[0];
1552: /* MUTANT (rep_const) */    char buf[1];
1552: /* MUTANT (rep_const) */    char buf[-1];
1552: /* MUTANT (rep_const) */    char buf[((100)+1)];
1552: /* MUTANT (rep_const) */    char buf[((100)-1)];
1553: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
1554: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1555: /* MUTANT (negate) */    if(! (!date))
1558: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(*date))) {
1559: /* MUTANT (del_stmt) */ /*         JS_snprintf(buf, sizeof buf, js_NaN_date_str); */ 
1561: /* MUTANT (del_stmt) */ /*         jsdouble temp = *date; */ 
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.0d %s %.4d %.2d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.1d %s %.4d %.2d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.-1d %s %.4d %.2d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.((2)+1)d %s %.4d %.2d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.((2)-1)d %s %.4d %.2d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.0d %.2d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.1d %.2d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.-1d %.2d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.((4)+1)d %.2d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.((4)-1)d %.2d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.0d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.1d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.-1d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.((2)+1)d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.((2)-1)d:%.2d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.2d:%.0d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.2d:%.1d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.2d:%.-1d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.2d:%.((2)+1)d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.2d:%.((2)-1)d:%.2d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.2d:%.2d:%.0d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.2d:%.2d:%.1d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.2d:%.2d:%.-1d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.2d:%.2d:%.((2)+1)d GMT",
1566: /* MUTANT (rep_const) */        JS_snprintf(buf, sizeof buf, "%s, %.2d %s %.4d %.2d:%.2d:%.((2)-1)d GMT",
1576: /* MUTANT (negate) */    if(! (!str))
1578: /* MUTANT (del_stmt) */ /*     *rval = STRING_TO_JSVAL(str); */ 
1579: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1589: /* MUTANT (del_stmt) */ /*     jsint year = YearFromTime(timeval); */ 
1590: /* MUTANT (del_stmt) */ /*     int16 adjustedYear; */ 
1593: /* MUTANT (rep_op) */    if (year <= 32767 || year < -32768) {
1593: /* MUTANT (rep_op) */    if (year < 32767 || year < -32768) {
1593: /* MUTANT (rep_op) */    if (year >= 32767 || year < -32768) {
1593: /* MUTANT (rep_op) */    if (year == 32767 || year < -32768) {
1593: /* MUTANT (rep_op) */    if (year != 32767 || year < -32768) {
1593: /* MUTANT (rep_op) */    if (year > 32767 && year < -32768) {
1593: /* MUTANT (rep_op) */    if (year > 32767 || year <= -32768) {
1593: /* MUTANT (rep_op) */    if (year > 32767 || year > -32768) {
1593: /* MUTANT (rep_op) */    if (year > 32767 || year >= -32768) {
1593: /* MUTANT (rep_op) */    if (year > 32767 || year == -32768) {
1593: /* MUTANT (rep_op) */    if (year > 32767 || year != -32768) {
1593: /* MUTANT (rep_const) */    if (year > 0 || year < -32768) {
1593: /* MUTANT (rep_const) */    if (year > 1 || year < -32768) {
1593: /* MUTANT (rep_const) */    if (year > -1 || year < -32768) {
1593: /* MUTANT (rep_const) */    if (year > ((32767)+1) || year < -32768) {
1593: /* MUTANT (rep_const) */    if (year > ((32767)-1) || year < -32768) {
1593: /* MUTANT (rep_const) */    if (year > 32767 || year < 0) {
1593: /* MUTANT (rep_const) */    if (year > 32767 || year < 1) {
1593: /* MUTANT (rep_const) */    if (year > 32767 || year < -1) {
1593: /* MUTANT (rep_const) */    if (year > 32767 || year < ((-32768)+1)) {
1593: /* MUTANT (rep_const) */    if (year > 32767 || year < ((-32768)-1)) {
1593: /* MUTANT (negate) */    if(! (year > 32767 || year < -32768)) {
1594: /* MUTANT (negate) */        if(! (findEquivalent)) {
1599: /* MUTANT (del_stmt) */ /*             jsint cycles; */ 
1600: #define CYCLE_YEARS 0L /* MUTANT (rep_const) */
1600: #define CYCLE_YEARS 1L /* MUTANT (rep_const) */
1600: #define CYCLE_YEARS -1L /* MUTANT (rep_const) */
1600: #define CYCLE_YEARS ((2800)+1)L /* MUTANT (rep_const) */
1600: #define CYCLE_YEARS ((2800)-1)L /* MUTANT (rep_const) */
1601: /* MUTANT (rep_op) */            cycles = (year <= 0) ? year / CYCLE_YEARS
1601: /* MUTANT (rep_op) */            cycles = (year < 0) ? year / CYCLE_YEARS
1601: /* MUTANT (rep_op) */            cycles = (year > 0) ? year / CYCLE_YEARS
1601: /* MUTANT (rep_op) */            cycles = (year == 0) ? year / CYCLE_YEARS
1601: /* MUTANT (rep_op) */            cycles = (year != 0) ? year / CYCLE_YEARS
1601: /* MUTANT (rep_const) */            cycles = (year >= 1) ? year / CYCLE_YEARS
1601: /* MUTANT (rep_const) */            cycles = (year >= -1) ? year / CYCLE_YEARS
1602: /* MUTANT (rep_const) */                                 : 0 - (-1 - year) / CYCLE_YEARS;
1602: /* MUTANT (rep_const) */                                 : 1 - (-1 - year) / CYCLE_YEARS;
1602: /* MUTANT (rep_const) */                                 : ((-1)+1) - (-1 - year) / CYCLE_YEARS;
1602: /* MUTANT (rep_const) */                                 : ((-1)-1) - (-1 - year) / CYCLE_YEARS;
1602: /* MUTANT (rep_const) */                                 : -1 - (0 - year) / CYCLE_YEARS;
1602: /* MUTANT (rep_const) */                                 : -1 - (1 - year) / CYCLE_YEARS;
1602: /* MUTANT (rep_const) */                                 : -1 - (((-1)+1) - year) / CYCLE_YEARS;
1602: /* MUTANT (rep_const) */                                 : -1 - (((-1)-1) - year) / CYCLE_YEARS;
1603: /* MUTANT (del_stmt) */ /*             adjustedYear = (int16)(year - cycles * CYCLE_YEARS); */ 
1606: /* MUTANT (del_stmt) */ /*             adjustedYear = (int16)((year > 0) ? 32767 : - 32768); */ 
1606: /* MUTANT (rep_op) */            adjustedYear = (int16)((year <= 0) ? 32767 : - 32768);
1606: /* MUTANT (rep_op) */            adjustedYear = (int16)((year < 0) ? 32767 : - 32768);
1606: /* MUTANT (rep_op) */            adjustedYear = (int16)((year >= 0) ? 32767 : - 32768);
1606: /* MUTANT (rep_op) */            adjustedYear = (int16)((year == 0) ? 32767 : - 32768);
1606: /* MUTANT (rep_op) */            adjustedYear = (int16)((year != 0) ? 32767 : - 32768);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 1) ? 32767 : - 32768);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > -1) ? 32767 : - 32768);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 0) ? 0 : - 32768);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 0) ? 1 : - 32768);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 0) ? -1 : - 32768);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 0) ? ((32767)+1) : - 32768);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 0) ? ((32767)-1) : - 32768);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 0) ? 32767 : - 0);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 0) ? 32767 : - 1);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 0) ? 32767 : - -1);
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 0) ? 32767 : - ((32768)+1));
1606: /* MUTANT (rep_const) */            adjustedYear = (int16)((year > 0) ? 32767 : - ((32768)-1));
1609: /* MUTANT (del_stmt) */ /*         adjustedYear = (int16)year; */ 
1612: /* MUTANT (rep_const) */    split->tm_usec = (int32) msFromTime(timeval) * 0;
1612: /* MUTANT (rep_const) */    split->tm_usec = (int32) msFromTime(timeval) * 1;
1612: /* MUTANT (rep_const) */    split->tm_usec = (int32) msFromTime(timeval) * -1;
1612: /* MUTANT (rep_const) */    split->tm_usec = (int32) msFromTime(timeval) * ((1000)+1);
1612: /* MUTANT (rep_const) */    split->tm_usec = (int32) msFromTime(timeval) * ((1000)-1);
1613: /* MUTANT (del_stmt) */ /*     split->tm_sec = (int8) SecFromTime(timeval); */ 
1614: /* MUTANT (del_stmt) */ /*     split->tm_min = (int8) MinFromTime(timeval); */ 
1615: /* MUTANT (del_stmt) */ /*     split->tm_hour = (int8) HourFromTime(timeval); */ 
1616: /* MUTANT (del_stmt) */ /*     split->tm_mday = (int8) DateFromTime(timeval); */ 
1617: /* MUTANT (del_stmt) */ /*     split->tm_mon = (int8) MonthFromTime(timeval); */ 
1618: /* MUTANT (del_stmt) */ /*     split->tm_wday = (int8) WeekDay(timeval); */ 
1619: /* MUTANT (del_stmt) */ /*     split->tm_year = (int16) adjustedYear; */ 
1620: /* MUTANT (del_stmt) */ /*     split->tm_yday = (int16) DayWithinYear(timeval, year); */ 
1624: /* MUTANT (del_stmt) */ /*     split->tm_isdst = (DaylightSavingTA(timeval) != 0); */ 
1624: /* MUTANT (rep_op) */    split->tm_isdst = (DaylightSavingTA(timeval) == 0);
1624: /* MUTANT (rep_const) */    split->tm_isdst = (DaylightSavingTA(timeval) != 1);
1624: /* MUTANT (rep_const) */    split->tm_isdst = (DaylightSavingTA(timeval) != -1);
1635: /* MUTANT (del_stmt) */ /*     char buf[100]; */ 
1635: /* MUTANT (rep_const) */    char buf[0];
1635: /* MUTANT (rep_const) */    char buf[1];
1635: /* MUTANT (rep_const) */    char buf[-1];
1635: /* MUTANT (rep_const) */    char buf[((100)+1)];
1635: /* MUTANT (rep_const) */    char buf[((100)-1)];
1636: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
1637: /* MUTANT (del_stmt) */ /*     char tzbuf[100]; */ 
1637: /* MUTANT (rep_const) */    char tzbuf[0];
1637: /* MUTANT (rep_const) */    char tzbuf[1];
1637: /* MUTANT (rep_const) */    char tzbuf[-1];
1637: /* MUTANT (rep_const) */    char tzbuf[((100)+1)];
1637: /* MUTANT (rep_const) */    char tzbuf[((100)-1)];
1638: /* MUTANT (del_stmt) */ /*     JSBool usetz; */ 
1639: /* MUTANT (del_stmt) */ /*     size_t i, tzlen; */ 
1640: /* MUTANT (del_stmt) */ /*     PRMJTime split; */ 
1642: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(date))) {
1643: /* MUTANT (del_stmt) */ /*         JS_snprintf(buf, sizeof buf, js_NaN_date_str); */ 
1645: /* MUTANT (del_stmt) */ /*         jsdouble local = LocalTime(date); */ 
1649: /* MUTANT (del_stmt) */ /*         jsint minutes = (jsint) floor(AdjustTime(date) / msPerMinute); */ 
1652: /* MUTANT (del_stmt) */ /*         intN offset = (minutes / 60) * 100 + minutes % 60; */ 
1652: /* MUTANT (rep_op) */        intN offset = (minutes / 60) * 100 - minutes % 60;
1652: /* MUTANT (rep_op) */        intN offset = (minutes / 60) * 100 * minutes % 60;
1652: /* MUTANT (rep_op) */        intN offset = (minutes / 60) * 100 % minutes % 60;
1652: /* MUTANT (rep_op) */        intN offset = (minutes / 60) * 100 + minutes + 60;
1652: /* MUTANT (rep_op) */        intN offset = (minutes / 60) * 100 + minutes - 60;
1652: /* MUTANT (rep_op) */        intN offset = (minutes / 60) * 100 + minutes * 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 0) * 100 + minutes % 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 1) * 100 + minutes % 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / -1) * 100 + minutes % 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / ((60)+1)) * 100 + minutes % 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / ((60)-1)) * 100 + minutes % 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 60) * 0 + minutes % 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 60) * 1 + minutes % 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 60) * -1 + minutes % 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 60) * ((100)+1) + minutes % 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 60) * ((100)-1) + minutes % 60;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 60) * 100 + minutes % 0;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 60) * 100 + minutes % 1;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 60) * 100 + minutes % -1;
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 60) * 100 + minutes % ((60)+1);
1652: /* MUTANT (rep_const) */        intN offset = (minutes / 60) * 100 + minutes % ((60)-1);
1665: /* MUTANT (del_stmt) */ /*         new_explode(date, &split, JS_TRUE); */ 
1666: /* MUTANT (rep_op) */        if (PRMJ_FormatTime(tzbuf, sizeof tzbuf, "(%Z)", &split) == 0) {
1666: /* MUTANT (rep_const) */        if (PRMJ_FormatTime(tzbuf, sizeof tzbuf, "(%Z)", &split) != 1) {
1666: /* MUTANT (rep_const) */        if (PRMJ_FormatTime(tzbuf, sizeof tzbuf, "(%Z)", &split) != -1) {
1666: /* MUTANT (negate) */        if(! (PRMJ_FormatTime(tzbuf, sizeof tzbuf, "(%Z)", &split) != 0)) {
1674: /* MUTANT (del_stmt) */ /*             usetz = JS_TRUE; */ 
1675: /* MUTANT (del_stmt) */ /*             tzlen = strlen(tzbuf); */ 
1676: /* MUTANT (rep_op) */            if (tzlen <= 100) {
1676: /* MUTANT (rep_op) */            if (tzlen < 100) {
1676: /* MUTANT (rep_op) */            if (tzlen >= 100) {
1676: /* MUTANT (rep_op) */            if (tzlen == 100) {
1676: /* MUTANT (rep_op) */            if (tzlen != 100) {
1676: /* MUTANT (rep_const) */            if (tzlen > 0) {
1676: /* MUTANT (rep_const) */            if (tzlen > 1) {
1676: /* MUTANT (rep_const) */            if (tzlen > -1) {
1676: /* MUTANT (rep_const) */            if (tzlen > ((100)+1)) {
1676: /* MUTANT (rep_const) */            if (tzlen > ((100)-1)) {
1676: /* MUTANT (negate) */            if(! (tzlen > 100)) {
1677: /* MUTANT (del_stmt) */ /*                 usetz = JS_FALSE; */ 
1679: /* MUTANT (rep_op) */                for (i = 0; i <= tzlen; i++) {
1679: /* MUTANT (rep_op) */                for (i = 0; i > tzlen; i++) {
1679: /* MUTANT (rep_op) */                for (i = 0; i >= tzlen; i++) {
1679: /* MUTANT (rep_op) */                for (i = 0; i == tzlen; i++) {
1679: /* MUTANT (rep_op) */                for (i = 0; i != tzlen; i++) {
1679: /* MUTANT (rep_op) */                for (i = 0; i < tzlen; i--) {
1679: /* MUTANT (rep_const) */                for (i = 1; i < tzlen; i++) {
1679: /* MUTANT (rep_const) */                for (i = -1; i < tzlen; i++) {
1680: /* MUTANT (del_stmt) */ /*                     jschar c = tzbuf[i]; */ 
1681: /* MUTANT (rep_op) */                    if (c <= 127 ||
1681: /* MUTANT (rep_op) */                    if (c < 127 ||
1681: /* MUTANT (rep_op) */                    if (c >= 127 ||
1681: /* MUTANT (rep_op) */                    if (c == 127 ||
1681: /* MUTANT (rep_op) */                    if (c != 127 ||
1681: /* MUTANT (rep_op) */                    if (c > 127 &&
1681: /* MUTANT (rep_const) */                    if (c > 0 ||
1681: /* MUTANT (rep_const) */                    if (c > 1 ||
1681: /* MUTANT (rep_const) */                    if (c > -1 ||
1681: /* MUTANT (rep_const) */                    if (c > ((127)+1) ||
1681: /* MUTANT (rep_const) */                    if (c > ((127)-1) ||
1682: /* MUTANT (rep_op) */                        !(isalpha(c) && isdigit(c) ||
1682: /* MUTANT (rep_op) */                        !(isalpha(c) || isdigit(c) &&
1683: /* MUTANT (rep_op) */                          c != ' ' || c == '(' || c == ')')) {
1683: /* MUTANT (rep_op) */                          c == ' ' && c == '(' || c == ')')) {
1683: /* MUTANT (rep_op) */                          c == ' ' || c != '(' || c == ')')) {
1683: /* MUTANT (rep_op) */                          c == ' ' || c == '(' && c == ')')) {
1683: /* MUTANT (rep_op) */                          c == ' ' || c == '(' || c != ')')) {
1684: /* MUTANT (del_stmt) */ /*                         usetz = JS_FALSE; */ 
1690: /* MUTANT (rep_op) */            if (tzbuf[0] == '(' || tzbuf[1] == ')')
1690: /* MUTANT (rep_op) */            if (tzbuf[0] != '(' && tzbuf[1] == ')')
1690: /* MUTANT (rep_op) */            if (tzbuf[0] != '(' || tzbuf[1] != ')')
1690: /* MUTANT (rep_const) */            if (tzbuf[1] != '(' || tzbuf[1] == ')')
1690: /* MUTANT (rep_const) */            if (tzbuf[-1] != '(' || tzbuf[1] == ')')
1690: /* MUTANT (rep_const) */            if (tzbuf[0] != '(' || tzbuf[0] == ')')
1690: /* MUTANT (rep_const) */            if (tzbuf[0] != '(' || tzbuf[-1] == ')')
1690: /* MUTANT (rep_const) */            if (tzbuf[0] != '(' || tzbuf[((1)+1)] == ')')
1690: /* MUTANT (negate) */            if(! (tzbuf[0] != '(' || tzbuf[1] == ')'))
1703: /* MUTANT (rep_const) */                        "%s %s %.0d %.4d %.2d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.1d %.4d %.2d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.-1d %.4d %.2d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.((2)+1)d %.4d %.2d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.((2)-1)d %.4d %.2d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.0d %.2d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.1d %.2d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.-1d %.2d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.((4)+1)d %.2d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.((4)-1)d %.2d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.0d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.1d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.-1d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.((2)+1)d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.((2)-1)d:%.2d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.0d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.1d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.-1d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.((2)+1)d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.((2)-1)d:%.2d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.2d:%.0d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.2d:%.1d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.2d:%.-1d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.2d:%.((2)+1)d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.2d:%.((2)-1)d GMT%+.4d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.2d:%.2d GMT%+.0d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.2d:%.2d GMT%+.1d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.2d:%.2d GMT%+.-1d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.2d:%.2d GMT%+.((4)+1)d%s%s",
1703: /* MUTANT (rep_const) */                        "%s %s %.2d %.4d %.2d:%.2d:%.2d GMT%+.((4)-1)d%s%s",
1714: /* MUTANT (del_stmt) */ /*             break; */ 
1718: /* MUTANT (rep_const) */                        "%s %s %.0d %.4d",
1718: /* MUTANT (rep_const) */                        "%s %s %.1d %.4d",
1718: /* MUTANT (rep_const) */                        "%s %s %.-1d %.4d",
1718: /* MUTANT (rep_const) */                        "%s %s %.((2)+1)d %.4d",
1718: /* MUTANT (rep_const) */                        "%s %s %.((2)-1)d %.4d",
1718: /* MUTANT (rep_const) */                        "%s %s %.2d %.0d",
1718: /* MUTANT (rep_const) */                        "%s %s %.2d %.1d",
1718: /* MUTANT (rep_const) */                        "%s %s %.2d %.-1d",
1718: /* MUTANT (rep_const) */                        "%s %s %.2d %.((4)+1)d",
1718: /* MUTANT (rep_const) */                        "%s %s %.2d %.((4)-1)d",
1723: /* MUTANT (del_stmt) */ /*             break; */ 
1727: /* MUTANT (rep_const) */                        "%.0d:%.2d:%.2d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.1d:%.2d:%.2d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.-1d:%.2d:%.2d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.((2)+1)d:%.2d:%.2d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.((2)-1)d:%.2d:%.2d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.0d:%.2d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.1d:%.2d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.-1d:%.2d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.((2)+1)d:%.2d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.((2)-1)d:%.2d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.2d:%.0d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.2d:%.1d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.2d:%.-1d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.2d:%.((2)+1)d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.2d:%.((2)-1)d GMT%+.4d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.2d:%.2d GMT%+.0d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.2d:%.2d GMT%+.1d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.2d:%.2d GMT%+.-1d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.2d:%.2d GMT%+.((4)+1)d%s%s",
1727: /* MUTANT (rep_const) */                        "%.2d:%.2d:%.2d GMT%+.((4)-1)d%s%s",
1734: /* MUTANT (del_stmt) */ /*             break; */ 
1739: /* MUTANT (negate) */    if(! (!str))
1741: /* MUTANT (del_stmt) */ /*     *rval = STRING_TO_JSVAL(str); */ 
1742: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1749: /* MUTANT (del_stmt) */ /*     char buf[100]; */ 
1749: /* MUTANT (rep_const) */    char buf[0];
1749: /* MUTANT (rep_const) */    char buf[1];
1749: /* MUTANT (rep_const) */    char buf[-1];
1749: /* MUTANT (rep_const) */    char buf[((100)+1)];
1749: /* MUTANT (rep_const) */    char buf[((100)-1)];
1750: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
1751: /* MUTANT (del_stmt) */ /*     PRMJTime split; */ 
1752: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1753: /* MUTANT (negate) */    if(! (!date))
1756: /* MUTANT (negate) */    if(! (!JSDOUBLE_IS_FINITE(*date))) {
1757: /* MUTANT (del_stmt) */ /*         JS_snprintf(buf, sizeof buf, js_NaN_date_str); */ 
1759: /* MUTANT (del_stmt) */ /*         intN result_len; */ 
1760: /* MUTANT (del_stmt) */ /*         jsdouble local = LocalTime(*date); */ 
1761: /* MUTANT (del_stmt) */ /*         new_explode(local, &split, JS_FALSE); */ 
1764: /* MUTANT (del_stmt) */ /*         result_len = PRMJ_FormatTime(buf, sizeof buf, format, &split); */ 
1767: /* MUTANT (rep_op) */        if (result_len != 0)
1767: /* MUTANT (rep_const) */        if (result_len == 1)
1767: /* MUTANT (rep_const) */        if (result_len == -1)
1767: /* MUTANT (negate) */        if(! (result_len == 0))
1771: /* MUTANT (rep_op) */        if (buf[result_len - 3] != '/' &&
1771: /* MUTANT (rep_op) */        if (buf[result_len - 3] == '/' ||
1771: /* MUTANT (rep_const) */        if (buf[result_len - 0] == '/' &&
1771: /* MUTANT (rep_const) */        if (buf[result_len - 1] == '/' &&
1771: /* MUTANT (rep_const) */        if (buf[result_len - -1] == '/' &&
1771: /* MUTANT (rep_const) */        if (buf[result_len - ((3)+1)] == '/' &&
1771: /* MUTANT (rep_const) */        if (buf[result_len - ((3)-1)] == '/' &&
1772: /* MUTANT (rep_op) */            isdigit(buf[result_len - 2]) || isdigit(buf[result_len - 1])) {
1772: /* MUTANT (rep_const) */            isdigit(buf[result_len - 0]) && isdigit(buf[result_len - 1])) {
1772: /* MUTANT (rep_const) */            isdigit(buf[result_len - 1]) && isdigit(buf[result_len - 1])) {
1772: /* MUTANT (rep_const) */            isdigit(buf[result_len - -1]) && isdigit(buf[result_len - 1])) {
1772: /* MUTANT (rep_const) */            isdigit(buf[result_len - ((2)+1)]) && isdigit(buf[result_len - 1])) {
1772: /* MUTANT (rep_const) */            isdigit(buf[result_len - ((2)-1)]) && isdigit(buf[result_len - 1])) {
1772: /* MUTANT (rep_const) */            isdigit(buf[result_len - 2]) && isdigit(buf[result_len - 0])) {
1772: /* MUTANT (rep_const) */            isdigit(buf[result_len - 2]) && isdigit(buf[result_len - -1])) {
1772: /* MUTANT (rep_const) */            isdigit(buf[result_len - 2]) && isdigit(buf[result_len - ((1)+1)])) {
1773: /* MUTANT (rep_op) */            JS_snprintf(buf - (result_len - 2), (sizeof buf) - (result_len - 2),
1773: /* MUTANT (rep_op) */            JS_snprintf(buf * (result_len - 2), (sizeof buf) - (result_len - 2),
1773: /* MUTANT (rep_op) */            JS_snprintf(buf % (result_len - 2), (sizeof buf) - (result_len - 2),
1773: /* MUTANT (rep_const) */            JS_snprintf(buf + (result_len - 0), (sizeof buf) - (result_len - 2),
1773: /* MUTANT (rep_const) */            JS_snprintf(buf + (result_len - 1), (sizeof buf) - (result_len - 2),
1773: /* MUTANT (rep_const) */            JS_snprintf(buf + (result_len - -1), (sizeof buf) - (result_len - 2),
1773: /* MUTANT (rep_const) */            JS_snprintf(buf + (result_len - ((2)+1)), (sizeof buf) - (result_len - 2),
1773: /* MUTANT (rep_const) */            JS_snprintf(buf + (result_len - ((2)-1)), (sizeof buf) - (result_len - 2),
1773: /* MUTANT (rep_const) */            JS_snprintf(buf + (result_len - 2), (sizeof buf) - (result_len - 0),
1773: /* MUTANT (rep_const) */            JS_snprintf(buf + (result_len - 2), (sizeof buf) - (result_len - 1),
1773: /* MUTANT (rep_const) */            JS_snprintf(buf + (result_len - 2), (sizeof buf) - (result_len - -1),
1773: /* MUTANT (rep_const) */            JS_snprintf(buf + (result_len - 2), (sizeof buf) - (result_len - ((2)+1)),
1773: /* MUTANT (rep_const) */            JS_snprintf(buf + (result_len - 2), (sizeof buf) - (result_len - ((2)-1)),
1779: /* MUTANT (rep_op) */    if (cx->localeCallbacks || cx->localeCallbacks->localeToUnicode)
1779: /* MUTANT (negate) */    if(! (cx->localeCallbacks && cx->localeCallbacks->localeToUnicode))
1782: /* MUTANT (del_stmt) */ /*     str = JS_NewStringCopyZ(cx, buf); */ 
1783: /* MUTANT (negate) */    if(! (!str))
1785: /* MUTANT (del_stmt) */ /*     *rval = STRING_TO_JSVAL(str); */ 
1786: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1827: /* MUTANT (del_stmt) */ /*     return date_toLocaleHelper(cx, obj, argc, argv, rval, "%X"); */ 
1834: /* MUTANT (del_stmt) */ /*     JSString *fmt; */ 
1836: /* MUTANT (rep_op) */    if (argc != 0)
1836: /* MUTANT (rep_const) */    if (argc == 1)
1836: /* MUTANT (rep_const) */    if (argc == -1)
1836: /* MUTANT (negate) */    if(! (argc == 0))
1839: /* MUTANT (del_stmt) */ /*     fmt = JS_ValueToString(cx, argv[0]); */ 
1839: /* MUTANT (rep_const) */    fmt = JS_ValueToString(cx, argv[1]);
1839: /* MUTANT (rep_const) */    fmt = JS_ValueToString(cx, argv[-1]);
1840: /* MUTANT (negate) */    if(! (!fmt))
1851: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1852: /* MUTANT (negate) */    if(! (!date))
1854: /* MUTANT (del_stmt) */ /*     return date_format(cx, *date, FORMATSPEC_TIME, rval); */ 
1861: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1862: /* MUTANT (negate) */    if(! (!date))
1864: /* MUTANT (del_stmt) */ /*     return date_format(cx, *date, FORMATSPEC_DATE, rval); */ 
1875: /* MUTANT (del_stmt) */ /*     jsdouble *date; */ 
1876: /* MUTANT (del_stmt) */ /*     char buf[DTOSTR_STANDARD_BUFFER_SIZE], *numStr, *bytes; */ 
1877: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
1879: /* MUTANT (del_stmt) */ /*     date = date_getProlog(cx, obj, argv); */ 
1880: /* MUTANT (negate) */    if(! (!date))
1883: /* MUTANT (del_stmt) */ /*     numStr = JS_dtostr(buf, sizeof buf, DTOSTR_STANDARD, 0, *date); */ 
1883: /* MUTANT (rep_const) */    numStr = JS_dtostr(buf, sizeof buf, DTOSTR_STANDARD, 1, *date);
1883: /* MUTANT (rep_const) */    numStr = JS_dtostr(buf, sizeof buf, DTOSTR_STANDARD, -1, *date);
1884: /* MUTANT (negate) */    if(! (!numStr)) {
1885: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(cx); */ 
1886: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1890: /* MUTANT (negate) */    if(! (!bytes)) {
1891: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(cx); */ 
1892: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1896: /* MUTANT (negate) */    if(! (!str)) {
1897: /* MUTANT (del_stmt) */ /*         free(bytes); */ 
1898: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1901: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1909: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, argv); */ 
1910: /* MUTANT (negate) */    if(! (!date))
1912: /* MUTANT (del_stmt) */ /*     return date_format(cx, *date, FORMATSPEC_FULL, rval); */ 
1926: /* MUTANT (rep_op) */    if (argc != 0)
1926: /* MUTANT (rep_const) */    if (argc == 1)
1926: /* MUTANT (rep_const) */    if (argc == -1)
1926: /* MUTANT (negate) */    if(! (argc == 0))
1930: /* MUTANT (rep_op) */    if (argc != 1) {
1930: /* MUTANT (rep_const) */    if (argc == 0) {
1930: /* MUTANT (rep_const) */    if (argc == -1) {
1930: /* MUTANT (rep_const) */    if (argc == ((1)+1)) {
1930: /* MUTANT (negate) */    if(! (argc == 1)) {
1931: /* MUTANT (del_stmt) */ /*         JSString *str, *str2; */ 
1933: /* MUTANT (del_stmt) */ /*         str = js_ValueToString(cx, argv[0]); */ 
1933: /* MUTANT (rep_const) */        str = js_ValueToString(cx, argv[1]);
1933: /* MUTANT (rep_const) */        str = js_ValueToString(cx, argv[-1]);
1934: /* MUTANT (negate) */        if(! (!str))
1936: /* MUTANT (del_stmt) */ /*         str2 = ATOM_TO_STRING(cx->runtime->atomState.typeAtoms[JSTYPE_NUMBER]); */ 
1937: /* MUTANT (negate) */        if(! (!js_CompareStrings(str, str2)))
1952: /* MUTANT (rep_const) */    {"UTC",               date_UTC,               MAXARGS,1,0 },
1952: /* MUTANT (rep_const) */    {"UTC",               date_UTC,               MAXARGS,-1,0 },
1952: /* MUTANT (rep_const) */    {"UTC",               date_UTC,               MAXARGS,0,1 },
1952: /* MUTANT (rep_const) */    {"UTC",               date_UTC,               MAXARGS,0,-1 },
1953: /* MUTANT (rep_const) */    {"parse",             date_parse,             0,0,0 },
1953: /* MUTANT (rep_const) */    {"parse",             date_parse,             -1,0,0 },
1953: /* MUTANT (rep_const) */    {"parse",             date_parse,             ((1)+1),0,0 },
1953: /* MUTANT (rep_const) */    {"parse",             date_parse,             1,1,0 },
1953: /* MUTANT (rep_const) */    {"parse",             date_parse,             1,-1,0 },
1953: /* MUTANT (rep_const) */    {"parse",             date_parse,             1,0,1 },
1953: /* MUTANT (rep_const) */    {"parse",             date_parse,             1,0,-1 },
1954: /* MUTANT (rep_const) */    {"now",               date_now,               1,0,0 },
1954: /* MUTANT (rep_const) */    {"now",               date_now,               -1,0,0 },
1954: /* MUTANT (rep_const) */    {"now",               date_now,               0,1,0 },
1954: /* MUTANT (rep_const) */    {"now",               date_now,               0,-1,0 },
1954: /* MUTANT (rep_const) */    {"now",               date_now,               0,0,1 },
1954: /* MUTANT (rep_const) */    {"now",               date_now,               0,0,-1 },
1955: /* MUTANT (rep_const) */    {1,0,0,0,0}
1955: /* MUTANT (rep_const) */    {-1,0,0,0,0}
1955: /* MUTANT (rep_const) */    {0,1,0,0,0}
1955: /* MUTANT (rep_const) */    {0,-1,0,0,0}
1955: /* MUTANT (rep_const) */    {0,0,1,0,0}
1955: /* MUTANT (rep_const) */    {0,0,-1,0,0}
1955: /* MUTANT (rep_const) */    {0,0,0,1,0}
1955: /* MUTANT (rep_const) */    {0,0,0,-1,0}
1955: /* MUTANT (rep_const) */    {0,0,0,0,1}
1955: /* MUTANT (rep_const) */    {0,0,0,0,-1}
1959: /* MUTANT (rep_const) */    {"getTime",             date_getTime,           1,0,0 },
1959: /* MUTANT (rep_const) */    {"getTime",             date_getTime,           -1,0,0 },
1959: /* MUTANT (rep_const) */    {"getTime",             date_getTime,           0,1,0 },
1959: /* MUTANT (rep_const) */    {"getTime",             date_getTime,           0,-1,0 },
1959: /* MUTANT (rep_const) */    {"getTime",             date_getTime,           0,0,1 },
1959: /* MUTANT (rep_const) */    {"getTime",             date_getTime,           0,0,-1 },
1960: /* MUTANT (rep_const) */    {"getTimezoneOffset",   date_getTimezoneOffset, 1,0,0 },
1960: /* MUTANT (rep_const) */    {"getTimezoneOffset",   date_getTimezoneOffset, -1,0,0 },
1960: /* MUTANT (rep_const) */    {"getTimezoneOffset",   date_getTimezoneOffset, 0,1,0 },
1960: /* MUTANT (rep_const) */    {"getTimezoneOffset",   date_getTimezoneOffset, 0,-1,0 },
1960: /* MUTANT (rep_const) */    {"getTimezoneOffset",   date_getTimezoneOffset, 0,0,1 },
1960: /* MUTANT (rep_const) */    {"getTimezoneOffset",   date_getTimezoneOffset, 0,0,-1 },
1961: /* MUTANT (rep_const) */    {"getYear",             date_getYear,           1,0,0 },
1961: /* MUTANT (rep_const) */    {"getYear",             date_getYear,           -1,0,0 },
1961: /* MUTANT (rep_const) */    {"getYear",             date_getYear,           0,1,0 },
1961: /* MUTANT (rep_const) */    {"getYear",             date_getYear,           0,-1,0 },
1961: /* MUTANT (rep_const) */    {"getYear",             date_getYear,           0,0,1 },
1961: /* MUTANT (rep_const) */    {"getYear",             date_getYear,           0,0,-1 },
1962: /* MUTANT (rep_const) */    {"getFullYear",         date_getFullYear,       1,0,0 },
1962: /* MUTANT (rep_const) */    {"getFullYear",         date_getFullYear,       -1,0,0 },
1962: /* MUTANT (rep_const) */    {"getFullYear",         date_getFullYear,       0,1,0 },
1962: /* MUTANT (rep_const) */    {"getFullYear",         date_getFullYear,       0,-1,0 },
1962: /* MUTANT (rep_const) */    {"getFullYear",         date_getFullYear,       0,0,1 },
1962: /* MUTANT (rep_const) */    {"getFullYear",         date_getFullYear,       0,0,-1 },
1963: /* MUTANT (rep_const) */    {"getUTCFullYear",      date_getUTCFullYear,    1,0,0 },
1963: /* MUTANT (rep_const) */    {"getUTCFullYear",      date_getUTCFullYear,    -1,0,0 },
1963: /* MUTANT (rep_const) */    {"getUTCFullYear",      date_getUTCFullYear,    0,1,0 },
1963: /* MUTANT (rep_const) */    {"getUTCFullYear",      date_getUTCFullYear,    0,-1,0 },
1963: /* MUTANT (rep_const) */    {"getUTCFullYear",      date_getUTCFullYear,    0,0,1 },
1963: /* MUTANT (rep_const) */    {"getUTCFullYear",      date_getUTCFullYear,    0,0,-1 },
1964: /* MUTANT (rep_const) */    {"getMonth",            date_getMonth,          1,0,0 },
1964: /* MUTANT (rep_const) */    {"getMonth",            date_getMonth,          -1,0,0 },
1964: /* MUTANT (rep_const) */    {"getMonth",            date_getMonth,          0,1,0 },
1964: /* MUTANT (rep_const) */    {"getMonth",            date_getMonth,          0,-1,0 },
1964: /* MUTANT (rep_const) */    {"getMonth",            date_getMonth,          0,0,1 },
1964: /* MUTANT (rep_const) */    {"getMonth",            date_getMonth,          0,0,-1 },
1965: /* MUTANT (rep_const) */    {"getUTCMonth",         date_getUTCMonth,       1,0,0 },
1965: /* MUTANT (rep_const) */    {"getUTCMonth",         date_getUTCMonth,       -1,0,0 },
1965: /* MUTANT (rep_const) */    {"getUTCMonth",         date_getUTCMonth,       0,1,0 },
1965: /* MUTANT (rep_const) */    {"getUTCMonth",         date_getUTCMonth,       0,-1,0 },
1965: /* MUTANT (rep_const) */    {"getUTCMonth",         date_getUTCMonth,       0,0,1 },
1965: /* MUTANT (rep_const) */    {"getUTCMonth",         date_getUTCMonth,       0,0,-1 },
1966: /* MUTANT (rep_const) */    {"getDate",             date_getDate,           1,0,0 },
1966: /* MUTANT (rep_const) */    {"getDate",             date_getDate,           -1,0,0 },
1966: /* MUTANT (rep_const) */    {"getDate",             date_getDate,           0,1,0 },
1966: /* MUTANT (rep_const) */    {"getDate",             date_getDate,           0,-1,0 },
1966: /* MUTANT (rep_const) */    {"getDate",             date_getDate,           0,0,1 },
1966: /* MUTANT (rep_const) */    {"getDate",             date_getDate,           0,0,-1 },
1967: /* MUTANT (rep_const) */    {"getUTCDate",          date_getUTCDate,        1,0,0 },
1967: /* MUTANT (rep_const) */    {"getUTCDate",          date_getUTCDate,        -1,0,0 },
1967: /* MUTANT (rep_const) */    {"getUTCDate",          date_getUTCDate,        0,1,0 },
1967: /* MUTANT (rep_const) */    {"getUTCDate",          date_getUTCDate,        0,-1,0 },
1967: /* MUTANT (rep_const) */    {"getUTCDate",          date_getUTCDate,        0,0,1 },
1967: /* MUTANT (rep_const) */    {"getUTCDate",          date_getUTCDate,        0,0,-1 },
1968: /* MUTANT (rep_const) */    {"getDay",              date_getDay,            1,0,0 },
1968: /* MUTANT (rep_const) */    {"getDay",              date_getDay,            -1,0,0 },
1968: /* MUTANT (rep_const) */    {"getDay",              date_getDay,            0,1,0 },
1968: /* MUTANT (rep_const) */    {"getDay",              date_getDay,            0,-1,0 },
1968: /* MUTANT (rep_const) */    {"getDay",              date_getDay,            0,0,1 },
1968: /* MUTANT (rep_const) */    {"getDay",              date_getDay,            0,0,-1 },
1969: /* MUTANT (rep_const) */    {"getUTCDay",           date_getUTCDay,         1,0,0 },
1969: /* MUTANT (rep_const) */    {"getUTCDay",           date_getUTCDay,         -1,0,0 },
1969: /* MUTANT (rep_const) */    {"getUTCDay",           date_getUTCDay,         0,1,0 },
1969: /* MUTANT (rep_const) */    {"getUTCDay",           date_getUTCDay,         0,-1,0 },
1969: /* MUTANT (rep_const) */    {"getUTCDay",           date_getUTCDay,         0,0,1 },
1969: /* MUTANT (rep_const) */    {"getUTCDay",           date_getUTCDay,         0,0,-1 },
1970: /* MUTANT (rep_const) */    {"getHours",            date_getHours,          1,0,0 },
1970: /* MUTANT (rep_const) */    {"getHours",            date_getHours,          -1,0,0 },
1970: /* MUTANT (rep_const) */    {"getHours",            date_getHours,          0,1,0 },
1970: /* MUTANT (rep_const) */    {"getHours",            date_getHours,          0,-1,0 },
1970: /* MUTANT (rep_const) */    {"getHours",            date_getHours,          0,0,1 },
1970: /* MUTANT (rep_const) */    {"getHours",            date_getHours,          0,0,-1 },
1971: /* MUTANT (rep_const) */    {"getUTCHours",         date_getUTCHours,       1,0,0 },
1971: /* MUTANT (rep_const) */    {"getUTCHours",         date_getUTCHours,       -1,0,0 },
1971: /* MUTANT (rep_const) */    {"getUTCHours",         date_getUTCHours,       0,1,0 },
1971: /* MUTANT (rep_const) */    {"getUTCHours",         date_getUTCHours,       0,-1,0 },
1971: /* MUTANT (rep_const) */    {"getUTCHours",         date_getUTCHours,       0,0,1 },
1971: /* MUTANT (rep_const) */    {"getUTCHours",         date_getUTCHours,       0,0,-1 },
1972: /* MUTANT (rep_const) */    {"getMinutes",          date_getMinutes,        1,0,0 },
1972: /* MUTANT (rep_const) */    {"getMinutes",          date_getMinutes,        -1,0,0 },
1972: /* MUTANT (rep_const) */    {"getMinutes",          date_getMinutes,        0,1,0 },
1972: /* MUTANT (rep_const) */    {"getMinutes",          date_getMinutes,        0,-1,0 },
1972: /* MUTANT (rep_const) */    {"getMinutes",          date_getMinutes,        0,0,1 },
1972: /* MUTANT (rep_const) */    {"getMinutes",          date_getMinutes,        0,0,-1 },
1973: /* MUTANT (rep_const) */    {"getUTCMinutes",       date_getUTCMinutes,     1,0,0 },
1973: /* MUTANT (rep_const) */    {"getUTCMinutes",       date_getUTCMinutes,     -1,0,0 },
1973: /* MUTANT (rep_const) */    {"getUTCMinutes",       date_getUTCMinutes,     0,1,0 },
1973: /* MUTANT (rep_const) */    {"getUTCMinutes",       date_getUTCMinutes,     0,-1,0 },
1973: /* MUTANT (rep_const) */    {"getUTCMinutes",       date_getUTCMinutes,     0,0,1 },
1973: /* MUTANT (rep_const) */    {"getUTCMinutes",       date_getUTCMinutes,     0,0,-1 },
1974: /* MUTANT (rep_const) */    {"getSeconds",          date_getUTCSeconds,     1,0,0 },
1974: /* MUTANT (rep_const) */    {"getSeconds",          date_getUTCSeconds,     -1,0,0 },
1974: /* MUTANT (rep_const) */    {"getSeconds",          date_getUTCSeconds,     0,1,0 },
1974: /* MUTANT (rep_const) */    {"getSeconds",          date_getUTCSeconds,     0,-1,0 },
1974: /* MUTANT (rep_const) */    {"getSeconds",          date_getUTCSeconds,     0,0,1 },
1974: /* MUTANT (rep_const) */    {"getSeconds",          date_getUTCSeconds,     0,0,-1 },
1975: /* MUTANT (rep_const) */    {"getUTCSeconds",       date_getUTCSeconds,     1,0,0 },
1975: /* MUTANT (rep_const) */    {"getUTCSeconds",       date_getUTCSeconds,     -1,0,0 },
1975: /* MUTANT (rep_const) */    {"getUTCSeconds",       date_getUTCSeconds,     0,1,0 },
1975: /* MUTANT (rep_const) */    {"getUTCSeconds",       date_getUTCSeconds,     0,-1,0 },
1975: /* MUTANT (rep_const) */    {"getUTCSeconds",       date_getUTCSeconds,     0,0,1 },
1975: /* MUTANT (rep_const) */    {"getUTCSeconds",       date_getUTCSeconds,     0,0,-1 },
1976: /* MUTANT (rep_const) */    {"getMilliseconds",     date_getUTCMilliseconds,1,0,0 },
1976: /* MUTANT (rep_const) */    {"getMilliseconds",     date_getUTCMilliseconds,-1,0,0 },
1976: /* MUTANT (rep_const) */    {"getMilliseconds",     date_getUTCMilliseconds,0,1,0 },
1976: /* MUTANT (rep_const) */    {"getMilliseconds",     date_getUTCMilliseconds,0,-1,0 },
1976: /* MUTANT (rep_const) */    {"getMilliseconds",     date_getUTCMilliseconds,0,0,1 },
1976: /* MUTANT (rep_const) */    {"getMilliseconds",     date_getUTCMilliseconds,0,0,-1 },
1977: /* MUTANT (rep_const) */    {"getUTCMilliseconds",  date_getUTCMilliseconds,1,0,0 },
1977: /* MUTANT (rep_const) */    {"getUTCMilliseconds",  date_getUTCMilliseconds,-1,0,0 },
1977: /* MUTANT (rep_const) */    {"getUTCMilliseconds",  date_getUTCMilliseconds,0,1,0 },
1977: /* MUTANT (rep_const) */    {"getUTCMilliseconds",  date_getUTCMilliseconds,0,-1,0 },
1977: /* MUTANT (rep_const) */    {"getUTCMilliseconds",  date_getUTCMilliseconds,0,0,1 },
1977: /* MUTANT (rep_const) */    {"getUTCMilliseconds",  date_getUTCMilliseconds,0,0,-1 },
1978: /* MUTANT (rep_const) */    {"setTime",             date_setTime,           0,0,0 },
1978: /* MUTANT (rep_const) */    {"setTime",             date_setTime,           -1,0,0 },
1978: /* MUTANT (rep_const) */    {"setTime",             date_setTime,           ((1)+1),0,0 },
1978: /* MUTANT (rep_const) */    {"setTime",             date_setTime,           1,1,0 },
1978: /* MUTANT (rep_const) */    {"setTime",             date_setTime,           1,-1,0 },
1978: /* MUTANT (rep_const) */    {"setTime",             date_setTime,           1,0,1 },
1978: /* MUTANT (rep_const) */    {"setTime",             date_setTime,           1,0,-1 },
1979: /* MUTANT (rep_const) */    {"setYear",             date_setYear,           0,0,0 },
1979: /* MUTANT (rep_const) */    {"setYear",             date_setYear,           -1,0,0 },
1979: /* MUTANT (rep_const) */    {"setYear",             date_setYear,           ((1)+1),0,0 },
1979: /* MUTANT (rep_const) */    {"setYear",             date_setYear,           1,1,0 },
1979: /* MUTANT (rep_const) */    {"setYear",             date_setYear,           1,-1,0 },
1979: /* MUTANT (rep_const) */    {"setYear",             date_setYear,           1,0,1 },
1979: /* MUTANT (rep_const) */    {"setYear",             date_setYear,           1,0,-1 },
1980: /* MUTANT (rep_const) */    {"setFullYear",         date_setFullYear,       0,0,0 },
1980: /* MUTANT (rep_const) */    {"setFullYear",         date_setFullYear,       1,0,0 },
1980: /* MUTANT (rep_const) */    {"setFullYear",         date_setFullYear,       -1,0,0 },
1980: /* MUTANT (rep_const) */    {"setFullYear",         date_setFullYear,       ((3)+1),0,0 },
1980: /* MUTANT (rep_const) */    {"setFullYear",         date_setFullYear,       ((3)-1),0,0 },
1980: /* MUTANT (rep_const) */    {"setFullYear",         date_setFullYear,       3,1,0 },
1980: /* MUTANT (rep_const) */    {"setFullYear",         date_setFullYear,       3,-1,0 },
1980: /* MUTANT (rep_const) */    {"setFullYear",         date_setFullYear,       3,0,1 },
1980: /* MUTANT (rep_const) */    {"setFullYear",         date_setFullYear,       3,0,-1 },
1981: /* MUTANT (rep_const) */    {"setUTCFullYear",      date_setUTCFullYear,    0,0,0 },
1981: /* MUTANT (rep_const) */    {"setUTCFullYear",      date_setUTCFullYear,    1,0,0 },
1981: /* MUTANT (rep_const) */    {"setUTCFullYear",      date_setUTCFullYear,    -1,0,0 },
1981: /* MUTANT (rep_const) */    {"setUTCFullYear",      date_setUTCFullYear,    ((3)+1),0,0 },
1981: /* MUTANT (rep_const) */    {"setUTCFullYear",      date_setUTCFullYear,    ((3)-1),0,0 },
1981: /* MUTANT (rep_const) */    {"setUTCFullYear",      date_setUTCFullYear,    3,1,0 },
1981: /* MUTANT (rep_const) */    {"setUTCFullYear",      date_setUTCFullYear,    3,-1,0 },
1981: /* MUTANT (rep_const) */    {"setUTCFullYear",      date_setUTCFullYear,    3,0,1 },
1981: /* MUTANT (rep_const) */    {"setUTCFullYear",      date_setUTCFullYear,    3,0,-1 },
1982: /* MUTANT (rep_const) */    {"setMonth",            date_setMonth,          0,0,0 },
1982: /* MUTANT (rep_const) */    {"setMonth",            date_setMonth,          1,0,0 },
1982: /* MUTANT (rep_const) */    {"setMonth",            date_setMonth,          -1,0,0 },
1982: /* MUTANT (rep_const) */    {"setMonth",            date_setMonth,          ((2)+1),0,0 },
1982: /* MUTANT (rep_const) */    {"setMonth",            date_setMonth,          ((2)-1),0,0 },
1982: /* MUTANT (rep_const) */    {"setMonth",            date_setMonth,          2,1,0 },
1982: /* MUTANT (rep_const) */    {"setMonth",            date_setMonth,          2,-1,0 },
1982: /* MUTANT (rep_const) */    {"setMonth",            date_setMonth,          2,0,1 },
1982: /* MUTANT (rep_const) */    {"setMonth",            date_setMonth,          2,0,-1 },
1983: /* MUTANT (rep_const) */    {"setUTCMonth",         date_setUTCMonth,       0,0,0 },
1983: /* MUTANT (rep_const) */    {"setUTCMonth",         date_setUTCMonth,       1,0,0 },
1983: /* MUTANT (rep_const) */    {"setUTCMonth",         date_setUTCMonth,       -1,0,0 },
1983: /* MUTANT (rep_const) */    {"setUTCMonth",         date_setUTCMonth,       ((2)+1),0,0 },
1983: /* MUTANT (rep_const) */    {"setUTCMonth",         date_setUTCMonth,       ((2)-1),0,0 },
1983: /* MUTANT (rep_const) */    {"setUTCMonth",         date_setUTCMonth,       2,1,0 },
1983: /* MUTANT (rep_const) */    {"setUTCMonth",         date_setUTCMonth,       2,-1,0 },
1983: /* MUTANT (rep_const) */    {"setUTCMonth",         date_setUTCMonth,       2,0,1 },
1983: /* MUTANT (rep_const) */    {"setUTCMonth",         date_setUTCMonth,       2,0,-1 },
1984: /* MUTANT (rep_const) */    {"setDate",             date_setDate,           0,0,0 },
1984: /* MUTANT (rep_const) */    {"setDate",             date_setDate,           -1,0,0 },
1984: /* MUTANT (rep_const) */    {"setDate",             date_setDate,           ((1)+1),0,0 },
1984: /* MUTANT (rep_const) */    {"setDate",             date_setDate,           1,1,0 },
1984: /* MUTANT (rep_const) */    {"setDate",             date_setDate,           1,-1,0 },
1984: /* MUTANT (rep_const) */    {"setDate",             date_setDate,           1,0,1 },
1984: /* MUTANT (rep_const) */    {"setDate",             date_setDate,           1,0,-1 },
1985: /* MUTANT (rep_const) */    {"setUTCDate",          date_setUTCDate,        0,0,0 },
1985: /* MUTANT (rep_const) */    {"setUTCDate",          date_setUTCDate,        -1,0,0 },
1985: /* MUTANT (rep_const) */    {"setUTCDate",          date_setUTCDate,        ((1)+1),0,0 },
1985: /* MUTANT (rep_const) */    {"setUTCDate",          date_setUTCDate,        1,1,0 },
1985: /* MUTANT (rep_const) */    {"setUTCDate",          date_setUTCDate,        1,-1,0 },
1985: /* MUTANT (rep_const) */    {"setUTCDate",          date_setUTCDate,        1,0,1 },
1985: /* MUTANT (rep_const) */    {"setUTCDate",          date_setUTCDate,        1,0,-1 },
1986: /* MUTANT (rep_const) */    {"setHours",            date_setHours,          0,0,0 },
1986: /* MUTANT (rep_const) */    {"setHours",            date_setHours,          1,0,0 },
1986: /* MUTANT (rep_const) */    {"setHours",            date_setHours,          -1,0,0 },
1986: /* MUTANT (rep_const) */    {"setHours",            date_setHours,          ((4)+1),0,0 },
1986: /* MUTANT (rep_const) */    {"setHours",            date_setHours,          ((4)-1),0,0 },
1986: /* MUTANT (rep_const) */    {"setHours",            date_setHours,          4,1,0 },
1986: /* MUTANT (rep_const) */    {"setHours",            date_setHours,          4,-1,0 },
1986: /* MUTANT (rep_const) */    {"setHours",            date_setHours,          4,0,1 },
1986: /* MUTANT (rep_const) */    {"setHours",            date_setHours,          4,0,-1 },
1987: /* MUTANT (rep_const) */    {"setUTCHours",         date_setUTCHours,       0,0,0 },
1987: /* MUTANT (rep_const) */    {"setUTCHours",         date_setUTCHours,       1,0,0 },
1987: /* MUTANT (rep_const) */    {"setUTCHours",         date_setUTCHours,       -1,0,0 },
1987: /* MUTANT (rep_const) */    {"setUTCHours",         date_setUTCHours,       ((4)+1),0,0 },
1987: /* MUTANT (rep_const) */    {"setUTCHours",         date_setUTCHours,       ((4)-1),0,0 },
1987: /* MUTANT (rep_const) */    {"setUTCHours",         date_setUTCHours,       4,1,0 },
1987: /* MUTANT (rep_const) */    {"setUTCHours",         date_setUTCHours,       4,-1,0 },
1987: /* MUTANT (rep_const) */    {"setUTCHours",         date_setUTCHours,       4,0,1 },
1987: /* MUTANT (rep_const) */    {"setUTCHours",         date_setUTCHours,       4,0,-1 },
1988: /* MUTANT (rep_const) */    {"setMinutes",          date_setMinutes,        0,0,0 },
1988: /* MUTANT (rep_const) */    {"setMinutes",          date_setMinutes,        1,0,0 },
1988: /* MUTANT (rep_const) */    {"setMinutes",          date_setMinutes,        -1,0,0 },
1988: /* MUTANT (rep_const) */    {"setMinutes",          date_setMinutes,        ((3)+1),0,0 },
1988: /* MUTANT (rep_const) */    {"setMinutes",          date_setMinutes,        ((3)-1),0,0 },
1988: /* MUTANT (rep_const) */    {"setMinutes",          date_setMinutes,        3,1,0 },
1988: /* MUTANT (rep_const) */    {"setMinutes",          date_setMinutes,        3,-1,0 },
1988: /* MUTANT (rep_const) */    {"setMinutes",          date_setMinutes,        3,0,1 },
1988: /* MUTANT (rep_const) */    {"setMinutes",          date_setMinutes,        3,0,-1 },
1989: /* MUTANT (rep_const) */    {"setUTCMinutes",       date_setUTCMinutes,     0,0,0 },
1989: /* MUTANT (rep_const) */    {"setUTCMinutes",       date_setUTCMinutes,     1,0,0 },
1989: /* MUTANT (rep_const) */    {"setUTCMinutes",       date_setUTCMinutes,     -1,0,0 },
1989: /* MUTANT (rep_const) */    {"setUTCMinutes",       date_setUTCMinutes,     ((3)+1),0,0 },
1989: /* MUTANT (rep_const) */    {"setUTCMinutes",       date_setUTCMinutes,     ((3)-1),0,0 },
1989: /* MUTANT (rep_const) */    {"setUTCMinutes",       date_setUTCMinutes,     3,1,0 },
1989: /* MUTANT (rep_const) */    {"setUTCMinutes",       date_setUTCMinutes,     3,-1,0 },
1989: /* MUTANT (rep_const) */    {"setUTCMinutes",       date_setUTCMinutes,     3,0,1 },
1989: /* MUTANT (rep_const) */    {"setUTCMinutes",       date_setUTCMinutes,     3,0,-1 },
1990: /* MUTANT (rep_const) */    {"setSeconds",          date_setSeconds,        0,0,0 },
1990: /* MUTANT (rep_const) */    {"setSeconds",          date_setSeconds,        1,0,0 },
1990: /* MUTANT (rep_const) */    {"setSeconds",          date_setSeconds,        -1,0,0 },
1990: /* MUTANT (rep_const) */    {"setSeconds",          date_setSeconds,        ((2)+1),0,0 },
1990: /* MUTANT (rep_const) */    {"setSeconds",          date_setSeconds,        ((2)-1),0,0 },
1990: /* MUTANT (rep_const) */    {"setSeconds",          date_setSeconds,        2,1,0 },
1990: /* MUTANT (rep_const) */    {"setSeconds",          date_setSeconds,        2,-1,0 },
1990: /* MUTANT (rep_const) */    {"setSeconds",          date_setSeconds,        2,0,1 },
1990: /* MUTANT (rep_const) */    {"setSeconds",          date_setSeconds,        2,0,-1 },
1991: /* MUTANT (rep_const) */    {"setUTCSeconds",       date_setUTCSeconds,     0,0,0 },
1991: /* MUTANT (rep_const) */    {"setUTCSeconds",       date_setUTCSeconds,     1,0,0 },
1991: /* MUTANT (rep_const) */    {"setUTCSeconds",       date_setUTCSeconds,     -1,0,0 },
1991: /* MUTANT (rep_const) */    {"setUTCSeconds",       date_setUTCSeconds,     ((2)+1),0,0 },
1991: /* MUTANT (rep_const) */    {"setUTCSeconds",       date_setUTCSeconds,     ((2)-1),0,0 },
1991: /* MUTANT (rep_const) */    {"setUTCSeconds",       date_setUTCSeconds,     2,1,0 },
1991: /* MUTANT (rep_const) */    {"setUTCSeconds",       date_setUTCSeconds,     2,-1,0 },
1991: /* MUTANT (rep_const) */    {"setUTCSeconds",       date_setUTCSeconds,     2,0,1 },
1991: /* MUTANT (rep_const) */    {"setUTCSeconds",       date_setUTCSeconds,     2,0,-1 },
1992: /* MUTANT (rep_const) */    {"setMilliseconds",     date_setMilliseconds,   0,0,0 },
1992: /* MUTANT (rep_const) */    {"setMilliseconds",     date_setMilliseconds,   -1,0,0 },
1992: /* MUTANT (rep_const) */    {"setMilliseconds",     date_setMilliseconds,   ((1)+1),0,0 },
1992: /* MUTANT (rep_const) */    {"setMilliseconds",     date_setMilliseconds,   1,1,0 },
1992: /* MUTANT (rep_const) */    {"setMilliseconds",     date_setMilliseconds,   1,-1,0 },
1992: /* MUTANT (rep_const) */    {"setMilliseconds",     date_setMilliseconds,   1,0,1 },
1992: /* MUTANT (rep_const) */    {"setMilliseconds",     date_setMilliseconds,   1,0,-1 },
1993: /* MUTANT (rep_const) */    {"setUTCMilliseconds",  date_setUTCMilliseconds,0,0,0 },
1993: /* MUTANT (rep_const) */    {"setUTCMilliseconds",  date_setUTCMilliseconds,-1,0,0 },
1993: /* MUTANT (rep_const) */    {"setUTCMilliseconds",  date_setUTCMilliseconds,((1)+1),0,0 },
1993: /* MUTANT (rep_const) */    {"setUTCMilliseconds",  date_setUTCMilliseconds,1,1,0 },
1993: /* MUTANT (rep_const) */    {"setUTCMilliseconds",  date_setUTCMilliseconds,1,-1,0 },
1993: /* MUTANT (rep_const) */    {"setUTCMilliseconds",  date_setUTCMilliseconds,1,0,1 },
1993: /* MUTANT (rep_const) */    {"setUTCMilliseconds",  date_setUTCMilliseconds,1,0,-1 },
1994: /* MUTANT (rep_const) */    {"toUTCString",         date_toGMTString,       1,0,0 },
1994: /* MUTANT (rep_const) */    {"toUTCString",         date_toGMTString,       -1,0,0 },
1994: /* MUTANT (rep_const) */    {"toUTCString",         date_toGMTString,       0,1,0 },
1994: /* MUTANT (rep_const) */    {"toUTCString",         date_toGMTString,       0,-1,0 },
1994: /* MUTANT (rep_const) */    {"toUTCString",         date_toGMTString,       0,0,1 },
1994: /* MUTANT (rep_const) */    {"toUTCString",         date_toGMTString,       0,0,-1 },
1995: /* MUTANT (rep_const) */    {js_toLocaleString_str, date_toLocaleString,    1,0,0 },
1995: /* MUTANT (rep_const) */    {js_toLocaleString_str, date_toLocaleString,    -1,0,0 },
1995: /* MUTANT (rep_const) */    {js_toLocaleString_str, date_toLocaleString,    0,1,0 },
1995: /* MUTANT (rep_const) */    {js_toLocaleString_str, date_toLocaleString,    0,-1,0 },
1995: /* MUTANT (rep_const) */    {js_toLocaleString_str, date_toLocaleString,    0,0,1 },
1995: /* MUTANT (rep_const) */    {js_toLocaleString_str, date_toLocaleString,    0,0,-1 },
1996: /* MUTANT (rep_const) */    {"toLocaleDateString",  date_toLocaleDateString,1,0,0 },
1996: /* MUTANT (rep_const) */    {"toLocaleDateString",  date_toLocaleDateString,-1,0,0 },
1996: /* MUTANT (rep_const) */    {"toLocaleDateString",  date_toLocaleDateString,0,1,0 },
1996: /* MUTANT (rep_const) */    {"toLocaleDateString",  date_toLocaleDateString,0,-1,0 },
1996: /* MUTANT (rep_const) */    {"toLocaleDateString",  date_toLocaleDateString,0,0,1 },
1996: /* MUTANT (rep_const) */    {"toLocaleDateString",  date_toLocaleDateString,0,0,-1 },
1997: /* MUTANT (rep_const) */    {"toLocaleTimeString",  date_toLocaleTimeString,1,0,0 },
1997: /* MUTANT (rep_const) */    {"toLocaleTimeString",  date_toLocaleTimeString,-1,0,0 },
1997: /* MUTANT (rep_const) */    {"toLocaleTimeString",  date_toLocaleTimeString,0,1,0 },
1997: /* MUTANT (rep_const) */    {"toLocaleTimeString",  date_toLocaleTimeString,0,-1,0 },
1997: /* MUTANT (rep_const) */    {"toLocaleTimeString",  date_toLocaleTimeString,0,0,1 },
1997: /* MUTANT (rep_const) */    {"toLocaleTimeString",  date_toLocaleTimeString,0,0,-1 },
1998: /* MUTANT (rep_const) */    {"toLocaleFormat",      date_toLocaleFormat,    0,0,0 },
1998: /* MUTANT (rep_const) */    {"toLocaleFormat",      date_toLocaleFormat,    -1,0,0 },
1998: /* MUTANT (rep_const) */    {"toLocaleFormat",      date_toLocaleFormat,    ((1)+1),0,0 },
1998: /* MUTANT (rep_const) */    {"toLocaleFormat",      date_toLocaleFormat,    1,1,0 },
1998: /* MUTANT (rep_const) */    {"toLocaleFormat",      date_toLocaleFormat,    1,-1,0 },
1998: /* MUTANT (rep_const) */    {"toLocaleFormat",      date_toLocaleFormat,    1,0,1 },
1998: /* MUTANT (rep_const) */    {"toLocaleFormat",      date_toLocaleFormat,    1,0,-1 },
1999: /* MUTANT (rep_const) */    {"toDateString",        date_toDateString,      1,0,0 },
1999: /* MUTANT (rep_const) */    {"toDateString",        date_toDateString,      -1,0,0 },
1999: /* MUTANT (rep_const) */    {"toDateString",        date_toDateString,      0,1,0 },
1999: /* MUTANT (rep_const) */    {"toDateString",        date_toDateString,      0,-1,0 },
1999: /* MUTANT (rep_const) */    {"toDateString",        date_toDateString,      0,0,1 },
1999: /* MUTANT (rep_const) */    {"toDateString",        date_toDateString,      0,0,-1 },
2000: /* MUTANT (rep_const) */    {"toTimeString",        date_toTimeString,      1,0,0 },
2000: /* MUTANT (rep_const) */    {"toTimeString",        date_toTimeString,      -1,0,0 },
2000: /* MUTANT (rep_const) */    {"toTimeString",        date_toTimeString,      0,1,0 },
2000: /* MUTANT (rep_const) */    {"toTimeString",        date_toTimeString,      0,-1,0 },
2000: /* MUTANT (rep_const) */    {"toTimeString",        date_toTimeString,      0,0,1 },
2000: /* MUTANT (rep_const) */    {"toTimeString",        date_toTimeString,      0,0,-1 },
2002: /* MUTANT (rep_const) */    {js_toSource_str,       date_toSource,          1,0,0 },
2002: /* MUTANT (rep_const) */    {js_toSource_str,       date_toSource,          -1,0,0 },
2002: /* MUTANT (rep_const) */    {js_toSource_str,       date_toSource,          0,1,0 },
2002: /* MUTANT (rep_const) */    {js_toSource_str,       date_toSource,          0,-1,0 },
2002: /* MUTANT (rep_const) */    {js_toSource_str,       date_toSource,          0,0,1 },
2002: /* MUTANT (rep_const) */    {js_toSource_str,       date_toSource,          0,0,-1 },
2004: /* MUTANT (rep_const) */    {js_toString_str,       date_toString,          1,0,0 },
2004: /* MUTANT (rep_const) */    {js_toString_str,       date_toString,          -1,0,0 },
2004: /* MUTANT (rep_const) */    {js_toString_str,       date_toString,          0,1,0 },
2004: /* MUTANT (rep_const) */    {js_toString_str,       date_toString,          0,-1,0 },
2004: /* MUTANT (rep_const) */    {js_toString_str,       date_toString,          0,0,1 },
2004: /* MUTANT (rep_const) */    {js_toString_str,       date_toString,          0,0,-1 },
2005: /* MUTANT (rep_const) */    {js_valueOf_str,        date_valueOf,           1,0,0 },
2005: /* MUTANT (rep_const) */    {js_valueOf_str,        date_valueOf,           -1,0,0 },
2005: /* MUTANT (rep_const) */    {js_valueOf_str,        date_valueOf,           0,1,0 },
2005: /* MUTANT (rep_const) */    {js_valueOf_str,        date_valueOf,           0,-1,0 },
2005: /* MUTANT (rep_const) */    {js_valueOf_str,        date_valueOf,           0,0,1 },
2005: /* MUTANT (rep_const) */    {js_valueOf_str,        date_valueOf,           0,0,-1 },
2006: /* MUTANT (rep_const) */    {1,0,0,0,0}
2006: /* MUTANT (rep_const) */    {-1,0,0,0,0}
2006: /* MUTANT (rep_const) */    {0,1,0,0,0}
2006: /* MUTANT (rep_const) */    {0,-1,0,0,0}
2006: /* MUTANT (rep_const) */    {0,0,1,0,0}
2006: /* MUTANT (rep_const) */    {0,0,-1,0,0}
2006: /* MUTANT (rep_const) */    {0,0,0,1,0}
2006: /* MUTANT (rep_const) */    {0,0,0,-1,0}
2006: /* MUTANT (rep_const) */    {0,0,0,0,1}
2006: /* MUTANT (rep_const) */    {0,0,0,0,-1}
2012: /* MUTANT (del_stmt) */ /*     jsdouble *date; */ 
2014: /* MUTANT (del_stmt) */ /*     date = js_NewDouble(cx, 0.0, 0); */ 
2014: /* MUTANT (rep_const) */    date = js_NewDouble(cx, 0.1, 0);
2014: /* MUTANT (rep_const) */    date = js_NewDouble(cx, 0.-1, 0);
2014: /* MUTANT (rep_const) */    date = js_NewDouble(cx, 0.0, 1);
2014: /* MUTANT (rep_const) */    date = js_NewDouble(cx, 0.0, -1);
2015: /* MUTANT (negate) */    if(! (!date))
2017: /* MUTANT (del_stmt) */ /*     OBJ_SET_SLOT(cx, obj, JSSLOT_PRIVATE, DOUBLE_TO_JSVAL(date)); */ 
2018: /* MUTANT (del_stmt) */ /*     return date; */ 
2024: /* MUTANT (del_stmt) */ /*     jsdouble *date; */ 
2025: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
2026: /* MUTANT (del_stmt) */ /*     jsdouble d; */ 
2029: /* MUTANT (negate) */    if(! (!(cx->fp->flags & JSFRAME_CONSTRUCTING))) {
2030: /* MUTANT (del_stmt) */ /*         int64 us, ms, us2ms; */ 
2031: /* MUTANT (del_stmt) */ /*         jsdouble msec_time; */ 
2036: /* MUTANT (del_stmt) */ /*         us = PRMJ_Now(); */ 
2037: /* MUTANT (del_stmt) */ /*         JSLL_UI2L(us2ms, PRMJ_USEC_PER_MSEC); */ 
2038: /* MUTANT (del_stmt) */ /*         JSLL_DIV(ms, us, us2ms); */ 
2039: /* MUTANT (del_stmt) */ /*         JSLL_L2D(msec_time, ms); */ 
2041: /* MUTANT (del_stmt) */ /*         return date_format(cx, msec_time, FORMATSPEC_FULL, rval); */ 
2045: /* MUTANT (rep_op) */    if (argc != 0) {
2045: /* MUTANT (rep_const) */    if (argc == 1) {
2045: /* MUTANT (rep_const) */    if (argc == -1) {
2045: /* MUTANT (negate) */    if(! (argc == 0)) {
2046: /* MUTANT (del_stmt) */ /*         int64 us, ms, us2ms; */ 
2047: /* MUTANT (del_stmt) */ /*         jsdouble msec_time; */ 
2049: /* MUTANT (del_stmt) */ /*         date = date_constructor(cx, obj); */ 
2050: /* MUTANT (negate) */        if(! (!date))
2053: /* MUTANT (del_stmt) */ /*         us = PRMJ_Now(); */ 
2054: /* MUTANT (del_stmt) */ /*         JSLL_UI2L(us2ms, PRMJ_USEC_PER_MSEC); */ 
2055: /* MUTANT (del_stmt) */ /*         JSLL_DIV(ms, us, us2ms); */ 
2056: /* MUTANT (del_stmt) */ /*         JSLL_L2D(msec_time, ms); */ 
2058: /* MUTANT (del_stmt) */ /*         *date = msec_time; */ 
2059: /* MUTANT (rep_op) */    } else if (argc != 1) {
2059: /* MUTANT (rep_const) */    } else if (argc == 0) {
2059: /* MUTANT (rep_const) */    } else if (argc == -1) {
2059: /* MUTANT (rep_const) */    } else if (argc == ((1)+1)) {
2059: /* MUTANT (negate) */    } else if(! (argc == 1)) {
2060: /* MUTANT (rep_const) */        if (!JSVAL_IS_STRING(argv[1])) {
2060: /* MUTANT (rep_const) */        if (!JSVAL_IS_STRING(argv[-1])) {
2060: /* MUTANT (negate) */        if(! (!JSVAL_IS_STRING(argv[0]))) {
2062: /* MUTANT (rep_const) */            if (!js_ValueToNumber(cx, argv[1], &d))
2062: /* MUTANT (rep_const) */            if (!js_ValueToNumber(cx, argv[-1], &d))
2062: /* MUTANT (negate) */            if(! (!js_ValueToNumber(cx, argv[0], &d)))
2064: /* MUTANT (del_stmt) */ /*             date = date_constructor(cx, obj); */ 
2065: /* MUTANT (negate) */            if(! (!date))
2067: /* MUTANT (del_stmt) */ /*             *date = TIMECLIP(d); */ 
2070: /* MUTANT (del_stmt) */ /*             date = date_constructor(cx, obj); */ 
2071: /* MUTANT (negate) */            if(! (!date))
2074: /* MUTANT (del_stmt) */ /*             str = js_ValueToString(cx, argv[0]); */ 
2074: /* MUTANT (rep_const) */            str = js_ValueToString(cx, argv[1]);
2074: /* MUTANT (rep_const) */            str = js_ValueToString(cx, argv[-1]);
2075: /* MUTANT (negate) */            if(! (!str))
2078: /* MUTANT (negate) */            if(! (!date_parseString(str, date)))
2080: /* MUTANT (del_stmt) */ /*             *date = TIMECLIP(*date); */ 
2083: /* MUTANT (del_stmt) */ /*         jsdouble array[MAXARGS]; */ 
2084: /* MUTANT (del_stmt) */ /*         uintN loop; */ 
2085: /* MUTANT (del_stmt) */ /*         jsdouble double_arg; */ 
2086: /* MUTANT (del_stmt) */ /*         jsdouble day; */ 
2087: /* MUTANT (del_stmt) */ /*         jsdouble msec_time; */ 
2089: /* MUTANT (rep_op) */        for (loop = 0; loop <= MAXARGS; loop++) {
2089: /* MUTANT (rep_op) */        for (loop = 0; loop > MAXARGS; loop++) {
2089: /* MUTANT (rep_op) */        for (loop = 0; loop >= MAXARGS; loop++) {
2089: /* MUTANT (rep_op) */        for (loop = 0; loop == MAXARGS; loop++) {
2089: /* MUTANT (rep_op) */        for (loop = 0; loop != MAXARGS; loop++) {
2089: /* MUTANT (rep_op) */        for (loop = 0; loop < MAXARGS; loop--) {
2089: /* MUTANT (rep_const) */        for (loop = 1; loop < MAXARGS; loop++) {
2089: /* MUTANT (rep_const) */        for (loop = -1; loop < MAXARGS; loop++) {
2090: /* MUTANT (rep_op) */            if (loop <= argc) {
2090: /* MUTANT (rep_op) */            if (loop > argc) {
2090: /* MUTANT (rep_op) */            if (loop >= argc) {
2090: /* MUTANT (rep_op) */            if (loop == argc) {
2090: /* MUTANT (rep_op) */            if (loop != argc) {
2090: /* MUTANT (negate) */            if(! (loop < argc)) {
2091: /* MUTANT (negate) */                if(! (!js_ValueToNumber(cx, argv[loop], &double_arg)))
2095: /* MUTANT (negate) */                if(! (!JSDOUBLE_IS_FINITE(double_arg))) {
2096: /* MUTANT (del_stmt) */ /*                     date = date_constructor(cx, obj); */ 
2097: /* MUTANT (negate) */                    if(! (!date))
2099: /* MUTANT (del_stmt) */ /*                     *date = *cx->runtime->jsNaN; */ 
2100: /* MUTANT (del_stmt) */ /*                     return JS_TRUE; */ 
2104: /* MUTANT (rep_op) */                if (loop != 2) {
2104: /* MUTANT (rep_const) */                if (loop == 0) {
2104: /* MUTANT (rep_const) */                if (loop == 1) {
2104: /* MUTANT (rep_const) */                if (loop == -1) {
2104: /* MUTANT (rep_const) */                if (loop == ((2)+1)) {
2104: /* MUTANT (rep_const) */                if (loop == ((2)-1)) {
2104: /* MUTANT (negate) */                if(! (loop == 2)) {
2105: /* MUTANT (del_stmt) */ /*                     array[loop] = 1; */  /* Default the date argument to 1. */
2105: /* MUTANT (rep_const) */                    array[loop] = 0; /* Default the date argument to 1. */
2105: /* MUTANT (rep_const) */                    array[loop] = -1; /* Default the date argument to 1. */
2105: /* MUTANT (rep_const) */                    array[loop] = ((1)+1); /* Default the date argument to 1. */
2107: /* MUTANT (del_stmt) */ /*                     array[loop] = 0; */ 
2107: /* MUTANT (rep_const) */                    array[loop] = 1;
2107: /* MUTANT (rep_const) */                    array[loop] = -1;
2113: /* MUTANT (negate) */        if(! (!date))
2117: /* MUTANT (rep_op) */        if (array[0] <= 0 && array[0] <= 99)
2117: /* MUTANT (rep_op) */        if (array[0] < 0 && array[0] <= 99)
2117: /* MUTANT (rep_op) */        if (array[0] > 0 && array[0] <= 99)
2117: /* MUTANT (rep_op) */        if (array[0] == 0 && array[0] <= 99)
2117: /* MUTANT (rep_op) */        if (array[0] != 0 && array[0] <= 99)
2117: /* MUTANT (rep_op) */        if (array[0] >= 0 || array[0] <= 99)
2117: /* MUTANT (rep_op) */        if (array[0] >= 0 && array[0] < 99)
2117: /* MUTANT (rep_op) */        if (array[0] >= 0 && array[0] > 99)
2117: /* MUTANT (rep_op) */        if (array[0] >= 0 && array[0] >= 99)
2117: /* MUTANT (rep_op) */        if (array[0] >= 0 && array[0] == 99)
2117: /* MUTANT (rep_op) */        if (array[0] >= 0 && array[0] != 99)
2117: /* MUTANT (rep_const) */        if (array[1] >= 0 && array[0] <= 99)
2117: /* MUTANT (rep_const) */        if (array[-1] >= 0 && array[0] <= 99)
2117: /* MUTANT (rep_const) */        if (array[0] >= 1 && array[0] <= 99)
2117: /* MUTANT (rep_const) */        if (array[0] >= -1 && array[0] <= 99)
2117: /* MUTANT (rep_const) */        if (array[0] >= 0 && array[1] <= 99)
2117: /* MUTANT (rep_const) */        if (array[0] >= 0 && array[-1] <= 99)
2117: /* MUTANT (rep_const) */        if (array[0] >= 0 && array[0] <= 0)
2117: /* MUTANT (rep_const) */        if (array[0] >= 0 && array[0] <= 1)
2117: /* MUTANT (rep_const) */        if (array[0] >= 0 && array[0] <= -1)
2117: /* MUTANT (rep_const) */        if (array[0] >= 0 && array[0] <= ((99)+1))
2117: /* MUTANT (rep_const) */        if (array[0] >= 0 && array[0] <= ((99)-1))
2117: /* MUTANT (negate) */        if(! (array[0] >= 0 && array[0] <= 99))
2118: /* MUTANT (rep_op) */            array[0] -= 1900;
2118: /* MUTANT (rep_op) */            array[0] *= 1900;
2118: /* MUTANT (rep_op) */            array[0] %= 1900;
2118: /* MUTANT (rep_const) */            array[1] += 1900;
2118: /* MUTANT (rep_const) */            array[-1] += 1900;
2118: /* MUTANT (rep_const) */            array[0] += 0;
2118: /* MUTANT (rep_const) */            array[0] += 1;
2118: /* MUTANT (rep_const) */            array[0] += -1;
2118: /* MUTANT (rep_const) */            array[0] += ((1900)+1);
2118: /* MUTANT (rep_const) */            array[0] += ((1900)-1);
2120: /* MUTANT (del_stmt) */ /*         day = MakeDay(array[0], array[1], array[2]); */ 
2120: /* MUTANT (rep_const) */        day = MakeDay(array[1], array[1], array[2]);
2120: /* MUTANT (rep_const) */        day = MakeDay(array[-1], array[1], array[2]);
2120: /* MUTANT (rep_const) */        day = MakeDay(array[0], array[0], array[2]);
2120: /* MUTANT (rep_const) */        day = MakeDay(array[0], array[-1], array[2]);
2120: /* MUTANT (rep_const) */        day = MakeDay(array[0], array[((1)+1)], array[2]);
2120: /* MUTANT (rep_const) */        day = MakeDay(array[0], array[1], array[0]);
2120: /* MUTANT (rep_const) */        day = MakeDay(array[0], array[1], array[1]);
2120: /* MUTANT (rep_const) */        day = MakeDay(array[0], array[1], array[-1]);
2120: /* MUTANT (rep_const) */        day = MakeDay(array[0], array[1], array[((2)+1)]);
2120: /* MUTANT (rep_const) */        day = MakeDay(array[0], array[1], array[((2)-1)]);
2121: /* MUTANT (del_stmt) */ /*         msec_time = MakeTime(array[3], array[4], array[5], array[6]); */ 
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[0], array[4], array[5], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[1], array[4], array[5], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[-1], array[4], array[5], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[((3)+1)], array[4], array[5], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[((3)-1)], array[4], array[5], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[0], array[5], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[1], array[5], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[-1], array[5], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[((4)+1)], array[5], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[((4)-1)], array[5], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[4], array[0], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[4], array[1], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[4], array[-1], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[4], array[((5)+1)], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[4], array[((5)-1)], array[6]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[4], array[5], array[0]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[4], array[5], array[1]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[4], array[5], array[-1]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[4], array[5], array[((6)+1)]);
2121: /* MUTANT (rep_const) */        msec_time = MakeTime(array[3], array[4], array[5], array[((6)-1)]);
2122: /* MUTANT (del_stmt) */ /*         msec_time = MakeDate(day, msec_time); */ 
2123: /* MUTANT (del_stmt) */ /*         msec_time = UTC(msec_time); */ 
2124: /* MUTANT (del_stmt) */ /*         *date = TIMECLIP(msec_time); */ 
2132: /* MUTANT (del_stmt) */ /*     JSObject *proto; */ 
2133: /* MUTANT (del_stmt) */ /*     jsdouble *proto_date; */ 
2136: /* MUTANT (del_stmt) */ /*     LocalTZA = -(PRMJ_LocalGMTDifference() * msPerSecond); */ 
2136: /* MUTANT (negate) */    LocalTZA = -(PRMJ_LocalGMTDif(!ference()) * msPerSecond);
2139: /* MUTANT (negate) */    if(! (!proto))
2143: /* MUTANT (negate) */    if(! (!JS_AliasProperty(cx, proto, "toUTCString", "toGMTString")))
2147: /* MUTANT (del_stmt) */ /*     proto_date = date_constructor(cx, proto); */ 
2148: /* MUTANT (negate) */    if(! (!proto_date))
2150: /* MUTANT (del_stmt) */ /*     *proto_date = *cx->runtime->jsNaN; */ 
2152: /* MUTANT (del_stmt) */ /*     return proto; */ 
2158: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
2159: /* MUTANT (del_stmt) */ /*     jsdouble *date; */ 
2161: /* MUTANT (del_stmt) */ /*     obj = js_NewObject(cx, &date_class, NULL, NULL); */ 
2162: /* MUTANT (negate) */    if(! (!obj))
2165: /* MUTANT (del_stmt) */ /*     date = date_constructor(cx, obj); */ 
2166: /* MUTANT (negate) */    if(! (!date))
2169: /* MUTANT (del_stmt) */ /*     *date = msec_time; */ 
2170: /* MUTANT (del_stmt) */ /*     return obj; */ 
2177: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
2178: /* MUTANT (del_stmt) */ /*     jsdouble msec_time; */ 
2180: /* MUTANT (del_stmt) */ /*     msec_time = date_msecFromDate(year, mon, mday, hour, min, sec, 0); */ 
2180: /* MUTANT (rep_const) */    msec_time = date_msecFromDate(year, mon, mday, hour, min, sec, 1);
2180: /* MUTANT (rep_const) */    msec_time = date_msecFromDate(year, mon, mday, hour, min, sec, -1);
2181: /* MUTANT (del_stmt) */ /*     obj = js_NewDateObjectMsec(cx, UTC(msec_time)); */ 
2182: /* MUTANT (del_stmt) */ /*     return obj; */ 
2188: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2190: /* MUTANT (rep_op) */    if (!date && JSDOUBLE_IS_NaN(*date))
2190: /* MUTANT (negate) */    if(! (!date || JSDOUBLE_IS_NaN(*date)))
2199: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2202: /* MUTANT (rep_op) */    if (!date && JSDOUBLE_IS_NaN(*date))
2202: /* MUTANT (negate) */    if(! (!date || JSDOUBLE_IS_NaN(*date)))
2203: /* MUTANT (rep_const) */        return 1;
2203: /* MUTANT (rep_const) */        return -1;
2204: /* MUTANT (del_stmt) */ /*     return (int) YearFromTime(LocalTime(*date)); */ 
2210: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2212: /* MUTANT (rep_op) */    if (!date && JSDOUBLE_IS_NaN(*date))
2212: /* MUTANT (negate) */    if(! (!date || JSDOUBLE_IS_NaN(*date)))
2213: /* MUTANT (rep_const) */        return 1;
2213: /* MUTANT (rep_const) */        return -1;
2214: /* MUTANT (del_stmt) */ /*     return (int) MonthFromTime(LocalTime(*date)); */ 
2220: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2222: /* MUTANT (rep_op) */    if (!date && JSDOUBLE_IS_NaN(*date))
2222: /* MUTANT (negate) */    if(! (!date || JSDOUBLE_IS_NaN(*date)))
2223: /* MUTANT (rep_const) */        return 1;
2223: /* MUTANT (rep_const) */        return -1;
2224: /* MUTANT (del_stmt) */ /*     return (int) DateFromTime(LocalTime(*date)); */ 
2230: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2232: /* MUTANT (rep_op) */    if (!date && JSDOUBLE_IS_NaN(*date))
2232: /* MUTANT (negate) */    if(! (!date || JSDOUBLE_IS_NaN(*date)))
2233: /* MUTANT (rep_const) */        return 1;
2233: /* MUTANT (rep_const) */        return -1;
2234: /* MUTANT (del_stmt) */ /*     return (int) HourFromTime(LocalTime(*date)); */ 
2240: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2242: /* MUTANT (rep_op) */    if (!date && JSDOUBLE_IS_NaN(*date))
2242: /* MUTANT (negate) */    if(! (!date || JSDOUBLE_IS_NaN(*date)))
2243: /* MUTANT (rep_const) */        return 1;
2243: /* MUTANT (rep_const) */        return -1;
2244: /* MUTANT (del_stmt) */ /*     return (int) MinFromTime(LocalTime(*date)); */ 
2250: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2252: /* MUTANT (rep_op) */    if (!date && JSDOUBLE_IS_NaN(*date))
2252: /* MUTANT (negate) */    if(! (!date || JSDOUBLE_IS_NaN(*date)))
2253: /* MUTANT (rep_const) */        return 1;
2253: /* MUTANT (rep_const) */        return -1;
2254: /* MUTANT (del_stmt) */ /*     return (int) SecFromTime(*date); */ 
2260: /* MUTANT (del_stmt) */ /*     jsdouble local; */ 
2261: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2262: /* MUTANT (negate) */    if(! (!date))
2264: /* MUTANT (del_stmt) */ /*     local = LocalTime(*date); */ 
2266: /* MUTANT (negate) */    if(! (JSDOUBLE_IS_NaN(local)))
2267: /* MUTANT (rep_const) */        local = 1;
2267: /* MUTANT (rep_const) */        local = -1;
2275: /* MUTANT (del_stmt) */ /*     *date = UTC(local); */ 
2281: /* MUTANT (del_stmt) */ /*     jsdouble local; */ 
2282: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2283: /* MUTANT (negate) */    if(! (!date))
2285: /* MUTANT (del_stmt) */ /*     local = LocalTime(*date); */ 
2287: /* MUTANT (negate) */    if(! (JSDOUBLE_IS_NaN(local)))
2296: /* MUTANT (del_stmt) */ /*     *date = UTC(local); */ 
2302: /* MUTANT (del_stmt) */ /*     jsdouble local; */ 
2303: /* MUTANT (del_stmt) */ /*     jsdouble *datep = date_getProlog(cx, obj, NULL); */ 
2304: /* MUTANT (negate) */    if(! (!datep))
2306: /* MUTANT (del_stmt) */ /*     local = LocalTime(*datep); */ 
2307: /* MUTANT (negate) */    if(! (JSDOUBLE_IS_NaN(local)))
2316: /* MUTANT (del_stmt) */ /*     *datep = UTC(local); */ 
2322: /* MUTANT (del_stmt) */ /*     jsdouble local; */ 
2323: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2324: /* MUTANT (negate) */    if(! (!date))
2326: /* MUTANT (del_stmt) */ /*     local = LocalTime(*date); */ 
2327: /* MUTANT (negate) */    if(! (JSDOUBLE_IS_NaN(local)))
2336: /* MUTANT (del_stmt) */ /*     *date = UTC(local); */ 
2342: /* MUTANT (del_stmt) */ /*     jsdouble local; */ 
2343: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2344: /* MUTANT (negate) */    if(! (!date))
2346: /* MUTANT (del_stmt) */ /*     local = LocalTime(*date); */ 
2347: /* MUTANT (negate) */    if(! (JSDOUBLE_IS_NaN(local)))
2356: /* MUTANT (del_stmt) */ /*     *date = UTC(local); */ 
2362: /* MUTANT (del_stmt) */ /*     jsdouble local; */ 
2363: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2364: /* MUTANT (negate) */    if(! (!date))
2366: /* MUTANT (del_stmt) */ /*     local = LocalTime(*date); */ 
2367: /* MUTANT (negate) */    if(! (JSDOUBLE_IS_NaN(local)))
2376: /* MUTANT (del_stmt) */ /*     *date = UTC(local); */ 
2382: /* MUTANT (del_stmt) */ /*     jsdouble *date = date_getProlog(cx, obj, NULL); */ 
2383: /* MUTANT (rep_op) */    if (!date && JSDOUBLE_IS_NaN(*date))
2383: /* MUTANT (negate) */    if(! (!date || JSDOUBLE_IS_NaN(*date)))
2384: /* MUTANT (rep_const) */        return 1;
2384: /* MUTANT (rep_const) */        return -1;
2385: /* MUTANT (del_stmt) */ /*     return (*date); */ 
