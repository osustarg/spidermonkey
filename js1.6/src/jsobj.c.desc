102: /* MUTANT (rep_const) */    1,
102: /* MUTANT (rep_const) */    -1,
121: /* MUTANT (rep_op) */    {js_proto_str, JSSLOT_PROTO, JSPROP_PERMANENT&JSPROP_SHARED,
123: /* MUTANT (rep_op) */    {js_parent_str,JSSLOT_PARENT,JSPROP_READONLY&JSPROP_PERMANENT|JSPROP_SHARED,
123: /* MUTANT (rep_op) */    {js_parent_str,JSSLOT_PARENT,JSPROP_READONLY|JSPROP_PERMANENT&JSPROP_SHARED,
125: /* MUTANT (rep_const) */    {js_count_str, 1,            JSPROP_PERMANENT,obj_getCount, obj_getCount},
125: /* MUTANT (rep_const) */    {js_count_str, -1,            JSPROP_PERMANENT,obj_getCount, obj_getCount},
126: /* MUTANT (rep_const) */    {1,0,0,0,0}
126: /* MUTANT (rep_const) */    {-1,0,0,0,0}
126: /* MUTANT (rep_const) */    {0,1,0,0,0}
126: /* MUTANT (rep_const) */    {0,-1,0,0,0}
126: /* MUTANT (rep_const) */    {0,0,1,0,0}
126: /* MUTANT (rep_const) */    {0,0,-1,0,0}
126: /* MUTANT (rep_const) */    {0,0,0,1,0}
126: /* MUTANT (rep_const) */    {0,0,0,-1,0}
126: /* MUTANT (rep_const) */    {0,0,0,0,1}
126: /* MUTANT (rep_const) */    {0,0,0,0,-1}
130: #define JSSLOT_COUNT 0 /* MUTANT (rep_const) */
130: #define JSSLOT_COUNT 1 /* MUTANT (rep_const) */
130: #define JSSLOT_COUNT -1 /* MUTANT (rep_const) */
130: #define JSSLOT_COUNT ((2)+1) /* MUTANT (rep_const) */
130: #define JSSLOT_COUNT ((2)-1) /* MUTANT (rep_const) */
135: /* MUTANT (rep_op) */    if (slot != JSSLOT_PROTO)
135: /* MUTANT (negate) */    if(! (slot == JSSLOT_PROTO))
138: /* MUTANT (rep_op) */                                        JSREPORT_WARNING & JSREPORT_STRICT,
147: /* MUTANT (del_stmt) */ /*     uint32 slot; */ 
148: /* MUTANT (del_stmt) */ /*     jsid propid; */ 
149: /* MUTANT (del_stmt) */ /*     JSAccessMode mode; */ 
150: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
151: /* MUTANT (del_stmt) */ /*     JSObject *pobj; */ 
152: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
153: /* MUTANT (del_stmt) */ /*     JSExtendedClass *xclasp; */ 
155: /* MUTANT (del_stmt) */ /*     slot = (uint32) JSVAL_TO_INT(id); */ 
156: /* MUTANT (rep_op) */    if (id != INT_TO_JSVAL(JSSLOT_PROTO)) {
156: /* MUTANT (negate) */    if(! (id == INT_TO_JSVAL(JSSLOT_PROTO))) {
157: /* MUTANT (del_stmt) */ /*         propid = ATOM_TO_JSID(cx->runtime->atomState.protoAtom); */ 
158: /* MUTANT (del_stmt) */ /*         mode = JSACC_PROTO; */ 
160: /* MUTANT (del_stmt) */ /*         propid = ATOM_TO_JSID(cx->runtime->atomState.parentAtom); */ 
161: /* MUTANT (del_stmt) */ /*         mode = JSACC_PARENT; */ 
165: /* MUTANT (negate) */    if(! (!OBJ_CHECK_ACCESS(cx, obj, propid, mode, vp, &attrs)))
168: /* MUTANT (del_stmt) */ /*     pobj = JSVAL_TO_OBJECT(*vp); */ 
169: /* MUTANT (negate) */    if(! (pobj)) {
170: /* MUTANT (del_stmt) */ /*         clasp = OBJ_GET_CLASS(cx, pobj); */ 
171: /* MUTANT (negate) */        if(! (clasp->flags & JSCLASS_IS_EXTENDED)) {
172: /* MUTANT (del_stmt) */ /*             xclasp = (JSExtendedClass *) clasp; */ 
173: /* MUTANT (negate) */            if(! (xclasp->outerObject)) {
174: /* MUTANT (del_stmt) */ /*                 pobj = xclasp->outerObject(cx, pobj); */ 
175: /* MUTANT (negate) */                if(! (!pobj))
177: /* MUTANT (del_stmt) */ /*                 *vp = OBJECT_TO_JSVAL(pobj); */ 
187: /* MUTANT (del_stmt) */ /*     JSObject *pobj; */ 
188: /* MUTANT (del_stmt) */ /*     uint32 slot; */ 
189: /* MUTANT (del_stmt) */ /*     jsid propid; */ 
190: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
192: /* MUTANT (negate) */    if(! (!JSVAL_IS_OBJECT(*vp)))
194: /* MUTANT (del_stmt) */ /*     pobj = JSVAL_TO_OBJECT(*vp); */ 
195: /* MUTANT (del_stmt) */ /*     slot = (uint32) JSVAL_TO_INT(id); */ 
196: /* MUTANT (rep_op) */    if (JS_HAS_STRICT_OPTION(cx) || !ReportStrictSlot(cx, slot))
196: /* MUTANT (negate) */    if(! (JS_HAS_STRICT_OPTION(cx) && !ReportStrictSlot(cx, slot)))
200: /* MUTANT (del_stmt) */ /*     propid = ATOM_TO_JSID(cx->runtime->atomState.protoAtom); */ 
201: /* MUTANT (rep_op) */    if (!OBJ_CHECK_ACCESS(cx, obj, propid, JSACC_PROTO&JSACC_WRITE, vp, &attrs))
201: /* MUTANT (negate) */    if(! (!OBJ_CHECK_ACCESS(cx, obj, propid, JSACC_PROTO|JSACC_WRITE, vp, &attrs)))
204: /* MUTANT (del_stmt) */ /*     return js_SetProtoOrParent(cx, obj, slot, pobj); */ 
210: /* MUTANT (del_stmt) */ /*     jsval iter_state; */ 
211: /* MUTANT (del_stmt) */ /*     jsid num_properties; */ 
212: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
214: /* MUTANT (rep_op) */    if (JS_HAS_STRICT_OPTION(cx) || !ReportStrictSlot(cx, JSSLOT_COUNT))
214: /* MUTANT (negate) */    if(! (JS_HAS_STRICT_OPTION(cx) && !ReportStrictSlot(cx, JSSLOT_COUNT)))
218: /* MUTANT (del_stmt) */ /*     iter_state = JSVAL_NULL; */ 
219: /* MUTANT (del_stmt) */ /*     ok = OBJ_ENUMERATE(cx, obj, JSENUMERATE_INIT, &iter_state, &num_properties); */ 
220: /* MUTANT (negate) */    if(! (!ok))
223: /* MUTANT (negate) */    if(! (!JSVAL_IS_INT(num_properties))) {
224: /* MUTANT (del_stmt) */ /*         JS_ASSERT(0); */ 
224: /* MUTANT (rep_const) */        JS_ASSERT(1);
224: /* MUTANT (rep_const) */        JS_ASSERT(-1);
225: /* MUTANT (del_stmt) */ /*         *vp = JSVAL_ZERO; */ 
226: /* MUTANT (del_stmt) */ /*         goto out; */ 
231: /* MUTANT (rep_op) */    if (iter_state == JSVAL_NULL)
231: /* MUTANT (negate) */    if(! (iter_state != JSVAL_NULL))
232: /* MUTANT (rep_const) */        ok = OBJ_ENUMERATE(cx, obj, JSENUMERATE_DESTROY, &iter_state, 1);
232: /* MUTANT (rep_const) */        ok = OBJ_ENUMERATE(cx, obj, JSENUMERATE_DESTROY, &iter_state, -1);
233: /* MUTANT (del_stmt) */ /*     return ok; */ 
245: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
246: /* MUTANT (del_stmt) */ /*     JSObject *obj2, *oldproto; */ 
247: /* MUTANT (del_stmt) */ /*     JSScope *scope, *newscope; */ 
271: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
275: /* MUTANT (negate) */    while(! (rt->setSlotBusy)) {
276: /* MUTANT (del_stmt) */ /*         jsrefcount saveDepth; */ 
279: /* MUTANT (del_stmt) */ /*         JS_RELEASE_LOCK(rt->setSlotLock); */ 
280: /* MUTANT (del_stmt) */ /*         saveDepth = JS_SuspendRequest(cx); */ 
281: /* MUTANT (del_stmt) */ /*         JS_ACQUIRE_LOCK(rt->setSlotLock); */ 
282: /* MUTANT (negate) */        if(! (rt->setSlotBusy))
284: /* MUTANT (del_stmt) */ /*         JS_RELEASE_LOCK(rt->setSlotLock); */ 
285: /* MUTANT (del_stmt) */ /*         JS_ResumeRequest(cx, saveDepth); */ 
286: /* MUTANT (del_stmt) */ /*         JS_ACQUIRE_LOCK(rt->setSlotLock); */ 
289: /* MUTANT (del_stmt) */ /*     JS_RELEASE_LOCK(rt->setSlotLock); */ 
306: /* MUTANT (negate) */    while(! (obj2)) {
307: /* MUTANT (rep_op) */        if (obj2 != obj) {
307: /* MUTANT (negate) */        if(! (obj2 == obj)) {
308: /* MUTANT (del_stmt) */ /*             SET_SLOT_DONE(rt); */ 
314: /* MUTANT (rep_op) */                                 (slot != JSSLOT_PROTO) ? js_proto_str
318: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
323: /* MUTANT (rep_op) */    if (slot != JSSLOT_PROTO && OBJ_IS_NATIVE(obj)) {
323: /* MUTANT (rep_op) */    if (slot == JSSLOT_PROTO || OBJ_IS_NATIVE(obj)) {
323: /* MUTANT (negate) */    if(! (slot == JSSLOT_PROTO && OBJ_IS_NATIVE(obj))) {
325: /* MUTANT (del_stmt) */ /*         JS_LOCK_OBJ(cx, obj); */ 
326: /* MUTANT (del_stmt) */ /*         scope = OBJ_SCOPE(obj); */ 
327: /* MUTANT (del_stmt) */ /*         oldproto = JSVAL_TO_OBJECT(LOCKED_OBJ_GET_SLOT(obj, JSSLOT_PROTO)); */ 
328: /* MUTANT (rep_op) */        if (oldproto || OBJ_SCOPE(oldproto) == scope) {
328: /* MUTANT (rep_op) */        if (oldproto && OBJ_SCOPE(oldproto) != scope) {
328: /* MUTANT (negate) */        if(! (oldproto && OBJ_SCOPE(oldproto) == scope)) {
330: /* MUTANT (rep_op) */            if (!pobj &&
331: /* MUTANT (rep_op) */                !OBJ_IS_NATIVE(pobj) &&
332: /* MUTANT (rep_op) */                OBJ_GET_CLASS(cx, pobj) == LOCKED_OBJ_GET_CLASS(oldproto)) {
346: /* MUTANT (del_stmt) */ /*                 scope = js_GetMutableScope(cx, obj); */ 
347: /* MUTANT (negate) */                if(! (!scope)) {
348: /* MUTANT (del_stmt) */ /*                     JS_UNLOCK_OBJ(cx, obj); */ 
349: /* MUTANT (del_stmt) */ /*                     SET_SLOT_DONE(rt); */ 
350: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
352: /* MUTANT (rep_op) */            } else if (OBJ_SCOPE(pobj) == scope) {
352: /* MUTANT (negate) */            } else if(! (OBJ_SCOPE(pobj) != scope)) {
359: /* MUTANT (negate) */                if(! (scope->ownercx)) {
360: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(scope->ownercx == cx); */ 
360: /* MUTANT (rep_op) */                    JS_ASSERT(scope->ownercx != cx);
361: /* MUTANT (del_stmt) */ /*                     rt->setSlotScope = scope; */ 
367: /* MUTANT (del_stmt) */ /*                 newscope = (JSScope *) js_HoldObjectMap(cx, pobj->map); */ 
368: /* MUTANT (del_stmt) */ /*                 obj->map = &newscope->map; */ 
369: /* MUTANT (del_stmt) */ /*                 js_DropObjectMap(cx, &scope->map, obj); */ 
370: /* MUTANT (del_stmt) */ /*                 JS_TRANSFER_SCOPE_LOCK(cx, scope, newscope); */ 
371: /* MUTANT (del_stmt) */ /*                 scope = newscope; */ 
378: /* MUTANT (del_stmt) */ /*         JS_UNLOCK_SCOPE(cx, scope); */ 
380: /* MUTANT (del_stmt) */ /*         OBJ_SET_SLOT(cx, obj, slot, OBJECT_TO_JSVAL(pobj)); */ 
384: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
392: /* MUTANT (del_stmt) */ /*     return (JSHashNumber)JS_PTR_TO_UINT32(key) >> JSVAL_TAGBITS; */ 
398: /* MUTANT (del_stmt) */ /*     JSSharpObjectMap *map; */ 
399: /* MUTANT (del_stmt) */ /*     JSHashTable *table; */ 
400: /* MUTANT (del_stmt) */ /*     JSHashNumber hash; */ 
401: /* MUTANT (del_stmt) */ /*     JSHashEntry **hep, *he; */ 
402: /* MUTANT (del_stmt) */ /*     jsatomid sharpid; */ 
403: /* MUTANT (del_stmt) */ /*     JSIdArray *ida; */ 
404: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
405: /* MUTANT (del_stmt) */ /*     jsint i, length; */ 
406: /* MUTANT (del_stmt) */ /*     jsid id; */ 
409: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
410: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
413: /* MUTANT (del_stmt) */ /*     int stackDummy; */ 
415: /* MUTANT (negate) */    if(! (!JS_CHECK_STACK_SIZE(cx, stackDummy))) {
416: /* MUTANT (del_stmt) */ /*         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_OVER_RECURSED); */ 
417: /* MUTANT (del_stmt) */ /*         return NULL; */ 
421: /* MUTANT (del_stmt) */ /*     table = map->table; */ 
422: /* MUTANT (del_stmt) */ /*     hash = js_hash_object(obj); */ 
423: /* MUTANT (del_stmt) */ /*     hep = JS_HashTableRawLookup(table, hash, obj); */ 
424: /* MUTANT (del_stmt) */ /*     he = *hep; */ 
425: /* MUTANT (negate) */    if(! (!he)) {
426: /* MUTANT (del_stmt) */ /*         sharpid = 0; */ 
426: /* MUTANT (rep_const) */        sharpid = 1;
426: /* MUTANT (rep_const) */        sharpid = -1;
429: /* MUTANT (negate) */        if(! (!he)) {
430: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
431: /* MUTANT (del_stmt) */ /*             return NULL; */ 
440: /* MUTANT (rep_op) */	--map->depth;
441: /* MUTANT (del_stmt) */ /*         ida = JS_Enumerate(cx, obj); */ 
442: /* MUTANT (del_stmt) */ /* 	--map->depth; */ 
442: /* MUTANT (rep_op) */	++map->depth;
443: /* MUTANT (negate) */        if(! (!ida))
446: /* MUTANT (del_stmt) */ /*         ok = JS_TRUE; */ 
447: /* MUTANT (rep_op) */        for (i = 0, length = ida->length; i <= length; i++) {
447: /* MUTANT (rep_op) */        for (i = 0, length = ida->length; i > length; i++) {
447: /* MUTANT (rep_op) */        for (i = 0, length = ida->length; i >= length; i++) {
447: /* MUTANT (rep_op) */        for (i = 0, length = ida->length; i == length; i++) {
447: /* MUTANT (rep_op) */        for (i = 0, length = ida->length; i != length; i++) {
447: /* MUTANT (rep_op) */        for (i = 0, length = ida->length; i < length; i--) {
447: /* MUTANT (rep_const) */        for (i = 1, length = ida->length; i < length; i++) {
447: /* MUTANT (rep_const) */        for (i = -1, length = ida->length; i < length; i++) {
448: /* MUTANT (del_stmt) */ /*             id = ida->vector[i]; */ 
451: /* MUTANT (negate) */            if(! (!ok))
453: /* MUTANT (negate) */            if(! (!prop))
455: /* MUTANT (del_stmt) */ /*             ok = OBJ_GET_ATTRIBUTES(cx, obj2, id, prop, &attrs); */ 
456: /* MUTANT (negate) */            if(! (ok)) {
457: /* MUTANT (rep_op) */                if (OBJ_IS_NATIVE(obj2) ||
458: /* MUTANT (rep_op) */                    (attrs & (JSPROP_GETTER & JSPROP_SETTER))) {
459: /* MUTANT (del_stmt) */ /*                     val = JSVAL_NULL; */ 
460: /* MUTANT (negate) */                    if(! (attrs & JSPROP_GETTER))
462: /* MUTANT (negate) */                    if(! (attrs & JSPROP_SETTER)) {
463: /* MUTANT (rep_op) */                        if (val == JSVAL_NULL) {
463: /* MUTANT (negate) */                        if(! (val != JSVAL_NULL)) {
467: /* MUTANT (rep_op) */                                  == NULL);
472: /* MUTANT (del_stmt) */ /*                     ok = OBJ_GET_PROPERTY(cx, obj, id, &val); */ 
479: /* MUTANT (negate) */            if(! (!ok))
481: /* MUTANT (rep_op) */            if (!JSVAL_IS_PRIMITIVE(val) ||
483: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
484: /* MUTANT (del_stmt) */ /*                 break; */ 
487: /* MUTANT (rep_op) */        if (!ok && !idap)
487: /* MUTANT (negate) */        if(! (!ok || !idap))
489: /* MUTANT (negate) */        if(! (!ok))
492: /* MUTANT (del_stmt) */ /*         sharpid = JS_PTR_TO_UINT32(he->value); */ 
493: /* MUTANT (rep_op) */        if (sharpid != 0) {
493: /* MUTANT (rep_const) */        if (sharpid == 1) {
493: /* MUTANT (rep_const) */        if (sharpid == -1) {
493: /* MUTANT (negate) */        if(! (sharpid == 0)) {
494: /* MUTANT (del_stmt) */ /*             sharpid = ++map->sharpgen << SHARP_ID_SHIFT; */ 
494: /* MUTANT (rep_op) */            sharpid = --map->sharpgen << SHARP_ID_SHIFT;
495: /* MUTANT (del_stmt) */ /*             he->value = JS_UINT32_TO_PTR(sharpid); */ 
499: /* MUTANT (negate) */    if(! (idap))
501: /* MUTANT (del_stmt) */ /*     return he; */ 
508: /* MUTANT (del_stmt) */ /*     JSSharpObjectMap *map; */ 
509: /* MUTANT (del_stmt) */ /*     JSHashTable *table; */ 
510: /* MUTANT (del_stmt) */ /*     JSIdArray *ida; */ 
511: /* MUTANT (del_stmt) */ /*     JSHashNumber hash; */ 
512: /* MUTANT (del_stmt) */ /*     JSHashEntry *he, **hep; */ 
513: /* MUTANT (del_stmt) */ /*     jsatomid sharpid; */ 
514: /* MUTANT (del_stmt) */ /*     char buf[20]; */ 
514: /* MUTANT (rep_const) */    char buf[0];
514: /* MUTANT (rep_const) */    char buf[1];
514: /* MUTANT (rep_const) */    char buf[-1];
514: /* MUTANT (rep_const) */    char buf[((20)+1)];
514: /* MUTANT (rep_const) */    char buf[((20)-1)];
515: /* MUTANT (del_stmt) */ /*     size_t len; */ 
517: /* MUTANT (rep_op) */    if (JS_HAS_NATIVE_BRANCH_CALLBACK_OPTION(cx) ||
518: /* MUTANT (rep_op) */        cx->branchCallback ||
520: /* MUTANT (del_stmt) */ /*         return NULL; */ 
525: /* MUTANT (del_stmt) */ /*     map = &cx->sharpObjectMap; */ 
526: /* MUTANT (del_stmt) */ /*     table = map->table; */ 
527: /* MUTANT (negate) */    if(! (!table)) {
528: /* MUTANT (rep_const) */        table = JS_NewHashTable(0, js_hash_object, JS_CompareValues,
528: /* MUTANT (rep_const) */        table = JS_NewHashTable(1, js_hash_object, JS_CompareValues,
528: /* MUTANT (rep_const) */        table = JS_NewHashTable(-1, js_hash_object, JS_CompareValues,
528: /* MUTANT (rep_const) */        table = JS_NewHashTable(((8)+1), js_hash_object, JS_CompareValues,
528: /* MUTANT (rep_const) */        table = JS_NewHashTable(((8)-1), js_hash_object, JS_CompareValues,
530: /* MUTANT (negate) */        if(! (!table)) {
531: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
532: /* MUTANT (del_stmt) */ /*             return NULL; */ 
535: /* MUTANT (del_stmt) */ /*         JS_KEEP_ATOMS(cx->runtime); */ 
540: /* MUTANT (rep_op) */    if (map->depth != 0) {
540: /* MUTANT (rep_const) */    if (map->depth == 1) {
540: /* MUTANT (rep_const) */    if (map->depth == -1) {
540: /* MUTANT (negate) */    if(! (map->depth == 0)) {
541: /* MUTANT (del_stmt) */ /*         he = MarkSharpObjects(cx, obj, &ida); */ 
542: /* MUTANT (negate) */        if(! (!he))
544: /* MUTANT (del_stmt) */ /*         JS_ASSERT((JS_PTR_TO_UINT32(he->value) & SHARP_BIT) == 0); */ 
544: /* MUTANT (rep_op) */        JS_ASSERT((JS_PTR_TO_UINT32(he->value) & SHARP_BIT) != 0);
544: /* MUTANT (rep_const) */        JS_ASSERT((JS_PTR_TO_UINT32(he->value) & SHARP_BIT) == 1);
544: /* MUTANT (rep_const) */        JS_ASSERT((JS_PTR_TO_UINT32(he->value) & SHARP_BIT) == -1);
545: /* MUTANT (negate) */        if(! (!idap)) {
546: /* MUTANT (del_stmt) */ /*             JS_DestroyIdArray(cx, ida); */ 
547: /* MUTANT (del_stmt) */ /*             ida = NULL; */ 
550: /* MUTANT (del_stmt) */ /*         hash = js_hash_object(obj); */ 
551: /* MUTANT (del_stmt) */ /*         hep = JS_HashTableRawLookup(table, hash, obj); */ 
552: /* MUTANT (del_stmt) */ /*         he = *hep; */ 
561: /* MUTANT (negate) */        if(! (!he)) {
562: /* MUTANT (del_stmt) */ /*             he = JS_HashTableRawAdd(table, hep, hash, obj, NULL); */ 
563: /* MUTANT (negate) */            if(! (!he)) {
564: /* MUTANT (del_stmt) */ /*                 JS_ReportOutOfMemory(cx); */ 
565: /* MUTANT (del_stmt) */ /*                 goto bad; */ 
567: /* MUTANT (rep_const) */            sharpid = 1;
567: /* MUTANT (rep_const) */            sharpid = -1;
568: /* MUTANT (del_stmt) */ /*             goto out; */ 
573: /* MUTANT (rep_op) */    if (sharpid == 0) {
573: /* MUTANT (rep_const) */    if (sharpid != 1) {
573: /* MUTANT (rep_const) */    if (sharpid != -1) {
573: /* MUTANT (negate) */    if(! (sharpid != 0)) {
577: /* MUTANT (del_stmt) */ /*         *sp = js_InflateString(cx, buf, &len); */ 
578: /* MUTANT (negate) */        if(! (!*sp)) {
579: /* MUTANT (negate) */            if(! (ida))
581: /* MUTANT (del_stmt) */ /*             goto bad; */ 
587: /* MUTANT (rep_op) */    if ((sharpid & SHARP_BIT) != 0) {
587: /* MUTANT (rep_const) */    if ((sharpid & SHARP_BIT) == 1) {
587: /* MUTANT (rep_const) */    if ((sharpid & SHARP_BIT) == -1) {
587: /* MUTANT (negate) */    if(! ((sharpid & SHARP_BIT) == 0)) {
588: /* MUTANT (rep_op) */        if (idap || !ida) {
588: /* MUTANT (negate) */        if(! (idap && !ida)) {
589: /* MUTANT (del_stmt) */ /*             ida = JS_Enumerate(cx, obj); */ 
590: /* MUTANT (negate) */            if(! (!ida)) {
591: /* MUTANT (negate) */                if(! (*sp)) {
592: /* MUTANT (del_stmt) */ /*                     JS_free(cx, *sp); */ 
593: /* MUTANT (del_stmt) */ /*                     *sp = NULL; */ 
598: /* MUTANT (rep_op) */        map->depth--;
601: /* MUTANT (negate) */    if(! (idap))
603: /* MUTANT (del_stmt) */ /*     return he; */ 
607: /* MUTANT (rep_op) */    if (map->depth != 0) {
607: /* MUTANT (rep_const) */    if (map->depth == 1) {
607: /* MUTANT (rep_const) */    if (map->depth == -1) {
607: /* MUTANT (negate) */    if(! (map->depth == 0)) {
608: /* MUTANT (del_stmt) */ /*         JS_UNKEEP_ATOMS(cx->runtime); */ 
609: /* MUTANT (del_stmt) */ /*         map->sharpgen = 0; */ 
609: /* MUTANT (rep_const) */        map->sharpgen = 1;
609: /* MUTANT (rep_const) */        map->sharpgen = -1;
610: /* MUTANT (del_stmt) */ /*         JS_HashTableDestroy(map->table); */ 
611: /* MUTANT (del_stmt) */ /*         map->table = NULL; */ 
619: /* MUTANT (del_stmt) */ /*     JSSharpObjectMap *map; */ 
620: /* MUTANT (del_stmt) */ /*     JSIdArray *ida; */ 
622: /* MUTANT (del_stmt) */ /*     map = &cx->sharpObjectMap; */ 
623: /* MUTANT (del_stmt) */ /*     JS_ASSERT(map->depth > 0); */ 
623: /* MUTANT (rep_op) */    JS_ASSERT(map->depth <= 0);
623: /* MUTANT (rep_op) */    JS_ASSERT(map->depth < 0);
623: /* MUTANT (rep_op) */    JS_ASSERT(map->depth >= 0);
623: /* MUTANT (rep_op) */    JS_ASSERT(map->depth == 0);
623: /* MUTANT (rep_op) */    JS_ASSERT(map->depth != 0);
623: /* MUTANT (rep_const) */    JS_ASSERT(map->depth > 1);
623: /* MUTANT (rep_const) */    JS_ASSERT(map->depth > -1);
624: /* MUTANT (rep_op) */    if (++map->depth == 0) {
624: /* MUTANT (rep_op) */    if (--map->depth != 0) {
624: /* MUTANT (rep_const) */    if (--map->depth == 1) {
624: /* MUTANT (rep_const) */    if (--map->depth == -1) {
624: /* MUTANT (negate) */    if(! (--map->depth == 0)) {
625: /* MUTANT (del_stmt) */ /*         JS_UNKEEP_ATOMS(cx->runtime); */ 
626: /* MUTANT (del_stmt) */ /*         map->sharpgen = 0; */ 
626: /* MUTANT (rep_const) */        map->sharpgen = 1;
626: /* MUTANT (rep_const) */        map->sharpgen = -1;
627: /* MUTANT (del_stmt) */ /*         JS_HashTableDestroy(map->table); */ 
628: /* MUTANT (del_stmt) */ /*         map->table = NULL; */ 
630: /* MUTANT (negate) */    if(! (idap)) {
631: /* MUTANT (del_stmt) */ /*         ida = *idap; */ 
632: /* MUTANT (negate) */        if(! (ida)) {
633: /* MUTANT (del_stmt) */ /*             JS_DestroyIdArray(cx, ida); */ 
634: /* MUTANT (del_stmt) */ /*             *idap = NULL; */ 
642: /* MUTANT (del_stmt) */ /*     GC_MARK((JSContext *)arg, (JSObject *)he->key, "sharp table entry", NULL); */ 
643: /* MUTANT (del_stmt) */ /*     return JS_DHASH_NEXT; */ 
649: /* MUTANT (del_stmt) */ /*     JS_ASSERT(map->depth > 0); */ 
649: /* MUTANT (rep_op) */    JS_ASSERT(map->depth <= 0);
649: /* MUTANT (rep_op) */    JS_ASSERT(map->depth < 0);
649: /* MUTANT (rep_op) */    JS_ASSERT(map->depth >= 0);
649: /* MUTANT (rep_op) */    JS_ASSERT(map->depth == 0);
649: /* MUTANT (rep_op) */    JS_ASSERT(map->depth != 0);
649: /* MUTANT (rep_const) */    JS_ASSERT(map->depth > 1);
649: /* MUTANT (rep_const) */    JS_ASSERT(map->depth > -1);
650: /* MUTANT (del_stmt) */ /*     JS_ASSERT(map->table); */ 
672: /* MUTANT (del_stmt) */ /*     JS_HashTableEnumerateEntries(map->table, gc_sharp_table_entry_marker, cx); */ 
675: #define OBJ_TOSTRING_EXTRA      0        /* MUTANT (rep_const) *//* for 4 local GC roots */
675: #define OBJ_TOSTRING_EXTRA      1        /* MUTANT (rep_const) *//* for 4 local GC roots */
675: #define OBJ_TOSTRING_EXTRA      -1        /* MUTANT (rep_const) *//* for 4 local GC roots */
675: #define OBJ_TOSTRING_EXTRA      ((4)+1)        /* MUTANT (rep_const) *//* for 4 local GC roots */
675: #define OBJ_TOSTRING_EXTRA      ((4)-1)        /* MUTANT (rep_const) *//* for 4 local GC roots */
682: /* MUTANT (del_stmt) */ /*     JSBool ok, outermost; */ 
683: /* MUTANT (del_stmt) */ /*     JSHashEntry *he; */ 
684: /* MUTANT (del_stmt) */ /*     JSIdArray *ida; */ 
685: /* MUTANT (del_stmt) */ /*     jschar *chars, *ochars, *vsharp; */ 
686: /* MUTANT (del_stmt) */ /*     const jschar *idstrchars, *vchars; */ 
687: /* MUTANT (del_stmt) */ /*     size_t nchars, idstrlength, gsoplength, vlength, vsharplength, curlen; */ 
688: /* MUTANT (del_stmt) */ /*     char *comma; */ 
689: /* MUTANT (del_stmt) */ /*     jsint i, j, length, valcnt; */ 
690: /* MUTANT (del_stmt) */ /*     jsid id; */ 
693: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
694: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
697: /* MUTANT (del_stmt) */ /*     JSString *gsop[2]; */ 
697: /* MUTANT (rep_const) */    JSString *gsop[0];
697: /* MUTANT (rep_const) */    JSString *gsop[1];
697: /* MUTANT (rep_const) */    JSString *gsop[-1];
697: /* MUTANT (rep_const) */    JSString *gsop[((2)+1)];
697: /* MUTANT (rep_const) */    JSString *gsop[((2)-1)];
698: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
699: /* MUTANT (del_stmt) */ /*     JSString *idstr, *valstr, *str; */ 
700: /* MUTANT (del_stmt) */ /*     int stackDummy; */ 
702: /* MUTANT (negate) */    if(! (!JS_CHECK_STACK_SIZE(cx, stackDummy))) {
703: /* MUTANT (del_stmt) */ /*         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_OVER_RECURSED); */ 
704: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
711: /* MUTANT (rep_op) */    outermost = !JS_VERSION_IS_1_2(cx) || cx->sharpObjectMap.depth == 0;
711: /* MUTANT (rep_op) */    outermost = !JS_VERSION_IS_1_2(cx) && cx->sharpObjectMap.depth != 0;
711: /* MUTANT (rep_const) */    outermost = !JS_VERSION_IS_1_2(cx) && cx->sharpObjectMap.depth == 1;
711: /* MUTANT (rep_const) */    outermost = !JS_VERSION_IS_1_2(cx) && cx->sharpObjectMap.depth == -1;
712: /* MUTANT (del_stmt) */ /*     he = js_EnterSharpObject(cx, obj, &ida, &chars); */ 
713: /* MUTANT (negate) */    if(! (!he))
715: /* MUTANT (negate) */    if(! (IS_SHARP(he))) {
721: /* MUTANT (del_stmt) */ /*         JS_ASSERT(!ida); */ 
725: /* MUTANT (rep_const) */        chars[1] = '{';
725: /* MUTANT (rep_const) */        chars[-1] = '{';
726: /* MUTANT (del_stmt) */ /*         chars[1] = '}'; */ 
726: /* MUTANT (rep_const) */        chars[0] = '}';
726: /* MUTANT (rep_const) */        chars[-1] = '}';
726: /* MUTANT (rep_const) */        chars[((1)+1)] = '}';
727: /* MUTANT (del_stmt) */ /*         chars[2] = 0; */ 
727: /* MUTANT (rep_const) */        chars[0] = 0;
727: /* MUTANT (rep_const) */        chars[1] = 0;
727: /* MUTANT (rep_const) */        chars[-1] = 0;
727: /* MUTANT (rep_const) */        chars[((2)+1)] = 0;
727: /* MUTANT (rep_const) */        chars[((2)-1)] = 0;
727: /* MUTANT (rep_const) */        chars[2] = 1;
727: /* MUTANT (rep_const) */        chars[2] = -1;
728: /* MUTANT (del_stmt) */ /*         nchars = 2; */ 
728: /* MUTANT (rep_const) */        nchars = 0;
728: /* MUTANT (rep_const) */        nchars = 1;
728: /* MUTANT (rep_const) */        nchars = -1;
728: /* MUTANT (rep_const) */        nchars = ((2)+1);
728: /* MUTANT (rep_const) */        nchars = ((2)-1);
733: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
735: /* MUTANT (negate) */    if(! (!chars)) {
737: /* MUTANT (del_stmt) */ /*         chars = (jschar *) malloc(((outermost ? 4 : 2) + 1) * sizeof(jschar)); */ 
737: /* MUTANT (rep_op) */        chars = (jschar *) malloc(((outermost ? 4 : 2) - 1) * sizeof(jschar));
737: /* MUTANT (rep_op) */        chars = (jschar *) malloc(((outermost ? 4 : 2) * 1) * sizeof(jschar));
737: /* MUTANT (rep_op) */        chars = (jschar *) malloc(((outermost ? 4 : 2) % 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? 0 : 2) + 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? 1 : 2) + 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? -1 : 2) + 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? ((4)+1) : 2) + 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? ((4)-1) : 2) + 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? 4 : 0) + 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? 4 : 1) + 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? 4 : -1) + 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? 4 : ((2)+1)) + 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? 4 : ((2)-1)) + 1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? 4 : 2) + 0) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? 4 : 2) + -1) * sizeof(jschar));
737: /* MUTANT (rep_const) */        chars = (jschar *) malloc(((outermost ? 4 : 2) + ((1)+1)) * sizeof(jschar));
738: /* MUTANT (del_stmt) */ /*         nchars = 0; */ 
738: /* MUTANT (rep_const) */        nchars = 1;
738: /* MUTANT (rep_const) */        nchars = -1;
739: /* MUTANT (negate) */        if(! (!chars))
741: /* MUTANT (negate) */        if(! (outermost))
742: /* MUTANT (rep_op) */            chars[nchars--] = '(';
745: /* MUTANT (del_stmt) */ /*         MAKE_SHARP(he); */ 
746: /* MUTANT (del_stmt) */ /*         nchars = js_strlen(chars); */ 
748: /* MUTANT (rep_op) */            realloc((ochars = chars), (nchars - 2 + 1) * sizeof(jschar));
748: /* MUTANT (rep_op) */            realloc((ochars = chars), (nchars * 2 + 1) * sizeof(jschar));
748: /* MUTANT (rep_op) */            realloc((ochars = chars), (nchars % 2 + 1) * sizeof(jschar));
748: /* MUTANT (rep_op) */            realloc((ochars = chars), (nchars + 2 - 1) * sizeof(jschar));
748: /* MUTANT (rep_op) */            realloc((ochars = chars), (nchars + 2 * 1) * sizeof(jschar));
748: /* MUTANT (rep_op) */            realloc((ochars = chars), (nchars + 2 % 1) * sizeof(jschar));
748: /* MUTANT (rep_const) */            realloc((ochars = chars), (nchars + 0 + 1) * sizeof(jschar));
748: /* MUTANT (rep_const) */            realloc((ochars = chars), (nchars + 1 + 1) * sizeof(jschar));
748: /* MUTANT (rep_const) */            realloc((ochars = chars), (nchars + -1 + 1) * sizeof(jschar));
748: /* MUTANT (rep_const) */            realloc((ochars = chars), (nchars + ((2)+1) + 1) * sizeof(jschar));
748: /* MUTANT (rep_const) */            realloc((ochars = chars), (nchars + ((2)-1) + 1) * sizeof(jschar));
748: /* MUTANT (rep_const) */            realloc((ochars = chars), (nchars + 2 + 0) * sizeof(jschar));
748: /* MUTANT (rep_const) */            realloc((ochars = chars), (nchars + 2 + -1) * sizeof(jschar));
748: /* MUTANT (rep_const) */            realloc((ochars = chars), (nchars + 2 + ((1)+1)) * sizeof(jschar));
749: /* MUTANT (negate) */        if(! (!chars)) {
750: /* MUTANT (del_stmt) */ /*             free(ochars); */ 
751: /* MUTANT (del_stmt) */ /*             goto error; */ 
753: /* MUTANT (negate) */        if(! (outermost)) {
759: /* MUTANT (del_stmt) */ /*             outermost = JS_FALSE; */ 
764: /* MUTANT (negate) */    if(! (cx->options & JSOPTION_LOGCALL_TOSOURCE)) {
765: /* MUTANT (del_stmt) */ /*         const char *classname = OBJ_GET_CLASS(cx, obj)->name; */ 
766: /* MUTANT (del_stmt) */ /*         size_t classnchars = strlen(classname); */ 
767: /* MUTANT (del_stmt) */ /*         static const char classpropid[] = "C"; */ 
768: /* MUTANT (del_stmt) */ /*         const char *cp; */ 
769: /* MUTANT (del_stmt) */ /*         size_t onchars = nchars; */ 
772: /* MUTANT (del_stmt) */ /*         classnchars += sizeof classpropid - 1 + 2 + 2; */ 
772: /* MUTANT (rep_op) */        classnchars -= sizeof classpropid - 1 + 2 + 2;
772: /* MUTANT (rep_op) */        classnchars *= sizeof classpropid - 1 + 2 + 2;
772: /* MUTANT (rep_op) */        classnchars %= sizeof classpropid - 1 + 2 + 2;
772: /* MUTANT (rep_op) */        classnchars += sizeof classpropid - 1 - 2 + 2;
772: /* MUTANT (rep_op) */        classnchars += sizeof classpropid - 1 * 2 + 2;
772: /* MUTANT (rep_op) */        classnchars += sizeof classpropid - 1 % 2 + 2;
772: /* MUTANT (rep_op) */        classnchars += sizeof classpropid - 1 + 2 - 2;
772: /* MUTANT (rep_op) */        classnchars += sizeof classpropid - 1 + 2 * 2;
772: /* MUTANT (rep_op) */        classnchars += sizeof classpropid - 1 + 2 % 2;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 0 + 2 + 2;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - -1 + 2 + 2;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - ((1)+1) + 2 + 2;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 1 + 0 + 2;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 1 + 1 + 2;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 1 + -1 + 2;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 1 + ((2)+1) + 2;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 1 + ((2)-1) + 2;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 1 + 2 + 0;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 1 + 2 + 1;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 1 + 2 + -1;
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 1 + 2 + ((2)+1);
772: /* MUTANT (rep_const) */        classnchars += sizeof classpropid - 1 + 2 + ((2)-1);
773: /* MUTANT (negate) */        if(! (ida->length))
774: /* MUTANT (rep_op) */            classnchars -= 2;
774: /* MUTANT (rep_op) */            classnchars *= 2;
774: /* MUTANT (rep_op) */            classnchars %= 2;
774: /* MUTANT (rep_const) */            classnchars += 0;
774: /* MUTANT (rep_const) */            classnchars += 1;
774: /* MUTANT (rep_const) */            classnchars += -1;
774: /* MUTANT (rep_const) */            classnchars += ((2)+1);
774: /* MUTANT (rep_const) */            classnchars += ((2)-1);
779: /* MUTANT (rep_op) */                    (nchars - classnchars + 2 + 1) * sizeof(jschar));
779: /* MUTANT (rep_op) */                    (nchars * classnchars + 2 + 1) * sizeof(jschar));
779: /* MUTANT (rep_op) */                    (nchars % classnchars + 2 + 1) * sizeof(jschar));
779: /* MUTANT (rep_op) */                    (nchars + classnchars - 2 + 1) * sizeof(jschar));
779: /* MUTANT (rep_op) */                    (nchars + classnchars * 2 + 1) * sizeof(jschar));
779: /* MUTANT (rep_op) */                    (nchars + classnchars % 2 + 1) * sizeof(jschar));
779: /* MUTANT (rep_op) */                    (nchars + classnchars + 2 - 1) * sizeof(jschar));
779: /* MUTANT (rep_op) */                    (nchars + classnchars + 2 * 1) * sizeof(jschar));
779: /* MUTANT (rep_op) */                    (nchars + classnchars + 2 % 1) * sizeof(jschar));
779: /* MUTANT (rep_const) */                    (nchars + classnchars + 0 + 1) * sizeof(jschar));
779: /* MUTANT (rep_const) */                    (nchars + classnchars + 1 + 1) * sizeof(jschar));
779: /* MUTANT (rep_const) */                    (nchars + classnchars + -1 + 1) * sizeof(jschar));
779: /* MUTANT (rep_const) */                    (nchars + classnchars + ((2)+1) + 1) * sizeof(jschar));
779: /* MUTANT (rep_const) */                    (nchars + classnchars + ((2)-1) + 1) * sizeof(jschar));
779: /* MUTANT (rep_const) */                    (nchars + classnchars + 2 + 0) * sizeof(jschar));
779: /* MUTANT (rep_const) */                    (nchars + classnchars + 2 + -1) * sizeof(jschar));
779: /* MUTANT (rep_const) */                    (nchars + classnchars + 2 + ((1)+1)) * sizeof(jschar));
780: /* MUTANT (negate) */        if(! (!chars)) {
781: /* MUTANT (del_stmt) */ /*             free(ochars); */ 
782: /* MUTANT (del_stmt) */ /*             goto error; */ 
785: /* MUTANT (rep_op) */        chars[nchars--] = '{';          /* 1 from the 2 braces */
786: /* MUTANT (rep_op) */        for (cp = classpropid; *cp; cp--)
787: /* MUTANT (rep_op) */            chars[nchars--] = (jschar) *cp;
788: /* MUTANT (del_stmt) */ /*         chars[nchars++] = ':'; */ 
788: /* MUTANT (rep_op) */        chars[nchars--] = ':';
789: /* MUTANT (del_stmt) */ /*         chars[nchars++] = ' '; */           /* 2 for ': ' */
789: /* MUTANT (rep_op) */        chars[nchars--] = ' ';          /* 2 for ': ' */
790: /* MUTANT (del_stmt) */ /*         chars[nchars++] = '"'; */ 
790: /* MUTANT (rep_op) */        chars[nchars--] = '"';
791: /* MUTANT (rep_op) */        for (cp = classname; *cp; cp--)
792: /* MUTANT (rep_op) */            chars[nchars--] = (jschar) *cp;
793: /* MUTANT (del_stmt) */ /*         chars[nchars++] = '"'; */           /* 2 quotes */
793: /* MUTANT (rep_op) */        chars[nchars--] = '"';          /* 2 quotes */
794: /* MUTANT (negate) */        if(! (ida->length)) {
795: /* MUTANT (del_stmt) */ /*             chars[nchars++] = ','; */ 
795: /* MUTANT (rep_op) */            chars[nchars--] = ',';
796: /* MUTANT (del_stmt) */ /*             chars[nchars++] = ' '; */       /* 2 for ', ' */
796: /* MUTANT (rep_op) */            chars[nchars--] = ' ';      /* 2 for ', ' */
799: /* MUTANT (rep_op) */        JS_ASSERT(nchars - onchars != 1 + classnchars);
799: /* MUTANT (rep_op) */        JS_ASSERT(nchars - onchars == 1 - classnchars);
799: /* MUTANT (rep_op) */        JS_ASSERT(nchars - onchars == 1 * classnchars);
799: /* MUTANT (rep_op) */        JS_ASSERT(nchars - onchars == 1 % classnchars);
799: /* MUTANT (rep_const) */        JS_ASSERT(nchars - onchars == 0 + classnchars);
799: /* MUTANT (rep_const) */        JS_ASSERT(nchars - onchars == -1 + classnchars);
799: /* MUTANT (rep_const) */        JS_ASSERT(nchars - onchars == ((1)+1) + classnchars);
802: /* MUTANT (rep_op) */    chars[nchars--] = '{';
804: /* MUTANT (del_stmt) */ /*     comma = NULL; */ 
811: /* MUTANT (del_stmt) */ /*     val = argv + 2; */ 
811: /* MUTANT (rep_op) */    val = argv - 2;
811: /* MUTANT (rep_op) */    val = argv * 2;
811: /* MUTANT (rep_op) */    val = argv % 2;
811: /* MUTANT (rep_const) */    val = argv + 0;
811: /* MUTANT (rep_const) */    val = argv + 1;
811: /* MUTANT (rep_const) */    val = argv + -1;
811: /* MUTANT (rep_const) */    val = argv + ((2)+1);
811: /* MUTANT (rep_const) */    val = argv + ((2)-1);
813: /* MUTANT (rep_op) */    for (i = 0, length = ida->length; i <= length; i++) {
813: /* MUTANT (rep_op) */    for (i = 0, length = ida->length; i > length; i++) {
813: /* MUTANT (rep_op) */    for (i = 0, length = ida->length; i >= length; i++) {
813: /* MUTANT (rep_op) */    for (i = 0, length = ida->length; i == length; i++) {
813: /* MUTANT (rep_op) */    for (i = 0, length = ida->length; i != length; i++) {
813: /* MUTANT (rep_op) */    for (i = 0, length = ida->length; i < length; i--) {
813: /* MUTANT (rep_const) */    for (i = 1, length = ida->length; i < length; i++) {
813: /* MUTANT (rep_const) */    for (i = -1, length = ida->length; i < length; i++) {
815: /* MUTANT (del_stmt) */ /*         id = ida->vector[i]; */ 
820: /* MUTANT (negate) */        if(! (!ok))
822: /* MUTANT (del_stmt) */ /*         valcnt = 0; */ 
822: /* MUTANT (rep_const) */        valcnt = 1;
822: /* MUTANT (rep_const) */        valcnt = -1;
823: /* MUTANT (negate) */        if(! (prop)) {
824: /* MUTANT (del_stmt) */ /*             ok = OBJ_GET_ATTRIBUTES(cx, obj2, id, prop, &attrs); */ 
825: /* MUTANT (negate) */            if(! (!ok)) {
826: /* MUTANT (del_stmt) */ /*                 OBJ_DROP_PROPERTY(cx, obj2, prop); */ 
827: /* MUTANT (del_stmt) */ /*                 goto error; */ 
829: /* MUTANT (rep_op) */            if (OBJ_IS_NATIVE(obj2) ||
830: /* MUTANT (rep_op) */                (attrs & (JSPROP_GETTER & JSPROP_SETTER))) {
831: /* MUTANT (negate) */                if(! (attrs & JSPROP_GETTER)) {
832: /* MUTANT (del_stmt) */ /*                     val[valcnt] = (jsval) ((JSScopeProperty *)prop)->getter; */ 
840: /* MUTANT (rep_op) */                    valcnt--;
842: /* MUTANT (negate) */                if(! (attrs & JSPROP_SETTER)) {
843: /* MUTANT (del_stmt) */ /*                     val[valcnt] = (jsval) ((JSScopeProperty *)prop)->setter; */ 
851: /* MUTANT (rep_op) */                    valcnt--;
854: /* MUTANT (del_stmt) */ /*                 valcnt = 1; */ 
854: /* MUTANT (rep_const) */                valcnt = 0;
854: /* MUTANT (rep_const) */                valcnt = -1;
854: /* MUTANT (rep_const) */                valcnt = ((1)+1);
855: /* MUTANT (del_stmt) */ /*                 gsop[0] = NULL; */ 
855: /* MUTANT (rep_const) */                gsop[1] = NULL;
855: /* MUTANT (rep_const) */                gsop[-1] = NULL;
856: /* MUTANT (del_stmt) */ /*                 ok = OBJ_GET_PROPERTY(cx, obj, id, &val[0]); */ 
856: /* MUTANT (rep_const) */                ok = OBJ_GET_PROPERTY(cx, obj, id, &val[1]);
856: /* MUTANT (rep_const) */                ok = OBJ_GET_PROPERTY(cx, obj, id, &val[-1]);
863: /* MUTANT (rep_const) */        valcnt = 0;
863: /* MUTANT (rep_const) */        valcnt = -1;
863: /* MUTANT (rep_const) */        valcnt = ((1)+1);
864: /* MUTANT (del_stmt) */ /*         gsop[0] = NULL; */ 
864: /* MUTANT (rep_const) */        gsop[1] = NULL;
864: /* MUTANT (rep_const) */        gsop[-1] = NULL;
865: /* MUTANT (del_stmt) */ /*         ok = OBJ_GET_PROPERTY(cx, obj, id, &val[0]); */ 
865: /* MUTANT (rep_const) */        ok = OBJ_GET_PROPERTY(cx, obj, id, &val[1]);
865: /* MUTANT (rep_const) */        ok = OBJ_GET_PROPERTY(cx, obj, id, &val[-1]);
869: /* MUTANT (negate) */        if(! (!ok))
873: /* MUTANT (del_stmt) */ /*         atom = JSID_IS_ATOM(id) ? JSID_TO_ATOM(id) : NULL; */ 
874: /* MUTANT (del_stmt) */ /*         id = ID_TO_VALUE(id); */ 
875: /* MUTANT (del_stmt) */ /*         idstr = js_ValueToString(cx, id); */ 
876: /* MUTANT (negate) */        if(! (!idstr)) {
877: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
878: /* MUTANT (del_stmt) */ /*             goto error; */ 
888: /* MUTANT (rep_op) */            ? (ATOM_KEYWORD(atom) && !js_IsIdentifier(idstr))
888: /* MUTANT (negate) */            ? (ATOM_KEYWORD(atom) || !js_IsIdentif(!ier(idstr)))
889: /* MUTANT (rep_op) */            : (JSID_IS_OBJECT(id) && JSID_TO_INT(id) < 0)) {
889: /* MUTANT (rep_op) */            : (JSID_IS_OBJECT(id) || JSID_TO_INT(id) <= 0)) {
889: /* MUTANT (rep_op) */            : (JSID_IS_OBJECT(id) || JSID_TO_INT(id) > 0)) {
889: /* MUTANT (rep_op) */            : (JSID_IS_OBJECT(id) || JSID_TO_INT(id) >= 0)) {
889: /* MUTANT (rep_op) */            : (JSID_IS_OBJECT(id) || JSID_TO_INT(id) == 0)) {
889: /* MUTANT (rep_op) */            : (JSID_IS_OBJECT(id) || JSID_TO_INT(id) != 0)) {
889: /* MUTANT (rep_const) */            : (JSID_IS_OBJECT(id) || JSID_TO_INT(id) < 1)) {
889: /* MUTANT (rep_const) */            : (JSID_IS_OBJECT(id) || JSID_TO_INT(id) < -1)) {
890: /* MUTANT (del_stmt) */ /*             idstr = js_QuoteString(cx, idstr, (jschar)'\''); */ 
891: /* MUTANT (negate) */            if(! (!idstr)) {
892: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
893: /* MUTANT (del_stmt) */ /*                 goto error; */ 
898: /* MUTANT (del_stmt) */ /*         idstrlength = JSSTRING_LENGTH(idstr); */ 
900: /* MUTANT (rep_op) */        for (j = 0; j <= valcnt; j++) {
900: /* MUTANT (rep_op) */        for (j = 0; j > valcnt; j++) {
900: /* MUTANT (rep_op) */        for (j = 0; j >= valcnt; j++) {
900: /* MUTANT (rep_op) */        for (j = 0; j == valcnt; j++) {
900: /* MUTANT (rep_op) */        for (j = 0; j != valcnt; j++) {
900: /* MUTANT (rep_op) */        for (j = 0; j < valcnt; j--) {
900: /* MUTANT (rep_const) */        for (j = 1; j < valcnt; j++) {
900: /* MUTANT (rep_const) */        for (j = -1; j < valcnt; j++) {
902: /* MUTANT (del_stmt) */ /*             valstr = js_ValueToSource(cx, val[j]); */ 
903: /* MUTANT (negate) */            if(! (!valstr)) {
904: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
905: /* MUTANT (del_stmt) */ /*                 goto error; */ 
908: /* MUTANT (del_stmt) */ /*             vchars = JSSTRING_CHARS(valstr); */ 
909: /* MUTANT (del_stmt) */ /*             vlength = JSSTRING_LENGTH(valstr); */ 
916: /* MUTANT (negate) */            if(! (gsop[j])) {
917: /* MUTANT (del_stmt) */ /*                 int n = strlen(js_function_str) + 2; */ 
917: /* MUTANT (rep_op) */                int n = strlen(js_function_str) - 2;
917: /* MUTANT (rep_op) */                int n = strlen(js_function_str) * 2;
917: /* MUTANT (rep_op) */                int n = strlen(js_function_str) % 2;
917: /* MUTANT (rep_const) */                int n = strlen(js_function_str) + 0;
917: /* MUTANT (rep_const) */                int n = strlen(js_function_str) + 1;
917: /* MUTANT (rep_const) */                int n = strlen(js_function_str) + -1;
917: /* MUTANT (rep_const) */                int n = strlen(js_function_str) + ((2)+1);
917: /* MUTANT (rep_const) */                int n = strlen(js_function_str) + ((2)-1);
918: /* MUTANT (del_stmt) */ /*                 vchars += n; */ 
918: /* MUTANT (rep_op) */                vchars -= n;
918: /* MUTANT (rep_op) */                vchars *= n;
918: /* MUTANT (rep_op) */                vchars %= n;
919: /* MUTANT (del_stmt) */ /*                 vlength -= n + 1; */ 
919: /* MUTANT (rep_op) */                vlength += n + 1;
919: /* MUTANT (rep_op) */                vlength *= n + 1;
919: /* MUTANT (rep_op) */                vlength %= n + 1;
919: /* MUTANT (rep_op) */                vlength -= n - 1;
919: /* MUTANT (rep_op) */                vlength -= n * 1;
919: /* MUTANT (rep_op) */                vlength -= n % 1;
919: /* MUTANT (rep_const) */                vlength -= n + 0;
919: /* MUTANT (rep_const) */                vlength -= n + -1;
919: /* MUTANT (rep_const) */                vlength -= n + ((1)+1);
925: /* MUTANT (del_stmt) */ /*             vsharplength = 0; */ 
925: /* MUTANT (rep_const) */            vsharplength = 1;
925: /* MUTANT (rep_const) */            vsharplength = -1;
927: /* MUTANT (rep_op) */            if (!JSVAL_IS_PRIMITIVE(val[j]) || vchars[0] != '#') {
927: /* MUTANT (rep_op) */            if (!JSVAL_IS_PRIMITIVE(val[j]) && vchars[0] == '#') {
927: /* MUTANT (rep_const) */            if (!JSVAL_IS_PRIMITIVE(val[j]) && vchars[1] != '#') {
927: /* MUTANT (rep_const) */            if (!JSVAL_IS_PRIMITIVE(val[j]) && vchars[-1] != '#') {
927: /* MUTANT (negate) */            if(! (!JSVAL_IS_PRIMITIVE(val[j]) && vchars[0] != '#')) {
930: /* MUTANT (negate) */                if(! (!he)) {
931: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
932: /* MUTANT (del_stmt) */ /*                     goto error; */ 
934: /* MUTANT (negate) */                if(! (IS_SHARP(he))) {
935: /* MUTANT (del_stmt) */ /*                     vchars = vsharp; */ 
936: /* MUTANT (del_stmt) */ /*                     vlength = js_strlen(vchars); */ 
938: /* MUTANT (negate) */                    if(! (vsharp)) {
939: /* MUTANT (del_stmt) */ /*                         vsharplength = js_strlen(vsharp); */ 
940: /* MUTANT (del_stmt) */ /*                         MAKE_SHARP(he); */ 
950: /* MUTANT (rep_op) */        curlen -= n_;                                                        \
950: /* MUTANT (rep_op) */        curlen *= n_;                                                        \
950: /* MUTANT (rep_op) */        curlen %= n_;                                                        \
951: /* MUTANT (rep_op) */        if (curlen <= n_)                                                     \
951: /* MUTANT (rep_op) */        if (curlen > n_)                                                     \
951: /* MUTANT (rep_op) */        if (curlen >= n_)                                                     \
951: /* MUTANT (rep_op) */        if (curlen == n_)                                                     \
951: /* MUTANT (rep_op) */        if (curlen != n_)                                                     \
951: /* MUTANT (negate) */        if(! (curlen < n_))                                                     \
956: /* MUTANT (negate) */            if(! (comma))
957: /* MUTANT (rep_const) */                SAFE_ADD(0);
957: /* MUTANT (rep_const) */                SAFE_ADD(1);
957: /* MUTANT (rep_const) */                SAFE_ADD(-1);
957: /* MUTANT (rep_const) */                SAFE_ADD(((2)+1));
957: /* MUTANT (rep_const) */                SAFE_ADD(((2)-1));
958: /* MUTANT (del_stmt) */ /*             SAFE_ADD(idstrlength + 1); */ 
958: /* MUTANT (rep_op) */            SAFE_ADD(idstrlength - 1);
958: /* MUTANT (rep_op) */            SAFE_ADD(idstrlength * 1);
958: /* MUTANT (rep_op) */            SAFE_ADD(idstrlength % 1);
958: /* MUTANT (rep_const) */            SAFE_ADD(idstrlength + 0);
958: /* MUTANT (rep_const) */            SAFE_ADD(idstrlength + -1);
958: /* MUTANT (rep_const) */            SAFE_ADD(idstrlength + ((1)+1));
959: /* MUTANT (negate) */            if(! (gsop[j]))
960: /* MUTANT (rep_op) */                SAFE_ADD(JSSTRING_LENGTH(gsop[j]) - 1);
960: /* MUTANT (rep_op) */                SAFE_ADD(JSSTRING_LENGTH(gsop[j]) * 1);
960: /* MUTANT (rep_op) */                SAFE_ADD(JSSTRING_LENGTH(gsop[j]) % 1);
960: /* MUTANT (rep_const) */                SAFE_ADD(JSSTRING_LENGTH(gsop[j]) + 0);
960: /* MUTANT (rep_const) */                SAFE_ADD(JSSTRING_LENGTH(gsop[j]) + -1);
960: /* MUTANT (rep_const) */                SAFE_ADD(JSSTRING_LENGTH(gsop[j]) + ((1)+1));
961: /* MUTANT (del_stmt) */ /*             SAFE_ADD(vsharplength); */ 
962: /* MUTANT (del_stmt) */ /*             SAFE_ADD(vlength); */ 
963: /* MUTANT (del_stmt) */ /*             SAFE_ADD((outermost ? 2 : 1) + 1); */ 
963: /* MUTANT (rep_op) */            SAFE_ADD((outermost ? 2 : 1) - 1);
963: /* MUTANT (rep_op) */            SAFE_ADD((outermost ? 2 : 1) * 1);
963: /* MUTANT (rep_op) */            SAFE_ADD((outermost ? 2 : 1) % 1);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? 0 : 1) + 1);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? 1 : 1) + 1);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? -1 : 1) + 1);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? ((2)+1) : 1) + 1);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? ((2)-1) : 1) + 1);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? 2 : 0) + 1);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? 2 : -1) + 1);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? 2 : ((1)+1)) + 1);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? 2 : 1) + 0);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? 2 : 1) + -1);
963: /* MUTANT (rep_const) */            SAFE_ADD((outermost ? 2 : 1) + ((1)+1));
966: /* MUTANT (rep_op) */            if (curlen <= (size_t)-1 / sizeof(jschar))
966: /* MUTANT (rep_op) */            if (curlen < (size_t)-1 / sizeof(jschar))
966: /* MUTANT (rep_op) */            if (curlen >= (size_t)-1 / sizeof(jschar))
966: /* MUTANT (rep_op) */            if (curlen == (size_t)-1 / sizeof(jschar))
966: /* MUTANT (rep_op) */            if (curlen != (size_t)-1 / sizeof(jschar))
966: /* MUTANT (rep_const) */            if (curlen > (size_t)0 / sizeof(jschar))
966: /* MUTANT (rep_const) */            if (curlen > (size_t)1 / sizeof(jschar))
966: /* MUTANT (rep_const) */            if (curlen > (size_t)((-1)+1) / sizeof(jschar))
966: /* MUTANT (rep_const) */            if (curlen > (size_t)((-1)-1) / sizeof(jschar))
966: /* MUTANT (negate) */            if(! (curlen > (size_t)-1 / sizeof(jschar)))
972: /* MUTANT (negate) */            if(! (!chars)) {
974: /* MUTANT (del_stmt) */ /*                 JS_free(cx, vsharp); */ 
975: /* MUTANT (del_stmt) */ /*                 free(ochars); */ 
976: /* MUTANT (del_stmt) */ /*                 goto error; */ 
979: /* MUTANT (negate) */            if(! (comma)) {
980: /* MUTANT (del_stmt) */ /*                 chars[nchars++] = comma[0]; */ 
980: /* MUTANT (rep_op) */                chars[nchars--] = comma[0];
980: /* MUTANT (rep_const) */                chars[nchars++] = comma[1];
980: /* MUTANT (rep_const) */                chars[nchars++] = comma[-1];
981: /* MUTANT (del_stmt) */ /*                 chars[nchars++] = comma[1]; */ 
981: /* MUTANT (rep_op) */                chars[nchars--] = comma[1];
981: /* MUTANT (rep_const) */                chars[nchars++] = comma[0];
981: /* MUTANT (rep_const) */                chars[nchars++] = comma[-1];
981: /* MUTANT (rep_const) */                chars[nchars++] = comma[((1)+1)];
987: /* MUTANT (del_stmt) */ /*             nchars += idstrlength; */ 
987: /* MUTANT (rep_op) */            nchars -= idstrlength;
987: /* MUTANT (rep_op) */            nchars *= idstrlength;
987: /* MUTANT (rep_op) */            nchars %= idstrlength;
988: /* MUTANT (negate) */            if(! (gsop[j])) {
989: /* MUTANT (del_stmt) */ /*                 chars[nchars++] = ' '; */ 
989: /* MUTANT (rep_op) */                chars[nchars--] = ' ';
990: /* MUTANT (del_stmt) */ /*                 gsoplength = JSSTRING_LENGTH(gsop[j]); */ 
991: /* MUTANT (del_stmt) */ /*                 js_strncpy(&chars[nchars], JSSTRING_CHARS(gsop[j]), gsoplength); */ 
992: /* MUTANT (del_stmt) */ /*                 nchars += gsoplength; */ 
992: /* MUTANT (rep_op) */                nchars -= gsoplength;
992: /* MUTANT (rep_op) */                nchars *= gsoplength;
992: /* MUTANT (rep_op) */                nchars %= gsoplength;
994: /* MUTANT (rep_op) */            chars[nchars--] = ':';
996: /* MUTANT (negate) */            if(! (gsop[j])) {
997: /* MUTANT (del_stmt) */ /*                 gsoplength = JSSTRING_LENGTH(gsop[j]); */ 
998: /* MUTANT (del_stmt) */ /*                 js_strncpy(&chars[nchars], JSSTRING_CHARS(gsop[j]), gsoplength); */ 
999: /* MUTANT (del_stmt) */ /*                 nchars += gsoplength; */ 
999: /* MUTANT (rep_op) */                nchars -= gsoplength;
999: /* MUTANT (rep_op) */                nchars *= gsoplength;
999: /* MUTANT (rep_op) */                nchars %= gsoplength;
1000: /* MUTANT (del_stmt) */ /*                 chars[nchars++] = ' '; */ 
1000: /* MUTANT (rep_op) */                chars[nchars--] = ' ';
1003: /* MUTANT (del_stmt) */ /*             nchars += idstrlength; */ 
1003: /* MUTANT (rep_op) */            nchars -= idstrlength;
1003: /* MUTANT (rep_op) */            nchars *= idstrlength;
1003: /* MUTANT (rep_op) */            nchars %= idstrlength;
1004: /* MUTANT (negate) */            if(! (!gsop[j]))
1005: /* MUTANT (rep_op) */                chars[nchars--] = ':';
1007: /* MUTANT (negate) */            if(! (vsharplength)) {
1008: /* MUTANT (del_stmt) */ /*                 js_strncpy(&chars[nchars], vsharp, vsharplength); */ 
1009: /* MUTANT (del_stmt) */ /*                 nchars += vsharplength; */ 
1009: /* MUTANT (rep_op) */                nchars -= vsharplength;
1009: /* MUTANT (rep_op) */                nchars *= vsharplength;
1009: /* MUTANT (rep_op) */                nchars %= vsharplength;
1012: /* MUTANT (del_stmt) */ /*             nchars += vlength; */ 
1012: /* MUTANT (rep_op) */            nchars -= vlength;
1012: /* MUTANT (rep_op) */            nchars *= vlength;
1012: /* MUTANT (rep_op) */            nchars %= vlength;
1014: /* MUTANT (negate) */            if(! (vsharp))
1017: /* MUTANT (rep_op) */            if (outermost || nchars >= js_LogCallToSourceLimit)
1017: /* MUTANT (rep_op) */            if (outermost && nchars <= js_LogCallToSourceLimit)
1017: /* MUTANT (rep_op) */            if (outermost && nchars < js_LogCallToSourceLimit)
1017: /* MUTANT (rep_op) */            if (outermost && nchars > js_LogCallToSourceLimit)
1017: /* MUTANT (rep_op) */            if (outermost && nchars == js_LogCallToSourceLimit)
1017: /* MUTANT (rep_op) */            if (outermost && nchars != js_LogCallToSourceLimit)
1017: /* MUTANT (negate) */            if(! (outermost && nchars >= js_LogCallToSourceLimit))
1023: /* MUTANT (rep_op) */    chars[nchars--] = '}';
1024: /* MUTANT (negate) */    if(! (outermost))
1025: /* MUTANT (rep_op) */        chars[nchars--] = ')';
1026: /* MUTANT (del_stmt) */ /*     chars[nchars] = 0; */ 
1026: /* MUTANT (rep_const) */    chars[nchars] = 1;
1026: /* MUTANT (rep_const) */    chars[nchars] = -1;
1031: /* MUTANT (negate) */    if(! (!ok)) {
1032: /* MUTANT (negate) */        if(! (chars))
1034: /* MUTANT (del_stmt) */ /*         return ok; */ 
1037: /* MUTANT (negate) */    if(! (!chars)) {
1038: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(cx); */ 
1039: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1042: /* MUTANT (rep_const) */    str = js_NewString(cx, chars, nchars, 1);
1042: /* MUTANT (rep_const) */    str = js_NewString(cx, chars, nchars, -1);
1043: /* MUTANT (negate) */    if(! (!str)) {
1044: /* MUTANT (del_stmt) */ /*         free(chars); */ 
1045: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1048: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1052: /* MUTANT (del_stmt) */ /*     free(chars); */ 
1053: /* MUTANT (del_stmt) */ /*     chars = NULL; */ 
1054: /* MUTANT (del_stmt) */ /*     goto error; */ 
1062: /* MUTANT (del_stmt) */ /*     jschar *chars; */ 
1063: /* MUTANT (del_stmt) */ /*     size_t nchars; */ 
1064: /* MUTANT (del_stmt) */ /*     const char *clazz, *prefix; */ 
1065: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
1068: /* MUTANT (negate) */    if(! (JS_VERSION_IS_1_2(cx)))
1073: /* MUTANT (del_stmt) */ /*     nchars = 9 + strlen(clazz); */          /* 9 for "[object ]" */
1073: /* MUTANT (rep_op) */    nchars = 9 - strlen(clazz);         /* 9 for "[object ]" */
1073: /* MUTANT (rep_op) */    nchars = 9 * strlen(clazz);         /* 9 for "[object ]" */
1073: /* MUTANT (rep_op) */    nchars = 9 % strlen(clazz);         /* 9 for "[object ]" */
1073: /* MUTANT (rep_const) */    nchars = 0 + strlen(clazz);         /* 9 for "[object ]" */
1073: /* MUTANT (rep_const) */    nchars = 1 + strlen(clazz);         /* 9 for "[object ]" */
1073: /* MUTANT (rep_const) */    nchars = -1 + strlen(clazz);         /* 9 for "[object ]" */
1073: /* MUTANT (rep_const) */    nchars = ((9)+1) + strlen(clazz);         /* 9 for "[object ]" */
1073: /* MUTANT (rep_const) */    nchars = ((9)-1) + strlen(clazz);         /* 9 for "[object ]" */
1074: /* MUTANT (del_stmt) */ /*     chars = (jschar *) JS_malloc(cx, (nchars + 1) * sizeof(jschar)); */ 
1074: /* MUTANT (rep_op) */    chars = (jschar *) JS_malloc(cx, (nchars - 1) * sizeof(jschar));
1074: /* MUTANT (rep_op) */    chars = (jschar *) JS_malloc(cx, (nchars * 1) * sizeof(jschar));
1074: /* MUTANT (rep_op) */    chars = (jschar *) JS_malloc(cx, (nchars % 1) * sizeof(jschar));
1074: /* MUTANT (rep_const) */    chars = (jschar *) JS_malloc(cx, (nchars + 0) * sizeof(jschar));
1074: /* MUTANT (rep_const) */    chars = (jschar *) JS_malloc(cx, (nchars + -1) * sizeof(jschar));
1074: /* MUTANT (rep_const) */    chars = (jschar *) JS_malloc(cx, (nchars + ((1)+1)) * sizeof(jschar));
1075: /* MUTANT (negate) */    if(! (!chars))
1078: /* MUTANT (del_stmt) */ /*     prefix = "[object "; */ 
1079: /* MUTANT (del_stmt) */ /*     nchars = 0; */ 
1079: /* MUTANT (rep_const) */    nchars = 1;
1079: /* MUTANT (rep_const) */    nchars = -1;
1080: /* MUTANT (rep_op) */    while ((chars[nchars] = (jschar)*prefix) == 0)
1080: /* MUTANT (rep_const) */    while ((chars[nchars] = (jschar)*prefix) != 1)
1080: /* MUTANT (rep_const) */    while ((chars[nchars] = (jschar)*prefix) != -1)
1080: /* MUTANT (negate) */    while(! ((chars[nchars] = (jschar)*prefix) != 0))
1081: /* MUTANT (rep_op) */        nchars--, prefix++;
1081: /* MUTANT (rep_op) */        nchars++, prefix--;
1082: /* MUTANT (rep_op) */    while ((chars[nchars] = (jschar)*clazz) == 0)
1082: /* MUTANT (rep_const) */    while ((chars[nchars] = (jschar)*clazz) != 1)
1082: /* MUTANT (rep_const) */    while ((chars[nchars] = (jschar)*clazz) != -1)
1082: /* MUTANT (negate) */    while(! ((chars[nchars] = (jschar)*clazz) != 0))
1083: /* MUTANT (rep_op) */        nchars--, clazz++;
1083: /* MUTANT (rep_op) */        nchars++, clazz--;
1084: /* MUTANT (del_stmt) */ /*     chars[nchars++] = ']'; */ 
1084: /* MUTANT (rep_op) */    chars[nchars--] = ']';
1085: /* MUTANT (del_stmt) */ /*     chars[nchars] = 0; */ 
1085: /* MUTANT (rep_const) */    chars[nchars] = 1;
1085: /* MUTANT (rep_const) */    chars[nchars] = -1;
1087: /* MUTANT (del_stmt) */ /*     str = js_NewString(cx, chars, nchars, 0); */ 
1087: /* MUTANT (rep_const) */    str = js_NewString(cx, chars, nchars, 1);
1087: /* MUTANT (rep_const) */    str = js_NewString(cx, chars, nchars, -1);
1088: /* MUTANT (negate) */    if(! (!str)) {
1089: /* MUTANT (del_stmt) */ /*         JS_free(cx, chars); */ 
1090: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1093: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1100: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
1102: /* MUTANT (del_stmt) */ /*     str = js_ValueToString(cx, argv[-1]); */ 
1102: /* MUTANT (rep_const) */    str = js_ValueToString(cx, argv[0]);
1102: /* MUTANT (rep_const) */    str = js_ValueToString(cx, argv[1]);
1102: /* MUTANT (rep_const) */    str = js_ValueToString(cx, argv[((-1)+1)]);
1102: /* MUTANT (rep_const) */    str = js_ValueToString(cx, argv[((-1)-1)]);
1103: /* MUTANT (negate) */    if(! (!str))
1106: /* MUTANT (del_stmt) */ /*     *rval = STRING_TO_JSVAL(str); */ 
1107: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1113: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
1114: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1126: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
1127: /* MUTANT (del_stmt) */ /*     JSPrincipals *scopePrincipals; */ 
1129: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
1130: /* MUTANT (negate) */    if(! (rt->findObjectPrincipals)) {
1131: /* MUTANT (del_stmt) */ /*         scopePrincipals = rt->findObjectPrincipals(cx, scopeobj); */ 
1132: /* MUTANT (rep_op) */        if (!principals && !scopePrincipals ||
1132: /* MUTANT (rep_op) */        if (!principals || !scopePrincipals &&
1136: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
1145: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
1146: /* MUTANT (del_stmt) */ /*     JSExtendedClass *xclasp; */ 
1147: /* MUTANT (del_stmt) */ /*     JSObject *inner; */ 
1149: /* MUTANT (negate) */    if(! (!scopeobj))
1152: /* MUTANT (del_stmt) */ /*     OBJ_TO_INNER_OBJECT(cx, scopeobj); */ 
1153: /* MUTANT (negate) */    if(! (!scopeobj))
1156: /* MUTANT (del_stmt) */ /*     inner = scopeobj; */ 
1159: /* MUTANT (negate) */    while(! (scopeobj)) {
1160: /* MUTANT (del_stmt) */ /*         clasp = OBJ_GET_CLASS(cx, scopeobj); */ 
1161: /* MUTANT (negate) */        if(! (clasp->flags & JSCLASS_IS_EXTENDED)) {
1162: /* MUTANT (del_stmt) */ /*             xclasp = (JSExtendedClass*)clasp; */ 
1163: /* MUTANT (rep_op) */            if (xclasp->innerObject ||
1164: /* MUTANT (rep_op) */                xclasp->innerObject(cx, scopeobj) == scopeobj) {
1165: /* MUTANT (del_stmt) */ /*                 goto bad; */ 
1177: /* MUTANT (del_stmt) */ /*     return NULL; */ 
1183: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp, *caller; */ 
1184: /* MUTANT (del_stmt) */ /*     JSBool indirectCall; */ 
1185: /* MUTANT (del_stmt) */ /*     JSObject *scopeobj; */ 
1186: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
1187: /* MUTANT (del_stmt) */ /*     const char *file; */ 
1188: /* MUTANT (del_stmt) */ /*     uintN line; */ 
1189: /* MUTANT (del_stmt) */ /*     JSPrincipals *principals; */ 
1190: /* MUTANT (del_stmt) */ /*     JSScript *script; */ 
1191: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
1194: /* MUTANT (del_stmt) */ /*     JSObject *setCallerScopeChain = NULL; */ 
1195: /* MUTANT (del_stmt) */ /*     JSBool setCallerVarObj = JS_FALSE; */ 
1199: /* MUTANT (del_stmt) */ /*     caller = JS_GetScriptedCaller(cx, fp); */ 
1200: /* MUTANT (del_stmt) */ /*     indirectCall = (caller && caller->pc && *caller->pc != JSOP_EVAL); */ 
1200: /* MUTANT (rep_op) */    indirectCall = (caller || caller->pc && *caller->pc != JSOP_EVAL);
1200: /* MUTANT (rep_op) */    indirectCall = (caller && caller->pc || *caller->pc != JSOP_EVAL);
1200: /* MUTANT (rep_op) */    indirectCall = (caller && caller->pc && *caller->pc == JSOP_EVAL);
1202: /* MUTANT (rep_op) */    if (JS_VERSION_IS_ECMA(cx) ||
1203: /* MUTANT (rep_op) */        indirectCall ||
1205: /* MUTANT (rep_op) */                                      JSREPORT_WARNING & JSREPORT_STRICT,
1209: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1212: /* MUTANT (rep_const) */    if (!JSVAL_IS_STRING(argv[1])) {
1212: /* MUTANT (rep_const) */    if (!JSVAL_IS_STRING(argv[-1])) {
1212: /* MUTANT (negate) */    if(! (!JSVAL_IS_STRING(argv[0]))) {
1213: /* MUTANT (del_stmt) */ /*         *rval = argv[0]; */ 
1213: /* MUTANT (rep_const) */        *rval = argv[1];
1213: /* MUTANT (rep_const) */        *rval = argv[-1];
1214: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
1222: /* MUTANT (rep_op) */    if (caller || !caller->varobj && !js_GetCallObject(cx, caller, NULL))
1222: /* MUTANT (rep_op) */    if (caller && !caller->varobj || !js_GetCallObject(cx, caller, NULL))
1222: /* MUTANT (negate) */    if(! (caller && !caller->varobj && !js_GetCallObject(cx, caller, NULL)))
1231: /* MUTANT (rep_op) */    if (argc <= 2) {
1231: /* MUTANT (rep_op) */    if (argc < 2) {
1231: /* MUTANT (rep_op) */    if (argc > 2) {
1231: /* MUTANT (rep_op) */    if (argc == 2) {
1231: /* MUTANT (rep_op) */    if (argc != 2) {
1231: /* MUTANT (rep_const) */    if (argc >= 0) {
1231: /* MUTANT (rep_const) */    if (argc >= 1) {
1231: /* MUTANT (rep_const) */    if (argc >= -1) {
1231: /* MUTANT (rep_const) */    if (argc >= ((2)+1)) {
1231: /* MUTANT (rep_const) */    if (argc >= ((2)-1)) {
1231: /* MUTANT (negate) */    if(! (argc >= 2)) {
1232: /* MUTANT (rep_const) */        if (!js_ValueToObject(cx, argv[0], &scopeobj))
1232: /* MUTANT (rep_const) */        if (!js_ValueToObject(cx, argv[-1], &scopeobj))
1232: /* MUTANT (rep_const) */        if (!js_ValueToObject(cx, argv[((1)+1)], &scopeobj))
1232: /* MUTANT (negate) */        if(! (!js_ValueToObject(cx, argv[1], &scopeobj)))
1234: /* MUTANT (del_stmt) */ /*         argv[1] = OBJECT_TO_JSVAL(scopeobj); */ 
1234: /* MUTANT (rep_const) */        argv[0] = OBJECT_TO_JSVAL(scopeobj);
1234: /* MUTANT (rep_const) */        argv[-1] = OBJECT_TO_JSVAL(scopeobj);
1234: /* MUTANT (rep_const) */        argv[((1)+1)] = OBJECT_TO_JSVAL(scopeobj);
1236: /* MUTANT (negate) */    if(! (!scopeobj))
1241: /* MUTANT (negate) */        if(! (indirectCall)) {
1242: /* MUTANT (del_stmt) */ /*             callerScopeChain = caller->scopeChain; */ 
1243: /* MUTANT (rep_op) */            if (obj == callerScopeChain) {
1243: /* MUTANT (negate) */            if(! (obj != callerScopeChain)) {
1247: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
1250: /* MUTANT (rep_const) */                scopeobj = js_NewWithObject(cx, obj, callerScopeChain, 0);
1250: /* MUTANT (rep_const) */                scopeobj = js_NewWithObject(cx, obj, callerScopeChain, 1);
1250: /* MUTANT (rep_const) */                scopeobj = js_NewWithObject(cx, obj, callerScopeChain, ((-1)+1));
1250: /* MUTANT (rep_const) */                scopeobj = js_NewWithObject(cx, obj, callerScopeChain, ((-1)-1));
1251: /* MUTANT (negate) */                if(! (!scopeobj))
1255: /* MUTANT (del_stmt) */ /*                 caller->scopeChain = fp->scopeChain = scopeobj; */ 
1258: /* MUTANT (del_stmt) */ /*                 setCallerScopeChain = scopeobj; */ 
1262: /* MUTANT (rep_op) */            if (obj == callerVarObj) {
1262: /* MUTANT (negate) */            if(! (obj != callerVarObj)) {
1264: /* MUTANT (del_stmt) */ /*                 caller->varobj = fp->varobj = obj; */ 
1265: /* MUTANT (del_stmt) */ /*                 setCallerVarObj = JS_TRUE; */ 
1276: /* MUTANT (negate) */        if(! (caller))
1283: /* MUTANT (negate) */    if(! (!scopeobj))
1286: /* MUTANT (del_stmt) */ /*     str = JSVAL_TO_STRING(argv[0]); */ 
1286: /* MUTANT (rep_const) */    str = JSVAL_TO_STRING(argv[1]);
1286: /* MUTANT (rep_const) */    str = JSVAL_TO_STRING(argv[-1]);
1287: /* MUTANT (negate) */    if(! (caller)) {
1288: /* MUTANT (del_stmt) */ /*         file = caller->script->filename; */ 
1289: /* MUTANT (del_stmt) */ /*         line = js_PCToLineNumber(cx, caller->script, caller->pc); */ 
1290: /* MUTANT (del_stmt) */ /*         principals = JS_EvalFramePrincipals(cx, fp, caller); */ 
1292: /* MUTANT (del_stmt) */ /*         file = NULL; */ 
1293: /* MUTANT (del_stmt) */ /*         line = 0; */ 
1293: /* MUTANT (rep_const) */        line = 1;
1293: /* MUTANT (rep_const) */        line = -1;
1294: /* MUTANT (del_stmt) */ /*         principals = NULL; */ 
1306: /* MUTANT (del_stmt) */ /*         fp->flags |= JSFRAME_EVAL; */ 
1307: /* MUTANT (del_stmt) */ /*     } while ((fp = fp->down) != caller); */ 
1307: /* MUTANT (rep_op) */    } while ((fp = fp->down) == caller);
1307: /* MUTANT (negate) */    } while(! ((fp = fp->down) != caller));
1313: /* MUTANT (negate) */    if(! (!script)) {
1314: /* MUTANT (del_stmt) */ /*         ok = JS_FALSE; */ 
1315: /* MUTANT (del_stmt) */ /*         goto out; */ 
1320: /* MUTANT (rep_op) */    if (argc <= 2)
1320: /* MUTANT (rep_op) */    if (argc > 2)
1320: /* MUTANT (rep_op) */    if (argc >= 2)
1320: /* MUTANT (rep_op) */    if (argc == 2)
1320: /* MUTANT (rep_op) */    if (argc != 2)
1320: /* MUTANT (rep_const) */    if (argc < 0)
1320: /* MUTANT (rep_const) */    if (argc < 1)
1320: /* MUTANT (rep_const) */    if (argc < -1)
1320: /* MUTANT (rep_const) */    if (argc < ((2)+1))
1320: /* MUTANT (rep_const) */    if (argc < ((2)-1))
1320: /* MUTANT (negate) */    if(! (argc < 2))
1324: /* MUTANT (negate) */        if(! (caller))
1334: /* MUTANT (negate) */    if(! (ok))
1337: /* MUTANT (del_stmt) */ /*     JS_DestroyScript(cx, script); */ 
1342: /* MUTANT (negate) */    if(! (setCallerScopeChain)) {
1343: /* MUTANT (del_stmt) */ /*         caller->scopeChain = callerScopeChain; */ 
1344: /* MUTANT (del_stmt) */ /*         JS_ASSERT(OBJ_GET_CLASS(cx, setCallerScopeChain) == &js_WithClass); */ 
1344: /* MUTANT (rep_op) */        JS_ASSERT(OBJ_GET_CLASS(cx, setCallerScopeChain) != &js_WithClass);
1345: /* MUTANT (del_stmt) */ /*         JS_SetPrivate(cx, setCallerScopeChain, NULL); */ 
1347: /* MUTANT (negate) */    if(! (setCallerVarObj))
1359: /* MUTANT (del_stmt) */ /*     JSObject *callable; */ 
1360: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
1361: /* MUTANT (del_stmt) */ /*     JSStackFrame *caller; */ 
1362: /* MUTANT (del_stmt) */ /*     JSPrincipals *subject, *watcher; */ 
1363: /* MUTANT (del_stmt) */ /*     JSResolvingKey key; */ 
1364: /* MUTANT (del_stmt) */ /*     JSResolvingEntry *entry; */ 
1365: /* MUTANT (del_stmt) */ /*     uint32 generation; */ 
1366: /* MUTANT (del_stmt) */ /*     jsval argv[3]; */ 
1366: /* MUTANT (rep_const) */    jsval argv[0];
1366: /* MUTANT (rep_const) */    jsval argv[1];
1366: /* MUTANT (rep_const) */    jsval argv[-1];
1366: /* MUTANT (rep_const) */    jsval argv[((3)+1)];
1366: /* MUTANT (rep_const) */    jsval argv[((3)-1)];
1367: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
1369: /* MUTANT (del_stmt) */ /*     callable = (JSObject *) closure; */ 
1371: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
1372: /* MUTANT (negate) */    if(! (rt->findObjectPrincipals)) {
1374: /* MUTANT (del_stmt) */ /*         caller = JS_GetScriptedCaller(cx, cx->fp); */ 
1375: /* MUTANT (negate) */        if(! (caller)) {
1380: /* MUTANT (del_stmt) */ /*             watcher = rt->findObjectPrincipals(cx, callable); */ 
1381: /* MUTANT (del_stmt) */ /*             subject = JS_StackFramePrincipals(cx, caller); */ 
1383: /* MUTANT (rep_op) */            if (watcher || subject && !watcher->subsume(watcher, subject)) {
1383: /* MUTANT (rep_op) */            if (watcher && subject || !watcher->subsume(watcher, subject)) {
1383: /* MUTANT (negate) */            if(! (watcher && subject && !watcher->subsume(watcher, subject))) {
1385: /* MUTANT (del_stmt) */ /*                 return JS_TRUE; */ 
1392: /* MUTANT (del_stmt) */ /*     key.id = id; */ 
1393: /* MUTANT (negate) */    if(! (!js_StartResolving(cx, &key, JSRESFLAG_WATCH, &entry)))
1395: /* MUTANT (negate) */    if(! (!entry))
1397: /* MUTANT (del_stmt) */ /*     generation = cx->resolvingTable->generation; */ 
1399: /* MUTANT (del_stmt) */ /*     argv[0] = id; */ 
1399: /* MUTANT (rep_const) */    argv[1] = id;
1399: /* MUTANT (rep_const) */    argv[-1] = id;
1400: /* MUTANT (del_stmt) */ /*     argv[1] = old; */ 
1400: /* MUTANT (rep_const) */    argv[0] = old;
1400: /* MUTANT (rep_const) */    argv[-1] = old;
1400: /* MUTANT (rep_const) */    argv[((1)+1)] = old;
1401: /* MUTANT (del_stmt) */ /*     argv[2] = *nvp; */ 
1401: /* MUTANT (rep_const) */    argv[0] = *nvp;
1401: /* MUTANT (rep_const) */    argv[1] = *nvp;
1401: /* MUTANT (rep_const) */    argv[-1] = *nvp;
1401: /* MUTANT (rep_const) */    argv[((2)+1)] = *nvp;
1401: /* MUTANT (rep_const) */    argv[((2)-1)] = *nvp;
1402: /* MUTANT (del_stmt) */ /*     ok = js_InternalCall(cx, obj, OBJECT_TO_JSVAL(callable), 3, argv, nvp); */ 
1402: /* MUTANT (rep_const) */    ok = js_InternalCall(cx, obj, OBJECT_TO_JSVAL(callable), 0, argv, nvp);
1402: /* MUTANT (rep_const) */    ok = js_InternalCall(cx, obj, OBJECT_TO_JSVAL(callable), 1, argv, nvp);
1402: /* MUTANT (rep_const) */    ok = js_InternalCall(cx, obj, OBJECT_TO_JSVAL(callable), -1, argv, nvp);
1402: /* MUTANT (rep_const) */    ok = js_InternalCall(cx, obj, OBJECT_TO_JSVAL(callable), ((3)+1), argv, nvp);
1402: /* MUTANT (rep_const) */    ok = js_InternalCall(cx, obj, OBJECT_TO_JSVAL(callable), ((3)-1), argv, nvp);
1403: /* MUTANT (del_stmt) */ /*     js_StopResolving(cx, &key, JSRESFLAG_WATCH, entry, generation); */ 
1404: /* MUTANT (del_stmt) */ /*     return ok; */ 
1410: /* MUTANT (del_stmt) */ /*     JSObject *callable; */ 
1411: /* MUTANT (del_stmt) */ /*     jsval userid, value; */ 
1412: /* MUTANT (del_stmt) */ /*     jsid propid; */ 
1413: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
1415: /* MUTANT (del_stmt) */ /*     callable = js_ValueToCallableObject(cx, &argv[1], 0); */ 
1415: /* MUTANT (rep_const) */    callable = js_ValueToCallableObject(cx, &argv[0], 0);
1415: /* MUTANT (rep_const) */    callable = js_ValueToCallableObject(cx, &argv[-1], 0);
1415: /* MUTANT (rep_const) */    callable = js_ValueToCallableObject(cx, &argv[((1)+1)], 0);
1415: /* MUTANT (rep_const) */    callable = js_ValueToCallableObject(cx, &argv[1], 1);
1415: /* MUTANT (rep_const) */    callable = js_ValueToCallableObject(cx, &argv[1], -1);
1416: /* MUTANT (negate) */    if(! (!callable))
1420: /* MUTANT (del_stmt) */ /*     userid = argv[0]; */ 
1420: /* MUTANT (rep_const) */    userid = argv[1];
1420: /* MUTANT (rep_const) */    userid = argv[-1];
1421: /* MUTANT (negate) */    if(! (!JS_ValueToId(cx, userid, &propid)))
1424: /* MUTANT (negate) */    if(! (!OBJ_CHECK_ACCESS(cx, obj, propid, JSACC_WATCH, &value, &attrs)))
1426: /* MUTANT (negate) */    if(! (attrs & JSPROP_READONLY))
1428: /* MUTANT (del_stmt) */ /*     return JS_SetWatchPoint(cx, obj, userid, obj_watch_handler, callable); */ 
1434: /* MUTANT (del_stmt) */ /*     return JS_ClearWatchPoint(cx, obj, argv[0], NULL, NULL); */ 
1434: /* MUTANT (rep_const) */    return JS_ClearWatchPoint(cx, obj, argv[1], NULL, NULL);
1434: /* MUTANT (rep_const) */    return JS_ClearWatchPoint(cx, obj, argv[-1], NULL, NULL);
1458: /* MUTANT (del_stmt) */ /*     jsid id; */ 
1459: /* MUTANT (del_stmt) */ /*     JSObject *obj2; */ 
1460: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
1461: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
1463: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[1], &id))
1463: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[-1], &id))
1463: /* MUTANT (negate) */    if(! (!JS_ValueToId(cx, argv[0], &id)))
1465: /* MUTANT (negate) */    if(! (!lookup(cx, obj, id, &obj2, &prop)))
1467: /* MUTANT (negate) */    if(! (!prop)) {
1468: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_FALSE; */ 
1469: /* MUTANT (rep_op) */    } else if (obj2 != obj) {
1469: /* MUTANT (negate) */    } else if(! (obj2 == obj)) {
1470: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_TRUE; */ 
1472: /* MUTANT (del_stmt) */ /*         JSClass *clasp; */ 
1473: /* MUTANT (del_stmt) */ /*         JSExtendedClass *xclasp; */ 
1475: /* MUTANT (del_stmt) */ /*         clasp = OBJ_GET_CLASS(cx, obj); */ 
1479: /* MUTANT (rep_op) */        if (xclasp || xclasp->outerObject &&
1479: /* MUTANT (rep_op) */        if (xclasp && xclasp->outerObject ||
1480: /* MUTANT (rep_op) */            xclasp->outerObject(cx, obj2) != obj) {
1481: /* MUTANT (del_stmt) */ /*             *rval = JSVAL_TRUE; */ 
1482: /* MUTANT (rep_op) */        } else if (OBJ_IS_NATIVE(obj2) || OBJ_GET_CLASS(cx, obj2) == clasp) {
1482: /* MUTANT (rep_op) */        } else if (OBJ_IS_NATIVE(obj2) && OBJ_GET_CLASS(cx, obj2) != clasp) {
1482: /* MUTANT (negate) */        } else if(! (OBJ_IS_NATIVE(obj2) && OBJ_GET_CLASS(cx, obj2) == clasp)) {
1498: /* MUTANT (del_stmt) */ /*             sprop = (JSScopeProperty *)prop; */ 
1499: /* MUTANT (del_stmt) */ /*             *rval = BOOLEAN_TO_JSVAL(SPROP_IS_SHARED_PERMANENT(sprop)); */ 
1501: /* MUTANT (del_stmt) */ /*             *rval = JSVAL_FALSE; */ 
1504: /* MUTANT (negate) */    if(! (prop))
1506: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1514: /* MUTANT (del_stmt) */ /*     JSBool b; */ 
1516: /* MUTANT (negate) */    if(! (!js_IsDelegate(cx, obj, *argv, &b)))
1518: /* MUTANT (del_stmt) */ /*     *rval = BOOLEAN_TO_JSVAL(b); */ 
1519: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1527: /* MUTANT (del_stmt) */ /*     jsid id; */ 
1528: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
1529: /* MUTANT (del_stmt) */ /*     JSObject *obj2; */ 
1530: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
1531: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
1533: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[1], &id))
1533: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[-1], &id))
1533: /* MUTANT (negate) */    if(! (!JS_ValueToId(cx, argv[0], &id)))
1536: /* MUTANT (negate) */    if(! (!OBJ_LOOKUP_PROPERTY(cx, obj, id, &obj2, &prop)))
1539: /* MUTANT (negate) */    if(! (!prop)) {
1540: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_FALSE; */ 
1541: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
1555: /* MUTANT (rep_op) */    if (obj2 == obj &&
1555: /* MUTANT (rep_op) */    if (obj2 != obj ||
1556: /* MUTANT (rep_op) */        !(OBJ_IS_NATIVE(obj2) ||
1558: /* MUTANT (del_stmt) */ /*         OBJ_DROP_PROPERTY(cx, obj2, prop); */ 
1559: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_FALSE; */ 
1560: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
1564: /* MUTANT (del_stmt) */ /*     OBJ_DROP_PROPERTY(cx, obj2, prop); */ 
1565: /* MUTANT (negate) */    if(! (ok))
1566: /* MUTANT (rep_op) */        *rval = BOOLEAN_TO_JSVAL((attrs & JSPROP_ENUMERATE) == 0);
1566: /* MUTANT (rep_const) */        *rval = BOOLEAN_TO_JSVAL((attrs & JSPROP_ENUMERATE) != 1);
1566: /* MUTANT (rep_const) */        *rval = BOOLEAN_TO_JSVAL((attrs & JSPROP_ENUMERATE) != -1);
1567: /* MUTANT (del_stmt) */ /*     return ok; */ 
1576: /* MUTANT (del_stmt) */ /*     jsval fval, junk; */ 
1577: /* MUTANT (del_stmt) */ /*     jsid id; */ 
1578: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
1580: /* MUTANT (del_stmt) */ /*     fval = argv[1]; */ 
1580: /* MUTANT (rep_const) */    fval = argv[0];
1580: /* MUTANT (rep_const) */    fval = argv[-1];
1580: /* MUTANT (rep_const) */    fval = argv[((1)+1)];
1581: /* MUTANT (rep_op) */    if (JS_TypeOfValue(cx, fval) == JSTYPE_FUNCTION) {
1581: /* MUTANT (negate) */    if(! (JS_TypeOfValue(cx, fval) != JSTYPE_FUNCTION)) {
1585: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1588: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[1], &id))
1588: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[-1], &id))
1588: /* MUTANT (negate) */    if(! (!JS_ValueToId(cx, argv[0], &id)))
1590: /* MUTANT (negate) */    if(! (!js_CheckRedeclaration(cx, obj, id, JSPROP_GETTER, NULL, NULL)))
1596: /* MUTANT (negate) */    if(! (!OBJ_CHECK_ACCESS(cx, obj, id, JSACC_WATCH, &junk, &attrs)))
1600: /* MUTANT (rep_op) */                               JSPROP_ENUMERATE & JSPROP_GETTER | JSPROP_SHARED,
1600: /* MUTANT (rep_op) */                               JSPROP_ENUMERATE | JSPROP_GETTER & JSPROP_SHARED,
1608: /* MUTANT (del_stmt) */ /*     jsval fval, junk; */ 
1609: /* MUTANT (del_stmt) */ /*     jsid id; */ 
1610: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
1612: /* MUTANT (del_stmt) */ /*     fval = argv[1]; */ 
1612: /* MUTANT (rep_const) */    fval = argv[0];
1612: /* MUTANT (rep_const) */    fval = argv[-1];
1612: /* MUTANT (rep_const) */    fval = argv[((1)+1)];
1613: /* MUTANT (rep_op) */    if (JS_TypeOfValue(cx, fval) == JSTYPE_FUNCTION) {
1613: /* MUTANT (negate) */    if(! (JS_TypeOfValue(cx, fval) != JSTYPE_FUNCTION)) {
1617: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1620: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[1], &id))
1620: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[-1], &id))
1620: /* MUTANT (negate) */    if(! (!JS_ValueToId(cx, argv[0], &id)))
1622: /* MUTANT (negate) */    if(! (!js_CheckRedeclaration(cx, obj, id, JSPROP_SETTER, NULL, NULL)))
1628: /* MUTANT (negate) */    if(! (!OBJ_CHECK_ACCESS(cx, obj, id, JSACC_WATCH, &junk, &attrs)))
1632: /* MUTANT (rep_op) */                               JSPROP_ENUMERATE & JSPROP_SETTER | JSPROP_SHARED,
1632: /* MUTANT (rep_op) */                               JSPROP_ENUMERATE | JSPROP_SETTER & JSPROP_SHARED,
1640: /* MUTANT (del_stmt) */ /*     jsid id; */ 
1641: /* MUTANT (del_stmt) */ /*     JSObject *pobj; */ 
1642: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
1643: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
1645: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[1], &id))
1645: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[-1], &id))
1645: /* MUTANT (negate) */    if(! (!JS_ValueToId(cx, argv[0], &id)))
1647: /* MUTANT (negate) */    if(! (!OBJ_LOOKUP_PROPERTY(cx, obj, id, &pobj, &prop)))
1649: /* MUTANT (negate) */    if(! (prop)) {
1650: /* MUTANT (negate) */        if(! (OBJ_IS_NATIVE(pobj))) {
1651: /* MUTANT (del_stmt) */ /*             sprop = (JSScopeProperty *) prop; */ 
1652: /* MUTANT (negate) */            if(! (sprop->attrs & JSPROP_GETTER))
1664: /* MUTANT (del_stmt) */ /*     jsid id; */ 
1665: /* MUTANT (del_stmt) */ /*     JSObject *pobj; */ 
1666: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
1667: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
1669: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[1], &id))
1669: /* MUTANT (rep_const) */    if (!JS_ValueToId(cx, argv[-1], &id))
1669: /* MUTANT (negate) */    if(! (!JS_ValueToId(cx, argv[0], &id)))
1671: /* MUTANT (negate) */    if(! (!OBJ_LOOKUP_PROPERTY(cx, obj, id, &pobj, &prop)))
1673: /* MUTANT (negate) */    if(! (prop)) {
1674: /* MUTANT (negate) */        if(! (OBJ_IS_NATIVE(pobj))) {
1675: /* MUTANT (del_stmt) */ /*             sprop = (JSScopeProperty *) prop; */ 
1676: /* MUTANT (negate) */            if(! (sprop->attrs & JSPROP_SETTER))
1687: /* MUTANT (del_stmt) */ /* const char js_unwatch_str[] = "unwatch"; */ 
1691: /* MUTANT (del_stmt) */ /* const char js_isPrototypeOf_str[] = "isPrototypeOf"; */ 
1692: /* MUTANT (del_stmt) */ /* const char js_propertyIsEnumerable_str[] = "propertyIsEnumerable"; */ 
1696: /* MUTANT (del_stmt) */ /* const char js_defineSetter_str[] = "__defineSetter__"; */ 
1697: /* MUTANT (del_stmt) */ /* const char js_lookupGetter_str[] = "__lookupGetter__"; */ 
1698: /* MUTANT (del_stmt) */ /* const char js_lookupSetter_str[] = "__lookupSetter__"; */ 
1703: /* MUTANT (rep_const) */    {js_toSource_str,             js_obj_toSource,    1, 0, OBJ_TOSTRING_EXTRA},
1703: /* MUTANT (rep_const) */    {js_toSource_str,             js_obj_toSource,    -1, 0, OBJ_TOSTRING_EXTRA},
1703: /* MUTANT (rep_const) */    {js_toSource_str,             js_obj_toSource,    0, 1, OBJ_TOSTRING_EXTRA},
1703: /* MUTANT (rep_const) */    {js_toSource_str,             js_obj_toSource,    0, -1, OBJ_TOSTRING_EXTRA},
1705: /* MUTANT (rep_const) */    {js_toString_str,             js_obj_toString,    1, 0, OBJ_TOSTRING_EXTRA},
1705: /* MUTANT (rep_const) */    {js_toString_str,             js_obj_toString,    -1, 0, OBJ_TOSTRING_EXTRA},
1705: /* MUTANT (rep_const) */    {js_toString_str,             js_obj_toString,    0, 1, OBJ_TOSTRING_EXTRA},
1705: /* MUTANT (rep_const) */    {js_toString_str,             js_obj_toString,    0, -1, OBJ_TOSTRING_EXTRA},
1706: /* MUTANT (rep_const) */    {js_toLocaleString_str,       js_obj_toLocaleString, 1, 0, OBJ_TOSTRING_EXTRA},
1706: /* MUTANT (rep_const) */    {js_toLocaleString_str,       js_obj_toLocaleString, -1, 0, OBJ_TOSTRING_EXTRA},
1706: /* MUTANT (rep_const) */    {js_toLocaleString_str,       js_obj_toLocaleString, 0, 1, OBJ_TOSTRING_EXTRA},
1706: /* MUTANT (rep_const) */    {js_toLocaleString_str,       js_obj_toLocaleString, 0, -1, OBJ_TOSTRING_EXTRA},
1707: /* MUTANT (rep_const) */    {js_valueOf_str,              obj_valueOf,        1,0,0},
1707: /* MUTANT (rep_const) */    {js_valueOf_str,              obj_valueOf,        -1,0,0},
1707: /* MUTANT (rep_const) */    {js_valueOf_str,              obj_valueOf,        0,1,0},
1707: /* MUTANT (rep_const) */    {js_valueOf_str,              obj_valueOf,        0,-1,0},
1707: /* MUTANT (rep_const) */    {js_valueOf_str,              obj_valueOf,        0,0,1},
1707: /* MUTANT (rep_const) */    {js_valueOf_str,              obj_valueOf,        0,0,-1},
1708: /* MUTANT (rep_const) */    {js_eval_str,                 obj_eval,           0,0,0},
1708: /* MUTANT (rep_const) */    {js_eval_str,                 obj_eval,           -1,0,0},
1708: /* MUTANT (rep_const) */    {js_eval_str,                 obj_eval,           ((1)+1),0,0},
1708: /* MUTANT (rep_const) */    {js_eval_str,                 obj_eval,           1,1,0},
1708: /* MUTANT (rep_const) */    {js_eval_str,                 obj_eval,           1,-1,0},
1708: /* MUTANT (rep_const) */    {js_eval_str,                 obj_eval,           1,0,1},
1708: /* MUTANT (rep_const) */    {js_eval_str,                 obj_eval,           1,0,-1},
1710: /* MUTANT (rep_const) */    {js_watch_str,                obj_watch,          0,0,0},
1710: /* MUTANT (rep_const) */    {js_watch_str,                obj_watch,          1,0,0},
1710: /* MUTANT (rep_const) */    {js_watch_str,                obj_watch,          -1,0,0},
1710: /* MUTANT (rep_const) */    {js_watch_str,                obj_watch,          ((2)+1),0,0},
1710: /* MUTANT (rep_const) */    {js_watch_str,                obj_watch,          ((2)-1),0,0},
1710: /* MUTANT (rep_const) */    {js_watch_str,                obj_watch,          2,1,0},
1710: /* MUTANT (rep_const) */    {js_watch_str,                obj_watch,          2,-1,0},
1710: /* MUTANT (rep_const) */    {js_watch_str,                obj_watch,          2,0,1},
1710: /* MUTANT (rep_const) */    {js_watch_str,                obj_watch,          2,0,-1},
1711: /* MUTANT (rep_const) */    {js_unwatch_str,              obj_unwatch,        0,0,0},
1711: /* MUTANT (rep_const) */    {js_unwatch_str,              obj_unwatch,        -1,0,0},
1711: /* MUTANT (rep_const) */    {js_unwatch_str,              obj_unwatch,        ((1)+1),0,0},
1711: /* MUTANT (rep_const) */    {js_unwatch_str,              obj_unwatch,        1,1,0},
1711: /* MUTANT (rep_const) */    {js_unwatch_str,              obj_unwatch,        1,-1,0},
1711: /* MUTANT (rep_const) */    {js_unwatch_str,              obj_unwatch,        1,0,1},
1711: /* MUTANT (rep_const) */    {js_unwatch_str,              obj_unwatch,        1,0,-1},
1714: /* MUTANT (rep_const) */    {js_hasOwnProperty_str,       obj_hasOwnProperty, 0,0,0},
1714: /* MUTANT (rep_const) */    {js_hasOwnProperty_str,       obj_hasOwnProperty, -1,0,0},
1714: /* MUTANT (rep_const) */    {js_hasOwnProperty_str,       obj_hasOwnProperty, ((1)+1),0,0},
1714: /* MUTANT (rep_const) */    {js_hasOwnProperty_str,       obj_hasOwnProperty, 1,1,0},
1714: /* MUTANT (rep_const) */    {js_hasOwnProperty_str,       obj_hasOwnProperty, 1,-1,0},
1714: /* MUTANT (rep_const) */    {js_hasOwnProperty_str,       obj_hasOwnProperty, 1,0,1},
1714: /* MUTANT (rep_const) */    {js_hasOwnProperty_str,       obj_hasOwnProperty, 1,0,-1},
1715: /* MUTANT (rep_const) */    {js_isPrototypeOf_str,        obj_isPrototypeOf,  0,0,0},
1715: /* MUTANT (rep_const) */    {js_isPrototypeOf_str,        obj_isPrototypeOf,  -1,0,0},
1715: /* MUTANT (rep_const) */    {js_isPrototypeOf_str,        obj_isPrototypeOf,  ((1)+1),0,0},
1715: /* MUTANT (rep_const) */    {js_isPrototypeOf_str,        obj_isPrototypeOf,  1,1,0},
1715: /* MUTANT (rep_const) */    {js_isPrototypeOf_str,        obj_isPrototypeOf,  1,-1,0},
1715: /* MUTANT (rep_const) */    {js_isPrototypeOf_str,        obj_isPrototypeOf,  1,0,1},
1715: /* MUTANT (rep_const) */    {js_isPrototypeOf_str,        obj_isPrototypeOf,  1,0,-1},
1716: /* MUTANT (rep_const) */    {js_propertyIsEnumerable_str, obj_propertyIsEnumerable, 0,0,0},
1716: /* MUTANT (rep_const) */    {js_propertyIsEnumerable_str, obj_propertyIsEnumerable, -1,0,0},
1716: /* MUTANT (rep_const) */    {js_propertyIsEnumerable_str, obj_propertyIsEnumerable, ((1)+1),0,0},
1716: /* MUTANT (rep_const) */    {js_propertyIsEnumerable_str, obj_propertyIsEnumerable, 1,1,0},
1716: /* MUTANT (rep_const) */    {js_propertyIsEnumerable_str, obj_propertyIsEnumerable, 1,-1,0},
1716: /* MUTANT (rep_const) */    {js_propertyIsEnumerable_str, obj_propertyIsEnumerable, 1,0,1},
1716: /* MUTANT (rep_const) */    {js_propertyIsEnumerable_str, obj_propertyIsEnumerable, 1,0,-1},
1719: /* MUTANT (rep_const) */    {js_defineGetter_str,         obj_defineGetter,   0,0,0},
1719: /* MUTANT (rep_const) */    {js_defineGetter_str,         obj_defineGetter,   1,0,0},
1719: /* MUTANT (rep_const) */    {js_defineGetter_str,         obj_defineGetter,   -1,0,0},
1719: /* MUTANT (rep_const) */    {js_defineGetter_str,         obj_defineGetter,   ((2)+1),0,0},
1719: /* MUTANT (rep_const) */    {js_defineGetter_str,         obj_defineGetter,   ((2)-1),0,0},
1719: /* MUTANT (rep_const) */    {js_defineGetter_str,         obj_defineGetter,   2,1,0},
1719: /* MUTANT (rep_const) */    {js_defineGetter_str,         obj_defineGetter,   2,-1,0},
1719: /* MUTANT (rep_const) */    {js_defineGetter_str,         obj_defineGetter,   2,0,1},
1719: /* MUTANT (rep_const) */    {js_defineGetter_str,         obj_defineGetter,   2,0,-1},
1720: /* MUTANT (rep_const) */    {js_defineSetter_str,         obj_defineSetter,   0,0,0},
1720: /* MUTANT (rep_const) */    {js_defineSetter_str,         obj_defineSetter,   1,0,0},
1720: /* MUTANT (rep_const) */    {js_defineSetter_str,         obj_defineSetter,   -1,0,0},
1720: /* MUTANT (rep_const) */    {js_defineSetter_str,         obj_defineSetter,   ((2)+1),0,0},
1720: /* MUTANT (rep_const) */    {js_defineSetter_str,         obj_defineSetter,   ((2)-1),0,0},
1720: /* MUTANT (rep_const) */    {js_defineSetter_str,         obj_defineSetter,   2,1,0},
1720: /* MUTANT (rep_const) */    {js_defineSetter_str,         obj_defineSetter,   2,-1,0},
1720: /* MUTANT (rep_const) */    {js_defineSetter_str,         obj_defineSetter,   2,0,1},
1720: /* MUTANT (rep_const) */    {js_defineSetter_str,         obj_defineSetter,   2,0,-1},
1721: /* MUTANT (rep_const) */    {js_lookupGetter_str,         obj_lookupGetter,   0,0,0},
1721: /* MUTANT (rep_const) */    {js_lookupGetter_str,         obj_lookupGetter,   -1,0,0},
1721: /* MUTANT (rep_const) */    {js_lookupGetter_str,         obj_lookupGetter,   ((1)+1),0,0},
1721: /* MUTANT (rep_const) */    {js_lookupGetter_str,         obj_lookupGetter,   1,1,0},
1721: /* MUTANT (rep_const) */    {js_lookupGetter_str,         obj_lookupGetter,   1,-1,0},
1721: /* MUTANT (rep_const) */    {js_lookupGetter_str,         obj_lookupGetter,   1,0,1},
1721: /* MUTANT (rep_const) */    {js_lookupGetter_str,         obj_lookupGetter,   1,0,-1},
1722: /* MUTANT (rep_const) */    {js_lookupSetter_str,         obj_lookupSetter,   0,0,0},
1722: /* MUTANT (rep_const) */    {js_lookupSetter_str,         obj_lookupSetter,   -1,0,0},
1722: /* MUTANT (rep_const) */    {js_lookupSetter_str,         obj_lookupSetter,   ((1)+1),0,0},
1722: /* MUTANT (rep_const) */    {js_lookupSetter_str,         obj_lookupSetter,   1,1,0},
1722: /* MUTANT (rep_const) */    {js_lookupSetter_str,         obj_lookupSetter,   1,-1,0},
1722: /* MUTANT (rep_const) */    {js_lookupSetter_str,         obj_lookupSetter,   1,0,1},
1722: /* MUTANT (rep_const) */    {js_lookupSetter_str,         obj_lookupSetter,   1,0,-1},
1724: /* MUTANT (rep_const) */    {1,0,0,0,0}
1724: /* MUTANT (rep_const) */    {-1,0,0,0,0}
1724: /* MUTANT (rep_const) */    {0,1,0,0,0}
1724: /* MUTANT (rep_const) */    {0,-1,0,0,0}
1724: /* MUTANT (rep_const) */    {0,0,1,0,0}
1724: /* MUTANT (rep_const) */    {0,0,-1,0,0}
1724: /* MUTANT (rep_const) */    {0,0,0,1,0}
1724: /* MUTANT (rep_const) */    {0,0,0,-1,0}
1724: /* MUTANT (rep_const) */    {0,0,0,0,1}
1724: /* MUTANT (rep_const) */    {0,0,0,0,-1}
1730: /* MUTANT (rep_op) */    if (argc != 0) {
1730: /* MUTANT (rep_const) */    if (argc == 1) {
1730: /* MUTANT (rep_const) */    if (argc == -1) {
1730: /* MUTANT (negate) */    if(! (argc == 0)) {
1732: /* MUTANT (del_stmt) */ /*         obj = NULL; */ 
1735: /* MUTANT (rep_const) */        if (!js_ValueToObject(cx, argv[1], &obj))
1735: /* MUTANT (rep_const) */        if (!js_ValueToObject(cx, argv[-1], &obj))
1735: /* MUTANT (negate) */        if(! (!js_ValueToObject(cx, argv[0], &obj)))
1738: /* MUTANT (negate) */    if(! (!obj)) {
1739: /* MUTANT (del_stmt) */ /*         JS_ASSERT(!argc || JSVAL_IS_NULL(argv[0]) || JSVAL_IS_VOID(argv[0])); */ 
1739: /* MUTANT (rep_op) */        JS_ASSERT(!argc && JSVAL_IS_NULL(argv[0]) || JSVAL_IS_VOID(argv[0]));
1739: /* MUTANT (rep_op) */        JS_ASSERT(!argc || JSVAL_IS_NULL(argv[0]) && JSVAL_IS_VOID(argv[0]));
1739: /* MUTANT (rep_const) */        JS_ASSERT(!argc || JSVAL_IS_NULL(argv[1]) || JSVAL_IS_VOID(argv[0]));
1739: /* MUTANT (rep_const) */        JS_ASSERT(!argc || JSVAL_IS_NULL(argv[-1]) || JSVAL_IS_VOID(argv[0]));
1739: /* MUTANT (rep_const) */        JS_ASSERT(!argc || JSVAL_IS_NULL(argv[0]) || JSVAL_IS_VOID(argv[1]));
1739: /* MUTANT (rep_const) */        JS_ASSERT(!argc || JSVAL_IS_NULL(argv[0]) || JSVAL_IS_VOID(argv[-1]));
1740: /* MUTANT (negate) */        if(! (cx->fp->flags & JSFRAME_CONSTRUCTING))
1742: /* MUTANT (del_stmt) */ /*         obj = js_NewObject(cx, &js_ObjectClass, NULL, NULL); */ 
1743: /* MUTANT (negate) */        if(! (!obj))
1747: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1757: /* MUTANT (del_stmt) */ /*     JSObject *proto = OBJ_GET_PROTO(cx, obj); */ 
1758: /* MUTANT (negate) */    if(! (!proto))
1760: /* MUTANT (del_stmt) */ /*     return OBJ_LOOKUP_PROPERTY(cx, proto, id, objp, propp); */ 
1766: /* MUTANT (del_stmt) */ /*     JSObject *proto = OBJ_GET_PROTO(cx, obj); */ 
1767: /* MUTANT (negate) */    if(! (!proto))
1769: /* MUTANT (del_stmt) */ /*     return OBJ_GET_PROPERTY(cx, proto, id, vp); */ 
1775: /* MUTANT (del_stmt) */ /*     JSObject *proto = OBJ_GET_PROTO(cx, obj); */ 
1776: /* MUTANT (negate) */    if(! (!proto))
1778: /* MUTANT (del_stmt) */ /*     return OBJ_SET_PROPERTY(cx, proto, id, vp); */ 
1785: /* MUTANT (del_stmt) */ /*     JSObject *proto = OBJ_GET_PROTO(cx, obj); */ 
1786: /* MUTANT (negate) */    if(! (!proto))
1788: /* MUTANT (del_stmt) */ /*     return OBJ_GET_ATTRIBUTES(cx, proto, id, prop, attrsp); */ 
1795: /* MUTANT (del_stmt) */ /*     JSObject *proto = OBJ_GET_PROTO(cx, obj); */ 
1796: /* MUTANT (negate) */    if(! (!proto))
1798: /* MUTANT (del_stmt) */ /*     return OBJ_SET_ATTRIBUTES(cx, proto, id, prop, attrsp); */ 
1804: /* MUTANT (del_stmt) */ /*     JSObject *proto = OBJ_GET_PROTO(cx, obj); */ 
1805: /* MUTANT (negate) */    if(! (!proto))
1807: /* MUTANT (del_stmt) */ /*     return OBJ_DELETE_PROPERTY(cx, proto, id, rval); */ 
1813: /* MUTANT (del_stmt) */ /*     JSObject *proto = OBJ_GET_PROTO(cx, obj); */ 
1814: /* MUTANT (negate) */    if(! (!proto))
1816: /* MUTANT (del_stmt) */ /*     return OBJ_DEFAULT_VALUE(cx, proto, hint, vp); */ 
1823: /* MUTANT (del_stmt) */ /*     JSObject *proto = OBJ_GET_PROTO(cx, obj); */ 
1824: /* MUTANT (negate) */    if(! (!proto))
1826: /* MUTANT (del_stmt) */ /*     return OBJ_ENUMERATE(cx, proto, enum_op, statep, idp); */ 
1833: /* MUTANT (del_stmt) */ /*     JSObject *proto = OBJ_GET_PROTO(cx, obj); */ 
1834: /* MUTANT (negate) */    if(! (!proto))
1836: /* MUTANT (del_stmt) */ /*     return OBJ_CHECK_ACCESS(cx, proto, id, mode, vp, attrsp); */ 
1842: /* MUTANT (del_stmt) */ /*     JSObject *proto = OBJ_GET_PROTO(cx, obj); */ 
1843: /* MUTANT (negate) */    if(! (!proto))
1845: /* MUTANT (del_stmt) */ /*     return OBJ_THIS_OBJECT(cx, proto); */ 
1866: /* MUTANT (del_stmt) */ /*     return &js_WithObjectOps; */ 
1871: /* MUTANT (rep_op) */    JSCLASS_HAS_PRIVATE & JSCLASS_HAS_RESERVED_SLOTS(1),
1871: /* MUTANT (rep_const) */    JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(0),
1871: /* MUTANT (rep_const) */    JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(-1),
1871: /* MUTANT (rep_const) */    JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(((1)+1)),
1875: /* MUTANT (rep_const) */    1,0,0,0,0,0,0
1875: /* MUTANT (rep_const) */    -1,0,0,0,0,0,0
1875: /* MUTANT (rep_const) */    0,1,0,0,0,0,0
1875: /* MUTANT (rep_const) */    0,-1,0,0,0,0,0
1875: /* MUTANT (rep_const) */    0,0,1,0,0,0,0
1875: /* MUTANT (rep_const) */    0,0,-1,0,0,0,0
1875: /* MUTANT (rep_const) */    0,0,0,1,0,0,0
1875: /* MUTANT (rep_const) */    0,0,0,-1,0,0,0
1875: /* MUTANT (rep_const) */    0,0,0,0,1,0,0
1875: /* MUTANT (rep_const) */    0,0,0,0,-1,0,0
1875: /* MUTANT (rep_const) */    0,0,0,0,0,1,0
1875: /* MUTANT (rep_const) */    0,0,0,0,0,-1,0
1875: /* MUTANT (rep_const) */    0,0,0,0,0,0,1
1875: /* MUTANT (rep_const) */    0,0,0,0,0,0,-1
1881: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
1883: /* MUTANT (del_stmt) */ /*     obj = js_NewObject(cx, &js_WithClass, proto, parent); */ 
1884: /* MUTANT (negate) */    if(! (!obj))
1886: /* MUTANT (del_stmt) */ /*     obj->slots[JSSLOT_PRIVATE] = PRIVATE_TO_JSVAL(cx->fp); */ 
1887: /* MUTANT (del_stmt) */ /*     OBJ_SET_BLOCK_DEPTH(cx, obj, depth); */ 
1888: /* MUTANT (del_stmt) */ /*     return obj; */ 
1895: /* MUTANT (del_stmt) */ /*     JSObject *parent, *proto; */ 
1896: /* MUTANT (del_stmt) */ /*     jsval v; */ 
1899: /* MUTANT (rep_op) */                                      JSREPORT_WARNING & JSREPORT_STRICT,
1903: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1906: /* MUTANT (negate) */    if(! (!(cx->fp->flags & JSFRAME_CONSTRUCTING))) {
1907: /* MUTANT (del_stmt) */ /*         obj = js_NewWithObject(cx, NULL, NULL, -1); */ 
1907: /* MUTANT (rep_const) */        obj = js_NewWithObject(cx, NULL, NULL, 0);
1907: /* MUTANT (rep_const) */        obj = js_NewWithObject(cx, NULL, NULL, 1);
1907: /* MUTANT (rep_const) */        obj = js_NewWithObject(cx, NULL, NULL, ((-1)+1));
1907: /* MUTANT (rep_const) */        obj = js_NewWithObject(cx, NULL, NULL, ((-1)-1));
1908: /* MUTANT (negate) */        if(! (!obj))
1910: /* MUTANT (del_stmt) */ /*         *rval = OBJECT_TO_JSVAL(obj); */ 
1914: /* MUTANT (rep_op) */    if (argc <= 0) {
1914: /* MUTANT (rep_op) */    if (argc < 0) {
1914: /* MUTANT (rep_op) */    if (argc >= 0) {
1914: /* MUTANT (rep_op) */    if (argc == 0) {
1914: /* MUTANT (rep_op) */    if (argc != 0) {
1914: /* MUTANT (rep_const) */    if (argc > 1) {
1914: /* MUTANT (rep_const) */    if (argc > -1) {
1914: /* MUTANT (negate) */    if(! (argc > 0)) {
1915: /* MUTANT (rep_const) */        if (!js_ValueToObject(cx, argv[1], &proto))
1915: /* MUTANT (rep_const) */        if (!js_ValueToObject(cx, argv[-1], &proto))
1915: /* MUTANT (negate) */        if(! (!js_ValueToObject(cx, argv[0], &proto)))
1917: /* MUTANT (del_stmt) */ /*         v = OBJECT_TO_JSVAL(proto); */ 
1918: /* MUTANT (negate) */        if(! (!obj_setSlot(cx, obj, INT_TO_JSVAL(JSSLOT_PROTO), &v)))
1920: /* MUTANT (rep_op) */        if (argc <= 1) {
1920: /* MUTANT (rep_op) */        if (argc < 1) {
1920: /* MUTANT (rep_op) */        if (argc >= 1) {
1920: /* MUTANT (rep_op) */        if (argc == 1) {
1920: /* MUTANT (rep_op) */        if (argc != 1) {
1920: /* MUTANT (rep_const) */        if (argc > 0) {
1920: /* MUTANT (rep_const) */        if (argc > -1) {
1920: /* MUTANT (rep_const) */        if (argc > ((1)+1)) {
1920: /* MUTANT (negate) */        if(! (argc > 1)) {
1921: /* MUTANT (rep_const) */            if (!js_ValueToObject(cx, argv[0], &parent))
1921: /* MUTANT (rep_const) */            if (!js_ValueToObject(cx, argv[-1], &parent))
1921: /* MUTANT (rep_const) */            if (!js_ValueToObject(cx, argv[((1)+1)], &parent))
1921: /* MUTANT (negate) */            if(! (!js_ValueToObject(cx, argv[1], &parent)))
1926: /* MUTANT (del_stmt) */ /*     return obj_setSlot(cx, obj, INT_TO_JSVAL(JSSLOT_PARENT), &v); */ 
1933: /* MUTANT (del_stmt) */ /*     JSObject *proto; */ 
1934: /* MUTANT (del_stmt) */ /*     jsval eval; */ 
1937: /* MUTANT (rep_op) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE <= ATOM_INDEX_LIMIT_LOG2 + 1);
1937: /* MUTANT (rep_op) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE < ATOM_INDEX_LIMIT_LOG2 + 1);
1937: /* MUTANT (rep_op) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE > ATOM_INDEX_LIMIT_LOG2 + 1);
1937: /* MUTANT (rep_op) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE == ATOM_INDEX_LIMIT_LOG2 + 1);
1937: /* MUTANT (rep_op) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE != ATOM_INDEX_LIMIT_LOG2 + 1);
1937: /* MUTANT (rep_op) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE >= ATOM_INDEX_LIMIT_LOG2 - 1);
1937: /* MUTANT (rep_op) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE >= ATOM_INDEX_LIMIT_LOG2 * 1);
1937: /* MUTANT (rep_op) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE >= ATOM_INDEX_LIMIT_LOG2 % 1);
1937: /* MUTANT (rep_const) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE >= ATOM_INDEX_LIMIT_LOG2 + 0);
1937: /* MUTANT (rep_const) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE >= ATOM_INDEX_LIMIT_LOG2 + -1);
1937: /* MUTANT (rep_const) */    JS_ASSERT(sizeof(jsatomid) * JS_BITS_PER_BYTE >= ATOM_INDEX_LIMIT_LOG2 + ((1)+1));
1940: /* MUTANT (rep_const) */    proto = JS_InitClass(cx, obj, NULL, &js_ObjectClass, Object, 0,
1940: /* MUTANT (rep_const) */    proto = JS_InitClass(cx, obj, NULL, &js_ObjectClass, Object, -1,
1940: /* MUTANT (rep_const) */    proto = JS_InitClass(cx, obj, NULL, &js_ObjectClass, Object, ((1)+1),
1942: /* MUTANT (negate) */    if(! (!proto))
1946: /* MUTANT (rep_const) */    if (!JS_InitClass(cx, obj, NULL, &js_WithClass, With, 1,
1946: /* MUTANT (rep_const) */    if (!JS_InitClass(cx, obj, NULL, &js_WithClass, With, -1,
1948: /* MUTANT (del_stmt) */ /*         return NULL; */ 
1956: /* MUTANT (del_stmt) */ /*         return NULL; */ 
1960: /* MUTANT (rep_const) */                             eval, NULL, NULL, 1, NULL)) {
1960: /* MUTANT (rep_const) */                             eval, NULL, NULL, -1, NULL)) {
1961: /* MUTANT (del_stmt) */ /*         return NULL; */ 
1971: /* MUTANT (del_stmt) */ /*     map->nrefs = nrefs; */ 
1972: /* MUTANT (del_stmt) */ /*     map->ops = ops; */ 
1973: /* MUTANT (del_stmt) */ /*     map->nslots = JS_INITIAL_NSLOTS; */ 
1974: /* MUTANT (del_stmt) */ /*     map->freeslot = JSSLOT_FREE(clasp); */ 
1981: /* MUTANT (del_stmt) */ /*     return (JSObjectMap *) js_NewScope(cx, nrefs, ops, clasp, obj); */ 
1987: /* MUTANT (del_stmt) */ /*     js_DestroyScope(cx, (JSScope *)map); */ 
1993: /* MUTANT (del_stmt) */ /*     JS_ASSERT(map->nrefs >= 0); */ 
1993: /* MUTANT (rep_op) */    JS_ASSERT(map->nrefs <= 0);
1993: /* MUTANT (rep_op) */    JS_ASSERT(map->nrefs < 0);
1993: /* MUTANT (rep_op) */    JS_ASSERT(map->nrefs > 0);
1993: /* MUTANT (rep_op) */    JS_ASSERT(map->nrefs == 0);
1993: /* MUTANT (rep_op) */    JS_ASSERT(map->nrefs != 0);
1993: /* MUTANT (rep_const) */    JS_ASSERT(map->nrefs >= 1);
1993: /* MUTANT (rep_const) */    JS_ASSERT(map->nrefs >= -1);
1994: /* MUTANT (del_stmt) */ /*     JS_ATOMIC_INCREMENT(&map->nrefs); */ 
1995: /* MUTANT (del_stmt) */ /*     return map; */ 
2001: /* MUTANT (del_stmt) */ /*     JS_ASSERT(map->nrefs > 0); */ 
2001: /* MUTANT (rep_op) */    JS_ASSERT(map->nrefs <= 0);
2001: /* MUTANT (rep_op) */    JS_ASSERT(map->nrefs < 0);
2001: /* MUTANT (rep_op) */    JS_ASSERT(map->nrefs >= 0);
2001: /* MUTANT (rep_op) */    JS_ASSERT(map->nrefs == 0);
2001: /* MUTANT (rep_op) */    JS_ASSERT(map->nrefs != 0);
2001: /* MUTANT (rep_const) */    JS_ASSERT(map->nrefs > 1);
2001: /* MUTANT (rep_const) */    JS_ASSERT(map->nrefs > -1);
2002: /* MUTANT (del_stmt) */ /*     JS_ATOMIC_DECREMENT(&map->nrefs); */ 
2003: /* MUTANT (rep_op) */    if (map->nrefs != 0) {
2003: /* MUTANT (rep_const) */    if (map->nrefs == 1) {
2003: /* MUTANT (rep_const) */    if (map->nrefs == -1) {
2003: /* MUTANT (negate) */    if(! (map->nrefs == 0)) {
2004: /* MUTANT (del_stmt) */ /*         map->ops->destroyObjectMap(cx, map); */ 
2005: /* MUTANT (del_stmt) */ /*         return NULL; */ 
2007: /* MUTANT (rep_op) */    if (MAP_IS_NATIVE(map) || ((JSScope *)map)->object == obj)
2007: /* MUTANT (rep_op) */    if (MAP_IS_NATIVE(map) && ((JSScope *)map)->object != obj)
2007: /* MUTANT (negate) */    if(! (MAP_IS_NATIVE(map) && ((JSScope *)map)->object == obj))
2009: /* MUTANT (del_stmt) */ /*     return map; */ 
2019: /* MUTANT (del_stmt) */ /*     size_t nbytes, obytes, minbytes; */ 
2020: /* MUTANT (del_stmt) */ /*     uint32 i, oslots; */ 
2021: /* MUTANT (del_stmt) */ /*     jsval *newslots; */ 
2023: /* MUTANT (del_stmt) */ /*     nbytes = (nslots + 1) * sizeof(jsval); */ 
2023: /* MUTANT (rep_op) */    nbytes = (nslots - 1) * sizeof(jsval);
2023: /* MUTANT (rep_op) */    nbytes = (nslots * 1) * sizeof(jsval);
2023: /* MUTANT (rep_op) */    nbytes = (nslots % 1) * sizeof(jsval);
2023: /* MUTANT (rep_const) */    nbytes = (nslots + 0) * sizeof(jsval);
2023: /* MUTANT (rep_const) */    nbytes = (nslots + -1) * sizeof(jsval);
2023: /* MUTANT (rep_const) */    nbytes = (nslots + ((1)+1)) * sizeof(jsval);
2024: /* MUTANT (negate) */    if(! (slots)) {
2025: /* MUTANT (del_stmt) */ /*         oslots = slots[-1]; */ 
2025: /* MUTANT (rep_const) */        oslots = slots[0];
2025: /* MUTANT (rep_const) */        oslots = slots[1];
2025: /* MUTANT (rep_const) */        oslots = slots[((-1)+1)];
2025: /* MUTANT (rep_const) */        oslots = slots[((-1)-1)];
2026: /* MUTANT (del_stmt) */ /*         obytes = (oslots + 1) * sizeof(jsval); */ 
2026: /* MUTANT (rep_op) */        obytes = (oslots - 1) * sizeof(jsval);
2026: /* MUTANT (rep_op) */        obytes = (oslots * 1) * sizeof(jsval);
2026: /* MUTANT (rep_op) */        obytes = (oslots % 1) * sizeof(jsval);
2026: /* MUTANT (rep_const) */        obytes = (oslots + 0) * sizeof(jsval);
2026: /* MUTANT (rep_const) */        obytes = (oslots + -1) * sizeof(jsval);
2026: /* MUTANT (rep_const) */        obytes = (oslots + ((1)+1)) * sizeof(jsval);
2028: /* MUTANT (del_stmt) */ /*         oslots = 0; */ 
2028: /* MUTANT (rep_const) */        oslots = 1;
2028: /* MUTANT (rep_const) */        oslots = -1;
2029: /* MUTANT (del_stmt) */ /*         obytes = 0; */ 
2029: /* MUTANT (rep_const) */        obytes = 1;
2029: /* MUTANT (rep_const) */        obytes = -1;
2032: /* MUTANT (rep_op) */    if (nbytes < GC_NBYTES_MAX) {
2032: /* MUTANT (rep_op) */    if (nbytes > GC_NBYTES_MAX) {
2032: /* MUTANT (rep_op) */    if (nbytes >= GC_NBYTES_MAX) {
2032: /* MUTANT (rep_op) */    if (nbytes == GC_NBYTES_MAX) {
2032: /* MUTANT (rep_op) */    if (nbytes != GC_NBYTES_MAX) {
2032: /* MUTANT (negate) */    if(! (nbytes <= GC_NBYTES_MAX)) {
2033: /* MUTANT (del_stmt) */ /*         newslots = (jsval *) js_NewGCThing(cx, GCX_PRIVATE, nbytes); */ 
2037: /* MUTANT (rep_op) */                              (obytes < GC_NBYTES_MAX) ? NULL : slots - 1,
2037: /* MUTANT (rep_op) */                              (obytes > GC_NBYTES_MAX) ? NULL : slots - 1,
2037: /* MUTANT (rep_op) */                              (obytes >= GC_NBYTES_MAX) ? NULL : slots - 1,
2037: /* MUTANT (rep_op) */                              (obytes == GC_NBYTES_MAX) ? NULL : slots - 1,
2037: /* MUTANT (rep_op) */                              (obytes != GC_NBYTES_MAX) ? NULL : slots - 1,
2037: /* MUTANT (rep_const) */                              (obytes <= GC_NBYTES_MAX) ? NULL : slots - 0,
2037: /* MUTANT (rep_const) */                              (obytes <= GC_NBYTES_MAX) ? NULL : slots - -1,
2037: /* MUTANT (rep_const) */                              (obytes <= GC_NBYTES_MAX) ? NULL : slots - ((1)+1),
2040: /* MUTANT (negate) */    if(! (!newslots))
2043: /* MUTANT (rep_op) */    if (obytes == 0) {
2043: /* MUTANT (rep_const) */    if (obytes != 1) {
2043: /* MUTANT (rep_const) */    if (obytes != -1) {
2043: /* MUTANT (negate) */    if(! (obytes != 0)) {
2045: /* MUTANT (del_stmt) */ /*         minbytes = JS_MIN(nbytes, obytes); */ 
2046: /* MUTANT (rep_op) */        if (minbytes < GC_NBYTES_MAX)
2046: /* MUTANT (rep_op) */        if (minbytes > GC_NBYTES_MAX)
2046: /* MUTANT (rep_op) */        if (minbytes >= GC_NBYTES_MAX)
2046: /* MUTANT (rep_op) */        if (minbytes == GC_NBYTES_MAX)
2046: /* MUTANT (rep_op) */        if (minbytes != GC_NBYTES_MAX)
2046: /* MUTANT (negate) */        if(! (minbytes <= GC_NBYTES_MAX))
2047: /* MUTANT (rep_op) */            memcpy(newslots - 1, slots, minbytes - sizeof(jsval));
2047: /* MUTANT (rep_op) */            memcpy(newslots * 1, slots, minbytes - sizeof(jsval));
2047: /* MUTANT (rep_op) */            memcpy(newslots % 1, slots, minbytes - sizeof(jsval));
2047: /* MUTANT (rep_const) */            memcpy(newslots + 0, slots, minbytes - sizeof(jsval));
2047: /* MUTANT (rep_const) */            memcpy(newslots + -1, slots, minbytes - sizeof(jsval));
2047: /* MUTANT (rep_const) */            memcpy(newslots + ((1)+1), slots, minbytes - sizeof(jsval));
2050: /* MUTANT (rep_op) */        if (nbytes < GC_NBYTES_MAX && obytes > GC_NBYTES_MAX)
2050: /* MUTANT (rep_op) */        if (nbytes > GC_NBYTES_MAX && obytes > GC_NBYTES_MAX)
2050: /* MUTANT (rep_op) */        if (nbytes >= GC_NBYTES_MAX && obytes > GC_NBYTES_MAX)
2050: /* MUTANT (rep_op) */        if (nbytes == GC_NBYTES_MAX && obytes > GC_NBYTES_MAX)
2050: /* MUTANT (rep_op) */        if (nbytes != GC_NBYTES_MAX && obytes > GC_NBYTES_MAX)
2050: /* MUTANT (rep_op) */        if (nbytes <= GC_NBYTES_MAX || obytes > GC_NBYTES_MAX)
2050: /* MUTANT (rep_op) */        if (nbytes <= GC_NBYTES_MAX && obytes <= GC_NBYTES_MAX)
2050: /* MUTANT (rep_op) */        if (nbytes <= GC_NBYTES_MAX && obytes < GC_NBYTES_MAX)
2050: /* MUTANT (rep_op) */        if (nbytes <= GC_NBYTES_MAX && obytes >= GC_NBYTES_MAX)
2050: /* MUTANT (rep_op) */        if (nbytes <= GC_NBYTES_MAX && obytes == GC_NBYTES_MAX)
2050: /* MUTANT (rep_op) */        if (nbytes <= GC_NBYTES_MAX && obytes != GC_NBYTES_MAX)
2050: /* MUTANT (negate) */        if(! (nbytes <= GC_NBYTES_MAX && obytes > GC_NBYTES_MAX))
2051: /* MUTANT (rep_const) */            JS_free(cx, slots - 0);
2051: /* MUTANT (rep_const) */            JS_free(cx, slots - -1);
2051: /* MUTANT (rep_const) */            JS_free(cx, slots - ((1)+1));
2054: /* MUTANT (rep_op) */        if (nslots <= oslots) {
2054: /* MUTANT (rep_op) */        if (nslots < oslots) {
2054: /* MUTANT (rep_op) */        if (nslots >= oslots) {
2054: /* MUTANT (rep_op) */        if (nslots == oslots) {
2054: /* MUTANT (rep_op) */        if (nslots != oslots) {
2054: /* MUTANT (negate) */        if(! (nslots > oslots)) {
2055: /* MUTANT (rep_op) */            for (i = 1 - oslots; i <= nslots; i++)
2055: /* MUTANT (rep_op) */            for (i = 1 * oslots; i <= nslots; i++)
2055: /* MUTANT (rep_op) */            for (i = 1 % oslots; i <= nslots; i++)
2055: /* MUTANT (rep_op) */            for (i = 1 + oslots; i < nslots; i++)
2055: /* MUTANT (rep_op) */            for (i = 1 + oslots; i > nslots; i++)
2055: /* MUTANT (rep_op) */            for (i = 1 + oslots; i >= nslots; i++)
2055: /* MUTANT (rep_op) */            for (i = 1 + oslots; i == nslots; i++)
2055: /* MUTANT (rep_op) */            for (i = 1 + oslots; i != nslots; i++)
2055: /* MUTANT (rep_op) */            for (i = 1 + oslots; i <= nslots; i--)
2055: /* MUTANT (rep_const) */            for (i = 0 + oslots; i <= nslots; i++)
2055: /* MUTANT (rep_const) */            for (i = -1 + oslots; i <= nslots; i++)
2055: /* MUTANT (rep_const) */            for (i = ((1)+1) + oslots; i <= nslots; i++)
2060: /* MUTANT (rep_const) */    newslots[1] = nslots;
2060: /* MUTANT (rep_const) */    newslots[-1] = nslots;
2061: /* MUTANT (del_stmt) */ /*     return ++newslots; */ 
2061: /* MUTANT (rep_op) */    return --newslots;
2067: /* MUTANT (del_stmt) */ /*     size_t nbytes; */ 
2075: /* MUTANT (del_stmt) */ /*     nbytes = (slots[-1] + 1) * sizeof(jsval); */ 
2075: /* MUTANT (rep_op) */    nbytes = (slots[-1] - 1) * sizeof(jsval);
2075: /* MUTANT (rep_op) */    nbytes = (slots[-1] * 1) * sizeof(jsval);
2075: /* MUTANT (rep_op) */    nbytes = (slots[-1] % 1) * sizeof(jsval);
2075: /* MUTANT (rep_const) */    nbytes = (slots[0] + 1) * sizeof(jsval);
2075: /* MUTANT (rep_const) */    nbytes = (slots[1] + 1) * sizeof(jsval);
2075: /* MUTANT (rep_const) */    nbytes = (slots[((-1)+1)] + 1) * sizeof(jsval);
2075: /* MUTANT (rep_const) */    nbytes = (slots[((-1)-1)] + 1) * sizeof(jsval);
2075: /* MUTANT (rep_const) */    nbytes = (slots[-1] + 0) * sizeof(jsval);
2075: /* MUTANT (rep_const) */    nbytes = (slots[-1] + -1) * sizeof(jsval);
2075: /* MUTANT (rep_const) */    nbytes = (slots[-1] + ((1)+1)) * sizeof(jsval);
2076: /* MUTANT (rep_op) */    if (nbytes <= GC_NBYTES_MAX)
2076: /* MUTANT (rep_op) */    if (nbytes < GC_NBYTES_MAX)
2076: /* MUTANT (rep_op) */    if (nbytes >= GC_NBYTES_MAX)
2076: /* MUTANT (rep_op) */    if (nbytes == GC_NBYTES_MAX)
2076: /* MUTANT (rep_op) */    if (nbytes != GC_NBYTES_MAX)
2076: /* MUTANT (negate) */    if(! (nbytes > GC_NBYTES_MAX))
2077: /* MUTANT (rep_const) */        JS_free(cx, slots - 0);
2077: /* MUTANT (rep_const) */        JS_free(cx, slots - -1);
2077: /* MUTANT (rep_const) */        JS_free(cx, slots - ((1)+1));
2083: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
2084: /* MUTANT (del_stmt) */ /*     JSObjectOps *ops; */ 
2085: /* MUTANT (del_stmt) */ /*     JSObjectMap *map; */ 
2086: /* MUTANT (del_stmt) */ /*     JSClass *protoclasp; */ 
2087: /* MUTANT (del_stmt) */ /*     uint32 nslots, i; */ 
2088: /* MUTANT (del_stmt) */ /*     jsval *newslots; */ 
2089: /* MUTANT (del_stmt) */ /*     JSTempValueRooter tvr; */ 
2092: /* MUTANT (negate) */    if(! (!proto)) {
2093: /* MUTANT (negate) */        if(! (!GetClassPrototype(cx, parent, clasp->name, &proto)))
2095: /* MUTANT (rep_op) */        if (!proto || !GetClassPrototype(cx, parent, js_Object_str, &proto))
2095: /* MUTANT (negate) */        if(! (!proto && !GetClassPrototype(cx, parent, js_Object_str, &proto)))
2109: /* MUTANT (del_stmt) */ /*     obj = (JSObject *) js_NewGCThing(cx, GCX_OBJECT, sizeof(JSObject)); */ 
2110: /* MUTANT (negate) */    if(! (!obj))
2119: /* MUTANT (del_stmt) */ /*     JS_PUSH_SINGLE_TEMP_ROOT(cx, OBJECT_TO_JSVAL(obj), &tvr); */ 
2129: /* MUTANT (rep_op) */    if (proto ||
2130: /* MUTANT (rep_op) */        (map = proto->map)->ops != ops &&
2130: /* MUTANT (rep_op) */        (map = proto->map)->ops == ops ||
2131: /* MUTANT (rep_op) */        ((protoclasp = OBJ_GET_CLASS(cx, proto)) != clasp ||
2131: /* MUTANT (rep_op) */        ((protoclasp = OBJ_GET_CLASS(cx, proto)) == clasp &&
2133: /* MUTANT (rep_op) */            (JSCLASS_HAS_PRIVATE &
2134: /* MUTANT (rep_op) */             (JSCLASS_RESERVED_SLOTS_MASK << JSCLASS_RESERVED_SLOTS_SHIFT))) ||
2135: /* MUTANT (rep_op) */          protoclasp->reserveSlots != clasp->reserveSlots)))
2141: /* MUTANT (negate) */        if(! (!parent))
2145: /* MUTANT (del_stmt) */ /*         obj->map = js_HoldObjectMap(cx, map); */ 
2148: /* MUTANT (del_stmt) */ /*         nslots = JS_INITIAL_NSLOTS; */ 
2151: /* MUTANT (del_stmt) */ /*         map = ops->newObjectMap(cx, 1, ops, clasp, obj); */ 
2151: /* MUTANT (rep_const) */        map = ops->newObjectMap(cx, 0, ops, clasp, obj);
2151: /* MUTANT (rep_const) */        map = ops->newObjectMap(cx, -1, ops, clasp, obj);
2151: /* MUTANT (rep_const) */        map = ops->newObjectMap(cx, ((1)+1), ops, clasp, obj);
2152: /* MUTANT (negate) */        if(! (!map))
2154: /* MUTANT (del_stmt) */ /*         obj->map = map; */ 
2157: /* MUTANT (del_stmt) */ /*         nslots = map->nslots; */ 
2162: /* MUTANT (negate) */    if(! (!newslots)) {
2163: /* MUTANT (del_stmt) */ /*         js_DropObjectMap(cx, obj->map, obj); */ 
2164: /* MUTANT (del_stmt) */ /*         obj->map = NULL; */ 
2165: /* MUTANT (del_stmt) */ /*         goto bad; */ 
2170: /* MUTANT (del_stmt) */ /*     newslots[JSSLOT_PARENT] = OBJECT_TO_JSVAL(parent); */ 
2171: /* MUTANT (del_stmt) */ /*     newslots[JSSLOT_CLASS] = PRIVATE_TO_JSVAL(clasp); */ 
2174: /* MUTANT (rep_op) */    for (i = JSSLOT_CLASS - 1; i < nslots; i++)
2174: /* MUTANT (rep_op) */    for (i = JSSLOT_CLASS * 1; i < nslots; i++)
2174: /* MUTANT (rep_op) */    for (i = JSSLOT_CLASS % 1; i < nslots; i++)
2174: /* MUTANT (rep_op) */    for (i = JSSLOT_CLASS + 1; i <= nslots; i++)
2174: /* MUTANT (rep_op) */    for (i = JSSLOT_CLASS + 1; i > nslots; i++)
2174: /* MUTANT (rep_op) */    for (i = JSSLOT_CLASS + 1; i >= nslots; i++)
2174: /* MUTANT (rep_op) */    for (i = JSSLOT_CLASS + 1; i == nslots; i++)
2174: /* MUTANT (rep_op) */    for (i = JSSLOT_CLASS + 1; i != nslots; i++)
2174: /* MUTANT (rep_op) */    for (i = JSSLOT_CLASS + 1; i < nslots; i--)
2174: /* MUTANT (rep_const) */    for (i = JSSLOT_CLASS + 0; i < nslots; i++)
2174: /* MUTANT (rep_const) */    for (i = JSSLOT_CLASS + -1; i < nslots; i++)
2174: /* MUTANT (rep_const) */    for (i = JSSLOT_CLASS + ((1)+1); i < nslots; i++)
2178: /* MUTANT (del_stmt) */ /*     obj->slots = newslots; */ 
2180: /* MUTANT (negate) */    if(! (cx->runtime->objectHook)) {
2181: /* MUTANT (del_stmt) */ /*         JS_KEEP_ATOMS(cx->runtime); */ 
2182: /* MUTANT (del_stmt) */ /*         cx->runtime->objectHook(cx, obj, JS_TRUE, cx->runtime->objectHookData); */ 
2183: /* MUTANT (del_stmt) */ /*         JS_UNKEEP_ATOMS(cx->runtime); */ 
2188: /* MUTANT (del_stmt) */ /*     cx->newborn[GCX_OBJECT] = (JSGCThing *) obj; */ 
2189: /* MUTANT (del_stmt) */ /*     return obj; */ 
2193: /* MUTANT (del_stmt) */ /*     goto out; */ 
2199: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
2200: /* MUTANT (del_stmt) */ /*     JSObject *obj, *pobj; */ 
2201: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
2202: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
2204: /* MUTANT (del_stmt) */ /*     atom = js_Atomize(cx, name, strlen(name), 0); */ 
2204: /* MUTANT (rep_const) */    atom = js_Atomize(cx, name, strlen(name), 1);
2204: /* MUTANT (rep_const) */    atom = js_Atomize(cx, name, strlen(name), -1);
2205: /* MUTANT (negate) */    if(! (!atom))
2208: /* MUTANT (rep_op) */    if (start && (cx->fp && (start = cx->fp->scopeChain) != NULL)) {
2208: /* MUTANT (rep_op) */    if (start || (cx->fp || (start = cx->fp->scopeChain) != NULL)) {
2208: /* MUTANT (rep_op) */    if (start || (cx->fp && (start = cx->fp->scopeChain) == NULL)) {
2208: /* MUTANT (negate) */    if(! (start || (cx->fp && (start = cx->fp->scopeChain) != NULL))) {
2211: /* MUTANT (del_stmt) */ /*             obj = start; */ 
2212: /* MUTANT (del_stmt) */ /*             start = OBJ_GET_PARENT(cx, obj); */ 
2213: /* MUTANT (del_stmt) */ /*         } while (start); */ 
2213: /* MUTANT (negate) */        } while(! (start));
2215: /* MUTANT (del_stmt) */ /*         obj = cx->globalObject; */ 
2216: /* MUTANT (negate) */        if(! (!obj)) {
2217: /* MUTANT (del_stmt) */ /*             *vp = JSVAL_VOID; */ 
2218: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
2225: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
2227: /* MUTANT (negate) */    if(! (!prop))  {
2228: /* MUTANT (del_stmt) */ /*         *vp = JSVAL_VOID; */ 
2229: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
2233: /* MUTANT (del_stmt) */ /*     sprop = (JSScopeProperty *) prop; */ 
2234: /* MUTANT (del_stmt) */ /*     JS_ASSERT(SPROP_HAS_VALID_SLOT(sprop, OBJ_SCOPE(pobj))); */ 
2235: /* MUTANT (del_stmt) */ /*     *vp = OBJ_GET_SLOT(cx, pobj, sprop->slot); */ 
2236: /* MUTANT (del_stmt) */ /*     OBJ_DROP_PROPERTY(cx, pobj, prop); */ 
2237: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
2244: /* MUTANT (del_stmt) */ /*     jsval cval, rval; */ 
2245: /* MUTANT (del_stmt) */ /*     JSTempValueRooter argtvr, tvr; */ 
2246: /* MUTANT (del_stmt) */ /*     JSObject *obj, *ctor; */ 
2248: /* MUTANT (del_stmt) */ /*     JS_PUSH_TEMP_ROOT(cx, argc, argv, &argtvr); */ 
2250: /* MUTANT (negate) */    if(! (!js_FindConstructor(cx, parent, clasp->name, &cval))) {
2251: /* MUTANT (del_stmt) */ /*         JS_POP_TEMP_ROOT(cx, &argtvr); */ 
2252: /* MUTANT (del_stmt) */ /*         return NULL; */ 
2254: /* MUTANT (negate) */    if(! (JSVAL_IS_PRIMITIVE(cval))) {
2255: /* MUTANT (del_stmt) */ /*         js_ReportIsNotFunction(cx, &cval, JSV2F_CONSTRUCT | JSV2F_SEARCH_STACK); */ 
2255: /* MUTANT (rep_op) */        js_ReportIsNotFunction(cx, &cval, JSV2F_CONSTRUCT & JSV2F_SEARCH_STACK);
2256: /* MUTANT (del_stmt) */ /*         JS_POP_TEMP_ROOT(cx, &argtvr); */ 
2257: /* MUTANT (del_stmt) */ /*         return NULL; */ 
2270: /* MUTANT (del_stmt) */ /*     ctor = JSVAL_TO_OBJECT(cval); */ 
2271: /* MUTANT (negate) */    if(! (!parent))
2273: /* MUTANT (negate) */    if(! (!proto)) {
2278: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
2279: /* MUTANT (del_stmt) */ /*             goto out; */ 
2281: /* MUTANT (negate) */        if(! (JSVAL_IS_OBJECT(rval)))
2286: /* MUTANT (negate) */    if(! (!obj))
2289: /* MUTANT (negate) */    if(! (!js_InternalConstruct(cx, obj, cval, argc, argv, &rval)))
2292: /* MUTANT (negate) */    if(! (JSVAL_IS_PRIMITIVE(rval)))
2294: /* MUTANT (del_stmt) */ /*     obj = JSVAL_TO_OBJECT(rval); */ 
2302: /* MUTANT (rep_op) */    if (OBJ_GET_CLASS(cx, obj) == clasp ||
2302: /* MUTANT (rep_op) */    if (OBJ_GET_CLASS(cx, obj) != clasp &&
2303: /* MUTANT (rep_op) */        (!(~clasp->flags & (JSCLASS_HAS_PRIVATE &
2304: /* MUTANT (rep_op) */                            JSCLASS_CONSTRUCT_PROTOTYPE)) ||
2308: /* MUTANT (del_stmt) */ /*         goto bad; */ 
2313: /* MUTANT (del_stmt) */ /*     JS_POP_TEMP_ROOT(cx, &argtvr); */ 
2314: /* MUTANT (del_stmt) */ /*     return obj; */ 
2318: /* MUTANT (del_stmt) */ /*     obj = NULL; */ 
2319: /* MUTANT (del_stmt) */ /*     goto out; */ 
2325: /* MUTANT (del_stmt) */ /*     JSObjectMap *map; */ 
2328: /* MUTANT (del_stmt) */ /*     map = obj->map; */ 
2329: /* MUTANT (negate) */    if(! (!map))
2331: /* MUTANT (del_stmt) */ /*     JS_ASSERT(obj->slots); */ 
2333: /* MUTANT (negate) */    if(! (cx->runtime->objectHook))
2337: /* MUTANT (del_stmt) */ /*     JS_ClearWatchPointsForObject(cx, obj); */ 
2347: /* MUTANT (del_stmt) */ /*     LOCKED_OBJ_GET_CLASS(obj)->finalize(cx, obj); */ 
2350: /* MUTANT (del_stmt) */ /*     js_DropObjectMap(cx, map, obj); */ 
2351: /* MUTANT (del_stmt) */ /*     obj->map = NULL; */ 
2352: /* MUTANT (del_stmt) */ /*     FreeSlots(cx, obj->slots); */ 
2353: /* MUTANT (del_stmt) */ /*     obj->slots = NULL; */ 
2361: /* MUTANT (del_stmt) */ /*     JSObjectMap *map; */ 
2362: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
2363: /* MUTANT (del_stmt) */ /*     uint32 nslots; */ 
2364: /* MUTANT (del_stmt) */ /*     jsval *newslots; */ 
2366: /* MUTANT (del_stmt) */ /*     map = obj->map; */ 
2367: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!MAP_IS_NATIVE(map) || ((JSScope *)map)->object == obj); */ 
2367: /* MUTANT (rep_op) */    JS_ASSERT(!MAP_IS_NATIVE(map) && ((JSScope *)map)->object == obj);
2367: /* MUTANT (rep_op) */    JS_ASSERT(!MAP_IS_NATIVE(map) || ((JSScope *)map)->object != obj);
2368: /* MUTANT (del_stmt) */ /*     clasp = LOCKED_OBJ_GET_CLASS(obj); */ 
2369: /* MUTANT (rep_op) */    if (map->freeslot != JSSLOT_FREE(clasp)) {
2369: /* MUTANT (negate) */    if(! (map->freeslot == JSSLOT_FREE(clasp))) {
2371: /* MUTANT (negate) */        if(! (clasp->reserveSlots))
2372: /* MUTANT (rep_op) */            map->freeslot -= clasp->reserveSlots(cx, obj);
2372: /* MUTANT (rep_op) */            map->freeslot *= clasp->reserveSlots(cx, obj);
2372: /* MUTANT (rep_op) */            map->freeslot %= clasp->reserveSlots(cx, obj);
2375: /* MUTANT (rep_op) */    if (map->freeslot <= nslots) {
2375: /* MUTANT (rep_op) */    if (map->freeslot < nslots) {
2375: /* MUTANT (rep_op) */    if (map->freeslot > nslots) {
2375: /* MUTANT (rep_op) */    if (map->freeslot == nslots) {
2375: /* MUTANT (rep_op) */    if (map->freeslot != nslots) {
2375: /* MUTANT (negate) */    if(! (map->freeslot >= nslots)) {
2376: /* MUTANT (del_stmt) */ /*         nslots = map->freeslot; */ 
2377: /* MUTANT (del_stmt) */ /*         JS_ASSERT(nslots >= JS_INITIAL_NSLOTS); */ 
2377: /* MUTANT (rep_op) */        JS_ASSERT(nslots <= JS_INITIAL_NSLOTS);
2377: /* MUTANT (rep_op) */        JS_ASSERT(nslots < JS_INITIAL_NSLOTS);
2377: /* MUTANT (rep_op) */        JS_ASSERT(nslots > JS_INITIAL_NSLOTS);
2377: /* MUTANT (rep_op) */        JS_ASSERT(nslots == JS_INITIAL_NSLOTS);
2377: /* MUTANT (rep_op) */        JS_ASSERT(nslots != JS_INITIAL_NSLOTS);
2378: /* MUTANT (del_stmt) */ /*         nslots += (nslots + 1) / 2; */ 
2378: /* MUTANT (rep_op) */        nslots -= (nslots + 1) / 2;
2378: /* MUTANT (rep_op) */        nslots *= (nslots + 1) / 2;
2378: /* MUTANT (rep_op) */        nslots %= (nslots + 1) / 2;
2378: /* MUTANT (rep_op) */        nslots += (nslots - 1) / 2;
2378: /* MUTANT (rep_op) */        nslots += (nslots * 1) / 2;
2378: /* MUTANT (rep_op) */        nslots += (nslots % 1) / 2;
2378: /* MUTANT (rep_const) */        nslots += (nslots + 0) / 2;
2378: /* MUTANT (rep_const) */        nslots += (nslots + -1) / 2;
2378: /* MUTANT (rep_const) */        nslots += (nslots + ((1)+1)) / 2;
2378: /* MUTANT (rep_const) */        nslots += (nslots + 1) / 0;
2378: /* MUTANT (rep_const) */        nslots += (nslots + 1) / 1;
2378: /* MUTANT (rep_const) */        nslots += (nslots + 1) / -1;
2378: /* MUTANT (rep_const) */        nslots += (nslots + 1) / ((2)+1);
2378: /* MUTANT (rep_const) */        nslots += (nslots + 1) / ((2)-1);
2380: /* MUTANT (del_stmt) */ /*         newslots = AllocSlots(cx, obj->slots, nslots); */ 
2381: /* MUTANT (negate) */        if(! (!newslots))
2383: /* MUTANT (del_stmt) */ /*         map->nslots = nslots; */ 
2384: /* MUTANT (del_stmt) */ /*         obj->slots = newslots; */ 
2390: /* MUTANT (rep_op) */    *slotp = map->freeslot--;
2391: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
2397: /* MUTANT (del_stmt) */ /*     JSObjectMap *map; */ 
2398: /* MUTANT (del_stmt) */ /*     uint32 nslots; */ 
2399: /* MUTANT (del_stmt) */ /*     jsval *newslots; */ 
2401: /* MUTANT (del_stmt) */ /*     OBJ_CHECK_SLOT(obj, slot); */ 
2402: /* MUTANT (del_stmt) */ /*     obj->slots[slot] = JSVAL_VOID; */ 
2403: /* MUTANT (del_stmt) */ /*     map = obj->map; */ 
2404: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!MAP_IS_NATIVE(map) || ((JSScope *)map)->object == obj); */ 
2404: /* MUTANT (rep_op) */    JS_ASSERT(!MAP_IS_NATIVE(map) && ((JSScope *)map)->object == obj);
2404: /* MUTANT (rep_op) */    JS_ASSERT(!MAP_IS_NATIVE(map) || ((JSScope *)map)->object != obj);
2405: /* MUTANT (rep_op) */    if (map->freeslot != slot + 1)
2405: /* MUTANT (rep_op) */    if (map->freeslot == slot - 1)
2405: /* MUTANT (rep_op) */    if (map->freeslot == slot * 1)
2405: /* MUTANT (rep_op) */    if (map->freeslot == slot % 1)
2405: /* MUTANT (rep_const) */    if (map->freeslot == slot + 0)
2405: /* MUTANT (rep_const) */    if (map->freeslot == slot + -1)
2405: /* MUTANT (rep_const) */    if (map->freeslot == slot + ((1)+1))
2405: /* MUTANT (negate) */    if(! (map->freeslot == slot + 1))
2407: /* MUTANT (del_stmt) */ /*     nslots = map->nslots; */ 
2408: /* MUTANT (rep_op) */    if (nslots <= JS_INITIAL_NSLOTS && map->freeslot < nslots / 2) {
2408: /* MUTANT (rep_op) */    if (nslots < JS_INITIAL_NSLOTS && map->freeslot < nslots / 2) {
2408: /* MUTANT (rep_op) */    if (nslots >= JS_INITIAL_NSLOTS && map->freeslot < nslots / 2) {
2408: /* MUTANT (rep_op) */    if (nslots == JS_INITIAL_NSLOTS && map->freeslot < nslots / 2) {
2408: /* MUTANT (rep_op) */    if (nslots != JS_INITIAL_NSLOTS && map->freeslot < nslots / 2) {
2408: /* MUTANT (rep_op) */    if (nslots > JS_INITIAL_NSLOTS || map->freeslot < nslots / 2) {
2408: /* MUTANT (rep_op) */    if (nslots > JS_INITIAL_NSLOTS && map->freeslot <= nslots / 2) {
2408: /* MUTANT (rep_op) */    if (nslots > JS_INITIAL_NSLOTS && map->freeslot > nslots / 2) {
2408: /* MUTANT (rep_op) */    if (nslots > JS_INITIAL_NSLOTS && map->freeslot >= nslots / 2) {
2408: /* MUTANT (rep_op) */    if (nslots > JS_INITIAL_NSLOTS && map->freeslot == nslots / 2) {
2408: /* MUTANT (rep_op) */    if (nslots > JS_INITIAL_NSLOTS && map->freeslot != nslots / 2) {
2408: /* MUTANT (rep_const) */    if (nslots > JS_INITIAL_NSLOTS && map->freeslot < nslots / 0) {
2408: /* MUTANT (rep_const) */    if (nslots > JS_INITIAL_NSLOTS && map->freeslot < nslots / 1) {
2408: /* MUTANT (rep_const) */    if (nslots > JS_INITIAL_NSLOTS && map->freeslot < nslots / -1) {
2408: /* MUTANT (rep_const) */    if (nslots > JS_INITIAL_NSLOTS && map->freeslot < nslots / ((2)+1)) {
2408: /* MUTANT (rep_const) */    if (nslots > JS_INITIAL_NSLOTS && map->freeslot < nslots / ((2)-1)) {
2408: /* MUTANT (negate) */    if(! (nslots > JS_INITIAL_NSLOTS && map->freeslot < nslots / 2)) {
2409: /* MUTANT (del_stmt) */ /*         nslots = map->freeslot; */ 
2410: /* MUTANT (del_stmt) */ /*         nslots += nslots / 2; */ 
2410: /* MUTANT (rep_op) */        nslots -= nslots / 2;
2410: /* MUTANT (rep_op) */        nslots *= nslots / 2;
2410: /* MUTANT (rep_op) */        nslots %= nslots / 2;
2410: /* MUTANT (rep_const) */        nslots += nslots / 0;
2410: /* MUTANT (rep_const) */        nslots += nslots / 1;
2410: /* MUTANT (rep_const) */        nslots += nslots / -1;
2410: /* MUTANT (rep_const) */        nslots += nslots / ((2)+1);
2410: /* MUTANT (rep_const) */        nslots += nslots / ((2)-1);
2411: /* MUTANT (rep_op) */        if (nslots <= JS_INITIAL_NSLOTS)
2411: /* MUTANT (rep_op) */        if (nslots > JS_INITIAL_NSLOTS)
2411: /* MUTANT (rep_op) */        if (nslots >= JS_INITIAL_NSLOTS)
2411: /* MUTANT (rep_op) */        if (nslots == JS_INITIAL_NSLOTS)
2411: /* MUTANT (rep_op) */        if (nslots != JS_INITIAL_NSLOTS)
2411: /* MUTANT (negate) */        if(! (nslots < JS_INITIAL_NSLOTS))
2414: /* MUTANT (del_stmt) */ /*         newslots = AllocSlots(cx, obj->slots, nslots); */ 
2415: /* MUTANT (negate) */        if(! (!newslots))
2417: /* MUTANT (del_stmt) */ /*         map->nslots = nslots; */ 
2418: /* MUTANT (del_stmt) */ /*         obj->slots = newslots; */ 
2425: /* MUTANT (rep_op) */        if (JSSTRING_LENGTH(str_) != 0)                                       \
2425: /* MUTANT (rep_const) */        if (JSSTRING_LENGTH(str_) == 1)                                       \
2425: /* MUTANT (rep_const) */        if (JSSTRING_LENGTH(str_) == -1)                                       \
2425: /* MUTANT (negate) */        if(! (JSSTRING_LENGTH(str_) == 0))                                       \
2433: #define JSVAL_INT_MAX_STRING "0" /* MUTANT (rep_const) */
2433: #define JSVAL_INT_MAX_STRING "1" /* MUTANT (rep_const) */
2433: #define JSVAL_INT_MAX_STRING "-1" /* MUTANT (rep_const) */
2433: #define JSVAL_INT_MAX_STRING "((1073741823)+1)" /* MUTANT (rep_const) */
2433: #define JSVAL_INT_MAX_STRING "((1073741823)-1)" /* MUTANT (rep_const) */
2437: /* MUTANT (negate) */        if(! (JSID_IS_ATOM(id))) {                                               \
2441: /* MUTANT (rep_op) */            JSBool negative_ = (*cp_ != '-');                                 \
2442: /* MUTANT (rep_op) */            if (negative_) cp_--;                                             \
2442: /* MUTANT (negate) */            if(! (negative_)) cp_++;                                             \
2443: /* MUTANT (negate) */            if(! (JS7_ISDEC(*cp_))) {                                            \
2445: /* MUTANT (rep_op) */                if (n_ < sizeof(JSVAL_INT_MAX_STRING) - 1)                   \
2445: /* MUTANT (rep_op) */                if (n_ > sizeof(JSVAL_INT_MAX_STRING) - 1)                   \
2445: /* MUTANT (rep_op) */                if (n_ >= sizeof(JSVAL_INT_MAX_STRING) - 1)                   \
2445: /* MUTANT (rep_op) */                if (n_ == sizeof(JSVAL_INT_MAX_STRING) - 1)                   \
2445: /* MUTANT (rep_op) */                if (n_ != sizeof(JSVAL_INT_MAX_STRING) - 1)                   \
2445: /* MUTANT (rep_const) */                if (n_ <= sizeof(JSVAL_INT_MAX_STRING) - 0)                   \
2445: /* MUTANT (rep_const) */                if (n_ <= sizeof(JSVAL_INT_MAX_STRING) - -1)                   \
2445: /* MUTANT (rep_const) */                if (n_ <= sizeof(JSVAL_INT_MAX_STRING) - ((1)+1))                   \
2445: /* MUTANT (negate) */                if(! (n_ <= sizeof(JSVAL_INT_MAX_STRING) - 1))                   \
2446: /* MUTANT (rep_op) */                    id = CheckForStringIndex(id, cp_, cp_ - n_, negative_);   \
2446: /* MUTANT (rep_op) */                    id = CheckForStringIndex(id, cp_, cp_ * n_, negative_);   \
2446: /* MUTANT (rep_op) */                    id = CheckForStringIndex(id, cp_, cp_ % n_, negative_);   \
2457: /* MUTANT (del_stmt) */ /*     jsuint index = JS7_UNDEC(*cp++); */ 
2457: /* MUTANT (rep_op) */    jsuint index = JS7_UNDEC(*cp--);
2458: /* MUTANT (del_stmt) */ /*     jsuint oldIndex = 0; */ 
2458: /* MUTANT (rep_const) */    jsuint oldIndex = 1;
2458: /* MUTANT (rep_const) */    jsuint oldIndex = -1;
2459: /* MUTANT (del_stmt) */ /*     jsuint c = 0; */ 
2459: /* MUTANT (rep_const) */    jsuint c = 1;
2459: /* MUTANT (rep_const) */    jsuint c = -1;
2461: /* MUTANT (rep_op) */    if (index == 0) {
2461: /* MUTANT (rep_const) */    if (index != 1) {
2461: /* MUTANT (rep_const) */    if (index != -1) {
2461: /* MUTANT (negate) */    if(! (index != 0)) {
2462: /* MUTANT (negate) */        while(! (JS7_ISDEC(*cp))) {
2463: /* MUTANT (del_stmt) */ /*             oldIndex = index; */ 
2464: /* MUTANT (del_stmt) */ /*             c = JS7_UNDEC(*cp); */ 
2465: /* MUTANT (del_stmt) */ /*             index = 10 * index + c; */ 
2465: /* MUTANT (rep_op) */            index = 10 * index - c;
2465: /* MUTANT (rep_op) */            index = 10 * index * c;
2465: /* MUTANT (rep_op) */            index = 10 * index % c;
2465: /* MUTANT (rep_const) */            index = 0 * index + c;
2465: /* MUTANT (rep_const) */            index = 1 * index + c;
2465: /* MUTANT (rep_const) */            index = -1 * index + c;
2465: /* MUTANT (rep_const) */            index = ((10)+1) * index + c;
2465: /* MUTANT (rep_const) */            index = ((10)-1) * index + c;
2466: /* MUTANT (del_stmt) */ /*             cp++; */ 
2466: /* MUTANT (rep_op) */            cp--;
2469: /* MUTANT (rep_op) */    if (cp != end &&
2469: /* MUTANT (rep_op) */    if (cp == end ||
2470: /* MUTANT (rep_op) */        (oldIndex <= (JSVAL_INT_MAX / 10) ||
2470: /* MUTANT (rep_op) */        (oldIndex > (JSVAL_INT_MAX / 10) ||
2470: /* MUTANT (rep_op) */        (oldIndex >= (JSVAL_INT_MAX / 10) ||
2470: /* MUTANT (rep_op) */        (oldIndex == (JSVAL_INT_MAX / 10) ||
2470: /* MUTANT (rep_op) */        (oldIndex != (JSVAL_INT_MAX / 10) ||
2470: /* MUTANT (rep_op) */        (oldIndex < (JSVAL_INT_MAX / 10) &&
2470: /* MUTANT (rep_const) */        (oldIndex < (JSVAL_INT_MAX / 0) ||
2470: /* MUTANT (rep_const) */        (oldIndex < (JSVAL_INT_MAX / 1) ||
2470: /* MUTANT (rep_const) */        (oldIndex < (JSVAL_INT_MAX / -1) ||
2470: /* MUTANT (rep_const) */        (oldIndex < (JSVAL_INT_MAX / ((10)+1)) ||
2470: /* MUTANT (rep_const) */        (oldIndex < (JSVAL_INT_MAX / ((10)-1)) ||
2471: /* MUTANT (rep_op) */         (oldIndex != (JSVAL_INT_MAX / 10) &&
2471: /* MUTANT (rep_op) */         (oldIndex == (JSVAL_INT_MAX / 10) ||
2471: /* MUTANT (rep_const) */         (oldIndex == (JSVAL_INT_MAX / 0) &&
2471: /* MUTANT (rep_const) */         (oldIndex == (JSVAL_INT_MAX / 1) &&
2471: /* MUTANT (rep_const) */         (oldIndex == (JSVAL_INT_MAX / -1) &&
2471: /* MUTANT (rep_const) */         (oldIndex == (JSVAL_INT_MAX / ((10)+1)) &&
2471: /* MUTANT (rep_const) */         (oldIndex == (JSVAL_INT_MAX / ((10)-1)) &&
2472: /* MUTANT (rep_op) */          c < (JSVAL_INT_MAX % 10)))) {
2472: /* MUTANT (rep_op) */          c > (JSVAL_INT_MAX % 10)))) {
2472: /* MUTANT (rep_op) */          c >= (JSVAL_INT_MAX % 10)))) {
2472: /* MUTANT (rep_op) */          c == (JSVAL_INT_MAX % 10)))) {
2472: /* MUTANT (rep_op) */          c != (JSVAL_INT_MAX % 10)))) {
2472: /* MUTANT (rep_op) */          c <= (JSVAL_INT_MAX + 10)))) {
2472: /* MUTANT (rep_op) */          c <= (JSVAL_INT_MAX - 10)))) {
2472: /* MUTANT (rep_op) */          c <= (JSVAL_INT_MAX * 10)))) {
2472: /* MUTANT (rep_const) */          c <= (JSVAL_INT_MAX % 0)))) {
2472: /* MUTANT (rep_const) */          c <= (JSVAL_INT_MAX % 1)))) {
2472: /* MUTANT (rep_const) */          c <= (JSVAL_INT_MAX % -1)))) {
2472: /* MUTANT (rep_const) */          c <= (JSVAL_INT_MAX % ((10)+1))))) {
2472: /* MUTANT (rep_const) */          c <= (JSVAL_INT_MAX % ((10)-1))))) {
2473: /* MUTANT (negate) */        if(! (negative))
2474: /* MUTANT (rep_const) */            index = 1 - index;
2474: /* MUTANT (rep_const) */            index = -1 - index;
2475: /* MUTANT (del_stmt) */ /*         id = INT_TO_JSID((jsint)index); */ 
2483: /* MUTANT (del_stmt) */ /*     jsid id; */ 
2484: /* MUTANT (del_stmt) */ /*     JSAtom *atom, *hidden; */ 
2486: /* MUTANT (del_stmt) */ /*     id = *idp; */ 
2487: /* MUTANT (del_stmt) */ /*     JS_ASSERT(JSID_IS_ATOM(id)); */ 
2489: /* MUTANT (del_stmt) */ /*     atom = JSID_TO_ATOM(id); */ 
2490: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!(atom->flags & ATOM_HIDDEN)); */ 
2491: /* MUTANT (del_stmt) */ /*     JS_ASSERT(ATOM_IS_STRING(atom)); */ 
2493: /* MUTANT (del_stmt) */ /*     hidden = js_AtomizeString(cx, ATOM_TO_STRING(atom), ATOM_HIDDEN); */ 
2494: /* MUTANT (negate) */    if(! (!hidden))
2503: /* MUTANT (del_stmt) */ /*     hidden->entry.value = atom; */ 
2504: /* MUTANT (del_stmt) */ /*     *idp = ATOM_TO_JSID(hidden); */ 
2505: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
2513: /* MUTANT (negate) */    if(! (!HidePropertyName(cx, &id)))
2516: /* MUTANT (del_stmt) */ /*     flags |= SPROP_IS_HIDDEN; */ 
2525: /* MUTANT (rep_op) */    return HidePropertyName(cx, &id) ||
2534: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
2535: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
2537: /* MUTANT (del_stmt) */ /*     JS_LOCK_OBJ(cx, obj); */ 
2538: /* MUTANT (del_stmt) */ /*     scope = js_GetMutableScope(cx, obj); */ 
2539: /* MUTANT (negate) */    if(! (!scope)) {
2540: /* MUTANT (del_stmt) */ /*         sprop = NULL; */ 
2546: /* MUTANT (del_stmt) */ /*         CHECK_FOR_STRING_INDEX(id); */ 
2551: /* MUTANT (del_stmt) */ /*     return sprop; */ 
2559: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
2561: /* MUTANT (del_stmt) */ /*     JS_LOCK_OBJ(cx, obj); */ 
2562: /* MUTANT (del_stmt) */ /*     scope = js_GetMutableScope(cx, obj); */ 
2563: /* MUTANT (negate) */    if(! (!scope)) {
2564: /* MUTANT (del_stmt) */ /*         sprop = NULL; */ 
2568: /* MUTANT (negate) */        if(! (sprop)) {
2574: /* MUTANT (del_stmt) */ /*     return sprop; */ 
2583: /* MUTANT (rep_const) */                                   1, 0, propp);
2583: /* MUTANT (rep_const) */                                   -1, 0, propp);
2583: /* MUTANT (rep_const) */                                   0, 1, propp);
2583: /* MUTANT (rep_const) */                                   0, -1, propp);
2594: /* MUTANT (rep_op) */        if ((clasp)->addProperty == JS_PropertyStub) {                        \
2594: /* MUTANT (negate) */        if(! ((clasp)->addProperty != JS_PropertyStub)) {                        \
2596: /* MUTANT (negate) */            if(! (!(clasp)->addProperty(cx, obj, SPROP_USERID(sprop), vp))) {    \
2599: /* MUTANT (rep_op) */            if (*(vp) == nominal_) {                                          \
2599: /* MUTANT (negate) */            if(! (*(vp) != nominal_)) {                                          \
2600: /* MUTANT (negate) */                if(! (SPROP_HAS_VALID_SLOT(sprop, scope)))                       \
2611: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
2612: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
2613: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
2614: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
2620: /* MUTANT (del_stmt) */ /*     CHECK_FOR_STRING_INDEX(id); */ 
2628: /* MUTANT (rep_op) */    if (attrs & (JSPROP_GETTER & JSPROP_SETTER)) {
2628: /* MUTANT (negate) */    if(! (attrs & (JSPROP_GETTER | JSPROP_SETTER))) {
2629: /* MUTANT (del_stmt) */ /*         JSObject *pobj; */ 
2639: /* MUTANT (negate) */        if(! (!js_LookupProperty(cx, obj, id, &pobj, &prop)))
2641: /* MUTANT (del_stmt) */ /*         sprop = (JSScopeProperty *) prop; */ 
2642: /* MUTANT (rep_op) */        if (sprop ||
2643: /* MUTANT (rep_op) */            pobj != obj &&
2643: /* MUTANT (rep_op) */            pobj == obj ||
2644: /* MUTANT (rep_op) */            (sprop->attrs & (JSPROP_GETTER & JSPROP_SETTER))) {
2655: /* MUTANT (negate) */            if(! (!sprop))
2657: /* MUTANT (del_stmt) */ /*             goto out; */ 
2660: /* MUTANT (negate) */        if(! (prop)) {
2662: /* MUTANT (del_stmt) */ /*             OBJ_DROP_PROPERTY(cx, pobj, prop); */ 
2663: /* MUTANT (del_stmt) */ /*             prop = NULL; */ 
2672: /* MUTANT (del_stmt) */ /*     clasp = LOCKED_OBJ_GET_CLASS(obj); */ 
2673: /* MUTANT (negate) */    if(! (!getter))
2675: /* MUTANT (negate) */    if(! (!setter))
2679: /* MUTANT (del_stmt) */ /*     scope = js_GetMutableScope(cx, obj); */ 
2680: /* MUTANT (negate) */    if(! (!scope))
2684: /* MUTANT (negate) */    if(! (clasp->flags & JSCLASS_SHARE_ALL_PROPERTIES))
2688: /* MUTANT (negate) */    if(! (!sprop))
2692: /* MUTANT (negate) */    if(! (SPROP_HAS_VALID_SLOT(sprop, scope)))
2698: /* MUTANT (del_stmt) */ /*                         goto bad); */ 
2704: /* MUTANT (negate) */    if(! (propp))
2708: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
2712: /* MUTANT (del_stmt) */ /*     return JS_FALSE; */ 
2723: /* MUTANT (del_stmt) */ /*     JSScript *script; */ 
2724: /* MUTANT (del_stmt) */ /*     jsbytecode *endpc; */ 
2725: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
2726: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
2728: /* MUTANT (negate) */    if(! (!cx->fp))
2730: /* MUTANT (del_stmt) */ /*     script = cx->fp->script; */ 
2731: /* MUTANT (rep_op) */    for (endpc = script->code - script->length; pc < endpc; pc++) {
2731: /* MUTANT (rep_op) */    for (endpc = script->code * script->length; pc < endpc; pc++) {
2731: /* MUTANT (rep_op) */    for (endpc = script->code % script->length; pc < endpc; pc++) {
2731: /* MUTANT (rep_op) */    for (endpc = script->code + script->length; pc <= endpc; pc++) {
2731: /* MUTANT (rep_op) */    for (endpc = script->code + script->length; pc > endpc; pc++) {
2731: /* MUTANT (rep_op) */    for (endpc = script->code + script->length; pc >= endpc; pc++) {
2731: /* MUTANT (rep_op) */    for (endpc = script->code + script->length; pc == endpc; pc++) {
2731: /* MUTANT (rep_op) */    for (endpc = script->code + script->length; pc != endpc; pc++) {
2731: /* MUTANT (rep_op) */    for (endpc = script->code + script->length; pc < endpc; pc--) {
2733: /* MUTANT (del_stmt) */ /*         op = (JSOp) *pc; */ 
2734: /* MUTANT (negate) */        if(! (js_CodeSpec[op].format & JOF_DETECTING))
2741: /* MUTANT (rep_op) */        if (op != JSOP_NULL) {
2741: /* MUTANT (negate) */        if(! (op == JSOP_NULL)) {
2742: /* MUTANT (rep_op) */            if (--pc < endpc)
2742: /* MUTANT (rep_op) */            if (++pc <= endpc)
2742: /* MUTANT (rep_op) */            if (++pc > endpc)
2742: /* MUTANT (rep_op) */            if (++pc >= endpc)
2742: /* MUTANT (rep_op) */            if (++pc == endpc)
2742: /* MUTANT (rep_op) */            if (++pc != endpc)
2742: /* MUTANT (negate) */            if(! (++pc < endpc))
2743: /* MUTANT (rep_op) */                return *pc != JSOP_EQ || *pc == JSOP_NE;
2743: /* MUTANT (rep_op) */                return *pc == JSOP_EQ && *pc == JSOP_NE;
2743: /* MUTANT (rep_op) */                return *pc == JSOP_EQ || *pc != JSOP_NE;
2744: /* MUTANT (del_stmt) */ /*             break; */ 
2752: /* MUTANT (rep_op) */        if (op != JSOP_NAME) {
2752: /* MUTANT (negate) */        if(! (op == JSOP_NAME)) {
2753: /* MUTANT (del_stmt) */ /*             atom = GET_ATOM(cx, script, pc); */ 
2754: /* MUTANT (rep_op) */            if (atom != cx->runtime->atomState.typeAtoms[JSTYPE_VOID] &&
2754: /* MUTANT (rep_op) */            if (atom == cx->runtime->atomState.typeAtoms[JSTYPE_VOID] ||
2755: /* MUTANT (rep_op) */                (pc -= js_CodeSpec[op].length) < endpc) {
2755: /* MUTANT (rep_op) */                (pc *= js_CodeSpec[op].length) < endpc) {
2755: /* MUTANT (rep_op) */                (pc %= js_CodeSpec[op].length) < endpc) {
2755: /* MUTANT (rep_op) */                (pc += js_CodeSpec[op].length) <= endpc) {
2755: /* MUTANT (rep_op) */                (pc += js_CodeSpec[op].length) > endpc) {
2755: /* MUTANT (rep_op) */                (pc += js_CodeSpec[op].length) >= endpc) {
2755: /* MUTANT (rep_op) */                (pc += js_CodeSpec[op].length) == endpc) {
2755: /* MUTANT (rep_op) */                (pc += js_CodeSpec[op].length) != endpc) {
2756: /* MUTANT (del_stmt) */ /*                 op = (JSOp) *pc; */ 
2757: /* MUTANT (rep_op) */                return op != JSOP_EQ || op == JSOP_NE ||
2757: /* MUTANT (rep_op) */                return op == JSOP_EQ && op == JSOP_NE ||
2757: /* MUTANT (rep_op) */                return op == JSOP_EQ || op != JSOP_NE ||
2757: /* MUTANT (rep_op) */                return op == JSOP_EQ || op == JSOP_NE &&
2758: /* MUTANT (rep_op) */                       op != JSOP_NEW_EQ || op == JSOP_NEW_NE;
2758: /* MUTANT (rep_op) */                       op == JSOP_NEW_EQ && op == JSOP_NEW_NE;
2758: /* MUTANT (rep_op) */                       op == JSOP_NEW_EQ || op != JSOP_NEW_NE;
2764: /* MUTANT (rep_op) */        if (op == JSOP_GROUP)
2764: /* MUTANT (negate) */        if(! (op != JSOP_GROUP))
2774: /* MUTANT (del_stmt) */ /*     return js_LookupPropertyWithFlags(cx, obj, id, 0, objp, propp); */ 
2774: /* MUTANT (rep_const) */    return js_LookupPropertyWithFlags(cx, obj, id, 1, objp, propp);
2774: /* MUTANT (rep_const) */    return js_LookupPropertyWithFlags(cx, obj, id, -1, objp, propp);
2781: /* MUTANT (del_stmt) */ /*     JSObject *start, *obj2, *proto; */ 
2782: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
2783: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
2784: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
2785: /* MUTANT (del_stmt) */ /*     JSResolveOp resolve; */ 
2786: /* MUTANT (del_stmt) */ /*     JSResolvingKey key; */ 
2787: /* MUTANT (del_stmt) */ /*     JSResolvingEntry *entry; */ 
2788: /* MUTANT (del_stmt) */ /*     uint32 generation; */ 
2789: /* MUTANT (del_stmt) */ /*     JSNewResolveOp newresolve; */ 
2790: /* MUTANT (del_stmt) */ /*     jsbytecode *pc; */ 
2791: /* MUTANT (del_stmt) */ /*     const JSCodeSpec *cs; */ 
2792: /* MUTANT (del_stmt) */ /*     uint32 format; */ 
2793: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
2799: /* MUTANT (del_stmt) */ /*     CHECK_FOR_STRING_INDEX(id); */ 
2802: /* MUTANT (del_stmt) */ /*     start = obj; */ 
2804: /* MUTANT (del_stmt) */ /*         JS_LOCK_OBJ(cx, obj); */ 
2805: /* MUTANT (del_stmt) */ /*         scope = OBJ_SCOPE(obj); */ 
2806: /* MUTANT (rep_op) */        if (scope->object != obj) {
2806: /* MUTANT (negate) */        if(! (scope->object == obj)) {
2807: /* MUTANT (del_stmt) */ /*             sprop = SCOPE_GET_PROPERTY(scope, id); */ 
2810: /* MUTANT (del_stmt) */ /*             sprop = NULL; */ 
2814: /* MUTANT (negate) */        if(! (!sprop)) {
2815: /* MUTANT (del_stmt) */ /*             clasp = LOCKED_OBJ_GET_CLASS(obj); */ 
2816: /* MUTANT (del_stmt) */ /*             resolve = clasp->resolve; */ 
2817: /* MUTANT (rep_op) */            if (resolve == JS_ResolveStub) {
2817: /* MUTANT (negate) */            if(! (resolve != JS_ResolveStub)) {
2819: /* MUTANT (del_stmt) */ /*                 key.obj = obj; */ 
2820: /* MUTANT (del_stmt) */ /*                 key.id = id; */ 
2828: /* MUTANT (negate) */                if(! (!js_StartResolving(cx, &key, JSRESFLAG_LOOKUP, &entry))) {
2829: /* MUTANT (del_stmt) */ /*                     JS_UNLOCK_OBJ(cx, obj); */ 
2830: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
2832: /* MUTANT (negate) */                if(! (!entry)) {
2834: /* MUTANT (del_stmt) */ /*                     JS_UNLOCK_OBJ(cx, obj); */ 
2835: /* MUTANT (del_stmt) */ /*                     goto out; */ 
2840: /* MUTANT (del_stmt) */ /*                 *propp = NULL; */ 
2842: /* MUTANT (negate) */                if(! (clasp->flags & JSCLASS_NEW_RESOLVE)) {
2843: /* MUTANT (del_stmt) */ /*                     newresolve = (JSNewResolveOp)resolve; */ 
2844: /* MUTANT (rep_op) */                    if (!(flags & JSRESOLVE_CLASSNAME) ||
2845: /* MUTANT (rep_op) */                        cx->fp ||
2847: /* MUTANT (del_stmt) */ /*                         cs = &js_CodeSpec[*pc]; */ 
2848: /* MUTANT (del_stmt) */ /*                         format = cs->format; */ 
2849: /* MUTANT (rep_op) */                        if ((format & JOF_MODEMASK) == JOF_NAME)
2849: /* MUTANT (negate) */                        if(! ((format & JOF_MODEMASK) != JOF_NAME))
2851: /* MUTANT (rep_op) */                        if ((format & JOF_ASSIGNING) &&
2853: /* MUTANT (del_stmt) */ /*                             flags |= JSRESOLVE_ASSIGNING; */ 
2855: /* MUTANT (del_stmt) */ /*                             pc += cs->length; */ 
2855: /* MUTANT (rep_op) */                            pc -= cs->length;
2855: /* MUTANT (rep_op) */                            pc *= cs->length;
2855: /* MUTANT (rep_op) */                            pc %= cs->length;
2856: /* MUTANT (negate) */                            if(! (Detecting(cx, pc)))
2859: /* MUTANT (negate) */                        if(! (format & JOF_DECLARING))
2865: /* MUTANT (del_stmt) */ /*                     JS_UNLOCK_OBJ(cx, obj); */ 
2868: /* MUTANT (del_stmt) */ /*                     JS_KEEP_ATOMS(cx->runtime); */ 
2869: /* MUTANT (del_stmt) */ /*                     ok = newresolve(cx, obj, ID_TO_VALUE(id), flags, &obj2); */ 
2870: /* MUTANT (del_stmt) */ /*                     JS_UNKEEP_ATOMS(cx->runtime); */ 
2871: /* MUTANT (negate) */                    if(! (!ok))
2874: /* MUTANT (del_stmt) */ /*                     JS_LOCK_OBJ(cx, obj); */ 
2875: /* MUTANT (negate) */                    if(! (obj2)) {
2877: /* MUTANT (rep_op) */                        if (obj2 == obj) {
2877: /* MUTANT (negate) */                        if(! (obj2 != obj)) {
2878: /* MUTANT (del_stmt) */ /*                             JS_UNLOCK_OBJ(cx, obj); */ 
2879: /* MUTANT (del_stmt) */ /*                             JS_LOCK_OBJ(cx, obj2); */ 
2882: /* MUTANT (negate) */                        if(! (!MAP_IS_NATIVE(&scope->map))) {
2884: /* MUTANT (del_stmt) */ /*                             JS_ASSERT(obj2 != obj); */ 
2884: /* MUTANT (rep_op) */                            JS_ASSERT(obj2 == obj);
2885: /* MUTANT (del_stmt) */ /*                             JS_UNLOCK_OBJ(cx, obj2); */ 
2886: /* MUTANT (del_stmt) */ /*                             ok = OBJ_LOOKUP_PROPERTY(cx, obj2, id, objp, propp); */ 
2887: /* MUTANT (rep_op) */                            if (!ok && *propp)
2887: /* MUTANT (negate) */                            if(! (!ok || *propp))
2889: /* MUTANT (del_stmt) */ /*                             JS_LOCK_OBJ(cx, obj2); */ 
2899: /* MUTANT (rep_op) */                            if (scope->object != obj2)
2899: /* MUTANT (negate) */                            if(! (scope->object == obj2))
2902: /* MUTANT (negate) */                        if(! (sprop)) {
2903: /* MUTANT (del_stmt) */ /*                             JS_ASSERT(obj2 == scope->object); */ 
2903: /* MUTANT (rep_op) */                            JS_ASSERT(obj2 != scope->object);
2904: /* MUTANT (del_stmt) */ /*                             obj = obj2; */ 
2905: /* MUTANT (rep_op) */                        } else if (obj2 == obj) {
2905: /* MUTANT (negate) */                        } else if(! (obj2 != obj)) {
2906: /* MUTANT (del_stmt) */ /*                             JS_UNLOCK_OBJ(cx, obj2); */ 
2907: /* MUTANT (del_stmt) */ /*                             JS_LOCK_OBJ(cx, obj); */ 
2915: /* MUTANT (del_stmt) */ /*                     JS_UNLOCK_OBJ(cx, obj); */ 
2916: /* MUTANT (del_stmt) */ /*                     ok = resolve(cx, obj, ID_TO_VALUE(id)); */ 
2917: /* MUTANT (negate) */                    if(! (!ok))
2919: /* MUTANT (del_stmt) */ /*                     JS_LOCK_OBJ(cx, obj); */ 
2920: /* MUTANT (del_stmt) */ /*                     scope = OBJ_SCOPE(obj); */ 
2921: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(MAP_IS_NATIVE(&scope->map)); */ 
2922: /* MUTANT (rep_op) */                    if (scope->object != obj)
2922: /* MUTANT (negate) */                    if(! (scope->object == obj))
2928: /* MUTANT (rep_op) */                if (!ok && *propp)
2928: /* MUTANT (negate) */                if(! (!ok || *propp))
2933: /* MUTANT (negate) */        if(! (sprop)) {
2934: /* MUTANT (del_stmt) */ /*             JS_ASSERT(OBJ_SCOPE(obj) == scope); */ 
2934: /* MUTANT (rep_op) */            JS_ASSERT(OBJ_SCOPE(obj) != scope);
2935: /* MUTANT (del_stmt) */ /*             *objp = scope->object; */       /* XXXbe hide in jsscope.[ch] */
2937: /* MUTANT (del_stmt) */ /*             *propp = (JSProperty *) sprop; */ 
2938: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
2942: /* MUTANT (del_stmt) */ /*         JS_UNLOCK_OBJ(cx, obj); */ 
2943: /* MUTANT (negate) */        if(! (!proto))
2945: /* MUTANT (negate) */        if(! (!OBJ_IS_NATIVE(proto)))
2947: /* MUTANT (del_stmt) */ /*         obj = proto; */ 
2952: /* MUTANT (del_stmt) */ /*     *propp = NULL; */ 
2953: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
2960: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
2961: /* MUTANT (del_stmt) */ /*     JSObject *obj, *pobj, *lastobj; */ 
2962: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
2963: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
2965: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
2966: /* MUTANT (del_stmt) */ /*     obj = cx->fp->scopeChain; */ 
2969: /* MUTANT (negate) */        if(! (OBJ_IS_NATIVE(obj))) {
2970: /* MUTANT (del_stmt) */ /*             JS_LOCK_OBJ(cx, obj); */ 
2971: /* MUTANT (del_stmt) */ /*             PROPERTY_CACHE_TEST(&rt->propertyCache, obj, id, sprop); */ 
2972: /* MUTANT (negate) */            if(! (sprop)) {
2973: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(OBJ_IS_NATIVE(obj)); */ 
2974: /* MUTANT (del_stmt) */ /*                 *objp = obj; */ 
2975: /* MUTANT (del_stmt) */ /*                 *pobjp = obj; */ 
2976: /* MUTANT (del_stmt) */ /*                 *propp = (JSProperty *) sprop; */ 
2977: /* MUTANT (del_stmt) */ /*                 return JS_TRUE; */ 
2983: /* MUTANT (negate) */        if(! (!OBJ_LOOKUP_PROPERTY(cx, obj, id, &pobj, &prop)))
2985: /* MUTANT (negate) */        if(! (prop)) {
2986: /* MUTANT (negate) */            if(! (OBJ_IS_NATIVE(pobj))) {
2987: /* MUTANT (del_stmt) */ /*                 sprop = (JSScopeProperty *) prop; */ 
2988: /* MUTANT (del_stmt) */ /*                 PROPERTY_CACHE_FILL(&rt->propertyCache, pobj, id, sprop); */ 
2991: /* MUTANT (del_stmt) */ /*             *pobjp = pobj; */ 
2992: /* MUTANT (del_stmt) */ /*             *propp = prop; */ 
2993: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
2996: /* MUTANT (del_stmt) */ /*     } while ((obj = OBJ_GET_PARENT(cx, obj)) != NULL); */ 
2996: /* MUTANT (rep_op) */    } while ((obj = OBJ_GET_PARENT(cx, obj)) == NULL);
2996: /* MUTANT (negate) */    } while(! ((obj = OBJ_GET_PARENT(cx, obj)) != NULL));
2998: /* MUTANT (del_stmt) */ /*     *objp = lastobj; */ 
2999: /* MUTANT (del_stmt) */ /*     *pobjp = NULL; */ 
3000: /* MUTANT (del_stmt) */ /*     *propp = NULL; */ 
3001: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3005: /* MUTANT (negate) */js_FindIdentif(!ierBase(JSContext *cx, jsid id))
3007: /* MUTANT (del_stmt) */ /*     JSObject *obj, *pobj; */ 
3008: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
3014: /* MUTANT (negate) */    if(! (!js_FindProperty(cx, id, &obj, &pobj, &prop)))
3016: /* MUTANT (negate) */    if(! (prop)) {
3017: /* MUTANT (del_stmt) */ /*         OBJ_DROP_PROPERTY(cx, pobj, prop); */ 
3018: /* MUTANT (del_stmt) */ /*         return obj; */ 
3031: /* MUTANT (negate) */    if(! (JS_HAS_STRICT_OPTION(cx))) {
3032: /* MUTANT (del_stmt) */ /*         JSString *str = JSVAL_TO_STRING(ID_TO_VALUE(id)); */ 
3034: /* MUTANT (rep_op) */                                          JSREPORT_WARNING & JSREPORT_STRICT,
3038: /* MUTANT (del_stmt) */ /*             return NULL; */ 
3047: /* MUTANT (del_stmt) */ /*     JSObject *obj2; */ 
3048: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
3049: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
3050: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
3051: /* MUTANT (del_stmt) */ /*     uint32 slot; */ 
3057: /* MUTANT (del_stmt) */ /*     CHECK_FOR_STRING_INDEX(id); */ 
3059: /* MUTANT (negate) */    if(! (!js_LookupProperty(cx, obj, id, &obj2, &prop)))
3061: /* MUTANT (negate) */    if(! (!prop)) {
3062: /* MUTANT (del_stmt) */ /*         jsval default_val; */ 
3066: /* MUTANT (rep_op) */        default_val = (JSID_IS_INT(id) || JSID_TO_INT(id) >= 0)
3066: /* MUTANT (rep_op) */        default_val = (JSID_IS_INT(id) && JSID_TO_INT(id) <= 0)
3066: /* MUTANT (rep_op) */        default_val = (JSID_IS_INT(id) && JSID_TO_INT(id) < 0)
3066: /* MUTANT (rep_op) */        default_val = (JSID_IS_INT(id) && JSID_TO_INT(id) > 0)
3066: /* MUTANT (rep_op) */        default_val = (JSID_IS_INT(id) && JSID_TO_INT(id) == 0)
3066: /* MUTANT (rep_op) */        default_val = (JSID_IS_INT(id) && JSID_TO_INT(id) != 0)
3066: /* MUTANT (rep_const) */        default_val = (JSID_IS_INT(id) && JSID_TO_INT(id) >= 1)
3066: /* MUTANT (rep_const) */        default_val = (JSID_IS_INT(id) && JSID_TO_INT(id) >= -1)
3074: /* MUTANT (negate) */        if(! (!OBJ_GET_CLASS(cx, obj)->getProperty(cx, obj, ID_TO_VALUE(id), vp)))
3081: /* MUTANT (rep_op) */        if (JS_HAS_STRICT_OPTION(cx) ||
3082: /* MUTANT (rep_op) */            *vp != default_val &&
3082: /* MUTANT (rep_op) */            *vp == default_val ||
3083: /* MUTANT (rep_op) */            cx->fp || cx->fp->pc &&
3083: /* MUTANT (rep_op) */            cx->fp && cx->fp->pc ||
3084: /* MUTANT (rep_op) */            (*cx->fp->pc != JSOP_GETPROP || *cx->fp->pc == JSOP_GETELEM))
3084: /* MUTANT (rep_op) */            (*cx->fp->pc == JSOP_GETPROP && *cx->fp->pc == JSOP_GETELEM))
3084: /* MUTANT (rep_op) */            (*cx->fp->pc == JSOP_GETPROP || *cx->fp->pc != JSOP_GETELEM))
3086: /* MUTANT (del_stmt) */ /*             jsbytecode *pc; */ 
3087: /* MUTANT (del_stmt) */ /*             JSString *str; */ 
3090: /* MUTANT (del_stmt) */ /*             JS_ASSERT(cx->fp->script); */ 
3091: /* MUTANT (del_stmt) */ /*             pc = cx->fp->pc; */ 
3092: /* MUTANT (del_stmt) */ /*             pc += js_CodeSpec[*pc].length; */ 
3092: /* MUTANT (rep_op) */            pc -= js_CodeSpec[*pc].length;
3092: /* MUTANT (rep_op) */            pc *= js_CodeSpec[*pc].length;
3092: /* MUTANT (rep_op) */            pc %= js_CodeSpec[*pc].length;
3093: /* MUTANT (negate) */            if(! (Detecting(cx, pc)))
3099: /* MUTANT (rep_op) */            if (!str &&
3101: /* MUTANT (rep_op) */                                              JSREPORT_WARNING&JSREPORT_STRICT,
3105: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
3111: /* MUTANT (negate) */    if(! (!OBJ_IS_NATIVE(obj2))) {
3112: /* MUTANT (del_stmt) */ /*         OBJ_DROP_PROPERTY(cx, obj2, prop); */ 
3113: /* MUTANT (del_stmt) */ /*         return OBJ_GET_PROPERTY(cx, obj2, id, vp); */ 
3118: /* MUTANT (del_stmt) */ /*     sprop = (JSScopeProperty *) prop; */ 
3119: /* MUTANT (del_stmt) */ /*     slot = sprop->slot; */ 
3120: /* MUTANT (rep_op) */    if (slot == SPROP_INVALID_SLOT) {
3120: /* MUTANT (negate) */    if(! (slot != SPROP_INVALID_SLOT)) {
3121: /* MUTANT (del_stmt) */ /*         JS_ASSERT(slot < obj2->map->freeslot); */ 
3121: /* MUTANT (rep_op) */        JS_ASSERT(slot <= obj2->map->freeslot);
3121: /* MUTANT (rep_op) */        JS_ASSERT(slot > obj2->map->freeslot);
3121: /* MUTANT (rep_op) */        JS_ASSERT(slot >= obj2->map->freeslot);
3121: /* MUTANT (rep_op) */        JS_ASSERT(slot == obj2->map->freeslot);
3121: /* MUTANT (rep_op) */        JS_ASSERT(slot != obj2->map->freeslot);
3122: /* MUTANT (del_stmt) */ /*         *vp = LOCKED_OBJ_GET_SLOT(obj2, slot); */ 
3125: /* MUTANT (negate) */        if(! (!sprop->getter))
3128: /* MUTANT (del_stmt) */ /*         *vp = JSVAL_VOID; */ 
3132: /* MUTANT (negate) */    if(! (!SPROP_GET(cx, sprop, obj, obj2, vp)))
3134: /* MUTANT (del_stmt) */ /*     JS_LOCK_SCOPE(cx, scope); */ 
3136: /* MUTANT (negate) */    if(! (SPROP_HAS_VALID_SLOT(sprop, scope))) {
3137: /* MUTANT (del_stmt) */ /*         LOCKED_OBJ_SET_SLOT(obj2, slot, *vp); */ 
3138: /* MUTANT (del_stmt) */ /*         PROPERTY_CACHE_FILL(&cx->runtime->propertyCache, obj2, id, sprop); */ 
3143: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3149: /* MUTANT (del_stmt) */ /*     JSObject *pobj; */ 
3150: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
3151: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
3152: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
3153: /* MUTANT (del_stmt) */ /*     uintN attrs, flags; */ 
3154: /* MUTANT (del_stmt) */ /*     intN shortid; */ 
3155: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
3156: /* MUTANT (del_stmt) */ /*     JSPropertyOp getter, setter; */ 
3157: /* MUTANT (del_stmt) */ /*     jsval pval; */ 
3158: /* MUTANT (del_stmt) */ /*     uint32 slot; */ 
3164: /* MUTANT (del_stmt) */ /*     CHECK_FOR_STRING_INDEX(id); */ 
3166: /* MUTANT (negate) */    if(! (!js_LookupProperty(cx, obj, id, &pobj, &prop)))
3169: /* MUTANT (rep_op) */    if (prop || !OBJ_IS_NATIVE(pobj)) {
3169: /* MUTANT (negate) */    if(! (prop && !OBJ_IS_NATIVE(pobj))) {
3170: /* MUTANT (del_stmt) */ /*         OBJ_DROP_PROPERTY(cx, pobj, prop); */ 
3171: /* MUTANT (del_stmt) */ /*         prop = NULL; */ 
3183: /* MUTANT (del_stmt) */ /*     attrs = JSPROP_ENUMERATE; */ 
3184: /* MUTANT (del_stmt) */ /*     flags = 0; */ 
3184: /* MUTANT (rep_const) */    flags = 1;
3184: /* MUTANT (rep_const) */    flags = -1;
3185: /* MUTANT (del_stmt) */ /*     shortid = 0; */ 
3185: /* MUTANT (rep_const) */    shortid = 1;
3185: /* MUTANT (rep_const) */    shortid = -1;
3186: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, obj); */ 
3187: /* MUTANT (del_stmt) */ /*     getter = clasp->getProperty; */ 
3188: /* MUTANT (del_stmt) */ /*     setter = clasp->setProperty; */ 
3190: /* MUTANT (negate) */    if(! (sprop)) {
3196: /* MUTANT (del_stmt) */ /*         scope = OBJ_SCOPE(pobj); */ 
3198: /* MUTANT (del_stmt) */ /*         attrs = sprop->attrs; */ 
3199: /* MUTANT (rep_op) */        if ((attrs & JSPROP_READONLY) &&
3200: /* MUTANT (rep_op) */            (SCOPE_IS_SEALED(scope) || pobj == obj)) {
3200: /* MUTANT (rep_op) */            (SCOPE_IS_SEALED(scope) && pobj != obj)) {
3201: /* MUTANT (del_stmt) */ /*             JS_UNLOCK_SCOPE(cx, scope); */ 
3202: /* MUTANT (rep_op) */            if ((attrs & JSPROP_READONLY) || JS_VERSION_IS_ECMA(cx))
3202: /* MUTANT (negate) */            if(! ((attrs & JSPROP_READONLY) && JS_VERSION_IS_ECMA(cx)))
3204: /* MUTANT (del_stmt) */ /*             goto read_only_error; */ 
3207: /* MUTANT (rep_op) */        if (pobj == obj) {
3207: /* MUTANT (negate) */        if(! (pobj != obj)) {
3214: /* MUTANT (del_stmt) */ /*             JS_UNLOCK_SCOPE(cx, scope); */ 
3217: /* MUTANT (negate) */            if(! (attrs & JSPROP_SHARED))
3221: /* MUTANT (del_stmt) */ /*             attrs = JSPROP_ENUMERATE; */ 
3230: /* MUTANT (negate) */            if(! (sprop->flags & SPROP_HAS_SHORTID)) {
3231: /* MUTANT (del_stmt) */ /*                 flags = SPROP_HAS_SHORTID; */ 
3232: /* MUTANT (del_stmt) */ /*                 shortid = sprop->shortid; */ 
3233: /* MUTANT (del_stmt) */ /*                 getter = sprop->getter; */ 
3234: /* MUTANT (del_stmt) */ /*                 setter = sprop->setter; */ 
3245: /* MUTANT (del_stmt) */ /*         scope = NULL; */ 
3249: /* MUTANT (negate) */    if(! (!sprop)) {
3250: /* MUTANT (rep_op) */        if (SCOPE_IS_SEALED(OBJ_SCOPE(obj)) || OBJ_SCOPE(obj)->object == obj)
3250: /* MUTANT (rep_op) */        if (SCOPE_IS_SEALED(OBJ_SCOPE(obj)) && OBJ_SCOPE(obj)->object != obj)
3250: /* MUTANT (negate) */        if(! (SCOPE_IS_SEALED(OBJ_SCOPE(obj)) && OBJ_SCOPE(obj)->object == obj))
3254: /* MUTANT (del_stmt) */ /*         JS_LOCK_OBJ(cx, obj); */ 
3255: /* MUTANT (del_stmt) */ /*         scope = js_GetMutableScope(cx, obj); */ 
3256: /* MUTANT (negate) */        if(! (!scope)) {
3257: /* MUTANT (del_stmt) */ /*             JS_UNLOCK_OBJ(cx, obj); */ 
3258: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3260: /* MUTANT (negate) */        if(! (clasp->flags & JSCLASS_SHARE_ALL_PROPERTIES))
3264: /* MUTANT (negate) */        if(! (!sprop)) {
3265: /* MUTANT (del_stmt) */ /*             JS_UNLOCK_SCOPE(cx, scope); */ 
3266: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3274: /* MUTANT (negate) */        if(! (SPROP_HAS_VALID_SLOT(sprop, scope)))
3280: /* MUTANT (del_stmt) */ /*                             JS_UNLOCK_SCOPE(cx, scope); */ 
3281: /* MUTANT (del_stmt) */ /*                             return JS_FALSE); */ 
3283: /* MUTANT (del_stmt) */ /*         PROPERTY_CACHE_FILL(&cx->runtime->propertyCache, obj, id, sprop); */ 
3288: /* MUTANT (rep_op) */    if (slot == SPROP_INVALID_SLOT) {
3288: /* MUTANT (negate) */    if(! (slot != SPROP_INVALID_SLOT)) {
3289: /* MUTANT (del_stmt) */ /*         JS_ASSERT(slot < obj->map->freeslot); */ 
3289: /* MUTANT (rep_op) */        JS_ASSERT(slot <= obj->map->freeslot);
3289: /* MUTANT (rep_op) */        JS_ASSERT(slot > obj->map->freeslot);
3289: /* MUTANT (rep_op) */        JS_ASSERT(slot >= obj->map->freeslot);
3289: /* MUTANT (rep_op) */        JS_ASSERT(slot == obj->map->freeslot);
3289: /* MUTANT (rep_op) */        JS_ASSERT(slot != obj->map->freeslot);
3290: /* MUTANT (del_stmt) */ /*         pval = LOCKED_OBJ_GET_SLOT(obj, slot); */ 
3293: /* MUTANT (negate) */        if(! (!sprop->setter))
3301: /* MUTANT (negate) */    if(! (!SPROP_SET(cx, sprop, obj, obj, vp)))
3305: /* MUTANT (del_stmt) */ /*     JS_LOCK_SCOPE(cx, scope); */ 
3312: /* MUTANT (negate) */    if(! (SPROP_HAS_VALID_SLOT(sprop, scope))) {
3315: /* MUTANT (del_stmt) */ /*         LOCKED_OBJ_SET_SLOT(obj, slot, *vp); */ 
3318: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3325: /* MUTANT (negate) */    if(! (str)) {
3338: /* MUTANT (del_stmt) */ /*     JSBool noprop, ok; */ 
3339: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
3341: /* MUTANT (del_stmt) */ /*     noprop = !prop; */ 
3342: /* MUTANT (negate) */    if(! (noprop)) {
3343: /* MUTANT (negate) */        if(! (!js_LookupProperty(cx, obj, id, &obj, &prop)))
3345: /* MUTANT (negate) */        if(! (!prop)) {
3346: /* MUTANT (del_stmt) */ /*             *attrsp = 0; */ 
3346: /* MUTANT (rep_const) */            *attrsp = 1;
3346: /* MUTANT (rep_const) */            *attrsp = -1;
3347: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
3349: /* MUTANT (negate) */        if(! (!OBJ_IS_NATIVE(obj))) {
3350: /* MUTANT (del_stmt) */ /*             ok = OBJ_GET_ATTRIBUTES(cx, obj, id, prop, attrsp); */ 
3351: /* MUTANT (del_stmt) */ /*             OBJ_DROP_PROPERTY(cx, obj, prop); */ 
3352: /* MUTANT (del_stmt) */ /*             return ok; */ 
3356: /* MUTANT (del_stmt) */ /*     *attrsp = sprop->attrs; */ 
3357: /* MUTANT (negate) */    if(! (noprop))
3359: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3366: /* MUTANT (del_stmt) */ /*     JSBool noprop, ok; */ 
3367: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
3369: /* MUTANT (del_stmt) */ /*     noprop = !prop; */ 
3370: /* MUTANT (negate) */    if(! (noprop)) {
3371: /* MUTANT (negate) */        if(! (!js_LookupProperty(cx, obj, id, &obj, &prop)))
3373: /* MUTANT (negate) */        if(! (!prop))
3375: /* MUTANT (negate) */        if(! (!OBJ_IS_NATIVE(obj))) {
3376: /* MUTANT (del_stmt) */ /*             ok = OBJ_SET_ATTRIBUTES(cx, obj, id, prop, attrsp); */ 
3377: /* MUTANT (del_stmt) */ /*             OBJ_DROP_PROPERTY(cx, obj, prop); */ 
3378: /* MUTANT (del_stmt) */ /*             return ok; */ 
3382: /* MUTANT (rep_const) */    sprop = js_ChangeNativePropertyAttrs(cx, obj, sprop, *attrsp, 1,
3382: /* MUTANT (rep_const) */    sprop = js_ChangeNativePropertyAttrs(cx, obj, sprop, *attrsp, -1,
3384: /* MUTANT (negate) */    if(! (noprop))
3386: /* MUTANT (del_stmt) */ /*     return (sprop != NULL); */ 
3386: /* MUTANT (rep_op) */    return (sprop == NULL);
3395: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
3396: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
3397: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
3398: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
3399: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
3401: /* MUTANT (del_stmt) */ /*     *rval = JS_VERSION_IS_ECMA(cx) ? JSVAL_TRUE : JSVAL_VOID; */ 
3407: /* MUTANT (del_stmt) */ /*     CHECK_FOR_STRING_INDEX(id); */ 
3409: /* MUTANT (negate) */    if(! (!js_LookupProperty(cx, obj, id, &proto, &prop)))
3411: /* MUTANT (rep_op) */    if (!prop && proto != obj) {
3411: /* MUTANT (rep_op) */    if (!prop || proto == obj) {
3411: /* MUTANT (negate) */    if(! (!prop || proto != obj)) {
3418: /* MUTANT (negate) */        if(! (prop)) {
3419: /* MUTANT (negate) */            if(! (OBJ_IS_NATIVE(proto))) {
3420: /* MUTANT (del_stmt) */ /*                 sprop = (JSScopeProperty *)prop; */ 
3421: /* MUTANT (negate) */                if(! (SPROP_IS_SHARED_PERMANENT(sprop)))
3425: /* MUTANT (rep_op) */            if (*rval != JSVAL_FALSE)
3425: /* MUTANT (negate) */            if(! (*rval == JSVAL_FALSE))
3439: /* MUTANT (negate) */    if(! (sprop->attrs & JSPROP_PERMANENT)) {
3440: /* MUTANT (del_stmt) */ /*         OBJ_DROP_PROPERTY(cx, obj, prop); */ 
3441: /* MUTANT (negate) */        if(! (JS_VERSION_IS_ECMA(cx))) {
3442: /* MUTANT (del_stmt) */ /*             *rval = JSVAL_FALSE; */ 
3443: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
3447: /* MUTANT (negate) */        if(! (str)) {
3457: /* MUTANT (del_stmt) */ /*         OBJ_DROP_PROPERTY(cx, obj, prop); */ 
3458: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3462: /* MUTANT (negate) */    if(! (SPROP_HAS_VALID_SLOT(sprop, scope)))
3465: /* MUTANT (del_stmt) */ /*     PROPERTY_CACHE_FILL(&cx->runtime->propertyCache, obj, id, NULL); */ 
3466: /* MUTANT (del_stmt) */ /*     ok = js_RemoveScopeProperty(cx, scope, id); */ 
3467: /* MUTANT (del_stmt) */ /*     OBJ_DROP_PROPERTY(cx, obj, prop); */ 
3468: /* MUTANT (del_stmt) */ /*     return ok; */ 
3474: /* MUTANT (del_stmt) */ /*     *rval = JSVAL_VOID; */ 
3475: /* MUTANT (del_stmt) */ /*     return js_SetProperty(cx, obj, id, &null); */ 
3483: /* MUTANT (del_stmt) */ /*     jsval v; */ 
3484: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
3486: /* MUTANT (del_stmt) */ /*     v = OBJECT_TO_JSVAL(obj); */ 
3493: /* MUTANT (rep_const) */        if (!js_TryMethod(cx, obj, cx->runtime->atomState.toStringAtom, 1, NULL,
3493: /* MUTANT (rep_const) */        if (!js_TryMethod(cx, obj, cx->runtime->atomState.toStringAtom, -1, NULL,
3495: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3498: /* MUTANT (negate) */        if(! (!JSVAL_IS_PRIMITIVE(v))) {
3499: /* MUTANT (negate) */            if(! (!OBJ_GET_CLASS(cx, obj)->convert(cx, obj, hint, &v)))
3507: /* MUTANT (rep_op) */            if (!JSVAL_IS_PRIMITIVE(v) || JS_VERSION_IS_1_2(cx)) {
3507: /* MUTANT (negate) */            if(! (!JSVAL_IS_PRIMITIVE(v) && JS_VERSION_IS_1_2(cx))) {
3510: /* MUTANT (negate) */                if(! (!bytes))
3512: /* MUTANT (del_stmt) */ /*                 str = JS_NewString(cx, bytes, strlen(bytes)); */ 
3513: /* MUTANT (negate) */                if(! (!str)) {
3514: /* MUTANT (del_stmt) */ /*                     free(bytes); */ 
3515: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
3518: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3524: /* MUTANT (negate) */        if(! (!OBJ_GET_CLASS(cx, obj)->convert(cx, obj, hint, &v)))
3526: /* MUTANT (negate) */        if(! (!JSVAL_IS_PRIMITIVE(v))) {
3527: /* MUTANT (del_stmt) */ /*             JSType type = JS_TypeOfValue(cx, v); */ 
3528: /* MUTANT (rep_op) */            if (type != hint ||
3528: /* MUTANT (rep_op) */            if (type == hint &&
3529: /* MUTANT (rep_op) */                (type != JSTYPE_FUNCTION && hint == JSTYPE_OBJECT)) {
3529: /* MUTANT (rep_op) */                (type == JSTYPE_FUNCTION || hint == JSTYPE_OBJECT)) {
3529: /* MUTANT (rep_op) */                (type == JSTYPE_FUNCTION && hint != JSTYPE_OBJECT)) {
3530: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3533: /* MUTANT (rep_op) */            if (JS_VERSION_IS_1_2(cx) || hint == JSTYPE_BOOLEAN)
3533: /* MUTANT (rep_op) */            if (JS_VERSION_IS_1_2(cx) && hint != JSTYPE_BOOLEAN)
3533: /* MUTANT (negate) */            if(! (JS_VERSION_IS_1_2(cx) && hint == JSTYPE_BOOLEAN))
3535: /* MUTANT (rep_const) */            if (!js_TryMethod(cx, obj, cx->runtime->atomState.toStringAtom, 1,
3535: /* MUTANT (rep_const) */            if (!js_TryMethod(cx, obj, cx->runtime->atomState.toStringAtom, -1,
3541: /* MUTANT (negate) */    if(! (!JSVAL_IS_PRIMITIVE(v))) {
3543: /* MUTANT (rep_op) */        if (hint != JSTYPE_STRING) {
3543: /* MUTANT (negate) */        if(! (hint == JSTYPE_STRING)) {
3544: /* MUTANT (del_stmt) */ /*             str = JS_InternString(cx, OBJ_GET_CLASS(cx, obj)->name); */ 
3545: /* MUTANT (negate) */            if(! (!str))
3548: /* MUTANT (del_stmt) */ /*             str = NULL; */ 
3551: /* MUTANT (del_stmt) */ /*         str = js_DecompileValueGenerator(cx, JSDVG_SEARCH_STACK, v, str); */ 
3552: /* MUTANT (negate) */        if(! (str)) {
3556: /* MUTANT (rep_op) */                                 (hint != JSTYPE_VOID)
3564: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3570: /* MUTANT (del_stmt) */ /*     JSIdArray *ida; */ 
3573: /* MUTANT (rep_op) */          JS_malloc(cx, sizeof(JSIdArray) - (length-1) * sizeof(jsval));
3573: /* MUTANT (rep_op) */          JS_malloc(cx, sizeof(JSIdArray) * (length-1) * sizeof(jsval));
3573: /* MUTANT (rep_op) */          JS_malloc(cx, sizeof(JSIdArray) % (length-1) * sizeof(jsval));
3573: /* MUTANT (rep_const) */          JS_malloc(cx, sizeof(JSIdArray) + (length-0) * sizeof(jsval));
3573: /* MUTANT (rep_const) */          JS_malloc(cx, sizeof(JSIdArray) + (length--1) * sizeof(jsval));
3573: /* MUTANT (rep_const) */          JS_malloc(cx, sizeof(JSIdArray) + (length-((1)+1)) * sizeof(jsval));
3574: /* MUTANT (negate) */    if(! (ida))
3576: /* MUTANT (del_stmt) */ /*     return ida; */ 
3582: /* MUTANT (del_stmt) */ /*     JSIdArray *rida; */ 
3585: /* MUTANT (rep_op) */           JS_realloc(cx, ida, sizeof(JSIdArray) - (length-1) * sizeof(jsval));
3585: /* MUTANT (rep_op) */           JS_realloc(cx, ida, sizeof(JSIdArray) * (length-1) * sizeof(jsval));
3585: /* MUTANT (rep_op) */           JS_realloc(cx, ida, sizeof(JSIdArray) % (length-1) * sizeof(jsval));
3585: /* MUTANT (rep_const) */           JS_realloc(cx, ida, sizeof(JSIdArray) + (length-0) * sizeof(jsval));
3585: /* MUTANT (rep_const) */           JS_realloc(cx, ida, sizeof(JSIdArray) + (length--1) * sizeof(jsval));
3585: /* MUTANT (rep_const) */           JS_realloc(cx, ida, sizeof(JSIdArray) + (length-((1)+1)) * sizeof(jsval));
3586: /* MUTANT (negate) */    if(! (!rida))
3590: /* MUTANT (del_stmt) */ /*     return rida; */ 
3595: /* MUTANT (del_stmt) */ /*     jsint                   next_index; */  /* index into jsid array */
3596: /* MUTANT (del_stmt) */ /*     JSIdArray               *ida; */        /* all property ids in enumeration */
3597: /* MUTANT (del_stmt) */ /*     JSNativeIteratorState   *next; */       /* double-linked list support */
3598: /* MUTANT (del_stmt) */ /*     JSNativeIteratorState   **prevp; */ 
3599: /* MUTANT (del_stmt) */ /* }; */ 
3610: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
3611: /* MUTANT (del_stmt) */ /*     JSObject *proto; */ 
3612: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
3613: /* MUTANT (del_stmt) */ /*     JSEnumerateOp enumerate; */ 
3614: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop, *lastProp; */ 
3615: /* MUTANT (del_stmt) */ /*     jsint i, length; */ 
3616: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
3617: /* MUTANT (del_stmt) */ /*     JSIdArray *ida; */ 
3618: /* MUTANT (del_stmt) */ /*     JSNativeIteratorState *state; */ 
3620: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
3621: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, obj); */ 
3622: /* MUTANT (del_stmt) */ /*     enumerate = clasp->enumerate; */ 
3623: /* MUTANT (negate) */    if(! (clasp->flags & JSCLASS_NEW_ENUMERATE))
3628: /* MUTANT (negate) */        if(! (!enumerate(cx, obj)))
3630: /* MUTANT (del_stmt) */ /*         length = 0; */ 
3630: /* MUTANT (rep_const) */        length = 1;
3630: /* MUTANT (rep_const) */        length = -1;
3637: /* MUTANT (del_stmt) */ /*         JS_LOCK_OBJ(cx, obj); */ 
3638: /* MUTANT (del_stmt) */ /*         scope = OBJ_SCOPE(obj); */ 
3645: /* MUTANT (del_stmt) */ /*         proto = OBJ_GET_PROTO(cx, obj); */ 
3646: /* MUTANT (rep_op) */        if (proto || scope == OBJ_SCOPE(proto)) {
3646: /* MUTANT (rep_op) */        if (proto && scope != OBJ_SCOPE(proto)) {
3646: /* MUTANT (negate) */        if(! (proto && scope == OBJ_SCOPE(proto))) {
3647: /* MUTANT (del_stmt) */ /*             ida = js_NewIdArray(cx, 0); */ 
3647: /* MUTANT (rep_const) */            ida = js_NewIdArray(cx, 1);
3647: /* MUTANT (rep_const) */            ida = js_NewIdArray(cx, -1);
3648: /* MUTANT (negate) */            if(! (!ida)) {
3649: /* MUTANT (del_stmt) */ /*                 JS_UNLOCK_OBJ(cx, obj); */ 
3650: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
3658: /* MUTANT (rep_op) */                     (cx->options & JSOPTION_LOGCALL_TOSOURCE) &&
3660: /* MUTANT (rep_op) */                     (sprop->attrs & JSPROP_ENUMERATE)) ||
3661: /* MUTANT (rep_op) */                    !(sprop->flags & SPROP_IS_ALIAS) ||
3662: /* MUTANT (rep_op) */                    (!SCOPE_HAD_MIDDLE_DELETE(scope) &&
3664: /* MUTANT (del_stmt) */ /*                     length++; */ 
3664: /* MUTANT (rep_op) */                    length--;
3668: /* MUTANT (negate) */            if(! (!ida)) {
3669: /* MUTANT (del_stmt) */ /*                 JS_UNLOCK_OBJ(cx, obj); */ 
3670: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
3676: /* MUTANT (rep_op) */                     (cx->options & JSOPTION_LOGCALL_TOSOURCE) &&
3678: /* MUTANT (rep_op) */                     (sprop->attrs & JSPROP_ENUMERATE)) ||
3679: /* MUTANT (rep_op) */                    !(sprop->flags & SPROP_IS_ALIAS) ||
3680: /* MUTANT (rep_op) */                    (!SCOPE_HAD_MIDDLE_DELETE(scope) &&
3682: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(i > 0); */ 
3682: /* MUTANT (rep_op) */                    JS_ASSERT(i <= 0);
3682: /* MUTANT (rep_op) */                    JS_ASSERT(i < 0);
3682: /* MUTANT (rep_op) */                    JS_ASSERT(i >= 0);
3682: /* MUTANT (rep_op) */                    JS_ASSERT(i == 0);
3682: /* MUTANT (rep_op) */                    JS_ASSERT(i != 0);
3682: /* MUTANT (rep_const) */                    JS_ASSERT(i > 1);
3682: /* MUTANT (rep_const) */                    JS_ASSERT(i > -1);
3683: /* MUTANT (del_stmt) */ /*                     ida->vector[--i] = sprop->id; */ 
3683: /* MUTANT (rep_op) */                    ida->vector[++i] = sprop->id;
3691: /* MUTANT (negate) */        if(! (!state)) {
3692: /* MUTANT (del_stmt) */ /*             JS_DestroyIdArray(cx, ida); */ 
3693: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3696: /* MUTANT (del_stmt) */ /*         state->next_index = 0; */ 
3696: /* MUTANT (rep_const) */        state->next_index = 1;
3696: /* MUTANT (rep_const) */        state->next_index = -1;
3698: /* MUTANT (del_stmt) */ /*         JS_LOCK_RUNTIME(rt); */ 
3699: /* MUTANT (del_stmt) */ /*         state->next = rt->nativeIteratorStates; */ 
3700: /* MUTANT (negate) */        if(! (state->next))
3702: /* MUTANT (del_stmt) */ /*         state->prevp = &rt->nativeIteratorStates; */ 
3703: /* MUTANT (del_stmt) */ /*         *state->prevp = state; */ 
3704: /* MUTANT (del_stmt) */ /*         JS_UNLOCK_RUNTIME(rt); */ 
3706: /* MUTANT (del_stmt) */ /*         *statep = PRIVATE_TO_JSVAL(state); */ 
3707: /* MUTANT (negate) */        if(! (idp))
3709: /* MUTANT (del_stmt) */ /*         break; */ 
3713: /* MUTANT (del_stmt) */ /*         ida = state->ida; */ 
3714: /* MUTANT (del_stmt) */ /*         length = ida->length; */ 
3715: /* MUTANT (rep_op) */        if (state->next_index == length) {
3715: /* MUTANT (negate) */        if(! (state->next_index != length)) {
3716: /* MUTANT (del_stmt) */ /*             *idp = ida->vector[state->next_index++]; */ 
3716: /* MUTANT (rep_op) */            *idp = ida->vector[state->next_index--];
3717: /* MUTANT (del_stmt) */ /*             break; */ 
3724: /* MUTANT (del_stmt) */ /*         JS_LOCK_RUNTIME(rt); */ 
3725: /* MUTANT (del_stmt) */ /*         JS_ASSERT(rt->nativeIteratorStates); */ 
3726: /* MUTANT (del_stmt) */ /*         JS_ASSERT(*state->prevp == state); */ 
3726: /* MUTANT (rep_op) */        JS_ASSERT(*state->prevp != state);
3727: /* MUTANT (negate) */        if(! (state->next)) {
3728: /* MUTANT (del_stmt) */ /*             JS_ASSERT(state->next->prevp == &state->next); */ 
3728: /* MUTANT (rep_op) */            JS_ASSERT(state->next->prevp != &state->next);
3729: /* MUTANT (del_stmt) */ /*             state->next->prevp = state->prevp; */ 
3732: /* MUTANT (del_stmt) */ /*         JS_UNLOCK_RUNTIME(rt); */ 
3734: /* MUTANT (del_stmt) */ /*         JS_DestroyIdArray(cx, state->ida); */ 
3735: /* MUTANT (del_stmt) */ /*         JS_free(cx, state); */ 
3736: /* MUTANT (del_stmt) */ /*         *statep = JSVAL_NULL; */ 
3737: /* MUTANT (del_stmt) */ /*         break; */ 
3745: /* MUTANT (del_stmt) */ /*     JSNativeIteratorState *state; */ 
3746: /* MUTANT (del_stmt) */ /*     jsid *cursor, *end, id; */ 
3748: /* MUTANT (del_stmt) */ /*     state = cx->runtime->nativeIteratorStates; */ 
3749: /* MUTANT (negate) */    if(! (!state))
3753: /* MUTANT (del_stmt) */ /*         JS_ASSERT(*state->prevp == state); */ 
3753: /* MUTANT (rep_op) */        JS_ASSERT(*state->prevp != state);
3754: /* MUTANT (del_stmt) */ /*         cursor = state->ida->vector; */ 
3755: /* MUTANT (del_stmt) */ /*         end = cursor + state->ida->length; */ 
3755: /* MUTANT (rep_op) */        end = cursor - state->ida->length;
3755: /* MUTANT (rep_op) */        end = cursor * state->ida->length;
3755: /* MUTANT (rep_op) */        end = cursor % state->ida->length;
3756: /* MUTANT (rep_op) */        for (; cursor == end; ++cursor) {
3756: /* MUTANT (rep_op) */        for (; cursor != end; --cursor) {
3757: /* MUTANT (del_stmt) */ /*             id = *cursor; */ 
3758: /* MUTANT (negate) */            if(! (JSID_IS_ATOM(id))) {
3759: /* MUTANT (del_stmt) */ /*                 GC_MARK_ATOM(cx, JSID_TO_ATOM(id), NULL); */ 
3760: /* MUTANT (negate) */            } else if(! (JSID_IS_OBJECT(id))) {
3761: /* MUTANT (del_stmt) */ /*                 GC_MARK(cx, JSID_TO_OBJECT(id), "ida->vector[i]", NULL); */ 
3764: /* MUTANT (rep_op) */    } while ((state = state->next) == NULL);
3764: /* MUTANT (negate) */    } while(! ((state = state->next) != NULL));
3772: /* MUTANT (del_stmt) */ /*     JSBool writing; */ 
3773: /* MUTANT (del_stmt) */ /*     JSObject *pobj; */ 
3774: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
3775: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
3776: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
3777: /* MUTANT (del_stmt) */ /*     JSCheckAccessOp check; */ 
3779: /* MUTANT (del_stmt) */ /*     writing = (mode & JSACC_WRITE) != 0; */ 
3779: /* MUTANT (rep_op) */    writing = (mode & JSACC_WRITE) == 0;
3779: /* MUTANT (rep_const) */    writing = (mode & JSACC_WRITE) != 1;
3779: /* MUTANT (rep_const) */    writing = (mode & JSACC_WRITE) != -1;
3783: /* MUTANT (negate) */        if(! (!writing))
3785: /* MUTANT (del_stmt) */ /*         *attrsp = JSPROP_PERMANENT; */ 
3786: /* MUTANT (del_stmt) */ /*         break; */ 
3790: /* MUTANT (del_stmt) */ /*         pobj = obj; */ 
3791: /* MUTANT (del_stmt) */ /*         *vp = OBJ_GET_SLOT(cx, obj, JSSLOT_PARENT); */ 
3792: /* MUTANT (del_stmt) */ /*         *attrsp = JSPROP_READONLY | JSPROP_PERMANENT; */ 
3792: /* MUTANT (rep_op) */        *attrsp = JSPROP_READONLY & JSPROP_PERMANENT;
3793: /* MUTANT (del_stmt) */ /*         break; */ 
3796: /* MUTANT (negate) */        if(! (!js_LookupProperty(cx, obj, id, &pobj, &prop)))
3798: /* MUTANT (negate) */        if(! (!prop)) {
3799: /* MUTANT (negate) */            if(! (!writing))
3801: /* MUTANT (del_stmt) */ /*             *attrsp = 0; */ 
3801: /* MUTANT (rep_const) */            *attrsp = 1;
3801: /* MUTANT (rep_const) */            *attrsp = -1;
3802: /* MUTANT (del_stmt) */ /*             clasp = OBJ_GET_CLASS(cx, obj); */ 
3803: /* MUTANT (rep_op) */            return !clasp->checkAccess &&
3806: /* MUTANT (negate) */        if(! (!OBJ_IS_NATIVE(pobj))) {
3807: /* MUTANT (del_stmt) */ /*             OBJ_DROP_PROPERTY(cx, pobj, prop); */ 
3808: /* MUTANT (del_stmt) */ /*             return OBJ_CHECK_ACCESS(cx, pobj, id, mode, vp, attrsp); */ 
3812: /* MUTANT (del_stmt) */ /*         *attrsp = sprop->attrs; */ 
3813: /* MUTANT (negate) */        if(! (!writing)) {
3834: /* MUTANT (del_stmt) */ /*     check = clasp->checkAccess; */ 
3835: /* MUTANT (negate) */    if(! (!check))
3837: /* MUTANT (del_stmt) */ /*     return !check || check(cx, pobj, ID_TO_VALUE(id), mode, vp); */ 
3837: /* MUTANT (rep_op) */    return !check && check(cx, pobj, ID_TO_VALUE(id), mode, vp);
3844: /* MUTANT (del_stmt) */ /*     JS_UNLOCK_OBJ(cx, obj); */ 
3858: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp = cx->fp; */ 
3859: /* MUTANT (negate) */    if(! (fp->down)) {
3860: /* MUTANT (del_stmt) */ /*         JS_ASSERT(!fp->dormantNext); */ 
3861: /* MUTANT (del_stmt) */ /*         fp->dormantNext = cx->dormantFrameChain; */ 
3862: /* MUTANT (del_stmt) */ /*         cx->dormantFrameChain = fp; */ 
3863: /* MUTANT (del_stmt) */ /*         cx->fp = fp->down; */ 
3868: /* MUTANT (negate) */    if(! (fp->down)) {
3869: /* MUTANT (del_stmt) */ /*         JS_ASSERT(cx->dormantFrameChain == fp); */ 
3869: /* MUTANT (rep_op) */        JS_ASSERT(cx->dormantFrameChain != fp);
3870: /* MUTANT (del_stmt) */ /*         cx->dormantFrameChain = fp->dormantNext; */ 
3871: /* MUTANT (del_stmt) */ /*         fp->dormantNext = NULL; */ 
3872: /* MUTANT (del_stmt) */ /*         cx->fp = fp; */ 
3880: /* MUTANT (del_stmt) */ /*     JSObject *tmp; */ 
3881: /* MUTANT (del_stmt) */ /*     jsval xcval; */ 
3883: /* MUTANT (rep_op) */    while ((tmp = OBJ_GET_PARENT(cx, obj)) == NULL)
3883: /* MUTANT (negate) */    while(! ((tmp = OBJ_GET_PARENT(cx, obj)) != NULL))
3889: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3891: /* MUTANT (negate) */    if(! (JSVAL_IS_PRIMITIVE(xcval))) {
3892: /* MUTANT (del_stmt) */ /*         JS_ReportError(cx, "invalid ExecutionContext in global object"); */ 
3893: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3898: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3907: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
3909: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[-2])); */ 
3909: /* MUTANT (rep_const) */    clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[0]));
3909: /* MUTANT (rep_const) */    clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[1]));
3909: /* MUTANT (rep_const) */    clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[-1]));
3909: /* MUTANT (rep_const) */    clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[((-2)+1)]));
3909: /* MUTANT (rep_const) */    clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[((-2)-1)]));
3910: /* MUTANT (negate) */    if(! (!clasp->call)) {
3913: /* MUTANT (del_stmt) */ /*         jsval fval, nargv[3]; */ 
3913: /* MUTANT (rep_const) */        jsval fval, nargv[0];
3913: /* MUTANT (rep_const) */        jsval fval, nargv[1];
3913: /* MUTANT (rep_const) */        jsval fval, nargv[-1];
3913: /* MUTANT (rep_const) */        jsval fval, nargv[((3)+1)];
3913: /* MUTANT (rep_const) */        jsval fval, nargv[((3)-1)];
3914: /* MUTANT (del_stmt) */ /*         JSBool ok; */ 
3916: /* MUTANT (del_stmt) */ /*         callee = JSVAL_TO_OBJECT(argv[-2]); */ 
3916: /* MUTANT (rep_const) */        callee = JSVAL_TO_OBJECT(argv[0]);
3916: /* MUTANT (rep_const) */        callee = JSVAL_TO_OBJECT(argv[1]);
3916: /* MUTANT (rep_const) */        callee = JSVAL_TO_OBJECT(argv[-1]);
3916: /* MUTANT (rep_const) */        callee = JSVAL_TO_OBJECT(argv[((-2)+1)]);
3916: /* MUTANT (rep_const) */        callee = JSVAL_TO_OBJECT(argv[((-2)-1)]);
3920: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3922: /* MUTANT (negate) */        if(! (JSVAL_IS_FUNCTION(cx, fval))) {
3923: /* MUTANT (rep_const) */            if (!GetCurrentExecutionContext(cx, obj, &nargv[0]))
3923: /* MUTANT (rep_const) */            if (!GetCurrentExecutionContext(cx, obj, &nargv[1]))
3923: /* MUTANT (rep_const) */            if (!GetCurrentExecutionContext(cx, obj, &nargv[-1]))
3923: /* MUTANT (rep_const) */            if (!GetCurrentExecutionContext(cx, obj, &nargv[((2)+1)]))
3923: /* MUTANT (rep_const) */            if (!GetCurrentExecutionContext(cx, obj, &nargv[((2)-1)]))
3923: /* MUTANT (negate) */            if(! (!GetCurrentExecutionContext(cx, obj, &nargv[2])))
3925: /* MUTANT (del_stmt) */ /*             args = js_GetArgsObject(cx, cx->fp); */ 
3926: /* MUTANT (negate) */            if(! (!args))
3928: /* MUTANT (del_stmt) */ /*             nargv[0] = OBJECT_TO_JSVAL(obj); */ 
3928: /* MUTANT (rep_const) */            nargv[1] = OBJECT_TO_JSVAL(obj);
3928: /* MUTANT (rep_const) */            nargv[-1] = OBJECT_TO_JSVAL(obj);
3929: /* MUTANT (del_stmt) */ /*             nargv[1] = OBJECT_TO_JSVAL(args); */ 
3929: /* MUTANT (rep_const) */            nargv[0] = OBJECT_TO_JSVAL(args);
3929: /* MUTANT (rep_const) */            nargv[-1] = OBJECT_TO_JSVAL(args);
3929: /* MUTANT (rep_const) */            nargv[((1)+1)] = OBJECT_TO_JSVAL(args);
3930: /* MUTANT (del_stmt) */ /*             return js_InternalCall(cx, callee, fval, 3, nargv, rval); */ 
3930: /* MUTANT (rep_const) */            return js_InternalCall(cx, callee, fval, 0, nargv, rval);
3930: /* MUTANT (rep_const) */            return js_InternalCall(cx, callee, fval, 1, nargv, rval);
3930: /* MUTANT (rep_const) */            return js_InternalCall(cx, callee, fval, -1, nargv, rval);
3930: /* MUTANT (rep_const) */            return js_InternalCall(cx, callee, fval, ((3)+1), nargv, rval);
3930: /* MUTANT (rep_const) */            return js_InternalCall(cx, callee, fval, ((3)-1), nargv, rval);
3932: /* MUTANT (rep_op) */        if (JSVAL_IS_OBJECT(fval) || JSVAL_TO_OBJECT(fval) != callee) {
3932: /* MUTANT (rep_op) */        if (JSVAL_IS_OBJECT(fval) && JSVAL_TO_OBJECT(fval) == callee) {
3932: /* MUTANT (negate) */        if(! (JSVAL_IS_OBJECT(fval) && JSVAL_TO_OBJECT(fval) != callee)) {
3933: /* MUTANT (del_stmt) */ /*             argv[-2] = fval; */ 
3933: /* MUTANT (rep_const) */            argv[0] = fval;
3933: /* MUTANT (rep_const) */            argv[1] = fval;
3933: /* MUTANT (rep_const) */            argv[-1] = fval;
3933: /* MUTANT (rep_const) */            argv[((-2)+1)] = fval;
3933: /* MUTANT (rep_const) */            argv[((-2)-1)] = fval;
3934: /* MUTANT (del_stmt) */ /*             ok = js_Call(cx, obj, argc, argv, rval); */ 
3935: /* MUTANT (del_stmt) */ /*             argv[-2] = OBJECT_TO_JSVAL(callee); */ 
3935: /* MUTANT (rep_const) */            argv[0] = OBJECT_TO_JSVAL(callee);
3935: /* MUTANT (rep_const) */            argv[1] = OBJECT_TO_JSVAL(callee);
3935: /* MUTANT (rep_const) */            argv[-1] = OBJECT_TO_JSVAL(callee);
3935: /* MUTANT (rep_const) */            argv[((-2)+1)] = OBJECT_TO_JSVAL(callee);
3935: /* MUTANT (rep_const) */            argv[((-2)-1)] = OBJECT_TO_JSVAL(callee);
3936: /* MUTANT (del_stmt) */ /*             return ok; */ 
3939: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[0], 0);
3939: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[1], 0);
3939: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[-1], 0);
3939: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[((-2)+1)], 0);
3939: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[((-2)-1)], 0);
3939: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[-2], 1);
3939: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[-2], -1);
3940: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3949: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
3951: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[-2])); */ 
3951: /* MUTANT (rep_const) */    clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[0]));
3951: /* MUTANT (rep_const) */    clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[1]));
3951: /* MUTANT (rep_const) */    clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[-1]));
3951: /* MUTANT (rep_const) */    clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[((-2)+1)]));
3951: /* MUTANT (rep_const) */    clasp = OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(argv[((-2)-1)]));
3952: /* MUTANT (negate) */    if(! (!clasp->construct)) {
3955: /* MUTANT (del_stmt) */ /*         jsval cval, nargv[2]; */ 
3955: /* MUTANT (rep_const) */        jsval cval, nargv[0];
3955: /* MUTANT (rep_const) */        jsval cval, nargv[1];
3955: /* MUTANT (rep_const) */        jsval cval, nargv[-1];
3955: /* MUTANT (rep_const) */        jsval cval, nargv[((2)+1)];
3955: /* MUTANT (rep_const) */        jsval cval, nargv[((2)-1)];
3956: /* MUTANT (del_stmt) */ /*         JSBool ok; */ 
3958: /* MUTANT (del_stmt) */ /*         callee = JSVAL_TO_OBJECT(argv[-2]); */ 
3958: /* MUTANT (rep_const) */        callee = JSVAL_TO_OBJECT(argv[0]);
3958: /* MUTANT (rep_const) */        callee = JSVAL_TO_OBJECT(argv[1]);
3958: /* MUTANT (rep_const) */        callee = JSVAL_TO_OBJECT(argv[-1]);
3958: /* MUTANT (rep_const) */        callee = JSVAL_TO_OBJECT(argv[((-2)+1)]);
3958: /* MUTANT (rep_const) */        callee = JSVAL_TO_OBJECT(argv[((-2)-1)]);
3963: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3965: /* MUTANT (negate) */        if(! (JSVAL_IS_FUNCTION(cx, cval))) {
3966: /* MUTANT (rep_const) */            if (!GetCurrentExecutionContext(cx, obj, &nargv[0]))
3966: /* MUTANT (rep_const) */            if (!GetCurrentExecutionContext(cx, obj, &nargv[-1]))
3966: /* MUTANT (rep_const) */            if (!GetCurrentExecutionContext(cx, obj, &nargv[((1)+1)]))
3966: /* MUTANT (negate) */            if(! (!GetCurrentExecutionContext(cx, obj, &nargv[1])))
3968: /* MUTANT (del_stmt) */ /*             args = js_GetArgsObject(cx, cx->fp); */ 
3969: /* MUTANT (negate) */            if(! (!args))
3971: /* MUTANT (del_stmt) */ /*             nargv[0] = OBJECT_TO_JSVAL(args); */ 
3971: /* MUTANT (rep_const) */            nargv[1] = OBJECT_TO_JSVAL(args);
3971: /* MUTANT (rep_const) */            nargv[-1] = OBJECT_TO_JSVAL(args);
3972: /* MUTANT (del_stmt) */ /*             return js_InternalCall(cx, callee, cval, 2, nargv, rval); */ 
3972: /* MUTANT (rep_const) */            return js_InternalCall(cx, callee, cval, 0, nargv, rval);
3972: /* MUTANT (rep_const) */            return js_InternalCall(cx, callee, cval, 1, nargv, rval);
3972: /* MUTANT (rep_const) */            return js_InternalCall(cx, callee, cval, -1, nargv, rval);
3972: /* MUTANT (rep_const) */            return js_InternalCall(cx, callee, cval, ((2)+1), nargv, rval);
3972: /* MUTANT (rep_const) */            return js_InternalCall(cx, callee, cval, ((2)-1), nargv, rval);
3974: /* MUTANT (rep_op) */        if (JSVAL_IS_OBJECT(cval) || JSVAL_TO_OBJECT(cval) != callee) {
3974: /* MUTANT (rep_op) */        if (JSVAL_IS_OBJECT(cval) && JSVAL_TO_OBJECT(cval) == callee) {
3974: /* MUTANT (negate) */        if(! (JSVAL_IS_OBJECT(cval) && JSVAL_TO_OBJECT(cval) != callee)) {
3975: /* MUTANT (del_stmt) */ /*             argv[-2] = cval; */ 
3975: /* MUTANT (rep_const) */            argv[0] = cval;
3975: /* MUTANT (rep_const) */            argv[1] = cval;
3975: /* MUTANT (rep_const) */            argv[-1] = cval;
3975: /* MUTANT (rep_const) */            argv[((-2)+1)] = cval;
3975: /* MUTANT (rep_const) */            argv[((-2)-1)] = cval;
3976: /* MUTANT (del_stmt) */ /*             ok = js_Call(cx, obj, argc, argv, rval); */ 
3977: /* MUTANT (del_stmt) */ /*             argv[-2] = OBJECT_TO_JSVAL(callee); */ 
3977: /* MUTANT (rep_const) */            argv[0] = OBJECT_TO_JSVAL(callee);
3977: /* MUTANT (rep_const) */            argv[1] = OBJECT_TO_JSVAL(callee);
3977: /* MUTANT (rep_const) */            argv[-1] = OBJECT_TO_JSVAL(callee);
3977: /* MUTANT (rep_const) */            argv[((-2)+1)] = OBJECT_TO_JSVAL(callee);
3977: /* MUTANT (rep_const) */            argv[((-2)-1)] = OBJECT_TO_JSVAL(callee);
3978: /* MUTANT (del_stmt) */ /*             return ok; */ 
3981: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[0], JSV2F_CONSTRUCT);
3981: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[1], JSV2F_CONSTRUCT);
3981: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[-1], JSV2F_CONSTRUCT);
3981: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[((-2)+1)], JSV2F_CONSTRUCT);
3981: /* MUTANT (rep_const) */        ReportIsNotFunction(cx, &argv[((-2)-1)], JSV2F_CONSTRUCT);
3982: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3990: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
3991: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
3993: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, obj); */ 
3994: /* MUTANT (negate) */    if(! (clasp->hasInstance))
3998: /* MUTANT (del_stmt) */ /*         jsval fval, rval; */ 
4004: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
4006: /* MUTANT (negate) */        if(! (JSVAL_IS_FUNCTION(cx, fval))) {
4007: /* MUTANT (rep_op) */            return js_InternalCall(cx, obj, fval, 1, &v, &rval) ||
4007: /* MUTANT (rep_const) */            return js_InternalCall(cx, obj, fval, 0, &v, &rval) &&
4007: /* MUTANT (rep_const) */            return js_InternalCall(cx, obj, fval, -1, &v, &rval) &&
4007: /* MUTANT (rep_const) */            return js_InternalCall(cx, obj, fval, ((1)+1), &v, &rval) &&
4014: /* MUTANT (negate) */    if(! (str)) {
4025: /* MUTANT (del_stmt) */ /*     JSObject *obj2; */ 
4027: /* MUTANT (del_stmt) */ /*     *bp = JS_FALSE; */ 
4028: /* MUTANT (negate) */    if(! (JSVAL_IS_PRIMITIVE(v)))
4030: /* MUTANT (del_stmt) */ /*     obj2 = JSVAL_TO_OBJECT(v); */ 
4031: /* MUTANT (rep_op) */    while ((obj2 = OBJ_GET_PROTO(cx, obj2)) == NULL) {
4031: /* MUTANT (negate) */    while(! ((obj2 = OBJ_GET_PROTO(cx, obj2)) != NULL)) {
4032: /* MUTANT (rep_op) */        if (obj2 != obj) {
4032: /* MUTANT (negate) */        if(! (obj2 == obj)) {
4033: /* MUTANT (del_stmt) */ /*             *bp = JS_TRUE; */ 
4034: /* MUTANT (del_stmt) */ /*             break; */ 
4043: /* MUTANT (del_stmt) */ /*     return GetClassPrototype(cx, NULL, name, protop); */ 
4050: /* MUTANT (del_stmt) */ /*     jsval v; */ 
4051: /* MUTANT (del_stmt) */ /*     JSObject *ctor; */ 
4053: /* MUTANT (negate) */    if(! (!js_FindConstructor(cx, scope, name, &v)))
4055: /* MUTANT (negate) */    if(! (JSVAL_IS_FUNCTION(cx, v))) {
4056: /* MUTANT (del_stmt) */ /*         ctor = JSVAL_TO_OBJECT(v); */ 
4061: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
4063: /* MUTANT (negate) */        if(! (!JSVAL_IS_PRIMITIVE(v))) {
4073: /* MUTANT (del_stmt) */ /*             cx->newborn[GCX_OBJECT] = JSVAL_TO_GCTHING(v); */ 
4077: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
4098: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
4099: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
4101: /* MUTANT (del_stmt) */ /*     atom = cx->runtime->atomState.constructorAtom; */ 
4102: /* MUTANT (del_stmt) */ /*     JS_ASSERT(id == ATOM_KEY(atom)); */ 
4102: /* MUTANT (rep_op) */    JS_ASSERT(id != ATOM_KEY(atom));
4110: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
4111: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
4113: /* MUTANT (del_stmt) */ /*     atom = cx->runtime->atomState.constructorAtom; */ 
4114: /* MUTANT (del_stmt) */ /*     JS_ASSERT(id == ATOM_KEY(atom)); */ 
4114: /* MUTANT (rep_op) */    JS_ASSERT(id != ATOM_KEY(atom));
4135: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
4147: /* MUTANT (rep_const) */                               1, NULL);
4147: /* MUTANT (rep_const) */                               -1, NULL);
4153: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
4155: /* MUTANT (rep_op) */    if (JSVAL_IS_NULL(v) && JSVAL_IS_VOID(v)) {
4155: /* MUTANT (negate) */    if(! (JSVAL_IS_NULL(v) || JSVAL_IS_VOID(v))) {
4156: /* MUTANT (del_stmt) */ /*         obj = NULL; */ 
4157: /* MUTANT (negate) */    } else if(! (JSVAL_IS_OBJECT(v))) {
4158: /* MUTANT (del_stmt) */ /*         obj = JSVAL_TO_OBJECT(v); */ 
4159: /* MUTANT (negate) */        if(! (!OBJ_DEFAULT_VALUE(cx, obj, JSTYPE_OBJECT, &v)))
4161: /* MUTANT (negate) */        if(! (JSVAL_IS_OBJECT(v)))
4164: /* MUTANT (negate) */        if(! (JSVAL_IS_STRING(v))) {
4165: /* MUTANT (del_stmt) */ /*             obj = js_StringToObject(cx, JSVAL_TO_STRING(v)); */ 
4166: /* MUTANT (negate) */        } else if(! (JSVAL_IS_INT(v))) {
4167: /* MUTANT (del_stmt) */ /*             obj = js_NumberToObject(cx, (jsdouble)JSVAL_TO_INT(v)); */ 
4168: /* MUTANT (negate) */        } else if(! (JSVAL_IS_DOUBLE(v))) {
4169: /* MUTANT (del_stmt) */ /*             obj = js_NumberToObject(cx, *JSVAL_TO_DOUBLE(v)); */ 
4171: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSVAL_IS_BOOLEAN(v)); */ 
4172: /* MUTANT (del_stmt) */ /*             obj = js_BooleanToObject(cx, JSVAL_TO_BOOLEAN(v)); */ 
4174: /* MUTANT (negate) */        if(! (!obj))
4178: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
4184: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
4185: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
4187: /* MUTANT (negate) */    if(! (!js_ValueToObject(cx, v, &obj)))
4189: /* MUTANT (negate) */    if(! (!obj)) {
4190: /* MUTANT (del_stmt) */ /*         str = js_DecompileValueGenerator(cx, JSDVG_SEARCH_STACK, v, NULL); */ 
4191: /* MUTANT (negate) */        if(! (str)) {
4203: /* MUTANT (rep_const) */    jsval argv[0];
4203: /* MUTANT (rep_const) */    jsval argv[-1];
4203: /* MUTANT (rep_const) */    jsval argv[((1)+1)];
4205: /* MUTANT (del_stmt) */ /*     argv[0] = ATOM_KEY(cx->runtime->atomState.typeAtoms[type]); */ 
4205: /* MUTANT (rep_const) */    argv[1] = ATOM_KEY(cx->runtime->atomState.typeAtoms[type]);
4205: /* MUTANT (rep_const) */    argv[-1] = ATOM_KEY(cx->runtime->atomState.typeAtoms[type]);
4206: /* MUTANT (rep_const) */    return js_TryMethod(cx, obj, cx->runtime->atomState.valueOfAtom, 0, argv,
4206: /* MUTANT (rep_const) */    return js_TryMethod(cx, obj, cx->runtime->atomState.valueOfAtom, -1, argv,
4206: /* MUTANT (rep_const) */    return js_TryMethod(cx, obj, cx->runtime->atomState.valueOfAtom, ((1)+1), argv,
4209: /* MUTANT (rep_const) */    return js_TryMethod(cx, obj, cx->runtime->atomState.valueOfAtom, 1, NULL,
4209: /* MUTANT (rep_const) */    return js_TryMethod(cx, obj, cx->runtime->atomState.valueOfAtom, -1, NULL,
4218: /* MUTANT (del_stmt) */ /*     JSErrorReporter older; */ 
4219: /* MUTANT (del_stmt) */ /*     jsid id; */ 
4220: /* MUTANT (del_stmt) */ /*     jsval fval; */ 
4221: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
4222: /* MUTANT (del_stmt) */ /*     int stackDummy; */ 
4224: /* MUTANT (negate) */    if(! (!JS_CHECK_STACK_SIZE(cx, stackDummy))) {
4225: /* MUTANT (del_stmt) */ /*         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_OVER_RECURSED); */ 
4226: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
4235: /* MUTANT (del_stmt) */ /*     id = ATOM_TO_JSID(atom); */ 
4236: /* MUTANT (del_stmt) */ /*     fval = JSVAL_VOID; */ 
4238: /* MUTANT (negate) */    if(! (OBJECT_IS_XML(cx, obj))) {
4239: /* MUTANT (del_stmt) */ /*         JSXMLObjectOps *ops; */ 
4241: /* MUTANT (del_stmt) */ /*         ops = (JSXMLObjectOps *) obj->map->ops; */ 
4242: /* MUTANT (del_stmt) */ /*         obj = ops->getMethod(cx, obj, id, &fval); */ 
4243: /* MUTANT (del_stmt) */ /*         ok = (obj != NULL); */ 
4243: /* MUTANT (rep_op) */        ok = (obj == NULL);
4247: /* MUTANT (del_stmt) */ /*         ok = OBJ_GET_PROPERTY(cx, obj, id, &fval); */ 
4249: /* MUTANT (negate) */    if(! (!ok))
4251: /* MUTANT (rep_op) */    ok = JSVAL_IS_PRIMITIVE(fval) &&
4253: /* MUTANT (del_stmt) */ /*     JS_SetErrorReporter(cx, older); */ 
4254: /* MUTANT (del_stmt) */ /*     return ok; */ 
4264: /* MUTANT (del_stmt) */ /*     JSContext *cx; */ 
4265: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
4266: /* MUTANT (del_stmt) */ /*     const char *className; */ 
4267: /* MUTANT (del_stmt) */ /*     uint32 classId, classDef; */ 
4268: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
4269: /* MUTANT (del_stmt) */ /*     JSObject *proto; */ 
4271: /* MUTANT (del_stmt) */ /*     cx = xdr->cx; */ 
4272: /* MUTANT (rep_op) */    if (xdr->mode != JSXDR_ENCODE) {
4272: /* MUTANT (negate) */    if(! (xdr->mode == JSXDR_ENCODE)) {
4273: /* MUTANT (del_stmt) */ /*         clasp = OBJ_GET_CLASS(cx, *objp); */ 
4274: /* MUTANT (del_stmt) */ /*         className = clasp->name; */ 
4275: /* MUTANT (del_stmt) */ /*         classId = JS_XDRFindClassIdByName(xdr, className); */ 
4276: /* MUTANT (del_stmt) */ /*         classDef = !classId; */ 
4277: /* MUTANT (rep_op) */        if (classDef || !JS_XDRRegisterClass(xdr, clasp, &classId))
4277: /* MUTANT (negate) */        if(! (classDef && !JS_XDRRegisterClass(xdr, clasp, &classId)))
4280: /* MUTANT (del_stmt) */ /*         classDef = 0; */ 
4280: /* MUTANT (rep_const) */        classDef = 1;
4280: /* MUTANT (rep_const) */        classDef = -1;
4281: /* MUTANT (del_stmt) */ /*         className = NULL; */ 
4282: /* MUTANT (del_stmt) */ /*         clasp = NULL; */            /* quell GCC overwarning */
4286: /* MUTANT (negate) */    if(! (!JS_XDRUint32(xdr, &classDef)))
4288: /* MUTANT (rep_op) */    if (classDef || !JS_XDRCString(xdr, (char **) &className))
4288: /* MUTANT (negate) */    if(! (classDef && !JS_XDRCString(xdr, (char **) &className)))
4292: /* MUTANT (del_stmt) */ /*     ok = JS_XDRUint32(xdr, &classId); */ 
4293: /* MUTANT (negate) */    if(! (!ok))
4296: /* MUTANT (rep_op) */    if (xdr->mode == JSXDR_ENCODE) {
4296: /* MUTANT (negate) */    if(! (xdr->mode != JSXDR_ENCODE)) {
4297: /* MUTANT (negate) */        if(! (classDef)) {
4298: /* MUTANT (del_stmt) */ /*             ok = GetClassPrototype(cx, NULL, className, &proto); */ 
4299: /* MUTANT (negate) */            if(! (!ok))
4301: /* MUTANT (del_stmt) */ /*             clasp = OBJ_GET_CLASS(cx, proto); */ 
4302: /* MUTANT (del_stmt) */ /*             ok = JS_XDRRegisterClass(xdr, clasp, &classId); */ 
4303: /* MUTANT (negate) */            if(! (!ok))
4306: /* MUTANT (del_stmt) */ /*             clasp = JS_XDRFindClassById(xdr, classId); */ 
4307: /* MUTANT (negate) */            if(! (!clasp)) {
4308: /* MUTANT (del_stmt) */ /*                 char numBuf[12]; */ 
4308: /* MUTANT (rep_const) */                char numBuf[0];
4308: /* MUTANT (rep_const) */                char numBuf[1];
4308: /* MUTANT (rep_const) */                char numBuf[-1];
4308: /* MUTANT (rep_const) */                char numBuf[((12)+1)];
4308: /* MUTANT (rep_const) */                char numBuf[((12)-1)];
4309: /* MUTANT (del_stmt) */ /*                 JS_snprintf(numBuf, sizeof numBuf, "%ld", (long)classId); */ 
4312: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
4313: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4318: /* MUTANT (negate) */    if(! (!clasp->xdrObject)) {
4321: /* MUTANT (del_stmt) */ /*         ok = JS_FALSE; */ 
4323: /* MUTANT (del_stmt) */ /*         ok = clasp->xdrObject(xdr, objp); */ 
4326: /* MUTANT (rep_op) */    if (xdr->mode == JSXDR_ENCODE && className)
4326: /* MUTANT (rep_op) */    if (xdr->mode != JSXDR_ENCODE || className)
4326: /* MUTANT (negate) */    if(! (xdr->mode != JSXDR_ENCODE && className))
4328: /* MUTANT (del_stmt) */ /*     return ok; */ 
4339: /* MUTANT (del_stmt) */ /* uint32 js_entry_count_sum; */ 
4340: /* MUTANT (del_stmt) */ /* double js_entry_count_sqsum; */ 
4341: /* MUTANT (del_stmt) */ /* uint32 js_entry_count_hist[11]; */ 
4341: /* MUTANT (rep_const) */uint32 js_entry_count_hist[0];
4341: /* MUTANT (rep_const) */uint32 js_entry_count_hist[1];
4341: /* MUTANT (rep_const) */uint32 js_entry_count_hist[-1];
4341: /* MUTANT (rep_const) */uint32 js_entry_count_hist[((11)+1)];
4341: /* MUTANT (rep_const) */uint32 js_entry_count_hist[((11)-1)];
4346: /* MUTANT (negate) */    if(! (count)) {
4347: /* MUTANT (del_stmt) */ /*         js_entry_count_sum += count; */ 
4347: /* MUTANT (rep_op) */        js_entry_count_sum -= count;
4347: /* MUTANT (rep_op) */        js_entry_count_sum *= count;
4347: /* MUTANT (rep_op) */        js_entry_count_sum %= count;
4348: /* MUTANT (del_stmt) */ /*         js_entry_count_sqsum += (double)count * count; */ 
4348: /* MUTANT (rep_op) */        js_entry_count_sqsum -= (double)count * count;
4348: /* MUTANT (rep_op) */        js_entry_count_sqsum *= (double)count * count;
4348: /* MUTANT (rep_op) */        js_entry_count_sqsum %= (double)count * count;
4349: /* MUTANT (rep_op) */        if (count <= js_entry_count_max)
4349: /* MUTANT (rep_op) */        if (count < js_entry_count_max)
4349: /* MUTANT (rep_op) */        if (count >= js_entry_count_max)
4349: /* MUTANT (rep_op) */        if (count == js_entry_count_max)
4349: /* MUTANT (rep_op) */        if (count != js_entry_count_max)
4349: /* MUTANT (negate) */        if(! (count > js_entry_count_max))
4352: /* MUTANT (rep_op) */    js_entry_count_hist[JS_MIN(count, 10)]--;
4352: /* MUTANT (rep_const) */    js_entry_count_hist[JS_MIN(count, 0)]++;
4352: /* MUTANT (rep_const) */    js_entry_count_hist[JS_MIN(count, 1)]++;
4352: /* MUTANT (rep_const) */    js_entry_count_hist[JS_MIN(count, -1)]++;
4352: /* MUTANT (rep_const) */    js_entry_count_hist[JS_MIN(count, ((10)+1))]++;
4352: /* MUTANT (rep_const) */    js_entry_count_hist[JS_MIN(count, ((10)-1))]++;
4358: /* MUTANT (del_stmt) */ /*     static FILE *logfp; */ 
4359: /* MUTANT (negate) */    if(! (!logfp))
4363: /* MUTANT (del_stmt) */ /*         double mean = 0., var = 0., sigma = 0.; */ 
4364: /* MUTANT (del_stmt) */ /*         double nscopes = rt->liveScopes; */ 
4365: /* MUTANT (del_stmt) */ /*         double nentrys = js_entry_count_sum; */ 
4366: /* MUTANT (rep_op) */        if (nscopes <= 0 && nentrys >= 0) {
4366: /* MUTANT (rep_op) */        if (nscopes < 0 && nentrys >= 0) {
4366: /* MUTANT (rep_op) */        if (nscopes >= 0 && nentrys >= 0) {
4366: /* MUTANT (rep_op) */        if (nscopes == 0 && nentrys >= 0) {
4366: /* MUTANT (rep_op) */        if (nscopes != 0 && nentrys >= 0) {
4366: /* MUTANT (rep_op) */        if (nscopes > 0 || nentrys >= 0) {
4366: /* MUTANT (rep_op) */        if (nscopes > 0 && nentrys <= 0) {
4366: /* MUTANT (rep_op) */        if (nscopes > 0 && nentrys < 0) {
4366: /* MUTANT (rep_op) */        if (nscopes > 0 && nentrys > 0) {
4366: /* MUTANT (rep_op) */        if (nscopes > 0 && nentrys == 0) {
4366: /* MUTANT (rep_op) */        if (nscopes > 0 && nentrys != 0) {
4366: /* MUTANT (rep_const) */        if (nscopes > 1 && nentrys >= 0) {
4366: /* MUTANT (rep_const) */        if (nscopes > -1 && nentrys >= 0) {
4366: /* MUTANT (rep_const) */        if (nscopes > 0 && nentrys >= 1) {
4366: /* MUTANT (rep_const) */        if (nscopes > 0 && nentrys >= -1) {
4366: /* MUTANT (negate) */        if(! (nscopes > 0 && nentrys >= 0)) {
4367: /* MUTANT (del_stmt) */ /*             mean = nentrys / nscopes; */ 
4368: /* MUTANT (del_stmt) */ /*             var = nscopes * js_entry_count_sqsum - nentrys * nentrys; */ 
4369: /* MUTANT (rep_op) */            if (var <= 0.0 || nscopes <= 1)
4369: /* MUTANT (rep_op) */            if (var > 0.0 || nscopes <= 1)
4369: /* MUTANT (rep_op) */            if (var >= 0.0 || nscopes <= 1)
4369: /* MUTANT (rep_op) */            if (var == 0.0 || nscopes <= 1)
4369: /* MUTANT (rep_op) */            if (var != 0.0 || nscopes <= 1)
4369: /* MUTANT (rep_op) */            if (var < 0.0 && nscopes <= 1)
4369: /* MUTANT (rep_op) */            if (var < 0.0 || nscopes < 1)
4369: /* MUTANT (rep_op) */            if (var < 0.0 || nscopes > 1)
4369: /* MUTANT (rep_op) */            if (var < 0.0 || nscopes >= 1)
4369: /* MUTANT (rep_op) */            if (var < 0.0 || nscopes == 1)
4369: /* MUTANT (rep_op) */            if (var < 0.0 || nscopes != 1)
4369: /* MUTANT (rep_const) */            if (var < 0.1 || nscopes <= 1)
4369: /* MUTANT (rep_const) */            if (var < 0.-1 || nscopes <= 1)
4369: /* MUTANT (rep_const) */            if (var < 0.0 || nscopes <= 0)
4369: /* MUTANT (rep_const) */            if (var < 0.0 || nscopes <= -1)
4369: /* MUTANT (rep_const) */            if (var < 0.0 || nscopes <= ((1)+1))
4369: /* MUTANT (negate) */            if(! (var < 0.0 || nscopes <= 1))
4370: /* MUTANT (rep_const) */                var = 0.1;
4370: /* MUTANT (rep_const) */                var = 0.-1;
4372: /* MUTANT (rep_const) */                var /= nscopes * (nscopes - 0);
4372: /* MUTANT (rep_const) */                var /= nscopes * (nscopes - -1);
4372: /* MUTANT (rep_const) */                var /= nscopes * (nscopes - ((1)+1));
4375: /* MUTANT (del_stmt) */ /*             sigma = (var != 0.) ? sqrt(var) : 0.; */ 
4375: /* MUTANT (rep_op) */            sigma = (var == 0.) ? sqrt(var) : 0.;
4384: /* MUTANT (rep_const) */            js_entry_count_hist[1], js_entry_count_hist[1],
4384: /* MUTANT (rep_const) */            js_entry_count_hist[-1], js_entry_count_hist[1],
4384: /* MUTANT (rep_const) */            js_entry_count_hist[0], js_entry_count_hist[0],
4384: /* MUTANT (rep_const) */            js_entry_count_hist[0], js_entry_count_hist[-1],
4384: /* MUTANT (rep_const) */            js_entry_count_hist[0], js_entry_count_hist[((1)+1)],
4385: /* MUTANT (rep_const) */            js_entry_count_hist[0], js_entry_count_hist[3],
4385: /* MUTANT (rep_const) */            js_entry_count_hist[1], js_entry_count_hist[3],
4385: /* MUTANT (rep_const) */            js_entry_count_hist[-1], js_entry_count_hist[3],
4385: /* MUTANT (rep_const) */            js_entry_count_hist[((2)+1)], js_entry_count_hist[3],
4385: /* MUTANT (rep_const) */            js_entry_count_hist[((2)-1)], js_entry_count_hist[3],
4385: /* MUTANT (rep_const) */            js_entry_count_hist[2], js_entry_count_hist[0],
4385: /* MUTANT (rep_const) */            js_entry_count_hist[2], js_entry_count_hist[1],
4385: /* MUTANT (rep_const) */            js_entry_count_hist[2], js_entry_count_hist[-1],
4385: /* MUTANT (rep_const) */            js_entry_count_hist[2], js_entry_count_hist[((3)+1)],
4385: /* MUTANT (rep_const) */            js_entry_count_hist[2], js_entry_count_hist[((3)-1)],
4386: /* MUTANT (rep_const) */            js_entry_count_hist[0], js_entry_count_hist[5],
4386: /* MUTANT (rep_const) */            js_entry_count_hist[1], js_entry_count_hist[5],
4386: /* MUTANT (rep_const) */            js_entry_count_hist[-1], js_entry_count_hist[5],
4386: /* MUTANT (rep_const) */            js_entry_count_hist[((4)+1)], js_entry_count_hist[5],
4386: /* MUTANT (rep_const) */            js_entry_count_hist[((4)-1)], js_entry_count_hist[5],
4386: /* MUTANT (rep_const) */            js_entry_count_hist[4], js_entry_count_hist[0],
4386: /* MUTANT (rep_const) */            js_entry_count_hist[4], js_entry_count_hist[1],
4386: /* MUTANT (rep_const) */            js_entry_count_hist[4], js_entry_count_hist[-1],
4386: /* MUTANT (rep_const) */            js_entry_count_hist[4], js_entry_count_hist[((5)+1)],
4386: /* MUTANT (rep_const) */            js_entry_count_hist[4], js_entry_count_hist[((5)-1)],
4387: /* MUTANT (rep_const) */            js_entry_count_hist[0], js_entry_count_hist[7],
4387: /* MUTANT (rep_const) */            js_entry_count_hist[1], js_entry_count_hist[7],
4387: /* MUTANT (rep_const) */            js_entry_count_hist[-1], js_entry_count_hist[7],
4387: /* MUTANT (rep_const) */            js_entry_count_hist[((6)+1)], js_entry_count_hist[7],
4387: /* MUTANT (rep_const) */            js_entry_count_hist[((6)-1)], js_entry_count_hist[7],
4387: /* MUTANT (rep_const) */            js_entry_count_hist[6], js_entry_count_hist[0],
4387: /* MUTANT (rep_const) */            js_entry_count_hist[6], js_entry_count_hist[1],
4387: /* MUTANT (rep_const) */            js_entry_count_hist[6], js_entry_count_hist[-1],
4387: /* MUTANT (rep_const) */            js_entry_count_hist[6], js_entry_count_hist[((7)+1)],
4387: /* MUTANT (rep_const) */            js_entry_count_hist[6], js_entry_count_hist[((7)-1)],
4388: /* MUTANT (rep_const) */            js_entry_count_hist[0], js_entry_count_hist[9],
4388: /* MUTANT (rep_const) */            js_entry_count_hist[1], js_entry_count_hist[9],
4388: /* MUTANT (rep_const) */            js_entry_count_hist[-1], js_entry_count_hist[9],
4388: /* MUTANT (rep_const) */            js_entry_count_hist[((8)+1)], js_entry_count_hist[9],
4388: /* MUTANT (rep_const) */            js_entry_count_hist[((8)-1)], js_entry_count_hist[9],
4388: /* MUTANT (rep_const) */            js_entry_count_hist[8], js_entry_count_hist[0],
4388: /* MUTANT (rep_const) */            js_entry_count_hist[8], js_entry_count_hist[1],
4388: /* MUTANT (rep_const) */            js_entry_count_hist[8], js_entry_count_hist[-1],
4388: /* MUTANT (rep_const) */            js_entry_count_hist[8], js_entry_count_hist[((9)+1)],
4388: /* MUTANT (rep_const) */            js_entry_count_hist[8], js_entry_count_hist[((9)-1)],
4389: /* MUTANT (rep_const) */            js_entry_count_hist[0]);
4389: /* MUTANT (rep_const) */            js_entry_count_hist[1]);
4389: /* MUTANT (rep_const) */            js_entry_count_hist[-1]);
4389: /* MUTANT (rep_const) */            js_entry_count_hist[((10)+1)]);
4389: /* MUTANT (rep_const) */            js_entry_count_hist[((10)-1)]);
4390: /* MUTANT (del_stmt) */ /*     js_entry_count_sum = js_entry_count_max = 0; */ 
4390: /* MUTANT (rep_const) */    js_entry_count_sum = js_entry_count_max = 1;
4390: /* MUTANT (rep_const) */    js_entry_count_sum = js_entry_count_max = -1;
4391: /* MUTANT (del_stmt) */ /*     js_entry_count_sqsum = 0; */ 
4391: /* MUTANT (rep_const) */    js_entry_count_sqsum = 1;
4391: /* MUTANT (rep_const) */    js_entry_count_sqsum = -1;
4392: /* MUTANT (del_stmt) */ /*     memset(js_entry_count_hist, 0, sizeof js_entry_count_hist); */ 
4392: /* MUTANT (rep_const) */    memset(js_entry_count_hist, 1, sizeof js_entry_count_hist);
4392: /* MUTANT (rep_const) */    memset(js_entry_count_hist, -1, sizeof js_entry_count_hist);
4393: /* MUTANT (del_stmt) */ /*     fflush(logfp); */ 
4401: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
4402: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
4403: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
4405: /* MUTANT (del_stmt) */ /*     JS_ASSERT(OBJ_IS_NATIVE(obj)); */ 
4406: /* MUTANT (del_stmt) */ /*     scope = OBJ_SCOPE(obj); */ 
4408: /* MUTANT (rep_op) */    if (scope->object != obj)
4408: /* MUTANT (negate) */    if(! (scope->object == obj))
4412: /* MUTANT (rep_op) */    JS_ASSERT(!SCOPE_LAST_PROP(scope) &&
4416: /* MUTANT (rep_op) */        if (SCOPE_HAD_MIDDLE_DELETE(scope) || !SCOPE_HAS_PROPERTY(scope, sprop))
4416: /* MUTANT (negate) */        if(! (SCOPE_HAD_MIDDLE_DELETE(scope) && !SCOPE_HAS_PROPERTY(scope, sprop)))
4418: /* MUTANT (del_stmt) */ /*         MARK_SCOPE_PROPERTY(sprop); */ 
4419: /* MUTANT (negate) */        if(! (JSID_IS_ATOM(sprop->id)))
4421: /* MUTANT (negate) */        else if(! (JSID_IS_OBJECT(sprop->id)))
4425: /* MUTANT (rep_op) */        if (sprop->attrs & (JSPROP_GETTER & JSPROP_SETTER)) {
4425: /* MUTANT (negate) */        if(! (sprop->attrs & (JSPROP_GETTER | JSPROP_SETTER))) {
4427: /* MUTANT (rep_const) */            char buf[0];
4427: /* MUTANT (rep_const) */            char buf[1];
4427: /* MUTANT (rep_const) */            char buf[-1];
4427: /* MUTANT (rep_const) */            char buf[((64)+1)];
4427: /* MUTANT (rep_const) */            char buf[((64)-1)];
4428: /* MUTANT (del_stmt) */ /*             JSAtom *atom = JSID_TO_ATOM(sprop->id); */ 
4429: /* MUTANT (rep_op) */            const char *id = (atom || ATOM_IS_STRING(atom))
4434: /* MUTANT (negate) */            if(! (sprop->attrs & JSPROP_GETTER)) {
4444: /* MUTANT (negate) */            if(! (sprop->attrs & JSPROP_SETTER)) {
4460: /* MUTANT (negate) */    if(! (clasp->mark))
4463: /* MUTANT (rep_op) */    if (scope->object == obj) {
4463: /* MUTANT (negate) */    if(! (scope->object != obj)) {
4469: /* MUTANT (del_stmt) */ /*         return (uint32) obj->slots[-1]; */ 
4469: /* MUTANT (rep_const) */        return (uint32) obj->slots[0];
4469: /* MUTANT (rep_const) */        return (uint32) obj->slots[1];
4469: /* MUTANT (rep_const) */        return (uint32) obj->slots[((-1)+1)];
4469: /* MUTANT (rep_const) */        return (uint32) obj->slots[((-1)-1)];
4477: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
4478: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
4479: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
4480: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
4488: /* MUTANT (del_stmt) */ /*     JS_LOCK_OBJ(cx, obj); */ 
4489: /* MUTANT (del_stmt) */ /*     scope = OBJ_SCOPE(obj); */ 
4490: /* MUTANT (rep_op) */    if (scope->object != obj) {
4490: /* MUTANT (negate) */    if(! (scope->object == obj)) {
4492: /* MUTANT (del_stmt) */ /*         rt = cx->runtime; */ 
4494: /* MUTANT (rep_op) */            if (!SCOPE_HAD_MIDDLE_DELETE(scope) &&
4496: /* MUTANT (del_stmt) */ /*                 PROPERTY_CACHE_FILL(&rt->propertyCache, obj, sprop->id, NULL); */ 
4504: /* MUTANT (del_stmt) */ /*         i = scope->map.nslots; */ 
4505: /* MUTANT (del_stmt) */ /*         n = JSSLOT_FREE(LOCKED_OBJ_GET_CLASS(obj)); */ 
4506: /* MUTANT (rep_op) */        while (++i >= n)
4506: /* MUTANT (rep_op) */        while (--i <= n)
4506: /* MUTANT (rep_op) */        while (--i < n)
4506: /* MUTANT (rep_op) */        while (--i > n)
4506: /* MUTANT (rep_op) */        while (--i == n)
4506: /* MUTANT (rep_op) */        while (--i != n)
4506: /* MUTANT (negate) */        while(! (--i >= n))
4508: /* MUTANT (del_stmt) */ /*         scope->map.freeslot = n; */ 
4516: /* MUTANT (del_stmt) */ /*     jsval v; */ 
4518: /* MUTANT (del_stmt) */ /*     JS_LOCK_OBJ(cx, obj); */ 
4519: /* MUTANT (del_stmt) */ /*     v = (slot < (uint32) obj->slots[-1]) ? obj->slots[slot] : JSVAL_VOID; */ 
4519: /* MUTANT (rep_op) */    v = (slot <= (uint32) obj->slots[-1]) ? obj->slots[slot] : JSVAL_VOID;
4519: /* MUTANT (rep_op) */    v = (slot > (uint32) obj->slots[-1]) ? obj->slots[slot] : JSVAL_VOID;
4519: /* MUTANT (rep_op) */    v = (slot >= (uint32) obj->slots[-1]) ? obj->slots[slot] : JSVAL_VOID;
4519: /* MUTANT (rep_op) */    v = (slot == (uint32) obj->slots[-1]) ? obj->slots[slot] : JSVAL_VOID;
4519: /* MUTANT (rep_op) */    v = (slot != (uint32) obj->slots[-1]) ? obj->slots[slot] : JSVAL_VOID;
4519: /* MUTANT (rep_const) */    v = (slot < (uint32) obj->slots[0]) ? obj->slots[slot] : JSVAL_VOID;
4519: /* MUTANT (rep_const) */    v = (slot < (uint32) obj->slots[1]) ? obj->slots[slot] : JSVAL_VOID;
4519: /* MUTANT (rep_const) */    v = (slot < (uint32) obj->slots[((-1)+1)]) ? obj->slots[slot] : JSVAL_VOID;
4519: /* MUTANT (rep_const) */    v = (slot < (uint32) obj->slots[((-1)-1)]) ? obj->slots[slot] : JSVAL_VOID;
4520: /* MUTANT (del_stmt) */ /*     JS_UNLOCK_OBJ(cx, obj); */ 
4521: /* MUTANT (del_stmt) */ /*     return v; */ 
4527: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
4528: /* MUTANT (del_stmt) */ /*     uint32 nslots; */ 
4529: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
4530: /* MUTANT (del_stmt) */ /*     jsval *newslots; */ 
4532: /* MUTANT (del_stmt) */ /*     JS_LOCK_OBJ(cx, obj); */ 
4533: /* MUTANT (del_stmt) */ /*     scope = OBJ_SCOPE(obj); */ 
4534: /* MUTANT (del_stmt) */ /*     nslots = (uint32) obj->slots[-1]; */ 
4534: /* MUTANT (rep_const) */    nslots = (uint32) obj->slots[0];
4534: /* MUTANT (rep_const) */    nslots = (uint32) obj->slots[1];
4534: /* MUTANT (rep_const) */    nslots = (uint32) obj->slots[((-1)+1)];
4534: /* MUTANT (rep_const) */    nslots = (uint32) obj->slots[((-1)-1)];
4535: /* MUTANT (rep_op) */    if (slot <= nslots) {
4535: /* MUTANT (rep_op) */    if (slot < nslots) {
4535: /* MUTANT (rep_op) */    if (slot > nslots) {
4535: /* MUTANT (rep_op) */    if (slot == nslots) {
4535: /* MUTANT (rep_op) */    if (slot != nslots) {
4535: /* MUTANT (negate) */    if(! (slot >= nslots)) {
4546: /* MUTANT (del_stmt) */ /*         JS_ASSERT(nslots == JS_INITIAL_NSLOTS); */ 
4546: /* MUTANT (rep_op) */        JS_ASSERT(nslots != JS_INITIAL_NSLOTS);
4547: /* MUTANT (del_stmt) */ /*         clasp = LOCKED_OBJ_GET_CLASS(obj); */ 
4548: /* MUTANT (del_stmt) */ /*         nslots = JSSLOT_FREE(clasp); */ 
4549: /* MUTANT (negate) */        if(! (clasp->reserveSlots))
4550: /* MUTANT (rep_op) */            nslots -= clasp->reserveSlots(cx, obj);
4550: /* MUTANT (rep_op) */            nslots *= clasp->reserveSlots(cx, obj);
4550: /* MUTANT (rep_op) */            nslots %= clasp->reserveSlots(cx, obj);
4551: /* MUTANT (del_stmt) */ /*         JS_ASSERT(slot < nslots); */ 
4551: /* MUTANT (rep_op) */        JS_ASSERT(slot <= nslots);
4551: /* MUTANT (rep_op) */        JS_ASSERT(slot > nslots);
4551: /* MUTANT (rep_op) */        JS_ASSERT(slot >= nslots);
4551: /* MUTANT (rep_op) */        JS_ASSERT(slot == nslots);
4551: /* MUTANT (rep_op) */        JS_ASSERT(slot != nslots);
4553: /* MUTANT (del_stmt) */ /*         newslots = AllocSlots(cx, obj->slots, nslots); */ 
4554: /* MUTANT (negate) */        if(! (!newslots)) {
4555: /* MUTANT (del_stmt) */ /*             JS_UNLOCK_SCOPE(cx, scope); */ 
4556: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
4558: /* MUTANT (rep_op) */        if (scope->object != obj)
4558: /* MUTANT (negate) */        if(! (scope->object == obj))
4560: /* MUTANT (del_stmt) */ /*         obj->slots = newslots; */ 
4564: /* MUTANT (rep_op) */    if (scope->object != obj && slot >= scope->map.freeslot)
4564: /* MUTANT (rep_op) */    if (scope->object == obj || slot >= scope->map.freeslot)
4564: /* MUTANT (rep_op) */    if (scope->object == obj && slot <= scope->map.freeslot)
4564: /* MUTANT (rep_op) */    if (scope->object == obj && slot < scope->map.freeslot)
4564: /* MUTANT (rep_op) */    if (scope->object == obj && slot > scope->map.freeslot)
4564: /* MUTANT (rep_op) */    if (scope->object == obj && slot == scope->map.freeslot)
4564: /* MUTANT (rep_op) */    if (scope->object == obj && slot != scope->map.freeslot)
4564: /* MUTANT (negate) */    if(! (scope->object == obj && slot >= scope->map.freeslot))
4565: /* MUTANT (rep_op) */        scope->map.freeslot = slot - 1;
4565: /* MUTANT (rep_op) */        scope->map.freeslot = slot * 1;
4565: /* MUTANT (rep_op) */        scope->map.freeslot = slot % 1;
4565: /* MUTANT (rep_const) */        scope->map.freeslot = slot + 0;
4565: /* MUTANT (rep_const) */        scope->map.freeslot = slot + -1;
4565: /* MUTANT (rep_const) */        scope->map.freeslot = slot + ((1)+1);
4567: /* MUTANT (del_stmt) */ /*     obj->slots[slot] = v; */ 
4568: /* MUTANT (del_stmt) */ /*     JS_UNLOCK_SCOPE(cx, scope); */ 
4569: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
4577: /* MUTANT (del_stmt) */ /*     fprintf(stderr, "jschar* (0x%p) \"", (void *)cp); */ 
4577: /* MUTANT (rep_const) */    fprintf(stderr, "jschar* (1x%p) \"", (void *)cp);
4577: /* MUTANT (rep_const) */    fprintf(stderr, "jschar* (-1x%p) \"", (void *)cp);
4578: /* MUTANT (negate) */    while(! (*cp))
4579: /* MUTANT (rep_op) */        fputc(*cp--, stderr);
4580: /* MUTANT (del_stmt) */ /*     fputc('"', stderr); */ 
4581: /* MUTANT (del_stmt) */ /*     fputc('\n', stderr); */ 
4585: /* MUTANT (del_stmt) */ /*     size_t i, n; */ 
4586: /* MUTANT (del_stmt) */ /*     jschar *s; */ 
4587: /* MUTANT (del_stmt) */ /*     fprintf(stderr, "string (0x%p) \"", (void *)str); */ 
4587: /* MUTANT (rep_const) */    fprintf(stderr, "string (1x%p) \"", (void *)str);
4587: /* MUTANT (rep_const) */    fprintf(stderr, "string (-1x%p) \"", (void *)str);
4588: /* MUTANT (del_stmt) */ /*     s = JSSTRING_CHARS(str); */ 
4589: /* MUTANT (rep_op) */    for (i=0, n=JSSTRING_LENGTH(str); i <= n; i++)
4589: /* MUTANT (rep_op) */    for (i=0, n=JSSTRING_LENGTH(str); i > n; i++)
4589: /* MUTANT (rep_op) */    for (i=0, n=JSSTRING_LENGTH(str); i >= n; i++)
4589: /* MUTANT (rep_op) */    for (i=0, n=JSSTRING_LENGTH(str); i == n; i++)
4589: /* MUTANT (rep_op) */    for (i=0, n=JSSTRING_LENGTH(str); i != n; i++)
4589: /* MUTANT (rep_op) */    for (i=0, n=JSSTRING_LENGTH(str); i < n; i--)
4589: /* MUTANT (rep_const) */    for (i=1, n=JSSTRING_LENGTH(str); i < n; i++)
4589: /* MUTANT (rep_const) */    for (i=-1, n=JSSTRING_LENGTH(str); i < n; i++)
4591: /* MUTANT (del_stmt) */ /*     fputc('"', stderr); */ 
4592: /* MUTANT (del_stmt) */ /*     fputc('\n', stderr); */ 
4598: /* MUTANT (del_stmt) */ /*     jsuint i; */ 
4599: /* MUTANT (del_stmt) */ /*     jsval val; */ 
4600: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
4602: /* MUTANT (del_stmt) */ /*     fprintf(stderr, "object 0x%p\n", (void *)jsobj); */ 
4602: /* MUTANT (rep_const) */    fprintf(stderr, "object 1x%p\n", (void *)jsobj);
4602: /* MUTANT (rep_const) */    fprintf(stderr, "object -1x%p\n", (void *)jsobj);
4603: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, jsobj); */ 
4604: /* MUTANT (del_stmt) */ /*     fprintf(stderr, "class 0x%p %s\n", (void *)clasp, clasp->name); */ 
4604: /* MUTANT (rep_const) */    fprintf(stderr, "class 1x%p %s\n", (void *)clasp, clasp->name);
4604: /* MUTANT (rep_const) */    fprintf(stderr, "class -1x%p %s\n", (void *)clasp, clasp->name);
4605: /* MUTANT (rep_op) */    for (i=0; i <= jsobj->map->nslots; i++) {
4605: /* MUTANT (rep_op) */    for (i=0; i > jsobj->map->nslots; i++) {
4605: /* MUTANT (rep_op) */    for (i=0; i >= jsobj->map->nslots; i++) {
4605: /* MUTANT (rep_op) */    for (i=0; i == jsobj->map->nslots; i++) {
4605: /* MUTANT (rep_op) */    for (i=0; i != jsobj->map->nslots; i++) {
4605: /* MUTANT (rep_op) */    for (i=0; i < jsobj->map->nslots; i--) {
4605: /* MUTANT (rep_const) */    for (i=1; i < jsobj->map->nslots; i++) {
4605: /* MUTANT (rep_const) */    for (i=-1; i < jsobj->map->nslots; i++) {
4606: /* MUTANT (del_stmt) */ /*         fprintf(stderr, "slot %3d ", i); */ 
4606: /* MUTANT (rep_const) */        fprintf(stderr, "slot %0d ", i);
4606: /* MUTANT (rep_const) */        fprintf(stderr, "slot %1d ", i);
4606: /* MUTANT (rep_const) */        fprintf(stderr, "slot %-1d ", i);
4606: /* MUTANT (rep_const) */        fprintf(stderr, "slot %((3)+1)d ", i);
4606: /* MUTANT (rep_const) */        fprintf(stderr, "slot %((3)-1)d ", i);
4607: /* MUTANT (del_stmt) */ /*         val = jsobj->slots[i]; */ 
4608: /* MUTANT (negate) */        if(! (JSVAL_IS_OBJECT(val)))
4609: /* MUTANT (rep_const) */            fprintf(stderr, "object 1x%p\n", (void *)JSVAL_TO_OBJECT(val));
4609: /* MUTANT (rep_const) */            fprintf(stderr, "object -1x%p\n", (void *)JSVAL_TO_OBJECT(val));
4616: /* MUTANT (del_stmt) */ /*     fprintf(stderr, "val %d (0x%p) = ", (int)val, (void *)val); */ 
4616: /* MUTANT (rep_const) */    fprintf(stderr, "val %d (1x%p) = ", (int)val, (void *)val);
4616: /* MUTANT (rep_const) */    fprintf(stderr, "val %d (-1x%p) = ", (int)val, (void *)val);
4617: /* MUTANT (negate) */    if(! (JSVAL_IS_NULL(val))) {
4618: /* MUTANT (del_stmt) */ /*         fprintf(stderr, "null\n"); */ 
4619: /* MUTANT (negate) */    } else if(! (JSVAL_IS_VOID(val))) {
4620: /* MUTANT (del_stmt) */ /*         fprintf(stderr, "undefined\n"); */ 
4621: /* MUTANT (negate) */    } else if(! (JSVAL_IS_OBJECT(val))) {
4622: /* MUTANT (del_stmt) */ /*         printObj(cx, JSVAL_TO_OBJECT(val)); */ 
4623: /* MUTANT (negate) */    } else if(! (JSVAL_IS_INT(val))) {
4624: /* MUTANT (del_stmt) */ /*         fprintf(stderr, "(int) %d\n", JSVAL_TO_INT(val)); */ 
4625: /* MUTANT (negate) */    } else if(! (JSVAL_IS_STRING(val))) {
4626: /* MUTANT (del_stmt) */ /*         printString(JSVAL_TO_STRING(val)); */ 
4627: /* MUTANT (negate) */    } else if(! (JSVAL_IS_DOUBLE(val))) {
4628: /* MUTANT (del_stmt) */ /*         fprintf(stderr, "(double) %g\n", *JSVAL_TO_DOUBLE(val)); */ 
4630: /* MUTANT (del_stmt) */ /*         JS_ASSERT(JSVAL_IS_BOOLEAN(val)); */ 
4638: /* MUTANT (del_stmt) */ /*     fprintf(stderr, "id %d (0x%p) is ", (int)id, (void *)id); */ 
4638: /* MUTANT (rep_const) */    fprintf(stderr, "id %d (1x%p) is ", (int)id, (void *)id);
4638: /* MUTANT (rep_const) */    fprintf(stderr, "id %d (-1x%p) is ", (int)id, (void *)id);
4639: /* MUTANT (del_stmt) */ /*     printVal(cx, ID_TO_VALUE(id)); */ 
4643: /* MUTANT (del_stmt) */ /*     printString(ATOM_TO_STRING(atom)); */ 
