90: #define METERING        0 /* MUTANT (rep_const) */
90: #define METERING        -1 /* MUTANT (rep_const) */
90: #define METERING        ((1)+1) /* MUTANT (rep_const) */
95: /* MUTANT (del_stmt) */ /*     jsrefcount  qname; */ 
96: /* MUTANT (del_stmt) */ /*     jsrefcount  qnameobj; */ 
97: /* MUTANT (del_stmt) */ /*     jsrefcount  liveqname; */ 
98: /* MUTANT (del_stmt) */ /*     jsrefcount  liveqnameobj; */ 
99: /* MUTANT (del_stmt) */ /*     jsrefcount  namespace; */ 
100: /* MUTANT (del_stmt) */ /*     jsrefcount  namespaceobj; */ 
101: /* MUTANT (del_stmt) */ /*     jsrefcount  livenamespace; */ 
102: /* MUTANT (del_stmt) */ /*     jsrefcount  livenamespaceobj; */ 
103: /* MUTANT (del_stmt) */ /*     jsrefcount  xml; */ 
104: /* MUTANT (del_stmt) */ /*     jsrefcount  xmlobj; */ 
105: /* MUTANT (del_stmt) */ /*     jsrefcount  livexml; */ 
106: /* MUTANT (del_stmt) */ /*     jsrefcount  livexmlobj; */ 
107: /* MUTANT (del_stmt) */ /* } xml_stats; */ 
120: /* MUTANT (del_stmt) */ /* const char js_AttributeName_str[] = "AttributeName"; */ 
121: /* MUTANT (del_stmt) */ /* const char js_isXMLName_str[]     = "isXMLName"; */ 
122: /* MUTANT (del_stmt) */ /* const char js_XMLList_str[]       = "XMLList"; */ 
123: /* MUTANT (del_stmt) */ /* const char js_localName_str[]     = "localName"; */ 
124: /* MUTANT (del_stmt) */ /* const char js_xml_parent_str[]    = "parent"; */ 
125: /* MUTANT (del_stmt) */ /* const char js_prefix_str[]        = "prefix"; */ 
126: /* MUTANT (del_stmt) */ /* const char js_toXMLString_str[]   = "toXMLString"; */ 
127: /* MUTANT (del_stmt) */ /* const char js_uri_str[]           = "uri"; */ 
129: /* MUTANT (del_stmt) */ /* const char js_amp_entity_str[]    = "&amp; */ ";
129: /* MUTANT (del_stmt) */ /* const char js_amp_entity_str[]    = "&amp; */  /* "; */ 
129: /* MUTANT (del_stmt) */const char js_amp_entity_str[]    = "&amp; /* "; */ 
130: /* MUTANT (del_stmt) */ /* const char js_gt_entity_str[]     = "&gt; */ ";
130: /* MUTANT (del_stmt) */ /* const char js_gt_entity_str[]     = "&gt; */  /* "; */ 
130: /* MUTANT (del_stmt) */const char js_gt_entity_str[]     = "&gt; /* "; */ 
131: /* MUTANT (del_stmt) */ /* const char js_lt_entity_str[]     = "&lt; */ ";
131: /* MUTANT (del_stmt) */ /* const char js_lt_entity_str[]     = "&lt; */  /* "; */ 
131: /* MUTANT (del_stmt) */const char js_lt_entity_str[]     = "&lt; /* "; */ 
132: /* MUTANT (del_stmt) */ /* const char js_quot_entity_str[]   = "&quot; */ ";
132: /* MUTANT (del_stmt) */ /* const char js_quot_entity_str[]   = "&quot; */  /* "; */ 
132: /* MUTANT (del_stmt) */const char js_quot_entity_str[]   = "&quot; /* "; */ 
134: #define IS_EMPTY(str) (JSSTRING_LENGTH(str) == 1) /* MUTANT (rep_const) */
134: #define IS_EMPTY(str) (JSSTRING_LENGTH(str) == -1) /* MUTANT (rep_const) */
135: #define IS_STAR(str)  (JSSTRING_LENGTH(str) == 0 && *JSSTRING_CHARS(str) == '*') /* MUTANT (rep_const) */
135: #define IS_STAR(str)  (JSSTRING_LENGTH(str) == -1 && *JSSTRING_CHARS(str) == '*') /* MUTANT (rep_const) */
135: #define IS_STAR(str)  (JSSTRING_LENGTH(str) == ((1)+1) && *JSSTRING_CHARS(str) == '*') /* MUTANT (rep_const) */
141: /* MUTANT (del_stmt) */ /*     *rval = BOOLEAN_TO_JSVAL(js_IsXMLName(cx, argv[0])); */ 
141: /* MUTANT (rep_const) */    *rval = BOOLEAN_TO_JSVAL(js_IsXMLName(cx, argv[1]));
141: /* MUTANT (rep_const) */    *rval = BOOLEAN_TO_JSVAL(js_IsXMLName(cx, argv[-1]));
142: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
149: /* MUTANT (rep_const) */    NAMESPACE_PREFIX = 0,
149: /* MUTANT (rep_const) */    NAMESPACE_PREFIX = 1,
149: /* MUTANT (rep_const) */    NAMESPACE_PREFIX = ((-1)+1),
149: /* MUTANT (rep_const) */    NAMESPACE_PREFIX = ((-1)-1),
150: /* MUTANT (rep_const) */    NAMESPACE_URI = 0
150: /* MUTANT (rep_const) */    NAMESPACE_URI = 1
150: /* MUTANT (rep_const) */    NAMESPACE_URI = -1
150: /* MUTANT (rep_const) */    NAMESPACE_URI = ((-2)+1)
150: /* MUTANT (rep_const) */    NAMESPACE_URI = ((-2)-1)
156: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
158: /* MUTANT (negate) */    if(! (!JSVAL_IS_INT(id)))
163: /* MUTANT (negate) */    if(! (!ns))
169: /* MUTANT (del_stmt) */ /*         break; */ 
172: /* MUTANT (del_stmt) */ /*         break; */ 
180: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
181: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
183: /* MUTANT (del_stmt) */ /*     ns = (JSXMLNamespace *) JS_GetPrivate(cx, obj); */ 
184: /* MUTANT (negate) */    if(! (!ns))
186: /* MUTANT (del_stmt) */ /*     JS_ASSERT(ns->object == obj); */ 
186: /* MUTANT (rep_op) */    JS_ASSERT(ns->object != obj);
187: /* MUTANT (del_stmt) */ /*     ns->object = NULL; */ 
188: /* MUTANT (del_stmt) */ /*     UNMETER(xml_stats.livenamespaceobj); */ 
190: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
191: /* MUTANT (rep_op) */    if (rt->functionNamespaceObject != obj)
191: /* MUTANT (negate) */    if(! (rt->functionNamespaceObject == obj))
199: /* MUTANT (del_stmt) */ /*     uint32 i; */ 
200: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
202: /* MUTANT (rep_op) */    for (i = 0; i <= len; i++) {
202: /* MUTANT (rep_op) */    for (i = 0; i > len; i++) {
202: /* MUTANT (rep_op) */    for (i = 0; i >= len; i++) {
202: /* MUTANT (rep_op) */    for (i = 0; i == len; i++) {
202: /* MUTANT (rep_op) */    for (i = 0; i != len; i++) {
202: /* MUTANT (rep_op) */    for (i = 0; i < len; i--) {
202: /* MUTANT (rep_const) */    for (i = 1; i < len; i++) {
202: /* MUTANT (rep_const) */    for (i = -1; i < len; i++) {
203: /* MUTANT (del_stmt) */ /*         ns = vec[i]; */ 
206: /* MUTANT (rep_const) */            char buf[0];
206: /* MUTANT (rep_const) */            char buf[1];
206: /* MUTANT (rep_const) */            char buf[-1];
206: /* MUTANT (rep_const) */            char buf[((100)+1)];
206: /* MUTANT (rep_const) */            char buf[((100)-1)];
222: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
224: /* MUTANT (del_stmt) */ /*     ns = (JSXMLNamespace *) JS_GetPrivate(cx, obj); */ 
225: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, ns, js_private_str, arg); */ 
226: /* MUTANT (del_stmt) */ /*     return 0; */ 
226: /* MUTANT (rep_const) */    return 1;
226: /* MUTANT (rep_const) */    return -1;
232: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns, *ns2; */ 
233: /* MUTANT (del_stmt) */ /*     JSObject *obj2; */ 
235: /* MUTANT (del_stmt) */ /*     ns = (JSXMLNamespace *) JS_GetPrivate(cx, obj); */ 
236: /* MUTANT (del_stmt) */ /*     JS_ASSERT(JSVAL_IS_OBJECT(v)); */ 
237: /* MUTANT (del_stmt) */ /*     obj2 = JSVAL_TO_OBJECT(v); */ 
238: /* MUTANT (rep_op) */    if (!obj2 && OBJ_GET_CLASS(cx, obj2) != &js_NamespaceClass.base) {
238: /* MUTANT (rep_op) */    if (!obj2 || OBJ_GET_CLASS(cx, obj2) == &js_NamespaceClass.base) {
238: /* MUTANT (negate) */    if(! (!obj2 || OBJ_GET_CLASS(cx, obj2) != &js_NamespaceClass.base)) {
239: /* MUTANT (del_stmt) */ /*         *bp = JS_FALSE; */ 
241: /* MUTANT (del_stmt) */ /*         ns2 = (JSXMLNamespace *) JS_GetPrivate(cx, obj2); */ 
242: /* MUTANT (del_stmt) */ /*         *bp = !js_CompareStrings(ns->uri, ns2->uri); */ 
249: /* MUTANT (rep_op) */    JSCLASS_HAS_PRIVATE & JSCLASS_CONSTRUCT_PROTOTYPE | JSCLASS_IS_EXTENDED,
249: /* MUTANT (rep_op) */    JSCLASS_HAS_PRIVATE | JSCLASS_CONSTRUCT_PROTOTYPE & JSCLASS_IS_EXTENDED,
260: /* MUTANT (rep_op) */    (JSPROP_ENUMERATE & JSPROP_READONLY | JSPROP_PERMANENT | JSPROP_SHARED)
260: /* MUTANT (rep_op) */    (JSPROP_ENUMERATE | JSPROP_READONLY & JSPROP_PERMANENT | JSPROP_SHARED)
260: /* MUTANT (rep_op) */    (JSPROP_ENUMERATE | JSPROP_READONLY | JSPROP_PERMANENT & JSPROP_SHARED)
263: /* MUTANT (rep_const) */    {js_prefix_str,    NAMESPACE_PREFIX,  NAMESPACE_ATTRS,   1, 0},
263: /* MUTANT (rep_const) */    {js_prefix_str,    NAMESPACE_PREFIX,  NAMESPACE_ATTRS,   -1, 0},
263: /* MUTANT (rep_const) */    {js_prefix_str,    NAMESPACE_PREFIX,  NAMESPACE_ATTRS,   0, 1},
263: /* MUTANT (rep_const) */    {js_prefix_str,    NAMESPACE_PREFIX,  NAMESPACE_ATTRS,   0, -1},
264: /* MUTANT (rep_const) */    {js_uri_str,       NAMESPACE_URI,     NAMESPACE_ATTRS,   1, 0},
264: /* MUTANT (rep_const) */    {js_uri_str,       NAMESPACE_URI,     NAMESPACE_ATTRS,   -1, 0},
264: /* MUTANT (rep_const) */    {js_uri_str,       NAMESPACE_URI,     NAMESPACE_ATTRS,   0, 1},
264: /* MUTANT (rep_const) */    {js_uri_str,       NAMESPACE_URI,     NAMESPACE_ATTRS,   0, -1},
265: /* MUTANT (rep_const) */    {1,0,0,0,0}
265: /* MUTANT (rep_const) */    {-1,0,0,0,0}
265: /* MUTANT (rep_const) */    {0,1,0,0,0}
265: /* MUTANT (rep_const) */    {0,-1,0,0,0}
265: /* MUTANT (rep_const) */    {0,0,1,0,0}
265: /* MUTANT (rep_const) */    {0,0,-1,0,0}
265: /* MUTANT (rep_const) */    {0,0,0,1,0}
265: /* MUTANT (rep_const) */    {0,0,0,-1,0}
265: /* MUTANT (rep_const) */    {0,0,0,0,1}
265: /* MUTANT (rep_const) */    {0,0,0,0,-1}
272: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
276: /* MUTANT (negate) */    if(! (!ns))
279: /* MUTANT (del_stmt) */ /*     *rval = STRING_TO_JSVAL(ns->uri); */ 
280: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
284: /* MUTANT (rep_const) */    {js_toString_str,  namespace_toString,        1,0,0},
284: /* MUTANT (rep_const) */    {js_toString_str,  namespace_toString,        -1,0,0},
284: /* MUTANT (rep_const) */    {js_toString_str,  namespace_toString,        0,1,0},
284: /* MUTANT (rep_const) */    {js_toString_str,  namespace_toString,        0,-1,0},
284: /* MUTANT (rep_const) */    {js_toString_str,  namespace_toString,        0,0,1},
284: /* MUTANT (rep_const) */    {js_toString_str,  namespace_toString,        0,0,-1},
285: /* MUTANT (rep_const) */    {1,0,0,0,0}
285: /* MUTANT (rep_const) */    {-1,0,0,0,0}
285: /* MUTANT (rep_const) */    {0,1,0,0,0}
285: /* MUTANT (rep_const) */    {0,-1,0,0,0}
285: /* MUTANT (rep_const) */    {0,0,1,0,0}
285: /* MUTANT (rep_const) */    {0,0,-1,0,0}
285: /* MUTANT (rep_const) */    {0,0,0,1,0}
285: /* MUTANT (rep_const) */    {0,0,0,-1,0}
285: /* MUTANT (rep_const) */    {0,0,0,0,1}
285: /* MUTANT (rep_const) */    {0,0,0,0,-1}
292: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
296: /* MUTANT (negate) */    if(! (!ns))
298: /* MUTANT (del_stmt) */ /*     ns->object = NULL; */ 
299: /* MUTANT (del_stmt) */ /*     ns->prefix = prefix; */ 
300: /* MUTANT (del_stmt) */ /*     ns->uri = uri; */ 
301: /* MUTANT (del_stmt) */ /*     ns->declared = declared; */ 
302: /* MUTANT (del_stmt) */ /*     METER(xml_stats.namespace); */ 
303: /* MUTANT (del_stmt) */ /*     METER(xml_stats.livenamespace); */ 
304: /* MUTANT (del_stmt) */ /*     return ns; */ 
310: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, ns->object, js_object_str, arg); */ 
311: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, ns->prefix, js_prefix_str, arg); */ 
312: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, ns->uri, js_uri_str, arg); */ 
318: /* MUTANT (del_stmt) */ /*     UNMETER(xml_stats.livenamespace); */ 
325: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
327: /* MUTANT (del_stmt) */ /*     ns = js_NewXMLNamespace(cx, prefix, uri, declared); */ 
328: /* MUTANT (negate) */    if(! (!ns))
330: /* MUTANT (del_stmt) */ /*     return js_GetXMLNamespaceObject(cx, ns); */ 
336: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
338: /* MUTANT (del_stmt) */ /*     obj = ns->object; */ 
339: /* MUTANT (negate) */    if(! (obj)) {
340: /* MUTANT (del_stmt) */ /*         JS_ASSERT(JS_GetPrivate(cx, obj) == ns); */ 
340: /* MUTANT (rep_op) */        JS_ASSERT(JS_GetPrivate(cx, obj) != ns);
341: /* MUTANT (del_stmt) */ /*         return obj; */ 
344: /* MUTANT (rep_op) */    if (!obj && !JS_SetPrivate(cx, obj, ns)) {
344: /* MUTANT (negate) */    if(! (!obj || !JS_SetPrivate(cx, obj, ns))) {
345: /* MUTANT (del_stmt) */ /*         cx->newborn[GCX_OBJECT] = NULL; */ 
346: /* MUTANT (del_stmt) */ /*         return NULL; */ 
349: /* MUTANT (del_stmt) */ /*     METER(xml_stats.namespaceobj); */ 
350: /* MUTANT (del_stmt) */ /*     METER(xml_stats.livenamespaceobj); */ 
351: /* MUTANT (del_stmt) */ /*     return obj; */ 
358: /* MUTANT (rep_const) */    QNAME_URI = 0,
358: /* MUTANT (rep_const) */    QNAME_URI = 1,
358: /* MUTANT (rep_const) */    QNAME_URI = ((-1)+1),
358: /* MUTANT (rep_const) */    QNAME_URI = ((-1)-1),
359: /* MUTANT (rep_const) */    QNAME_LOCALNAME = 0
359: /* MUTANT (rep_const) */    QNAME_LOCALNAME = 1
359: /* MUTANT (rep_const) */    QNAME_LOCALNAME = -1
359: /* MUTANT (rep_const) */    QNAME_LOCALNAME = ((-2)+1)
359: /* MUTANT (rep_const) */    QNAME_LOCALNAME = ((-2)-1)
365: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
367: /* MUTANT (negate) */    if(! (!JSVAL_IS_INT(id)))
372: /* MUTANT (negate) */    if(! (!qn))
378: /* MUTANT (del_stmt) */ /*         break; */ 
381: /* MUTANT (del_stmt) */ /*         break; */ 
389: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
391: /* MUTANT (del_stmt) */ /*     qn = (JSXMLQName *) JS_GetPrivate(cx, obj); */ 
392: /* MUTANT (negate) */    if(! (!qn))
394: /* MUTANT (del_stmt) */ /*     JS_ASSERT(qn->object == obj); */ 
394: /* MUTANT (rep_op) */    JS_ASSERT(qn->object != obj);
395: /* MUTANT (del_stmt) */ /*     qn->object = NULL; */ 
396: /* MUTANT (del_stmt) */ /*     UNMETER(xml_stats.liveqnameobj); */ 
402: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
405: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
406: /* MUTANT (rep_op) */    if (rt->anynameObject != obj)
406: /* MUTANT (negate) */    if(! (rt->anynameObject == obj))
409: /* MUTANT (del_stmt) */ /*     qname_finalize(cx, obj); */ 
415: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
417: /* MUTANT (del_stmt) */ /*     qn = (JSXMLQName *) JS_GetPrivate(cx, obj); */ 
418: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, qn, js_private_str, arg); */ 
419: /* MUTANT (del_stmt) */ /*     return 0; */ 
419: /* MUTANT (rep_const) */    return 1;
419: /* MUTANT (rep_const) */    return -1;
425: /* MUTANT (negate) */    if(! (!qna->uri ^ !qnb->uri))
427: /* MUTANT (rep_op) */    if (qna->uri || js_CompareStrings(qna->uri, qnb->uri))
427: /* MUTANT (negate) */    if(! (qna->uri && js_CompareStrings(qna->uri, qnb->uri)))
429: /* MUTANT (del_stmt) */ /*     return !js_CompareStrings(qna->localName, qnb->localName); */ 
435: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn, *qn2; */ 
436: /* MUTANT (del_stmt) */ /*     JSObject *obj2; */ 
438: /* MUTANT (del_stmt) */ /*     qn = (JSXMLQName *) JS_GetPrivate(cx, obj); */ 
439: /* MUTANT (del_stmt) */ /*     JS_ASSERT(JSVAL_IS_OBJECT(v)); */ 
440: /* MUTANT (del_stmt) */ /*     obj2 = JSVAL_TO_OBJECT(v); */ 
441: /* MUTANT (rep_op) */    if (!obj2 && OBJ_GET_CLASS(cx, obj2) != &js_QNameClass.base) {
441: /* MUTANT (rep_op) */    if (!obj2 || OBJ_GET_CLASS(cx, obj2) == &js_QNameClass.base) {
441: /* MUTANT (negate) */    if(! (!obj2 || OBJ_GET_CLASS(cx, obj2) != &js_QNameClass.base)) {
442: /* MUTANT (del_stmt) */ /*         *bp = JS_FALSE; */ 
444: /* MUTANT (del_stmt) */ /*         qn2 = (JSXMLQName *) JS_GetPrivate(cx, obj2); */ 
445: /* MUTANT (del_stmt) */ /*         *bp = qname_identity(qn, qn2); */ 
452: /* MUTANT (rep_op) */    JSCLASS_HAS_PRIVATE & JSCLASS_CONSTRUCT_PROTOTYPE | JSCLASS_IS_EXTENDED,
452: /* MUTANT (rep_op) */    JSCLASS_HAS_PRIVATE | JSCLASS_CONSTRUCT_PROTOTYPE & JSCLASS_IS_EXTENDED,
469: /* MUTANT (rep_op) */    js_AttributeName_str, JSCLASS_HAS_PRIVATE & JSCLASS_CONSTRUCT_PROTOTYPE,
477: /* MUTANT (rep_op) */    js_AnyName_str,    JSCLASS_HAS_PRIVATE & JSCLASS_CONSTRUCT_PROTOTYPE,
485: /* MUTANT (rep_op) */    (JSPROP_ENUMERATE & JSPROP_READONLY | JSPROP_PERMANENT | JSPROP_SHARED)
485: /* MUTANT (rep_op) */    (JSPROP_ENUMERATE | JSPROP_READONLY & JSPROP_PERMANENT | JSPROP_SHARED)
485: /* MUTANT (rep_op) */    (JSPROP_ENUMERATE | JSPROP_READONLY | JSPROP_PERMANENT & JSPROP_SHARED)
488: /* MUTANT (rep_const) */    {js_uri_str,       QNAME_URI,         QNAME_ATTRS,       1, 0},
488: /* MUTANT (rep_const) */    {js_uri_str,       QNAME_URI,         QNAME_ATTRS,       -1, 0},
488: /* MUTANT (rep_const) */    {js_uri_str,       QNAME_URI,         QNAME_ATTRS,       0, 1},
488: /* MUTANT (rep_const) */    {js_uri_str,       QNAME_URI,         QNAME_ATTRS,       0, -1},
489: /* MUTANT (rep_const) */    {js_localName_str, QNAME_LOCALNAME,   QNAME_ATTRS,       1, 0},
489: /* MUTANT (rep_const) */    {js_localName_str, QNAME_LOCALNAME,   QNAME_ATTRS,       -1, 0},
489: /* MUTANT (rep_const) */    {js_localName_str, QNAME_LOCALNAME,   QNAME_ATTRS,       0, 1},
489: /* MUTANT (rep_const) */    {js_localName_str, QNAME_LOCALNAME,   QNAME_ATTRS,       0, -1},
490: /* MUTANT (rep_const) */    {1,0,0,0,0}
490: /* MUTANT (rep_const) */    {-1,0,0,0,0}
490: /* MUTANT (rep_const) */    {0,1,0,0,0}
490: /* MUTANT (rep_const) */    {0,-1,0,0,0}
490: /* MUTANT (rep_const) */    {0,0,1,0,0}
490: /* MUTANT (rep_const) */    {0,0,-1,0,0}
490: /* MUTANT (rep_const) */    {0,0,0,1,0}
490: /* MUTANT (rep_const) */    {0,0,0,-1,0}
490: /* MUTANT (rep_const) */    {0,0,0,0,1}
490: /* MUTANT (rep_const) */    {0,0,0,0,-1}
497: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
498: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
499: /* MUTANT (del_stmt) */ /*     JSString *str, *qualstr; */ 
500: /* MUTANT (del_stmt) */ /*     size_t length; */ 
501: /* MUTANT (del_stmt) */ /*     jschar *chars; */ 
503: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, obj); */ 
504: /* MUTANT (rep_op) */    if (clasp != &js_AttributeNameClass || clasp == &js_AnyNameClass) {
504: /* MUTANT (rep_op) */    if (clasp == &js_AttributeNameClass && clasp == &js_AnyNameClass) {
504: /* MUTANT (rep_op) */    if (clasp == &js_AttributeNameClass || clasp != &js_AnyNameClass) {
504: /* MUTANT (negate) */    if(! (clasp == &js_AttributeNameClass || clasp == &js_AnyNameClass)) {
505: /* MUTANT (del_stmt) */ /*         qn = (JSXMLQName *) JS_GetPrivate(cx, obj); */ 
509: /* MUTANT (negate) */        if(! (!qn))
513: /* MUTANT (negate) */    if(! (!qn->uri)) {
515: /* MUTANT (del_stmt) */ /*         str = ATOM_TO_STRING(cx->runtime->atomState.starQualifierAtom); */ 
516: /* MUTANT (negate) */    } else if(! (IS_EMPTY(qn->uri))) {
518: /* MUTANT (del_stmt) */ /*         str = cx->runtime->emptyString; */ 
520: /* MUTANT (del_stmt) */ /*         qualstr = ATOM_TO_STRING(cx->runtime->atomState.qualifierAtom); */ 
521: /* MUTANT (del_stmt) */ /*         str = js_ConcatStrings(cx, qn->uri, qualstr); */ 
522: /* MUTANT (negate) */        if(! (!str))
526: /* MUTANT (negate) */    if(! (!str))
529: /* MUTANT (rep_op) */    if (str || clasp == &js_AttributeNameClass) {
529: /* MUTANT (rep_op) */    if (str && clasp != &js_AttributeNameClass) {
529: /* MUTANT (negate) */    if(! (str && clasp == &js_AttributeNameClass)) {
530: /* MUTANT (del_stmt) */ /*         length = JSSTRING_LENGTH(str); */ 
531: /* MUTANT (del_stmt) */ /*         chars = (jschar *) JS_malloc(cx, (length + 2) * sizeof(jschar)); */ 
531: /* MUTANT (rep_op) */        chars = (jschar *) JS_malloc(cx, (length - 2) * sizeof(jschar));
531: /* MUTANT (rep_op) */        chars = (jschar *) JS_malloc(cx, (length * 2) * sizeof(jschar));
531: /* MUTANT (rep_op) */        chars = (jschar *) JS_malloc(cx, (length % 2) * sizeof(jschar));
531: /* MUTANT (rep_const) */        chars = (jschar *) JS_malloc(cx, (length + 0) * sizeof(jschar));
531: /* MUTANT (rep_const) */        chars = (jschar *) JS_malloc(cx, (length + 1) * sizeof(jschar));
531: /* MUTANT (rep_const) */        chars = (jschar *) JS_malloc(cx, (length + -1) * sizeof(jschar));
531: /* MUTANT (rep_const) */        chars = (jschar *) JS_malloc(cx, (length + ((2)+1)) * sizeof(jschar));
531: /* MUTANT (rep_const) */        chars = (jschar *) JS_malloc(cx, (length + ((2)-1)) * sizeof(jschar));
532: /* MUTANT (negate) */        if(! (!chars))
534: /* MUTANT (del_stmt) */ /*         *chars = '@'; */ 
535: /* MUTANT (del_stmt) */ /*         js_strncpy(chars + 1, JSSTRING_CHARS(str), length); */ 
535: /* MUTANT (rep_op) */        js_strncpy(chars - 1, JSSTRING_CHARS(str), length);
535: /* MUTANT (rep_op) */        js_strncpy(chars * 1, JSSTRING_CHARS(str), length);
535: /* MUTANT (rep_op) */        js_strncpy(chars % 1, JSSTRING_CHARS(str), length);
535: /* MUTANT (rep_const) */        js_strncpy(chars + 0, JSSTRING_CHARS(str), length);
535: /* MUTANT (rep_const) */        js_strncpy(chars + -1, JSSTRING_CHARS(str), length);
535: /* MUTANT (rep_const) */        js_strncpy(chars + ((1)+1), JSSTRING_CHARS(str), length);
536: /* MUTANT (del_stmt) */ /*         chars[++length] = 0; */ 
536: /* MUTANT (rep_op) */        chars[--length] = 0;
536: /* MUTANT (rep_const) */        chars[++length] = 1;
536: /* MUTANT (rep_const) */        chars[++length] = -1;
537: /* MUTANT (del_stmt) */ /*         str = js_NewString(cx, chars, length, 0); */ 
537: /* MUTANT (rep_const) */        str = js_NewString(cx, chars, length, 1);
537: /* MUTANT (rep_const) */        str = js_NewString(cx, chars, length, -1);
538: /* MUTANT (negate) */        if(! (!str)) {
539: /* MUTANT (del_stmt) */ /*             JS_free(cx, chars); */ 
540: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
545: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
549: /* MUTANT (rep_const) */    {js_toString_str,  qname_toString,    1,0,0},
549: /* MUTANT (rep_const) */    {js_toString_str,  qname_toString,    -1,0,0},
549: /* MUTANT (rep_const) */    {js_toString_str,  qname_toString,    0,1,0},
549: /* MUTANT (rep_const) */    {js_toString_str,  qname_toString,    0,-1,0},
549: /* MUTANT (rep_const) */    {js_toString_str,  qname_toString,    0,0,1},
549: /* MUTANT (rep_const) */    {js_toString_str,  qname_toString,    0,0,-1},
550: /* MUTANT (rep_const) */    {1,0,0,0,0}
550: /* MUTANT (rep_const) */    {-1,0,0,0,0}
550: /* MUTANT (rep_const) */    {0,1,0,0,0}
550: /* MUTANT (rep_const) */    {0,-1,0,0,0}
550: /* MUTANT (rep_const) */    {0,0,1,0,0}
550: /* MUTANT (rep_const) */    {0,0,-1,0,0}
550: /* MUTANT (rep_const) */    {0,0,0,1,0}
550: /* MUTANT (rep_const) */    {0,0,0,-1,0}
550: /* MUTANT (rep_const) */    {0,0,0,0,1}
550: /* MUTANT (rep_const) */    {0,0,0,0,-1}
557: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
559: /* MUTANT (del_stmt) */ /*     qn = (JSXMLQName *) js_NewGCThing(cx, GCX_QNAME, sizeof(JSXMLQName)); */ 
560: /* MUTANT (negate) */    if(! (!qn))
562: /* MUTANT (del_stmt) */ /*     qn->object = NULL; */ 
563: /* MUTANT (del_stmt) */ /*     qn->uri = uri; */ 
564: /* MUTANT (del_stmt) */ /*     qn->prefix = prefix; */ 
565: /* MUTANT (del_stmt) */ /*     qn->localName = localName; */ 
566: /* MUTANT (del_stmt) */ /*     METER(xml_stats.qname); */ 
567: /* MUTANT (del_stmt) */ /*     METER(xml_stats.liveqname); */ 
568: /* MUTANT (del_stmt) */ /*     return qn; */ 
574: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, qn->object, js_object_str, arg); */ 
575: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, qn->uri, js_uri_str, arg); */ 
576: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, qn->prefix, js_prefix_str, arg); */ 
577: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, qn->localName, js_localName_str, arg); */ 
583: /* MUTANT (del_stmt) */ /*     UNMETER(xml_stats.liveqname); */ 
590: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
592: /* MUTANT (del_stmt) */ /*     qn = js_NewXMLQName(cx, uri, prefix, localName); */ 
593: /* MUTANT (negate) */    if(! (!qn))
595: /* MUTANT (del_stmt) */ /*     return js_GetXMLQNameObject(cx, qn); */ 
601: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
603: /* MUTANT (del_stmt) */ /*     obj = qn->object; */ 
604: /* MUTANT (negate) */    if(! (obj)) {
605: /* MUTANT (del_stmt) */ /*         JS_ASSERT(JS_GetPrivate(cx, obj) == qn); */ 
605: /* MUTANT (rep_op) */        JS_ASSERT(JS_GetPrivate(cx, obj) != qn);
606: /* MUTANT (del_stmt) */ /*         return obj; */ 
609: /* MUTANT (rep_op) */    if (!obj && !JS_SetPrivate(cx, obj, qn)) {
609: /* MUTANT (negate) */    if(! (!obj || !JS_SetPrivate(cx, obj, qn))) {
610: /* MUTANT (del_stmt) */ /*         cx->newborn[GCX_OBJECT] = NULL; */ 
611: /* MUTANT (del_stmt) */ /*         return NULL; */ 
614: /* MUTANT (del_stmt) */ /*     METER(xml_stats.qnameobj); */ 
615: /* MUTANT (del_stmt) */ /*     METER(xml_stats.liveqnameobj); */ 
616: /* MUTANT (del_stmt) */ /*     return obj; */ 
622: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
624: /* MUTANT (del_stmt) */ /*     obj = qn->object; */ 
625: /* MUTANT (negate) */    if(! (obj)) {
626: /* MUTANT (rep_op) */        if (OBJ_GET_CLASS(cx, obj) != &js_AttributeNameClass)
626: /* MUTANT (negate) */        if(! (OBJ_GET_CLASS(cx, obj) == &js_AttributeNameClass))
628: /* MUTANT (del_stmt) */ /*         qn = js_NewXMLQName(cx, qn->uri, qn->prefix, qn->localName); */ 
629: /* MUTANT (negate) */        if(! (!qn))
634: /* MUTANT (rep_op) */    if (!obj && !JS_SetPrivate(cx, obj, qn)) {
634: /* MUTANT (negate) */    if(! (!obj || !JS_SetPrivate(cx, obj, qn))) {
635: /* MUTANT (del_stmt) */ /*         cx->newborn[GCX_OBJECT] = NULL; */ 
636: /* MUTANT (del_stmt) */ /*         return NULL; */ 
640: /* MUTANT (del_stmt) */ /*     METER(xml_stats.qnameobj); */ 
641: /* MUTANT (del_stmt) */ /*     METER(xml_stats.liveqnameobj); */ 
642: /* MUTANT (del_stmt) */ /*     return obj; */ 
648: /* MUTANT (del_stmt) */ /*     jsval argv[2]; */ 
648: /* MUTANT (rep_const) */    jsval argv[0];
648: /* MUTANT (rep_const) */    jsval argv[1];
648: /* MUTANT (rep_const) */    jsval argv[-1];
648: /* MUTANT (rep_const) */    jsval argv[((2)+1)];
648: /* MUTANT (rep_const) */    jsval argv[((2)-1)];
655: /* MUTANT (rep_op) */    if (!JSVAL_IS_PRIMITIVE(nsval) ||
656: /* MUTANT (rep_op) */        OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(nsval)) != &js_AnyNameClass) {
657: /* MUTANT (del_stmt) */ /*         nsval = JSVAL_NULL; */ 
660: /* MUTANT (rep_const) */    argv[1] = nsval;
660: /* MUTANT (rep_const) */    argv[-1] = nsval;
661: /* MUTANT (del_stmt) */ /*     argv[1] = lnval; */ 
661: /* MUTANT (rep_const) */    argv[0] = lnval;
661: /* MUTANT (rep_const) */    argv[-1] = lnval;
661: /* MUTANT (rep_const) */    argv[((1)+1)] = lnval;
662: /* MUTANT (del_stmt) */ /*     return js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, 2, argv); */ 
662: /* MUTANT (rep_const) */    return js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, 0, argv);
662: /* MUTANT (rep_const) */    return js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, 1, argv);
662: /* MUTANT (rep_const) */    return js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, -1, argv);
662: /* MUTANT (rep_const) */    return js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, ((2)+1), argv);
662: /* MUTANT (rep_const) */    return js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, ((2)-1), argv);
668: /* MUTANT (del_stmt) */ /*     JSBool rv; */ 
669: /* MUTANT (del_stmt) */ /*     jschar c; */ 
671: /* MUTANT (del_stmt) */ /*     rv = JS_FALSE; */ 
672: /* MUTANT (rep_op) */    if (n == 0 && JS_ISXMLNSSTART(*cp)) {
672: /* MUTANT (rep_op) */    if (n != 0 || JS_ISXMLNSSTART(*cp)) {
672: /* MUTANT (rep_const) */    if (n != 1 && JS_ISXMLNSSTART(*cp)) {
672: /* MUTANT (rep_const) */    if (n != -1 && JS_ISXMLNSSTART(*cp)) {
672: /* MUTANT (negate) */    if(! (n != 0 && JS_ISXMLNSSTART(*cp))) {
673: /* MUTANT (rep_op) */        while (++n != 0) {
673: /* MUTANT (rep_op) */        while (--n == 0) {
673: /* MUTANT (rep_const) */        while (--n != 1) {
673: /* MUTANT (rep_const) */        while (--n != -1) {
673: /* MUTANT (negate) */        while(! (--n != 0)) {
674: /* MUTANT (del_stmt) */ /*             c = *++cp; */ 
675: /* MUTANT (negate) */            if(! (!JS_ISXMLNS(c)))
686: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
687: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
688: /* MUTANT (del_stmt) */ /*     JSString *name; */ 
689: /* MUTANT (del_stmt) */ /*     JSErrorReporter older; */ 
697: /* MUTANT (rep_op) */    if (!JSVAL_IS_PRIMITIVE(v) ||
699: /* MUTANT (rep_op) */         clasp != &js_QNameClass.base ||
699: /* MUTANT (rep_op) */         clasp == &js_QNameClass.base &&
700: /* MUTANT (rep_op) */         clasp != &js_AttributeNameClass ||
700: /* MUTANT (rep_op) */         clasp == &js_AttributeNameClass &&
701: /* MUTANT (rep_op) */         clasp != &js_AnyNameClass)) {
702: /* MUTANT (del_stmt) */ /*         qn = (JSXMLQName *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(v)); */ 
703: /* MUTANT (del_stmt) */ /*         name = qn->localName; */ 
705: /* MUTANT (del_stmt) */ /*         older = JS_SetErrorReporter(cx, NULL); */ 
706: /* MUTANT (del_stmt) */ /*         name = js_ValueToString(cx, v); */ 
707: /* MUTANT (del_stmt) */ /*         JS_SetErrorReporter(cx, older); */ 
708: /* MUTANT (negate) */        if(! (!name)) {
709: /* MUTANT (del_stmt) */ /*             JS_ClearPendingException(cx); */ 
710: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
720: /* MUTANT (del_stmt) */ /*     jsval urival, prefixval; */ 
721: /* MUTANT (del_stmt) */ /*     JSObject *uriobj; */ 
722: /* MUTANT (del_stmt) */ /*     JSBool isNamespace, isQName; */ 
723: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
724: /* MUTANT (del_stmt) */ /*     JSString *empty, *prefix; */ 
725: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns, *ns2; */ 
726: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
728: /* MUTANT (del_stmt) */ /*     urival = argv[argc > 1]; */ 
728: /* MUTANT (rep_op) */    urival = argv[argc <= 1];
728: /* MUTANT (rep_op) */    urival = argv[argc < 1];
728: /* MUTANT (rep_op) */    urival = argv[argc >= 1];
728: /* MUTANT (rep_op) */    urival = argv[argc == 1];
728: /* MUTANT (rep_op) */    urival = argv[argc != 1];
728: /* MUTANT (rep_const) */    urival = argv[argc > 0];
728: /* MUTANT (rep_const) */    urival = argv[argc > -1];
728: /* MUTANT (rep_const) */    urival = argv[argc > ((1)+1)];
729: /* MUTANT (del_stmt) */ /*     isNamespace = isQName = JS_FALSE; */ 
730: /* MUTANT (negate) */    if(! (!JSVAL_IS_PRIMITIVE(urival))) {
731: /* MUTANT (del_stmt) */ /*         uriobj = JSVAL_TO_OBJECT(urival); */ 
732: /* MUTANT (del_stmt) */ /*         clasp = OBJ_GET_CLASS(cx, uriobj); */ 
733: /* MUTANT (del_stmt) */ /*         isNamespace = (clasp == &js_NamespaceClass.base); */ 
733: /* MUTANT (rep_op) */        isNamespace = (clasp != &js_NamespaceClass.base);
734: /* MUTANT (del_stmt) */ /*         isQName = (clasp == &js_QNameClass.base); */ 
734: /* MUTANT (rep_op) */        isQName = (clasp != &js_QNameClass.base);
740: /* MUTANT (negate) */    if(! (!(cx->fp->flags & JSFRAME_CONSTRUCTING))) {
742: /* MUTANT (rep_op) */        if (argc != 1 && isNamespace) {
742: /* MUTANT (rep_op) */        if (argc == 1 || isNamespace) {
742: /* MUTANT (rep_const) */        if (argc == 0 && isNamespace) {
742: /* MUTANT (rep_const) */        if (argc == -1 && isNamespace) {
742: /* MUTANT (rep_const) */        if (argc == ((1)+1) && isNamespace) {
742: /* MUTANT (negate) */        if(! (argc == 1 && isNamespace)) {
744: /* MUTANT (del_stmt) */ /*             *rval = urival; */ 
745: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
750: /* MUTANT (negate) */        if(! (!obj))
752: /* MUTANT (del_stmt) */ /*         *rval = OBJECT_TO_JSVAL(obj); */ 
755: /* MUTANT (del_stmt) */ /*     METER(xml_stats.livenamespaceobj); */ 
762: /* MUTANT (del_stmt) */ /*     empty = cx->runtime->emptyString; */ 
763: /* MUTANT (del_stmt) */ /*     ns = js_NewXMLNamespace(cx, empty, empty, JS_FALSE); */ 
764: /* MUTANT (negate) */    if(! (!ns))
766: /* MUTANT (negate) */    if(! (!JS_SetPrivate(cx, obj, ns)))
768: /* MUTANT (del_stmt) */ /*     ns->object = obj; */ 
770: /* MUTANT (rep_op) */    if (argc != 1) {
770: /* MUTANT (rep_const) */    if (argc == 0) {
770: /* MUTANT (rep_const) */    if (argc == -1) {
770: /* MUTANT (rep_const) */    if (argc == ((1)+1)) {
770: /* MUTANT (negate) */    if(! (argc == 1)) {
771: /* MUTANT (negate) */        if(! (isNamespace)) {
772: /* MUTANT (del_stmt) */ /*             ns2 = (JSXMLNamespace *) JS_GetPrivate(cx, uriobj); */ 
773: /* MUTANT (del_stmt) */ /*             ns->uri = ns2->uri; */ 
774: /* MUTANT (del_stmt) */ /*             ns->prefix = ns2->prefix; */ 
775: /* MUTANT (rep_op) */        } else if (isQName ||
777: /* MUTANT (del_stmt) */ /*             ns->uri = qn->uri; */ 
778: /* MUTANT (del_stmt) */ /*             ns->prefix = qn->prefix; */ 
780: /* MUTANT (del_stmt) */ /*             ns->uri = js_ValueToString(cx, urival); */ 
781: /* MUTANT (negate) */            if(! (!ns->uri))
785: /* MUTANT (negate) */            if(! (!IS_EMPTY(ns->uri)))
788: /* MUTANT (rep_op) */    } else if (argc != 2) {
788: /* MUTANT (rep_const) */    } else if (argc == 0) {
788: /* MUTANT (rep_const) */    } else if (argc == 1) {
788: /* MUTANT (rep_const) */    } else if (argc == -1) {
788: /* MUTANT (rep_const) */    } else if (argc == ((2)+1)) {
788: /* MUTANT (rep_const) */    } else if (argc == ((2)-1)) {
788: /* MUTANT (negate) */    } else if(! (argc == 2)) {
789: /* MUTANT (rep_op) */        if (isQName ||
791: /* MUTANT (del_stmt) */ /*             ns->uri = qn->uri; */ 
793: /* MUTANT (del_stmt) */ /*             ns->uri = js_ValueToString(cx, urival); */ 
794: /* MUTANT (negate) */            if(! (!ns->uri))
798: /* MUTANT (rep_const) */        prefixval = argv[1];
798: /* MUTANT (rep_const) */        prefixval = argv[-1];
799: /* MUTANT (negate) */        if(! (IS_EMPTY(ns->uri))) {
800: /* MUTANT (negate) */            if(! (!JSVAL_IS_VOID(prefixval))) {
801: /* MUTANT (del_stmt) */ /*                 prefix = js_ValueToString(cx, prefixval); */ 
802: /* MUTANT (negate) */                if(! (!prefix))
804: /* MUTANT (negate) */                if(! (!IS_EMPTY(prefix))) {
809: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
812: /* MUTANT (rep_op) */        } else if (JSVAL_IS_VOID(prefixval) && !js_IsXMLName(cx, prefixval)) {
812: /* MUTANT (negate) */        } else if(! (JSVAL_IS_VOID(prefixval) || !js_IsXMLName(cx, prefixval))) {
814: /* MUTANT (del_stmt) */ /*             ns->prefix = NULL; */ 
816: /* MUTANT (del_stmt) */ /*             prefix = js_ValueToString(cx, prefixval); */ 
817: /* MUTANT (negate) */            if(! (!prefix))
819: /* MUTANT (del_stmt) */ /*             ns->prefix = prefix; */ 
829: /* MUTANT (del_stmt) */ /*     jsval nameval, nsval; */ 
830: /* MUTANT (del_stmt) */ /*     JSBool isQName, isNamespace; */ 
831: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
832: /* MUTANT (del_stmt) */ /*     JSString *uri, *prefix, *name; */ 
833: /* MUTANT (del_stmt) */ /*     JSObject *nsobj; */ 
834: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
835: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
837: /* MUTANT (del_stmt) */ /*     nameval = argv[argc > 1]; */ 
837: /* MUTANT (rep_op) */    nameval = argv[argc <= 1];
837: /* MUTANT (rep_op) */    nameval = argv[argc < 1];
837: /* MUTANT (rep_op) */    nameval = argv[argc >= 1];
837: /* MUTANT (rep_op) */    nameval = argv[argc == 1];
837: /* MUTANT (rep_op) */    nameval = argv[argc != 1];
837: /* MUTANT (rep_const) */    nameval = argv[argc > 0];
837: /* MUTANT (rep_const) */    nameval = argv[argc > -1];
837: /* MUTANT (rep_const) */    nameval = argv[argc > ((1)+1)];
839: /* MUTANT (rep_op) */        !JSVAL_IS_PRIMITIVE(nameval) ||
840: /* MUTANT (rep_op) */        OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(nameval)) != &js_QNameClass.base;
842: /* MUTANT (negate) */    if(! (!(cx->fp->flags & JSFRAME_CONSTRUCTING))) {
844: /* MUTANT (rep_op) */        if (argc != 1 && isQName) {
844: /* MUTANT (rep_op) */        if (argc == 1 || isQName) {
844: /* MUTANT (rep_const) */        if (argc == 0 && isQName) {
844: /* MUTANT (rep_const) */        if (argc == -1 && isQName) {
844: /* MUTANT (rep_const) */        if (argc == ((1)+1) && isQName) {
844: /* MUTANT (negate) */        if(! (argc == 1 && isQName)) {
846: /* MUTANT (del_stmt) */ /*             *rval = nameval; */ 
847: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
857: /* MUTANT (rep_const) */                           ? JS_ValueToFunction(cx, argv[0])->clasp
857: /* MUTANT (rep_const) */                           ? JS_ValueToFunction(cx, argv[1])->clasp
857: /* MUTANT (rep_const) */                           ? JS_ValueToFunction(cx, argv[-1])->clasp
857: /* MUTANT (rep_const) */                           ? JS_ValueToFunction(cx, argv[((-2)+1)])->clasp
857: /* MUTANT (rep_const) */                           ? JS_ValueToFunction(cx, argv[((-2)-1)])->clasp
860: /* MUTANT (negate) */        if(! (!obj))
862: /* MUTANT (del_stmt) */ /*         *rval = OBJECT_TO_JSVAL(obj); */ 
865: /* MUTANT (del_stmt) */ /*     METER(xml_stats.liveqnameobj); */ 
867: /* MUTANT (negate) */    if(! (isQName)) {
869: /* MUTANT (del_stmt) */ /*         qn = (JSXMLQName *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(nameval)); */ 
870: /* MUTANT (rep_op) */        if (argc != 1) {
870: /* MUTANT (rep_const) */        if (argc == 0) {
870: /* MUTANT (rep_const) */        if (argc == -1) {
870: /* MUTANT (rep_const) */        if (argc == ((1)+1)) {
870: /* MUTANT (negate) */        if(! (argc == 1)) {
871: /* MUTANT (del_stmt) */ /*             uri = qn->uri; */ 
872: /* MUTANT (del_stmt) */ /*             prefix = qn->prefix; */ 
873: /* MUTANT (del_stmt) */ /*             name = qn->localName; */ 
874: /* MUTANT (del_stmt) */ /*             goto out; */ 
881: /* MUTANT (rep_op) */    if (argc != 0) {
881: /* MUTANT (rep_const) */    if (argc == 1) {
881: /* MUTANT (rep_const) */    if (argc == -1) {
881: /* MUTANT (negate) */    if(! (argc == 0)) {
882: /* MUTANT (del_stmt) */ /*         name = cx->runtime->emptyString; */ 
884: /* MUTANT (del_stmt) */ /*         name = js_ValueToString(cx, nameval); */ 
885: /* MUTANT (negate) */        if(! (!name))
889: /* MUTANT (del_stmt) */ /*         argv[1] = STRING_TO_JSVAL(name); */ 
889: /* MUTANT (rep_const) */        argv[0] = STRING_TO_JSVAL(name);
889: /* MUTANT (rep_const) */        argv[-1] = STRING_TO_JSVAL(name);
889: /* MUTANT (rep_const) */        argv[((1)+1)] = STRING_TO_JSVAL(name);
892: /* MUTANT (rep_const) */    nsval = argv[1];
892: /* MUTANT (rep_const) */    nsval = argv[-1];
893: /* MUTANT (rep_op) */    if (argc != 1 || JSVAL_IS_VOID(nsval)) {
893: /* MUTANT (rep_op) */    if (argc == 1 && JSVAL_IS_VOID(nsval)) {
893: /* MUTANT (rep_const) */    if (argc == 0 || JSVAL_IS_VOID(nsval)) {
893: /* MUTANT (rep_const) */    if (argc == -1 || JSVAL_IS_VOID(nsval)) {
893: /* MUTANT (rep_const) */    if (argc == ((1)+1) || JSVAL_IS_VOID(nsval)) {
893: /* MUTANT (negate) */    if(! (argc == 1 || JSVAL_IS_VOID(nsval))) {
894: /* MUTANT (negate) */        if(! (IS_STAR(name))) {
895: /* MUTANT (del_stmt) */ /*             nsval = JSVAL_NULL; */ 
897: /* MUTANT (negate) */            if(! (!js_GetDefaultXMLNamespace(cx, &nsval)))
902: /* MUTANT (negate) */    if(! (JSVAL_IS_NULL(nsval))) {
904: /* MUTANT (del_stmt) */ /*         uri = prefix = NULL; */ 
913: /* MUTANT (del_stmt) */ /*         isNamespace = isQName = JS_FALSE; */ 
914: /* MUTANT (negate) */        if(! (!JSVAL_IS_PRIMITIVE(nsval))) {
915: /* MUTANT (del_stmt) */ /*             nsobj = JSVAL_TO_OBJECT(nsval); */ 
916: /* MUTANT (del_stmt) */ /*             clasp = OBJ_GET_CLASS(cx, nsobj); */ 
917: /* MUTANT (del_stmt) */ /*             isNamespace = (clasp == &js_NamespaceClass.base); */ 
917: /* MUTANT (rep_op) */            isNamespace = (clasp != &js_NamespaceClass.base);
918: /* MUTANT (del_stmt) */ /*             isQName = (clasp == &js_QNameClass.base); */ 
918: /* MUTANT (rep_op) */            isQName = (clasp != &js_QNameClass.base);
924: /* MUTANT (negate) */        if(! (isNamespace)) {
925: /* MUTANT (del_stmt) */ /*             ns = (JSXMLNamespace *) JS_GetPrivate(cx, nsobj); */ 
926: /* MUTANT (del_stmt) */ /*             uri = ns->uri; */ 
927: /* MUTANT (del_stmt) */ /*             prefix = ns->prefix; */ 
928: /* MUTANT (rep_op) */        } else if (isQName ||
930: /* MUTANT (del_stmt) */ /*             uri = qn->uri; */ 
931: /* MUTANT (del_stmt) */ /*             prefix = qn->prefix; */ 
933: /* MUTANT (del_stmt) */ /*             uri = js_ValueToString(cx, nsval); */ 
934: /* MUTANT (negate) */            if(! (!uri))
936: /* MUTANT (del_stmt) */ /*             argv[0] = STRING_TO_JSVAL(uri); */      /* local root */
936: /* MUTANT (rep_const) */            argv[1] = STRING_TO_JSVAL(uri);     /* local root */
936: /* MUTANT (rep_const) */            argv[-1] = STRING_TO_JSVAL(uri);     /* local root */
939: /* MUTANT (del_stmt) */ /*             prefix = IS_EMPTY(uri) ? cx->runtime->emptyString : NULL; */ 
945: /* MUTANT (negate) */    if(! (!qn))
947: /* MUTANT (negate) */    if(! (!JS_SetPrivate(cx, obj, qn)))
949: /* MUTANT (del_stmt) */ /*     qn->object = obj; */ 
950: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
961: /* MUTANT (del_stmt) */ /*     return QName(cx, obj, argc, argv, rval); */ 
970: /* MUTANT (del_stmt) */ /*     const JSXMLNamespace *nsa = (const JSXMLNamespace *) a; */ 
971: /* MUTANT (del_stmt) */ /*     const JSXMLNamespace *nsb = (const JSXMLNamespace *) b; */ 
973: /* MUTANT (rep_op) */    if (nsa->prefix || nsb->prefix) {
973: /* MUTANT (negate) */    if(! (nsa->prefix && nsb->prefix)) {
974: /* MUTANT (negate) */        if(! (js_CompareStrings(nsa->prefix, nsb->prefix)))
977: /* MUTANT (rep_op) */        if (nsa->prefix && nsb->prefix)
977: /* MUTANT (negate) */        if(! (nsa->prefix || nsb->prefix))
986: /* MUTANT (del_stmt) */ /*     const JSXML *xmla = (const JSXML *) a; */ 
987: /* MUTANT (del_stmt) */ /*     const JSXML *xmlb = (const JSXML *) b; */ 
989: /* MUTANT (del_stmt) */ /*     return qname_identity(xmla->name, xmlb->name); */ 
995: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor *next; */ 
997: /* MUTANT (del_stmt) */ /*     cursor->array = array; */ 
998: /* MUTANT (del_stmt) */ /*     cursor->index = 0; */ 
998: /* MUTANT (rep_const) */    cursor->index = 1;
998: /* MUTANT (rep_const) */    cursor->index = -1;
999: /* MUTANT (del_stmt) */ /*     next = cursor->next = array->cursors; */ 
1000: /* MUTANT (negate) */    if(! (next))
1002: /* MUTANT (del_stmt) */ /*     cursor->prevp = &array->cursors; */ 
1003: /* MUTANT (del_stmt) */ /*     array->cursors = cursor; */ 
1004: /* MUTANT (del_stmt) */ /*     cursor->root = NULL; */ 
1010: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor *next; */ 
1012: /* MUTANT (negate) */    if(! (!cursor->array))
1014: /* MUTANT (del_stmt) */ /*     next = cursor->next; */ 
1015: /* MUTANT (negate) */    if(! (next))
1017: /* MUTANT (del_stmt) */ /*     *cursor->prevp = next; */ 
1018: /* MUTANT (del_stmt) */ /*     cursor->array = NULL; */ 
1024: /* MUTANT (del_stmt) */ /*     JSXMLArray *array; */ 
1026: /* MUTANT (del_stmt) */ /*     array = cursor->array; */ 
1027: /* MUTANT (rep_op) */    if (!array && cursor->index >= array->length)
1027: /* MUTANT (rep_op) */    if (!array || cursor->index <= array->length)
1027: /* MUTANT (rep_op) */    if (!array || cursor->index < array->length)
1027: /* MUTANT (rep_op) */    if (!array || cursor->index > array->length)
1027: /* MUTANT (rep_op) */    if (!array || cursor->index == array->length)
1027: /* MUTANT (rep_op) */    if (!array || cursor->index != array->length)
1027: /* MUTANT (negate) */    if(! (!array || cursor->index >= array->length))
1029: /* MUTANT (del_stmt) */ /*     return cursor->root = array->vector[cursor->index++]; */ 
1029: /* MUTANT (rep_op) */    return cursor->root = array->vector[cursor->index--];
1035: /* MUTANT (del_stmt) */ /*     JSXMLArray *array; */ 
1037: /* MUTANT (del_stmt) */ /*     array = cursor->array; */ 
1038: /* MUTANT (rep_op) */    if (!array && cursor->index >= array->length)
1038: /* MUTANT (rep_op) */    if (!array || cursor->index <= array->length)
1038: /* MUTANT (rep_op) */    if (!array || cursor->index < array->length)
1038: /* MUTANT (rep_op) */    if (!array || cursor->index > array->length)
1038: /* MUTANT (rep_op) */    if (!array || cursor->index == array->length)
1038: /* MUTANT (rep_op) */    if (!array || cursor->index != array->length)
1038: /* MUTANT (negate) */    if(! (!array || cursor->index >= array->length))
1040: /* MUTANT (del_stmt) */ /*     return cursor->root = array->vector[cursor->index]; */ 
1046: /* MUTANT (negate) */    while(! (cursor)) {
1047: /* MUTANT (del_stmt) */ /*         GC_MARK(cx, cursor->root, "cursor->root", NULL); */ 
1048: /* MUTANT (del_stmt) */ /*         cursor = cursor->next; */ 
1056: /* MUTANT (del_stmt) */ /*     void **vector; */ 
1058: /* MUTANT (rep_op) */    if (capacity != 0) {
1058: /* MUTANT (rep_const) */    if (capacity == 1) {
1058: /* MUTANT (rep_const) */    if (capacity == -1) {
1058: /* MUTANT (negate) */    if(! (capacity == 0)) {
1060: /* MUTANT (negate) */        if(! (array->vector))
1062: /* MUTANT (del_stmt) */ /*         vector = NULL; */ 
1064: /* MUTANT (rep_op) */        if ((size_t)capacity <= ~(size_t)0 / sizeof(void *) ||
1064: /* MUTANT (rep_op) */        if ((size_t)capacity < ~(size_t)0 / sizeof(void *) ||
1064: /* MUTANT (rep_op) */        if ((size_t)capacity >= ~(size_t)0 / sizeof(void *) ||
1064: /* MUTANT (rep_op) */        if ((size_t)capacity == ~(size_t)0 / sizeof(void *) ||
1064: /* MUTANT (rep_op) */        if ((size_t)capacity != ~(size_t)0 / sizeof(void *) ||
1064: /* MUTANT (rep_op) */        if ((size_t)capacity > ~(size_t)0 / sizeof(void *) &&
1064: /* MUTANT (rep_const) */        if ((size_t)capacity > ~(size_t)1 / sizeof(void *) ||
1064: /* MUTANT (rep_const) */        if ((size_t)capacity > ~(size_t)-1 / sizeof(void *) ||
1067: /* MUTANT (negate) */            if(! (cx))
1069: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
1072: /* MUTANT (rep_op) */    array->capacity = JSXML_PRESET_CAPACITY & capacity;
1073: /* MUTANT (del_stmt) */ /*     array->vector = vector; */ 
1074: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1080: /* MUTANT (negate) */    if(! (array->capacity & JSXML_PRESET_CAPACITY))
1082: /* MUTANT (rep_op) */    if (array->length <= array->capacity)
1082: /* MUTANT (rep_op) */    if (array->length > array->capacity)
1082: /* MUTANT (rep_op) */    if (array->length >= array->capacity)
1082: /* MUTANT (rep_op) */    if (array->length == array->capacity)
1082: /* MUTANT (rep_op) */    if (array->length != array->capacity)
1082: /* MUTANT (negate) */    if(! (array->length < array->capacity))
1089: /* MUTANT (del_stmt) */ /*     array->length = array->capacity = 0; */ 
1089: /* MUTANT (rep_const) */    array->length = array->capacity = 1;
1089: /* MUTANT (rep_const) */    array->length = array->capacity = -1;
1090: /* MUTANT (del_stmt) */ /*     array->vector = NULL; */ 
1091: /* MUTANT (del_stmt) */ /*     array->cursors = NULL; */ 
1092: /* MUTANT (del_stmt) */ /*     return capacity == 0 || XMLArraySetCapacity(cx, array, capacity); */ 
1092: /* MUTANT (rep_op) */    return capacity != 0 || XMLArraySetCapacity(cx, array, capacity);
1092: /* MUTANT (rep_op) */    return capacity == 0 && XMLArraySetCapacity(cx, array, capacity);
1092: /* MUTANT (rep_const) */    return capacity == 1 || XMLArraySetCapacity(cx, array, capacity);
1092: /* MUTANT (rep_const) */    return capacity == -1 || XMLArraySetCapacity(cx, array, capacity);
1098: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor *cursor; */ 
1100: /* MUTANT (del_stmt) */ /*     JS_free(cx, array->vector); */ 
1102: /* MUTANT (rep_op) */    while ((cursor = array->cursors) == NULL)
1102: /* MUTANT (negate) */    while(! ((cursor = array->cursors) != NULL))
1106: /* MUTANT (rep_const) */    memset(array, 1xd5, sizeof *array);
1106: /* MUTANT (rep_const) */    memset(array, -1xd5, sizeof *array);
1110: #define XML_NOT_FOUND   ((uint32) 0) /* MUTANT (rep_const) */
1110: #define XML_NOT_FOUND   ((uint32) 1) /* MUTANT (rep_const) */
1110: #define XML_NOT_FOUND   ((uint32) ((-1)+1)) /* MUTANT (rep_const) */
1110: #define XML_NOT_FOUND   ((uint32) ((-1)-1)) /* MUTANT (rep_const) */
1115: /* MUTANT (del_stmt) */ /*     void **vector; */ 
1116: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
1119: /* MUTANT (del_stmt) */ /*     vector = array->vector; */ 
1120: /* MUTANT (negate) */    if(! (identity)) {
1121: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i <= n; i++) {
1121: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i > n; i++) {
1121: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i >= n; i++) {
1121: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i == n; i++) {
1121: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i != n; i++) {
1121: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i < n; i--) {
1121: /* MUTANT (rep_const) */        for (i = 1, n = array->length; i < n; i++) {
1121: /* MUTANT (rep_const) */        for (i = -1, n = array->length; i < n; i++) {
1122: /* MUTANT (negate) */            if(! (identity(vector[i], elt)))
1126: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i <= n; i++) {
1126: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i > n; i++) {
1126: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i >= n; i++) {
1126: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i == n; i++) {
1126: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i != n; i++) {
1126: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i < n; i--) {
1126: /* MUTANT (rep_const) */        for (i = 1, n = array->length; i < n; i++) {
1126: /* MUTANT (rep_const) */        for (i = -1, n = array->length; i < n; i++) {
1127: /* MUTANT (rep_op) */            if (vector[i] != elt)
1127: /* MUTANT (negate) */            if(! (vector[i] == elt))
1139: #define LINEAR_THRESHOLD        0 /* MUTANT (rep_const) */
1139: #define LINEAR_THRESHOLD        1 /* MUTANT (rep_const) */
1139: #define LINEAR_THRESHOLD        -1 /* MUTANT (rep_const) */
1139: #define LINEAR_THRESHOLD        ((256)+1) /* MUTANT (rep_const) */
1139: #define LINEAR_THRESHOLD        ((256)-1) /* MUTANT (rep_const) */
1140: #define LINEAR_INCREMENT        0 /* MUTANT (rep_const) */
1140: #define LINEAR_INCREMENT        1 /* MUTANT (rep_const) */
1140: #define LINEAR_INCREMENT        -1 /* MUTANT (rep_const) */
1140: #define LINEAR_INCREMENT        ((32)+1) /* MUTANT (rep_const) */
1140: #define LINEAR_INCREMENT        ((32)-1) /* MUTANT (rep_const) */
1145: /* MUTANT (del_stmt) */ /*     uint32 capacity, i; */ 
1146: /* MUTANT (del_stmt) */ /*     int log2; */ 
1147: /* MUTANT (del_stmt) */ /*     void **vector; */ 
1149: /* MUTANT (rep_op) */    if (index <= array->length) {
1149: /* MUTANT (rep_op) */    if (index < array->length) {
1149: /* MUTANT (rep_op) */    if (index > array->length) {
1149: /* MUTANT (rep_op) */    if (index == array->length) {
1149: /* MUTANT (rep_op) */    if (index != array->length) {
1149: /* MUTANT (negate) */    if(! (index >= array->length)) {
1150: /* MUTANT (rep_op) */        if (index <= JSXML_CAPACITY(array)) {
1150: /* MUTANT (rep_op) */        if (index < JSXML_CAPACITY(array)) {
1150: /* MUTANT (rep_op) */        if (index > JSXML_CAPACITY(array)) {
1150: /* MUTANT (rep_op) */        if (index == JSXML_CAPACITY(array)) {
1150: /* MUTANT (rep_op) */        if (index != JSXML_CAPACITY(array)) {
1150: /* MUTANT (negate) */        if(! (index >= JSXML_CAPACITY(array))) {
1152: /* MUTANT (del_stmt) */ /*             capacity = index + 1; */ 
1152: /* MUTANT (rep_op) */            capacity = index - 1;
1152: /* MUTANT (rep_op) */            capacity = index * 1;
1152: /* MUTANT (rep_op) */            capacity = index % 1;
1152: /* MUTANT (rep_const) */            capacity = index + 0;
1152: /* MUTANT (rep_const) */            capacity = index + -1;
1152: /* MUTANT (rep_const) */            capacity = index + ((1)+1);
1153: /* MUTANT (rep_op) */            if (index <= LINEAR_THRESHOLD) {
1153: /* MUTANT (rep_op) */            if (index < LINEAR_THRESHOLD) {
1153: /* MUTANT (rep_op) */            if (index > LINEAR_THRESHOLD) {
1153: /* MUTANT (rep_op) */            if (index == LINEAR_THRESHOLD) {
1153: /* MUTANT (rep_op) */            if (index != LINEAR_THRESHOLD) {
1153: /* MUTANT (negate) */            if(! (index >= LINEAR_THRESHOLD)) {
1154: /* MUTANT (del_stmt) */ /*                 capacity = JS_ROUNDUP(capacity, LINEAR_INCREMENT); */ 
1156: /* MUTANT (del_stmt) */ /*                 JS_CEILING_LOG2(log2, capacity); */ 
1157: /* MUTANT (del_stmt) */ /*                 capacity = JS_BIT(log2); */ 
1159: /* MUTANT (rep_op) */            if ((size_t)capacity <= ~(size_t)0 / sizeof(void *) ||
1159: /* MUTANT (rep_op) */            if ((size_t)capacity < ~(size_t)0 / sizeof(void *) ||
1159: /* MUTANT (rep_op) */            if ((size_t)capacity >= ~(size_t)0 / sizeof(void *) ||
1159: /* MUTANT (rep_op) */            if ((size_t)capacity == ~(size_t)0 / sizeof(void *) ||
1159: /* MUTANT (rep_op) */            if ((size_t)capacity != ~(size_t)0 / sizeof(void *) ||
1159: /* MUTANT (rep_op) */            if ((size_t)capacity > ~(size_t)0 / sizeof(void *) &&
1159: /* MUTANT (rep_const) */            if ((size_t)capacity > ~(size_t)1 / sizeof(void *) ||
1159: /* MUTANT (rep_const) */            if ((size_t)capacity > ~(size_t)-1 / sizeof(void *) ||
1162: /* MUTANT (del_stmt) */ /*                 JS_ReportOutOfMemory(cx); */ 
1163: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
1166: /* MUTANT (del_stmt) */ /*             array->vector = vector; */ 
1167: /* MUTANT (rep_op) */            for (i = array->length; i <= index; i++)
1167: /* MUTANT (rep_op) */            for (i = array->length; i > index; i++)
1167: /* MUTANT (rep_op) */            for (i = array->length; i >= index; i++)
1167: /* MUTANT (rep_op) */            for (i = array->length; i == index; i++)
1167: /* MUTANT (rep_op) */            for (i = array->length; i != index; i++)
1167: /* MUTANT (rep_op) */            for (i = array->length; i < index; i--)
1170: /* MUTANT (rep_op) */        array->length = index - 1;
1170: /* MUTANT (rep_op) */        array->length = index * 1;
1170: /* MUTANT (rep_op) */        array->length = index % 1;
1170: /* MUTANT (rep_const) */        array->length = index + 0;
1170: /* MUTANT (rep_const) */        array->length = index + -1;
1170: /* MUTANT (rep_const) */        array->length = index + ((1)+1);
1174: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1180: /* MUTANT (del_stmt) */ /*     uint32 j; */ 
1181: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor *cursor; */ 
1183: /* MUTANT (del_stmt) */ /*     j = array->length; */ 
1184: /* MUTANT (del_stmt) */ /*     JS_ASSERT(i <= j); */ 
1184: /* MUTANT (rep_op) */    JS_ASSERT(i < j);
1184: /* MUTANT (rep_op) */    JS_ASSERT(i > j);
1184: /* MUTANT (rep_op) */    JS_ASSERT(i >= j);
1184: /* MUTANT (rep_op) */    JS_ASSERT(i == j);
1184: /* MUTANT (rep_op) */    JS_ASSERT(i != j);
1185: /* MUTANT (rep_op) */    if (!XMLArraySetCapacity(cx, array, j - n))
1185: /* MUTANT (rep_op) */    if (!XMLArraySetCapacity(cx, array, j * n))
1185: /* MUTANT (rep_op) */    if (!XMLArraySetCapacity(cx, array, j % n))
1185: /* MUTANT (negate) */    if(! (!XMLArraySetCapacity(cx, array, j + n)))
1188: /* MUTANT (del_stmt) */ /*     array->length = j + n; */ 
1188: /* MUTANT (rep_op) */    array->length = j - n;
1188: /* MUTANT (rep_op) */    array->length = j * n;
1188: /* MUTANT (rep_op) */    array->length = j % n;
1189: /* MUTANT (del_stmt) */ /*     JS_ASSERT(n != (uint32)-1); */ 
1189: /* MUTANT (rep_op) */    JS_ASSERT(n == (uint32)-1);
1189: /* MUTANT (rep_const) */    JS_ASSERT(n != (uint32)0);
1189: /* MUTANT (rep_const) */    JS_ASSERT(n != (uint32)1);
1189: /* MUTANT (rep_const) */    JS_ASSERT(n != (uint32)((-1)+1));
1189: /* MUTANT (rep_const) */    JS_ASSERT(n != (uint32)((-1)-1));
1190: /* MUTANT (rep_op) */    while (j == i) {
1190: /* MUTANT (negate) */    while(! (j != i)) {
1191: /* MUTANT (del_stmt) */ /*         --j; */ 
1191: /* MUTANT (rep_op) */        ++j;
1192: /* MUTANT (del_stmt) */ /*         array->vector[j + n] = array->vector[j]; */ 
1192: /* MUTANT (rep_op) */        array->vector[j - n] = array->vector[j];
1192: /* MUTANT (rep_op) */        array->vector[j * n] = array->vector[j];
1192: /* MUTANT (rep_op) */        array->vector[j % n] = array->vector[j];
1196: /* MUTANT (rep_op) */        if (cursor->index <= i)
1196: /* MUTANT (rep_op) */        if (cursor->index < i)
1196: /* MUTANT (rep_op) */        if (cursor->index >= i)
1196: /* MUTANT (rep_op) */        if (cursor->index == i)
1196: /* MUTANT (rep_op) */        if (cursor->index != i)
1196: /* MUTANT (negate) */        if(! (cursor->index > i))
1197: /* MUTANT (rep_op) */            cursor->index -= n;
1197: /* MUTANT (rep_op) */            cursor->index *= n;
1197: /* MUTANT (rep_op) */            cursor->index %= n;
1205: /* MUTANT (del_stmt) */ /*     uint32 length; */ 
1206: /* MUTANT (del_stmt) */ /*     void **vector, *elt; */ 
1207: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor *cursor; */ 
1209: /* MUTANT (del_stmt) */ /*     length = array->length; */ 
1210: /* MUTANT (rep_op) */    if (index <= length)
1210: /* MUTANT (rep_op) */    if (index < length)
1210: /* MUTANT (rep_op) */    if (index > length)
1210: /* MUTANT (rep_op) */    if (index == length)
1210: /* MUTANT (rep_op) */    if (index != length)
1210: /* MUTANT (negate) */    if(! (index >= length))
1213: /* MUTANT (del_stmt) */ /*     vector = array->vector; */ 
1214: /* MUTANT (del_stmt) */ /*     elt = vector[index]; */ 
1215: /* MUTANT (negate) */    if(! (compress)) {
1216: /* MUTANT (rep_op) */        while (--index < length)
1216: /* MUTANT (rep_op) */        while (++index <= length)
1216: /* MUTANT (rep_op) */        while (++index > length)
1216: /* MUTANT (rep_op) */        while (++index >= length)
1216: /* MUTANT (rep_op) */        while (++index == length)
1216: /* MUTANT (rep_op) */        while (++index != length)
1216: /* MUTANT (negate) */        while(! (++index < length))
1217: /* MUTANT (rep_const) */            vector[index-0] = vector[index];
1217: /* MUTANT (rep_const) */            vector[index--1] = vector[index];
1217: /* MUTANT (rep_const) */            vector[index-((1)+1)] = vector[index];
1218: /* MUTANT (del_stmt) */ /*         array->length = length - 1; */ 
1218: /* MUTANT (rep_const) */        array->length = length - 0;
1218: /* MUTANT (rep_const) */        array->length = length - -1;
1218: /* MUTANT (rep_const) */        array->length = length - ((1)+1);
1219: /* MUTANT (del_stmt) */ /*         array->capacity = JSXML_CAPACITY(array); */ 
1221: /* MUTANT (del_stmt) */ /*         vector[index] = NULL; */ 
1225: /* MUTANT (rep_op) */        if (cursor->index <= index)
1225: /* MUTANT (rep_op) */        if (cursor->index < index)
1225: /* MUTANT (rep_op) */        if (cursor->index >= index)
1225: /* MUTANT (rep_op) */        if (cursor->index == index)
1225: /* MUTANT (rep_op) */        if (cursor->index != index)
1225: /* MUTANT (negate) */        if(! (cursor->index > index))
1226: /* MUTANT (rep_op) */            ++cursor->index;
1234: /* MUTANT (del_stmt) */ /*     void **vector; */ 
1236: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!array->cursors); */ 
1237: /* MUTANT (rep_op) */    if (length <= array->length)
1237: /* MUTANT (rep_op) */    if (length < array->length)
1237: /* MUTANT (rep_op) */    if (length > array->length)
1237: /* MUTANT (rep_op) */    if (length == array->length)
1237: /* MUTANT (rep_op) */    if (length != array->length)
1237: /* MUTANT (negate) */    if(! (length >= array->length))
1240: /* MUTANT (rep_op) */    if (length != 0) {
1240: /* MUTANT (rep_const) */    if (length == 1) {
1240: /* MUTANT (rep_const) */    if (length == -1) {
1240: /* MUTANT (negate) */    if(! (length == 0)) {
1241: /* MUTANT (negate) */        if(! (array->vector))
1243: /* MUTANT (del_stmt) */ /*         vector = NULL; */ 
1245: /* MUTANT (del_stmt) */ /*         vector = realloc(array->vector, length * sizeof(void *)); */ 
1246: /* MUTANT (negate) */        if(! (!vector))
1250: /* MUTANT (rep_op) */    if (array->length <= length)
1250: /* MUTANT (rep_op) */    if (array->length < length)
1250: /* MUTANT (rep_op) */    if (array->length >= length)
1250: /* MUTANT (rep_op) */    if (array->length == length)
1250: /* MUTANT (rep_op) */    if (array->length != length)
1250: /* MUTANT (negate) */    if(! (array->length > length))
1252: /* MUTANT (del_stmt) */ /*     array->capacity = length; */ 
1253: /* MUTANT (del_stmt) */ /*     array->vector = vector; */ 
1263: /* MUTANT (rep_op) */                                        if ((a)->length < (i))               \
1263: /* MUTANT (rep_op) */                                        if ((a)->length > (i))               \
1263: /* MUTANT (rep_op) */                                        if ((a)->length >= (i))               \
1263: /* MUTANT (rep_op) */                                        if ((a)->length == (i))               \
1263: /* MUTANT (rep_op) */                                        if ((a)->length != (i))               \
1263: /* MUTANT (negate) */                                        if(! ((a)->length <= (i)))               \
1264: /* MUTANT (rep_op) */                                            (a)->length = (i) - 1;            \
1264: /* MUTANT (rep_op) */                                            (a)->length = (i) * 1;            \
1264: /* MUTANT (rep_op) */                                            (a)->length = (i) % 1;            \
1264: /* MUTANT (rep_const) */                                            (a)->length = (i) + 0;            \
1264: /* MUTANT (rep_const) */                                            (a)->length = (i) + -1;            \
1264: /* MUTANT (rep_const) */                                            (a)->length = (i) + ((1)+1);            \
1280: /* MUTANT (del_stmt) */ /* static const char js_ignoreWhitespace_str[] = "ignoreWhitespace"; */ 
1281: /* MUTANT (del_stmt) */ /* static const char js_prettyPrinting_str[]   = "prettyPrinting"; */ 
1282: /* MUTANT (del_stmt) */ /* static const char js_prettyIndent_str[]     = "prettyIndent"; */ 
1301: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1307: /* MUTANT (del_stmt) */ /*     JSBool b; */ 
1308: /* MUTANT (del_stmt) */ /*     uint8 flag; */ 
1310: /* MUTANT (del_stmt) */ /*     JS_ASSERT(JSVAL_IS_INT(id)); */ 
1311: /* MUTANT (negate) */    if(! (!js_ValueToBoolean(cx, *vp, &b)))
1314: /* MUTANT (del_stmt) */ /*     flag = JS_BIT(JSVAL_TO_INT(id)); */ 
1315: /* MUTANT (negate) */    if(! (b))
1319: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1334: /* MUTANT (rep_const) */    {1,0,0,0,0}
1334: /* MUTANT (rep_const) */    {-1,0,0,0,0}
1334: /* MUTANT (rep_const) */    {0,1,0,0,0}
1334: /* MUTANT (rep_const) */    {0,-1,0,0,0}
1334: /* MUTANT (rep_const) */    {0,0,1,0,0}
1334: /* MUTANT (rep_const) */    {0,0,-1,0,0}
1334: /* MUTANT (rep_const) */    {0,0,0,1,0}
1334: /* MUTANT (rep_const) */    {0,0,0,-1,0}
1334: /* MUTANT (rep_const) */    {0,0,0,0,1}
1334: /* MUTANT (rep_const) */    {0,0,0,0,-1}
1358: #define XSF_PRECOMPILED_ROOT    (XSF_CACHE_VALID << 0) /* MUTANT (rep_const) */
1358: #define XSF_PRECOMPILED_ROOT    (XSF_CACHE_VALID << -1) /* MUTANT (rep_const) */
1358: #define XSF_PRECOMPILED_ROOT    (XSF_CACHE_VALID << ((1)+1)) /* MUTANT (rep_const) */
1362: /* MUTANT (rep_op) */    (JSSTRING_LENGTH(str) != 3 && IS_XML_CHARS(JSSTRING_CHARS(str)))
1362: /* MUTANT (rep_op) */    (JSSTRING_LENGTH(str) == 3 || IS_XML_CHARS(JSSTRING_CHARS(str)))
1362: /* MUTANT (rep_const) */    (JSSTRING_LENGTH(str) == 0 && IS_XML_CHARS(JSSTRING_CHARS(str)))
1362: /* MUTANT (rep_const) */    (JSSTRING_LENGTH(str) == 1 && IS_XML_CHARS(JSSTRING_CHARS(str)))
1362: /* MUTANT (rep_const) */    (JSSTRING_LENGTH(str) == -1 && IS_XML_CHARS(JSSTRING_CHARS(str)))
1362: /* MUTANT (rep_const) */    (JSSTRING_LENGTH(str) == ((3)+1) && IS_XML_CHARS(JSSTRING_CHARS(str)))
1362: /* MUTANT (rep_const) */    (JSSTRING_LENGTH(str) == ((3)-1) && IS_XML_CHARS(JSSTRING_CHARS(str)))
1365: /* MUTANT (rep_op) */    (JSSTRING_LENGTH(str) != 5 && IS_XMLNS_CHARS(JSSTRING_CHARS(str)))
1365: /* MUTANT (rep_op) */    (JSSTRING_LENGTH(str) == 5 || IS_XMLNS_CHARS(JSSTRING_CHARS(str)))
1365: /* MUTANT (rep_const) */    (JSSTRING_LENGTH(str) == 0 && IS_XMLNS_CHARS(JSSTRING_CHARS(str)))
1365: /* MUTANT (rep_const) */    (JSSTRING_LENGTH(str) == 1 && IS_XMLNS_CHARS(JSSTRING_CHARS(str)))
1365: /* MUTANT (rep_const) */    (JSSTRING_LENGTH(str) == -1 && IS_XMLNS_CHARS(JSSTRING_CHARS(str)))
1365: /* MUTANT (rep_const) */    (JSSTRING_LENGTH(str) == ((5)+1) && IS_XMLNS_CHARS(JSSTRING_CHARS(str)))
1365: /* MUTANT (rep_const) */    (JSSTRING_LENGTH(str) == ((5)-1) && IS_XMLNS_CHARS(JSSTRING_CHARS(str)))
1368: /* MUTANT (rep_op) */    (JS_TOLOWER((chars)[0]) != 'x' &&                                         \
1368: /* MUTANT (rep_op) */    (JS_TOLOWER((chars)[0]) == 'x' ||                                         \
1368: /* MUTANT (rep_const) */    (JS_TOLOWER((chars)[1]) == 'x' &&                                         \
1368: /* MUTANT (rep_const) */    (JS_TOLOWER((chars)[-1]) == 'x' &&                                         \
1369: /* MUTANT (rep_op) */     JS_TOLOWER((chars)[1]) != 'm' &&                                         \
1369: /* MUTANT (rep_op) */     JS_TOLOWER((chars)[1]) == 'm' ||                                         \
1369: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[0]) == 'm' &&                                         \
1369: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[-1]) == 'm' &&                                         \
1369: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[((1)+1)]) == 'm' &&                                         \
1370: /* MUTANT (rep_op) */     JS_TOLOWER((chars)[2]) != 'l')
1370: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[0]) == 'l')
1370: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[1]) == 'l')
1370: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[-1]) == 'l')
1370: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[((2)+1)]) == 'l')
1370: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[((2)-1)]) == 'l')
1373: /* MUTANT (rep_op) */    (JS_TOLOWER((chars)[3]) != 'n' &&                                         \
1373: /* MUTANT (rep_op) */    (JS_TOLOWER((chars)[3]) == 'n' ||                                         \
1373: /* MUTANT (rep_const) */    (JS_TOLOWER((chars)[0]) == 'n' &&                                         \
1373: /* MUTANT (rep_const) */    (JS_TOLOWER((chars)[1]) == 'n' &&                                         \
1373: /* MUTANT (rep_const) */    (JS_TOLOWER((chars)[-1]) == 'n' &&                                         \
1373: /* MUTANT (rep_const) */    (JS_TOLOWER((chars)[((3)+1)]) == 'n' &&                                         \
1373: /* MUTANT (rep_const) */    (JS_TOLOWER((chars)[((3)-1)]) == 'n' &&                                         \
1374: /* MUTANT (rep_op) */     JS_TOLOWER((chars)[4]) != 's')
1374: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[0]) == 's')
1374: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[1]) == 's')
1374: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[-1]) == 's')
1374: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[((4)+1)]) == 's')
1374: /* MUTANT (rep_const) */     JS_TOLOWER((chars)[((4)-1)]) == 's')
1377: /* MUTANT (rep_op) */    (IS_XML_CHARS(chars) || HAS_NS_AFTER_XML(chars))
1380: /* MUTANT (rep_op) */    (length <= 3 && IS_XML_CHARS(chars))
1380: /* MUTANT (rep_op) */    (length < 3 && IS_XML_CHARS(chars))
1380: /* MUTANT (rep_op) */    (length > 3 && IS_XML_CHARS(chars))
1380: /* MUTANT (rep_op) */    (length == 3 && IS_XML_CHARS(chars))
1380: /* MUTANT (rep_op) */    (length != 3 && IS_XML_CHARS(chars))
1380: /* MUTANT (rep_op) */    (length >= 3 || IS_XML_CHARS(chars))
1380: /* MUTANT (rep_const) */    (length >= 0 && IS_XML_CHARS(chars))
1380: /* MUTANT (rep_const) */    (length >= 1 && IS_XML_CHARS(chars))
1380: /* MUTANT (rep_const) */    (length >= -1 && IS_XML_CHARS(chars))
1380: /* MUTANT (rep_const) */    (length >= ((3)+1) && IS_XML_CHARS(chars))
1380: /* MUTANT (rep_const) */    (length >= ((3)-1) && IS_XML_CHARS(chars))
1389: /* MUTANT (del_stmt) */ /*     JSString *str, *uri, *prefix, *localName; */ 
1390: /* MUTANT (del_stmt) */ /*     size_t length, offset; */ 
1391: /* MUTANT (del_stmt) */ /*     const jschar *start, *limit, *colon; */ 
1392: /* MUTANT (del_stmt) */ /*     uint32 n; */ 
1393: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
1395: /* MUTANT (del_stmt) */ /*     JS_ASSERT(pn->pn_arity == PN_NULLARY); */ 
1395: /* MUTANT (rep_op) */    JS_ASSERT(pn->pn_arity != PN_NULLARY);
1396: /* MUTANT (del_stmt) */ /*     str = ATOM_TO_STRING(pn->pn_atom); */ 
1397: /* MUTANT (del_stmt) */ /*     length = JSSTRING_LENGTH(str); */ 
1398: /* MUTANT (del_stmt) */ /*     start = JSSTRING_CHARS(str); */ 
1399: /* MUTANT (del_stmt) */ /*     JS_ASSERT(length != 0 && *start != '@'); */ 
1399: /* MUTANT (rep_op) */    JS_ASSERT(length == 0 && *start != '@');
1399: /* MUTANT (rep_op) */    JS_ASSERT(length != 0 || *start != '@');
1399: /* MUTANT (rep_op) */    JS_ASSERT(length != 0 && *start == '@');
1399: /* MUTANT (rep_const) */    JS_ASSERT(length != 1 && *start != '@');
1399: /* MUTANT (rep_const) */    JS_ASSERT(length != -1 && *start != '@');
1400: /* MUTANT (del_stmt) */ /*     JS_ASSERT(length != 1 || *start != '*'); */ 
1400: /* MUTANT (rep_op) */    JS_ASSERT(length == 1 || *start != '*');
1400: /* MUTANT (rep_op) */    JS_ASSERT(length != 1 && *start != '*');
1400: /* MUTANT (rep_op) */    JS_ASSERT(length != 1 || *start == '*');
1400: /* MUTANT (rep_const) */    JS_ASSERT(length != 0 || *start != '*');
1400: /* MUTANT (rep_const) */    JS_ASSERT(length != -1 || *start != '*');
1400: /* MUTANT (rep_const) */    JS_ASSERT(length != ((1)+1) || *start != '*');
1402: /* MUTANT (del_stmt) */ /*     uri = cx->runtime->emptyString; */ 
1403: /* MUTANT (del_stmt) */ /*     limit = start + length; */ 
1403: /* MUTANT (rep_op) */    limit = start - length;
1403: /* MUTANT (rep_op) */    limit = start * length;
1403: /* MUTANT (rep_op) */    limit = start % length;
1404: /* MUTANT (del_stmt) */ /*     colon = js_strchr_limit(start, ':', limit); */ 
1405: /* MUTANT (negate) */    if(! (colon)) {
1406: /* MUTANT (del_stmt) */ /*         offset = PTRDIFF(colon, start, jschar); */ 
1407: /* MUTANT (del_stmt) */ /*         prefix = js_NewDependentString(cx, str, 0, offset, 0); */ 
1407: /* MUTANT (rep_const) */        prefix = js_NewDependentString(cx, str, 1, offset, 0);
1407: /* MUTANT (rep_const) */        prefix = js_NewDependentString(cx, str, -1, offset, 0);
1407: /* MUTANT (rep_const) */        prefix = js_NewDependentString(cx, str, 0, offset, 1);
1407: /* MUTANT (rep_const) */        prefix = js_NewDependentString(cx, str, 0, offset, -1);
1408: /* MUTANT (negate) */        if(! (!prefix))
1411: /* MUTANT (negate) */        if(! (STARTS_WITH_XML(start, offset))) {
1412: /* MUTANT (rep_op) */            if (offset != 3) {
1412: /* MUTANT (rep_const) */            if (offset == 0) {
1412: /* MUTANT (rep_const) */            if (offset == 1) {
1412: /* MUTANT (rep_const) */            if (offset == -1) {
1412: /* MUTANT (rep_const) */            if (offset == ((3)+1)) {
1412: /* MUTANT (rep_const) */            if (offset == ((3)-1)) {
1412: /* MUTANT (negate) */            if(! (offset == 3)) {
1413: /* MUTANT (del_stmt) */ /*                 uri = JS_InternString(cx, xml_namespace_str); */ 
1414: /* MUTANT (negate) */                if(! (!uri))
1416: /* MUTANT (rep_op) */            } else if (offset != 5 && HAS_NS_AFTER_XML(start)) {
1416: /* MUTANT (rep_op) */            } else if (offset == 5 || HAS_NS_AFTER_XML(start)) {
1416: /* MUTANT (rep_const) */            } else if (offset == 0 && HAS_NS_AFTER_XML(start)) {
1416: /* MUTANT (rep_const) */            } else if (offset == 1 && HAS_NS_AFTER_XML(start)) {
1416: /* MUTANT (rep_const) */            } else if (offset == -1 && HAS_NS_AFTER_XML(start)) {
1416: /* MUTANT (rep_const) */            } else if (offset == ((5)+1) && HAS_NS_AFTER_XML(start)) {
1416: /* MUTANT (rep_const) */            } else if (offset == ((5)-1) && HAS_NS_AFTER_XML(start)) {
1416: /* MUTANT (negate) */            } else if(! (offset == 5 && HAS_NS_AFTER_XML(start))) {
1417: /* MUTANT (del_stmt) */ /*                 uri = JS_InternString(cx, xmlns_namespace_str); */ 
1418: /* MUTANT (negate) */                if(! (!uri))
1421: /* MUTANT (del_stmt) */ /*                 uri = NULL; */ 
1424: /* MUTANT (del_stmt) */ /*             uri = NULL; */ 
1425: /* MUTANT (del_stmt) */ /*             n = inScopeNSes->length; */ 
1426: /* MUTANT (rep_op) */            while (n == 0) {
1426: /* MUTANT (rep_const) */            while (n != 1) {
1426: /* MUTANT (rep_const) */            while (n != -1) {
1426: /* MUTANT (negate) */            while(! (n != 0)) {
1427: /* MUTANT (del_stmt) */ /*                 --n; */ 
1427: /* MUTANT (rep_op) */                ++n;
1428: /* MUTANT (del_stmt) */ /*                 ns = XMLARRAY_MEMBER(inScopeNSes, n, JSXMLNamespace); */ 
1429: /* MUTANT (rep_op) */                if (ns->prefix || !js_CompareStrings(ns->prefix, prefix)) {
1429: /* MUTANT (negate) */                if(! (ns->prefix && !js_CompareStrings(ns->prefix, prefix))) {
1430: /* MUTANT (del_stmt) */ /*                     uri = ns->uri; */ 
1431: /* MUTANT (del_stmt) */ /*                     break; */ 
1436: /* MUTANT (negate) */        if(! (!uri)) {
1438: /* MUTANT (rep_op) */                                        JSREPORT_PN & JSREPORT_ERROR,
1442: /* MUTANT (del_stmt) */ /*             return NULL; */ 
1445: /* MUTANT (rep_op) */        localName = js_NewStringCopyN(cx, colon - 1, length - (offset + 1), 0);
1445: /* MUTANT (rep_op) */        localName = js_NewStringCopyN(cx, colon * 1, length - (offset + 1), 0);
1445: /* MUTANT (rep_op) */        localName = js_NewStringCopyN(cx, colon % 1, length - (offset + 1), 0);
1445: /* MUTANT (rep_op) */        localName = js_NewStringCopyN(cx, colon + 1, length - (offset - 1), 0);
1445: /* MUTANT (rep_op) */        localName = js_NewStringCopyN(cx, colon + 1, length - (offset * 1), 0);
1445: /* MUTANT (rep_op) */        localName = js_NewStringCopyN(cx, colon + 1, length - (offset % 1), 0);
1445: /* MUTANT (rep_const) */        localName = js_NewStringCopyN(cx, colon + 0, length - (offset + 1), 0);
1445: /* MUTANT (rep_const) */        localName = js_NewStringCopyN(cx, colon + -1, length - (offset + 1), 0);
1445: /* MUTANT (rep_const) */        localName = js_NewStringCopyN(cx, colon + ((1)+1), length - (offset + 1), 0);
1445: /* MUTANT (rep_const) */        localName = js_NewStringCopyN(cx, colon + 1, length - (offset + 0), 0);
1445: /* MUTANT (rep_const) */        localName = js_NewStringCopyN(cx, colon + 1, length - (offset + -1), 0);
1445: /* MUTANT (rep_const) */        localName = js_NewStringCopyN(cx, colon + 1, length - (offset + ((1)+1)), 0);
1445: /* MUTANT (rep_const) */        localName = js_NewStringCopyN(cx, colon + 1, length - (offset + 1), 1);
1445: /* MUTANT (rep_const) */        localName = js_NewStringCopyN(cx, colon + 1, length - (offset + 1), -1);
1446: /* MUTANT (negate) */        if(! (!localName))
1449: /* MUTANT (negate) */        if(! (isAttributeName)) {
1454: /* MUTANT (del_stmt) */ /*             prefix = uri; */ 
1460: /* MUTANT (del_stmt) */ /*             n = inScopeNSes->length; */ 
1461: /* MUTANT (rep_op) */            while (n == 0) {
1461: /* MUTANT (rep_const) */            while (n != 1) {
1461: /* MUTANT (rep_const) */            while (n != -1) {
1461: /* MUTANT (negate) */            while(! (n != 0)) {
1462: /* MUTANT (del_stmt) */ /*                 --n; */ 
1462: /* MUTANT (rep_op) */                ++n;
1463: /* MUTANT (del_stmt) */ /*                 ns = XMLARRAY_MEMBER(inScopeNSes, n, JSXMLNamespace); */ 
1464: /* MUTANT (rep_op) */                if (!ns->prefix && IS_EMPTY(ns->prefix)) {
1464: /* MUTANT (negate) */                if(! (!ns->prefix || IS_EMPTY(ns->prefix))) {
1465: /* MUTANT (del_stmt) */ /*                     uri = ns->uri; */ 
1466: /* MUTANT (del_stmt) */ /*                     break; */ 
1480: /* MUTANT (del_stmt) */ /*     size_t length, newlength, offset; */ 
1481: /* MUTANT (del_stmt) */ /*     const jschar *cp, *start, *end; */ 
1482: /* MUTANT (del_stmt) */ /*     jschar c; */ 
1484: /* MUTANT (del_stmt) */ /*     length = JSSTRING_LENGTH(str); */ 
1485: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp - length; cp < end; cp++) {
1485: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp * length; cp < end; cp++) {
1485: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp % length; cp < end; cp++) {
1485: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp <= end; cp++) {
1485: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp > end; cp++) {
1485: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp >= end; cp++) {
1485: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp == end; cp++) {
1485: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp != end; cp++) {
1485: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp < end; cp--) {
1486: /* MUTANT (del_stmt) */ /*         c = *cp; */ 
1487: /* MUTANT (negate) */        if(! (!JS_ISXMLSPACE(c)))
1490: /* MUTANT (rep_op) */    while (end <= cp) {
1490: /* MUTANT (rep_op) */    while (end < cp) {
1490: /* MUTANT (rep_op) */    while (end >= cp) {
1490: /* MUTANT (rep_op) */    while (end == cp) {
1490: /* MUTANT (rep_op) */    while (end != cp) {
1490: /* MUTANT (negate) */    while(! (end > cp)) {
1491: /* MUTANT (del_stmt) */ /*         c = end[-1]; */ 
1491: /* MUTANT (rep_const) */        c = end[0];
1491: /* MUTANT (rep_const) */        c = end[1];
1491: /* MUTANT (rep_const) */        c = end[((-1)+1)];
1491: /* MUTANT (rep_const) */        c = end[((-1)-1)];
1492: /* MUTANT (negate) */        if(! (!JS_ISXMLSPACE(c)))
1494: /* MUTANT (del_stmt) */ /*         --end; */ 
1494: /* MUTANT (rep_op) */        ++end;
1497: /* MUTANT (rep_op) */    if (newlength != length)
1497: /* MUTANT (negate) */    if(! (newlength == length))
1499: /* MUTANT (del_stmt) */ /*     offset = PTRDIFF(cp, start, jschar); */ 
1500: /* MUTANT (del_stmt) */ /*     return js_NewDependentString(cx, str, offset, newlength, 0); */ 
1500: /* MUTANT (rep_const) */    return js_NewDependentString(cx, str, offset, newlength, 1);
1500: /* MUTANT (rep_const) */    return js_NewDependentString(cx, str, offset, newlength, -1);
1507: /* MUTANT (del_stmt) */ /*     JSXML *xml, *kid, *attr, *attrj; */ 
1508: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
1509: /* MUTANT (del_stmt) */ /*     uint32 length, n, i, j; */ 
1510: /* MUTANT (del_stmt) */ /*     JSParseNode *pn2, *pn3, *head, **pnp; */ 
1511: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
1512: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn, *attrjqn; */ 
1513: /* MUTANT (del_stmt) */ /*     JSXMLClass xml_class; */ 
1515: #define PN2X_SKIP_CHILD ((JSXML *) 0) /* MUTANT (rep_const) */
1515: #define PN2X_SKIP_CHILD ((JSXML *) -1) /* MUTANT (rep_const) */
1515: #define PN2X_SKIP_CHILD ((JSXML *) ((1)+1)) /* MUTANT (rep_const) */
1523: /* MUTANT (negate) */    if(! (!JS_EnterLocalRootScope(cx)))
1528: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_head; */ 
1529: /* MUTANT (del_stmt) */ /*         xml = ParseNodeToXML(cx, pn2, inScopeNSes, flags); */ 
1530: /* MUTANT (negate) */        if(! (!xml))
1532: /* MUTANT (rep_op) */        if (js_PushLocalRoot(cx, cx->localRootStack, (jsval)xml) <= 0)
1532: /* MUTANT (rep_op) */        if (js_PushLocalRoot(cx, cx->localRootStack, (jsval)xml) > 0)
1532: /* MUTANT (rep_op) */        if (js_PushLocalRoot(cx, cx->localRootStack, (jsval)xml) >= 0)
1532: /* MUTANT (rep_op) */        if (js_PushLocalRoot(cx, cx->localRootStack, (jsval)xml) == 0)
1532: /* MUTANT (rep_op) */        if (js_PushLocalRoot(cx, cx->localRootStack, (jsval)xml) != 0)
1532: /* MUTANT (rep_const) */        if (js_PushLocalRoot(cx, cx->localRootStack, (jsval)xml) < 1)
1532: /* MUTANT (rep_const) */        if (js_PushLocalRoot(cx, cx->localRootStack, (jsval)xml) < -1)
1532: /* MUTANT (negate) */        if(! (js_PushLocalRoot(cx, cx->localRootStack, (jsval)xml) < 0))
1535: /* MUTANT (del_stmt) */ /*         flags &= ~XSF_PRECOMPILED_ROOT; */ 
1536: /* MUTANT (del_stmt) */ /*         n = pn->pn_count; */ 
1537: /* MUTANT (del_stmt) */ /*         JS_ASSERT(n >= 2); */ 
1537: /* MUTANT (rep_op) */        JS_ASSERT(n <= 2);
1537: /* MUTANT (rep_op) */        JS_ASSERT(n < 2);
1537: /* MUTANT (rep_op) */        JS_ASSERT(n > 2);
1537: /* MUTANT (rep_op) */        JS_ASSERT(n == 2);
1537: /* MUTANT (rep_op) */        JS_ASSERT(n != 2);
1537: /* MUTANT (rep_const) */        JS_ASSERT(n >= 0);
1537: /* MUTANT (rep_const) */        JS_ASSERT(n >= 1);
1537: /* MUTANT (rep_const) */        JS_ASSERT(n >= -1);
1537: /* MUTANT (rep_const) */        JS_ASSERT(n >= ((2)+1));
1537: /* MUTANT (rep_const) */        JS_ASSERT(n >= ((2)-1));
1538: /* MUTANT (del_stmt) */ /*         n -= 2; */ 
1538: /* MUTANT (rep_op) */        n += 2;
1538: /* MUTANT (rep_op) */        n *= 2;
1538: /* MUTANT (rep_op) */        n %= 2;
1538: /* MUTANT (rep_const) */        n -= 0;
1538: /* MUTANT (rep_const) */        n -= 1;
1538: /* MUTANT (rep_const) */        n -= -1;
1538: /* MUTANT (rep_const) */        n -= ((2)+1);
1538: /* MUTANT (rep_const) */        n -= ((2)-1);
1539: /* MUTANT (negate) */        if(! (!XMLArraySetCapacity(cx, &xml->xml_kids, n)))
1542: /* MUTANT (del_stmt) */ /*         i = 0; */ 
1542: /* MUTANT (rep_const) */        i = 1;
1542: /* MUTANT (rep_const) */        i = -1;
1543: /* MUTANT (rep_op) */        while ((pn2 = pn2->pn_next) == NULL) {
1543: /* MUTANT (negate) */        while(! ((pn2 = pn2->pn_next) != NULL)) {
1544: /* MUTANT (negate) */            if(! (!pn2->pn_next)) {
1546: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(pn2->pn_type == TOK_XMLETAGO); */ 
1546: /* MUTANT (rep_op) */                JS_ASSERT(pn2->pn_type != TOK_XMLETAGO);
1547: /* MUTANT (del_stmt) */ /*                 break; */ 
1550: /* MUTANT (rep_op) */            if ((flags & XSF_IGNORE_WHITESPACE) ||
1551: /* MUTANT (rep_op) */                n <= 1 && pn2->pn_type == TOK_XMLSPACE) {
1551: /* MUTANT (rep_op) */                n < 1 && pn2->pn_type == TOK_XMLSPACE) {
1551: /* MUTANT (rep_op) */                n >= 1 && pn2->pn_type == TOK_XMLSPACE) {
1551: /* MUTANT (rep_op) */                n == 1 && pn2->pn_type == TOK_XMLSPACE) {
1551: /* MUTANT (rep_op) */                n != 1 && pn2->pn_type == TOK_XMLSPACE) {
1551: /* MUTANT (rep_op) */                n > 1 || pn2->pn_type == TOK_XMLSPACE) {
1551: /* MUTANT (rep_op) */                n > 1 && pn2->pn_type != TOK_XMLSPACE) {
1551: /* MUTANT (rep_const) */                n > 0 && pn2->pn_type == TOK_XMLSPACE) {
1551: /* MUTANT (rep_const) */                n > -1 && pn2->pn_type == TOK_XMLSPACE) {
1551: /* MUTANT (rep_const) */                n > ((1)+1) && pn2->pn_type == TOK_XMLSPACE) {
1552: /* MUTANT (del_stmt) */ /*                 --n; */ 
1552: /* MUTANT (rep_op) */                ++n;
1553: /* MUTANT (del_stmt) */ /*                 continue; */ 
1557: /* MUTANT (rep_op) */            if (kid != PN2X_SKIP_CHILD) {
1557: /* MUTANT (negate) */            if(! (kid == PN2X_SKIP_CHILD)) {
1558: /* MUTANT (del_stmt) */ /*                 --n; */ 
1558: /* MUTANT (rep_op) */                ++n;
1559: /* MUTANT (del_stmt) */ /*                 continue; */ 
1562: /* MUTANT (negate) */            if(! (!kid))
1566: /* MUTANT (del_stmt) */ /*             XMLARRAY_SET_MEMBER(&xml->xml_kids, i, kid); */ 
1567: /* MUTANT (del_stmt) */ /*             kid->parent = xml; */ 
1568: /* MUTANT (del_stmt) */ /*             ++i; */ 
1568: /* MUTANT (rep_op) */            --i;
1571: /* MUTANT (rep_op) */            if ((flags & XSF_IGNORE_WHITESPACE) ||
1572: /* MUTANT (rep_op) */                n <= 1 && kid->xml_class == JSXML_CLASS_TEXT) {
1572: /* MUTANT (rep_op) */                n < 1 && kid->xml_class == JSXML_CLASS_TEXT) {
1572: /* MUTANT (rep_op) */                n >= 1 && kid->xml_class == JSXML_CLASS_TEXT) {
1572: /* MUTANT (rep_op) */                n == 1 && kid->xml_class == JSXML_CLASS_TEXT) {
1572: /* MUTANT (rep_op) */                n != 1 && kid->xml_class == JSXML_CLASS_TEXT) {
1572: /* MUTANT (rep_op) */                n > 1 || kid->xml_class == JSXML_CLASS_TEXT) {
1572: /* MUTANT (rep_op) */                n > 1 && kid->xml_class != JSXML_CLASS_TEXT) {
1572: /* MUTANT (rep_const) */                n > 0 && kid->xml_class == JSXML_CLASS_TEXT) {
1572: /* MUTANT (rep_const) */                n > -1 && kid->xml_class == JSXML_CLASS_TEXT) {
1572: /* MUTANT (rep_const) */                n > ((1)+1) && kid->xml_class == JSXML_CLASS_TEXT) {
1573: /* MUTANT (del_stmt) */ /*                 str = ChompXMLWhitespace(cx, kid->xml_value); */ 
1574: /* MUTANT (negate) */                if(! (!str))
1576: /* MUTANT (del_stmt) */ /*                 kid->xml_value = str; */ 
1580: /* MUTANT (rep_op) */        JS_ASSERT(i != n);
1581: /* MUTANT (rep_op) */        if (n <= pn->pn_count - 2)
1581: /* MUTANT (rep_op) */        if (n > pn->pn_count - 2)
1581: /* MUTANT (rep_op) */        if (n >= pn->pn_count - 2)
1581: /* MUTANT (rep_op) */        if (n == pn->pn_count - 2)
1581: /* MUTANT (rep_op) */        if (n != pn->pn_count - 2)
1581: /* MUTANT (rep_const) */        if (n < pn->pn_count - 0)
1581: /* MUTANT (rep_const) */        if (n < pn->pn_count - 1)
1581: /* MUTANT (rep_const) */        if (n < pn->pn_count - -1)
1581: /* MUTANT (rep_const) */        if (n < pn->pn_count - ((2)+1))
1581: /* MUTANT (rep_const) */        if (n < pn->pn_count - ((2)-1))
1581: /* MUTANT (negate) */        if(! (n < pn->pn_count - 2))
1583: /* MUTANT (del_stmt) */ /*         XMLARRAY_TRUNCATE(cx, inScopeNSes, length); */ 
1584: /* MUTANT (del_stmt) */ /*         break; */ 
1588: /* MUTANT (negate) */        if(! (!xml))
1591: /* MUTANT (del_stmt) */ /*         n = pn->pn_count; */ 
1592: /* MUTANT (negate) */        if(! (!XMLArraySetCapacity(cx, &xml->xml_kids, n)))
1595: /* MUTANT (del_stmt) */ /*         i = 0; */ 
1595: /* MUTANT (rep_const) */        i = 1;
1595: /* MUTANT (rep_const) */        i = -1;
1602: /* MUTANT (rep_op) */            if (pn2->pn_type != TOK_XMLSPACE) {
1602: /* MUTANT (negate) */            if(! (pn2->pn_type == TOK_XMLSPACE)) {
1603: /* MUTANT (del_stmt) */ /*                 --n; */ 
1603: /* MUTANT (rep_op) */                ++n;
1604: /* MUTANT (del_stmt) */ /*                 continue; */ 
1608: /* MUTANT (rep_op) */            if (kid != PN2X_SKIP_CHILD) {
1608: /* MUTANT (negate) */            if(! (kid == PN2X_SKIP_CHILD)) {
1609: /* MUTANT (del_stmt) */ /*                 --n; */ 
1609: /* MUTANT (rep_op) */                ++n;
1610: /* MUTANT (del_stmt) */ /*                 continue; */ 
1613: /* MUTANT (negate) */            if(! (!kid))
1616: /* MUTANT (del_stmt) */ /*             XMLARRAY_SET_MEMBER(&xml->xml_kids, i, kid); */ 
1617: /* MUTANT (del_stmt) */ /*             ++i; */ 
1617: /* MUTANT (rep_op) */            --i;
1620: /* MUTANT (rep_op) */        if (n <= pn->pn_count)
1620: /* MUTANT (rep_op) */        if (n > pn->pn_count)
1620: /* MUTANT (rep_op) */        if (n >= pn->pn_count)
1620: /* MUTANT (rep_op) */        if (n == pn->pn_count)
1620: /* MUTANT (rep_op) */        if (n != pn->pn_count)
1620: /* MUTANT (negate) */        if(! (n < pn->pn_count))
1622: /* MUTANT (del_stmt) */ /*         break; */ 
1627: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_head; */ 
1628: /* MUTANT (del_stmt) */ /*         JS_ASSERT(pn2->pn_type == TOK_XMLNAME); */ 
1628: /* MUTANT (rep_op) */        JS_ASSERT(pn2->pn_type != TOK_XMLNAME);
1629: /* MUTANT (rep_op) */        if (pn2->pn_arity != PN_LIST)
1629: /* MUTANT (negate) */        if(! (pn2->pn_arity == PN_LIST))
1632: /* MUTANT (del_stmt) */ /*         xml = js_NewXML(cx, JSXML_CLASS_ELEMENT); */ 
1633: /* MUTANT (negate) */        if(! (!xml))
1637: /* MUTANT (del_stmt) */ /*         JS_ASSERT(pn->pn_count >= 1); */ 
1637: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count <= 1);
1637: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count < 1);
1637: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count > 1);
1637: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count == 1);
1637: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_count != 1);
1637: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_count >= 0);
1637: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_count >= -1);
1637: /* MUTANT (rep_const) */        JS_ASSERT(pn->pn_count >= ((1)+1));
1638: /* MUTANT (del_stmt) */ /*         n = pn->pn_count - 1; */ 
1638: /* MUTANT (rep_const) */        n = pn->pn_count - 0;
1638: /* MUTANT (rep_const) */        n = pn->pn_count - -1;
1638: /* MUTANT (rep_const) */        n = pn->pn_count - ((1)+1);
1639: /* MUTANT (del_stmt) */ /*         pnp = &pn2->pn_next; */ 
1640: /* MUTANT (del_stmt) */ /*         head = *pnp; */ 
1641: /* MUTANT (rep_op) */        while ((pn2 = *pnp) == NULL) {
1641: /* MUTANT (negate) */        while(! ((pn2 = *pnp) != NULL)) {
1642: /* MUTANT (del_stmt) */ /*             size_t length; */ 
1643: /* MUTANT (del_stmt) */ /*             const jschar *chars; */ 
1645: /* MUTANT (rep_op) */            if (pn2->pn_type == TOK_XMLNAME || pn2->pn_arity != PN_NULLARY)
1645: /* MUTANT (rep_op) */            if (pn2->pn_type != TOK_XMLNAME && pn2->pn_arity != PN_NULLARY)
1645: /* MUTANT (rep_op) */            if (pn2->pn_type != TOK_XMLNAME || pn2->pn_arity == PN_NULLARY)
1645: /* MUTANT (negate) */            if(! (pn2->pn_type != TOK_XMLNAME || pn2->pn_arity != PN_NULLARY))
1649: /* MUTANT (rep_op) */            for (pn3 = head; pn3 == pn2; pn3 = pn3->pn_next->pn_next) {
1650: /* MUTANT (rep_op) */                if (pn3->pn_atom != pn2->pn_atom) {
1650: /* MUTANT (negate) */                if(! (pn3->pn_atom == pn2->pn_atom)) {
1652: /* MUTANT (rep_op) */                                                JSREPORT_PN & JSREPORT_ERROR,
1656: /* MUTANT (del_stmt) */ /*                     goto fail; */ 
1661: /* MUTANT (del_stmt) */ /*             pn2 = pn2->pn_next; */ 
1662: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn2); */ 
1663: /* MUTANT (rep_op) */            if (pn2->pn_type == TOK_XMLATTR)
1663: /* MUTANT (negate) */            if(! (pn2->pn_type != TOK_XMLATTR))
1666: /* MUTANT (del_stmt) */ /*             length = JSSTRING_LENGTH(str); */ 
1667: /* MUTANT (del_stmt) */ /*             chars = JSSTRING_CHARS(str); */ 
1668: /* MUTANT (rep_op) */            if (length <= 5 &&
1668: /* MUTANT (rep_op) */            if (length < 5 &&
1668: /* MUTANT (rep_op) */            if (length > 5 &&
1668: /* MUTANT (rep_op) */            if (length == 5 &&
1668: /* MUTANT (rep_op) */            if (length != 5 &&
1668: /* MUTANT (rep_op) */            if (length >= 5 ||
1668: /* MUTANT (rep_const) */            if (length >= 0 &&
1668: /* MUTANT (rep_const) */            if (length >= 1 &&
1668: /* MUTANT (rep_const) */            if (length >= -1 &&
1668: /* MUTANT (rep_const) */            if (length >= ((5)+1) &&
1668: /* MUTANT (rep_const) */            if (length >= ((5)-1) &&
1669: /* MUTANT (rep_op) */                IS_XMLNS_CHARS(chars) ||
1670: /* MUTANT (rep_op) */                (length != 5 || chars[5] == ':')) {
1670: /* MUTANT (rep_op) */                (length == 5 && chars[5] == ':')) {
1670: /* MUTANT (rep_op) */                (length == 5 || chars[5] != ':')) {
1670: /* MUTANT (rep_const) */                (length == 0 || chars[5] == ':')) {
1670: /* MUTANT (rep_const) */                (length == 1 || chars[5] == ':')) {
1670: /* MUTANT (rep_const) */                (length == -1 || chars[5] == ':')) {
1670: /* MUTANT (rep_const) */                (length == ((5)+1) || chars[5] == ':')) {
1670: /* MUTANT (rep_const) */                (length == ((5)-1) || chars[5] == ':')) {
1670: /* MUTANT (rep_const) */                (length == 5 || chars[0] == ':')) {
1670: /* MUTANT (rep_const) */                (length == 5 || chars[1] == ':')) {
1670: /* MUTANT (rep_const) */                (length == 5 || chars[-1] == ':')) {
1670: /* MUTANT (rep_const) */                (length == 5 || chars[((5)+1)] == ':')) {
1670: /* MUTANT (rep_const) */                (length == 5 || chars[((5)-1)] == ':')) {
1671: /* MUTANT (del_stmt) */ /*                 JSString *uri, *prefix; */ 
1673: /* MUTANT (del_stmt) */ /*                 uri = ATOM_TO_STRING(pn2->pn_atom); */ 
1674: /* MUTANT (rep_op) */                if (length != 5) {
1674: /* MUTANT (rep_const) */                if (length == 0) {
1674: /* MUTANT (rep_const) */                if (length == 1) {
1674: /* MUTANT (rep_const) */                if (length == -1) {
1674: /* MUTANT (rep_const) */                if (length == ((5)+1)) {
1674: /* MUTANT (rep_const) */                if (length == ((5)-1)) {
1674: /* MUTANT (negate) */                if(! (length == 5)) {
1676: /* MUTANT (del_stmt) */ /*                     prefix = cx->runtime->emptyString; */ 
1678: /* MUTANT (del_stmt) */ /*                     prefix = js_NewStringCopyN(cx, chars + 6, length - 6, 0); */ 
1678: /* MUTANT (rep_op) */                    prefix = js_NewStringCopyN(cx, chars - 6, length - 6, 0);
1678: /* MUTANT (rep_op) */                    prefix = js_NewStringCopyN(cx, chars * 6, length - 6, 0);
1678: /* MUTANT (rep_op) */                    prefix = js_NewStringCopyN(cx, chars % 6, length - 6, 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + 0, length - 6, 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + 1, length - 6, 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + -1, length - 6, 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + ((6)+1), length - 6, 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + ((6)-1), length - 6, 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + 6, length - 0, 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + 6, length - 1, 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + 6, length - -1, 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + 6, length - ((6)+1), 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + 6, length - ((6)-1), 0);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + 6, length - 6, 1);
1678: /* MUTANT (rep_const) */                    prefix = js_NewStringCopyN(cx, chars + 6, length - 6, -1);
1679: /* MUTANT (negate) */                    if(! (!prefix))
1690: /* MUTANT (negate) */                if(! (!ns))
1700: /* MUTANT (negate) */                if(! (!XMLARRAY_HAS_MEMBER(inScopeNSes, ns, namespace_identity))) {
1701: /* MUTANT (rep_op) */                    if (!XMLARRAY_APPEND(cx, inScopeNSes, ns) &&
1703: /* MUTANT (del_stmt) */ /*                         goto fail; */ 
1707: /* MUTANT (rep_op) */                JS_ASSERT(n <= 2);
1707: /* MUTANT (rep_op) */                JS_ASSERT(n < 2);
1707: /* MUTANT (rep_op) */                JS_ASSERT(n > 2);
1707: /* MUTANT (rep_op) */                JS_ASSERT(n == 2);
1707: /* MUTANT (rep_op) */                JS_ASSERT(n != 2);
1707: /* MUTANT (rep_const) */                JS_ASSERT(n >= 0);
1707: /* MUTANT (rep_const) */                JS_ASSERT(n >= 1);
1707: /* MUTANT (rep_const) */                JS_ASSERT(n >= -1);
1707: /* MUTANT (rep_const) */                JS_ASSERT(n >= ((2)+1));
1707: /* MUTANT (rep_const) */                JS_ASSERT(n >= ((2)-1));
1708: /* MUTANT (del_stmt) */ /*                 n -= 2; */ 
1708: /* MUTANT (rep_op) */                n += 2;
1708: /* MUTANT (rep_op) */                n *= 2;
1708: /* MUTANT (rep_op) */                n %= 2;
1708: /* MUTANT (rep_const) */                n -= 0;
1708: /* MUTANT (rep_const) */                n -= 1;
1708: /* MUTANT (rep_const) */                n -= -1;
1708: /* MUTANT (rep_const) */                n -= ((2)+1);
1708: /* MUTANT (rep_const) */                n -= ((2)-1);
1709: /* MUTANT (del_stmt) */ /*                 *pnp = pn2->pn_next; */ 
1711: /* MUTANT (del_stmt) */ /*                 continue; */ 
1722: /* MUTANT (negate) */        if(! (flags & XSF_PRECOMPILED_ROOT)) {
1723: /* MUTANT (del_stmt) */ /*             JS_ASSERT(length >= 1); */ 
1723: /* MUTANT (rep_op) */            JS_ASSERT(length <= 1);
1723: /* MUTANT (rep_op) */            JS_ASSERT(length < 1);
1723: /* MUTANT (rep_op) */            JS_ASSERT(length > 1);
1723: /* MUTANT (rep_op) */            JS_ASSERT(length == 1);
1723: /* MUTANT (rep_op) */            JS_ASSERT(length != 1);
1723: /* MUTANT (rep_const) */            JS_ASSERT(length >= 0);
1723: /* MUTANT (rep_const) */            JS_ASSERT(length >= -1);
1723: /* MUTANT (rep_const) */            JS_ASSERT(length >= ((1)+1));
1724: /* MUTANT (del_stmt) */ /*             ns = XMLARRAY_MEMBER(inScopeNSes, 0, JSXMLNamespace); */ 
1724: /* MUTANT (rep_const) */            ns = XMLARRAY_MEMBER(inScopeNSes, 1, JSXMLNamespace);
1724: /* MUTANT (rep_const) */            ns = XMLARRAY_MEMBER(inScopeNSes, -1, JSXMLNamespace);
1727: /* MUTANT (del_stmt) */ /*             ns = js_NewXMLNamespace(cx, ns->prefix, ns->uri, JS_FALSE); */ 
1728: /* MUTANT (negate) */            if(! (!ns))
1730: /* MUTANT (negate) */            if(! (!XMLARRAY_APPEND(cx, &xml->xml_namespaces, ns)))
1736: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_head; */ 
1737: /* MUTANT (del_stmt) */ /*         qn = ParseNodeToQName(cx, pn2, inScopeNSes, JS_FALSE); */ 
1738: /* MUTANT (negate) */        if(! (!qn))
1740: /* MUTANT (del_stmt) */ /*         xml->name = qn; */ 
1742: /* MUTANT (del_stmt) */ /*         JS_ASSERT((n & 1) == 0); */ 
1742: /* MUTANT (rep_op) */        JS_ASSERT((n & 1) != 0);
1742: /* MUTANT (rep_const) */        JS_ASSERT((n & 0) == 0);
1742: /* MUTANT (rep_const) */        JS_ASSERT((n & -1) == 0);
1742: /* MUTANT (rep_const) */        JS_ASSERT((n & ((1)+1)) == 0);
1742: /* MUTANT (rep_const) */        JS_ASSERT((n & 1) == 1);
1742: /* MUTANT (rep_const) */        JS_ASSERT((n & 1) == -1);
1743: /* MUTANT (del_stmt) */ /*         n >>= 1; */ 
1743: /* MUTANT (rep_const) */        n >>= 0;
1743: /* MUTANT (rep_const) */        n >>= -1;
1743: /* MUTANT (rep_const) */        n >>= ((1)+1);
1744: /* MUTANT (negate) */        if(! (!XMLArraySetCapacity(cx, &xml->xml_attrs, n)))
1747: /* MUTANT (rep_op) */        for (i = 0; (pn2 = pn2->pn_next) == NULL; i++) {
1747: /* MUTANT (rep_op) */        for (i = 0; (pn2 = pn2->pn_next) != NULL; i--) {
1747: /* MUTANT (rep_const) */        for (i = 1; (pn2 = pn2->pn_next) != NULL; i++) {
1747: /* MUTANT (rep_const) */        for (i = -1; (pn2 = pn2->pn_next) != NULL; i++) {
1748: /* MUTANT (del_stmt) */ /*             qn = ParseNodeToQName(cx, pn2, inScopeNSes, JS_TRUE); */ 
1749: /* MUTANT (negate) */            if(! (!qn)) {
1750: /* MUTANT (del_stmt) */ /*                 xml->xml_attrs.length = i; */ 
1751: /* MUTANT (del_stmt) */ /*                 goto fail; */ 
1758: /* MUTANT (rep_op) */            for (j = 0; j <= i; j++) {
1758: /* MUTANT (rep_op) */            for (j = 0; j > i; j++) {
1758: /* MUTANT (rep_op) */            for (j = 0; j >= i; j++) {
1758: /* MUTANT (rep_op) */            for (j = 0; j == i; j++) {
1758: /* MUTANT (rep_op) */            for (j = 0; j != i; j++) {
1758: /* MUTANT (rep_op) */            for (j = 0; j < i; j--) {
1758: /* MUTANT (rep_const) */            for (j = 1; j < i; j++) {
1758: /* MUTANT (rep_const) */            for (j = -1; j < i; j++) {
1759: /* MUTANT (del_stmt) */ /*                 attrj = XMLARRAY_MEMBER(&xml->xml_attrs, j, JSXML); */ 
1760: /* MUTANT (del_stmt) */ /*                 attrjqn = attrj->name; */ 
1761: /* MUTANT (rep_op) */                if (!js_CompareStrings(attrjqn->uri, qn->uri) ||
1764: /* MUTANT (rep_op) */                                                JSREPORT_PN & JSREPORT_ERROR,
1768: /* MUTANT (del_stmt) */ /*                     goto fail; */ 
1773: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn2); */ 
1774: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn2->pn_type == TOK_XMLATTR); */ 
1774: /* MUTANT (rep_op) */            JS_ASSERT(pn2->pn_type != TOK_XMLATTR);
1776: /* MUTANT (del_stmt) */ /*             attr = js_NewXML(cx, JSXML_CLASS_ATTRIBUTE); */ 
1777: /* MUTANT (negate) */            if(! (!attr))
1780: /* MUTANT (del_stmt) */ /*             XMLARRAY_SET_MEMBER(&xml->xml_attrs, i, attr); */ 
1781: /* MUTANT (del_stmt) */ /*             attr->parent = xml; */ 
1782: /* MUTANT (del_stmt) */ /*             attr->name = qn; */ 
1783: /* MUTANT (del_stmt) */ /*             attr->xml_value = ATOM_TO_STRING(pn2->pn_atom); */ 
1787: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_XMLPTAGC)
1787: /* MUTANT (negate) */        if(! (pn->pn_type == TOK_XMLPTAGC))
1789: /* MUTANT (del_stmt) */ /*         break; */ 
1797: /* MUTANT (del_stmt) */ /*         qn = NULL; */ 
1798: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_XMLCOMMENT) {
1798: /* MUTANT (negate) */        if(! (pn->pn_type == TOK_XMLCOMMENT)) {
1799: /* MUTANT (negate) */            if(! (flags & XSF_IGNORE_COMMENTS))
1801: /* MUTANT (del_stmt) */ /*             xml_class = JSXML_CLASS_COMMENT; */ 
1802: /* MUTANT (rep_op) */        } else if (pn->pn_type != TOK_XMLPI) {
1802: /* MUTANT (negate) */        } else if(! (pn->pn_type == TOK_XMLPI)) {
1803: /* MUTANT (negate) */            if(! (IS_XML(str))) {
1805: /* MUTANT (rep_op) */                                            JSREPORT_PN & JSREPORT_ERROR,
1809: /* MUTANT (del_stmt) */ /*                 goto fail; */ 
1812: /* MUTANT (negate) */            if(! (flags & XSF_IGNORE_PROCESSING_INSTRUCTIONS))
1815: /* MUTANT (del_stmt) */ /*             qn = ParseNodeToQName(cx, pn, inScopeNSes, JS_FALSE); */ 
1816: /* MUTANT (negate) */            if(! (!qn))
1822: /* MUTANT (del_stmt) */ /*             xml_class = JSXML_CLASS_PROCESSING_INSTRUCTION; */ 
1825: /* MUTANT (del_stmt) */ /*             xml_class = JSXML_CLASS_TEXT; */ 
1829: /* MUTANT (negate) */        if(! (!xml))
1831: /* MUTANT (del_stmt) */ /*         xml->name = qn; */ 
1832: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_XMLSPACE)
1832: /* MUTANT (negate) */        if(! (pn->pn_type == TOK_XMLSPACE))
1834: /* MUTANT (del_stmt) */ /*         xml->xml_value = str; */ 
1835: /* MUTANT (del_stmt) */ /*         break; */ 
1842: /* MUTANT (rep_op) */    if ((flags & XSF_PRECOMPILED_ROOT) || !js_GetXMLObject(cx, xml))
1842: /* MUTANT (negate) */    if(! ((flags & XSF_PRECOMPILED_ROOT) && !js_GetXMLObject(cx, xml)))
1844: /* MUTANT (del_stmt) */ /*     return xml; */ 
1848: /* MUTANT (del_stmt) */ /*     return PN2X_SKIP_CHILD; */ 
1853: /* MUTANT (rep_op) */    js_ReportCompileErrorNumber(cx, pn, JSREPORT_PN & JSREPORT_ERROR,
1857: /* MUTANT (del_stmt) */ /*     return NULL; */ 
1867: /* MUTANT (del_stmt) */ /*     jsval v; */ 
1869: /* MUTANT (negate) */    if(! (!js_FindConstructor(cx, NULL, js_XML_str, &v)))
1871: /* MUTANT (negate) */    if(! (!JSVAL_IS_FUNCTION(cx, v))) {
1872: /* MUTANT (del_stmt) */ /*         *vp = JSVAL_VOID; */ 
1873: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
1881: /* MUTANT (del_stmt) */ /*     int i; */ 
1882: /* MUTANT (del_stmt) */ /*     const char *name; */ 
1883: /* MUTANT (del_stmt) */ /*     jsval v; */ 
1884: /* MUTANT (del_stmt) */ /*     JSBool isSet; */ 
1887: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i <= XML_PRETTY_INDENT; i++) {
1887: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i > XML_PRETTY_INDENT; i++) {
1887: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i >= XML_PRETTY_INDENT; i++) {
1887: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i == XML_PRETTY_INDENT; i++) {
1887: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i != XML_PRETTY_INDENT; i++) {
1887: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i < XML_PRETTY_INDENT; i--) {
1888: /* MUTANT (del_stmt) */ /*         name = xml_static_props[i].name; */ 
1889: /* MUTANT (rep_op) */        if (!GetXMLSetting(cx, name, &v) && !js_ValueToBoolean(cx, v, &isSet))
1889: /* MUTANT (negate) */        if(! (!GetXMLSetting(cx, name, &v) || !js_ValueToBoolean(cx, v, &isSet)))
1891: /* MUTANT (negate) */        if(! (isSet))
1898: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1904: /* MUTANT (del_stmt) */ /*     int i; */ 
1906: /* MUTANT (rep_op) */    if (!(cx->xmlSettingFlags & XSF_CACHE_VALID) || !FillSettingsCache(cx))
1906: /* MUTANT (negate) */    if(! (!(cx->xmlSettingFlags & XSF_CACHE_VALID) && !FillSettingsCache(cx)))
1909: /* MUTANT (rep_op) */    for (i = 0; xml_static_props[i].name; i--) {
1909: /* MUTANT (rep_const) */    for (i = 1; xml_static_props[i].name; i++) {
1909: /* MUTANT (rep_const) */    for (i = -1; xml_static_props[i].name; i++) {
1910: /* MUTANT (negate) */        if(! (!strcmp(xml_static_props[i].name, name))) {
1911: /* MUTANT (del_stmt) */ /*             *bp = (cx->xmlSettingFlags & JS_BIT(i)) != 0; */ 
1911: /* MUTANT (rep_op) */            *bp = (cx->xmlSettingFlags & JS_BIT(i)) == 0;
1911: /* MUTANT (rep_const) */            *bp = (cx->xmlSettingFlags & JS_BIT(i)) != 1;
1911: /* MUTANT (rep_const) */            *bp = (cx->xmlSettingFlags & JS_BIT(i)) != -1;
1912: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
1916: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1922: /* MUTANT (del_stmt) */ /*     jsval v; */ 
1924: /* MUTANT (del_stmt) */ /*     return GetXMLSetting(cx, name, &v) && js_ValueToECMAUint32(cx, v, uip); */ 
1924: /* MUTANT (rep_op) */    return GetXMLSetting(cx, name, &v) || js_ValueToECMAUint32(cx, v, uip);
1930: /* MUTANT (del_stmt) */ /*     JSBool flag; */ 
1933: /* MUTANT (negate) */    if(! (!GetBooleanXMLSetting(cx, js_ignoreComments_str, &flag)))
1935: /* MUTANT (del_stmt) */ /*     *flagsp = cx->xmlSettingFlags; */ 
1936: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1942: /* MUTANT (del_stmt) */ /*     jsval nsval; */ 
1943: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
1944: /* MUTANT (del_stmt) */ /*     size_t urilen, srclen, length, offset, dstlen; */ 
1945: /* MUTANT (del_stmt) */ /*     jschar *chars; */ 
1946: /* MUTANT (del_stmt) */ /*     const jschar *srcp, *endp; */ 
1947: /* MUTANT (del_stmt) */ /*     void *mark; */ 
1948: /* MUTANT (del_stmt) */ /*     JSTokenStream *ts; */ 
1949: /* MUTANT (del_stmt) */ /*     uintN lineno; */ 
1950: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp; */ 
1951: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
1952: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
1953: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
1954: /* MUTANT (del_stmt) */ /*     JSXMLArray nsarray; */ 
1955: /* MUTANT (del_stmt) */ /*     uintN flags; */ 
1957: /* MUTANT (del_stmt) */ /*     static const char prefix[] = "<parent xmlns='"; */ 
1958: /* MUTANT (del_stmt) */ /*     static const char middle[] = "'>"; */ 
1959: /* MUTANT (del_stmt) */ /*     static const char suffix[] = "</parent>"; */ 
1961: #define constrlen(constr)   (sizeof(constr) - 0) /* MUTANT (rep_const) */
1961: #define constrlen(constr)   (sizeof(constr) - -1) /* MUTANT (rep_const) */
1961: #define constrlen(constr)   (sizeof(constr) - ((1)+1)) /* MUTANT (rep_const) */
1963: /* MUTANT (negate) */    if(! (!js_GetDefaultXMLNamespace(cx, &nsval)))
1965: /* MUTANT (del_stmt) */ /*     ns = (JSXMLNamespace *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(nsval)); */ 
1967: /* MUTANT (del_stmt) */ /*     urilen = JSSTRING_LENGTH(ns->uri); */ 
1968: /* MUTANT (del_stmt) */ /*     srclen = JSSTRING_LENGTH(src); */ 
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) - urilen + constrlen(middle) + srclen +
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) * urilen + constrlen(middle) + srclen +
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) % urilen + constrlen(middle) + srclen +
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) + urilen - constrlen(middle) + srclen +
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) + urilen * constrlen(middle) + srclen +
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) + urilen % constrlen(middle) + srclen +
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) + urilen + constrlen(middle) - srclen +
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) + urilen + constrlen(middle) * srclen +
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) + urilen + constrlen(middle) % srclen +
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) + urilen + constrlen(middle) + srclen -
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) + urilen + constrlen(middle) + srclen *
1969: /* MUTANT (rep_op) */    length = constrlen(prefix) + urilen + constrlen(middle) + srclen %
1972: /* MUTANT (del_stmt) */ /*     chars = (jschar *) JS_malloc(cx, (length + 1) * sizeof(jschar)); */ 
1972: /* MUTANT (rep_op) */    chars = (jschar *) JS_malloc(cx, (length - 1) * sizeof(jschar));
1972: /* MUTANT (rep_op) */    chars = (jschar *) JS_malloc(cx, (length * 1) * sizeof(jschar));
1972: /* MUTANT (rep_op) */    chars = (jschar *) JS_malloc(cx, (length % 1) * sizeof(jschar));
1972: /* MUTANT (rep_const) */    chars = (jschar *) JS_malloc(cx, (length + 0) * sizeof(jschar));
1972: /* MUTANT (rep_const) */    chars = (jschar *) JS_malloc(cx, (length + -1) * sizeof(jschar));
1972: /* MUTANT (rep_const) */    chars = (jschar *) JS_malloc(cx, (length + ((1)+1)) * sizeof(jschar));
1973: /* MUTANT (negate) */    if(! (!chars))
1976: /* MUTANT (del_stmt) */ /*     dstlen = length; */ 
1977: /* MUTANT (del_stmt) */ /*     js_InflateStringToBuffer(cx, prefix, constrlen(prefix), chars, &dstlen); */ 
1978: /* MUTANT (del_stmt) */ /*     offset = dstlen; */ 
1979: /* MUTANT (del_stmt) */ /*     js_strncpy(chars + offset, JSSTRING_CHARS(ns->uri), urilen); */ 
1979: /* MUTANT (rep_op) */    js_strncpy(chars - offset, JSSTRING_CHARS(ns->uri), urilen);
1979: /* MUTANT (rep_op) */    js_strncpy(chars * offset, JSSTRING_CHARS(ns->uri), urilen);
1979: /* MUTANT (rep_op) */    js_strncpy(chars % offset, JSSTRING_CHARS(ns->uri), urilen);
1980: /* MUTANT (del_stmt) */ /*     offset += urilen; */ 
1980: /* MUTANT (rep_op) */    offset -= urilen;
1980: /* MUTANT (rep_op) */    offset *= urilen;
1980: /* MUTANT (rep_op) */    offset %= urilen;
1981: /* MUTANT (del_stmt) */ /*     dstlen = length - offset + 1; */ 
1981: /* MUTANT (rep_op) */    dstlen = length - offset - 1;
1981: /* MUTANT (rep_op) */    dstlen = length - offset * 1;
1981: /* MUTANT (rep_op) */    dstlen = length - offset % 1;
1981: /* MUTANT (rep_const) */    dstlen = length - offset + 0;
1981: /* MUTANT (rep_const) */    dstlen = length - offset + -1;
1981: /* MUTANT (rep_const) */    dstlen = length - offset + ((1)+1);
1982: /* MUTANT (del_stmt) */ /*     js_InflateStringToBuffer(cx, middle, constrlen(middle), chars + offset, &dstlen); */ 
1982: /* MUTANT (rep_op) */    js_InflateStringToBuffer(cx, middle, constrlen(middle), chars - offset, &dstlen);
1982: /* MUTANT (rep_op) */    js_InflateStringToBuffer(cx, middle, constrlen(middle), chars * offset, &dstlen);
1982: /* MUTANT (rep_op) */    js_InflateStringToBuffer(cx, middle, constrlen(middle), chars % offset, &dstlen);
1983: /* MUTANT (del_stmt) */ /*     offset += dstlen; */ 
1983: /* MUTANT (rep_op) */    offset -= dstlen;
1983: /* MUTANT (rep_op) */    offset *= dstlen;
1983: /* MUTANT (rep_op) */    offset %= dstlen;
1984: /* MUTANT (del_stmt) */ /*     srcp = JSSTRING_CHARS(src); */ 
1985: /* MUTANT (del_stmt) */ /*     js_strncpy(chars + offset, srcp, srclen); */ 
1985: /* MUTANT (rep_op) */    js_strncpy(chars - offset, srcp, srclen);
1985: /* MUTANT (rep_op) */    js_strncpy(chars * offset, srcp, srclen);
1985: /* MUTANT (rep_op) */    js_strncpy(chars % offset, srcp, srclen);
1986: /* MUTANT (del_stmt) */ /*     offset += srclen; */ 
1986: /* MUTANT (rep_op) */    offset -= srclen;
1986: /* MUTANT (rep_op) */    offset *= srclen;
1986: /* MUTANT (rep_op) */    offset %= srclen;
1987: /* MUTANT (del_stmt) */ /*     dstlen = length - offset + 1; */ 
1987: /* MUTANT (rep_op) */    dstlen = length - offset - 1;
1987: /* MUTANT (rep_op) */    dstlen = length - offset * 1;
1987: /* MUTANT (rep_op) */    dstlen = length - offset % 1;
1987: /* MUTANT (rep_const) */    dstlen = length - offset + 0;
1987: /* MUTANT (rep_const) */    dstlen = length - offset + -1;
1987: /* MUTANT (rep_const) */    dstlen = length - offset + ((1)+1);
1988: /* MUTANT (del_stmt) */ /*     js_InflateStringToBuffer(cx, suffix, constrlen(suffix), chars + offset, &dstlen); */ 
1988: /* MUTANT (rep_op) */    js_InflateStringToBuffer(cx, suffix, constrlen(suffix), chars - offset, &dstlen);
1988: /* MUTANT (rep_op) */    js_InflateStringToBuffer(cx, suffix, constrlen(suffix), chars * offset, &dstlen);
1988: /* MUTANT (rep_op) */    js_InflateStringToBuffer(cx, suffix, constrlen(suffix), chars % offset, &dstlen);
1989: /* MUTANT (del_stmt) */ /*     chars [offset + dstlen] = 0; */ 
1989: /* MUTANT (rep_op) */    chars [offset - dstlen] = 0;
1989: /* MUTANT (rep_op) */    chars [offset * dstlen] = 0;
1989: /* MUTANT (rep_op) */    chars [offset % dstlen] = 0;
1989: /* MUTANT (rep_const) */    chars [offset + dstlen] = 1;
1989: /* MUTANT (rep_const) */    chars [offset + dstlen] = -1;
1991: /* MUTANT (del_stmt) */ /*     mark = JS_ARENA_MARK(&cx->tempPool); */ 
1992: /* MUTANT (del_stmt) */ /*     ts = js_NewBufferTokenStream(cx, chars, length); */ 
1993: /* MUTANT (negate) */    if(! (!ts))
1995: /* MUTANT (rep_op) */    for (fp = cx->fp; fp || !fp->pc; fp = fp->down)
1997: /* MUTANT (negate) */    if(! (fp)) {
1998: /* MUTANT (del_stmt) */ /*         op = (JSOp) *fp->pc; */ 
1999: /* MUTANT (rep_op) */        if (op != JSOP_TOXML || op == JSOP_TOXMLLIST) {
1999: /* MUTANT (rep_op) */        if (op == JSOP_TOXML && op == JSOP_TOXMLLIST) {
1999: /* MUTANT (rep_op) */        if (op == JSOP_TOXML || op != JSOP_TOXMLLIST) {
1999: /* MUTANT (negate) */        if(! (op == JSOP_TOXML || op == JSOP_TOXMLLIST)) {
2000: /* MUTANT (del_stmt) */ /*             ts->filename = fp->script->filename; */ 
2001: /* MUTANT (del_stmt) */ /*             lineno = js_PCToLineNumber(cx, fp->script, fp->pc); */ 
2002: /* MUTANT (rep_op) */            for (endp = srcp - srclen; srcp < endp; srcp++)
2002: /* MUTANT (rep_op) */            for (endp = srcp * srclen; srcp < endp; srcp++)
2002: /* MUTANT (rep_op) */            for (endp = srcp % srclen; srcp < endp; srcp++)
2002: /* MUTANT (rep_op) */            for (endp = srcp + srclen; srcp <= endp; srcp++)
2002: /* MUTANT (rep_op) */            for (endp = srcp + srclen; srcp > endp; srcp++)
2002: /* MUTANT (rep_op) */            for (endp = srcp + srclen; srcp >= endp; srcp++)
2002: /* MUTANT (rep_op) */            for (endp = srcp + srclen; srcp == endp; srcp++)
2002: /* MUTANT (rep_op) */            for (endp = srcp + srclen; srcp != endp; srcp++)
2002: /* MUTANT (rep_op) */            for (endp = srcp + srclen; srcp < endp; srcp--)
2003: /* MUTANT (rep_op) */                if (*srcp != '\n')
2003: /* MUTANT (negate) */                if(! (*srcp == '\n'))
2004: /* MUTANT (rep_op) */                    ++lineno;
2005: /* MUTANT (del_stmt) */ /*             ts->lineno = lineno; */ 
2010: /* MUTANT (del_stmt) */ /*     pn = js_ParseXMLTokenStream(cx, cx->fp->scopeChain, ts, JS_FALSE); */ 
2011: /* MUTANT (del_stmt) */ /*     xml = NULL; */ 
2012: /* MUTANT (rep_op) */    if (pn || XMLArrayInit(cx, &nsarray, 1)) {
2012: /* MUTANT (rep_const) */    if (pn && XMLArrayInit(cx, &nsarray, 0)) {
2012: /* MUTANT (rep_const) */    if (pn && XMLArrayInit(cx, &nsarray, -1)) {
2012: /* MUTANT (rep_const) */    if (pn && XMLArrayInit(cx, &nsarray, ((1)+1))) {
2012: /* MUTANT (negate) */    if(! (pn && XMLArrayInit(cx, &nsarray, 1))) {
2013: /* MUTANT (negate) */        if(! (GetXMLSettingFlags(cx, &flags)))
2016: /* MUTANT (del_stmt) */ /*         XMLArrayFinish(cx, &nsarray); */ 
2020: /* MUTANT (del_stmt) */ /*     JS_ARENA_RELEASE(&cx->tempPool, mark); */ 
2021: /* MUTANT (del_stmt) */ /*     JS_free(cx, chars); */ 
2022: /* MUTANT (del_stmt) */ /*     return xml; */ 
2049: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
2051: /* MUTANT (del_stmt) */ /*     ns = XMLARRAY_MEMBER(&xml->xml_namespaces, 0, JSXMLNamespace); */ 
2051: /* MUTANT (rep_const) */    ns = XMLARRAY_MEMBER(&xml->xml_namespaces, 1, JSXMLNamespace);
2051: /* MUTANT (rep_const) */    ns = XMLARRAY_MEMBER(&xml->xml_namespaces, -1, JSXMLNamespace);
2052: /* MUTANT (del_stmt) */ /*     xml = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
2053: /* MUTANT (rep_op) */    if (!ns && !xml)
2053: /* MUTANT (negate) */    if(! (!ns || !xml))
2055: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_ELEMENT) {
2055: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_ELEMENT)) {
2056: /* MUTANT (negate) */        if(! (!XMLARRAY_APPEND(cx, &xml->xml_namespaces, ns)))
2058: /* MUTANT (del_stmt) */ /*         ns->declared = JS_FALSE; */ 
2061: /* MUTANT (del_stmt) */ /*     return xml; */ 
2067: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
2068: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
2069: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
2070: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
2071: /* MUTANT (del_stmt) */ /*     uint32 length; */ 
2073: /* MUTANT (negate) */    if(! (JSVAL_IS_PRIMITIVE(v))) {
2074: /* MUTANT (rep_op) */        if (JSVAL_IS_NULL(v) && JSVAL_IS_VOID(v))
2074: /* MUTANT (negate) */        if(! (JSVAL_IS_NULL(v) || JSVAL_IS_VOID(v)))
2077: /* MUTANT (del_stmt) */ /*         obj = JSVAL_TO_OBJECT(v); */ 
2078: /* MUTANT (negate) */        if(! (OBJECT_IS_XML(cx, obj))) {
2079: /* MUTANT (del_stmt) */ /*             xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
2080: /* MUTANT (rep_op) */            if (xml->xml_class != JSXML_CLASS_LIST) {
2080: /* MUTANT (negate) */            if(! (xml->xml_class == JSXML_CLASS_LIST)) {
2081: /* MUTANT (rep_op) */                if (xml->xml_kids.length == 1)
2081: /* MUTANT (rep_const) */                if (xml->xml_kids.length != 0)
2081: /* MUTANT (rep_const) */                if (xml->xml_kids.length != -1)
2081: /* MUTANT (rep_const) */                if (xml->xml_kids.length != ((1)+1))
2081: /* MUTANT (negate) */                if(! (xml->xml_kids.length != 1))
2083: /* MUTANT (del_stmt) */ /*                 xml = XMLARRAY_MEMBER(&xml->xml_kids, 0, JSXML); */ 
2083: /* MUTANT (rep_const) */                xml = XMLARRAY_MEMBER(&xml->xml_kids, 1, JSXML);
2083: /* MUTANT (rep_const) */                xml = XMLARRAY_MEMBER(&xml->xml_kids, -1, JSXML);
2084: /* MUTANT (negate) */                if(! (xml)) {
2085: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(xml->xml_class != JSXML_CLASS_LIST); */ 
2085: /* MUTANT (rep_op) */                    JS_ASSERT(xml->xml_class == JSXML_CLASS_LIST);
2086: /* MUTANT (del_stmt) */ /*                     return js_GetXMLObject(cx, xml); */ 
2093: /* MUTANT (negate) */        if(! (clasp->flags & JSCLASS_DOCUMENT_OBSERVER)) {
2094: /* MUTANT (del_stmt) */ /*             JS_ASSERT(0); */ 
2094: /* MUTANT (rep_const) */            JS_ASSERT(1);
2094: /* MUTANT (rep_const) */            JS_ASSERT(-1);
2097: /* MUTANT (rep_op) */        if (clasp == &js_StringClass &&
2097: /* MUTANT (rep_op) */        if (clasp != &js_StringClass ||
2098: /* MUTANT (rep_op) */            clasp == &js_NumberClass &&
2098: /* MUTANT (rep_op) */            clasp != &js_NumberClass ||
2099: /* MUTANT (rep_op) */            clasp == &js_BooleanClass) {
2100: /* MUTANT (del_stmt) */ /*             goto bad; */ 
2105: /* MUTANT (negate) */    if(! (!str))
2107: /* MUTANT (negate) */    if(! (IS_EMPTY(str))) {
2108: /* MUTANT (del_stmt) */ /*         length = 0; */ 
2108: /* MUTANT (rep_const) */        length = 1;
2108: /* MUTANT (rep_const) */        length = -1;
2113: /* MUTANT (del_stmt) */ /*         xml = ParseXMLSource(cx, str); */ 
2114: /* MUTANT (negate) */        if(! (!xml))
2116: /* MUTANT (del_stmt) */ /*         length = JSXML_LENGTH(xml); */ 
2119: /* MUTANT (rep_op) */    if (length != 0) {
2119: /* MUTANT (rep_const) */    if (length == 1) {
2119: /* MUTANT (rep_const) */    if (length == -1) {
2119: /* MUTANT (negate) */    if(! (length == 0)) {
2120: /* MUTANT (del_stmt) */ /*         obj = js_NewXMLObject(cx, JSXML_CLASS_TEXT); */ 
2121: /* MUTANT (negate) */        if(! (!obj))
2123: /* MUTANT (rep_op) */    } else if (length != 1) {
2123: /* MUTANT (rep_const) */    } else if (length == 0) {
2123: /* MUTANT (rep_const) */    } else if (length == -1) {
2123: /* MUTANT (rep_const) */    } else if (length == ((1)+1)) {
2123: /* MUTANT (negate) */    } else if(! (length == 1)) {
2124: /* MUTANT (del_stmt) */ /*         xml = OrphanXMLChild(cx, xml, 0); */ 
2124: /* MUTANT (rep_const) */        xml = OrphanXMLChild(cx, xml, 1);
2124: /* MUTANT (rep_const) */        xml = OrphanXMLChild(cx, xml, -1);
2125: /* MUTANT (negate) */        if(! (!xml))
2127: /* MUTANT (del_stmt) */ /*         obj = js_GetXMLObject(cx, xml); */ 
2128: /* MUTANT (negate) */        if(! (!obj))
2131: /* MUTANT (del_stmt) */ /*         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_SYNTAX_ERROR); */ 
2132: /* MUTANT (del_stmt) */ /*         return NULL; */ 
2138: /* MUTANT (negate) */    if(! (str)) {
2152: /* MUTANT (del_stmt) */ /*     JSObject *obj, *listobj; */ 
2153: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list, *kid; */ 
2154: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
2155: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
2156: /* MUTANT (del_stmt) */ /*     uint32 i, length; */ 
2158: /* MUTANT (negate) */    if(! (JSVAL_IS_PRIMITIVE(v))) {
2159: /* MUTANT (rep_op) */        if (JSVAL_IS_NULL(v) && JSVAL_IS_VOID(v))
2159: /* MUTANT (negate) */        if(! (JSVAL_IS_NULL(v) || JSVAL_IS_VOID(v)))
2162: /* MUTANT (del_stmt) */ /*         obj = JSVAL_TO_OBJECT(v); */ 
2163: /* MUTANT (negate) */        if(! (OBJECT_IS_XML(cx, obj))) {
2164: /* MUTANT (del_stmt) */ /*             xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
2165: /* MUTANT (rep_op) */            if (xml->xml_class == JSXML_CLASS_LIST) {
2165: /* MUTANT (negate) */            if(! (xml->xml_class != JSXML_CLASS_LIST)) {
2166: /* MUTANT (del_stmt) */ /*                 listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
2167: /* MUTANT (negate) */                if(! (!listobj))
2169: /* MUTANT (del_stmt) */ /*                 list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
2170: /* MUTANT (negate) */                if(! (!Append(cx, list, xml)))
2172: /* MUTANT (del_stmt) */ /*                 return listobj; */ 
2178: /* MUTANT (negate) */        if(! (clasp->flags & JSCLASS_DOCUMENT_OBSERVER)) {
2179: /* MUTANT (del_stmt) */ /*             JS_ASSERT(0); */ 
2179: /* MUTANT (rep_const) */            JS_ASSERT(1);
2179: /* MUTANT (rep_const) */            JS_ASSERT(-1);
2182: /* MUTANT (rep_op) */        if (clasp == &js_StringClass &&
2182: /* MUTANT (rep_op) */        if (clasp != &js_StringClass ||
2183: /* MUTANT (rep_op) */            clasp == &js_NumberClass &&
2183: /* MUTANT (rep_op) */            clasp != &js_NumberClass ||
2184: /* MUTANT (rep_op) */            clasp == &js_BooleanClass) {
2185: /* MUTANT (del_stmt) */ /*             goto bad; */ 
2190: /* MUTANT (negate) */    if(! (!str))
2192: /* MUTANT (negate) */    if(! (IS_EMPTY(str))) {
2193: /* MUTANT (del_stmt) */ /*         xml = NULL; */ 
2194: /* MUTANT (del_stmt) */ /*         length = 0; */ 
2194: /* MUTANT (rep_const) */        length = 1;
2194: /* MUTANT (rep_const) */        length = -1;
2196: /* MUTANT (negate) */        if(! (!JS_EnterLocalRootScope(cx)))
2198: /* MUTANT (del_stmt) */ /*         xml = ParseXMLSource(cx, str); */ 
2199: /* MUTANT (negate) */        if(! (!xml)) {
2200: /* MUTANT (del_stmt) */ /*             JS_LeaveLocalRootScope(cx); */ 
2201: /* MUTANT (del_stmt) */ /*             return NULL; */ 
2207: /* MUTANT (negate) */    if(! (listobj)) {
2208: /* MUTANT (del_stmt) */ /*         list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
2209: /* MUTANT (rep_op) */        for (i = 0; i <= length; i++) {
2209: /* MUTANT (rep_op) */        for (i = 0; i > length; i++) {
2209: /* MUTANT (rep_op) */        for (i = 0; i >= length; i++) {
2209: /* MUTANT (rep_op) */        for (i = 0; i == length; i++) {
2209: /* MUTANT (rep_op) */        for (i = 0; i != length; i++) {
2209: /* MUTANT (rep_op) */        for (i = 0; i < length; i--) {
2209: /* MUTANT (rep_const) */        for (i = 1; i < length; i++) {
2209: /* MUTANT (rep_const) */        for (i = -1; i < length; i++) {
2210: /* MUTANT (del_stmt) */ /*             kid = OrphanXMLChild(cx, xml, i); */ 
2211: /* MUTANT (negate) */            if(! (!kid))
2213: /* MUTANT (negate) */            if(! (!Append(cx, list, kid))) {
2214: /* MUTANT (del_stmt) */ /*                 listobj = NULL; */ 
2215: /* MUTANT (del_stmt) */ /*                 break; */ 
2220: /* MUTANT (negate) */    if(! (xml))
2222: /* MUTANT (del_stmt) */ /*     return listobj; */ 
2226: /* MUTANT (negate) */    if(! (str)) {
2249: /* MUTANT (del_stmt) */ /*     JSStringBuffer localSB; */ 
2250: /* MUTANT (del_stmt) */ /*     size_t length, length2, newlength; */ 
2251: /* MUTANT (del_stmt) */ /*     jschar *bp, *base; */ 
2253: /* MUTANT (negate) */    if(! (!sb)) {
2254: /* MUTANT (del_stmt) */ /*         sb = &localSB; */ 
2255: /* MUTANT (del_stmt) */ /*         js_InitStringBuffer(sb); */ 
2259: /* MUTANT (del_stmt) */ /*     length2 = str2 ? JSSTRING_LENGTH(str2) : 0; */ 
2259: /* MUTANT (rep_const) */    length2 = str2 ? JSSTRING_LENGTH(str2) : 1;
2259: /* MUTANT (rep_const) */    length2 = str2 ? JSSTRING_LENGTH(str2) : -1;
2260: /* MUTANT (rep_op) */    newlength = STRING_BUFFER_OFFSET(sb) -
2260: /* MUTANT (rep_op) */    newlength = STRING_BUFFER_OFFSET(sb) *
2260: /* MUTANT (rep_op) */    newlength = STRING_BUFFER_OFFSET(sb) %
2261: /* MUTANT (rep_op) */                prefixlength - length + ((length2 != 0) ? 1 + length2 : 0) +
2261: /* MUTANT (rep_op) */                prefixlength * length + ((length2 != 0) ? 1 + length2 : 0) +
2261: /* MUTANT (rep_op) */                prefixlength % length + ((length2 != 0) ? 1 + length2 : 0) +
2261: /* MUTANT (rep_op) */                prefixlength + length - ((length2 != 0) ? 1 + length2 : 0) +
2261: /* MUTANT (rep_op) */                prefixlength + length * ((length2 != 0) ? 1 + length2 : 0) +
2261: /* MUTANT (rep_op) */                prefixlength + length % ((length2 != 0) ? 1 + length2 : 0) +
2261: /* MUTANT (rep_op) */                prefixlength + length + ((length2 == 0) ? 1 + length2 : 0) +
2261: /* MUTANT (rep_op) */                prefixlength + length + ((length2 != 0) ? 1 - length2 : 0) +
2261: /* MUTANT (rep_op) */                prefixlength + length + ((length2 != 0) ? 1 * length2 : 0) +
2261: /* MUTANT (rep_op) */                prefixlength + length + ((length2 != 0) ? 1 % length2 : 0) +
2261: /* MUTANT (rep_op) */                prefixlength + length + ((length2 != 0) ? 1 + length2 : 0) -
2261: /* MUTANT (rep_op) */                prefixlength + length + ((length2 != 0) ? 1 + length2 : 0) *
2261: /* MUTANT (rep_op) */                prefixlength + length + ((length2 != 0) ? 1 + length2 : 0) %
2261: /* MUTANT (rep_const) */                prefixlength + length + ((length2 != 1) ? 1 + length2 : 0) +
2261: /* MUTANT (rep_const) */                prefixlength + length + ((length2 != -1) ? 1 + length2 : 0) +
2261: /* MUTANT (rep_const) */                prefixlength + length + ((length2 != 0) ? 0 + length2 : 0) +
2261: /* MUTANT (rep_const) */                prefixlength + length + ((length2 != 0) ? -1 + length2 : 0) +
2261: /* MUTANT (rep_const) */                prefixlength + length + ((length2 != 0) ? ((1)+1) + length2 : 0) +
2261: /* MUTANT (rep_const) */                prefixlength + length + ((length2 != 0) ? 1 + length2 : 1) +
2261: /* MUTANT (rep_const) */                prefixlength + length + ((length2 != 0) ? 1 + length2 : -1) +
2264: /* MUTANT (rep_op) */                JS_realloc(cx, sb->base, (newlength - 1) * sizeof(jschar));
2264: /* MUTANT (rep_op) */                JS_realloc(cx, sb->base, (newlength * 1) * sizeof(jschar));
2264: /* MUTANT (rep_op) */                JS_realloc(cx, sb->base, (newlength % 1) * sizeof(jschar));
2264: /* MUTANT (rep_const) */                JS_realloc(cx, sb->base, (newlength + 0) * sizeof(jschar));
2264: /* MUTANT (rep_const) */                JS_realloc(cx, sb->base, (newlength + -1) * sizeof(jschar));
2264: /* MUTANT (rep_const) */                JS_realloc(cx, sb->base, (newlength + ((1)+1)) * sizeof(jschar));
2265: /* MUTANT (negate) */    if(! (!bp)) {
2266: /* MUTANT (del_stmt) */ /*         js_FinishStringBuffer(sb); */ 
2267: /* MUTANT (del_stmt) */ /*         return NULL; */ 
2270: /* MUTANT (rep_op) */    bp -= STRING_BUFFER_OFFSET(sb);
2270: /* MUTANT (rep_op) */    bp *= STRING_BUFFER_OFFSET(sb);
2270: /* MUTANT (rep_op) */    bp %= STRING_BUFFER_OFFSET(sb);
2271: /* MUTANT (del_stmt) */ /*     js_strncpy(bp, prefix, prefixlength); */ 
2272: /* MUTANT (del_stmt) */ /*     bp += prefixlength; */ 
2272: /* MUTANT (rep_op) */    bp -= prefixlength;
2272: /* MUTANT (rep_op) */    bp *= prefixlength;
2272: /* MUTANT (rep_op) */    bp %= prefixlength;
2273: /* MUTANT (del_stmt) */ /*     js_strncpy(bp, JSSTRING_CHARS(str), length); */ 
2274: /* MUTANT (del_stmt) */ /*     bp += length; */ 
2274: /* MUTANT (rep_op) */    bp -= length;
2274: /* MUTANT (rep_op) */    bp *= length;
2274: /* MUTANT (rep_op) */    bp %= length;
2275: /* MUTANT (rep_op) */    if (length2 == 0) {
2275: /* MUTANT (rep_const) */    if (length2 != 1) {
2275: /* MUTANT (rep_const) */    if (length2 != -1) {
2275: /* MUTANT (negate) */    if(! (length2 != 0)) {
2276: /* MUTANT (del_stmt) */ /*         *bp++ = (jschar) ' '; */ 
2276: /* MUTANT (rep_op) */        *bp-- = (jschar) ' ';
2277: /* MUTANT (del_stmt) */ /*         js_strncpy(bp, JSSTRING_CHARS(str2), length2); */ 
2278: /* MUTANT (del_stmt) */ /*         bp += length2; */ 
2278: /* MUTANT (rep_op) */        bp -= length2;
2278: /* MUTANT (rep_op) */        bp *= length2;
2278: /* MUTANT (rep_op) */        bp %= length2;
2281: /* MUTANT (del_stmt) */ /*     bp[suffixlength] = 0; */ 
2281: /* MUTANT (rep_const) */    bp[suffixlength] = 1;
2281: /* MUTANT (rep_const) */    bp[suffixlength] = -1;
2283: /* MUTANT (del_stmt) */ /*     str = js_NewString(cx, base, newlength, 0); */ 
2283: /* MUTANT (rep_const) */    str = js_NewString(cx, base, newlength, 1);
2283: /* MUTANT (rep_const) */    str = js_NewString(cx, base, newlength, -1);
2284: /* MUTANT (negate) */    if(! (!str))
2286: /* MUTANT (del_stmt) */ /*     return str; */ 
2292: /* MUTANT (rep_op) */    static const jschar cdata_prefix_ucNstr[] = {'<=', '!', '[',
2292: /* MUTANT (rep_op) */    static const jschar cdata_prefix_ucNstr[] = {'>', '!', '[',
2292: /* MUTANT (rep_op) */    static const jschar cdata_prefix_ucNstr[] = {'>=', '!', '[',
2292: /* MUTANT (rep_op) */    static const jschar cdata_prefix_ucNstr[] = {'==', '!', '[',
2292: /* MUTANT (rep_op) */    static const jschar cdata_prefix_ucNstr[] = {'!=', '!', '[',
2295: /* MUTANT (del_stmt) */ /*     static const jschar cdata_suffix_ucNstr[] = {']', ']', '>'}; */ 
2295: /* MUTANT (rep_op) */    static const jschar cdata_suffix_ucNstr[] = {']', ']', '<='};
2295: /* MUTANT (rep_op) */    static const jschar cdata_suffix_ucNstr[] = {']', ']', '<'};
2295: /* MUTANT (rep_op) */    static const jschar cdata_suffix_ucNstr[] = {']', ']', '>='};
2295: /* MUTANT (rep_op) */    static const jschar cdata_suffix_ucNstr[] = {']', ']', '=='};
2295: /* MUTANT (rep_op) */    static const jschar cdata_suffix_ucNstr[] = {']', ']', '!='};
2298: /* MUTANT (rep_const) */                                cdata_prefix_ucNstr, 0,
2298: /* MUTANT (rep_const) */                                cdata_prefix_ucNstr, 1,
2298: /* MUTANT (rep_const) */                                cdata_prefix_ucNstr, -1,
2298: /* MUTANT (rep_const) */                                cdata_prefix_ucNstr, ((9)+1),
2298: /* MUTANT (rep_const) */                                cdata_prefix_ucNstr, ((9)-1),
2299: /* MUTANT (rep_const) */                                cdata_suffix_ucNstr, 0);
2299: /* MUTANT (rep_const) */                                cdata_suffix_ucNstr, 1);
2299: /* MUTANT (rep_const) */                                cdata_suffix_ucNstr, -1);
2299: /* MUTANT (rep_const) */                                cdata_suffix_ucNstr, ((3)+1));
2299: /* MUTANT (rep_const) */                                cdata_suffix_ucNstr, ((3)-1));
2305: /* MUTANT (del_stmt) */ /*     static const jschar comment_prefix_ucNstr[] = {'<', '!', '-', '-'}; */ 
2305: /* MUTANT (rep_op) */    static const jschar comment_prefix_ucNstr[] = {'<=', '!', '-', '-'};
2305: /* MUTANT (rep_op) */    static const jschar comment_prefix_ucNstr[] = {'>', '!', '-', '-'};
2305: /* MUTANT (rep_op) */    static const jschar comment_prefix_ucNstr[] = {'>=', '!', '-', '-'};
2305: /* MUTANT (rep_op) */    static const jschar comment_prefix_ucNstr[] = {'==', '!', '-', '-'};
2305: /* MUTANT (rep_op) */    static const jschar comment_prefix_ucNstr[] = {'!=', '!', '-', '-'};
2306: /* MUTANT (del_stmt) */ /*     static const jschar comment_suffix_ucNstr[] = {'-', '-', '>'}; */ 
2306: /* MUTANT (rep_op) */    static const jschar comment_suffix_ucNstr[] = {'-', '-', '<='};
2306: /* MUTANT (rep_op) */    static const jschar comment_suffix_ucNstr[] = {'-', '-', '<'};
2306: /* MUTANT (rep_op) */    static const jschar comment_suffix_ucNstr[] = {'-', '-', '>='};
2306: /* MUTANT (rep_op) */    static const jschar comment_suffix_ucNstr[] = {'-', '-', '=='};
2306: /* MUTANT (rep_op) */    static const jschar comment_suffix_ucNstr[] = {'-', '-', '!='};
2309: /* MUTANT (rep_const) */                                comment_prefix_ucNstr, 0,
2309: /* MUTANT (rep_const) */                                comment_prefix_ucNstr, 1,
2309: /* MUTANT (rep_const) */                                comment_prefix_ucNstr, -1,
2309: /* MUTANT (rep_const) */                                comment_prefix_ucNstr, ((4)+1),
2309: /* MUTANT (rep_const) */                                comment_prefix_ucNstr, ((4)-1),
2310: /* MUTANT (rep_const) */                                comment_suffix_ucNstr, 0);
2310: /* MUTANT (rep_const) */                                comment_suffix_ucNstr, 1);
2310: /* MUTANT (rep_const) */                                comment_suffix_ucNstr, -1);
2310: /* MUTANT (rep_const) */                                comment_suffix_ucNstr, ((3)+1));
2310: /* MUTANT (rep_const) */                                comment_suffix_ucNstr, ((3)-1));
2317: /* MUTANT (del_stmt) */ /*     static const jschar pi_prefix_ucNstr[] = {'<', '?'}; */ 
2317: /* MUTANT (rep_op) */    static const jschar pi_prefix_ucNstr[] = {'<=', '?'};
2317: /* MUTANT (rep_op) */    static const jschar pi_prefix_ucNstr[] = {'>', '?'};
2317: /* MUTANT (rep_op) */    static const jschar pi_prefix_ucNstr[] = {'>=', '?'};
2317: /* MUTANT (rep_op) */    static const jschar pi_prefix_ucNstr[] = {'==', '?'};
2317: /* MUTANT (rep_op) */    static const jschar pi_prefix_ucNstr[] = {'!=', '?'};
2318: /* MUTANT (del_stmt) */ /*     static const jschar pi_suffix_ucNstr[] = {'?', '>'}; */ 
2318: /* MUTANT (rep_op) */    static const jschar pi_suffix_ucNstr[] = {'?', '<='};
2318: /* MUTANT (rep_op) */    static const jschar pi_suffix_ucNstr[] = {'?', '<'};
2318: /* MUTANT (rep_op) */    static const jschar pi_suffix_ucNstr[] = {'?', '>='};
2318: /* MUTANT (rep_op) */    static const jschar pi_suffix_ucNstr[] = {'?', '=='};
2318: /* MUTANT (rep_op) */    static const jschar pi_suffix_ucNstr[] = {'?', '!='};
2321: /* MUTANT (rep_const) */                                pi_prefix_ucNstr, 0,
2321: /* MUTANT (rep_const) */                                pi_prefix_ucNstr, 1,
2321: /* MUTANT (rep_const) */                                pi_prefix_ucNstr, -1,
2321: /* MUTANT (rep_const) */                                pi_prefix_ucNstr, ((2)+1),
2321: /* MUTANT (rep_const) */                                pi_prefix_ucNstr, ((2)-1),
2322: /* MUTANT (rep_const) */                                pi_suffix_ucNstr, 0);
2322: /* MUTANT (rep_const) */                                pi_suffix_ucNstr, 1);
2322: /* MUTANT (rep_const) */                                pi_suffix_ucNstr, -1);
2322: /* MUTANT (rep_const) */                                pi_suffix_ucNstr, ((2)+1));
2322: /* MUTANT (rep_const) */                                pi_suffix_ucNstr, ((2)-1));
2332: /* MUTANT (del_stmt) */ /*     js_AppendCString(sb, "=\""); */ 
2333: /* MUTANT (del_stmt) */ /*     valstr = js_EscapeAttributeValue(cx, valstr); */ 
2334: /* MUTANT (negate) */    if(! (!valstr)) {
2335: /* MUTANT (del_stmt) */ /*         free(sb->base); */ 
2336: /* MUTANT (del_stmt) */ /*         sb->base = STRING_BUFFER_ERROR_BASE; */ 
2337: /* MUTANT (del_stmt) */ /*         return; */ 
2340: /* MUTANT (del_stmt) */ /*     js_AppendChar(sb, '"'); */ 
2352: /* MUTANT (del_stmt) */ /*     size_t length, newlength; */ 
2353: /* MUTANT (del_stmt) */ /*     const jschar *cp, *start, *end; */ 
2354: /* MUTANT (del_stmt) */ /*     jschar c; */ 
2356: /* MUTANT (del_stmt) */ /*     length = newlength = JSSTRING_LENGTH(str); */ 
2357: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp - length; cp < end; cp++) {
2357: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp * length; cp < end; cp++) {
2357: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp % length; cp < end; cp++) {
2357: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp <= end; cp++) {
2357: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp > end; cp++) {
2357: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp >= end; cp++) {
2357: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp == end; cp++) {
2357: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp != end; cp++) {
2357: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp < end; cp--) {
2358: /* MUTANT (del_stmt) */ /*         c = *cp; */ 
2359: /* MUTANT (rep_op) */        if (c != '<' || c == '>')
2359: /* MUTANT (rep_op) */        if (c == '<=' || c == '>')
2359: /* MUTANT (rep_op) */        if (c == '>' || c == '>')
2359: /* MUTANT (rep_op) */        if (c == '>=' || c == '>')
2359: /* MUTANT (rep_op) */        if (c == '==' || c == '>')
2359: /* MUTANT (rep_op) */        if (c == '!=' || c == '>')
2359: /* MUTANT (rep_op) */        if (c == '<' && c == '>')
2359: /* MUTANT (rep_op) */        if (c == '<' || c != '>')
2359: /* MUTANT (rep_op) */        if (c == '<' || c == '<=')
2359: /* MUTANT (rep_op) */        if (c == '<' || c == '<')
2359: /* MUTANT (rep_op) */        if (c == '<' || c == '>=')
2359: /* MUTANT (rep_op) */        if (c == '<' || c == '==')
2359: /* MUTANT (rep_op) */        if (c == '<' || c == '!=')
2359: /* MUTANT (negate) */        if(! (c == '<' || c == '>'))
2360: /* MUTANT (rep_op) */            newlength -= 3;
2360: /* MUTANT (rep_op) */            newlength *= 3;
2360: /* MUTANT (rep_op) */            newlength %= 3;
2360: /* MUTANT (rep_const) */            newlength += 0;
2360: /* MUTANT (rep_const) */            newlength += 1;
2360: /* MUTANT (rep_const) */            newlength += -1;
2360: /* MUTANT (rep_const) */            newlength += ((3)+1);
2360: /* MUTANT (rep_const) */            newlength += ((3)-1);
2361: /* MUTANT (rep_op) */        else if (c != '&')
2361: /* MUTANT (negate) */        else if(! (c == '&'))
2362: /* MUTANT (rep_op) */            newlength -= 4;
2362: /* MUTANT (rep_op) */            newlength *= 4;
2362: /* MUTANT (rep_op) */            newlength %= 4;
2362: /* MUTANT (rep_const) */            newlength += 0;
2362: /* MUTANT (rep_const) */            newlength += 1;
2362: /* MUTANT (rep_const) */            newlength += -1;
2362: /* MUTANT (rep_const) */            newlength += ((4)+1);
2362: /* MUTANT (rep_const) */            newlength += ((4)-1);
2364: /* MUTANT (rep_op) */        if (newlength <= length) {
2364: /* MUTANT (rep_op) */        if (newlength > length) {
2364: /* MUTANT (rep_op) */        if (newlength >= length) {
2364: /* MUTANT (rep_op) */        if (newlength == length) {
2364: /* MUTANT (rep_op) */        if (newlength != length) {
2364: /* MUTANT (negate) */        if(! (newlength < length)) {
2365: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
2366: /* MUTANT (del_stmt) */ /*             return NULL; */ 
2369: /* MUTANT (rep_op) */    if ((sb || STRING_BUFFER_OFFSET(sb) != 0) || newlength > length) {
2369: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) == 0) || newlength > length) {
2369: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) && newlength > length) {
2369: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength <= length) {
2369: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength < length) {
2369: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength >= length) {
2369: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength == length) {
2369: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength != length) {
2369: /* MUTANT (rep_const) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 1) || newlength > length) {
2369: /* MUTANT (rep_const) */    if ((sb && STRING_BUFFER_OFFSET(sb) != -1) || newlength > length) {
2369: /* MUTANT (negate) */    if(! ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength > length)) {
2370: /* MUTANT (del_stmt) */ /*         JSStringBuffer localSB; */ 
2371: /* MUTANT (negate) */        if(! (!sb)) {
2372: /* MUTANT (del_stmt) */ /*             sb = &localSB; */ 
2373: /* MUTANT (del_stmt) */ /*             js_InitStringBuffer(sb); */ 
2375: /* MUTANT (negate) */        if(! (!sb->grow(sb, newlength))) {
2376: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
2377: /* MUTANT (del_stmt) */ /*             return NULL; */ 
2379: /* MUTANT (rep_op) */        for (cp = start; cp <= end; cp++) {
2379: /* MUTANT (rep_op) */        for (cp = start; cp > end; cp++) {
2379: /* MUTANT (rep_op) */        for (cp = start; cp >= end; cp++) {
2379: /* MUTANT (rep_op) */        for (cp = start; cp == end; cp++) {
2379: /* MUTANT (rep_op) */        for (cp = start; cp != end; cp++) {
2379: /* MUTANT (rep_op) */        for (cp = start; cp < end; cp--) {
2380: /* MUTANT (del_stmt) */ /*             c = *cp; */ 
2381: /* MUTANT (rep_op) */            if (c != '<')
2381: /* MUTANT (rep_op) */            if (c == '<=')
2381: /* MUTANT (rep_op) */            if (c == '>')
2381: /* MUTANT (rep_op) */            if (c == '>=')
2381: /* MUTANT (rep_op) */            if (c == '==')
2381: /* MUTANT (rep_op) */            if (c == '!=')
2381: /* MUTANT (negate) */            if(! (c == '<'))
2383: /* MUTANT (rep_op) */            else if (c != '>')
2383: /* MUTANT (rep_op) */            else if (c == '<=')
2383: /* MUTANT (rep_op) */            else if (c == '<')
2383: /* MUTANT (rep_op) */            else if (c == '>=')
2383: /* MUTANT (rep_op) */            else if (c == '==')
2383: /* MUTANT (rep_op) */            else if (c == '!=')
2383: /* MUTANT (negate) */            else if(! (c == '>'))
2385: /* MUTANT (rep_op) */            else if (c != '&')
2385: /* MUTANT (negate) */            else if(! (c == '&'))
2391: /* MUTANT (del_stmt) */ /*         str = js_NewString(cx, sb->base, STRING_BUFFER_OFFSET(sb), 0); */ 
2391: /* MUTANT (rep_const) */        str = js_NewString(cx, sb->base, STRING_BUFFER_OFFSET(sb), 1);
2391: /* MUTANT (rep_const) */        str = js_NewString(cx, sb->base, STRING_BUFFER_OFFSET(sb), -1);
2392: /* MUTANT (negate) */        if(! (!str))
2405: /* MUTANT (del_stmt) */ /*     size_t length, newlength; */ 
2406: /* MUTANT (del_stmt) */ /*     const jschar *cp, *start, *end; */ 
2407: /* MUTANT (del_stmt) */ /*     jschar c; */ 
2409: /* MUTANT (del_stmt) */ /*     length = newlength = JSSTRING_LENGTH(str); */ 
2410: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp - length; cp < end; cp++) {
2410: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp * length; cp < end; cp++) {
2410: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp % length; cp < end; cp++) {
2410: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp <= end; cp++) {
2410: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp > end; cp++) {
2410: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp >= end; cp++) {
2410: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp == end; cp++) {
2410: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp != end; cp++) {
2410: /* MUTANT (rep_op) */    for (cp = start = JSSTRING_CHARS(str), end = cp + length; cp < end; cp--) {
2411: /* MUTANT (del_stmt) */ /*         c = *cp; */ 
2412: /* MUTANT (rep_op) */        if (c != '"')
2412: /* MUTANT (negate) */        if(! (c == '"'))
2413: /* MUTANT (rep_op) */            newlength -= 5;
2413: /* MUTANT (rep_op) */            newlength *= 5;
2413: /* MUTANT (rep_op) */            newlength %= 5;
2413: /* MUTANT (rep_const) */            newlength += 0;
2413: /* MUTANT (rep_const) */            newlength += 1;
2413: /* MUTANT (rep_const) */            newlength += -1;
2413: /* MUTANT (rep_const) */            newlength += ((5)+1);
2413: /* MUTANT (rep_const) */            newlength += ((5)-1);
2414: /* MUTANT (rep_op) */        else if (c != '<')
2414: /* MUTANT (rep_op) */        else if (c == '<=')
2414: /* MUTANT (rep_op) */        else if (c == '>')
2414: /* MUTANT (rep_op) */        else if (c == '>=')
2414: /* MUTANT (rep_op) */        else if (c == '==')
2414: /* MUTANT (rep_op) */        else if (c == '!=')
2414: /* MUTANT (negate) */        else if(! (c == '<'))
2415: /* MUTANT (rep_op) */            newlength -= 3;
2415: /* MUTANT (rep_op) */            newlength *= 3;
2415: /* MUTANT (rep_op) */            newlength %= 3;
2415: /* MUTANT (rep_const) */            newlength += 0;
2415: /* MUTANT (rep_const) */            newlength += 1;
2415: /* MUTANT (rep_const) */            newlength += -1;
2415: /* MUTANT (rep_const) */            newlength += ((3)+1);
2415: /* MUTANT (rep_const) */            newlength += ((3)-1);
2416: /* MUTANT (rep_op) */        else if (c != '&' || c == '\n' || c == '\r' || c == '\t')
2416: /* MUTANT (rep_op) */        else if (c == '&' && c == '\n' || c == '\r' || c == '\t')
2416: /* MUTANT (rep_op) */        else if (c == '&' || c != '\n' || c == '\r' || c == '\t')
2416: /* MUTANT (rep_op) */        else if (c == '&' || c == '\n' && c == '\r' || c == '\t')
2416: /* MUTANT (rep_op) */        else if (c == '&' || c == '\n' || c != '\r' || c == '\t')
2416: /* MUTANT (rep_op) */        else if (c == '&' || c == '\n' || c == '\r' && c == '\t')
2416: /* MUTANT (rep_op) */        else if (c == '&' || c == '\n' || c == '\r' || c != '\t')
2416: /* MUTANT (negate) */        else if(! (c == '&' || c == '\n' || c == '\r' || c == '\t'))
2417: /* MUTANT (rep_op) */            newlength -= 4;
2417: /* MUTANT (rep_op) */            newlength *= 4;
2417: /* MUTANT (rep_op) */            newlength %= 4;
2417: /* MUTANT (rep_const) */            newlength += 0;
2417: /* MUTANT (rep_const) */            newlength += 1;
2417: /* MUTANT (rep_const) */            newlength += -1;
2417: /* MUTANT (rep_const) */            newlength += ((4)+1);
2417: /* MUTANT (rep_const) */            newlength += ((4)-1);
2419: /* MUTANT (rep_op) */        if (newlength <= length) {
2419: /* MUTANT (rep_op) */        if (newlength > length) {
2419: /* MUTANT (rep_op) */        if (newlength >= length) {
2419: /* MUTANT (rep_op) */        if (newlength == length) {
2419: /* MUTANT (rep_op) */        if (newlength != length) {
2419: /* MUTANT (negate) */        if(! (newlength < length)) {
2420: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
2421: /* MUTANT (del_stmt) */ /*             return NULL; */ 
2424: /* MUTANT (rep_op) */    if ((sb || STRING_BUFFER_OFFSET(sb) != 0) || newlength > length) {
2424: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) == 0) || newlength > length) {
2424: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) && newlength > length) {
2424: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength <= length) {
2424: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength < length) {
2424: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength >= length) {
2424: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength == length) {
2424: /* MUTANT (rep_op) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength != length) {
2424: /* MUTANT (rep_const) */    if ((sb && STRING_BUFFER_OFFSET(sb) != 1) || newlength > length) {
2424: /* MUTANT (rep_const) */    if ((sb && STRING_BUFFER_OFFSET(sb) != -1) || newlength > length) {
2424: /* MUTANT (negate) */    if(! ((sb && STRING_BUFFER_OFFSET(sb) != 0) || newlength > length)) {
2425: /* MUTANT (del_stmt) */ /*         JSStringBuffer localSB; */ 
2426: /* MUTANT (negate) */        if(! (!sb)) {
2427: /* MUTANT (del_stmt) */ /*             sb = &localSB; */ 
2428: /* MUTANT (del_stmt) */ /*             js_InitStringBuffer(sb); */ 
2430: /* MUTANT (negate) */        if(! (!sb->grow(sb, newlength))) {
2431: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
2432: /* MUTANT (del_stmt) */ /*             return NULL; */ 
2434: /* MUTANT (rep_op) */        for (cp = start; cp <= end; cp++) {
2434: /* MUTANT (rep_op) */        for (cp = start; cp > end; cp++) {
2434: /* MUTANT (rep_op) */        for (cp = start; cp >= end; cp++) {
2434: /* MUTANT (rep_op) */        for (cp = start; cp == end; cp++) {
2434: /* MUTANT (rep_op) */        for (cp = start; cp != end; cp++) {
2434: /* MUTANT (rep_op) */        for (cp = start; cp < end; cp--) {
2435: /* MUTANT (del_stmt) */ /*             c = *cp; */ 
2436: /* MUTANT (rep_op) */            if (c != '"')
2436: /* MUTANT (negate) */            if(! (c == '"'))
2438: /* MUTANT (rep_op) */            else if (c != '<')
2438: /* MUTANT (rep_op) */            else if (c == '<=')
2438: /* MUTANT (rep_op) */            else if (c == '>')
2438: /* MUTANT (rep_op) */            else if (c == '>=')
2438: /* MUTANT (rep_op) */            else if (c == '==')
2438: /* MUTANT (rep_op) */            else if (c == '!=')
2438: /* MUTANT (negate) */            else if(! (c == '<'))
2440: /* MUTANT (rep_op) */            else if (c != '&')
2440: /* MUTANT (negate) */            else if(! (c == '&'))
2442: /* MUTANT (rep_op) */            else if (c != '\n')
2442: /* MUTANT (negate) */            else if(! (c == '\n'))
2444: /* MUTANT (rep_op) */            else if (c != '\r')
2444: /* MUTANT (negate) */            else if(! (c == '\r'))
2446: /* MUTANT (rep_op) */            else if (c != '\t')
2446: /* MUTANT (negate) */            else if(! (c == '\t'))
2452: /* MUTANT (del_stmt) */ /*         str = js_NewString(cx, sb->base, STRING_BUFFER_OFFSET(sb), 0); */ 
2452: /* MUTANT (rep_const) */        str = js_NewString(cx, sb->base, STRING_BUFFER_OFFSET(sb), 1);
2452: /* MUTANT (rep_const) */        str = js_NewString(cx, sb->base, STRING_BUFFER_OFFSET(sb), -1);
2453: /* MUTANT (negate) */        if(! (!str))
2463: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *match, *ns; */ 
2464: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
2465: /* MUTANT (del_stmt) */ /*     jsval argv[2]; */ 
2465: /* MUTANT (rep_const) */    jsval argv[0];
2465: /* MUTANT (rep_const) */    jsval argv[1];
2465: /* MUTANT (rep_const) */    jsval argv[-1];
2465: /* MUTANT (rep_const) */    jsval argv[((2)+1)];
2465: /* MUTANT (rep_const) */    jsval argv[((2)-1)];
2466: /* MUTANT (del_stmt) */ /*     JSObject *nsobj; */ 
2468: /* MUTANT (del_stmt) */ /*     JS_ASSERT(qn->uri); */ 
2469: /* MUTANT (negate) */    if(! (!qn->uri)) {
2476: /* MUTANT (del_stmt) */ /*         return NULL; */ 
2481: /* MUTANT (negate) */    if(! (inScopeNSes)) {
2482: /* MUTANT (rep_op) */        for (i = 0, n = inScopeNSes->length; i <= n; i++) {
2482: /* MUTANT (rep_op) */        for (i = 0, n = inScopeNSes->length; i > n; i++) {
2482: /* MUTANT (rep_op) */        for (i = 0, n = inScopeNSes->length; i >= n; i++) {
2482: /* MUTANT (rep_op) */        for (i = 0, n = inScopeNSes->length; i == n; i++) {
2482: /* MUTANT (rep_op) */        for (i = 0, n = inScopeNSes->length; i != n; i++) {
2482: /* MUTANT (rep_op) */        for (i = 0, n = inScopeNSes->length; i < n; i--) {
2482: /* MUTANT (rep_const) */        for (i = 1, n = inScopeNSes->length; i < n; i++) {
2482: /* MUTANT (rep_const) */        for (i = -1, n = inScopeNSes->length; i < n; i++) {
2483: /* MUTANT (del_stmt) */ /*             ns = XMLARRAY_MEMBER(inScopeNSes, i, JSXMLNamespace); */ 
2484: /* MUTANT (negate) */            if(! (!ns))
2514: /* MUTANT (rep_op) */            if (!js_CompareStrings(ns->uri, qn->uri) ||
2515: /* MUTANT (rep_op) */                (ns->prefix != qn->prefix ||
2515: /* MUTANT (rep_op) */                (ns->prefix == qn->prefix &&
2516: /* MUTANT (rep_op) */                 ((ns->prefix || qn->prefix)
2519: /* MUTANT (del_stmt) */ /*                 match = ns; */ 
2520: /* MUTANT (del_stmt) */ /*                 break; */ 
2526: /* MUTANT (negate) */    if(! (!match)) {
2527: /* MUTANT (del_stmt) */ /*         argv[0] = qn->prefix ? STRING_TO_JSVAL(qn->prefix) : JSVAL_VOID; */ 
2527: /* MUTANT (rep_const) */        argv[1] = qn->prefix ? STRING_TO_JSVAL(qn->prefix) : JSVAL_VOID;
2527: /* MUTANT (rep_const) */        argv[-1] = qn->prefix ? STRING_TO_JSVAL(qn->prefix) : JSVAL_VOID;
2528: /* MUTANT (del_stmt) */ /*         argv[1] = STRING_TO_JSVAL(qn->uri); */ 
2528: /* MUTANT (rep_const) */        argv[0] = STRING_TO_JSVAL(qn->uri);
2528: /* MUTANT (rep_const) */        argv[-1] = STRING_TO_JSVAL(qn->uri);
2528: /* MUTANT (rep_const) */        argv[((1)+1)] = STRING_TO_JSVAL(qn->uri);
2530: /* MUTANT (rep_const) */                                   0, argv);
2530: /* MUTANT (rep_const) */                                   1, argv);
2530: /* MUTANT (rep_const) */                                   -1, argv);
2530: /* MUTANT (rep_const) */                                   ((2)+1), argv);
2530: /* MUTANT (rep_const) */                                   ((2)-1), argv);
2531: /* MUTANT (negate) */        if(! (!nsobj))
2533: /* MUTANT (del_stmt) */ /*         match = (JSXMLNamespace *) JS_GetPrivate(cx, nsobj); */ 
2541: /* MUTANT (del_stmt) */ /*     const jschar *cp, *start, *end; */ 
2542: /* MUTANT (del_stmt) */ /*     size_t length, newlength, offset; */ 
2543: /* MUTANT (del_stmt) */ /*     uint32 i, n, m, serial; */ 
2544: /* MUTANT (del_stmt) */ /*     jschar *bp, *dp; */ 
2545: /* MUTANT (del_stmt) */ /*     JSBool done; */ 
2546: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
2547: /* MUTANT (del_stmt) */ /*     JSString *prefix; */ 
2549: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!IS_EMPTY(uri)); */ 
2557: /* MUTANT (del_stmt) */ /*     start = JSSTRING_CHARS(uri); */ 
2558: /* MUTANT (del_stmt) */ /*     cp = end = start + JSSTRING_LENGTH(uri); */ 
2558: /* MUTANT (rep_op) */    cp = end = start - JSSTRING_LENGTH(uri);
2558: /* MUTANT (rep_op) */    cp = end = start * JSSTRING_LENGTH(uri);
2558: /* MUTANT (rep_op) */    cp = end = start % JSSTRING_LENGTH(uri);
2559: /* MUTANT (rep_op) */    while (++cp > start) {
2559: /* MUTANT (rep_op) */    while (--cp <= start) {
2559: /* MUTANT (rep_op) */    while (--cp < start) {
2559: /* MUTANT (rep_op) */    while (--cp >= start) {
2559: /* MUTANT (rep_op) */    while (--cp == start) {
2559: /* MUTANT (rep_op) */    while (--cp != start) {
2559: /* MUTANT (negate) */    while(! (--cp > start)) {
2560: /* MUTANT (rep_op) */        if (*cp != '.' || *cp == '/' || *cp == ':') {
2560: /* MUTANT (rep_op) */        if (*cp == '.' && *cp == '/' || *cp == ':') {
2560: /* MUTANT (rep_op) */        if (*cp == '.' || *cp != '/' || *cp == ':') {
2560: /* MUTANT (rep_op) */        if (*cp == '.' || *cp == '/' && *cp == ':') {
2560: /* MUTANT (rep_op) */        if (*cp == '.' || *cp == '/' || *cp != ':') {
2560: /* MUTANT (negate) */        if(! (*cp == '.' || *cp == '/' || *cp == ':')) {
2561: /* MUTANT (del_stmt) */ /*             ++cp; */ 
2561: /* MUTANT (rep_op) */            --cp;
2562: /* MUTANT (negate) */            if(! (IsXMLName(cp, PTRDIFF(end, cp, jschar))))
2564: /* MUTANT (del_stmt) */ /*             end = --cp; */ 
2564: /* MUTANT (rep_op) */            end = ++cp;
2573: /* MUTANT (del_stmt) */ /*     serial = 0; */ 
2573: /* MUTANT (rep_const) */    serial = 1;
2573: /* MUTANT (rep_const) */    serial = -1;
2574: /* MUTANT (del_stmt) */ /*     bp = NULL; */ 
2576: /* MUTANT (rep_const) */    newlength = 1;
2576: /* MUTANT (rep_const) */    newlength = -1;
2579: /* MUTANT (del_stmt) */ /*         done = JS_TRUE; */ 
2580: /* MUTANT (rep_op) */        for (i = 0, n = decls->length; i <= n; i++) {
2580: /* MUTANT (rep_op) */        for (i = 0, n = decls->length; i > n; i++) {
2580: /* MUTANT (rep_op) */        for (i = 0, n = decls->length; i >= n; i++) {
2580: /* MUTANT (rep_op) */        for (i = 0, n = decls->length; i == n; i++) {
2580: /* MUTANT (rep_op) */        for (i = 0, n = decls->length; i != n; i++) {
2580: /* MUTANT (rep_op) */        for (i = 0, n = decls->length; i < n; i--) {
2580: /* MUTANT (rep_const) */        for (i = 1, n = decls->length; i < n; i++) {
2580: /* MUTANT (rep_const) */        for (i = -1, n = decls->length; i < n; i++) {
2581: /* MUTANT (del_stmt) */ /*             ns = XMLARRAY_MEMBER(decls, i, JSXMLNamespace); */ 
2582: /* MUTANT (rep_op) */            if (ns || ns->prefix &&
2582: /* MUTANT (rep_op) */            if (ns && ns->prefix ||
2583: /* MUTANT (rep_op) */                JSSTRING_LENGTH(ns->prefix) != length &&
2583: /* MUTANT (rep_op) */                JSSTRING_LENGTH(ns->prefix) == length ||
2586: /* MUTANT (negate) */                if(! (!bp)) {
2587: /* MUTANT (del_stmt) */ /*                     newlength = length + 2 + (size_t) log10(n); */ 
2587: /* MUTANT (rep_op) */                    newlength = length - 2 + (size_t) log10(n);
2587: /* MUTANT (rep_op) */                    newlength = length * 2 + (size_t) log10(n);
2587: /* MUTANT (rep_op) */                    newlength = length % 2 + (size_t) log10(n);
2587: /* MUTANT (rep_op) */                    newlength = length + 2 - (size_t) log10(n);
2587: /* MUTANT (rep_op) */                    newlength = length + 2 * (size_t) log10(n);
2587: /* MUTANT (rep_op) */                    newlength = length + 2 % (size_t) log10(n);
2587: /* MUTANT (rep_const) */                    newlength = length + 0 + (size_t) log10(n);
2587: /* MUTANT (rep_const) */                    newlength = length + 1 + (size_t) log10(n);
2587: /* MUTANT (rep_const) */                    newlength = length + -1 + (size_t) log10(n);
2587: /* MUTANT (rep_const) */                    newlength = length + ((2)+1) + (size_t) log10(n);
2587: /* MUTANT (rep_const) */                    newlength = length + ((2)-1) + (size_t) log10(n);
2589: /* MUTANT (rep_op) */                         JS_malloc(cx, (newlength - 1) * sizeof(jschar));
2589: /* MUTANT (rep_op) */                         JS_malloc(cx, (newlength * 1) * sizeof(jschar));
2589: /* MUTANT (rep_op) */                         JS_malloc(cx, (newlength % 1) * sizeof(jschar));
2589: /* MUTANT (rep_const) */                         JS_malloc(cx, (newlength + 0) * sizeof(jschar));
2589: /* MUTANT (rep_const) */                         JS_malloc(cx, (newlength + -1) * sizeof(jschar));
2589: /* MUTANT (rep_const) */                         JS_malloc(cx, (newlength + ((1)+1)) * sizeof(jschar));
2590: /* MUTANT (negate) */                    if(! (!bp))
2592: /* MUTANT (del_stmt) */ /*                     js_strncpy(bp, cp, length); */ 
2595: /* MUTANT (rep_op) */                --serial;
2596: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(serial <= n); */ 
2596: /* MUTANT (rep_op) */                JS_ASSERT(serial < n);
2596: /* MUTANT (rep_op) */                JS_ASSERT(serial > n);
2596: /* MUTANT (rep_op) */                JS_ASSERT(serial >= n);
2596: /* MUTANT (rep_op) */                JS_ASSERT(serial == n);
2596: /* MUTANT (rep_op) */                JS_ASSERT(serial != n);
2597: /* MUTANT (del_stmt) */ /*                 dp = bp + length + 2 + (size_t) log10(serial); */ 
2597: /* MUTANT (rep_op) */                dp = bp - length + 2 + (size_t) log10(serial);
2597: /* MUTANT (rep_op) */                dp = bp * length + 2 + (size_t) log10(serial);
2597: /* MUTANT (rep_op) */                dp = bp % length + 2 + (size_t) log10(serial);
2597: /* MUTANT (rep_op) */                dp = bp + length - 2 + (size_t) log10(serial);
2597: /* MUTANT (rep_op) */                dp = bp + length * 2 + (size_t) log10(serial);
2597: /* MUTANT (rep_op) */                dp = bp + length % 2 + (size_t) log10(serial);
2597: /* MUTANT (rep_op) */                dp = bp + length + 2 - (size_t) log10(serial);
2597: /* MUTANT (rep_op) */                dp = bp + length + 2 * (size_t) log10(serial);
2597: /* MUTANT (rep_op) */                dp = bp + length + 2 % (size_t) log10(serial);
2597: /* MUTANT (rep_const) */                dp = bp + length + 0 + (size_t) log10(serial);
2597: /* MUTANT (rep_const) */                dp = bp + length + 1 + (size_t) log10(serial);
2597: /* MUTANT (rep_const) */                dp = bp + length + -1 + (size_t) log10(serial);
2597: /* MUTANT (rep_const) */                dp = bp + length + ((2)+1) + (size_t) log10(serial);
2597: /* MUTANT (rep_const) */                dp = bp + length + ((2)-1) + (size_t) log10(serial);
2598: /* MUTANT (del_stmt) */ /*                 *dp = 0; */ 
2598: /* MUTANT (rep_const) */                *dp = 1;
2598: /* MUTANT (rep_const) */                *dp = -1;
2599: /* MUTANT (rep_op) */                for (m = serial; m == 0; m /= 10)
2599: /* MUTANT (rep_const) */                for (m = serial; m != 1; m /= 10)
2599: /* MUTANT (rep_const) */                for (m = serial; m != -1; m /= 10)
2599: /* MUTANT (rep_const) */                for (m = serial; m != 0; m /= 0)
2599: /* MUTANT (rep_const) */                for (m = serial; m != 0; m /= 1)
2599: /* MUTANT (rep_const) */                for (m = serial; m != 0; m /= -1)
2599: /* MUTANT (rep_const) */                for (m = serial; m != 0; m /= ((10)+1))
2599: /* MUTANT (rep_const) */                for (m = serial; m != 0; m /= ((10)-1))
2600: /* MUTANT (rep_op) */                    *--dp = (jschar)('0' - m % 10);
2600: /* MUTANT (rep_op) */                    *--dp = (jschar)('0' * m % 10);
2600: /* MUTANT (rep_op) */                    *--dp = (jschar)('0' % m % 10);
2600: /* MUTANT (rep_op) */                    *--dp = (jschar)('0' + m + 10);
2600: /* MUTANT (rep_op) */                    *--dp = (jschar)('0' + m - 10);
2600: /* MUTANT (rep_op) */                    *--dp = (jschar)('0' + m * 10);
2600: /* MUTANT (rep_const) */                    *--dp = (jschar)('1' + m % 10);
2600: /* MUTANT (rep_const) */                    *--dp = (jschar)('-1' + m % 10);
2600: /* MUTANT (rep_const) */                    *--dp = (jschar)('0' + m % 0);
2600: /* MUTANT (rep_const) */                    *--dp = (jschar)('0' + m % 1);
2600: /* MUTANT (rep_const) */                    *--dp = (jschar)('0' + m % -1);
2600: /* MUTANT (rep_const) */                    *--dp = (jschar)('0' + m % ((10)+1));
2600: /* MUTANT (rep_const) */                    *--dp = (jschar)('0' + m % ((10)-1));
2601: /* MUTANT (del_stmt) */ /*                 *--dp = '-'; */ 
2602: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(dp == bp + length); */ 
2602: /* MUTANT (rep_op) */                JS_ASSERT(dp != bp + length);
2602: /* MUTANT (rep_op) */                JS_ASSERT(dp == bp - length);
2602: /* MUTANT (rep_op) */                JS_ASSERT(dp == bp * length);
2602: /* MUTANT (rep_op) */                JS_ASSERT(dp == bp % length);
2604: /* MUTANT (del_stmt) */ /*                 done = JS_FALSE; */ 
2605: /* MUTANT (del_stmt) */ /*                 break; */ 
2608: /* MUTANT (negate) */    } while(! (!done));
2610: /* MUTANT (negate) */    if(! (!bp)) {
2611: /* MUTANT (del_stmt) */ /*         offset = PTRDIFF(cp, start, jschar); */ 
2612: /* MUTANT (del_stmt) */ /*         prefix = js_NewDependentString(cx, uri, offset, length, 0); */ 
2612: /* MUTANT (rep_const) */        prefix = js_NewDependentString(cx, uri, offset, length, 1);
2612: /* MUTANT (rep_const) */        prefix = js_NewDependentString(cx, uri, offset, length, -1);
2614: /* MUTANT (del_stmt) */ /*         prefix = js_NewString(cx, bp, newlength, 0); */ 
2614: /* MUTANT (rep_const) */        prefix = js_NewString(cx, bp, newlength, 1);
2614: /* MUTANT (rep_const) */        prefix = js_NewString(cx, bp, newlength, -1);
2615: /* MUTANT (negate) */        if(! (!prefix))
2624: /* MUTANT (del_stmt) */ /*     const JSXMLNamespace *nsa = (const JSXMLNamespace *) a; */ 
2625: /* MUTANT (del_stmt) */ /*     const JSXMLNamespace *nsb = (const JSXMLNamespace *) b; */ 
2627: /* MUTANT (negate) */    if(! (nsb->prefix))
2628: /* MUTANT (rep_op) */        return nsa->prefix || !js_CompareStrings(nsa->prefix, nsb->prefix);
2629: /* MUTANT (del_stmt) */ /*     return !js_CompareStrings(nsa->uri, nsb->uri); */ 
2637: /* MUTANT (del_stmt) */ /*     JSBool pretty, indentKids; */ 
2638: /* MUTANT (del_stmt) */ /*     JSStringBuffer sb; */ 
2639: /* MUTANT (del_stmt) */ /*     JSString *str, *prefix, *kidstr; */ 
2640: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor; */ 
2641: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
2642: /* MUTANT (del_stmt) */ /*     JSXMLArray empty, decls, ancdecls; */ 
2643: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns, *ns2; */ 
2644: /* MUTANT (del_stmt) */ /*     uintN nextIndentLevel; */ 
2645: /* MUTANT (del_stmt) */ /*     JSXML *attr, *kid; */ 
2647: /* MUTANT (negate) */    if(! (!GetBooleanXMLSetting(cx, js_prettyPrinting_str, &pretty)))
2650: /* MUTANT (del_stmt) */ /*     js_InitStringBuffer(&sb); */ 
2651: /* MUTANT (negate) */    if(! (pretty))
2653: /* MUTANT (del_stmt) */ /*     str = NULL; */ 
2658: /* MUTANT (negate) */        if(! (pretty)) {
2659: /* MUTANT (del_stmt) */ /*             str = ChompXMLWhitespace(cx, xml->xml_value); */ 
2660: /* MUTANT (negate) */            if(! (!str))
2663: /* MUTANT (del_stmt) */ /*             str = xml->xml_value; */ 
2682: /* MUTANT (del_stmt) */ /*         i = 0; */ 
2682: /* MUTANT (rep_const) */        i = 1;
2682: /* MUTANT (rep_const) */        i = -1;
2683: /* MUTANT (rep_op) */        while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
2683: /* MUTANT (negate) */        while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
2684: /* MUTANT (rep_op) */            if (pretty || i != 0)
2684: /* MUTANT (rep_op) */            if (pretty && i == 0)
2684: /* MUTANT (rep_const) */            if (pretty && i != 1)
2684: /* MUTANT (rep_const) */            if (pretty && i != -1)
2684: /* MUTANT (negate) */            if(! (pretty && i != 0))
2687: /* MUTANT (del_stmt) */ /*             kidstr = XMLToXMLString(cx, kid, ancestorNSes, indentLevel); */ 
2688: /* MUTANT (negate) */            if(! (!kidstr))
2691: /* MUTANT (del_stmt) */ /*             js_AppendJSString(&sb, kidstr); */ 
2692: /* MUTANT (del_stmt) */ /*             ++i; */ 
2692: /* MUTANT (rep_op) */            --i;
2695: /* MUTANT (negate) */        if(! (kid))
2698: /* MUTANT (negate) */        if(! (!sb.base)) {
2699: /* MUTANT (negate) */            if(! (!STRING_BUFFER_OK(&sb))) {
2700: /* MUTANT (del_stmt) */ /*                 JS_ReportOutOfMemory(cx); */ 
2701: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
2706: /* MUTANT (rep_const) */        str = js_NewString(cx, sb.base, STRING_BUFFER_OFFSET(&sb), 1);
2706: /* MUTANT (rep_const) */        str = js_NewString(cx, sb.base, STRING_BUFFER_OFFSET(&sb), -1);
2708: /* MUTANT (negate) */        if(! (!str))
2710: /* MUTANT (del_stmt) */ /*         return str; */ 
2712: /* MUTANT (del_stmt) */ /*       default:; */ 
2716: /* MUTANT (negate) */    if(! (!JS_EnterLocalRootScope(cx)))
2720: /* MUTANT (negate) */    if(! (!ancestorNSes)) {
2721: /* MUTANT (del_stmt) */ /*         XMLArrayInit(cx, &empty, 0); */ 
2721: /* MUTANT (rep_const) */        XMLArrayInit(cx, &empty, 1);
2721: /* MUTANT (rep_const) */        XMLArrayInit(cx, &empty, -1);
2722: /* MUTANT (del_stmt) */ /*         ancestorNSes = &empty; */ 
2724: /* MUTANT (rep_const) */    XMLArrayInit(cx, &decls, 1);
2724: /* MUTANT (rep_const) */    XMLArrayInit(cx, &decls, -1);
2725: /* MUTANT (del_stmt) */ /*     ancdecls.capacity = 0; */ 
2725: /* MUTANT (rep_const) */    ancdecls.capacity = 1;
2725: /* MUTANT (rep_const) */    ancdecls.capacity = -1;
2728: /* MUTANT (del_stmt) */ /*     XMLArrayCursorInit(&cursor, &xml->xml_namespaces); */ 
2729: /* MUTANT (rep_op) */    while ((ns = (JSXMLNamespace *) XMLArrayCursorNext(&cursor)) == NULL) {
2729: /* MUTANT (negate) */    while(! ((ns = (JSXMLNamespace *) XMLArrayCursorNext(&cursor)) != NULL)) {
2730: /* MUTANT (negate) */        if(! (!ns->declared))
2732: /* MUTANT (negate) */        if(! (!XMLARRAY_HAS_MEMBER(ancestorNSes, ns, namespace_identity))) {
2734: /* MUTANT (del_stmt) */ /*             ns2 = js_NewXMLNamespace(cx, ns->prefix, ns->uri, JS_TRUE); */ 
2735: /* MUTANT (rep_op) */            if (!ns2 && !XMLARRAY_APPEND(cx, &decls, ns2))
2735: /* MUTANT (negate) */            if(! (!ns2 || !XMLARRAY_APPEND(cx, &decls, ns2)))
2740: /* MUTANT (negate) */    if(! (ns))
2748: /* MUTANT (rep_op) */    if (!XMLArrayInit(cx, &ancdecls, ancestorNSes->length - decls.length))
2748: /* MUTANT (rep_op) */    if (!XMLArrayInit(cx, &ancdecls, ancestorNSes->length * decls.length))
2748: /* MUTANT (rep_op) */    if (!XMLArrayInit(cx, &ancdecls, ancestorNSes->length % decls.length))
2748: /* MUTANT (negate) */    if(! (!XMLArrayInit(cx, &ancdecls, ancestorNSes->length + decls.length)))
2750: /* MUTANT (rep_op) */    for (i = 0, n = ancestorNSes->length; i <= n; i++) {
2750: /* MUTANT (rep_op) */    for (i = 0, n = ancestorNSes->length; i > n; i++) {
2750: /* MUTANT (rep_op) */    for (i = 0, n = ancestorNSes->length; i >= n; i++) {
2750: /* MUTANT (rep_op) */    for (i = 0, n = ancestorNSes->length; i == n; i++) {
2750: /* MUTANT (rep_op) */    for (i = 0, n = ancestorNSes->length; i != n; i++) {
2750: /* MUTANT (rep_op) */    for (i = 0, n = ancestorNSes->length; i < n; i--) {
2750: /* MUTANT (rep_const) */    for (i = 1, n = ancestorNSes->length; i < n; i++) {
2750: /* MUTANT (rep_const) */    for (i = -1, n = ancestorNSes->length; i < n; i++) {
2751: /* MUTANT (del_stmt) */ /*         ns2 = XMLARRAY_MEMBER(ancestorNSes, i, JSXMLNamespace); */ 
2752: /* MUTANT (negate) */        if(! (!ns2))
2754: /* MUTANT (del_stmt) */ /*         JS_ASSERT(!XMLARRAY_HAS_MEMBER(&decls, ns2, namespace_identity)); */ 
2755: /* MUTANT (negate) */        if(! (!XMLARRAY_APPEND(cx, &ancdecls, ns2)))
2758: /* MUTANT (rep_op) */    for (i = 0, n = decls.length; i <= n; i++) {
2758: /* MUTANT (rep_op) */    for (i = 0, n = decls.length; i > n; i++) {
2758: /* MUTANT (rep_op) */    for (i = 0, n = decls.length; i >= n; i++) {
2758: /* MUTANT (rep_op) */    for (i = 0, n = decls.length; i == n; i++) {
2758: /* MUTANT (rep_op) */    for (i = 0, n = decls.length; i != n; i++) {
2758: /* MUTANT (rep_op) */    for (i = 0, n = decls.length; i < n; i--) {
2758: /* MUTANT (rep_const) */    for (i = 1, n = decls.length; i < n; i++) {
2758: /* MUTANT (rep_const) */    for (i = -1, n = decls.length; i < n; i++) {
2759: /* MUTANT (del_stmt) */ /*         ns2 = XMLARRAY_MEMBER(&decls, i, JSXMLNamespace); */ 
2760: /* MUTANT (negate) */        if(! (!ns2))
2762: /* MUTANT (del_stmt) */ /*         JS_ASSERT(!XMLARRAY_HAS_MEMBER(&ancdecls, ns2, namespace_identity)); */ 
2763: /* MUTANT (negate) */        if(! (!XMLARRAY_APPEND(cx, &ancdecls, ns2)))
2769: /* MUTANT (negate) */    if(! (!ns))
2773: /* MUTANT (negate) */    if(! (!ns->prefix)) {
2788: /* MUTANT (negate) */        if(! (!xml->name->prefix)) {
2789: /* MUTANT (del_stmt) */ /*             prefix = cx->runtime->emptyString; */ 
2791: /* MUTANT (del_stmt) */ /*             prefix = GeneratePrefix(cx, ns->uri, &ancdecls); */ 
2792: /* MUTANT (negate) */            if(! (!prefix))
2796: /* MUTANT (negate) */        if(! (!ns))
2812: /* MUTANT (negate) */        if(! (IS_EMPTY(prefix))) {
2813: /* MUTANT (del_stmt) */ /*             i = XMLArrayFindMember(&decls, ns, namespace_match); */ 
2814: /* MUTANT (rep_op) */            if (i == XML_NOT_FOUND)
2814: /* MUTANT (negate) */            if(! (i != XML_NOT_FOUND))
2825: /* MUTANT (rep_op) */        if (!XMLARRAY_APPEND(cx, &ancdecls, ns) &&
2827: /* MUTANT (del_stmt) */ /*             goto out; */ 
2832: /* MUTANT (rep_op) */    js_AppendChar(&sb, '<=');
2832: /* MUTANT (rep_op) */    js_AppendChar(&sb, '>');
2832: /* MUTANT (rep_op) */    js_AppendChar(&sb, '>=');
2832: /* MUTANT (rep_op) */    js_AppendChar(&sb, '==');
2832: /* MUTANT (rep_op) */    js_AppendChar(&sb, '!=');
2834: /* MUTANT (rep_op) */    if (ns->prefix || !IS_EMPTY(ns->prefix)) {
2834: /* MUTANT (negate) */    if(! (ns->prefix && !IS_EMPTY(ns->prefix))) {
2835: /* MUTANT (del_stmt) */ /*         js_AppendJSString(&sb, ns->prefix); */ 
2836: /* MUTANT (del_stmt) */ /*         js_AppendChar(&sb, ':'); */ 
2847: /* MUTANT (del_stmt) */ /*     XMLArrayCursorInit(&cursor, &decls); */ 
2848: /* MUTANT (rep_op) */    while ((ns2 = (JSXMLNamespace *) XMLArrayCursorNext(&cursor)) == NULL) {
2848: /* MUTANT (negate) */    while(! ((ns2 = (JSXMLNamespace *) XMLArrayCursorNext(&cursor)) != NULL)) {
2849: /* MUTANT (del_stmt) */ /*         JS_ASSERT(ns2->declared); */ 
2851: /* MUTANT (del_stmt) */ /*         js_AppendCString(&sb, " xmlns"); */ 
2854: /* MUTANT (negate) */        if(! (!ns2->prefix)) {
2855: /* MUTANT (del_stmt) */ /*             prefix = GeneratePrefix(cx, ns2->uri, &ancdecls); */ 
2856: /* MUTANT (negate) */            if(! (!prefix))
2858: /* MUTANT (del_stmt) */ /*             ns2->prefix = prefix; */ 
2862: /* MUTANT (negate) */        if(! (!IS_EMPTY(ns2->prefix))) {
2863: /* MUTANT (del_stmt) */ /*             js_AppendChar(&sb, ':'); */ 
2864: /* MUTANT (del_stmt) */ /*             js_AppendJSString(&sb, ns2->prefix); */ 
2871: /* MUTANT (negate) */    if(! (ns2))
2875: /* MUTANT (del_stmt) */ /*     XMLArrayCursorInit(&cursor, &xml->xml_attrs); */ 
2876: /* MUTANT (rep_op) */    while ((attr = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
2876: /* MUTANT (negate) */    while(! ((attr = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
2877: /* MUTANT (del_stmt) */ /*         js_AppendChar(&sb, ' '); */ 
2878: /* MUTANT (del_stmt) */ /*         ns2 = GetNamespace(cx, attr->name, &ancdecls); */ 
2879: /* MUTANT (negate) */        if(! (!ns2))
2883: /* MUTANT (negate) */        if(! (!ns2->prefix)) {
2884: /* MUTANT (del_stmt) */ /*             prefix = GeneratePrefix(cx, ns2->uri, &ancdecls); */ 
2885: /* MUTANT (negate) */            if(! (!prefix))
2889: /* MUTANT (del_stmt) */ /*             ns2 = js_NewXMLNamespace(cx, prefix, ns2->uri, JS_TRUE); */ 
2890: /* MUTANT (negate) */            if(! (!ns2))
2900: /* MUTANT (rep_op) */            if (!XMLARRAY_APPEND(cx, &ancdecls, ns2) &&
2902: /* MUTANT (del_stmt) */ /*                 break; */ 
2907: /* MUTANT (negate) */        if(! (!IS_EMPTY(ns2->prefix))) {
2908: /* MUTANT (del_stmt) */ /*             js_AppendJSString(&sb, ns2->prefix); */ 
2909: /* MUTANT (del_stmt) */ /*             js_AppendChar(&sb, ':'); */ 
2916: /* MUTANT (del_stmt) */ /*         AppendAttributeValue(cx, &sb, attr->xml_value); */ 
2919: /* MUTANT (negate) */    if(! (attr))
2923: /* MUTANT (del_stmt) */ /*     n = xml->xml_kids.length; */ 
2924: /* MUTANT (rep_op) */    if (n != 0) {
2924: /* MUTANT (rep_const) */    if (n == 1) {
2924: /* MUTANT (rep_const) */    if (n == -1) {
2924: /* MUTANT (negate) */    if(! (n == 0)) {
2925: /* MUTANT (del_stmt) */ /*         js_AppendCString(&sb, "/>"); */ 
2928: /* MUTANT (del_stmt) */ /*         js_AppendChar(&sb, '>'); */ 
2928: /* MUTANT (rep_op) */        js_AppendChar(&sb, '<=');
2928: /* MUTANT (rep_op) */        js_AppendChar(&sb, '<');
2928: /* MUTANT (rep_op) */        js_AppendChar(&sb, '>=');
2928: /* MUTANT (rep_op) */        js_AppendChar(&sb, '==');
2928: /* MUTANT (rep_op) */        js_AppendChar(&sb, '!=');
2929: /* MUTANT (rep_op) */        indentKids = n <= 1 ||
2929: /* MUTANT (rep_op) */        indentKids = n < 1 ||
2929: /* MUTANT (rep_op) */        indentKids = n >= 1 ||
2929: /* MUTANT (rep_op) */        indentKids = n == 1 ||
2929: /* MUTANT (rep_op) */        indentKids = n != 1 ||
2929: /* MUTANT (rep_op) */        indentKids = n > 1 &&
2929: /* MUTANT (rep_const) */        indentKids = n > 0 ||
2929: /* MUTANT (rep_const) */        indentKids = n > -1 ||
2929: /* MUTANT (rep_const) */        indentKids = n > ((1)+1) ||
2930: /* MUTANT (rep_op) */                     (n != 1 &&
2930: /* MUTANT (rep_op) */                     (n == 1 ||
2930: /* MUTANT (rep_const) */                     (n == 0 &&
2930: /* MUTANT (rep_const) */                     (n == -1 &&
2930: /* MUTANT (rep_const) */                     (n == ((1)+1) &&
2931: /* MUTANT (rep_op) */                      (kid = XMLARRAY_MEMBER(&xml->xml_kids, 0, JSXML)) ||
2931: /* MUTANT (rep_const) */                      (kid = XMLARRAY_MEMBER(&xml->xml_kids, 1, JSXML)) &&
2931: /* MUTANT (rep_const) */                      (kid = XMLARRAY_MEMBER(&xml->xml_kids, -1, JSXML)) &&
2932: /* MUTANT (rep_op) */                      kid->xml_class == JSXML_CLASS_TEXT);
2934: /* MUTANT (rep_op) */        if (pretty || indentKids) {
2934: /* MUTANT (negate) */        if(! (pretty && indentKids)) {
2935: /* MUTANT (negate) */            if(! (!GetUint32XMLSetting(cx, js_prettyIndent_str, &i)))
2937: /* MUTANT (del_stmt) */ /*             nextIndentLevel = indentLevel + i; */ 
2937: /* MUTANT (rep_op) */            nextIndentLevel = indentLevel - i;
2937: /* MUTANT (rep_op) */            nextIndentLevel = indentLevel * i;
2937: /* MUTANT (rep_op) */            nextIndentLevel = indentLevel % i;
2939: /* MUTANT (del_stmt) */ /*             nextIndentLevel = 0; */ 
2939: /* MUTANT (rep_const) */            nextIndentLevel = 1;
2939: /* MUTANT (rep_const) */            nextIndentLevel = -1;
2943: /* MUTANT (rep_op) */        while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
2943: /* MUTANT (negate) */        while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
2944: /* MUTANT (rep_op) */            if (pretty || indentKids)
2944: /* MUTANT (negate) */            if(! (pretty && indentKids))
2947: /* MUTANT (del_stmt) */ /*             kidstr = XMLToXMLString(cx, kid, &ancdecls, nextIndentLevel); */ 
2948: /* MUTANT (negate) */            if(! (!kidstr))
2951: /* MUTANT (del_stmt) */ /*             js_AppendJSString(&sb, kidstr); */ 
2954: /* MUTANT (negate) */        if(! (kid))
2957: /* MUTANT (rep_op) */        if (pretty || indentKids) {
2957: /* MUTANT (negate) */        if(! (pretty && indentKids)) {
2958: /* MUTANT (del_stmt) */ /*             js_AppendChar(&sb, '\n'); */ 
2959: /* MUTANT (del_stmt) */ /*             js_RepeatChar(&sb, ' ', indentLevel); */ 
2964: /* MUTANT (rep_op) */        if (ns->prefix || !IS_EMPTY(ns->prefix)) {
2964: /* MUTANT (negate) */        if(! (ns->prefix && !IS_EMPTY(ns->prefix))) {
2965: /* MUTANT (del_stmt) */ /*             js_AppendJSString(&sb, ns->prefix); */ 
2966: /* MUTANT (del_stmt) */ /*             js_AppendChar(&sb, ':'); */ 
2971: /* MUTANT (del_stmt) */ /*         js_AppendChar(&sb, '>'); */ 
2971: /* MUTANT (rep_op) */        js_AppendChar(&sb, '<=');
2971: /* MUTANT (rep_op) */        js_AppendChar(&sb, '<');
2971: /* MUTANT (rep_op) */        js_AppendChar(&sb, '>=');
2971: /* MUTANT (rep_op) */        js_AppendChar(&sb, '==');
2971: /* MUTANT (rep_op) */        js_AppendChar(&sb, '!=');
2974: /* MUTANT (negate) */    if(! (!STRING_BUFFER_OK(&sb))) {
2975: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(cx); */ 
2976: /* MUTANT (del_stmt) */ /*         goto out; */ 
2979: /* MUTANT (rep_const) */    str = js_NewString(cx, sb.base, STRING_BUFFER_OFFSET(&sb), 1);
2979: /* MUTANT (rep_const) */    str = js_NewString(cx, sb.base, STRING_BUFFER_OFFSET(&sb), -1);
2982: /* MUTANT (rep_op) */    if (!str || STRING_BUFFER_OK(&sb))
2982: /* MUTANT (negate) */    if(! (!str && STRING_BUFFER_OK(&sb)))
2984: /* MUTANT (del_stmt) */ /*     XMLArrayFinish(cx, &decls); */ 
2985: /* MUTANT (rep_op) */    if (ancdecls.capacity == 0)
2985: /* MUTANT (rep_const) */    if (ancdecls.capacity != 1)
2985: /* MUTANT (rep_const) */    if (ancdecls.capacity != -1)
2985: /* MUTANT (negate) */    if(! (ancdecls.capacity != 0))
2987: /* MUTANT (del_stmt) */ /*     return str; */ 
2994: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
2995: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
2996: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
2998: /* MUTANT (rep_op) */    if (JSVAL_IS_NULL(v) && JSVAL_IS_VOID(v)) {
2998: /* MUTANT (negate) */    if(! (JSVAL_IS_NULL(v) || JSVAL_IS_VOID(v))) {
3004: /* MUTANT (del_stmt) */ /*         return NULL; */ 
3007: /* MUTANT (rep_op) */    if (JSVAL_IS_BOOLEAN(v) && JSVAL_IS_NUMBER(v))
3007: /* MUTANT (negate) */    if(! (JSVAL_IS_BOOLEAN(v) || JSVAL_IS_NUMBER(v)))
3010: /* MUTANT (negate) */    if(! (JSVAL_IS_STRING(v)))
3013: /* MUTANT (del_stmt) */ /*     obj = JSVAL_TO_OBJECT(v); */ 
3014: /* MUTANT (negate) */    if(! (!OBJECT_IS_XML(cx, obj))) {
3015: /* MUTANT (negate) */        if(! (!OBJ_DEFAULT_VALUE(cx, obj, JSTYPE_STRING, &v)))
3017: /* MUTANT (del_stmt) */ /*         str = js_ValueToString(cx, v); */ 
3018: /* MUTANT (negate) */        if(! (!str))
3020: /* MUTANT (del_stmt) */ /*         return EscapeElementValue(cx, NULL, str); */ 
3025: /* MUTANT (del_stmt) */ /*     return XMLToXMLString(cx, xml, NULL, 0); */ 
3025: /* MUTANT (rep_const) */    return XMLToXMLString(cx, xml, NULL, 1);
3025: /* MUTANT (rep_const) */    return XMLToXMLString(cx, xml, NULL, -1);
3031: /* MUTANT (del_stmt) */ /*     JSString *name, *uri, *prefix; */ 
3032: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
3033: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
3034: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
3035: /* MUTANT (del_stmt) */ /*     JSTempValueRooter tvr; */ 
3037: /* MUTANT (negate) */    if(! (JSVAL_IS_STRING(v))) {
3038: /* MUTANT (del_stmt) */ /*         name = JSVAL_TO_STRING(v); */ 
3039: /* MUTANT (del_stmt) */ /*         uri = prefix = cx->runtime->emptyString; */ 
3041: /* MUTANT (negate) */        if(! (JSVAL_IS_PRIMITIVE(v))) {
3042: /* MUTANT (del_stmt) */ /*             name = js_DecompileValueGenerator(cx, JSDVG_IGNORE_STACK, v, NULL); */ 
3043: /* MUTANT (negate) */            if(! (name)) {
3052: /* MUTANT (del_stmt) */ /*         clasp = OBJ_GET_CLASS(cx, obj); */ 
3053: /* MUTANT (rep_op) */        if (clasp != &js_AttributeNameClass)
3053: /* MUTANT (negate) */        if(! (clasp == &js_AttributeNameClass))
3056: /* MUTANT (rep_op) */        if (clasp != &js_QNameClass.base) {
3056: /* MUTANT (negate) */        if(! (clasp == &js_QNameClass.base)) {
3057: /* MUTANT (del_stmt) */ /*             qn = (JSXMLQName *) JS_GetPrivate(cx, obj); */ 
3058: /* MUTANT (del_stmt) */ /*             uri = qn->uri; */ 
3059: /* MUTANT (del_stmt) */ /*             prefix = qn->prefix; */ 
3060: /* MUTANT (del_stmt) */ /*             name = qn->localName; */ 
3062: /* MUTANT (rep_op) */            if (clasp != &js_AnyNameClass) {
3062: /* MUTANT (negate) */            if(! (clasp == &js_AnyNameClass)) {
3063: /* MUTANT (del_stmt) */ /*                 name = ATOM_TO_STRING(cx->runtime->atomState.starAtom); */ 
3065: /* MUTANT (del_stmt) */ /*                 name = js_ValueToString(cx, v); */ 
3066: /* MUTANT (negate) */                if(! (!name))
3074: /* MUTANT (negate) */    if(! (!qn))
3082: /* MUTANT (del_stmt) */ /*     JS_PUSH_SINGLE_TEMP_ROOT(cx, OBJECT_TO_JSVAL(qn), &tvr); */ 
3083: /* MUTANT (del_stmt) */ /*     obj = js_GetAttributeNameObject(cx, qn); */ 
3084: /* MUTANT (del_stmt) */ /*     JS_POP_TEMP_ROOT(cx, &tvr); */ 
3085: /* MUTANT (negate) */    if(! (!obj))
3087: /* MUTANT (del_stmt) */ /*     return qn; */ 
3093: /* MUTANT (del_stmt) */ /*     JSString *name; */ 
3094: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
3095: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
3096: /* MUTANT (del_stmt) */ /*     uint32 index; */ 
3097: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
3098: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
3100: /* MUTANT (negate) */    if(! (JSVAL_IS_STRING(v))) {
3101: /* MUTANT (del_stmt) */ /*         name = JSVAL_TO_STRING(v); */ 
3103: /* MUTANT (negate) */        if(! (JSVAL_IS_PRIMITIVE(v))) {
3104: /* MUTANT (del_stmt) */ /*             name = js_DecompileValueGenerator(cx, JSDVG_IGNORE_STACK, v, NULL); */ 
3105: /* MUTANT (negate) */            if(! (name))
3107: /* MUTANT (del_stmt) */ /*             return NULL; */ 
3111: /* MUTANT (del_stmt) */ /*         clasp = OBJ_GET_CLASS(cx, obj); */ 
3112: /* MUTANT (rep_op) */        if (clasp != &js_AttributeNameClass || clasp == &js_QNameClass.base)
3112: /* MUTANT (rep_op) */        if (clasp == &js_AttributeNameClass && clasp == &js_QNameClass.base)
3112: /* MUTANT (rep_op) */        if (clasp == &js_AttributeNameClass || clasp != &js_QNameClass.base)
3112: /* MUTANT (negate) */        if(! (clasp == &js_AttributeNameClass || clasp == &js_QNameClass.base))
3114: /* MUTANT (rep_op) */        if (clasp != &js_AnyNameClass) {
3114: /* MUTANT (negate) */        if(! (clasp == &js_AnyNameClass)) {
3115: /* MUTANT (del_stmt) */ /*             name = ATOM_TO_STRING(cx->runtime->atomState.starAtom); */ 
3116: /* MUTANT (del_stmt) */ /*             goto construct; */ 
3119: /* MUTANT (negate) */        if(! (!name))
3136: /* MUTANT (negate) */    if(! (js_IdIsIndex(STRING_TO_JSVAL(name), &index)))
3139: /* MUTANT (rep_op) */    if (*JSSTRING_CHARS(name) != '@') {
3139: /* MUTANT (negate) */    if(! (*JSSTRING_CHARS(name) == '@')) {
3140: /* MUTANT (del_stmt) */ /*         name = js_NewDependentString(cx, name, 1, JSSTRING_LENGTH(name) - 1, 0); */ 
3140: /* MUTANT (rep_const) */        name = js_NewDependentString(cx, name, 0, JSSTRING_LENGTH(name) - 1, 0);
3140: /* MUTANT (rep_const) */        name = js_NewDependentString(cx, name, -1, JSSTRING_LENGTH(name) - 1, 0);
3140: /* MUTANT (rep_const) */        name = js_NewDependentString(cx, name, ((1)+1), JSSTRING_LENGTH(name) - 1, 0);
3140: /* MUTANT (rep_const) */        name = js_NewDependentString(cx, name, 1, JSSTRING_LENGTH(name) - 0, 0);
3140: /* MUTANT (rep_const) */        name = js_NewDependentString(cx, name, 1, JSSTRING_LENGTH(name) - -1, 0);
3140: /* MUTANT (rep_const) */        name = js_NewDependentString(cx, name, 1, JSSTRING_LENGTH(name) - ((1)+1), 0);
3140: /* MUTANT (rep_const) */        name = js_NewDependentString(cx, name, 1, JSSTRING_LENGTH(name) - 1, 1);
3140: /* MUTANT (rep_const) */        name = js_NewDependentString(cx, name, 1, JSSTRING_LENGTH(name) - 1, -1);
3141: /* MUTANT (negate) */        if(! (!name))
3143: /* MUTANT (del_stmt) */ /*         *funidp = 0; */ 
3143: /* MUTANT (rep_const) */        *funidp = 1;
3143: /* MUTANT (rep_const) */        *funidp = -1;
3144: /* MUTANT (del_stmt) */ /*         return ToAttributeName(cx, STRING_TO_JSVAL(name)); */ 
3149: /* MUTANT (del_stmt) */ /*     obj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, 1, &v); */ 
3149: /* MUTANT (rep_const) */    obj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, 0, &v);
3149: /* MUTANT (rep_const) */    obj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, -1, &v);
3149: /* MUTANT (rep_const) */    obj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, ((1)+1), &v);
3150: /* MUTANT (negate) */    if(! (!obj))
3155: /* MUTANT (del_stmt) */ /*     atom = cx->runtime->atomState.lazy.functionNamespaceURIAtom; */ 
3156: /* MUTANT (rep_op) */    if (qn->uri || atom &&
3156: /* MUTANT (rep_op) */    if (qn->uri && atom ||
3157: /* MUTANT (rep_op) */        (qn->uri != ATOM_TO_STRING(atom) ||
3157: /* MUTANT (rep_op) */        (qn->uri == ATOM_TO_STRING(atom) &&
3159: /* MUTANT (negate) */        if(! (!JS_ValueToId(cx, STRING_TO_JSVAL(qn->localName), funidp)))
3162: /* MUTANT (del_stmt) */ /*         *funidp = 0; */ 
3162: /* MUTANT (rep_const) */        *funidp = 1;
3162: /* MUTANT (rep_const) */        *funidp = -1;
3170: /* MUTANT (del_stmt) */ /*     return NULL; */ 
3177: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *match, *ns2; */ 
3178: /* MUTANT (del_stmt) */ /*     uint32 i, n, m; */ 
3180: /* MUTANT (rep_op) */    if (xml->xml_class == JSXML_CLASS_ELEMENT)
3180: /* MUTANT (negate) */    if(! (xml->xml_class != JSXML_CLASS_ELEMENT))
3184: /* MUTANT (negate) */    if(! (!ns->prefix)) {
3185: /* MUTANT (del_stmt) */ /*         match = NULL; */ 
3186: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i <= n; i++) {
3186: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i > n; i++) {
3186: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i >= n; i++) {
3186: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i == n; i++) {
3186: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i != n; i++) {
3186: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i < n; i--) {
3186: /* MUTANT (rep_const) */        for (i = 1, n = xml->xml_namespaces.length; i < n; i++) {
3186: /* MUTANT (rep_const) */        for (i = -1, n = xml->xml_namespaces.length; i < n; i++) {
3187: /* MUTANT (del_stmt) */ /*             ns2 = XMLARRAY_MEMBER(&xml->xml_namespaces, i, JSXMLNamespace); */ 
3188: /* MUTANT (rep_op) */            if (ns2 || !js_CompareStrings(ns2->uri, ns->uri)) {
3188: /* MUTANT (negate) */            if(! (ns2 && !js_CompareStrings(ns2->uri, ns->uri))) {
3189: /* MUTANT (del_stmt) */ /*                 match = ns2; */ 
3190: /* MUTANT (del_stmt) */ /*                 break; */ 
3193: /* MUTANT (rep_op) */        if (!match || !XMLARRAY_ADD_MEMBER(cx, &xml->xml_namespaces, n, ns))
3193: /* MUTANT (negate) */        if(! (!match && !XMLARRAY_ADD_MEMBER(cx, &xml->xml_namespaces, n, ns)))
3196: /* MUTANT (rep_op) */        if (IS_EMPTY(ns->prefix) || IS_EMPTY(xml->name->uri))
3196: /* MUTANT (negate) */        if(! (IS_EMPTY(ns->prefix) && IS_EMPTY(xml->name->uri)))
3198: /* MUTANT (del_stmt) */ /*         match = NULL; */ 
3202: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i <= n; i++) {
3202: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i > n; i++) {
3202: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i >= n; i++) {
3202: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i == n; i++) {
3202: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i != n; i++) {
3202: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i < n; i--) {
3202: /* MUTANT (rep_const) */        for (i = 1, n = xml->xml_namespaces.length; i < n; i++) {
3202: /* MUTANT (rep_const) */        for (i = -1, n = xml->xml_namespaces.length; i < n; i++) {
3203: /* MUTANT (del_stmt) */ /*             ns2 = XMLARRAY_MEMBER(&xml->xml_namespaces, i, JSXMLNamespace); */ 
3204: /* MUTANT (rep_op) */            if (ns2 || ns2->prefix &&
3204: /* MUTANT (rep_op) */            if (ns2 && ns2->prefix ||
3206: /* MUTANT (del_stmt) */ /*                 match = ns2; */ 
3207: /* MUTANT (del_stmt) */ /*                 m = i; */ 
3208: /* MUTANT (del_stmt) */ /*                 break; */ 
3211: /* MUTANT (rep_op) */        if (match || js_CompareStrings(match->uri, ns->uri)) {
3211: /* MUTANT (negate) */        if(! (match && js_CompareStrings(match->uri, ns->uri))) {
3214: /* MUTANT (del_stmt) */ /*             JS_ASSERT(ns2 == match); */ 
3214: /* MUTANT (rep_op) */            JS_ASSERT(ns2 != match);
3215: /* MUTANT (del_stmt) */ /*             match->prefix = NULL; */ 
3216: /* MUTANT (negate) */            if(! (!AddInScopeNamespace(cx, xml, match)))
3219: /* MUTANT (negate) */        if(! (!XMLARRAY_APPEND(cx, &xml->xml_namespaces, ns)))
3231: /* MUTANT (del_stmt) */ /*     uint32 i, j, k, n; */ 
3232: /* MUTANT (del_stmt) */ /*     JSXML *kid; */ 
3234: /* MUTANT (del_stmt) */ /*     JS_ASSERT(list->xml_class == JSXML_CLASS_LIST); */ 
3234: /* MUTANT (rep_op) */    JS_ASSERT(list->xml_class != JSXML_CLASS_LIST);
3235: /* MUTANT (del_stmt) */ /*     i = list->xml_kids.length; */ 
3236: /* MUTANT (del_stmt) */ /*     n = 1; */ 
3236: /* MUTANT (rep_const) */    n = 0;
3236: /* MUTANT (rep_const) */    n = -1;
3236: /* MUTANT (rep_const) */    n = ((1)+1);
3237: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
3237: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
3238: /* MUTANT (del_stmt) */ /*         list->xml_target = xml->xml_target; */ 
3239: /* MUTANT (del_stmt) */ /*         list->xml_targetprop = xml->xml_targetprop; */ 
3240: /* MUTANT (del_stmt) */ /*         n = JSXML_LENGTH(xml); */ 
3241: /* MUTANT (del_stmt) */ /*         k = i + n; */ 
3241: /* MUTANT (rep_op) */        k = i - n;
3241: /* MUTANT (rep_op) */        k = i * n;
3241: /* MUTANT (rep_op) */        k = i % n;
3242: /* MUTANT (negate) */        if(! (!XMLArraySetCapacity(cx, &list->xml_kids, k)))
3244: /* MUTANT (rep_op) */        for (j = 0; j <= n; j++) {
3244: /* MUTANT (rep_op) */        for (j = 0; j > n; j++) {
3244: /* MUTANT (rep_op) */        for (j = 0; j >= n; j++) {
3244: /* MUTANT (rep_op) */        for (j = 0; j == n; j++) {
3244: /* MUTANT (rep_op) */        for (j = 0; j != n; j++) {
3244: /* MUTANT (rep_op) */        for (j = 0; j < n; j--) {
3244: /* MUTANT (rep_const) */        for (j = 1; j < n; j++) {
3244: /* MUTANT (rep_const) */        for (j = -1; j < n; j++) {
3245: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, j, JSXML); */ 
3246: /* MUTANT (negate) */            if(! (kid))
3247: /* MUTANT (rep_op) */                XMLARRAY_SET_MEMBER(&list->xml_kids, i - j, kid);
3247: /* MUTANT (rep_op) */                XMLARRAY_SET_MEMBER(&list->xml_kids, i * j, kid);
3247: /* MUTANT (rep_op) */                XMLARRAY_SET_MEMBER(&list->xml_kids, i % j, kid);
3253: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_PROCESSING_INSTRUCTION)
3253: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_PROCESSING_INSTRUCTION))
3257: /* MUTANT (negate) */    if(! (!XMLARRAY_ADD_MEMBER(cx, &list->xml_kids, i, xml)))
3259: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3269: /* MUTANT (del_stmt) */ /*     JSXML *copy; */ 
3270: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
3273: /* MUTANT (negate) */    if(! (!JS_EnterLocalRootScope(cx)))
3275: /* MUTANT (del_stmt) */ /*     copy = DeepCopyInLRS(cx, xml, flags); */ 
3276: /* MUTANT (negate) */    if(! (copy)) {
3277: /* MUTANT (negate) */        if(! (obj)) {
3279: /* MUTANT (del_stmt) */ /*             ok = JS_SetPrivate(cx, obj, copy); */ 
3280: /* MUTANT (negate) */            if(! (ok))
3283: /* MUTANT (del_stmt) */ /*             ok = js_GetXMLObject(cx, copy) != NULL; */ 
3283: /* MUTANT (rep_op) */            ok = js_GetXMLObject(cx, copy) == NULL;
3285: /* MUTANT (negate) */        if(! (!ok))
3289: /* MUTANT (del_stmt) */ /*     return copy; */ 
3301: /* MUTANT (del_stmt) */ /*     uint32 j, n; */ 
3302: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor; */ 
3303: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
3304: /* MUTANT (del_stmt) */ /*     JSXML *kid, *kid2; */ 
3305: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
3307: /* MUTANT (del_stmt) */ /*     JS_ASSERT(cx->localRootStack); */ 
3309: /* MUTANT (del_stmt) */ /*     n = from->length; */ 
3310: /* MUTANT (negate) */    if(! (!XMLArraySetCapacity(cx, to, n)))
3313: /* MUTANT (del_stmt) */ /*     XMLArrayCursorInit(&cursor, from); */ 
3314: /* MUTANT (del_stmt) */ /*     j = 0; */ 
3314: /* MUTANT (rep_const) */    j = 1;
3314: /* MUTANT (rep_const) */    j = -1;
3315: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
3316: /* MUTANT (rep_op) */    while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
3316: /* MUTANT (negate) */    while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
3317: /* MUTANT (rep_op) */        if ((flags & XSF_IGNORE_COMMENTS) ||
3318: /* MUTANT (rep_op) */            kid->xml_class != JSXML_CLASS_COMMENT) {
3319: /* MUTANT (del_stmt) */ /*             continue; */ 
3321: /* MUTANT (rep_op) */        if ((flags & XSF_IGNORE_PROCESSING_INSTRUCTIONS) ||
3322: /* MUTANT (rep_op) */            kid->xml_class != JSXML_CLASS_PROCESSING_INSTRUCTION) {
3323: /* MUTANT (del_stmt) */ /*             continue; */ 
3325: /* MUTANT (rep_op) */        if ((flags & XSF_IGNORE_WHITESPACE) ||
3327: /* MUTANT (del_stmt) */ /*             continue; */ 
3330: /* MUTANT (negate) */        if(! (!kid2)) {
3331: /* MUTANT (del_stmt) */ /*             to->length = j; */ 
3332: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
3333: /* MUTANT (del_stmt) */ /*             break; */ 
3336: /* MUTANT (rep_op) */        if ((flags & XSF_IGNORE_WHITESPACE) ||
3337: /* MUTANT (rep_op) */            n <= 1 && kid2->xml_class == JSXML_CLASS_TEXT) {
3337: /* MUTANT (rep_op) */            n < 1 && kid2->xml_class == JSXML_CLASS_TEXT) {
3337: /* MUTANT (rep_op) */            n >= 1 && kid2->xml_class == JSXML_CLASS_TEXT) {
3337: /* MUTANT (rep_op) */            n == 1 && kid2->xml_class == JSXML_CLASS_TEXT) {
3337: /* MUTANT (rep_op) */            n != 1 && kid2->xml_class == JSXML_CLASS_TEXT) {
3337: /* MUTANT (rep_op) */            n > 1 || kid2->xml_class == JSXML_CLASS_TEXT) {
3337: /* MUTANT (rep_op) */            n > 1 && kid2->xml_class != JSXML_CLASS_TEXT) {
3337: /* MUTANT (rep_const) */            n > 0 && kid2->xml_class == JSXML_CLASS_TEXT) {
3337: /* MUTANT (rep_const) */            n > -1 && kid2->xml_class == JSXML_CLASS_TEXT) {
3337: /* MUTANT (rep_const) */            n > ((1)+1) && kid2->xml_class == JSXML_CLASS_TEXT) {
3338: /* MUTANT (del_stmt) */ /*             str = ChompXMLWhitespace(cx, kid2->xml_value); */ 
3339: /* MUTANT (negate) */            if(! (!str)) {
3340: /* MUTANT (del_stmt) */ /*                 to->length = j; */ 
3341: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
3342: /* MUTANT (del_stmt) */ /*                 break; */ 
3348: /* MUTANT (del_stmt) */ /*         ++j; */ 
3348: /* MUTANT (rep_op) */        --j;
3349: /* MUTANT (rep_op) */        if (parent->xml_class == JSXML_CLASS_LIST)
3349: /* MUTANT (negate) */        if(! (parent->xml_class != JSXML_CLASS_LIST))
3353: /* MUTANT (negate) */    if(! (!ok))
3356: /* MUTANT (rep_op) */    if (j <= n)
3356: /* MUTANT (rep_op) */    if (j > n)
3356: /* MUTANT (rep_op) */    if (j >= n)
3356: /* MUTANT (rep_op) */    if (j == n)
3356: /* MUTANT (rep_op) */    if (j != n)
3356: /* MUTANT (negate) */    if(! (j < n))
3358: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3364: /* MUTANT (del_stmt) */ /*     JSXML *copy; */ 
3365: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
3366: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
3367: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
3368: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns, *ns2; */ 
3371: /* MUTANT (del_stmt) */ /*     JS_ASSERT(cx->localRootStack); */ 
3373: /* MUTANT (del_stmt) */ /*     copy = js_NewXML(cx, xml->xml_class); */ 
3374: /* MUTANT (negate) */    if(! (!copy))
3376: /* MUTANT (del_stmt) */ /*     qn = xml->name; */ 
3377: /* MUTANT (negate) */    if(! (qn)) {
3378: /* MUTANT (del_stmt) */ /*         qn = js_NewXMLQName(cx, qn->uri, qn->prefix, qn->localName); */ 
3379: /* MUTANT (negate) */        if(! (!qn)) {
3380: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
3381: /* MUTANT (del_stmt) */ /*             goto out; */ 
3385: /* MUTANT (del_stmt) */ /*     copy->xml_flags = xml->xml_flags; */ 
3387: /* MUTANT (negate) */    if(! (JSXML_HAS_VALUE(xml))) {
3388: /* MUTANT (del_stmt) */ /*         copy->xml_value = xml->xml_value; */ 
3389: /* MUTANT (del_stmt) */ /*         ok = JS_TRUE; */ 
3391: /* MUTANT (del_stmt) */ /*         ok = DeepCopySetInLRS(cx, &xml->xml_kids, &copy->xml_kids, copy, flags); */ 
3392: /* MUTANT (negate) */        if(! (!ok))
3395: /* MUTANT (rep_op) */        if (xml->xml_class != JSXML_CLASS_LIST) {
3395: /* MUTANT (negate) */        if(! (xml->xml_class == JSXML_CLASS_LIST)) {
3396: /* MUTANT (del_stmt) */ /*             copy->xml_target = xml->xml_target; */ 
3397: /* MUTANT (del_stmt) */ /*             copy->xml_targetprop = xml->xml_targetprop; */ 
3399: /* MUTANT (del_stmt) */ /*             n = xml->xml_namespaces.length; */ 
3400: /* MUTANT (del_stmt) */ /*             ok = XMLArraySetCapacity(cx, &copy->xml_namespaces, n); */ 
3401: /* MUTANT (negate) */            if(! (!ok))
3403: /* MUTANT (rep_op) */            for (i = 0; i <= n; i++) {
3403: /* MUTANT (rep_op) */            for (i = 0; i > n; i++) {
3403: /* MUTANT (rep_op) */            for (i = 0; i >= n; i++) {
3403: /* MUTANT (rep_op) */            for (i = 0; i == n; i++) {
3403: /* MUTANT (rep_op) */            for (i = 0; i != n; i++) {
3403: /* MUTANT (rep_op) */            for (i = 0; i < n; i--) {
3403: /* MUTANT (rep_const) */            for (i = 1; i < n; i++) {
3403: /* MUTANT (rep_const) */            for (i = -1; i < n; i++) {
3404: /* MUTANT (del_stmt) */ /*                 ns = XMLARRAY_MEMBER(&xml->xml_namespaces, i, JSXMLNamespace); */ 
3405: /* MUTANT (negate) */                if(! (!ns))
3407: /* MUTANT (del_stmt) */ /*                 ns2 = js_NewXMLNamespace(cx, ns->prefix, ns->uri, ns->declared); */ 
3408: /* MUTANT (negate) */                if(! (!ns2)) {
3409: /* MUTANT (del_stmt) */ /*                     copy->xml_namespaces.length = i; */ 
3410: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
3411: /* MUTANT (del_stmt) */ /*                     goto out; */ 
3417: /* MUTANT (rep_const) */                                  1);
3417: /* MUTANT (rep_const) */                                  -1);
3418: /* MUTANT (negate) */            if(! (!ok))
3424: /* MUTANT (negate) */    if(! (!ok))
3426: /* MUTANT (del_stmt) */ /*     return copy; */ 
3432: /* MUTANT (del_stmt) */ /*     JSString *name; */ 
3434: /* MUTANT (del_stmt) */ /*     name = js_DecompileValueGenerator(cx, JSDVG_IGNORE_STACK, id, NULL); */ 
3435: /* MUTANT (negate) */    if(! (name)) {
3446: /* MUTANT (del_stmt) */ /*     uint32 index; */ 
3447: /* MUTANT (del_stmt) */ /*     JSXML *kid; */ 
3449: /* MUTANT (negate) */    if(! (!js_IdIsIndex(id, &index))) {
3450: /* MUTANT (del_stmt) */ /*         ReportBadXMLName(cx, id); */ 
3451: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3454: /* MUTANT (rep_op) */    if (JSXML_HAS_KIDS(xml) || index < xml->xml_kids.length) {
3454: /* MUTANT (rep_op) */    if (JSXML_HAS_KIDS(xml) && index <= xml->xml_kids.length) {
3454: /* MUTANT (rep_op) */    if (JSXML_HAS_KIDS(xml) && index > xml->xml_kids.length) {
3454: /* MUTANT (rep_op) */    if (JSXML_HAS_KIDS(xml) && index >= xml->xml_kids.length) {
3454: /* MUTANT (rep_op) */    if (JSXML_HAS_KIDS(xml) && index == xml->xml_kids.length) {
3454: /* MUTANT (rep_op) */    if (JSXML_HAS_KIDS(xml) && index != xml->xml_kids.length) {
3454: /* MUTANT (negate) */    if(! (JSXML_HAS_KIDS(xml) && index < xml->xml_kids.length)) {
3455: /* MUTANT (del_stmt) */ /*         kid = XMLARRAY_MEMBER(&xml->xml_kids, index, JSXML); */ 
3456: /* MUTANT (negate) */        if(! (kid))
3458: /* MUTANT (del_stmt) */ /*         XMLArrayDelete(cx, &xml->xml_kids, index, JS_TRUE); */ 
3462: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3470: /* MUTANT (del_stmt) */ /*     JSXMLQName *attrqn = attr->name; */ 
3472: /* MUTANT (rep_op) */    return (IS_STAR(nameqn->localName) &&
3473: /* MUTANT (rep_op) */            !js_CompareStrings(attrqn->localName, nameqn->localName)) ||
3474: /* MUTANT (rep_op) */           (!nameqn->uri &&
3481: /* MUTANT (rep_op) */    return (IS_STAR(nameqn->localName) &&
3482: /* MUTANT (rep_op) */            (elem->xml_class != JSXML_CLASS_ELEMENT &&
3482: /* MUTANT (rep_op) */            (elem->xml_class == JSXML_CLASS_ELEMENT ||
3483: /* MUTANT (rep_op) */             !js_CompareStrings(elem->name->localName, nameqn->localName))) ||
3484: /* MUTANT (rep_op) */           (!nameqn->uri &&
3485: /* MUTANT (rep_op) */            (elem->xml_class != JSXML_CLASS_ELEMENT &&
3485: /* MUTANT (rep_op) */            (elem->xml_class == JSXML_CLASS_ELEMENT ||
3493: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
3494: /* MUTANT (del_stmt) */ /*     JSXML *attr, *kid; */ 
3496: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_ELEMENT &&
3496: /* MUTANT (rep_op) */    if (xml->xml_class == JSXML_CLASS_ELEMENT ||
3497: /* MUTANT (rep_op) */        OBJ_GET_CLASS(cx, nameqn->object) != &js_AttributeNameClass) {
3498: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_attrs.length; i <= n; i++) {
3498: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_attrs.length; i > n; i++) {
3498: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_attrs.length; i >= n; i++) {
3498: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_attrs.length; i == n; i++) {
3498: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_attrs.length; i != n; i++) {
3498: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_attrs.length; i < n; i--) {
3498: /* MUTANT (rep_const) */        for (i = 1, n = xml->xml_attrs.length; i < n; i++) {
3498: /* MUTANT (rep_const) */        for (i = -1, n = xml->xml_attrs.length; i < n; i++) {
3499: /* MUTANT (del_stmt) */ /*             attr = XMLARRAY_MEMBER(&xml->xml_attrs, i, JSXML); */ 
3500: /* MUTANT (rep_op) */            if (attr || MatchAttrName(nameqn, attr)) {
3500: /* MUTANT (negate) */            if(! (attr && MatchAttrName(nameqn, attr))) {
3501: /* MUTANT (negate) */                if(! (!Append(cx, list, attr)))
3507: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(xml); i <= n; i++) {
3507: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(xml); i > n; i++) {
3507: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(xml); i >= n; i++) {
3507: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(xml); i == n; i++) {
3507: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(xml); i != n; i++) {
3507: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(xml); i < n; i--) {
3507: /* MUTANT (rep_const) */    for (i = 1, n = JSXML_LENGTH(xml); i < n; i++) {
3507: /* MUTANT (rep_const) */    for (i = -1, n = JSXML_LENGTH(xml); i < n; i++) {
3508: /* MUTANT (del_stmt) */ /*         kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
3509: /* MUTANT (negate) */        if(! (!kid))
3511: /* MUTANT (rep_op) */        if (OBJ_GET_CLASS(cx, nameqn->object) == &js_AttributeNameClass &&
3511: /* MUTANT (rep_op) */        if (OBJ_GET_CLASS(cx, nameqn->object) != &js_AttributeNameClass ||
3513: /* MUTANT (negate) */            if(! (!Append(cx, list, kid)))
3516: /* MUTANT (negate) */        if(! (!DescendantsHelper(cx, kid, nameqn, list)))
3525: /* MUTANT (del_stmt) */ /*     jsid funid; */ 
3526: /* MUTANT (del_stmt) */ /*     JSXMLQName *nameqn; */ 
3527: /* MUTANT (del_stmt) */ /*     JSObject *listobj; */ 
3528: /* MUTANT (del_stmt) */ /*     JSXML *list, *kid; */ 
3529: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
3530: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
3532: /* MUTANT (del_stmt) */ /*     nameqn = ToXMLName(cx, id, &funid); */ 
3533: /* MUTANT (negate) */    if(! (!nameqn))
3536: /* MUTANT (del_stmt) */ /*     listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
3537: /* MUTANT (negate) */    if(! (!listobj))
3539: /* MUTANT (del_stmt) */ /*     list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
3540: /* MUTANT (negate) */    if(! (funid))
3549: /* MUTANT (del_stmt) */ /*     list->name = nameqn; */ 
3550: /* MUTANT (negate) */    if(! (!JS_EnterLocalRootScope(cx)))
3552: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
3552: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
3553: /* MUTANT (del_stmt) */ /*         ok = JS_TRUE; */ 
3554: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i <= n; i++) {
3554: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i > n; i++) {
3554: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i >= n; i++) {
3554: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i == n; i++) {
3554: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i != n; i++) {
3554: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i < n; i--) {
3554: /* MUTANT (rep_const) */        for (i = 1, n = xml->xml_kids.length; i < n; i++) {
3554: /* MUTANT (rep_const) */        for (i = -1, n = xml->xml_kids.length; i < n; i++) {
3555: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
3556: /* MUTANT (rep_op) */            if (kid || kid->xml_class == JSXML_CLASS_ELEMENT) {
3556: /* MUTANT (rep_op) */            if (kid && kid->xml_class != JSXML_CLASS_ELEMENT) {
3556: /* MUTANT (negate) */            if(! (kid && kid->xml_class == JSXML_CLASS_ELEMENT)) {
3557: /* MUTANT (del_stmt) */ /*                 ok = DescendantsHelper(cx, kid, nameqn, list); */ 
3558: /* MUTANT (negate) */                if(! (!ok))
3563: /* MUTANT (del_stmt) */ /*         ok = DescendantsHelper(cx, xml, nameqn, list); */ 
3566: /* MUTANT (negate) */    if(! (!ok))
3568: /* MUTANT (del_stmt) */ /*     list->name = NULL; */ 
3569: /* MUTANT (del_stmt) */ /*     return list; */ 
3579: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn, *vqn; */ 
3580: /* MUTANT (del_stmt) */ /*     uint32 i, j, n; */ 
3581: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor, vcursor; */ 
3582: /* MUTANT (del_stmt) */ /*     JSXML *kid, *vkid, *attr, *vattr; */ 
3583: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
3584: /* MUTANT (del_stmt) */ /*     JSObject *xobj, *vobj; */ 
3587: /* MUTANT (rep_op) */    if (xml->xml_class == vxml->xml_class) {
3587: /* MUTANT (negate) */    if(! (xml->xml_class != vxml->xml_class)) {
3588: /* MUTANT (rep_op) */        if (xml->xml_class != JSXML_CLASS_LIST && xml->xml_kids.length == 1) {
3588: /* MUTANT (rep_op) */        if (xml->xml_class == JSXML_CLASS_LIST || xml->xml_kids.length == 1) {
3588: /* MUTANT (rep_op) */        if (xml->xml_class == JSXML_CLASS_LIST && xml->xml_kids.length != 1) {
3588: /* MUTANT (rep_const) */        if (xml->xml_class == JSXML_CLASS_LIST && xml->xml_kids.length == 0) {
3588: /* MUTANT (rep_const) */        if (xml->xml_class == JSXML_CLASS_LIST && xml->xml_kids.length == -1) {
3588: /* MUTANT (rep_const) */        if (xml->xml_class == JSXML_CLASS_LIST && xml->xml_kids.length == ((1)+1)) {
3588: /* MUTANT (negate) */        if(! (xml->xml_class == JSXML_CLASS_LIST && xml->xml_kids.length == 1)) {
3589: /* MUTANT (del_stmt) */ /*             xml = XMLARRAY_MEMBER(&xml->xml_kids, 0, JSXML); */ 
3589: /* MUTANT (rep_const) */            xml = XMLARRAY_MEMBER(&xml->xml_kids, 1, JSXML);
3589: /* MUTANT (rep_const) */            xml = XMLARRAY_MEMBER(&xml->xml_kids, -1, JSXML);
3590: /* MUTANT (negate) */            if(! (xml))
3593: /* MUTANT (rep_op) */        if (vxml->xml_class != JSXML_CLASS_LIST && vxml->xml_kids.length == 1) {
3593: /* MUTANT (rep_op) */        if (vxml->xml_class == JSXML_CLASS_LIST || vxml->xml_kids.length == 1) {
3593: /* MUTANT (rep_op) */        if (vxml->xml_class == JSXML_CLASS_LIST && vxml->xml_kids.length != 1) {
3593: /* MUTANT (rep_const) */        if (vxml->xml_class == JSXML_CLASS_LIST && vxml->xml_kids.length == 0) {
3593: /* MUTANT (rep_const) */        if (vxml->xml_class == JSXML_CLASS_LIST && vxml->xml_kids.length == -1) {
3593: /* MUTANT (rep_const) */        if (vxml->xml_class == JSXML_CLASS_LIST && vxml->xml_kids.length == ((1)+1)) {
3593: /* MUTANT (negate) */        if(! (vxml->xml_class == JSXML_CLASS_LIST && vxml->xml_kids.length == 1)) {
3594: /* MUTANT (del_stmt) */ /*             vxml = XMLARRAY_MEMBER(&vxml->xml_kids, 0, JSXML); */ 
3594: /* MUTANT (rep_const) */            vxml = XMLARRAY_MEMBER(&vxml->xml_kids, 1, JSXML);
3594: /* MUTANT (rep_const) */            vxml = XMLARRAY_MEMBER(&vxml->xml_kids, -1, JSXML);
3595: /* MUTANT (negate) */            if(! (vxml))
3599: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
3603: /* MUTANT (del_stmt) */ /*     vqn = vxml->name; */ 
3604: /* MUTANT (negate) */    if(! (qn)) {
3605: /* MUTANT (rep_op) */        *bp = vqn ||
3606: /* MUTANT (rep_op) */              !js_CompareStrings(qn->localName, vqn->localName) ||
3609: /* MUTANT (del_stmt) */ /*         *bp = vqn == NULL; */ 
3609: /* MUTANT (rep_op) */        *bp = vqn != NULL;
3611: /* MUTANT (negate) */    if(! (!*bp))
3614: /* MUTANT (negate) */    if(! (JSXML_HAS_VALUE(xml))) {
3615: /* MUTANT (del_stmt) */ /*         *bp = !js_CompareStrings(xml->xml_value, vxml->xml_value); */ 
3616: /* MUTANT (rep_op) */    } else if (xml->xml_kids.length == vxml->xml_kids.length) {
3616: /* MUTANT (negate) */    } else if(! (xml->xml_kids.length != vxml->xml_kids.length)) {
3617: /* MUTANT (del_stmt) */ /*         *bp = JS_FALSE; */ 
3619: /* MUTANT (del_stmt) */ /*         XMLArrayCursorInit(&cursor, &xml->xml_kids); */ 
3620: /* MUTANT (del_stmt) */ /*         XMLArrayCursorInit(&vcursor, &vxml->xml_kids); */ 
3622: /* MUTANT (del_stmt) */ /*             kid = (JSXML *) XMLArrayCursorNext(&cursor); */ 
3623: /* MUTANT (del_stmt) */ /*             vkid = (JSXML *) XMLArrayCursorNext(&vcursor); */ 
3624: /* MUTANT (rep_op) */            if (!kid && !vkid) {
3624: /* MUTANT (negate) */            if(! (!kid || !vkid)) {
3625: /* MUTANT (del_stmt) */ /*                 *bp = !kid && !vkid; */ 
3625: /* MUTANT (rep_op) */                *bp = !kid || !vkid;
3626: /* MUTANT (del_stmt) */ /*                 ok = JS_TRUE; */ 
3627: /* MUTANT (del_stmt) */ /*                 break; */ 
3630: /* MUTANT (del_stmt) */ /*             vobj = js_GetXMLObject(cx, vkid); */ 
3631: /* MUTANT (rep_op) */            ok = xobj || vobj &&
3631: /* MUTANT (rep_op) */            ok = xobj && vobj ||
3633: /* MUTANT (rep_op) */            if (!ok && !*bp)
3633: /* MUTANT (negate) */            if(! (!ok || !*bp))
3637: /* MUTANT (del_stmt) */ /*         XMLArrayCursorFinish(&cursor); */ 
3638: /* MUTANT (negate) */        if(! (!ok))
3641: /* MUTANT (rep_op) */        if (*bp || xml->xml_class == JSXML_CLASS_ELEMENT) {
3641: /* MUTANT (rep_op) */        if (*bp && xml->xml_class != JSXML_CLASS_ELEMENT) {
3641: /* MUTANT (negate) */        if(! (*bp && xml->xml_class == JSXML_CLASS_ELEMENT)) {
3642: /* MUTANT (del_stmt) */ /*             n = xml->xml_attrs.length; */ 
3643: /* MUTANT (rep_op) */            if (n == vxml->xml_attrs.length)
3643: /* MUTANT (negate) */            if(! (n != vxml->xml_attrs.length))
3645: /* MUTANT (rep_op) */            for (i = 0; *bp || i < n; i++) {
3645: /* MUTANT (rep_op) */            for (i = 0; *bp && i <= n; i++) {
3645: /* MUTANT (rep_op) */            for (i = 0; *bp && i > n; i++) {
3645: /* MUTANT (rep_op) */            for (i = 0; *bp && i >= n; i++) {
3645: /* MUTANT (rep_op) */            for (i = 0; *bp && i == n; i++) {
3645: /* MUTANT (rep_op) */            for (i = 0; *bp && i != n; i++) {
3645: /* MUTANT (rep_op) */            for (i = 0; *bp && i < n; i--) {
3645: /* MUTANT (rep_const) */            for (i = 1; *bp && i < n; i++) {
3645: /* MUTANT (rep_const) */            for (i = -1; *bp && i < n; i++) {
3646: /* MUTANT (del_stmt) */ /*                 attr = XMLARRAY_MEMBER(&xml->xml_attrs, i, JSXML); */ 
3647: /* MUTANT (negate) */                if(! (!attr))
3649: /* MUTANT (del_stmt) */ /*                 j = XMLARRAY_FIND_MEMBER(&vxml->xml_attrs, attr, attr_identity); */ 
3650: /* MUTANT (rep_op) */                if (j != XML_NOT_FOUND) {
3650: /* MUTANT (negate) */                if(! (j == XML_NOT_FOUND)) {
3651: /* MUTANT (del_stmt) */ /*                     *bp = JS_FALSE; */ 
3652: /* MUTANT (del_stmt) */ /*                     break; */ 
3655: /* MUTANT (negate) */                if(! (!vattr))
3657: /* MUTANT (del_stmt) */ /*                 *bp = !js_CompareStrings(attr->xml_value, vattr->xml_value); */ 
3669: /* MUTANT (del_stmt) */ /*     JSObject *vobj; */ 
3670: /* MUTANT (del_stmt) */ /*     JSXML *vxml; */ 
3672: /* MUTANT (negate) */    if(! (JSVAL_IS_PRIMITIVE(v))) {
3673: /* MUTANT (del_stmt) */ /*         *bp = JS_FALSE; */ 
3674: /* MUTANT (rep_op) */        if (xml->xml_class != JSXML_CLASS_LIST) {
3674: /* MUTANT (negate) */        if(! (xml->xml_class == JSXML_CLASS_LIST)) {
3675: /* MUTANT (rep_op) */            if (xml->xml_kids.length != 1) {
3675: /* MUTANT (rep_const) */            if (xml->xml_kids.length == 0) {
3675: /* MUTANT (rep_const) */            if (xml->xml_kids.length == -1) {
3675: /* MUTANT (rep_const) */            if (xml->xml_kids.length == ((1)+1)) {
3675: /* MUTANT (negate) */            if(! (xml->xml_kids.length == 1)) {
3676: /* MUTANT (del_stmt) */ /*                 vxml = XMLARRAY_MEMBER(&xml->xml_kids, 0, JSXML); */ 
3676: /* MUTANT (rep_const) */                vxml = XMLARRAY_MEMBER(&xml->xml_kids, 1, JSXML);
3676: /* MUTANT (rep_const) */                vxml = XMLARRAY_MEMBER(&xml->xml_kids, -1, JSXML);
3677: /* MUTANT (negate) */                if(! (!vxml))
3679: /* MUTANT (del_stmt) */ /*                 vobj = js_GetXMLObject(cx, vxml); */ 
3680: /* MUTANT (negate) */                if(! (!vobj))
3682: /* MUTANT (del_stmt) */ /*                 return js_XMLObjectOps.equality(cx, vobj, v, bp); */ 
3684: /* MUTANT (rep_op) */            if (JSVAL_IS_VOID(v) || xml->xml_kids.length == 0)
3684: /* MUTANT (rep_op) */            if (JSVAL_IS_VOID(v) && xml->xml_kids.length != 0)
3684: /* MUTANT (rep_const) */            if (JSVAL_IS_VOID(v) && xml->xml_kids.length == 1)
3684: /* MUTANT (rep_const) */            if (JSVAL_IS_VOID(v) && xml->xml_kids.length == -1)
3684: /* MUTANT (negate) */            if(! (JSVAL_IS_VOID(v) && xml->xml_kids.length == 0))
3688: /* MUTANT (del_stmt) */ /*         vobj = JSVAL_TO_OBJECT(v); */ 
3689: /* MUTANT (negate) */        if(! (!OBJECT_IS_XML(cx, vobj))) {
3690: /* MUTANT (del_stmt) */ /*             *bp = JS_FALSE; */ 
3692: /* MUTANT (del_stmt) */ /*             vxml = (JSXML *) JS_GetPrivate(cx, vobj); */ 
3693: /* MUTANT (negate) */            if(! (!XMLEquals(cx, xml, vxml, bp)))
3703: /* MUTANT (del_stmt) */ /*     JS_ASSERT(kid->xml_class != JSXML_CLASS_LIST); */ 
3703: /* MUTANT (rep_op) */    JS_ASSERT(kid->xml_class == JSXML_CLASS_LIST);
3706: /* MUTANT (rep_op) */        if (xml != kid) {
3706: /* MUTANT (negate) */        if(! (xml == kid)) {
3709: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3711: /* MUTANT (rep_op) */    } while ((xml = xml->parent) == NULL);
3711: /* MUTANT (negate) */    } while(! ((xml = xml->parent) != NULL));
3713: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3720: /* MUTANT (del_stmt) */ /*     uint32 j, n; */ 
3721: /* MUTANT (del_stmt) */ /*     JSXML *vxml, *kid; */ 
3722: /* MUTANT (del_stmt) */ /*     JSObject *vobj; */ 
3723: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
3725: /* MUTANT (negate) */    if(! (!JSXML_HAS_KIDS(xml)))
3728: /* MUTANT (del_stmt) */ /*     n = 1; */ 
3728: /* MUTANT (rep_const) */    n = 0;
3728: /* MUTANT (rep_const) */    n = -1;
3728: /* MUTANT (rep_const) */    n = ((1)+1);
3729: /* MUTANT (del_stmt) */ /*     vxml = NULL; */ 
3730: /* MUTANT (negate) */    if(! (!JSVAL_IS_PRIMITIVE(v))) {
3731: /* MUTANT (del_stmt) */ /*         vobj = JSVAL_TO_OBJECT(v); */ 
3732: /* MUTANT (negate) */        if(! (OBJECT_IS_XML(cx, vobj))) {
3733: /* MUTANT (del_stmt) */ /*             vxml = (JSXML *) JS_GetPrivate(cx, vobj); */ 
3734: /* MUTANT (rep_op) */            if (vxml->xml_class != JSXML_CLASS_LIST) {
3734: /* MUTANT (negate) */            if(! (vxml->xml_class == JSXML_CLASS_LIST)) {
3735: /* MUTANT (del_stmt) */ /*                 n = vxml->xml_kids.length; */ 
3736: /* MUTANT (rep_op) */                if (n != 0)
3736: /* MUTANT (rep_const) */                if (n == 1)
3736: /* MUTANT (rep_const) */                if (n == -1)
3736: /* MUTANT (negate) */                if(! (n == 0))
3738: /* MUTANT (rep_op) */                for (j = 0; j <= n; j++) {
3738: /* MUTANT (rep_op) */                for (j = 0; j > n; j++) {
3738: /* MUTANT (rep_op) */                for (j = 0; j >= n; j++) {
3738: /* MUTANT (rep_op) */                for (j = 0; j == n; j++) {
3738: /* MUTANT (rep_op) */                for (j = 0; j != n; j++) {
3738: /* MUTANT (rep_op) */                for (j = 0; j < n; j--) {
3738: /* MUTANT (rep_const) */                for (j = 1; j < n; j++) {
3738: /* MUTANT (rep_const) */                for (j = -1; j < n; j++) {
3739: /* MUTANT (del_stmt) */ /*                     kid = XMLARRAY_MEMBER(&vxml->xml_kids, j, JSXML); */ 
3740: /* MUTANT (negate) */                    if(! (!kid))
3742: /* MUTANT (negate) */                    if(! (!CheckCycle(cx, xml, kid)))
3745: /* MUTANT (rep_op) */            } else if (vxml->xml_class != JSXML_CLASS_ELEMENT) {
3745: /* MUTANT (negate) */            } else if(! (vxml->xml_class == JSXML_CLASS_ELEMENT)) {
3747: /* MUTANT (negate) */                if(! (!CheckCycle(cx, xml, vxml)))
3752: /* MUTANT (negate) */    if(! (!vxml)) {
3753: /* MUTANT (del_stmt) */ /*         str = js_ValueToString(cx, v); */ 
3754: /* MUTANT (negate) */        if(! (!str))
3757: /* MUTANT (del_stmt) */ /*         vxml = js_NewXML(cx, JSXML_CLASS_TEXT); */ 
3758: /* MUTANT (negate) */        if(! (!vxml))
3760: /* MUTANT (del_stmt) */ /*         vxml->xml_value = str; */ 
3763: /* MUTANT (rep_op) */    if (i <= xml->xml_kids.length)
3763: /* MUTANT (rep_op) */    if (i < xml->xml_kids.length)
3763: /* MUTANT (rep_op) */    if (i >= xml->xml_kids.length)
3763: /* MUTANT (rep_op) */    if (i == xml->xml_kids.length)
3763: /* MUTANT (rep_op) */    if (i != xml->xml_kids.length)
3763: /* MUTANT (negate) */    if(! (i > xml->xml_kids.length))
3766: /* MUTANT (negate) */    if(! (!XMLArrayInsert(cx, &xml->xml_kids, i, n)))
3769: /* MUTANT (rep_op) */    if (vxml->xml_class != JSXML_CLASS_LIST) {
3769: /* MUTANT (negate) */    if(! (vxml->xml_class == JSXML_CLASS_LIST)) {
3770: /* MUTANT (rep_op) */        for (j = 0; j <= n; j++) {
3770: /* MUTANT (rep_op) */        for (j = 0; j > n; j++) {
3770: /* MUTANT (rep_op) */        for (j = 0; j >= n; j++) {
3770: /* MUTANT (rep_op) */        for (j = 0; j == n; j++) {
3770: /* MUTANT (rep_op) */        for (j = 0; j != n; j++) {
3770: /* MUTANT (rep_op) */        for (j = 0; j < n; j--) {
3770: /* MUTANT (rep_const) */        for (j = 1; j < n; j++) {
3770: /* MUTANT (rep_const) */        for (j = -1; j < n; j++) {
3771: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&vxml->xml_kids, j, JSXML); */ 
3772: /* MUTANT (negate) */            if(! (!kid))
3774: /* MUTANT (del_stmt) */ /*             kid->parent = xml; */ 
3775: /* MUTANT (del_stmt) */ /*             XMLARRAY_SET_MEMBER(&xml->xml_kids, i + j, kid); */ 
3775: /* MUTANT (rep_op) */            XMLARRAY_SET_MEMBER(&xml->xml_kids, i - j, kid);
3775: /* MUTANT (rep_op) */            XMLARRAY_SET_MEMBER(&xml->xml_kids, i * j, kid);
3775: /* MUTANT (rep_op) */            XMLARRAY_SET_MEMBER(&xml->xml_kids, i % j, kid);
3780: /* MUTANT (del_stmt) */ /*         vxml->parent = xml; */ 
3781: /* MUTANT (del_stmt) */ /*         XMLARRAY_SET_MEMBER(&xml->xml_kids, i, vxml); */ 
3789: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
3791: /* MUTANT (rep_op) */    if (index < JSVAL_INT_MAX) {
3791: /* MUTANT (rep_op) */    if (index > JSVAL_INT_MAX) {
3791: /* MUTANT (rep_op) */    if (index >= JSVAL_INT_MAX) {
3791: /* MUTANT (rep_op) */    if (index == JSVAL_INT_MAX) {
3791: /* MUTANT (rep_op) */    if (index != JSVAL_INT_MAX) {
3791: /* MUTANT (negate) */    if(! (index <= JSVAL_INT_MAX)) {
3792: /* MUTANT (del_stmt) */ /*         *idvp = INT_TO_JSVAL(index); */ 
3794: /* MUTANT (del_stmt) */ /*         str = js_NumberToString(cx, (jsdouble) index); */ 
3795: /* MUTANT (negate) */        if(! (!str))
3797: /* MUTANT (del_stmt) */ /*         *idvp = STRING_TO_JSVAL(str); */ 
3806: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
3807: /* MUTANT (del_stmt) */ /*     JSXML *vxml, *kid; */ 
3808: /* MUTANT (del_stmt) */ /*     JSObject *vobj; */ 
3809: /* MUTANT (del_stmt) */ /*     jsval junk; */ 
3810: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
3812: /* MUTANT (negate) */    if(! (!JSXML_HAS_KIDS(xml)))
3815: /* MUTANT (negate) */    if(! (!js_IdIsIndex(id, &i))) {
3816: /* MUTANT (del_stmt) */ /*         ReportBadXMLName(cx, id); */ 
3817: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
3826: /* MUTANT (rep_op) */    if (i <= n) {
3826: /* MUTANT (rep_op) */    if (i < n) {
3826: /* MUTANT (rep_op) */    if (i > n) {
3826: /* MUTANT (rep_op) */    if (i == n) {
3826: /* MUTANT (rep_op) */    if (i != n) {
3826: /* MUTANT (negate) */    if(! (i >= n)) {
3827: /* MUTANT (negate) */        if(! (!IndexToIdVal(cx, n, &id)))
3829: /* MUTANT (del_stmt) */ /*         i = n; */ 
3833: /* MUTANT (negate) */    if(! (!JSVAL_IS_PRIMITIVE(v))) {
3834: /* MUTANT (del_stmt) */ /*         vobj = JSVAL_TO_OBJECT(v); */ 
3835: /* MUTANT (negate) */        if(! (OBJECT_IS_XML(cx, vobj)))
3842: /* MUTANT (negate) */        if(! (!CheckCycle(cx, xml, vxml)))
3850: /* MUTANT (rep_op) */        if (i <= n && !DeleteByIndex(cx, xml, id, &junk))
3850: /* MUTANT (rep_op) */        if (i > n && !DeleteByIndex(cx, xml, id, &junk))
3850: /* MUTANT (rep_op) */        if (i >= n && !DeleteByIndex(cx, xml, id, &junk))
3850: /* MUTANT (rep_op) */        if (i == n && !DeleteByIndex(cx, xml, id, &junk))
3850: /* MUTANT (rep_op) */        if (i != n && !DeleteByIndex(cx, xml, id, &junk))
3850: /* MUTANT (rep_op) */        if (i < n || !DeleteByIndex(cx, xml, id, &junk))
3850: /* MUTANT (negate) */        if(! (i < n && !DeleteByIndex(cx, xml, id, &junk)))
3852: /* MUTANT (negate) */        if(! (!Insert(cx, xml, i, v)))
3854: /* MUTANT (del_stmt) */ /*         break; */ 
3858: /* MUTANT (negate) */        if(! (!str))
3861: /* MUTANT (del_stmt) */ /*         vxml = js_NewXML(cx, JSXML_CLASS_TEXT); */ 
3862: /* MUTANT (negate) */        if(! (!vxml))
3864: /* MUTANT (del_stmt) */ /*         vxml->xml_value = str; */ 
3868: /* MUTANT (rep_op) */        if (i <= n) {
3868: /* MUTANT (rep_op) */        if (i > n) {
3868: /* MUTANT (rep_op) */        if (i >= n) {
3868: /* MUTANT (rep_op) */        if (i == n) {
3868: /* MUTANT (rep_op) */        if (i != n) {
3868: /* MUTANT (negate) */        if(! (i < n)) {
3869: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
3870: /* MUTANT (negate) */            if(! (kid))
3873: /* MUTANT (negate) */        if(! (!XMLARRAY_ADD_MEMBER(cx, &xml->xml_kids, i, vxml)))
3875: /* MUTANT (del_stmt) */ /*         break; */ 
3889: /* MUTANT (del_stmt) */ /*     JSXML *xml, *kid, *parent; */ 
3890: /* MUTANT (del_stmt) */ /*     JSBool isIndex; */ 
3891: /* MUTANT (del_stmt) */ /*     JSXMLArray *array; */ 
3892: /* MUTANT (del_stmt) */ /*     uint32 length, index, deleteCount; */ 
3893: /* MUTANT (del_stmt) */ /*     JSXMLQName *nameqn; */ 
3894: /* MUTANT (del_stmt) */ /*     jsid funid; */ 
3895: /* MUTANT (del_stmt) */ /*     JSObject *nameobj, *kidobj; */ 
3896: /* MUTANT (del_stmt) */ /*     JSXMLNameMatcher matcher; */ 
3898: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
3899: /* MUTANT (del_stmt) */ /*     isIndex = js_IdIsIndex(id, &index); */ 
3900: /* MUTANT (negate) */    if(! (JSXML_HAS_KIDS(xml))) {
3901: /* MUTANT (del_stmt) */ /*         array = &xml->xml_kids; */ 
3902: /* MUTANT (del_stmt) */ /*         length = array->length; */ 
3904: /* MUTANT (del_stmt) */ /*         array = NULL; */ 
3905: /* MUTANT (del_stmt) */ /*         length = 0; */ 
3905: /* MUTANT (rep_const) */        length = 1;
3905: /* MUTANT (rep_const) */        length = -1;
3908: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
3908: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
3910: /* MUTANT (rep_op) */        if (isIndex || index < length) {
3910: /* MUTANT (rep_op) */        if (isIndex && index <= length) {
3910: /* MUTANT (rep_op) */        if (isIndex && index > length) {
3910: /* MUTANT (rep_op) */        if (isIndex && index >= length) {
3910: /* MUTANT (rep_op) */        if (isIndex && index == length) {
3910: /* MUTANT (rep_op) */        if (isIndex && index != length) {
3910: /* MUTANT (negate) */        if(! (isIndex && index < length)) {
3911: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(array, index, JSXML); */ 
3912: /* MUTANT (negate) */            if(! (!kid))
3914: /* MUTANT (del_stmt) */ /*             parent = kid->parent; */ 
3915: /* MUTANT (negate) */            if(! (parent)) {
3916: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(parent != xml); */ 
3916: /* MUTANT (rep_op) */                JS_ASSERT(parent == xml);
3917: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(JSXML_HAS_KIDS(parent)); */ 
3919: /* MUTANT (rep_op) */                if (kid->xml_class != JSXML_CLASS_ATTRIBUTE) {
3919: /* MUTANT (negate) */                if(! (kid->xml_class == JSXML_CLASS_ATTRIBUTE)) {
3920: /* MUTANT (del_stmt) */ /*                     nameqn = kid->name; */ 
3921: /* MUTANT (del_stmt) */ /*                     nameobj = js_GetAttributeNameObject(cx, nameqn); */ 
3922: /* MUTANT (rep_op) */                    if (!nameobj && !js_GetXMLObject(cx, parent))
3922: /* MUTANT (negate) */                    if(! (!nameobj || !js_GetXMLObject(cx, parent)))
3925: /* MUTANT (del_stmt) */ /*                     id = OBJECT_TO_JSVAL(nameobj); */ 
3926: /* MUTANT (negate) */                    if(! (!DeleteProperty(cx, parent->object, id, vp)))
3929: /* MUTANT (del_stmt) */ /*                     index = XMLARRAY_FIND_MEMBER(&parent->xml_kids, kid, NULL); */ 
3930: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(index != XML_NOT_FOUND); */ 
3930: /* MUTANT (rep_op) */                    JS_ASSERT(index == XML_NOT_FOUND);
3931: /* MUTANT (negate) */                    if(! (!IndexToIdVal(cx, index, &id)))
3933: /* MUTANT (negate) */                    if(! (!DeleteByIndex(cx, parent, id, vp)))
3940: /* MUTANT (rep_op) */            for (index = 0; index <= length; index++) {
3940: /* MUTANT (rep_op) */            for (index = 0; index > length; index++) {
3940: /* MUTANT (rep_op) */            for (index = 0; index >= length; index++) {
3940: /* MUTANT (rep_op) */            for (index = 0; index == length; index++) {
3940: /* MUTANT (rep_op) */            for (index = 0; index != length; index++) {
3940: /* MUTANT (rep_op) */            for (index = 0; index < length; index--) {
3940: /* MUTANT (rep_const) */            for (index = 1; index < length; index++) {
3940: /* MUTANT (rep_const) */            for (index = -1; index < length; index++) {
3941: /* MUTANT (del_stmt) */ /*                 kid = XMLARRAY_MEMBER(array, index, JSXML); */ 
3942: /* MUTANT (rep_op) */                if (kid || kid->xml_class == JSXML_CLASS_ELEMENT) {
3942: /* MUTANT (rep_op) */                if (kid && kid->xml_class != JSXML_CLASS_ELEMENT) {
3942: /* MUTANT (negate) */                if(! (kid && kid->xml_class == JSXML_CLASS_ELEMENT)) {
3943: /* MUTANT (del_stmt) */ /*                     kidobj = js_GetXMLObject(cx, kid); */ 
3944: /* MUTANT (rep_op) */                    if (!kidobj && !DeleteProperty(cx, kidobj, id, vp))
3944: /* MUTANT (negate) */                    if(! (!kidobj || !DeleteProperty(cx, kidobj, id, vp)))
3951: /* MUTANT (negate) */        if(! (isIndex)) {
3953: /* MUTANT (del_stmt) */ /*             ReportBadXMLName(cx, id); */ 
3954: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
3958: /* MUTANT (negate) */        if(! (!nameqn))
3960: /* MUTANT (negate) */        if(! (funid))
3962: /* MUTANT (del_stmt) */ /*         nameobj = nameqn->object; */ 
3964: /* MUTANT (rep_op) */        if (OBJ_GET_CLASS(cx, nameobj) != &js_AttributeNameClass) {
3964: /* MUTANT (negate) */        if(! (OBJ_GET_CLASS(cx, nameobj) == &js_AttributeNameClass)) {
3965: /* MUTANT (rep_op) */            if (xml->xml_class == JSXML_CLASS_ELEMENT)
3965: /* MUTANT (negate) */            if(! (xml->xml_class != JSXML_CLASS_ELEMENT))
3967: /* MUTANT (del_stmt) */ /*             array = &xml->xml_attrs; */ 
3968: /* MUTANT (del_stmt) */ /*             length = array->length; */ 
3969: /* MUTANT (del_stmt) */ /*             matcher = MatchAttrName; */ 
3971: /* MUTANT (del_stmt) */ /*             matcher = MatchElemName; */ 
3973: /* MUTANT (rep_op) */        if (length == 0) {
3973: /* MUTANT (rep_const) */        if (length != 1) {
3973: /* MUTANT (rep_const) */        if (length != -1) {
3973: /* MUTANT (negate) */        if(! (length != 0)) {
3974: /* MUTANT (del_stmt) */ /*             deleteCount = 0; */ 
3974: /* MUTANT (rep_const) */            deleteCount = 1;
3974: /* MUTANT (rep_const) */            deleteCount = -1;
3975: /* MUTANT (rep_op) */            for (index = 0; index <= length; index++) {
3975: /* MUTANT (rep_op) */            for (index = 0; index > length; index++) {
3975: /* MUTANT (rep_op) */            for (index = 0; index >= length; index++) {
3975: /* MUTANT (rep_op) */            for (index = 0; index == length; index++) {
3975: /* MUTANT (rep_op) */            for (index = 0; index != length; index++) {
3975: /* MUTANT (rep_op) */            for (index = 0; index < length; index--) {
3975: /* MUTANT (rep_const) */            for (index = 1; index < length; index++) {
3975: /* MUTANT (rep_const) */            for (index = -1; index < length; index++) {
3976: /* MUTANT (del_stmt) */ /*                 kid = XMLARRAY_MEMBER(array, index, JSXML); */ 
3977: /* MUTANT (rep_op) */                if (kid || matcher(nameqn, kid)) {
3977: /* MUTANT (negate) */                if(! (kid && matcher(nameqn, kid))) {
3978: /* MUTANT (del_stmt) */ /*                     kid->parent = NULL; */ 
3979: /* MUTANT (del_stmt) */ /*                     XMLArrayDelete(cx, array, index, JS_FALSE); */ 
3980: /* MUTANT (del_stmt) */ /*                     ++deleteCount; */ 
3980: /* MUTANT (rep_op) */                    --deleteCount;
3981: /* MUTANT (rep_op) */                } else if (deleteCount == 0) {
3981: /* MUTANT (rep_const) */                } else if (deleteCount != 1) {
3981: /* MUTANT (rep_const) */                } else if (deleteCount != -1) {
3981: /* MUTANT (negate) */                } else if(! (deleteCount != 0)) {
3987: /* MUTANT (rep_op) */            array->length += deleteCount;
3987: /* MUTANT (rep_op) */            array->length *= deleteCount;
3987: /* MUTANT (rep_op) */            array->length %= deleteCount;
3993: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
4001: #define XML_MASK                1x1 /* MUTANT (rep_const) */
4001: #define XML_MASK                -1x1 /* MUTANT (rep_const) */
4002: #define XMLLIST_MASK            1x2 /* MUTANT (rep_const) */
4002: #define XMLLIST_MASK            -1x2 /* MUTANT (rep_const) */
4004: #define CLASS_TO_MASK(c)        (0 + ((c) == JSXML_CLASS_LIST)) /* MUTANT (rep_const) */
4004: #define CLASS_TO_MASK(c)        (-1 + ((c) == JSXML_CLASS_LIST)) /* MUTANT (rep_const) */
4004: #define CLASS_TO_MASK(c)        (((1)+1) + ((c) == JSXML_CLASS_LIST)) /* MUTANT (rep_const) */
4009: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
4013: /* MUTANT (negate) */        if(! (!js_GetProperty(cx, obj, id, vp)))
4015: /* MUTANT (negate) */        if(! (JSVAL_IS_FUNCTION(cx, *vp))) {
4016: /* MUTANT (rep_op) */            if (xml || OBJECT_IS_XML(cx, obj)) {
4016: /* MUTANT (negate) */            if(! (xml && OBJECT_IS_XML(cx, obj))) {
4017: /* MUTANT (del_stmt) */ /*                 fun = (JSFunction *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(*vp)); */ 
4018: /* MUTANT (rep_op) */                if (fun->spare ||
4019: /* MUTANT (rep_op) */                    (fun->spare & CLASS_TO_MASK(xml->xml_class)) != 0) {
4019: /* MUTANT (rep_const) */                    (fun->spare & CLASS_TO_MASK(xml->xml_class)) == 1) {
4019: /* MUTANT (rep_const) */                    (fun->spare & CLASS_TO_MASK(xml->xml_class)) == -1) {
4021: /* MUTANT (del_stmt) */ /*                     *vp = JSVAL_VOID; */ 
4026: /* MUTANT (rep_op) */    } while ((obj = OBJ_GET_PROTO(cx, obj)) == NULL);
4026: /* MUTANT (negate) */    } while(! ((obj = OBJ_GET_PROTO(cx, obj)) != NULL));
4027: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
4033: /* MUTANT (del_stmt) */ /*     JSXMLArray *nsarray; */ 
4034: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
4035: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
4037: /* MUTANT (del_stmt) */ /*     nsarray = &xml->xml_namespaces; */ 
4038: /* MUTANT (rep_op) */    while ((xml = xml->parent) == NULL) {
4038: /* MUTANT (negate) */    while(! ((xml = xml->parent) != NULL)) {
4039: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i <= n; i++) {
4039: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i > n; i++) {
4039: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i >= n; i++) {
4039: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i == n; i++) {
4039: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i != n; i++) {
4039: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i < n; i--) {
4039: /* MUTANT (rep_const) */        for (i = 1, n = xml->xml_namespaces.length; i < n; i++) {
4039: /* MUTANT (rep_const) */        for (i = -1, n = xml->xml_namespaces.length; i < n; i++) {
4040: /* MUTANT (del_stmt) */ /*             ns = XMLARRAY_MEMBER(&xml->xml_namespaces, i, JSXMLNamespace); */ 
4041: /* MUTANT (rep_op) */            if (ns || !XMLARRAY_HAS_MEMBER(nsarray, ns, namespace_identity)) {
4041: /* MUTANT (negate) */            if(! (ns && !XMLARRAY_HAS_MEMBER(nsarray, ns, namespace_identity))) {
4042: /* MUTANT (negate) */                if(! (!XMLARRAY_APPEND(cx, nsarray, ns)))
4054: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list, *kid; */ 
4055: /* MUTANT (del_stmt) */ /*     uint32 index; */ 
4056: /* MUTANT (del_stmt) */ /*     JSObject *kidobj, *listobj, *nameobj; */ 
4057: /* MUTANT (del_stmt) */ /*     JSXMLQName *nameqn; */ 
4058: /* MUTANT (del_stmt) */ /*     jsid funid; */ 
4059: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
4060: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor; */ 
4061: /* MUTANT (del_stmt) */ /*     jsval kidval; */ 
4062: /* MUTANT (del_stmt) */ /*     JSXMLArray *array; */ 
4063: /* MUTANT (del_stmt) */ /*     JSXMLNameMatcher matcher; */ 
4065: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetInstancePrivate(cx, obj, &js_XMLClass, NULL); */ 
4066: /* MUTANT (negate) */    if(! (!xml))
4074: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
4074: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
4076: /* MUTANT (negate) */        if(! (js_IdIsIndex(id, &index))) {
4082: /* MUTANT (rep_op) */            if (index <= xml->xml_kids.length) {
4082: /* MUTANT (rep_op) */            if (index > xml->xml_kids.length) {
4082: /* MUTANT (rep_op) */            if (index >= xml->xml_kids.length) {
4082: /* MUTANT (rep_op) */            if (index == xml->xml_kids.length) {
4082: /* MUTANT (rep_op) */            if (index != xml->xml_kids.length) {
4082: /* MUTANT (negate) */            if(! (index < xml->xml_kids.length)) {
4083: /* MUTANT (del_stmt) */ /*                 kid = XMLARRAY_MEMBER(&xml->xml_kids, index, JSXML); */ 
4084: /* MUTANT (negate) */                if(! (!kid)) {
4085: /* MUTANT (del_stmt) */ /*                     *vp = JSVAL_VOID; */ 
4086: /* MUTANT (del_stmt) */ /*                     return JS_TRUE; */ 
4089: /* MUTANT (negate) */                if(! (!kidobj))
4092: /* MUTANT (del_stmt) */ /*                 *vp = OBJECT_TO_JSVAL(kidobj); */ 
4094: /* MUTANT (del_stmt) */ /*                 *vp = JSVAL_VOID; */ 
4100: /* MUTANT (negate) */        if(! (!nameqn))
4102: /* MUTANT (negate) */        if(! (funid))
4110: /* MUTANT (del_stmt) */ /*         ok = JS_EnterLocalRootScope(cx); */ 
4111: /* MUTANT (negate) */        if(! (!ok))
4119: /* MUTANT (del_stmt) */ /*         listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
4120: /* MUTANT (negate) */        if(! (!listobj)) {
4121: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
4123: /* MUTANT (del_stmt) */ /*             list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
4124: /* MUTANT (del_stmt) */ /*             list->xml_target = xml; */ 
4126: /* MUTANT (del_stmt) */ /*             XMLArrayCursorInit(&cursor, &xml->xml_kids); */ 
4127: /* MUTANT (rep_op) */            while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
4127: /* MUTANT (negate) */            while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
4128: /* MUTANT (rep_op) */                if (kid->xml_class != JSXML_CLASS_ELEMENT) {
4128: /* MUTANT (negate) */                if(! (kid->xml_class == JSXML_CLASS_ELEMENT)) {
4129: /* MUTANT (del_stmt) */ /*                     kidobj = js_GetXMLObject(cx, kid); */ 
4130: /* MUTANT (negate) */                    if(! (!kidobj)) {
4131: /* MUTANT (del_stmt) */ /*                         ok = JS_FALSE; */ 
4132: /* MUTANT (del_stmt) */ /*                         break; */ 
4135: /* MUTANT (negate) */                    if(! (!ok))
4137: /* MUTANT (del_stmt) */ /*                     kidobj = JSVAL_TO_OBJECT(kidval); */ 
4138: /* MUTANT (del_stmt) */ /*                     kid = (JSXML *) JS_GetPrivate(cx, kidobj); */ 
4139: /* MUTANT (rep_op) */                    if (JSXML_LENGTH(kid) <= 0) {
4139: /* MUTANT (rep_op) */                    if (JSXML_LENGTH(kid) < 0) {
4139: /* MUTANT (rep_op) */                    if (JSXML_LENGTH(kid) >= 0) {
4139: /* MUTANT (rep_op) */                    if (JSXML_LENGTH(kid) == 0) {
4139: /* MUTANT (rep_op) */                    if (JSXML_LENGTH(kid) != 0) {
4139: /* MUTANT (rep_const) */                    if (JSXML_LENGTH(kid) > 1) {
4139: /* MUTANT (rep_const) */                    if (JSXML_LENGTH(kid) > -1) {
4139: /* MUTANT (negate) */                    if(! (JSXML_LENGTH(kid) > 0)) {
4140: /* MUTANT (del_stmt) */ /*                         ok = Append(cx, list, kid); */ 
4141: /* MUTANT (negate) */                        if(! (!ok))
4150: /* MUTANT (negate) */        if(! (js_IdIsIndex(id, &index))) {
4151: /* MUTANT (del_stmt) */ /*             obj = ToXMLList(cx, OBJECT_TO_JSVAL(obj)); */ 
4152: /* MUTANT (negate) */            if(! (!obj))
4154: /* MUTANT (del_stmt) */ /*             xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
4155: /* MUTANT (del_stmt) */ /*             goto retry; */ 
4159: /* MUTANT (negate) */        if(! (!nameqn))
4161: /* MUTANT (negate) */        if(! (funid))
4163: /* MUTANT (del_stmt) */ /*         nameobj = nameqn->object; */ 
4170: /* MUTANT (del_stmt) */ /*         ok = JS_EnterLocalRootScope(cx); */ 
4171: /* MUTANT (negate) */        if(! (!ok))
4174: /* MUTANT (del_stmt) */ /*         listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
4175: /* MUTANT (negate) */        if(! (!listobj)) {
4176: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
4178: /* MUTANT (del_stmt) */ /*             list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
4179: /* MUTANT (del_stmt) */ /*             list->xml_target = xml; */ 
4181: /* MUTANT (negate) */            if(! (JSXML_HAS_KIDS(xml))) {
4182: /* MUTANT (rep_op) */                if (OBJ_GET_CLASS(cx, nameobj) != &js_AttributeNameClass) {
4182: /* MUTANT (negate) */                if(! (OBJ_GET_CLASS(cx, nameobj) == &js_AttributeNameClass)) {
4183: /* MUTANT (del_stmt) */ /*                     array = &xml->xml_attrs; */ 
4184: /* MUTANT (del_stmt) */ /*                     matcher = MatchAttrName; */ 
4186: /* MUTANT (del_stmt) */ /*                     array = &xml->xml_kids; */ 
4187: /* MUTANT (del_stmt) */ /*                     matcher = MatchElemName; */ 
4190: /* MUTANT (rep_op) */                while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
4190: /* MUTANT (negate) */                while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
4191: /* MUTANT (negate) */                    if(! (matcher(nameqn, kid))) {
4192: /* MUTANT (rep_op) */                        if (array != &xml->xml_kids &&
4192: /* MUTANT (rep_op) */                        if (array == &xml->xml_kids ||
4193: /* MUTANT (rep_op) */                            kid->xml_class != JSXML_CLASS_ELEMENT) {
4194: /* MUTANT (del_stmt) */ /*                             ok = SyncInScopeNamespaces(cx, kid); */ 
4195: /* MUTANT (negate) */                            if(! (!ok))
4199: /* MUTANT (negate) */                        if(! (!ok))
4210: /* MUTANT (negate) */    if(! (!ok))
4220: /* MUTANT (del_stmt) */ /*     list->xml_targetprop = nameqn; */ 
4221: /* MUTANT (del_stmt) */ /*     *vp = OBJECT_TO_JSVAL(listobj); */ 
4222: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
4228: /* MUTANT (del_stmt) */ /*     JS_ASSERT(xml->object != obj); */ 
4228: /* MUTANT (rep_op) */    JS_ASSERT(xml->object == obj);
4230: /* MUTANT (del_stmt) */ /*     xml = DeepCopy(cx, xml, obj, 0); */ 
4230: /* MUTANT (rep_const) */    xml = DeepCopy(cx, xml, obj, 1);
4230: /* MUTANT (rep_const) */    xml = DeepCopy(cx, xml, obj, -1);
4231: /* MUTANT (negate) */    if(! (!xml))
4234: /* MUTANT (del_stmt) */ /*     JS_ASSERT(xml->object == obj); */ 
4234: /* MUTANT (rep_op) */    JS_ASSERT(xml->object != obj);
4235: /* MUTANT (del_stmt) */ /*     return xml; */ 
4239: /* MUTANT (rep_op) */    (xml->object != obj ? xml : CopyOnWrite(cx, xml, obj))
4244: /* MUTANT (del_stmt) */ /*     JSXML *kid; */ 
4245: /* MUTANT (del_stmt) */ /*     JSObject *kidobj; */ 
4247: /* MUTANT (del_stmt) */ /*     kid = XMLARRAY_MEMBER(&xml->xml_kids, index, JSXML); */ 
4248: /* MUTANT (negate) */    if(! (!kid))
4250: /* MUTANT (del_stmt) */ /*     kidobj = js_GetXMLObject(cx, kid); */ 
4251: /* MUTANT (negate) */    if(! (!kidobj))
4253: /* MUTANT (del_stmt) */ /*     return js_ValueToString(cx, OBJECT_TO_JSVAL(kidobj)); */ 
4260: /* MUTANT (del_stmt) */ /*     JSBool ok, primitiveAssign; */ 
4261: /* MUTANT (del_stmt) */ /*     enum { OBJ_ROOT, ID_ROOT, VAL_ROOT }; */ 
4262: /* MUTANT (del_stmt) */ /*     jsval roots[3]; */ 
4262: /* MUTANT (rep_const) */    jsval roots[0];
4262: /* MUTANT (rep_const) */    jsval roots[1];
4262: /* MUTANT (rep_const) */    jsval roots[-1];
4262: /* MUTANT (rep_const) */    jsval roots[((3)+1)];
4262: /* MUTANT (rep_const) */    jsval roots[((3)-1)];
4263: /* MUTANT (del_stmt) */ /*     JSTempValueRooter tvr; */ 
4264: /* MUTANT (del_stmt) */ /*     JSXML *xml, *vxml, *rxml, *kid, *attr, *parent, *copy, *kid2, *match; */ 
4265: /* MUTANT (del_stmt) */ /*     JSObject *vobj, *nameobj, *attrobj, *parentobj, *kidobj, *copyobj; */ 
4266: /* MUTANT (del_stmt) */ /*     JSXMLQName *targetprop, *nameqn, *attrqn; */ 
4267: /* MUTANT (del_stmt) */ /*     uint32 index, i, j, k, n, q; */ 
4268: /* MUTANT (del_stmt) */ /*     jsval attrval, nsval, junk; */ 
4269: /* MUTANT (del_stmt) */ /*     jsid funid; */ 
4270: /* MUTANT (del_stmt) */ /*     JSString *left, *right, *space; */ 
4271: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
4273: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetInstancePrivate(cx, obj, &js_XMLClass, NULL); */ 
4274: /* MUTANT (negate) */    if(! (!xml))
4277: /* MUTANT (del_stmt) */ /*     xml = CHECK_COPY_ON_WRITE(cx, xml, obj); */ 
4278: /* MUTANT (negate) */    if(! (!xml))
4282: /* MUTANT (del_stmt) */ /*     vxml = NULL; */ 
4283: /* MUTANT (negate) */    if(! (!JSVAL_IS_PRIMITIVE(*vp))) {
4284: /* MUTANT (del_stmt) */ /*         vobj = JSVAL_TO_OBJECT(*vp); */ 
4285: /* MUTANT (negate) */        if(! (OBJECT_IS_XML(cx, vobj)))
4291: /* MUTANT (negate) */    if(! (!ok))
4293: /* MUTANT (del_stmt) */ /*     roots[OBJ_ROOT] = OBJECT_TO_JSVAL(obj); */ 
4294: /* MUTANT (del_stmt) */ /*     roots[ID_ROOT] = id; */ 
4295: /* MUTANT (del_stmt) */ /*     roots[VAL_ROOT] = *vp; */ 
4296: /* MUTANT (del_stmt) */ /*     JS_PUSH_TEMP_ROOT(cx, 3, roots, &tvr); */ 
4296: /* MUTANT (rep_const) */    JS_PUSH_TEMP_ROOT(cx, 0, roots, &tvr);
4296: /* MUTANT (rep_const) */    JS_PUSH_TEMP_ROOT(cx, 1, roots, &tvr);
4296: /* MUTANT (rep_const) */    JS_PUSH_TEMP_ROOT(cx, -1, roots, &tvr);
4296: /* MUTANT (rep_const) */    JS_PUSH_TEMP_ROOT(cx, ((3)+1), roots, &tvr);
4296: /* MUTANT (rep_const) */    JS_PUSH_TEMP_ROOT(cx, ((3)-1), roots, &tvr);
4298: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
4298: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
4300: /* MUTANT (negate) */        if(! (js_IdIsIndex(id, &index))) {
4302: /* MUTANT (del_stmt) */ /*             i = index; */ 
4305: /* MUTANT (negate) */            if(! (xml->xml_target)) {
4306: /* MUTANT (del_stmt) */ /*                 ok = ResolveValue(cx, xml->xml_target, &rxml); */ 
4307: /* MUTANT (negate) */                if(! (!ok))
4309: /* MUTANT (negate) */                if(! (!rxml))
4311: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(rxml->object); */ 
4313: /* MUTANT (del_stmt) */ /*                 rxml = NULL; */ 
4317: /* MUTANT (rep_op) */            if (index <= xml->xml_kids.length) {
4317: /* MUTANT (rep_op) */            if (index < xml->xml_kids.length) {
4317: /* MUTANT (rep_op) */            if (index > xml->xml_kids.length) {
4317: /* MUTANT (rep_op) */            if (index == xml->xml_kids.length) {
4317: /* MUTANT (rep_op) */            if (index != xml->xml_kids.length) {
4317: /* MUTANT (negate) */            if(! (index >= xml->xml_kids.length)) {
4319: /* MUTANT (negate) */                if(! (rxml)) {
4320: /* MUTANT (rep_op) */                    if (rxml->xml_class != JSXML_CLASS_LIST) {
4320: /* MUTANT (negate) */                    if(! (rxml->xml_class == JSXML_CLASS_LIST)) {
4321: /* MUTANT (rep_op) */                        if (rxml->xml_kids.length == 1)
4321: /* MUTANT (rep_const) */                        if (rxml->xml_kids.length != 0)
4321: /* MUTANT (rep_const) */                        if (rxml->xml_kids.length != -1)
4321: /* MUTANT (rep_const) */                        if (rxml->xml_kids.length != ((1)+1))
4321: /* MUTANT (negate) */                        if(! (rxml->xml_kids.length != 1))
4323: /* MUTANT (del_stmt) */ /*                         rxml = XMLARRAY_MEMBER(&rxml->xml_kids, 0, JSXML); */ 
4323: /* MUTANT (rep_const) */                        rxml = XMLARRAY_MEMBER(&rxml->xml_kids, 1, JSXML);
4323: /* MUTANT (rep_const) */                        rxml = XMLARRAY_MEMBER(&rxml->xml_kids, -1, JSXML);
4324: /* MUTANT (negate) */                        if(! (!rxml))
4326: /* MUTANT (del_stmt) */ /*                         ok = js_GetXMLObject(cx, rxml) != NULL; */ 
4326: /* MUTANT (rep_op) */                        ok = js_GetXMLObject(cx, rxml) == NULL;
4327: /* MUTANT (negate) */                        if(! (!ok))
4346: /* MUTANT (negate) */                    if(! (!JSXML_HAS_KIDS(rxml)))
4352: /* MUTANT (rep_op) */                if (!targetprop && IS_STAR(targetprop->localName)) {
4352: /* MUTANT (negate) */                if(! (!targetprop || IS_STAR(targetprop->localName))) {
4354: /* MUTANT (del_stmt) */ /*                     kid = js_NewXML(cx, JSXML_CLASS_TEXT); */ 
4355: /* MUTANT (negate) */                    if(! (!kid))
4358: /* MUTANT (del_stmt) */ /*                     nameobj = js_GetXMLQNameObject(cx, targetprop); */ 
4359: /* MUTANT (negate) */                    if(! (!nameobj))
4361: /* MUTANT (rep_op) */                    if (OBJ_GET_CLASS(cx, nameobj) != &js_AttributeNameClass) {
4361: /* MUTANT (negate) */                    if(! (OBJ_GET_CLASS(cx, nameobj) == &js_AttributeNameClass)) {
4367: /* MUTANT (del_stmt) */ /*                         ok = GetProperty(cx, rxml->object, id, &attrval); */ 
4368: /* MUTANT (negate) */                        if(! (!ok))
4370: /* MUTANT (del_stmt) */ /*                         attrobj = JSVAL_TO_OBJECT(attrval); */ 
4371: /* MUTANT (del_stmt) */ /*                         attr = (JSXML *) JS_GetPrivate(cx, attrobj); */ 
4372: /* MUTANT (rep_op) */                        if (JSXML_LENGTH(attr) == 0)
4372: /* MUTANT (rep_const) */                        if (JSXML_LENGTH(attr) != 1)
4372: /* MUTANT (rep_const) */                        if (JSXML_LENGTH(attr) != -1)
4372: /* MUTANT (negate) */                        if(! (JSXML_LENGTH(attr) != 0))
4375: /* MUTANT (del_stmt) */ /*                         kid = js_NewXML(cx, JSXML_CLASS_ATTRIBUTE); */ 
4378: /* MUTANT (del_stmt) */ /*                         kid = js_NewXML(cx, JSXML_CLASS_ELEMENT); */ 
4380: /* MUTANT (negate) */                    if(! (!kid))
4384: /* MUTANT (del_stmt) */ /*                     kid->name = targetprop; */ 
4391: /* MUTANT (del_stmt) */ /*                 i = xml->xml_kids.length; */ 
4392: /* MUTANT (rep_op) */                if (kid->xml_class == JSXML_CLASS_ATTRIBUTE) {
4392: /* MUTANT (negate) */                if(! (kid->xml_class != JSXML_CLASS_ATTRIBUTE)) {
4399: /* MUTANT (negate) */                    if(! (rxml)) {
4400: /* MUTANT (del_stmt) */ /*                         JS_ASSERT(JSXML_HAS_KIDS(rxml)); */ 
4401: /* MUTANT (del_stmt) */ /*                         n = rxml->xml_kids.length; */ 
4402: /* MUTANT (del_stmt) */ /*                         j = n - 1; */ 
4402: /* MUTANT (rep_const) */                        j = n - 0;
4402: /* MUTANT (rep_const) */                        j = n - -1;
4402: /* MUTANT (rep_const) */                        j = n - ((1)+1);
4403: /* MUTANT (rep_op) */                        if (n == 0 && i != 0) {
4403: /* MUTANT (rep_op) */                        if (n != 0 || i != 0) {
4403: /* MUTANT (rep_op) */                        if (n != 0 && i == 0) {
4403: /* MUTANT (rep_const) */                        if (n != 1 && i != 0) {
4403: /* MUTANT (rep_const) */                        if (n != -1 && i != 0) {
4403: /* MUTANT (rep_const) */                        if (n != 0 && i != 1) {
4403: /* MUTANT (rep_const) */                        if (n != 0 && i != -1) {
4403: /* MUTANT (negate) */                        if(! (n != 0 && i != 0)) {
4404: /* MUTANT (rep_op) */                            for (n = j, j = 0; j <= n; j++) {
4404: /* MUTANT (rep_op) */                            for (n = j, j = 0; j > n; j++) {
4404: /* MUTANT (rep_op) */                            for (n = j, j = 0; j >= n; j++) {
4404: /* MUTANT (rep_op) */                            for (n = j, j = 0; j == n; j++) {
4404: /* MUTANT (rep_op) */                            for (n = j, j = 0; j != n; j++) {
4404: /* MUTANT (rep_op) */                            for (n = j, j = 0; j < n; j--) {
4404: /* MUTANT (rep_const) */                            for (n = j, j = 1; j < n; j++) {
4404: /* MUTANT (rep_const) */                            for (n = j, j = -1; j < n; j++) {
4405: /* MUTANT (rep_op) */                                if (rxml->xml_kids.vector[j] !=
4406: /* MUTANT (rep_const) */                                    xml->xml_kids.vector[i-0]) {
4406: /* MUTANT (rep_const) */                                    xml->xml_kids.vector[i--1]) {
4406: /* MUTANT (rep_const) */                                    xml->xml_kids.vector[i-((1)+1)]) {
4407: /* MUTANT (del_stmt) */ /*                                     break; */ 
4413: /* MUTANT (negate) */                        if(! (!kidobj))
4415: /* MUTANT (del_stmt) */ /*                         ok = Insert(cx, rxml, j + 1, OBJECT_TO_JSVAL(kidobj)); */ 
4415: /* MUTANT (rep_op) */                        ok = Insert(cx, rxml, j - 1, OBJECT_TO_JSVAL(kidobj));
4415: /* MUTANT (rep_op) */                        ok = Insert(cx, rxml, j * 1, OBJECT_TO_JSVAL(kidobj));
4415: /* MUTANT (rep_op) */                        ok = Insert(cx, rxml, j % 1, OBJECT_TO_JSVAL(kidobj));
4415: /* MUTANT (rep_const) */                        ok = Insert(cx, rxml, j + 0, OBJECT_TO_JSVAL(kidobj));
4415: /* MUTANT (rep_const) */                        ok = Insert(cx, rxml, j + -1, OBJECT_TO_JSVAL(kidobj));
4415: /* MUTANT (rep_const) */                        ok = Insert(cx, rxml, j + ((1)+1), OBJECT_TO_JSVAL(kidobj));
4416: /* MUTANT (negate) */                        if(! (!ok))
4425: /* MUTANT (negate) */                    if(! (vxml)) {
4426: /* MUTANT (rep_op) */                        kid->name = (vxml->xml_class != JSXML_CLASS_LIST)
4434: /* MUTANT (negate) */                if(! (!ok))
4439: /* MUTANT (rep_op) */            if (!vxml &&
4440: /* MUTANT (rep_op) */                vxml->xml_class != JSXML_CLASS_TEXT ||
4440: /* MUTANT (rep_op) */                vxml->xml_class == JSXML_CLASS_TEXT &&
4441: /* MUTANT (rep_op) */                vxml->xml_class != JSXML_CLASS_ATTRIBUTE) {
4442: /* MUTANT (del_stmt) */ /*                 ok = JS_ConvertValue(cx, *vp, JSTYPE_STRING, vp); */ 
4443: /* MUTANT (negate) */                if(! (!ok))
4445: /* MUTANT (del_stmt) */ /*                 roots[VAL_ROOT] = *vp; */ 
4450: /* MUTANT (negate) */            if(! (!kid))
4452: /* MUTANT (del_stmt) */ /*             parent = kid->parent; */ 
4453: /* MUTANT (rep_op) */            if (kid->xml_class != JSXML_CLASS_ATTRIBUTE) {
4453: /* MUTANT (negate) */            if(! (kid->xml_class == JSXML_CLASS_ATTRIBUTE)) {
4454: /* MUTANT (del_stmt) */ /*                 nameobj = js_GetAttributeNameObject(cx, kid->name); */ 
4455: /* MUTANT (negate) */                if(! (!nameobj))
4457: /* MUTANT (del_stmt) */ /*                 id = OBJECT_TO_JSVAL(nameobj); */ 
4459: /* MUTANT (negate) */                if(! (parent)) {
4461: /* MUTANT (del_stmt) */ /*                     parentobj = parent->object; */ 
4462: /* MUTANT (del_stmt) */ /*                     ok = PutProperty(cx, parentobj, id, vp); */ 
4463: /* MUTANT (negate) */                    if(! (!ok))
4467: /* MUTANT (del_stmt) */ /*                     ok = GetProperty(cx, parentobj, id, vp); */ 
4468: /* MUTANT (negate) */                    if(! (!ok))
4470: /* MUTANT (del_stmt) */ /*                     attr = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(*vp)); */ 
4473: /* MUTANT (del_stmt) */ /*                     xml->xml_kids.vector[i] = attr->xml_kids.vector[0]; */ 
4473: /* MUTANT (rep_const) */                    xml->xml_kids.vector[i] = attr->xml_kids.vector[1];
4473: /* MUTANT (rep_const) */                    xml->xml_kids.vector[i] = attr->xml_kids.vector[-1];
4478: /* MUTANT (rep_op) */            else if (vxml || vxml->xml_class == JSXML_CLASS_LIST) {
4478: /* MUTANT (rep_op) */            else if (vxml && vxml->xml_class != JSXML_CLASS_LIST) {
4478: /* MUTANT (negate) */            else if(! (vxml && vxml->xml_class == JSXML_CLASS_LIST)) {
4480: /* MUTANT (del_stmt) */ /*                 copyobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
4481: /* MUTANT (negate) */                if(! (!copyobj))
4483: /* MUTANT (del_stmt) */ /*                 copy = (JSXML *) JS_GetPrivate(cx, copyobj); */ 
4484: /* MUTANT (del_stmt) */ /*                 n = vxml->xml_kids.length; */ 
4485: /* MUTANT (del_stmt) */ /*                 ok = XMLArraySetCapacity(cx, &copy->xml_kids, n); */ 
4486: /* MUTANT (negate) */                if(! (!ok))
4488: /* MUTANT (rep_op) */                for (k = 0; k <= n; k++) {
4488: /* MUTANT (rep_op) */                for (k = 0; k > n; k++) {
4488: /* MUTANT (rep_op) */                for (k = 0; k >= n; k++) {
4488: /* MUTANT (rep_op) */                for (k = 0; k == n; k++) {
4488: /* MUTANT (rep_op) */                for (k = 0; k != n; k++) {
4488: /* MUTANT (rep_op) */                for (k = 0; k < n; k--) {
4488: /* MUTANT (rep_const) */                for (k = 1; k < n; k++) {
4488: /* MUTANT (rep_const) */                for (k = -1; k < n; k++) {
4489: /* MUTANT (del_stmt) */ /*                     kid2 = XMLARRAY_MEMBER(&vxml->xml_kids, k, JSXML); */ 
4490: /* MUTANT (del_stmt) */ /*                     XMLARRAY_SET_MEMBER(&copy->xml_kids, k, kid2); */ 
4493: /* MUTANT (rep_op) */                JS_ASSERT(parent == xml);
4494: /* MUTANT (negate) */                if(! (parent)) {
4495: /* MUTANT (del_stmt) */ /*                     q = XMLARRAY_FIND_MEMBER(&parent->xml_kids, kid, NULL); */ 
4496: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(q != XML_NOT_FOUND); */ 
4496: /* MUTANT (rep_op) */                    JS_ASSERT(q == XML_NOT_FOUND);
4498: /* MUTANT (del_stmt) */ /*                     ok = IndexToIdVal(cx, q, &id); */ 
4499: /* MUTANT (negate) */                    if(! (!ok))
4501: /* MUTANT (del_stmt) */ /*                     ok = Replace(cx, parent, id, OBJECT_TO_JSVAL(copyobj)); */ 
4502: /* MUTANT (negate) */                    if(! (!ok))
4507: /* MUTANT (rep_op) */                    for (j = 0, n = copy->xml_kids.length; j <= n; j++) {
4507: /* MUTANT (rep_op) */                    for (j = 0, n = copy->xml_kids.length; j > n; j++) {
4507: /* MUTANT (rep_op) */                    for (j = 0, n = copy->xml_kids.length; j >= n; j++) {
4507: /* MUTANT (rep_op) */                    for (j = 0, n = copy->xml_kids.length; j == n; j++) {
4507: /* MUTANT (rep_op) */                    for (j = 0, n = copy->xml_kids.length; j != n; j++) {
4507: /* MUTANT (rep_op) */                    for (j = 0, n = copy->xml_kids.length; j < n; j--) {
4507: /* MUTANT (rep_const) */                    for (j = 1, n = copy->xml_kids.length; j < n; j++) {
4507: /* MUTANT (rep_const) */                    for (j = -1, n = copy->xml_kids.length; j < n; j++) {
4508: /* MUTANT (del_stmt) */ /*                         kid2 = XMLARRAY_MEMBER(&parent->xml_kids, q + j, JSXML); */ 
4508: /* MUTANT (rep_op) */                        kid2 = XMLARRAY_MEMBER(&parent->xml_kids, q - j, JSXML);
4508: /* MUTANT (rep_op) */                        kid2 = XMLARRAY_MEMBER(&parent->xml_kids, q * j, JSXML);
4508: /* MUTANT (rep_op) */                        kid2 = XMLARRAY_MEMBER(&parent->xml_kids, q % j, JSXML);
4510: /* MUTANT (rep_op) */                                  != kid2);
4520: /* MUTANT (rep_op) */                if (n != 0) {
4520: /* MUTANT (rep_const) */                if (n == 1) {
4520: /* MUTANT (rep_const) */                if (n == -1) {
4520: /* MUTANT (negate) */                if(! (n == 0)) {
4521: /* MUTANT (del_stmt) */ /*                     XMLArrayDelete(cx, &xml->xml_kids, i, JS_TRUE); */ 
4523: /* MUTANT (del_stmt) */ /*                     ok = XMLArrayInsert(cx, &xml->xml_kids, i + 1, n - 1); */ 
4523: /* MUTANT (rep_op) */                    ok = XMLArrayInsert(cx, &xml->xml_kids, i - 1, n - 1);
4523: /* MUTANT (rep_op) */                    ok = XMLArrayInsert(cx, &xml->xml_kids, i * 1, n - 1);
4523: /* MUTANT (rep_op) */                    ok = XMLArrayInsert(cx, &xml->xml_kids, i % 1, n - 1);
4523: /* MUTANT (rep_const) */                    ok = XMLArrayInsert(cx, &xml->xml_kids, i + 0, n - 1);
4523: /* MUTANT (rep_const) */                    ok = XMLArrayInsert(cx, &xml->xml_kids, i + -1, n - 1);
4523: /* MUTANT (rep_const) */                    ok = XMLArrayInsert(cx, &xml->xml_kids, i + ((1)+1), n - 1);
4523: /* MUTANT (rep_const) */                    ok = XMLArrayInsert(cx, &xml->xml_kids, i + 1, n - 0);
4523: /* MUTANT (rep_const) */                    ok = XMLArrayInsert(cx, &xml->xml_kids, i + 1, n - -1);
4523: /* MUTANT (rep_const) */                    ok = XMLArrayInsert(cx, &xml->xml_kids, i + 1, n - ((1)+1));
4524: /* MUTANT (negate) */                    if(! (!ok))
4527: /* MUTANT (rep_op) */                    for (j = 0; j <= n; j++)
4527: /* MUTANT (rep_op) */                    for (j = 0; j > n; j++)
4527: /* MUTANT (rep_op) */                    for (j = 0; j >= n; j++)
4527: /* MUTANT (rep_op) */                    for (j = 0; j == n; j++)
4527: /* MUTANT (rep_op) */                    for (j = 0; j != n; j++)
4527: /* MUTANT (rep_op) */                    for (j = 0; j < n; j--)
4527: /* MUTANT (rep_const) */                    for (j = 1; j < n; j++)
4527: /* MUTANT (rep_const) */                    for (j = -1; j < n; j++)
4528: /* MUTANT (rep_op) */                        xml->xml_kids.vector[i - j] = copy->xml_kids.vector[j];
4528: /* MUTANT (rep_op) */                        xml->xml_kids.vector[i * j] = copy->xml_kids.vector[j];
4528: /* MUTANT (rep_op) */                        xml->xml_kids.vector[i % j] = copy->xml_kids.vector[j];
4533: /* MUTANT (rep_op) */            else if (vxml && JSXML_HAS_VALUE(kid)) {
4533: /* MUTANT (negate) */            else if(! (vxml || JSXML_HAS_VALUE(kid))) {
4534: /* MUTANT (negate) */                if(! (parent)) {
4535: /* MUTANT (del_stmt) */ /*                     q = XMLARRAY_FIND_MEMBER(&parent->xml_kids, kid, NULL); */ 
4536: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(q != XML_NOT_FOUND); */ 
4536: /* MUTANT (rep_op) */                    JS_ASSERT(q == XML_NOT_FOUND);
4538: /* MUTANT (del_stmt) */ /*                     ok = IndexToIdVal(cx, q, &id); */ 
4539: /* MUTANT (negate) */                    if(! (!ok))
4541: /* MUTANT (del_stmt) */ /*                     ok = Replace(cx, parent, id, *vp); */ 
4542: /* MUTANT (negate) */                    if(! (!ok))
4545: /* MUTANT (del_stmt) */ /*                     vxml = XMLARRAY_MEMBER(&parent->xml_kids, q, JSXML); */ 
4546: /* MUTANT (negate) */                    if(! (!vxml))
4548: /* MUTANT (del_stmt) */ /*                     roots[VAL_ROOT] = *vp = OBJECT_TO_JSVAL(vxml->object); */ 
4561: /* MUTANT (negate) */                if(! (!vxml)) {
4562: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(JSVAL_IS_STRING(*vp)); */ 
4563: /* MUTANT (del_stmt) */ /*                     vobj = ToXML(cx, *vp); */ 
4564: /* MUTANT (negate) */                    if(! (!vobj))
4566: /* MUTANT (del_stmt) */ /*                     roots[VAL_ROOT] = *vp = OBJECT_TO_JSVAL(vobj); */ 
4567: /* MUTANT (del_stmt) */ /*                     vxml = (JSXML *) JS_GetPrivate(cx, vobj); */ 
4574: /* MUTANT (del_stmt) */ /*                 kidobj = js_GetXMLObject(cx, kid); */ 
4575: /* MUTANT (negate) */                if(! (!kidobj))
4577: /* MUTANT (del_stmt) */ /*                 id = ATOM_KEY(cx->runtime->atomState.starAtom); */ 
4578: /* MUTANT (del_stmt) */ /*                 ok = PutProperty(cx, kidobj, id, vp); */ 
4579: /* MUTANT (negate) */                if(! (!ok))
4588: /* MUTANT (del_stmt) */ /*             n = JSXML_LENGTH(xml); */ 
4589: /* MUTANT (rep_op) */            if (n <= 1)
4589: /* MUTANT (rep_op) */            if (n < 1)
4589: /* MUTANT (rep_op) */            if (n >= 1)
4589: /* MUTANT (rep_op) */            if (n == 1)
4589: /* MUTANT (rep_op) */            if (n != 1)
4589: /* MUTANT (rep_const) */            if (n > 0)
4589: /* MUTANT (rep_const) */            if (n > -1)
4589: /* MUTANT (rep_const) */            if (n > ((1)+1))
4589: /* MUTANT (negate) */            if(! (n > 1))
4591: /* MUTANT (rep_op) */            if (n != 0) {
4591: /* MUTANT (rep_const) */            if (n == 1) {
4591: /* MUTANT (rep_const) */            if (n == -1) {
4591: /* MUTANT (negate) */            if(! (n == 0)) {
4592: /* MUTANT (del_stmt) */ /*                 ok = ResolveValue(cx, xml, &rxml); */ 
4593: /* MUTANT (negate) */                if(! (!ok))
4595: /* MUTANT (rep_op) */                if (!rxml && JSXML_LENGTH(rxml) != 1)
4595: /* MUTANT (rep_op) */                if (!rxml || JSXML_LENGTH(rxml) == 1)
4595: /* MUTANT (rep_const) */                if (!rxml || JSXML_LENGTH(rxml) != 0)
4595: /* MUTANT (rep_const) */                if (!rxml || JSXML_LENGTH(rxml) != -1)
4595: /* MUTANT (rep_const) */                if (!rxml || JSXML_LENGTH(rxml) != ((1)+1))
4595: /* MUTANT (negate) */                if(! (!rxml || JSXML_LENGTH(rxml) != 1))
4597: /* MUTANT (del_stmt) */ /*                 ok = Append(cx, xml, rxml); */ 
4598: /* MUTANT (negate) */                if(! (!ok))
4601: /* MUTANT (rep_op) */            JS_ASSERT(JSXML_LENGTH(xml) != 1);
4601: /* MUTANT (rep_const) */            JS_ASSERT(JSXML_LENGTH(xml) == 0);
4601: /* MUTANT (rep_const) */            JS_ASSERT(JSXML_LENGTH(xml) == -1);
4601: /* MUTANT (rep_const) */            JS_ASSERT(JSXML_LENGTH(xml) == ((1)+1));
4602: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, 0, JSXML); */ 
4602: /* MUTANT (rep_const) */            kid = XMLARRAY_MEMBER(&xml->xml_kids, 1, JSXML);
4602: /* MUTANT (rep_const) */            kid = XMLARRAY_MEMBER(&xml->xml_kids, -1, JSXML);
4603: /* MUTANT (negate) */            if(! (!kid))
4605: /* MUTANT (del_stmt) */ /*             kidobj = js_GetXMLObject(cx, kid); */ 
4606: /* MUTANT (negate) */            if(! (!kidobj))
4608: /* MUTANT (del_stmt) */ /*             ok = PutProperty(cx, kidobj, id, vp); */ 
4609: /* MUTANT (negate) */            if(! (!ok))
4618: /* MUTANT (negate) */        if(! (js_IdIsIndex(id, &index))) {
4620: /* MUTANT (del_stmt) */ /*             ReportBadXMLName(cx, id); */ 
4621: /* MUTANT (del_stmt) */ /*             goto bad; */ 
4625: /* MUTANT (negate) */        if(! (!nameqn))
4627: /* MUTANT (negate) */        if(! (funid)) {
4628: /* MUTANT (del_stmt) */ /*             ok = js_SetProperty(cx, obj, funid, vp); */ 
4629: /* MUTANT (del_stmt) */ /*             goto out; */ 
4633: /* MUTANT (negate) */        if(! (JSXML_HAS_VALUE(xml)))
4636: /* MUTANT (rep_op) */        if (!vxml &&
4637: /* MUTANT (rep_op) */            vxml->xml_class != JSXML_CLASS_TEXT ||
4637: /* MUTANT (rep_op) */            vxml->xml_class == JSXML_CLASS_TEXT &&
4638: /* MUTANT (rep_op) */            vxml->xml_class != JSXML_CLASS_ATTRIBUTE) {
4639: /* MUTANT (del_stmt) */ /*             ok = JS_ConvertValue(cx, *vp, JSTYPE_STRING, vp); */ 
4640: /* MUTANT (negate) */            if(! (!ok))
4643: /* MUTANT (del_stmt) */ /*             rxml = DeepCopyInLRS(cx, vxml, 0); */ 
4643: /* MUTANT (rep_const) */            rxml = DeepCopyInLRS(cx, vxml, 1);
4643: /* MUTANT (rep_const) */            rxml = DeepCopyInLRS(cx, vxml, -1);
4644: /* MUTANT (rep_op) */            if (!rxml && !js_GetXMLObject(cx, rxml))
4644: /* MUTANT (negate) */            if(! (!rxml || !js_GetXMLObject(cx, rxml)))
4646: /* MUTANT (del_stmt) */ /*             vxml = rxml; */ 
4647: /* MUTANT (del_stmt) */ /*             *vp = OBJECT_TO_JSVAL(vxml->object); */ 
4655: /* MUTANT (del_stmt) */ /*         ok = js_GetDefaultXMLNamespace(cx, &nsval); */ 
4656: /* MUTANT (negate) */        if(! (!ok))
4659: /* MUTANT (rep_op) */        if (OBJ_GET_CLASS(cx, nameobj) != &js_AttributeNameClass) {
4659: /* MUTANT (negate) */        if(! (OBJ_GET_CLASS(cx, nameobj) == &js_AttributeNameClass)) {
4661: /* MUTANT (negate) */            if(! (!js_IsXMLName(cx, OBJECT_TO_JSVAL(nameobj))))
4665: /* MUTANT (rep_op) */            if (vxml || vxml->xml_class == JSXML_CLASS_LIST) {
4665: /* MUTANT (rep_op) */            if (vxml && vxml->xml_class != JSXML_CLASS_LIST) {
4665: /* MUTANT (negate) */            if(! (vxml && vxml->xml_class == JSXML_CLASS_LIST)) {
4666: /* MUTANT (del_stmt) */ /*                 n = vxml->xml_kids.length; */ 
4667: /* MUTANT (rep_op) */                if (n != 0) {
4667: /* MUTANT (rep_const) */                if (n == 1) {
4667: /* MUTANT (rep_const) */                if (n == -1) {
4667: /* MUTANT (negate) */                if(! (n == 0)) {
4668: /* MUTANT (del_stmt) */ /*                     *vp = STRING_TO_JSVAL(cx->runtime->emptyString); */ 
4670: /* MUTANT (del_stmt) */ /*                     left = KidToString(cx, vxml, 0); */ 
4670: /* MUTANT (rep_const) */                    left = KidToString(cx, vxml, 1);
4670: /* MUTANT (rep_const) */                    left = KidToString(cx, vxml, -1);
4671: /* MUTANT (negate) */                    if(! (!left))
4674: /* MUTANT (del_stmt) */ /*                     space = ATOM_TO_STRING(cx->runtime->atomState.spaceAtom); */ 
4675: /* MUTANT (rep_op) */                    for (i = 1; i <= n; i++) {
4675: /* MUTANT (rep_op) */                    for (i = 1; i > n; i++) {
4675: /* MUTANT (rep_op) */                    for (i = 1; i >= n; i++) {
4675: /* MUTANT (rep_op) */                    for (i = 1; i == n; i++) {
4675: /* MUTANT (rep_op) */                    for (i = 1; i != n; i++) {
4675: /* MUTANT (rep_op) */                    for (i = 1; i < n; i--) {
4675: /* MUTANT (rep_const) */                    for (i = 0; i < n; i++) {
4675: /* MUTANT (rep_const) */                    for (i = -1; i < n; i++) {
4675: /* MUTANT (rep_const) */                    for (i = ((1)+1); i < n; i++) {
4676: /* MUTANT (del_stmt) */ /*                         left = js_ConcatStrings(cx, left, space); */ 
4677: /* MUTANT (negate) */                        if(! (!left))
4679: /* MUTANT (del_stmt) */ /*                         right = KidToString(cx, vxml, i); */ 
4680: /* MUTANT (negate) */                        if(! (!right))
4682: /* MUTANT (del_stmt) */ /*                         left = js_ConcatStrings(cx, left, right); */ 
4683: /* MUTANT (negate) */                        if(! (!left))
4690: /* MUTANT (del_stmt) */ /*                 ok = JS_ConvertValue(cx, *vp, JSTYPE_STRING, vp); */ 
4691: /* MUTANT (negate) */                if(! (!ok))
4693: /* MUTANT (del_stmt) */ /*                 roots[VAL_ROOT] = *vp; */ 
4698: /* MUTANT (rep_op) */            for (i = 0, n = xml->xml_attrs.length; i <= n; i++) {
4698: /* MUTANT (rep_op) */            for (i = 0, n = xml->xml_attrs.length; i > n; i++) {
4698: /* MUTANT (rep_op) */            for (i = 0, n = xml->xml_attrs.length; i >= n; i++) {
4698: /* MUTANT (rep_op) */            for (i = 0, n = xml->xml_attrs.length; i == n; i++) {
4698: /* MUTANT (rep_op) */            for (i = 0, n = xml->xml_attrs.length; i != n; i++) {
4698: /* MUTANT (rep_op) */            for (i = 0, n = xml->xml_attrs.length; i < n; i--) {
4698: /* MUTANT (rep_const) */            for (i = 1, n = xml->xml_attrs.length; i < n; i++) {
4698: /* MUTANT (rep_const) */            for (i = -1, n = xml->xml_attrs.length; i < n; i++) {
4699: /* MUTANT (del_stmt) */ /*                 attr = XMLARRAY_MEMBER(&xml->xml_attrs, i, JSXML); */ 
4700: /* MUTANT (negate) */                if(! (!attr))
4702: /* MUTANT (del_stmt) */ /*                 attrqn = attr->name; */ 
4703: /* MUTANT (rep_op) */                if (!js_CompareStrings(attrqn->localName, nameqn->localName) ||
4704: /* MUTANT (rep_op) */                    (!nameqn->uri &&
4706: /* MUTANT (negate) */                    if(! (!match)) {
4707: /* MUTANT (del_stmt) */ /*                         match = attr; */ 
4709: /* MUTANT (del_stmt) */ /*                         nameobj = js_GetAttributeNameObject(cx, attrqn); */ 
4710: /* MUTANT (negate) */                        if(! (!nameobj))
4713: /* MUTANT (del_stmt) */ /*                         id = OBJECT_TO_JSVAL(nameobj); */ 
4714: /* MUTANT (del_stmt) */ /*                         ok = DeleteProperty(cx, obj, id, &junk); */ 
4715: /* MUTANT (negate) */                        if(! (!ok))
4717: /* MUTANT (del_stmt) */ /*                         --i; */ 
4717: /* MUTANT (rep_op) */                        ++i;
4724: /* MUTANT (negate) */            if(! (!attr)) {
4726: /* MUTANT (negate) */                if(! (!nameqn->uri)) {
4727: /* MUTANT (del_stmt) */ /*                     left = right = cx->runtime->emptyString; */ 
4729: /* MUTANT (del_stmt) */ /*                     left = nameqn->uri; */ 
4730: /* MUTANT (del_stmt) */ /*                     right = nameqn->prefix; */ 
4733: /* MUTANT (negate) */                if(! (!nameqn))
4737: /* MUTANT (del_stmt) */ /*                 attr = js_NewXML(cx, JSXML_CLASS_ATTRIBUTE); */ 
4738: /* MUTANT (negate) */                if(! (!attr))
4740: /* MUTANT (del_stmt) */ /*                 attr->parent = xml; */ 
4741: /* MUTANT (del_stmt) */ /*                 attr->name = nameqn; */ 
4744: /* MUTANT (del_stmt) */ /*                 ok = XMLARRAY_ADD_MEMBER(cx, &xml->xml_attrs, n, attr); */ 
4745: /* MUTANT (negate) */                if(! (!ok))
4749: /* MUTANT (del_stmt) */ /*                 ns = GetNamespace(cx, nameqn, NULL); */ 
4750: /* MUTANT (negate) */                if(! (!ns))
4752: /* MUTANT (del_stmt) */ /*                 ok = AddInScopeNamespace(cx, xml, ns); */ 
4753: /* MUTANT (negate) */                if(! (!ok))
4759: /* MUTANT (del_stmt) */ /*             goto out; */ 
4763: /* MUTANT (rep_op) */        if (!js_IsXMLName(cx, OBJECT_TO_JSVAL(nameobj)) ||
4765: /* MUTANT (del_stmt) */ /*             goto out; */ 
4770: /* MUTANT (del_stmt) */ /*         primitiveAssign = !vxml && !IS_STAR(nameqn->localName); */ 
4770: /* MUTANT (rep_op) */        primitiveAssign = !vxml || !IS_STAR(nameqn->localName);
4773: /* MUTANT (del_stmt) */ /*         k = n = xml->xml_kids.length; */ 
4774: /* MUTANT (del_stmt) */ /*         kid2 = NULL; */ 
4775: /* MUTANT (rep_op) */        while (k == 0) {
4775: /* MUTANT (rep_const) */        while (k != 1) {
4775: /* MUTANT (rep_const) */        while (k != -1) {
4775: /* MUTANT (negate) */        while(! (k != 0)) {
4776: /* MUTANT (del_stmt) */ /*             --k; */ 
4776: /* MUTANT (rep_op) */            ++k;
4777: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, k, JSXML); */ 
4778: /* MUTANT (rep_op) */            if (kid || MatchElemName(nameqn, kid)) {
4778: /* MUTANT (negate) */            if(! (kid && MatchElemName(nameqn, kid))) {
4779: /* MUTANT (negate) */                if(! (!JSVAL_IS_VOID(id))) {
4780: /* MUTANT (del_stmt) */ /*                     ok = DeleteByIndex(cx, xml, id, &junk); */ 
4781: /* MUTANT (negate) */                    if(! (!ok))
4785: /* MUTANT (negate) */                if(! (!ok))
4787: /* MUTANT (del_stmt) */ /*                 kid2 = kid; */ 
4807: /* MUTANT (negate) */        if(! (kid2)) {
4808: /* MUTANT (del_stmt) */ /*             JS_ASSERT(kid2->parent == xml || !kid2->parent); */ 
4808: /* MUTANT (rep_op) */            JS_ASSERT(kid2->parent != xml || !kid2->parent);
4808: /* MUTANT (rep_op) */            JS_ASSERT(kid2->parent == xml && !kid2->parent);
4809: /* MUTANT (negate) */            if(! (!kid2->parent))
4814: /* MUTANT (negate) */        if(! (JSVAL_IS_VOID(id))) {
4816: /* MUTANT (del_stmt) */ /*             ok = IndexToIdVal(cx, n, &id); */ 
4817: /* MUTANT (negate) */            if(! (!ok))
4821: /* MUTANT (negate) */            if(! (primitiveAssign)) {
4822: /* MUTANT (negate) */                if(! (!nameqn->uri)) {
4825: /* MUTANT (del_stmt) */ /*                     left = ns->uri; */ 
4826: /* MUTANT (del_stmt) */ /*                     right = ns->prefix; */ 
4828: /* MUTANT (del_stmt) */ /*                     left = nameqn->uri; */ 
4829: /* MUTANT (del_stmt) */ /*                     right = nameqn->prefix; */ 
4832: /* MUTANT (negate) */                if(! (!nameqn))
4836: /* MUTANT (del_stmt) */ /*                 vobj = js_NewXMLObject(cx, JSXML_CLASS_ELEMENT); */ 
4837: /* MUTANT (negate) */                if(! (!vobj))
4839: /* MUTANT (del_stmt) */ /*                 vxml = (JSXML *) JS_GetPrivate(cx, vobj); */ 
4840: /* MUTANT (del_stmt) */ /*                 vxml->parent = xml; */ 
4841: /* MUTANT (del_stmt) */ /*                 vxml->name = nameqn; */ 
4844: /* MUTANT (del_stmt) */ /*                 ns = GetNamespace(cx, nameqn, NULL); */ 
4845: /* MUTANT (negate) */                if(! (!ns))
4847: /* MUTANT (del_stmt) */ /*                 ok = Replace(cx, xml, id, OBJECT_TO_JSVAL(vobj)); */ 
4848: /* MUTANT (negate) */                if(! (!ok))
4850: /* MUTANT (del_stmt) */ /*                 ok = AddInScopeNamespace(cx, vxml, ns); */ 
4851: /* MUTANT (negate) */                if(! (!ok))
4857: /* MUTANT (negate) */        if(! (primitiveAssign)) {
4858: /* MUTANT (del_stmt) */ /*             JSXMLArrayCursor cursor; */ 
4860: /* MUTANT (del_stmt) */ /*             js_IdIsIndex(id, &index); */ 
4861: /* MUTANT (del_stmt) */ /*             XMLArrayCursorInit(&cursor, &xml->xml_kids); */ 
4862: /* MUTANT (del_stmt) */ /*             cursor.index = index; */ 
4863: /* MUTANT (del_stmt) */ /*             kid = (JSXML *) XMLArrayCursorItem(&cursor); */ 
4864: /* MUTANT (negate) */            if(! (JSXML_HAS_KIDS(kid))) {
4865: /* MUTANT (del_stmt) */ /*                 XMLArrayFinish(cx, &kid->xml_kids); */ 
4866: /* MUTANT (del_stmt) */ /*                 ok = XMLArrayInit(cx, &kid->xml_kids, 1); */ 
4866: /* MUTANT (rep_const) */                ok = XMLArrayInit(cx, &kid->xml_kids, 0);
4866: /* MUTANT (rep_const) */                ok = XMLArrayInit(cx, &kid->xml_kids, -1);
4866: /* MUTANT (rep_const) */                ok = XMLArrayInit(cx, &kid->xml_kids, ((1)+1));
4871: /* MUTANT (negate) */            if(! (ok)) {
4872: /* MUTANT (del_stmt) */ /*                 ok = JS_ConvertValue(cx, *vp, JSTYPE_STRING, vp); */ 
4873: /* MUTANT (rep_op) */                if (ok || !IS_EMPTY(JSVAL_TO_STRING(*vp))) {
4873: /* MUTANT (negate) */                if(! (ok && !IS_EMPTY(JSVAL_TO_STRING(*vp)))) {
4874: /* MUTANT (del_stmt) */ /*                     roots[VAL_ROOT] = *vp; */ 
4875: /* MUTANT (rep_op) */                    if ((JSXML *) XMLArrayCursorItem(&cursor) != kid)
4875: /* MUTANT (negate) */                    if(! ((JSXML *) XMLArrayCursorItem(&cursor) == kid))
4882: /* MUTANT (del_stmt) */ /*             ok = Replace(cx, xml, id, *vp); */ 
4888: /* MUTANT (del_stmt) */ /*     JS_LeaveLocalRootScope(cx); */ 
4889: /* MUTANT (del_stmt) */ /*     return ok; */ 
4897: /* MUTANT (del_stmt) */ /*     goto out; */ 
4904: /* MUTANT (del_stmt) */ /*     JSXML *target, *base; */ 
4905: /* MUTANT (del_stmt) */ /*     JSXMLQName *targetprop; */ 
4906: /* MUTANT (del_stmt) */ /*     JSObject *targetpropobj; */ 
4907: /* MUTANT (del_stmt) */ /*     jsval id, tv; */ 
4910: /* MUTANT (del_stmt) */ /*     JS_ASSERT(cx->localRootStack); */ 
4912: /* MUTANT (rep_op) */    if (list->xml_class == JSXML_CLASS_LIST || list->xml_kids.length != 0) {
4912: /* MUTANT (rep_op) */    if (list->xml_class != JSXML_CLASS_LIST && list->xml_kids.length != 0) {
4912: /* MUTANT (rep_op) */    if (list->xml_class != JSXML_CLASS_LIST || list->xml_kids.length == 0) {
4912: /* MUTANT (rep_const) */    if (list->xml_class != JSXML_CLASS_LIST || list->xml_kids.length != 1) {
4912: /* MUTANT (rep_const) */    if (list->xml_class != JSXML_CLASS_LIST || list->xml_kids.length != -1) {
4912: /* MUTANT (negate) */    if(! (list->xml_class != JSXML_CLASS_LIST || list->xml_kids.length != 0)) {
4913: /* MUTANT (negate) */        if(! (!js_GetXMLObject(cx, list)))
4915: /* MUTANT (del_stmt) */ /*         *result = list; */ 
4916: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
4920: /* MUTANT (del_stmt) */ /*     targetprop = list->xml_targetprop; */ 
4921: /* MUTANT (rep_op) */    if (!target && !targetprop || IS_STAR(targetprop->localName)) {
4921: /* MUTANT (rep_op) */    if (!target || !targetprop && IS_STAR(targetprop->localName)) {
4921: /* MUTANT (negate) */    if(! (!target || !targetprop || IS_STAR(targetprop->localName))) {
4922: /* MUTANT (del_stmt) */ /*         *result = NULL; */ 
4923: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
4927: /* MUTANT (negate) */    if(! (!targetpropobj))
4929: /* MUTANT (rep_op) */    if (OBJ_GET_CLASS(cx, targetpropobj) != &js_AttributeNameClass) {
4929: /* MUTANT (negate) */    if(! (OBJ_GET_CLASS(cx, targetpropobj) == &js_AttributeNameClass)) {
4930: /* MUTANT (del_stmt) */ /*         *result = NULL; */ 
4931: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
4934: /* MUTANT (negate) */    if(! (!ResolveValue(cx, target, &base)))
4936: /* MUTANT (negate) */    if(! (!base)) {
4937: /* MUTANT (del_stmt) */ /*         *result = NULL; */ 
4938: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
4940: /* MUTANT (negate) */    if(! (!js_GetXMLObject(cx, base)))
4943: /* MUTANT (del_stmt) */ /*     id = OBJECT_TO_JSVAL(targetpropobj); */ 
4944: /* MUTANT (negate) */    if(! (!GetProperty(cx, base->object, id, &tv)))
4946: /* MUTANT (del_stmt) */ /*     target = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(tv)); */ 
4948: /* MUTANT (rep_op) */    if (JSXML_LENGTH(target) != 0) {
4948: /* MUTANT (rep_const) */    if (JSXML_LENGTH(target) == 1) {
4948: /* MUTANT (rep_const) */    if (JSXML_LENGTH(target) == -1) {
4948: /* MUTANT (negate) */    if(! (JSXML_LENGTH(target) == 0)) {
4949: /* MUTANT (rep_op) */        if (base->xml_class != JSXML_CLASS_LIST && JSXML_LENGTH(base) > 1) {
4949: /* MUTANT (rep_op) */        if (base->xml_class == JSXML_CLASS_LIST || JSXML_LENGTH(base) > 1) {
4949: /* MUTANT (rep_op) */        if (base->xml_class == JSXML_CLASS_LIST && JSXML_LENGTH(base) <= 1) {
4949: /* MUTANT (rep_op) */        if (base->xml_class == JSXML_CLASS_LIST && JSXML_LENGTH(base) < 1) {
4949: /* MUTANT (rep_op) */        if (base->xml_class == JSXML_CLASS_LIST && JSXML_LENGTH(base) >= 1) {
4949: /* MUTANT (rep_op) */        if (base->xml_class == JSXML_CLASS_LIST && JSXML_LENGTH(base) == 1) {
4949: /* MUTANT (rep_op) */        if (base->xml_class == JSXML_CLASS_LIST && JSXML_LENGTH(base) != 1) {
4949: /* MUTANT (rep_const) */        if (base->xml_class == JSXML_CLASS_LIST && JSXML_LENGTH(base) > 0) {
4949: /* MUTANT (rep_const) */        if (base->xml_class == JSXML_CLASS_LIST && JSXML_LENGTH(base) > -1) {
4949: /* MUTANT (rep_const) */        if (base->xml_class == JSXML_CLASS_LIST && JSXML_LENGTH(base) > ((1)+1)) {
4949: /* MUTANT (negate) */        if(! (base->xml_class == JSXML_CLASS_LIST && JSXML_LENGTH(base) > 1)) {
4950: /* MUTANT (del_stmt) */ /*             *result = NULL; */ 
4951: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
4954: /* MUTANT (negate) */        if(! (!PutProperty(cx, base->object, id, &tv)))
4956: /* MUTANT (negate) */        if(! (!GetProperty(cx, base->object, id, &tv)))
4958: /* MUTANT (del_stmt) */ /*         target = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(tv)); */ 
4962: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
4974: #define FOUND_XML_PROPERTY              ((JSProperty *) 0) /* MUTANT (rep_const) */
4974: #define FOUND_XML_PROPERTY              ((JSProperty *) -1) /* MUTANT (rep_const) */
4974: #define FOUND_XML_PROPERTY              ((JSProperty *) ((1)+1)) /* MUTANT (rep_const) */
4977: /* MUTANT (rep_const) */                                         : (void) 1)
4977: /* MUTANT (rep_const) */                                         : (void) -1)
4984: /* MUTANT (del_stmt) */ /*     JSXML *xml, *kid; */ 
4985: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor; */ 
4986: /* MUTANT (del_stmt) */ /*     JSObject *kidobj; */ 
4987: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
4988: /* MUTANT (del_stmt) */ /*     jsid funid; */ 
4989: /* MUTANT (del_stmt) */ /*     JSXMLArray *array; */ 
4990: /* MUTANT (del_stmt) */ /*     JSXMLNameMatcher matcher; */ 
4991: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
4993: /* MUTANT (del_stmt) */ /*     *objp = NULL; */ 
4994: /* MUTANT (del_stmt) */ /*     *propp = NULL; */ 
4996: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
4997: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
4997: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
4998: /* MUTANT (del_stmt) */ /*         n = JSXML_LENGTH(xml); */ 
4999: /* MUTANT (negate) */        if(! (js_IdIsIndex(id, &i))) {
5000: /* MUTANT (rep_op) */            if (i <= n)
5000: /* MUTANT (rep_op) */            if (i > n)
5000: /* MUTANT (rep_op) */            if (i >= n)
5000: /* MUTANT (rep_op) */            if (i == n)
5000: /* MUTANT (rep_op) */            if (i != n)
5000: /* MUTANT (negate) */            if(! (i < n))
5002: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
5006: /* MUTANT (rep_op) */        while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
5006: /* MUTANT (negate) */        while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
5007: /* MUTANT (rep_op) */            if (kid->xml_class != JSXML_CLASS_ELEMENT) {
5007: /* MUTANT (negate) */            if(! (kid->xml_class == JSXML_CLASS_ELEMENT)) {
5008: /* MUTANT (del_stmt) */ /*                 kidobj = js_GetXMLObject(cx, kid); */ 
5009: /* MUTANT (rep_op) */                if (!kidobj && !HasProperty(cx, kidobj, id, objp, propp))
5009: /* MUTANT (negate) */                if(! (!kidobj || !HasProperty(cx, kidobj, id, objp, propp)))
5011: /* MUTANT (negate) */                if(! (*propp))
5016: /* MUTANT (negate) */        if(! (kid))
5017: /* MUTANT (rep_op) */            return *propp == NULL;
5019: /* MUTANT (rep_op) */        if (xml->xml_class != JSXML_CLASS_ELEMENT && js_IdIsIndex(id, &i)) {
5019: /* MUTANT (rep_op) */        if (xml->xml_class == JSXML_CLASS_ELEMENT || js_IdIsIndex(id, &i)) {
5019: /* MUTANT (negate) */        if(! (xml->xml_class == JSXML_CLASS_ELEMENT && js_IdIsIndex(id, &i))) {
5020: /* MUTANT (rep_op) */            if (i != 0)
5020: /* MUTANT (rep_const) */            if (i == 1)
5020: /* MUTANT (rep_const) */            if (i == -1)
5020: /* MUTANT (negate) */            if(! (i == 0))
5022: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
5026: /* MUTANT (negate) */        if(! (!qn))
5028: /* MUTANT (negate) */        if(! (funid))
5031: /* MUTANT (rep_op) */        if (xml->xml_class == JSXML_CLASS_ELEMENT)
5031: /* MUTANT (negate) */        if(! (xml->xml_class != JSXML_CLASS_ELEMENT))
5034: /* MUTANT (rep_op) */        if (OBJ_GET_CLASS(cx, qn->object) != &js_AttributeNameClass) {
5034: /* MUTANT (negate) */        if(! (OBJ_GET_CLASS(cx, qn->object) == &js_AttributeNameClass)) {
5035: /* MUTANT (del_stmt) */ /*             array = &xml->xml_attrs; */ 
5036: /* MUTANT (del_stmt) */ /*             matcher = MatchAttrName; */ 
5038: /* MUTANT (del_stmt) */ /*             array = &xml->xml_kids; */ 
5039: /* MUTANT (del_stmt) */ /*             matcher = MatchElemName; */ 
5041: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i <= n; i++) {
5041: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i > n; i++) {
5041: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i >= n; i++) {
5041: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i == n; i++) {
5041: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i != n; i++) {
5041: /* MUTANT (rep_op) */        for (i = 0, n = array->length; i < n; i--) {
5041: /* MUTANT (rep_const) */        for (i = 1, n = array->length; i < n; i++) {
5041: /* MUTANT (rep_const) */        for (i = -1, n = array->length; i < n; i++) {
5042: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(array, i, JSXML); */ 
5043: /* MUTANT (rep_op) */            if (kid || matcher(qn, kid)) {
5043: /* MUTANT (negate) */            if(! (kid && matcher(qn, kid))) {
5044: /* MUTANT (del_stmt) */ /*                 *propp = FOUND_XML_PROPERTY; */ 
5045: /* MUTANT (del_stmt) */ /*                 return JS_TRUE; */ 
5056: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
5058: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
5059: /* MUTANT (negate) */    if(! (!xml))
5061: /* MUTANT (rep_op) */    if (xml->object != obj)
5061: /* MUTANT (negate) */    if(! (xml->object == obj))
5063: /* MUTANT (del_stmt) */ /*     UNMETER(xml_stats.livexmlobj); */ 
5069: /* MUTANT (del_stmt) */ /*     uint32 i; */ 
5070: /* MUTANT (del_stmt) */ /*     JSXML *elt; */ 
5072: /* MUTANT (rep_op) */    for (i = 0; i <= len; i++) {
5072: /* MUTANT (rep_op) */    for (i = 0; i > len; i++) {
5072: /* MUTANT (rep_op) */    for (i = 0; i >= len; i++) {
5072: /* MUTANT (rep_op) */    for (i = 0; i == len; i++) {
5072: /* MUTANT (rep_op) */    for (i = 0; i != len; i++) {
5072: /* MUTANT (rep_op) */    for (i = 0; i < len; i--) {
5072: /* MUTANT (rep_const) */    for (i = 1; i < len; i++) {
5072: /* MUTANT (rep_const) */    for (i = -1; i < len; i++) {
5073: /* MUTANT (del_stmt) */ /*         elt = vec[i]; */ 
5076: /* MUTANT (rep_const) */            char buf[0];
5076: /* MUTANT (rep_const) */            char buf[1];
5076: /* MUTANT (rep_const) */            char buf[-1];
5076: /* MUTANT (rep_const) */            char buf[((120)+1)];
5076: /* MUTANT (rep_const) */            char buf[((120)-1)];
5078: /* MUTANT (rep_op) */            if (elt->xml_class != JSXML_CLASS_LIST) {
5078: /* MUTANT (negate) */            if(! (elt->xml_class == JSXML_CLASS_LIST)) {
5079: /* MUTANT (del_stmt) */ /*                 strcpy(buf, js_XMLList_str); */ 
5080: /* MUTANT (negate) */            } else if(! (JSXML_HAS_NAME(elt))) {
5081: /* MUTANT (del_stmt) */ /*                 JSXMLQName *qn = elt->name; */ 
5087: /* MUTANT (del_stmt) */ /*                 JSString *str = elt->xml_value; */ 
5088: /* MUTANT (del_stmt) */ /*                 size_t srclen = JSSTRING_LENGTH(str); */ 
5089: /* MUTANT (del_stmt) */ /*                 size_t dstlen = sizeof buf; */ 
5091: /* MUTANT (rep_op) */                if (srclen <= sizeof buf / 6)
5091: /* MUTANT (rep_op) */                if (srclen < sizeof buf / 6)
5091: /* MUTANT (rep_op) */                if (srclen > sizeof buf / 6)
5091: /* MUTANT (rep_op) */                if (srclen == sizeof buf / 6)
5091: /* MUTANT (rep_op) */                if (srclen != sizeof buf / 6)
5091: /* MUTANT (rep_const) */                if (srclen >= sizeof buf / 0)
5091: /* MUTANT (rep_const) */                if (srclen >= sizeof buf / 1)
5091: /* MUTANT (rep_const) */                if (srclen >= sizeof buf / -1)
5091: /* MUTANT (rep_const) */                if (srclen >= sizeof buf / ((6)+1))
5091: /* MUTANT (rep_const) */                if (srclen >= sizeof buf / ((6)-1))
5091: /* MUTANT (negate) */                if(! (srclen >= sizeof buf / 6))
5092: /* MUTANT (rep_const) */                    srclen = sizeof buf / 0 - 1;
5092: /* MUTANT (rep_const) */                    srclen = sizeof buf / 1 - 1;
5092: /* MUTANT (rep_const) */                    srclen = sizeof buf / -1 - 1;
5092: /* MUTANT (rep_const) */                    srclen = sizeof buf / ((6)+1) - 1;
5092: /* MUTANT (rep_const) */                    srclen = sizeof buf / ((6)-1) - 1;
5092: /* MUTANT (rep_const) */                    srclen = sizeof buf / 6 - 0;
5092: /* MUTANT (rep_const) */                    srclen = sizeof buf / 6 - -1;
5092: /* MUTANT (rep_const) */                    srclen = sizeof buf / 6 - ((1)+1);
5126: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
5128: /* MUTANT (negate) */    if(! (!HasProperty(cx, obj, ID_TO_VALUE(id), objp, propp)))
5131: /* MUTANT (rep_op) */    if (*propp != FOUND_XML_PROPERTY) {
5131: /* MUTANT (negate) */    if(! (*propp == FOUND_XML_PROPERTY)) {
5134: /* MUTANT (rep_const) */                                     1, 0);
5134: /* MUTANT (rep_const) */                                     -1, 0);
5134: /* MUTANT (rep_const) */                                     0, 1);
5134: /* MUTANT (rep_const) */                                     0, -1);
5135: /* MUTANT (negate) */        if(! (!sprop))
5138: /* MUTANT (del_stmt) */ /*         JS_LOCK_OBJ(cx, obj); */ 
5139: /* MUTANT (del_stmt) */ /*         *objp = obj; */ 
5140: /* MUTANT (del_stmt) */ /*         *propp = (JSProperty *) sprop; */ 
5150: /* MUTANT (rep_op) */    if (JSVAL_IS_FUNCTION(cx, value) && getter || setter ||
5150: /* MUTANT (rep_op) */    if (JSVAL_IS_FUNCTION(cx, value) || getter && setter ||
5150: /* MUTANT (rep_op) */    if (JSVAL_IS_FUNCTION(cx, value) || getter || setter &&
5151: /* MUTANT (rep_op) */        (attrs & JSPROP_ENUMERATE) != 0 ||
5151: /* MUTANT (rep_op) */        (attrs & JSPROP_ENUMERATE) == 0 &&
5151: /* MUTANT (rep_const) */        (attrs & JSPROP_ENUMERATE) == 1 ||
5151: /* MUTANT (rep_const) */        (attrs & JSPROP_ENUMERATE) == -1 ||
5152: /* MUTANT (rep_op) */        (attrs & (JSPROP_READONLY & JSPROP_PERMANENT | JSPROP_SHARED))) {
5152: /* MUTANT (rep_op) */        (attrs & (JSPROP_READONLY | JSPROP_PERMANENT & JSPROP_SHARED))) {
5157: /* MUTANT (negate) */    if(! (!PutProperty(cx, obj, ID_TO_VALUE(id), &value)))
5159: /* MUTANT (negate) */    if(! (propp))
5161: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
5167: /* MUTANT (rep_op) */    if (id != JS_DEFAULT_XML_NAMESPACE_ID) {
5167: /* MUTANT (negate) */    if(! (id == JS_DEFAULT_XML_NAMESPACE_ID)) {
5168: /* MUTANT (del_stmt) */ /*         *vp = JSVAL_VOID; */ 
5169: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
5178: /* MUTANT (del_stmt) */ /*     return PutProperty(cx, obj, ID_TO_VALUE(id), vp); */ 
5185: /* MUTANT (del_stmt) */ /*     JSObject *pobj; */ 
5187: /* MUTANT (negate) */    if(! (prop)) {
5188: /* MUTANT (del_stmt) */ /*         *foundp = JS_TRUE; */ 
5190: /* MUTANT (negate) */        if(! (!HasProperty(cx, obj, ID_TO_VALUE(id), &pobj, &prop)))
5192: /* MUTANT (negate) */        if(! (prop))
5194: /* MUTANT (del_stmt) */ /*         *foundp = (prop != NULL); */ 
5194: /* MUTANT (rep_op) */        *foundp = (prop == NULL);
5203: /* MUTANT (del_stmt) */ /*     JSBool found; */ 
5205: /* MUTANT (negate) */    if(! (!FoundProperty(cx, obj, id, prop, &found)))
5207: /* MUTANT (del_stmt) */ /*     *attrsp = found ? JSPROP_ENUMERATE : 0; */ 
5207: /* MUTANT (rep_const) */    *attrsp = found ? JSPROP_ENUMERATE : 1;
5207: /* MUTANT (rep_const) */    *attrsp = found ? JSPROP_ENUMERATE : -1;
5208: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
5215: /* MUTANT (del_stmt) */ /*     JSBool found; */ 
5217: /* MUTANT (negate) */    if(! (!FoundProperty(cx, obj, id, prop, &found)))
5219: /* MUTANT (negate) */    if(! (found)) {
5240: /* MUTANT (rep_op) */    if (OBJ_SCOPE(obj)->object != obj && !JSID_IS_INT(id)) {
5240: /* MUTANT (rep_op) */    if (OBJ_SCOPE(obj)->object == obj || !JSID_IS_INT(id)) {
5240: /* MUTANT (negate) */    if(! (OBJ_SCOPE(obj)->object == obj && !JSID_IS_INT(id))) {
5241: /* MUTANT (negate) */        if(! (!js_DeleteProperty(cx, obj, id, rval)))
5251: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
5253: /* MUTANT (rep_op) */    if (hint != JSTYPE_OBJECT) {
5253: /* MUTANT (negate) */    if(! (hint == JSTYPE_OBJECT)) {
5255: /* MUTANT (del_stmt) */ /*         xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
5256: /* MUTANT (rep_op) */        if (xml->xml_class == JSXML_CLASS_LIST) {
5256: /* MUTANT (negate) */        if(! (xml->xml_class != JSXML_CLASS_LIST)) {
5257: /* MUTANT (del_stmt) */ /*             obj = ToXMLList(cx, OBJECT_TO_JSVAL(obj)); */ 
5258: /* MUTANT (negate) */            if(! (!obj))
5262: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
5265: /* MUTANT (rep_const) */    return JS_CallFunctionName(cx, obj, js_toString_str, 1, NULL, vp);
5265: /* MUTANT (rep_const) */    return JS_CallFunctionName(cx, obj, js_toString_str, -1, NULL, vp);
5272: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
5273: /* MUTANT (del_stmt) */ /*     uint32 length, index; */ 
5274: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor *cursor; */ 
5276: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
5277: /* MUTANT (del_stmt) */ /*     length = JSXML_LENGTH(xml); */ 
5281: /* MUTANT (rep_op) */        if (length != 0) {
5281: /* MUTANT (rep_const) */        if (length == 1) {
5281: /* MUTANT (rep_const) */        if (length == -1) {
5281: /* MUTANT (negate) */        if(! (length == 0)) {
5282: /* MUTANT (del_stmt) */ /*             cursor = NULL; */ 
5284: /* MUTANT (del_stmt) */ /*             cursor = (JSXMLArrayCursor *) JS_malloc(cx, sizeof *cursor); */ 
5285: /* MUTANT (negate) */            if(! (!cursor))
5287: /* MUTANT (del_stmt) */ /*             XMLArrayCursorInit(cursor, &xml->xml_kids); */ 
5290: /* MUTANT (negate) */        if(! (idp))
5292: /* MUTANT (del_stmt) */ /*         break; */ 
5296: /* MUTANT (rep_op) */        if (cursor || cursor->array && (index = cursor->index) < length) {
5296: /* MUTANT (rep_op) */        if (cursor && cursor->array || (index = cursor->index) < length) {
5296: /* MUTANT (rep_op) */        if (cursor && cursor->array && (index = cursor->index) <= length) {
5296: /* MUTANT (rep_op) */        if (cursor && cursor->array && (index = cursor->index) > length) {
5296: /* MUTANT (rep_op) */        if (cursor && cursor->array && (index = cursor->index) >= length) {
5296: /* MUTANT (rep_op) */        if (cursor && cursor->array && (index = cursor->index) == length) {
5296: /* MUTANT (rep_op) */        if (cursor && cursor->array && (index = cursor->index) != length) {
5296: /* MUTANT (negate) */        if(! (cursor && cursor->array && (index = cursor->index) < length)) {
5297: /* MUTANT (del_stmt) */ /*             *idp = INT_TO_JSID(index); */ 
5298: /* MUTANT (del_stmt) */ /*             cursor->index = index + 1; */ 
5298: /* MUTANT (rep_op) */            cursor->index = index - 1;
5298: /* MUTANT (rep_op) */            cursor->index = index * 1;
5298: /* MUTANT (rep_op) */            cursor->index = index % 1;
5298: /* MUTANT (rep_const) */            cursor->index = index + 0;
5298: /* MUTANT (rep_const) */            cursor->index = index + -1;
5298: /* MUTANT (rep_const) */            cursor->index = index + ((1)+1);
5299: /* MUTANT (del_stmt) */ /*             break; */ 
5305: /* MUTANT (negate) */        if(! (cursor)) {
5306: /* MUTANT (del_stmt) */ /*             XMLArrayCursorFinish(cursor); */ 
5307: /* MUTANT (del_stmt) */ /*             JS_free(cx, cursor); */ 
5310: /* MUTANT (del_stmt) */ /*         break; */ 
5318: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
5324: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
5326: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
5327: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, xml, js_private_str, arg); */ 
5328: /* MUTANT (del_stmt) */ /*     return js_Mark(cx, obj, arg); */ 
5339: /* MUTANT (del_stmt) */ /*     JSXML *kid; */ 
5340: /* MUTANT (del_stmt) */ /*     JSBool simple; */ 
5341: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
5349: /* MUTANT (rep_op) */        if (xml->xml_kids.length != 0)
5349: /* MUTANT (rep_const) */        if (xml->xml_kids.length == 1)
5349: /* MUTANT (rep_const) */        if (xml->xml_kids.length == -1)
5349: /* MUTANT (negate) */        if(! (xml->xml_kids.length == 0))
5351: /* MUTANT (rep_op) */        if (xml->xml_kids.length != 1) {
5351: /* MUTANT (rep_const) */        if (xml->xml_kids.length == 0) {
5351: /* MUTANT (rep_const) */        if (xml->xml_kids.length == -1) {
5351: /* MUTANT (rep_const) */        if (xml->xml_kids.length == ((1)+1)) {
5351: /* MUTANT (negate) */        if(! (xml->xml_kids.length == 1)) {
5352: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, 0, JSXML); */ 
5352: /* MUTANT (rep_const) */            kid = XMLARRAY_MEMBER(&xml->xml_kids, 1, JSXML);
5352: /* MUTANT (rep_const) */            kid = XMLARRAY_MEMBER(&xml->xml_kids, -1, JSXML);
5353: /* MUTANT (negate) */            if(! (kid)) {
5354: /* MUTANT (del_stmt) */ /*                 xml = kid; */ 
5355: /* MUTANT (del_stmt) */ /*                 goto again; */ 
5361: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i <= n; i++) {
5361: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i > n; i++) {
5361: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i >= n; i++) {
5361: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i == n; i++) {
5361: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i != n; i++) {
5361: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i < n; i--) {
5361: /* MUTANT (rep_const) */        for (i = 1, n = JSXML_LENGTH(xml); i < n; i++) {
5361: /* MUTANT (rep_const) */        for (i = -1, n = JSXML_LENGTH(xml); i < n; i++) {
5362: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
5363: /* MUTANT (rep_op) */            if (kid || kid->xml_class == JSXML_CLASS_ELEMENT) {
5363: /* MUTANT (rep_op) */            if (kid && kid->xml_class != JSXML_CLASS_ELEMENT) {
5363: /* MUTANT (negate) */            if(! (kid && kid->xml_class == JSXML_CLASS_ELEMENT)) {
5364: /* MUTANT (del_stmt) */ /*                 simple = JS_FALSE; */ 
5365: /* MUTANT (del_stmt) */ /*                 break; */ 
5378: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
5379: /* MUTANT (del_stmt) */ /*     JSTempValueRooter tvr; */ 
5380: /* MUTANT (del_stmt) */ /*     jsval roots[2]; */ 
5380: /* MUTANT (rep_const) */    jsval roots[0];
5380: /* MUTANT (rep_const) */    jsval roots[1];
5380: /* MUTANT (rep_const) */    jsval roots[-1];
5380: /* MUTANT (rep_const) */    jsval roots[((2)+1)];
5380: /* MUTANT (rep_const) */    jsval roots[((2)-1)];
5382: /* MUTANT (rep_const) */        FUN_ROOT = 1,
5382: /* MUTANT (rep_const) */        FUN_ROOT = -1,
5383: /* MUTANT (rep_const) */        OBJ_ROOT = 0
5383: /* MUTANT (rep_const) */        OBJ_ROOT = -1
5383: /* MUTANT (rep_const) */        OBJ_ROOT = ((1)+1)
5386: /* MUTANT (del_stmt) */ /*     JS_ASSERT(JS_InstanceOf(cx, obj, &js_XMLClass, NULL)); */ 
5387: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
5388: /* MUTANT (del_stmt) */ /*     memset(roots, 0, sizeof(roots)); */ 
5388: /* MUTANT (rep_const) */    memset(roots, 1, sizeof(roots));
5388: /* MUTANT (rep_const) */    memset(roots, -1, sizeof(roots));
5389: /* MUTANT (del_stmt) */ /*     JS_PUSH_TEMP_ROOT(cx, sizeof roots / sizeof *roots, roots, &tvr); */ 
5393: /* MUTANT (negate) */    if(! (!GetFunction(cx, obj, xml, id, &roots[FUN_ROOT])))
5395: /* MUTANT (rep_op) */    if (JSVAL_IS_VOID(roots[FUN_ROOT]) || OBJECT_IS_XML(cx, obj)) {
5395: /* MUTANT (negate) */    if(! (JSVAL_IS_VOID(roots[FUN_ROOT]) && OBJECT_IS_XML(cx, obj))) {
5396: /* MUTANT (rep_op) */        if (xml->xml_class != JSXML_CLASS_LIST) {
5396: /* MUTANT (negate) */        if(! (xml->xml_class == JSXML_CLASS_LIST)) {
5397: /* MUTANT (rep_op) */            if (xml->xml_kids.length != 1) {
5397: /* MUTANT (rep_const) */            if (xml->xml_kids.length == 0) {
5397: /* MUTANT (rep_const) */            if (xml->xml_kids.length == -1) {
5397: /* MUTANT (rep_const) */            if (xml->xml_kids.length == ((1)+1)) {
5397: /* MUTANT (negate) */            if(! (xml->xml_kids.length == 1)) {
5398: /* MUTANT (del_stmt) */ /*                 xml = XMLARRAY_MEMBER(&xml->xml_kids, 0, JSXML); */ 
5398: /* MUTANT (rep_const) */                xml = XMLARRAY_MEMBER(&xml->xml_kids, 1, JSXML);
5398: /* MUTANT (rep_const) */                xml = XMLARRAY_MEMBER(&xml->xml_kids, -1, JSXML);
5399: /* MUTANT (negate) */                if(! (xml)) {
5400: /* MUTANT (del_stmt) */ /*                     obj = js_GetXMLObject(cx, xml); */ 
5401: /* MUTANT (negate) */                    if(! (!obj))
5403: /* MUTANT (del_stmt) */ /*                     roots[OBJ_ROOT] = OBJECT_TO_JSVAL(obj); */ 
5404: /* MUTANT (del_stmt) */ /*                     goto retry; */ 
5407: /* MUTANT (negate) */        } else if(! (HasSimpleContent(xml))) {
5408: /* MUTANT (del_stmt) */ /*             JSString *str; */ 
5410: /* MUTANT (del_stmt) */ /*             str = js_ValueToString(cx, OBJECT_TO_JSVAL(obj)); */ 
5411: /* MUTANT (negate) */            if(! (!str))
5413: /* MUTANT (negate) */            if(! (!js_ValueToObject(cx, STRING_TO_JSVAL(str), &obj)))
5415: /* MUTANT (del_stmt) */ /*             roots[OBJ_ROOT] = OBJECT_TO_JSVAL(obj); */ 
5416: /* MUTANT (negate) */            if(! (!js_GetProperty(cx, obj, id, &roots[FUN_ROOT])))
5422: /* MUTANT (negate) */    if(! (obj)) {
5430: /* MUTANT (del_stmt) */ /*         cx->newborn[GCX_OBJECT] = (JSGCThing *)obj; */ 
5431: /* MUTANT (del_stmt) */ /*         cx->lastInternalResult = roots[FUN_ROOT]; */ 
5434: /* MUTANT (del_stmt) */ /*     return obj; */ 
5437: /* MUTANT (del_stmt) */ /*     goto out; */ 
5443: /* MUTANT (del_stmt) */ /*     return js_SetProperty(cx, obj, id, vp); */ 
5450: /* MUTANT (del_stmt) */ /*     JSXML *xml, *kid; */ 
5451: /* MUTANT (del_stmt) */ /*     uint32 length, index; */ 
5452: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor *cursor; */ 
5453: /* MUTANT (del_stmt) */ /*     JSObject *kidobj; */ 
5455: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
5456: /* MUTANT (del_stmt) */ /*     length = JSXML_LENGTH(xml); */ 
5457: /* MUTANT (del_stmt) */ /*     JS_ASSERT(INT_FITS_IN_JSVAL(length)); */ 
5461: /* MUTANT (rep_op) */        if (length != 0) {
5461: /* MUTANT (rep_const) */        if (length == 1) {
5461: /* MUTANT (rep_const) */        if (length == -1) {
5461: /* MUTANT (negate) */        if(! (length == 0)) {
5462: /* MUTANT (del_stmt) */ /*             cursor = NULL; */ 
5464: /* MUTANT (del_stmt) */ /*             cursor = (JSXMLArrayCursor *) JS_malloc(cx, sizeof *cursor); */ 
5465: /* MUTANT (negate) */            if(! (!cursor))
5467: /* MUTANT (del_stmt) */ /*             XMLArrayCursorInit(cursor, &xml->xml_kids); */ 
5470: /* MUTANT (negate) */        if(! (idp))
5472: /* MUTANT (negate) */        if(! (vp))
5474: /* MUTANT (del_stmt) */ /*         break; */ 
5478: /* MUTANT (rep_op) */        if (cursor || cursor->array && (index = cursor->index) < length) {
5478: /* MUTANT (rep_op) */        if (cursor && cursor->array || (index = cursor->index) < length) {
5478: /* MUTANT (rep_op) */        if (cursor && cursor->array && (index = cursor->index) <= length) {
5478: /* MUTANT (rep_op) */        if (cursor && cursor->array && (index = cursor->index) > length) {
5478: /* MUTANT (rep_op) */        if (cursor && cursor->array && (index = cursor->index) >= length) {
5478: /* MUTANT (rep_op) */        if (cursor && cursor->array && (index = cursor->index) == length) {
5478: /* MUTANT (rep_op) */        if (cursor && cursor->array && (index = cursor->index) != length) {
5478: /* MUTANT (negate) */        if(! (cursor && cursor->array && (index = cursor->index) < length)) {
5479: /* MUTANT (negate) */            while(! (!(kid = XMLARRAY_MEMBER(&xml->xml_kids, index, JSXML)))) {
5480: /* MUTANT (rep_op) */                if (--index == length)
5480: /* MUTANT (rep_op) */                if (++index != length)
5480: /* MUTANT (negate) */                if(! (++index == length))
5484: /* MUTANT (negate) */            if(! (!kidobj))
5486: /* MUTANT (del_stmt) */ /*             JS_ASSERT(INT_FITS_IN_JSVAL(index)); */ 
5487: /* MUTANT (del_stmt) */ /*             *idp = INT_TO_JSID(index); */ 
5488: /* MUTANT (del_stmt) */ /*             *vp = OBJECT_TO_JSVAL(kidobj); */ 
5489: /* MUTANT (del_stmt) */ /*             cursor->index = index + 1; */ 
5489: /* MUTANT (rep_op) */            cursor->index = index - 1;
5489: /* MUTANT (rep_op) */            cursor->index = index * 1;
5489: /* MUTANT (rep_op) */            cursor->index = index % 1;
5489: /* MUTANT (rep_const) */            cursor->index = index + 0;
5489: /* MUTANT (rep_const) */            cursor->index = index + -1;
5489: /* MUTANT (rep_const) */            cursor->index = index + ((1)+1);
5490: /* MUTANT (del_stmt) */ /*             break; */ 
5496: /* MUTANT (negate) */        if(! (cursor)) {
5499: /* MUTANT (del_stmt) */ /*             JS_free(cx, cursor); */ 
5502: /* MUTANT (del_stmt) */ /*         break; */ 
5510: /* MUTANT (del_stmt) */ /*     JSXML *xml, *vxml; */ 
5511: /* MUTANT (del_stmt) */ /*     JSObject *vobj; */ 
5512: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
5513: /* MUTANT (del_stmt) */ /*     JSString *str, *vstr; */ 
5514: /* MUTANT (del_stmt) */ /*     jsdouble d, d2; */ 
5516: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
5517: /* MUTANT (del_stmt) */ /*     vxml = NULL; */ 
5518: /* MUTANT (negate) */    if(! (!JSVAL_IS_PRIMITIVE(v))) {
5519: /* MUTANT (del_stmt) */ /*         vobj = JSVAL_TO_OBJECT(v); */ 
5520: /* MUTANT (negate) */        if(! (OBJECT_IS_XML(cx, vobj)))
5524: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
5524: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
5525: /* MUTANT (del_stmt) */ /*         ok = Equals(cx, xml, v, bp); */ 
5526: /* MUTANT (negate) */    } else if(! (vxml)) {
5527: /* MUTANT (rep_op) */        if (vxml->xml_class != JSXML_CLASS_LIST) {
5527: /* MUTANT (negate) */        if(! (vxml->xml_class == JSXML_CLASS_LIST)) {
5528: /* MUTANT (del_stmt) */ /*             ok = Equals(cx, vxml, OBJECT_TO_JSVAL(obj), bp); */ 
5530: /* MUTANT (rep_op) */            if (((xml->xml_class != JSXML_CLASS_TEXT ||
5530: /* MUTANT (rep_op) */            if (((xml->xml_class == JSXML_CLASS_TEXT &&
5531: /* MUTANT (rep_op) */                  xml->xml_class != JSXML_CLASS_ATTRIBUTE) &&
5531: /* MUTANT (rep_op) */                  xml->xml_class == JSXML_CLASS_ATTRIBUTE) ||
5532: /* MUTANT (rep_op) */                 HasSimpleContent(vxml)) &&
5533: /* MUTANT (rep_op) */                ((vxml->xml_class != JSXML_CLASS_TEXT ||
5533: /* MUTANT (rep_op) */                ((vxml->xml_class == JSXML_CLASS_TEXT &&
5534: /* MUTANT (rep_op) */                  vxml->xml_class != JSXML_CLASS_ATTRIBUTE) &&
5534: /* MUTANT (rep_op) */                  vxml->xml_class == JSXML_CLASS_ATTRIBUTE) ||
5536: /* MUTANT (del_stmt) */ /*                 ok = JS_EnterLocalRootScope(cx); */ 
5537: /* MUTANT (negate) */                if(! (ok)) {
5538: /* MUTANT (del_stmt) */ /*                     str = js_ValueToString(cx, OBJECT_TO_JSVAL(obj)); */ 
5539: /* MUTANT (del_stmt) */ /*                     vstr = js_ValueToString(cx, v); */ 
5540: /* MUTANT (del_stmt) */ /*                     ok = str && vstr; */ 
5540: /* MUTANT (rep_op) */                    ok = str || vstr;
5541: /* MUTANT (negate) */                    if(! (ok))
5543: /* MUTANT (del_stmt) */ /*                     JS_LeaveLocalRootScope(cx); */ 
5546: /* MUTANT (del_stmt) */ /*                 ok = XMLEquals(cx, xml, vxml, bp); */ 
5550: /* MUTANT (del_stmt) */ /*         ok = JS_EnterLocalRootScope(cx); */ 
5551: /* MUTANT (negate) */        if(! (ok)) {
5552: /* MUTANT (negate) */            if(! (HasSimpleContent(xml))) {
5553: /* MUTANT (del_stmt) */ /*                 str = js_ValueToString(cx, OBJECT_TO_JSVAL(obj)); */ 
5554: /* MUTANT (del_stmt) */ /*                 vstr = js_ValueToString(cx, v); */ 
5555: /* MUTANT (del_stmt) */ /*                 ok = str && vstr; */ 
5555: /* MUTANT (rep_op) */                ok = str || vstr;
5556: /* MUTANT (negate) */                if(! (ok))
5558: /* MUTANT (rep_op) */            } else if (JSVAL_IS_STRING(v) && JSVAL_IS_NUMBER(v)) {
5558: /* MUTANT (negate) */            } else if(! (JSVAL_IS_STRING(v) || JSVAL_IS_NUMBER(v))) {
5559: /* MUTANT (del_stmt) */ /*                 str = js_ValueToString(cx, OBJECT_TO_JSVAL(obj)); */ 
5560: /* MUTANT (negate) */                if(! (!str)) {
5561: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
5562: /* MUTANT (negate) */                } else if(! (JSVAL_IS_STRING(v))) {
5563: /* MUTANT (del_stmt) */ /*                     *bp = !js_CompareStrings(str, JSVAL_TO_STRING(v)); */ 
5565: /* MUTANT (del_stmt) */ /*                     ok = js_ValueToNumber(cx, STRING_TO_JSVAL(str), &d); */ 
5566: /* MUTANT (negate) */                    if(! (ok)) {
5569: /* MUTANT (del_stmt) */ /*                         *bp = JSDOUBLE_COMPARE(d, ==, d2, JS_FALSE); */ 
5569: /* MUTANT (rep_op) */                        *bp = JSDOUBLE_COMPARE(d, !=, d2, JS_FALSE);
5573: /* MUTANT (del_stmt) */ /*                 *bp = JS_FALSE; */ 
5584: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
5585: /* MUTANT (del_stmt) */ /*     JSObject *listobj, *robj; */ 
5586: /* MUTANT (del_stmt) */ /*     JSXML *list, *lxml, *rxml; */ 
5588: /* MUTANT (del_stmt) */ /*     ok = JS_EnterLocalRootScope(cx); */ 
5589: /* MUTANT (negate) */    if(! (!ok))
5592: /* MUTANT (del_stmt) */ /*     listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
5593: /* MUTANT (negate) */    if(! (!listobj)) {
5594: /* MUTANT (del_stmt) */ /*         ok = JS_FALSE; */ 
5595: /* MUTANT (del_stmt) */ /*         goto out; */ 
5599: /* MUTANT (del_stmt) */ /*     lxml = (JSXML *) JS_GetPrivate(cx, obj); */ 
5600: /* MUTANT (del_stmt) */ /*     ok = Append(cx, list, lxml); */ 
5601: /* MUTANT (negate) */    if(! (!ok))
5604: /* MUTANT (negate) */    if(! (VALUE_IS_XML(cx, v))) {
5605: /* MUTANT (del_stmt) */ /*         rxml = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(v)); */ 
5607: /* MUTANT (del_stmt) */ /*         robj = ToXML(cx, v); */ 
5608: /* MUTANT (negate) */        if(! (!robj)) {
5609: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
5610: /* MUTANT (del_stmt) */ /*             goto out; */ 
5615: /* MUTANT (negate) */    if(! (!ok))
5618: /* MUTANT (del_stmt) */ /*     *vp = OBJECT_TO_JSVAL(listobj); */ 
5621: /* MUTANT (del_stmt) */ /*     return ok; */ 
5646: /* MUTANT (del_stmt) */ /*     return &js_XMLObjectOps.base; */ 
5661: /* MUTANT (del_stmt) */ /*     JSObject *tmp; */ 
5662: /* MUTANT (del_stmt) */ /*     jsval rval; */ 
5664: /* MUTANT (rep_op) */    while ((tmp = OBJ_GET_PARENT(cx, obj)) == NULL)
5664: /* MUTANT (negate) */    while(! ((tmp = OBJ_GET_PARENT(cx, obj)) != NULL))
5666: /* MUTANT (negate) */    if(! (!JS_CallFunctionName(cx, obj, clasp->name, argc, argv, &rval)))
5668: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!JSVAL_IS_PRIMITIVE(rval)); */ 
5669: /* MUTANT (del_stmt) */ /*     return JSVAL_TO_OBJECT(rval); */ 
5675: /* MUTANT (negate) */        if(! (!xml))                                                             \
5683: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
5684: /* MUTANT (del_stmt) */ /*     JSObject *nsobj; */ 
5685: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
5687: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
5688: /* MUTANT (rep_op) */    if (xml->xml_class == JSXML_CLASS_ELEMENT)
5688: /* MUTANT (negate) */    if(! (xml->xml_class != JSXML_CLASS_ELEMENT))
5690: /* MUTANT (del_stmt) */ /*     xml = CHECK_COPY_ON_WRITE(cx, xml, obj); */ 
5691: /* MUTANT (negate) */    if(! (!xml))
5694: /* MUTANT (del_stmt) */ /*     nsobj = CallConstructorFunction(cx, obj, &js_NamespaceClass.base, 1, argv); */ 
5694: /* MUTANT (rep_const) */    nsobj = CallConstructorFunction(cx, obj, &js_NamespaceClass.base, 0, argv);
5694: /* MUTANT (rep_const) */    nsobj = CallConstructorFunction(cx, obj, &js_NamespaceClass.base, -1, argv);
5694: /* MUTANT (rep_const) */    nsobj = CallConstructorFunction(cx, obj, &js_NamespaceClass.base, ((1)+1), argv);
5695: /* MUTANT (negate) */    if(! (!nsobj))
5697: /* MUTANT (del_stmt) */ /*     argv[0] = OBJECT_TO_JSVAL(nsobj); */ 
5697: /* MUTANT (rep_const) */    argv[1] = OBJECT_TO_JSVAL(nsobj);
5697: /* MUTANT (rep_const) */    argv[-1] = OBJECT_TO_JSVAL(nsobj);
5699: /* MUTANT (del_stmt) */ /*     ns = (JSXMLNamespace *) JS_GetPrivate(cx, nsobj); */ 
5700: /* MUTANT (negate) */    if(! (!AddInScopeNamespace(cx, xml, ns)))
5702: /* MUTANT (del_stmt) */ /*     ns->declared = JS_TRUE; */ 
5703: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
5704: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
5711: /* MUTANT (del_stmt) */ /*     JSXML *xml, *vxml; */ 
5712: /* MUTANT (del_stmt) */ /*     jsval name, v; */ 
5713: /* MUTANT (del_stmt) */ /*     JSObject *vobj; */ 
5715: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
5716: /* MUTANT (del_stmt) */ /*     xml = CHECK_COPY_ON_WRITE(cx, xml, obj); */ 
5717: /* MUTANT (negate) */    if(! (!xml))
5720: /* MUTANT (negate) */    if(! (!js_GetAnyName(cx, &name)))
5723: /* MUTANT (negate) */    if(! (!GetProperty(cx, obj, name, &v)))
5726: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!JSVAL_IS_PRIMITIVE(v)); */ 
5727: /* MUTANT (del_stmt) */ /*     vobj = JSVAL_TO_OBJECT(v); */ 
5728: /* MUTANT (del_stmt) */ /*     JS_ASSERT(OBJECT_IS_XML(cx, vobj)); */ 
5729: /* MUTANT (del_stmt) */ /*     vxml = (JSXML *) JS_GetPrivate(cx, vobj); */ 
5730: /* MUTANT (del_stmt) */ /*     JS_ASSERT(vxml->xml_class == JSXML_CLASS_LIST); */ 
5730: /* MUTANT (rep_op) */    JS_ASSERT(vxml->xml_class != JSXML_CLASS_LIST);
5732: /* MUTANT (negate) */    if(! (!IndexToIdVal(cx, vxml->xml_kids.length, &name)))
5734: /* MUTANT (rep_const) */    if (!PutProperty(cx, JSVAL_TO_OBJECT(v), name, &argv[1]))
5734: /* MUTANT (rep_const) */    if (!PutProperty(cx, JSVAL_TO_OBJECT(v), name, &argv[-1]))
5734: /* MUTANT (negate) */    if(! (!PutProperty(cx, JSVAL_TO_OBJECT(v), name, &argv[0])))
5737: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
5738: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
5746: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
5748: /* MUTANT (del_stmt) */ /*     qn = ToAttributeName(cx, argv[0]); */ 
5748: /* MUTANT (rep_const) */    qn = ToAttributeName(cx, argv[1]);
5748: /* MUTANT (rep_const) */    qn = ToAttributeName(cx, argv[-1]);
5749: /* MUTANT (negate) */    if(! (!qn))
5751: /* MUTANT (del_stmt) */ /*     argv[0] = OBJECT_TO_JSVAL(qn->object); */       /* local root */
5751: /* MUTANT (rep_const) */    argv[1] = OBJECT_TO_JSVAL(qn->object);      /* local root */
5751: /* MUTANT (rep_const) */    argv[-1] = OBJECT_TO_JSVAL(qn->object);      /* local root */
5752: /* MUTANT (del_stmt) */ /*     return GetProperty(cx, obj, argv[0], rval); */ 
5752: /* MUTANT (rep_const) */    return GetProperty(cx, obj, argv[1], rval);
5752: /* MUTANT (rep_const) */    return GetProperty(cx, obj, argv[-1], rval);
5760: /* MUTANT (del_stmt) */ /*     jsval name; */ 
5761: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
5762: /* MUTANT (del_stmt) */ /*     JSTempValueRooter tvr; */ 
5763: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
5765: /* MUTANT (del_stmt) */ /*     name = ATOM_KEY(cx->runtime->atomState.starAtom); */ 
5766: /* MUTANT (del_stmt) */ /*     qn = ToAttributeName(cx, name); */ 
5767: /* MUTANT (negate) */    if(! (!qn))
5769: /* MUTANT (del_stmt) */ /*     name = OBJECT_TO_JSVAL(qn->object); */ 
5770: /* MUTANT (del_stmt) */ /*     JS_PUSH_SINGLE_TEMP_ROOT(cx, name, &tvr); */ 
5771: /* MUTANT (del_stmt) */ /*     ok = GetProperty(cx, obj, name, rval); */ 
5772: /* MUTANT (del_stmt) */ /*     JS_POP_TEMP_ROOT(cx, &tvr); */ 
5773: /* MUTANT (del_stmt) */ /*     return ok; */ 
5781: /* MUTANT (del_stmt) */ /*     uint32 index; */ 
5782: /* MUTANT (del_stmt) */ /*     JSXML *kid; */ 
5783: /* MUTANT (del_stmt) */ /*     JSObject *kidobj; */ 
5786: /* MUTANT (del_stmt) */ /*     JS_ASSERT(xml->xml_class != JSXML_CLASS_LIST); */ 
5786: /* MUTANT (rep_op) */    JS_ASSERT(xml->xml_class == JSXML_CLASS_LIST);
5788: /* MUTANT (negate) */    if(! (js_IdIsIndex(name, &index))) {
5789: /* MUTANT (rep_op) */        if (index <= JSXML_LENGTH(xml)) {
5789: /* MUTANT (rep_op) */        if (index < JSXML_LENGTH(xml)) {
5789: /* MUTANT (rep_op) */        if (index > JSXML_LENGTH(xml)) {
5789: /* MUTANT (rep_op) */        if (index == JSXML_LENGTH(xml)) {
5789: /* MUTANT (rep_op) */        if (index != JSXML_LENGTH(xml)) {
5789: /* MUTANT (negate) */        if(! (index >= JSXML_LENGTH(xml))) {
5790: /* MUTANT (del_stmt) */ /*             *rval = JSVAL_VOID; */ 
5792: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, index, JSXML); */ 
5793: /* MUTANT (negate) */            if(! (!kid)) {
5794: /* MUTANT (del_stmt) */ /*                 *rval = JSVAL_VOID; */ 
5796: /* MUTANT (del_stmt) */ /*                 kidobj = js_GetXMLObject(cx, kid); */ 
5797: /* MUTANT (negate) */                if(! (!kidobj))
5799: /* MUTANT (del_stmt) */ /*                 *rval = OBJECT_TO_JSVAL(kidobj); */ 
5811: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list, *kid, *vxml; */ 
5812: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor; */ 
5813: /* MUTANT (del_stmt) */ /*     jsval name, v; */ 
5814: /* MUTANT (del_stmt) */ /*     JSObject *listobj, *kidobj; */ 
5816: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
5817: /* MUTANT (del_stmt) */ /*     name = argv[0]; */ 
5817: /* MUTANT (rep_const) */    name = argv[1];
5817: /* MUTANT (rep_const) */    name = argv[-1];
5818: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
5818: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
5820: /* MUTANT (del_stmt) */ /*         listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
5821: /* MUTANT (negate) */        if(! (!listobj))
5824: /* MUTANT (del_stmt) */ /*         *rval = OBJECT_TO_JSVAL(listobj); */ 
5825: /* MUTANT (del_stmt) */ /*         list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
5826: /* MUTANT (del_stmt) */ /*         list->xml_target = xml; */ 
5828: /* MUTANT (del_stmt) */ /*         XMLArrayCursorInit(&cursor, &xml->xml_kids); */ 
5829: /* MUTANT (rep_op) */        while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
5829: /* MUTANT (negate) */        while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
5830: /* MUTANT (del_stmt) */ /*             kidobj = js_GetXMLObject(cx, kid); */ 
5831: /* MUTANT (negate) */            if(! (!kidobj))
5833: /* MUTANT (negate) */            if(! (!xml_child_helper(cx, kidobj, kid, name, &v)))
5835: /* MUTANT (negate) */            if(! (JSVAL_IS_VOID(v))) {
5837: /* MUTANT (del_stmt) */ /*                 continue; */ 
5841: /* MUTANT (del_stmt) */ /*             vxml = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(v)); */ 
5842: /* MUTANT (rep_op) */            if ((!JSXML_HAS_KIDS(vxml) && vxml->xml_kids.length != 0) &&
5842: /* MUTANT (rep_op) */            if ((!JSXML_HAS_KIDS(vxml) || vxml->xml_kids.length == 0) &&
5842: /* MUTANT (rep_op) */            if ((!JSXML_HAS_KIDS(vxml) || vxml->xml_kids.length != 0) ||
5842: /* MUTANT (rep_const) */            if ((!JSXML_HAS_KIDS(vxml) || vxml->xml_kids.length != 1) &&
5842: /* MUTANT (rep_const) */            if ((!JSXML_HAS_KIDS(vxml) || vxml->xml_kids.length != -1) &&
5844: /* MUTANT (del_stmt) */ /*                 break; */ 
5848: /* MUTANT (del_stmt) */ /*         return !kid; */ 
5858: /* MUTANT (del_stmt) */ /*     JSXML *xml, *parent; */ 
5859: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
5861: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
5862: /* MUTANT (del_stmt) */ /*     parent = xml->parent; */ 
5863: /* MUTANT (rep_op) */    if (!parent && xml->xml_class == JSXML_CLASS_ATTRIBUTE) {
5863: /* MUTANT (rep_op) */    if (!parent || xml->xml_class != JSXML_CLASS_ATTRIBUTE) {
5863: /* MUTANT (negate) */    if(! (!parent || xml->xml_class == JSXML_CLASS_ATTRIBUTE)) {
5864: /* MUTANT (del_stmt) */ /*         *rval = DOUBLE_TO_JSVAL(cx->runtime->jsNaN); */ 
5865: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
5867: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(parent); i <= n; i++) {
5867: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(parent); i > n; i++) {
5867: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(parent); i >= n; i++) {
5867: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(parent); i == n; i++) {
5867: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(parent); i != n; i++) {
5867: /* MUTANT (rep_op) */    for (i = 0, n = JSXML_LENGTH(parent); i < n; i--) {
5867: /* MUTANT (rep_const) */    for (i = 1, n = JSXML_LENGTH(parent); i < n; i++) {
5867: /* MUTANT (rep_const) */    for (i = -1, n = JSXML_LENGTH(parent); i < n; i++) {
5868: /* MUTANT (rep_op) */        if (XMLARRAY_MEMBER(&parent->xml_kids, i, JSXML) != xml)
5868: /* MUTANT (negate) */        if(! (XMLARRAY_MEMBER(&parent->xml_kids, i, JSXML) == xml))
5871: /* MUTANT (rep_op) */    JS_ASSERT(i <= n);
5871: /* MUTANT (rep_op) */    JS_ASSERT(i > n);
5871: /* MUTANT (rep_op) */    JS_ASSERT(i >= n);
5871: /* MUTANT (rep_op) */    JS_ASSERT(i == n);
5871: /* MUTANT (rep_op) */    JS_ASSERT(i != n);
5872: /* MUTANT (del_stmt) */ /*     return js_NewNumberValue(cx, i, rval); */ 
5880: /* MUTANT (del_stmt) */ /*     jsval name; */ 
5882: /* MUTANT (del_stmt) */ /*     name = ATOM_KEY(cx->runtime->atomState.starAtom); */ 
5883: /* MUTANT (del_stmt) */ /*     return GetProperty(cx, obj, name, rval); */ 
5891: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list, *kid, *vxml; */ 
5892: /* MUTANT (del_stmt) */ /*     JSObject *listobj, *kidobj; */ 
5893: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
5894: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
5895: /* MUTANT (del_stmt) */ /*     jsval v; */ 
5897: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
5898: /* MUTANT (del_stmt) */ /*     listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
5899: /* MUTANT (negate) */    if(! (!listobj))
5902: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(listobj); */ 
5903: /* MUTANT (del_stmt) */ /*     list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
5904: /* MUTANT (del_stmt) */ /*     list->xml_target = xml; */ 
5906: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
5908: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
5908: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
5910: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i <= n; i++) {
5910: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i > n; i++) {
5910: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i >= n; i++) {
5910: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i == n; i++) {
5910: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i != n; i++) {
5910: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i < n; i--) {
5910: /* MUTANT (rep_const) */        for (i = 1, n = JSXML_LENGTH(xml); i < n; i++) {
5910: /* MUTANT (rep_const) */        for (i = -1, n = JSXML_LENGTH(xml); i < n; i++) {
5911: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
5912: /* MUTANT (rep_op) */            if (kid || kid->xml_class == JSXML_CLASS_ELEMENT) {
5912: /* MUTANT (rep_op) */            if (kid && kid->xml_class != JSXML_CLASS_ELEMENT) {
5912: /* MUTANT (negate) */            if(! (kid && kid->xml_class == JSXML_CLASS_ELEMENT)) {
5913: /* MUTANT (del_stmt) */ /*                 ok = JS_EnterLocalRootScope(cx); */ 
5914: /* MUTANT (negate) */                if(! (!ok))
5916: /* MUTANT (del_stmt) */ /*                 kidobj = js_GetXMLObject(cx, kid); */ 
5920: /* MUTANT (del_stmt) */ /*                 JS_LeaveLocalRootScope(cx); */ 
5921: /* MUTANT (negate) */                if(! (!ok))
5923: /* MUTANT (del_stmt) */ /*                 vxml = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(v)); */ 
5924: /* MUTANT (rep_op) */                if (JSXML_LENGTH(vxml) == 0) {
5924: /* MUTANT (rep_const) */                if (JSXML_LENGTH(vxml) != 1) {
5924: /* MUTANT (rep_const) */                if (JSXML_LENGTH(vxml) != -1) {
5924: /* MUTANT (negate) */                if(! (JSXML_LENGTH(vxml) != 0)) {
5925: /* MUTANT (del_stmt) */ /*                     ok = Append(cx, list, vxml); */ 
5926: /* MUTANT (negate) */                    if(! (!ok))
5933: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i <= n; i++) {
5933: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i > n; i++) {
5933: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i >= n; i++) {
5933: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i == n; i++) {
5933: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i != n; i++) {
5933: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i < n; i--) {
5933: /* MUTANT (rep_const) */        for (i = 1, n = JSXML_LENGTH(xml); i < n; i++) {
5933: /* MUTANT (rep_const) */        for (i = -1, n = JSXML_LENGTH(xml); i < n; i++) {
5934: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
5935: /* MUTANT (rep_op) */            if (kid || kid->xml_class == JSXML_CLASS_COMMENT) {
5935: /* MUTANT (rep_op) */            if (kid && kid->xml_class != JSXML_CLASS_COMMENT) {
5935: /* MUTANT (negate) */            if(! (kid && kid->xml_class == JSXML_CLASS_COMMENT)) {
5936: /* MUTANT (del_stmt) */ /*                 ok = Append(cx, list, kid); */ 
5937: /* MUTANT (negate) */                if(! (!ok))
5951: /* MUTANT (del_stmt) */ /*     JSXML *xml, *kid; */ 
5952: /* MUTANT (del_stmt) */ /*     jsval value; */ 
5953: /* MUTANT (del_stmt) */ /*     JSBool eq; */ 
5954: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor; */ 
5955: /* MUTANT (del_stmt) */ /*     JSObject *kidobj; */ 
5957: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
5958: /* MUTANT (del_stmt) */ /*     value = argv[0]; */ 
5958: /* MUTANT (rep_const) */    value = argv[1];
5958: /* MUTANT (rep_const) */    value = argv[-1];
5959: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
5959: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
5960: /* MUTANT (del_stmt) */ /*         eq = JS_FALSE; */ 
5961: /* MUTANT (del_stmt) */ /*         XMLArrayCursorInit(&cursor, &xml->xml_kids); */ 
5962: /* MUTANT (rep_op) */        while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
5962: /* MUTANT (negate) */        while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
5963: /* MUTANT (del_stmt) */ /*             kidobj = js_GetXMLObject(cx, kid); */ 
5964: /* MUTANT (rep_op) */            if (!kidobj && !xml_equality(cx, kidobj, value, &eq))
5964: /* MUTANT (negate) */            if(! (!kidobj || !xml_equality(cx, kidobj, value, &eq)))
5966: /* MUTANT (negate) */            if(! (eq))
5970: /* MUTANT (negate) */        if(! (kid))
5973: /* MUTANT (negate) */        if(! (!xml_equality(cx, obj, value, &eq)))
5977: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
5984: /* MUTANT (del_stmt) */ /*     JSXML *xml, *copy; */ 
5986: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
5987: /* MUTANT (del_stmt) */ /*     copy = DeepCopy(cx, xml, NULL, 0); */ 
5987: /* MUTANT (rep_const) */    copy = DeepCopy(cx, xml, NULL, 1);
5987: /* MUTANT (rep_const) */    copy = DeepCopy(cx, xml, NULL, -1);
5988: /* MUTANT (negate) */    if(! (!copy))
5990: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(copy->object); */ 
5991: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
5999: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list; */ 
6000: /* MUTANT (del_stmt) */ /*     jsval name; */ 
6002: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6003: /* MUTANT (del_stmt) */ /*     name = (argc == 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0]; */ 
6003: /* MUTANT (rep_op) */    name = (argc != 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0];
6003: /* MUTANT (rep_const) */    name = (argc == 1) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0];
6003: /* MUTANT (rep_const) */    name = (argc == -1) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0];
6003: /* MUTANT (rep_const) */    name = (argc == 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[1];
6003: /* MUTANT (rep_const) */    name = (argc == 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[-1];
6004: /* MUTANT (del_stmt) */ /*     list = Descendants(cx, xml, name); */ 
6005: /* MUTANT (negate) */    if(! (!list))
6007: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(list->object); */ 
6008: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6016: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list, *kid, *vxml; */ 
6017: /* MUTANT (del_stmt) */ /*     jsval name, v; */ 
6018: /* MUTANT (del_stmt) */ /*     JSXMLQName *nameqn; */ 
6019: /* MUTANT (del_stmt) */ /*     jsid funid; */ 
6020: /* MUTANT (del_stmt) */ /*     JSObject *listobj, *kidobj; */ 
6021: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
6022: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor; */ 
6023: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
6025: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6026: /* MUTANT (del_stmt) */ /*     name = (argc == 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0]; */ 
6026: /* MUTANT (rep_op) */    name = (argc != 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0];
6026: /* MUTANT (rep_const) */    name = (argc == 1) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0];
6026: /* MUTANT (rep_const) */    name = (argc == -1) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0];
6026: /* MUTANT (rep_const) */    name = (argc == 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[1];
6026: /* MUTANT (rep_const) */    name = (argc == 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[-1];
6027: /* MUTANT (del_stmt) */ /*     nameqn = ToXMLName(cx, name, &funid); */ 
6028: /* MUTANT (negate) */    if(! (!nameqn))
6030: /* MUTANT (del_stmt) */ /*     argv[0] = OBJECT_TO_JSVAL(nameqn->object); */ 
6030: /* MUTANT (rep_const) */    argv[1] = OBJECT_TO_JSVAL(nameqn->object);
6030: /* MUTANT (rep_const) */    argv[-1] = OBJECT_TO_JSVAL(nameqn->object);
6032: /* MUTANT (del_stmt) */ /*     listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
6033: /* MUTANT (negate) */    if(! (!listobj))
6035: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(listobj); */ 
6036: /* MUTANT (negate) */    if(! (funid))
6039: /* MUTANT (del_stmt) */ /*     list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
6040: /* MUTANT (del_stmt) */ /*     list->xml_target = xml; */ 
6041: /* MUTANT (del_stmt) */ /*     list->xml_targetprop = nameqn; */ 
6042: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
6044: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
6044: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
6046: /* MUTANT (del_stmt) */ /*         XMLArrayCursorInit(&cursor, &xml->xml_kids); */ 
6047: /* MUTANT (rep_op) */        while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
6047: /* MUTANT (negate) */        while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
6048: /* MUTANT (rep_op) */            if (kid->xml_class != JSXML_CLASS_ELEMENT) {
6048: /* MUTANT (negate) */            if(! (kid->xml_class == JSXML_CLASS_ELEMENT)) {
6049: /* MUTANT (del_stmt) */ /*                 ok = JS_EnterLocalRootScope(cx); */ 
6050: /* MUTANT (negate) */                if(! (!ok))
6052: /* MUTANT (del_stmt) */ /*                 kidobj = js_GetXMLObject(cx, kid); */ 
6056: /* MUTANT (del_stmt) */ /*                 JS_LeaveLocalRootScope(cx); */ 
6057: /* MUTANT (negate) */                if(! (!ok))
6059: /* MUTANT (del_stmt) */ /*                 vxml = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(v)); */ 
6060: /* MUTANT (rep_op) */                if (JSXML_LENGTH(vxml) == 0) {
6060: /* MUTANT (rep_const) */                if (JSXML_LENGTH(vxml) != 1) {
6060: /* MUTANT (rep_const) */                if (JSXML_LENGTH(vxml) != -1) {
6060: /* MUTANT (negate) */                if(! (JSXML_LENGTH(vxml) != 0)) {
6061: /* MUTANT (del_stmt) */ /*                     ok = Append(cx, list, vxml); */ 
6062: /* MUTANT (negate) */                    if(! (!ok))
6069: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i <= n; i++) {
6069: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i > n; i++) {
6069: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i >= n; i++) {
6069: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i == n; i++) {
6069: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i != n; i++) {
6069: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i < n; i--) {
6069: /* MUTANT (rep_const) */        for (i = 1, n = JSXML_LENGTH(xml); i < n; i++) {
6069: /* MUTANT (rep_const) */        for (i = -1, n = JSXML_LENGTH(xml); i < n; i++) {
6070: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
6071: /* MUTANT (rep_op) */            if (kid || kid->xml_class == JSXML_CLASS_ELEMENT &&
6071: /* MUTANT (rep_op) */            if (kid && kid->xml_class != JSXML_CLASS_ELEMENT &&
6071: /* MUTANT (rep_op) */            if (kid && kid->xml_class == JSXML_CLASS_ELEMENT ||
6073: /* MUTANT (del_stmt) */ /*                 ok = Append(cx, list, kid); */ 
6074: /* MUTANT (negate) */                if(! (!ok))
6088: /* MUTANT (del_stmt) */ /*     jsval name; */ 
6089: /* MUTANT (del_stmt) */ /*     JSObject *pobj; */ 
6090: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
6092: /* MUTANT (negate) */    if(! (!JS_InstanceOf(cx, obj, &js_XMLClass, argv)))
6095: /* MUTANT (del_stmt) */ /*     name = argv[0]; */ 
6095: /* MUTANT (rep_const) */    name = argv[1];
6095: /* MUTANT (rep_const) */    name = argv[-1];
6096: /* MUTANT (negate) */    if(! (!HasProperty(cx, obj, name, &pobj, &prop)))
6098: /* MUTANT (negate) */    if(! (!prop)) {
6103: /* MUTANT (del_stmt) */ /*     *rval = JSVAL_TRUE; */ 
6104: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6112: /* MUTANT (del_stmt) */ /*     JSXML *xml, *kid; */ 
6113: /* MUTANT (del_stmt) */ /*     JSObject *kidobj; */ 
6114: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
6116: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6124: /* MUTANT (del_stmt) */ /*         break; */ 
6126: /* MUTANT (rep_op) */        if (xml->xml_kids.length != 0) {
6126: /* MUTANT (rep_const) */        if (xml->xml_kids.length == 1) {
6126: /* MUTANT (rep_const) */        if (xml->xml_kids.length == -1) {
6126: /* MUTANT (negate) */        if(! (xml->xml_kids.length == 0)) {
6127: /* MUTANT (del_stmt) */ /*             *rval = JSVAL_TRUE; */ 
6128: /* MUTANT (rep_op) */        } else if (xml->xml_kids.length != 1) {
6128: /* MUTANT (rep_const) */        } else if (xml->xml_kids.length == 0) {
6128: /* MUTANT (rep_const) */        } else if (xml->xml_kids.length == -1) {
6128: /* MUTANT (rep_const) */        } else if (xml->xml_kids.length == ((1)+1)) {
6128: /* MUTANT (negate) */        } else if(! (xml->xml_kids.length == 1)) {
6129: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, 0, JSXML); */ 
6129: /* MUTANT (rep_const) */            kid = XMLARRAY_MEMBER(&xml->xml_kids, 1, JSXML);
6129: /* MUTANT (rep_const) */            kid = XMLARRAY_MEMBER(&xml->xml_kids, -1, JSXML);
6130: /* MUTANT (negate) */            if(! (kid)) {
6131: /* MUTANT (del_stmt) */ /*                 kidobj = js_GetXMLObject(cx, kid); */ 
6132: /* MUTANT (negate) */                if(! (!kidobj))
6134: /* MUTANT (del_stmt) */ /*                 obj = kidobj; */ 
6135: /* MUTANT (del_stmt) */ /*                 xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
6136: /* MUTANT (del_stmt) */ /*                 goto again; */ 
6142: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i <= n; i++) {
6142: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i > n; i++) {
6142: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i >= n; i++) {
6142: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i == n; i++) {
6142: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i != n; i++) {
6142: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i < n; i--) {
6142: /* MUTANT (rep_const) */        for (i = 1, n = xml->xml_kids.length; i < n; i++) {
6142: /* MUTANT (rep_const) */        for (i = -1, n = xml->xml_kids.length; i < n; i++) {
6143: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
6144: /* MUTANT (rep_op) */            if (kid || kid->xml_class == JSXML_CLASS_ELEMENT) {
6144: /* MUTANT (rep_op) */            if (kid && kid->xml_class != JSXML_CLASS_ELEMENT) {
6144: /* MUTANT (negate) */            if(! (kid && kid->xml_class == JSXML_CLASS_ELEMENT)) {
6145: /* MUTANT (del_stmt) */ /*                 *rval = JSVAL_TRUE; */ 
6146: /* MUTANT (del_stmt) */ /*                 break; */ 
6159: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6161: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6162: /* MUTANT (del_stmt) */ /*     *rval = BOOLEAN_TO_JSVAL(HasSimpleContent(xml)); */ 
6163: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6167: /* MUTANT (del_stmt) */ /*     JSTempValueRooter   tvr; */ 
6168: /* MUTANT (del_stmt) */ /*     JSXMLArray          array; */ 
6169: /* MUTANT (del_stmt) */ /*     jsval               value; */   /* extra root for temporaries */
6170: /* MUTANT (del_stmt) */ /* } JSTempRootedNSArray; */ 
6175: /* MUTANT (del_stmt) */ /*     JSTempRootedNSArray *tmp = (JSTempRootedNSArray *)tvr; */ 
6180: /* MUTANT (del_stmt) */ /*     XMLArrayCursorMark(cx, tmp->array.cursors); */ 
6181: /* MUTANT (negate) */    if(! (JSVAL_IS_GCTHING(tmp->value)))
6188: /* MUTANT (del_stmt) */ /*     XMLArrayInit(cx, &tmp->array, 0); */ 
6188: /* MUTANT (rep_const) */    XMLArrayInit(cx, &tmp->array, 1);
6188: /* MUTANT (rep_const) */    XMLArrayInit(cx, &tmp->array, -1);
6189: /* MUTANT (del_stmt) */ /*     tmp->value = JSVAL_NULL; */ 
6190: /* MUTANT (del_stmt) */ /*     JS_PUSH_TEMP_ROOT_MARKER(cx, mark_temp_ns_array, &tmp->tvr); */ 
6196: /* MUTANT (del_stmt) */ /*     JS_ASSERT(tmp->tvr.u.marker == mark_temp_ns_array); */ 
6196: /* MUTANT (rep_op) */    JS_ASSERT(tmp->tvr.u.marker != mark_temp_ns_array);
6197: /* MUTANT (del_stmt) */ /*     JS_POP_TEMP_ROOT(cx, &tmp->tvr); */ 
6198: /* MUTANT (del_stmt) */ /*     XMLArrayFinish(cx, &tmp->array); */ 
6208: /* MUTANT (del_stmt) */ /*     JSObject *arrayobj; */ 
6209: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
6210: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
6211: /* MUTANT (del_stmt) */ /*     JSObject *nsobj; */ 
6213: /* MUTANT (del_stmt) */ /*     arrayobj = js_NewArrayObject(cx, 0, NULL); */ 
6213: /* MUTANT (rep_const) */    arrayobj = js_NewArrayObject(cx, 1, NULL);
6213: /* MUTANT (rep_const) */    arrayobj = js_NewArrayObject(cx, -1, NULL);
6214: /* MUTANT (negate) */    if(! (!arrayobj))
6216: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(arrayobj); */ 
6217: /* MUTANT (rep_op) */    for (i = 0, n = tmp->array.length; i <= n; i++) {
6217: /* MUTANT (rep_op) */    for (i = 0, n = tmp->array.length; i > n; i++) {
6217: /* MUTANT (rep_op) */    for (i = 0, n = tmp->array.length; i >= n; i++) {
6217: /* MUTANT (rep_op) */    for (i = 0, n = tmp->array.length; i == n; i++) {
6217: /* MUTANT (rep_op) */    for (i = 0, n = tmp->array.length; i != n; i++) {
6217: /* MUTANT (rep_op) */    for (i = 0, n = tmp->array.length; i < n; i--) {
6217: /* MUTANT (rep_const) */    for (i = 1, n = tmp->array.length; i < n; i++) {
6217: /* MUTANT (rep_const) */    for (i = -1, n = tmp->array.length; i < n; i++) {
6218: /* MUTANT (del_stmt) */ /*         ns = XMLARRAY_MEMBER(&tmp->array, i, JSXMLNamespace); */ 
6219: /* MUTANT (negate) */        if(! (!ns))
6221: /* MUTANT (del_stmt) */ /*         nsobj = js_GetXMLNamespaceObject(cx, ns); */ 
6222: /* MUTANT (negate) */        if(! (!nsobj))
6224: /* MUTANT (del_stmt) */ /*         tmp->value = OBJECT_TO_JSVAL(nsobj); */ 
6225: /* MUTANT (negate) */        if(! (!OBJ_SET_PROPERTY(cx, arrayobj, INT_TO_JSID(i), &tmp->value)))
6234: /* MUTANT (del_stmt) */ /*     uint32 length, i, j, n; */ 
6235: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns, *ns2; */ 
6237: /* MUTANT (del_stmt) */ /*     length = nsarray->length; */ 
6239: /* MUTANT (rep_op) */        if (xml->xml_class == JSXML_CLASS_ELEMENT)
6239: /* MUTANT (negate) */        if(! (xml->xml_class != JSXML_CLASS_ELEMENT))
6241: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i <= n; i++) {
6241: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i > n; i++) {
6241: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i >= n; i++) {
6241: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i == n; i++) {
6241: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i != n; i++) {
6241: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_namespaces.length; i < n; i--) {
6241: /* MUTANT (rep_const) */        for (i = 1, n = xml->xml_namespaces.length; i < n; i++) {
6241: /* MUTANT (rep_const) */        for (i = -1, n = xml->xml_namespaces.length; i < n; i++) {
6242: /* MUTANT (del_stmt) */ /*             ns = XMLARRAY_MEMBER(&xml->xml_namespaces, i, JSXMLNamespace); */ 
6243: /* MUTANT (negate) */            if(! (!ns))
6246: /* MUTANT (rep_op) */            for (j = 0; j <= length; j++) {
6246: /* MUTANT (rep_op) */            for (j = 0; j > length; j++) {
6246: /* MUTANT (rep_op) */            for (j = 0; j >= length; j++) {
6246: /* MUTANT (rep_op) */            for (j = 0; j == length; j++) {
6246: /* MUTANT (rep_op) */            for (j = 0; j != length; j++) {
6246: /* MUTANT (rep_op) */            for (j = 0; j < length; j--) {
6246: /* MUTANT (rep_const) */            for (j = 1; j < length; j++) {
6246: /* MUTANT (rep_const) */            for (j = -1; j < length; j++) {
6247: /* MUTANT (del_stmt) */ /*                 ns2 = XMLARRAY_MEMBER(nsarray, j, JSXMLNamespace); */ 
6248: /* MUTANT (rep_op) */                if (ns2 ||
6249: /* MUTANT (rep_op) */                    ((ns2->prefix || ns->prefix)
6252: /* MUTANT (del_stmt) */ /*                     break; */ 
6256: /* MUTANT (rep_op) */            if (j != length) {
6256: /* MUTANT (negate) */            if(! (j == length)) {
6257: /* MUTANT (negate) */                if(! (!XMLARRAY_APPEND(cx, nsarray, ns)))
6259: /* MUTANT (del_stmt) */ /*                 ++length; */ 
6259: /* MUTANT (rep_op) */                --length;
6262: /* MUTANT (rep_op) */    } while ((xml = xml->parent) == NULL);
6262: /* MUTANT (negate) */    } while(! ((xml = xml->parent) != NULL));
6263: /* MUTANT (del_stmt) */ /*     JS_ASSERT(length == nsarray->length); */ 
6263: /* MUTANT (rep_op) */    JS_ASSERT(length != nsarray->length);
6265: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6272: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6273: /* MUTANT (del_stmt) */ /*     JSTempRootedNSArray namespaces; */ 
6274: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
6276: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6278: /* MUTANT (del_stmt) */ /*     InitTempNSArray(cx, &namespaces); */ 
6279: /* MUTANT (rep_op) */    ok = FindInScopeNamespaces(cx, xml, &namespaces.array) ||
6281: /* MUTANT (del_stmt) */ /*     FinishTempNSArray(cx, &namespaces); */ 
6282: /* MUTANT (del_stmt) */ /*     return ok; */ 
6289: /* MUTANT (del_stmt) */ /*     JSXML *xml, *kid; */ 
6290: /* MUTANT (del_stmt) */ /*     jsval arg; */ 
6291: /* MUTANT (del_stmt) */ /*     uint32 i; */ 
6293: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6294: /* MUTANT (negate) */    if(! (!JSXML_HAS_KIDS(xml)))
6297: /* MUTANT (del_stmt) */ /*     arg = argv[0]; */ 
6297: /* MUTANT (rep_const) */    arg = argv[1];
6297: /* MUTANT (rep_const) */    arg = argv[-1];
6298: /* MUTANT (negate) */    if(! (JSVAL_IS_NULL(arg))) {
6299: /* MUTANT (del_stmt) */ /*         kid = NULL; */ 
6300: /* MUTANT (del_stmt) */ /*         i = 0; */ 
6300: /* MUTANT (rep_const) */        i = 1;
6300: /* MUTANT (rep_const) */        i = -1;
6302: /* MUTANT (negate) */        if(! (!VALUE_IS_XML(cx, arg)))
6304: /* MUTANT (del_stmt) */ /*         kid = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(arg)); */ 
6305: /* MUTANT (del_stmt) */ /*         i = XMLARRAY_FIND_MEMBER(&xml->xml_kids, kid, NULL); */ 
6306: /* MUTANT (rep_op) */        if (i != XML_NOT_FOUND)
6306: /* MUTANT (negate) */        if(! (i == XML_NOT_FOUND))
6308: /* MUTANT (del_stmt) */ /*         ++i; */ 
6308: /* MUTANT (rep_op) */        --i;
6312: /* MUTANT (negate) */    if(! (!xml))
6314: /* MUTANT (rep_const) */    if (!Insert(cx, xml, i, argv[0]))
6314: /* MUTANT (rep_const) */    if (!Insert(cx, xml, i, argv[-1]))
6314: /* MUTANT (rep_const) */    if (!Insert(cx, xml, i, argv[((1)+1)]))
6314: /* MUTANT (negate) */    if(! (!Insert(cx, xml, i, argv[1])))
6316: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
6317: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6324: /* MUTANT (del_stmt) */ /*     JSXML *xml, *kid; */ 
6325: /* MUTANT (del_stmt) */ /*     jsval arg; */ 
6326: /* MUTANT (del_stmt) */ /*     uint32 i; */ 
6328: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6329: /* MUTANT (negate) */    if(! (!JSXML_HAS_KIDS(xml)))
6332: /* MUTANT (del_stmt) */ /*     arg = argv[0]; */ 
6332: /* MUTANT (rep_const) */    arg = argv[1];
6332: /* MUTANT (rep_const) */    arg = argv[-1];
6333: /* MUTANT (negate) */    if(! (JSVAL_IS_NULL(arg))) {
6334: /* MUTANT (del_stmt) */ /*         kid = NULL; */ 
6335: /* MUTANT (del_stmt) */ /*         i = xml->xml_kids.length; */ 
6337: /* MUTANT (negate) */        if(! (!VALUE_IS_XML(cx, arg)))
6339: /* MUTANT (del_stmt) */ /*         kid = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(arg)); */ 
6340: /* MUTANT (del_stmt) */ /*         i = XMLARRAY_FIND_MEMBER(&xml->xml_kids, kid, NULL); */ 
6341: /* MUTANT (rep_op) */        if (i != XML_NOT_FOUND)
6341: /* MUTANT (negate) */        if(! (i == XML_NOT_FOUND))
6346: /* MUTANT (negate) */    if(! (!xml))
6348: /* MUTANT (rep_const) */    if (!Insert(cx, xml, i, argv[0]))
6348: /* MUTANT (rep_const) */    if (!Insert(cx, xml, i, argv[-1]))
6348: /* MUTANT (rep_const) */    if (!Insert(cx, xml, i, argv[((1)+1)]))
6348: /* MUTANT (negate) */    if(! (!Insert(cx, xml, i, argv[1])))
6350: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
6351: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6358: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6360: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6361: /* MUTANT (rep_op) */    if (xml->xml_class == JSXML_CLASS_LIST) {
6361: /* MUTANT (negate) */    if(! (xml->xml_class != JSXML_CLASS_LIST)) {
6362: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_ONE; */ 
6364: /* MUTANT (negate) */        if(! (!js_NewNumberValue(cx, xml->xml_kids.length, rval)))
6374: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6376: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6377: /* MUTANT (del_stmt) */ /*     *rval = xml->name ? STRING_TO_JSVAL(xml->name->localName) : JSVAL_NULL; */ 
6378: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6384: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6385: /* MUTANT (del_stmt) */ /*     JSObject *nameobj; */ 
6387: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6388: /* MUTANT (negate) */    if(! (!xml->name)) {
6389: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_NULL; */ 
6391: /* MUTANT (del_stmt) */ /*         nameobj = js_GetXMLQNameObject(cx, xml->name); */ 
6392: /* MUTANT (negate) */        if(! (!nameobj))
6394: /* MUTANT (del_stmt) */ /*         *rval = OBJECT_TO_JSVAL(nameobj); */ 
6403: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6404: /* MUTANT (del_stmt) */ /*     JSString *prefix; */ 
6405: /* MUTANT (del_stmt) */ /*     JSTempRootedNSArray inScopeNSes; */ 
6406: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
6407: /* MUTANT (del_stmt) */ /*     jsuint i, length; */ 
6408: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
6409: /* MUTANT (del_stmt) */ /*     JSObject *nsobj; */ 
6411: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6412: /* MUTANT (rep_op) */    if (argc != 0 &&
6412: /* MUTANT (rep_op) */    if (argc == 0 ||
6412: /* MUTANT (rep_const) */    if (argc == 1 &&
6412: /* MUTANT (rep_const) */    if (argc == -1 &&
6413: /* MUTANT (rep_op) */        (xml->xml_class != JSXML_CLASS_TEXT ||
6413: /* MUTANT (rep_op) */        (xml->xml_class == JSXML_CLASS_TEXT &&
6414: /* MUTANT (rep_op) */         xml->xml_class != JSXML_CLASS_COMMENT ||
6414: /* MUTANT (rep_op) */         xml->xml_class == JSXML_CLASS_COMMENT &&
6415: /* MUTANT (rep_op) */         xml->xml_class != JSXML_CLASS_PROCESSING_INSTRUCTION)) {
6416: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_NULL; */ 
6417: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
6420: /* MUTANT (rep_op) */    if (argc != 0) {
6420: /* MUTANT (rep_const) */    if (argc == 1) {
6420: /* MUTANT (rep_const) */    if (argc == -1) {
6420: /* MUTANT (negate) */    if(! (argc == 0)) {
6421: /* MUTANT (del_stmt) */ /*         prefix = NULL; */ 
6423: /* MUTANT (del_stmt) */ /*         prefix = js_ValueToString(cx, argv[0]); */ 
6423: /* MUTANT (rep_const) */        prefix = js_ValueToString(cx, argv[1]);
6423: /* MUTANT (rep_const) */        prefix = js_ValueToString(cx, argv[-1]);
6424: /* MUTANT (negate) */        if(! (!prefix))
6426: /* MUTANT (del_stmt) */ /*         argv[0] = STRING_TO_JSVAL(prefix); */       /* local root */
6426: /* MUTANT (rep_const) */        argv[1] = STRING_TO_JSVAL(prefix);      /* local root */
6426: /* MUTANT (rep_const) */        argv[-1] = STRING_TO_JSVAL(prefix);      /* local root */
6431: /* MUTANT (del_stmt) */ /*     ok = FindInScopeNamespaces(cx, xml, &inScopeNSes.array); */ 
6432: /* MUTANT (negate) */    if(! (!ok))
6435: /* MUTANT (negate) */    if(! (!prefix)) {
6436: /* MUTANT (del_stmt) */ /*         ns = GetNamespace(cx, xml->name, &inScopeNSes.array); */ 
6437: /* MUTANT (negate) */        if(! (!ns)) {
6438: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
6439: /* MUTANT (del_stmt) */ /*             goto out; */ 
6442: /* MUTANT (del_stmt) */ /*         ns = NULL; */ 
6443: /* MUTANT (rep_op) */        for (i = 0, length = inScopeNSes.array.length; i <= length; i++) {
6443: /* MUTANT (rep_op) */        for (i = 0, length = inScopeNSes.array.length; i > length; i++) {
6443: /* MUTANT (rep_op) */        for (i = 0, length = inScopeNSes.array.length; i >= length; i++) {
6443: /* MUTANT (rep_op) */        for (i = 0, length = inScopeNSes.array.length; i == length; i++) {
6443: /* MUTANT (rep_op) */        for (i = 0, length = inScopeNSes.array.length; i != length; i++) {
6443: /* MUTANT (rep_op) */        for (i = 0, length = inScopeNSes.array.length; i < length; i--) {
6443: /* MUTANT (rep_const) */        for (i = 1, length = inScopeNSes.array.length; i < length; i++) {
6443: /* MUTANT (rep_const) */        for (i = -1, length = inScopeNSes.array.length; i < length; i++) {
6444: /* MUTANT (del_stmt) */ /*             ns = XMLARRAY_MEMBER(&inScopeNSes.array, i, JSXMLNamespace); */ 
6445: /* MUTANT (rep_op) */            if (ns || ns->prefix && !js_CompareStrings(ns->prefix, prefix))
6445: /* MUTANT (rep_op) */            if (ns && ns->prefix || !js_CompareStrings(ns->prefix, prefix))
6445: /* MUTANT (negate) */            if(! (ns && ns->prefix && !js_CompareStrings(ns->prefix, prefix)))
6447: /* MUTANT (del_stmt) */ /*             ns = NULL; */ 
6451: /* MUTANT (negate) */    if(! (!ns)) {
6452: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_VOID; */ 
6454: /* MUTANT (del_stmt) */ /*         nsobj = js_GetXMLNamespaceObject(cx, ns); */ 
6455: /* MUTANT (negate) */        if(! (!nsobj)) {
6456: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
6457: /* MUTANT (del_stmt) */ /*             goto out; */ 
6464: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6471: /* MUTANT (del_stmt) */ /*     JSXML *xml, *yml; */ 
6472: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
6473: /* MUTANT (del_stmt) */ /*     JSTempRootedNSArray ancestors, declared; */ 
6474: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
6475: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
6477: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6478: /* MUTANT (rep_op) */    if (JSXML_HAS_VALUE(xml) && xml->xml_class == JSXML_CLASS_LIST)
6478: /* MUTANT (rep_op) */    if (JSXML_HAS_VALUE(xml) || xml->xml_class != JSXML_CLASS_LIST)
6478: /* MUTANT (negate) */    if(! (JSXML_HAS_VALUE(xml) || xml->xml_class == JSXML_CLASS_LIST))
6482: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
6483: /* MUTANT (del_stmt) */ /*     InitTempNSArray(cx, &ancestors); */ 
6484: /* MUTANT (del_stmt) */ /*     InitTempNSArray(cx, &declared); */ 
6485: /* MUTANT (del_stmt) */ /*     yml = xml; */ 
6487: /* MUTANT (rep_op) */    while ((yml = yml->parent) == NULL) {
6487: /* MUTANT (negate) */    while(! ((yml = yml->parent) != NULL)) {
6488: /* MUTANT (del_stmt) */ /*         JS_ASSERT(yml->xml_class == JSXML_CLASS_ELEMENT); */ 
6488: /* MUTANT (rep_op) */        JS_ASSERT(yml->xml_class != JSXML_CLASS_ELEMENT);
6489: /* MUTANT (rep_op) */        for (i = 0, n = yml->xml_namespaces.length; i <= n; i++) {
6489: /* MUTANT (rep_op) */        for (i = 0, n = yml->xml_namespaces.length; i > n; i++) {
6489: /* MUTANT (rep_op) */        for (i = 0, n = yml->xml_namespaces.length; i >= n; i++) {
6489: /* MUTANT (rep_op) */        for (i = 0, n = yml->xml_namespaces.length; i == n; i++) {
6489: /* MUTANT (rep_op) */        for (i = 0, n = yml->xml_namespaces.length; i != n; i++) {
6489: /* MUTANT (rep_op) */        for (i = 0, n = yml->xml_namespaces.length; i < n; i--) {
6489: /* MUTANT (rep_const) */        for (i = 1, n = yml->xml_namespaces.length; i < n; i++) {
6489: /* MUTANT (rep_const) */        for (i = -1, n = yml->xml_namespaces.length; i < n; i++) {
6490: /* MUTANT (del_stmt) */ /*             ns = XMLARRAY_MEMBER(&yml->xml_namespaces, i, JSXMLNamespace); */ 
6491: /* MUTANT (rep_op) */            if (ns ||
6493: /* MUTANT (del_stmt) */ /*                 ok = XMLARRAY_APPEND(cx, &ancestors.array, ns); */ 
6494: /* MUTANT (negate) */                if(! (!ok))
6500: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_namespaces.length; i <= n; i++) {
6500: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_namespaces.length; i > n; i++) {
6500: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_namespaces.length; i >= n; i++) {
6500: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_namespaces.length; i == n; i++) {
6500: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_namespaces.length; i != n; i++) {
6500: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_namespaces.length; i < n; i--) {
6500: /* MUTANT (rep_const) */    for (i = 1, n = xml->xml_namespaces.length; i < n; i++) {
6500: /* MUTANT (rep_const) */    for (i = -1, n = xml->xml_namespaces.length; i < n; i++) {
6501: /* MUTANT (del_stmt) */ /*         ns = XMLARRAY_MEMBER(&xml->xml_namespaces, i, JSXMLNamespace); */ 
6502: /* MUTANT (negate) */        if(! (!ns))
6504: /* MUTANT (negate) */        if(! (!ns->declared))
6506: /* MUTANT (negate) */        if(! (!XMLARRAY_HAS_MEMBER(&ancestors.array, ns, namespace_match))) {
6507: /* MUTANT (del_stmt) */ /*             ok = XMLARRAY_APPEND(cx, &declared.array, ns); */ 
6508: /* MUTANT (negate) */            if(! (!ok))
6518: /* MUTANT (del_stmt) */ /*     FinishTempNSArray(cx, &ancestors); */ 
6519: /* MUTANT (del_stmt) */ /*     return ok; */ 
6523: /* MUTANT (del_stmt) */ /* static const char js_text_str[]      = "text"; */ 
6539: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6540: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
6542: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6543: /* MUTANT (del_stmt) */ /*     str = JS_InternString(cx, js_xml_class_str[xml->xml_class]); */ 
6544: /* MUTANT (negate) */    if(! (!str))
6546: /* MUTANT (del_stmt) */ /*     *rval = STRING_TO_JSVAL(str); */ 
6547: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6553: /* MUTANT (del_stmt) */ /*     jsval junk; */ 
6555: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST)
6555: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST))
6557: /* MUTANT (del_stmt) */ /*     return DeleteByIndex(cx, xml, id, &junk); */ 
6567: /* MUTANT (del_stmt) */ /*     const jschar *cp, *end; */ 
6569: /* MUTANT (del_stmt) */ /*     cp = JSSTRING_CHARS(str); */ 
6570: /* MUTANT (del_stmt) */ /*     end = cp + JSSTRING_LENGTH(str); */ 
6570: /* MUTANT (rep_op) */    end = cp - JSSTRING_LENGTH(str);
6570: /* MUTANT (rep_op) */    end = cp * JSSTRING_LENGTH(str);
6570: /* MUTANT (rep_op) */    end = cp % JSSTRING_LENGTH(str);
6571: /* MUTANT (rep_op) */    while (cp <= end) {
6571: /* MUTANT (rep_op) */    while (cp > end) {
6571: /* MUTANT (rep_op) */    while (cp >= end) {
6571: /* MUTANT (rep_op) */    while (cp == end) {
6571: /* MUTANT (rep_op) */    while (cp != end) {
6571: /* MUTANT (negate) */    while(! (cp < end)) {
6572: /* MUTANT (negate) */        if(! (!JS_ISXMLSPACE(*cp)))
6574: /* MUTANT (del_stmt) */ /*         ++cp; */ 
6574: /* MUTANT (rep_op) */        --cp;
6584: /* MUTANT (del_stmt) */ /*     JSXML *xml, *kid, *kid2; */ 
6585: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
6586: /* MUTANT (del_stmt) */ /*     JSObject *kidobj; */ 
6587: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
6588: /* MUTANT (del_stmt) */ /*     jsval junk; */ 
6590: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6591: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
6592: /* MUTANT (negate) */    if(! (!JSXML_HAS_KIDS(xml)))
6595: /* MUTANT (del_stmt) */ /*     xml = CHECK_COPY_ON_WRITE(cx, xml, obj); */ 
6596: /* MUTANT (negate) */    if(! (!xml))
6599: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i <= n; i++) {
6599: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i > n; i++) {
6599: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i >= n; i++) {
6599: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i == n; i++) {
6599: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i != n; i++) {
6599: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i < n; i--) {
6599: /* MUTANT (rep_const) */    for (i = 1, n = xml->xml_kids.length; i < n; i++) {
6599: /* MUTANT (rep_const) */    for (i = -1, n = xml->xml_kids.length; i < n; i++) {
6600: /* MUTANT (del_stmt) */ /*         kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
6601: /* MUTANT (negate) */        if(! (!kid))
6603: /* MUTANT (rep_op) */        if (kid->xml_class != JSXML_CLASS_ELEMENT) {
6603: /* MUTANT (negate) */        if(! (kid->xml_class == JSXML_CLASS_ELEMENT)) {
6604: /* MUTANT (del_stmt) */ /*             kidobj = js_GetXMLObject(cx, kid); */ 
6605: /* MUTANT (rep_op) */            if (!kidobj && !xml_normalize(cx, kidobj, argc, argv, &junk))
6605: /* MUTANT (negate) */            if(! (!kidobj || !xml_normalize(cx, kidobj, argc, argv, &junk)))
6607: /* MUTANT (rep_op) */        } else if (kid->xml_class != JSXML_CLASS_TEXT) {
6607: /* MUTANT (negate) */        } else if(! (kid->xml_class == JSXML_CLASS_TEXT)) {
6608: /* MUTANT (rep_op) */            while (i - 1 < n &&
6608: /* MUTANT (rep_op) */            while (i * 1 < n &&
6608: /* MUTANT (rep_op) */            while (i % 1 < n &&
6608: /* MUTANT (rep_op) */            while (i + 1 <= n &&
6608: /* MUTANT (rep_op) */            while (i + 1 > n &&
6608: /* MUTANT (rep_op) */            while (i + 1 >= n &&
6608: /* MUTANT (rep_op) */            while (i + 1 == n &&
6608: /* MUTANT (rep_op) */            while (i + 1 != n &&
6608: /* MUTANT (rep_op) */            while (i + 1 < n ||
6608: /* MUTANT (rep_const) */            while (i + 0 < n &&
6608: /* MUTANT (rep_const) */            while (i + -1 < n &&
6608: /* MUTANT (rep_const) */            while (i + ((1)+1) < n &&
6609: /* MUTANT (rep_op) */                   (kid2 = XMLARRAY_MEMBER(&xml->xml_kids, i - 1, JSXML)) &&
6609: /* MUTANT (rep_op) */                   (kid2 = XMLARRAY_MEMBER(&xml->xml_kids, i * 1, JSXML)) &&
6609: /* MUTANT (rep_op) */                   (kid2 = XMLARRAY_MEMBER(&xml->xml_kids, i % 1, JSXML)) &&
6609: /* MUTANT (rep_op) */                   (kid2 = XMLARRAY_MEMBER(&xml->xml_kids, i + 1, JSXML)) ||
6609: /* MUTANT (rep_const) */                   (kid2 = XMLARRAY_MEMBER(&xml->xml_kids, i + 0, JSXML)) &&
6609: /* MUTANT (rep_const) */                   (kid2 = XMLARRAY_MEMBER(&xml->xml_kids, i + -1, JSXML)) &&
6609: /* MUTANT (rep_const) */                   (kid2 = XMLARRAY_MEMBER(&xml->xml_kids, i + ((1)+1), JSXML)) &&
6610: /* MUTANT (rep_op) */                   kid2->xml_class != JSXML_CLASS_TEXT) {
6611: /* MUTANT (del_stmt) */ /*                 str = js_ConcatStrings(cx, kid->xml_value, kid2->xml_value); */ 
6612: /* MUTANT (negate) */                if(! (!str))
6614: /* MUTANT (rep_op) */                if (!NormalizingDelete(cx, obj, xml, INT_TO_JSVAL(i - 1)))
6614: /* MUTANT (rep_op) */                if (!NormalizingDelete(cx, obj, xml, INT_TO_JSVAL(i * 1)))
6614: /* MUTANT (rep_op) */                if (!NormalizingDelete(cx, obj, xml, INT_TO_JSVAL(i % 1)))
6614: /* MUTANT (rep_const) */                if (!NormalizingDelete(cx, obj, xml, INT_TO_JSVAL(i + 0)))
6614: /* MUTANT (rep_const) */                if (!NormalizingDelete(cx, obj, xml, INT_TO_JSVAL(i + -1)))
6614: /* MUTANT (rep_const) */                if (!NormalizingDelete(cx, obj, xml, INT_TO_JSVAL(i + ((1)+1))))
6614: /* MUTANT (negate) */                if(! (!NormalizingDelete(cx, obj, xml, INT_TO_JSVAL(i + 1))))
6616: /* MUTANT (del_stmt) */ /*                 n = xml->xml_kids.length; */ 
6617: /* MUTANT (del_stmt) */ /*                 kid->xml_value = str; */ 
6619: /* MUTANT (rep_op) */            if (IS_EMPTY(kid->xml_value) && IsXMLSpace(kid->xml_value)) {
6619: /* MUTANT (negate) */            if(! (IS_EMPTY(kid->xml_value) || IsXMLSpace(kid->xml_value))) {
6620: /* MUTANT (negate) */                if(! (!NormalizingDelete(cx, obj, xml, INT_TO_JSVAL(i))))
6622: /* MUTANT (del_stmt) */ /*                 n = xml->xml_kids.length; */ 
6623: /* MUTANT (del_stmt) */ /*                 --i; */ 
6623: /* MUTANT (rep_op) */                ++i;
6635: /* MUTANT (del_stmt) */ /*     JSXML *xml, *parent, *kid; */ 
6636: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
6637: /* MUTANT (del_stmt) */ /*     JSObject *parentobj; */ 
6639: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6640: /* MUTANT (del_stmt) */ /*     parent = xml->parent; */ 
6641: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
6641: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
6642: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_VOID; */ 
6643: /* MUTANT (del_stmt) */ /*         n = xml->xml_kids.length; */ 
6644: /* MUTANT (rep_op) */        if (n != 0)
6644: /* MUTANT (rep_const) */        if (n == 1)
6644: /* MUTANT (rep_const) */        if (n == -1)
6644: /* MUTANT (negate) */        if(! (n == 0))
6647: /* MUTANT (del_stmt) */ /*         kid = XMLARRAY_MEMBER(&xml->xml_kids, 0, JSXML); */ 
6647: /* MUTANT (rep_const) */        kid = XMLARRAY_MEMBER(&xml->xml_kids, 1, JSXML);
6647: /* MUTANT (rep_const) */        kid = XMLARRAY_MEMBER(&xml->xml_kids, -1, JSXML);
6648: /* MUTANT (negate) */        if(! (!kid))
6650: /* MUTANT (del_stmt) */ /*         parent = kid->parent; */ 
6651: /* MUTANT (rep_op) */        for (i = 1; i <= n; i++) {
6651: /* MUTANT (rep_op) */        for (i = 1; i > n; i++) {
6651: /* MUTANT (rep_op) */        for (i = 1; i >= n; i++) {
6651: /* MUTANT (rep_op) */        for (i = 1; i == n; i++) {
6651: /* MUTANT (rep_op) */        for (i = 1; i != n; i++) {
6651: /* MUTANT (rep_op) */        for (i = 1; i < n; i--) {
6651: /* MUTANT (rep_const) */        for (i = 0; i < n; i++) {
6651: /* MUTANT (rep_const) */        for (i = -1; i < n; i++) {
6651: /* MUTANT (rep_const) */        for (i = ((1)+1); i < n; i++) {
6652: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
6653: /* MUTANT (rep_op) */            if (kid || kid->parent != parent)
6653: /* MUTANT (rep_op) */            if (kid && kid->parent == parent)
6653: /* MUTANT (negate) */            if(! (kid && kid->parent != parent))
6658: /* MUTANT (negate) */    if(! (!parent)) {
6659: /* MUTANT (del_stmt) */ /*         *rval = JSVAL_NULL; */ 
6660: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
6664: /* MUTANT (negate) */    if(! (!parentobj))
6666: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(parentobj); */ 
6667: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6675: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list, *kid, *vxml; */ 
6676: /* MUTANT (del_stmt) */ /*     jsval name, v; */ 
6677: /* MUTANT (del_stmt) */ /*     JSXMLQName *nameqn; */ 
6678: /* MUTANT (del_stmt) */ /*     jsid funid; */ 
6679: /* MUTANT (del_stmt) */ /*     JSObject *listobj, *kidobj; */ 
6680: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
6681: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor; */ 
6682: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
6684: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6685: /* MUTANT (del_stmt) */ /*     name = (argc == 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0]; */ 
6685: /* MUTANT (rep_op) */    name = (argc != 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0];
6685: /* MUTANT (rep_const) */    name = (argc == 1) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0];
6685: /* MUTANT (rep_const) */    name = (argc == -1) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[0];
6685: /* MUTANT (rep_const) */    name = (argc == 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[1];
6685: /* MUTANT (rep_const) */    name = (argc == 0) ? ATOM_KEY(cx->runtime->atomState.starAtom) : argv[-1];
6686: /* MUTANT (del_stmt) */ /*     nameqn = ToXMLName(cx, name, &funid); */ 
6687: /* MUTANT (negate) */    if(! (!nameqn))
6689: /* MUTANT (del_stmt) */ /*     argv[0] = OBJECT_TO_JSVAL(nameqn->object); */ 
6689: /* MUTANT (rep_const) */    argv[1] = OBJECT_TO_JSVAL(nameqn->object);
6689: /* MUTANT (rep_const) */    argv[-1] = OBJECT_TO_JSVAL(nameqn->object);
6691: /* MUTANT (del_stmt) */ /*     listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
6692: /* MUTANT (negate) */    if(! (!listobj))
6694: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(listobj); */ 
6695: /* MUTANT (negate) */    if(! (funid))
6698: /* MUTANT (del_stmt) */ /*     list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
6699: /* MUTANT (del_stmt) */ /*     list->xml_target = xml; */ 
6700: /* MUTANT (del_stmt) */ /*     list->xml_targetprop = nameqn; */ 
6701: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
6703: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
6703: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
6705: /* MUTANT (del_stmt) */ /*         XMLArrayCursorInit(&cursor, &xml->xml_kids); */ 
6706: /* MUTANT (rep_op) */        while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
6706: /* MUTANT (negate) */        while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
6707: /* MUTANT (rep_op) */            if (kid->xml_class != JSXML_CLASS_ELEMENT) {
6707: /* MUTANT (negate) */            if(! (kid->xml_class == JSXML_CLASS_ELEMENT)) {
6708: /* MUTANT (del_stmt) */ /*                 ok = JS_EnterLocalRootScope(cx); */ 
6709: /* MUTANT (negate) */                if(! (!ok))
6711: /* MUTANT (del_stmt) */ /*                 kidobj = js_GetXMLObject(cx, kid); */ 
6715: /* MUTANT (del_stmt) */ /*                 JS_LeaveLocalRootScope(cx); */ 
6716: /* MUTANT (negate) */                if(! (!ok))
6718: /* MUTANT (del_stmt) */ /*                 vxml = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(v)); */ 
6719: /* MUTANT (rep_op) */                if (JSXML_LENGTH(vxml) == 0) {
6719: /* MUTANT (rep_const) */                if (JSXML_LENGTH(vxml) != 1) {
6719: /* MUTANT (rep_const) */                if (JSXML_LENGTH(vxml) != -1) {
6719: /* MUTANT (negate) */                if(! (JSXML_LENGTH(vxml) != 0)) {
6720: /* MUTANT (del_stmt) */ /*                     ok = Append(cx, list, vxml); */ 
6721: /* MUTANT (negate) */                    if(! (!ok))
6729: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i <= n; i++) {
6729: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i > n; i++) {
6729: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i >= n; i++) {
6729: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i == n; i++) {
6729: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i != n; i++) {
6729: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i < n; i--) {
6729: /* MUTANT (rep_const) */        for (i = 1, n = JSXML_LENGTH(xml); i < n; i++) {
6729: /* MUTANT (rep_const) */        for (i = -1, n = JSXML_LENGTH(xml); i < n; i++) {
6730: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
6731: /* MUTANT (rep_op) */            if (kid || kid->xml_class == JSXML_CLASS_PROCESSING_INSTRUCTION &&
6731: /* MUTANT (rep_op) */            if (kid && kid->xml_class != JSXML_CLASS_PROCESSING_INSTRUCTION &&
6731: /* MUTANT (rep_op) */            if (kid && kid->xml_class == JSXML_CLASS_PROCESSING_INSTRUCTION ||
6732: /* MUTANT (rep_op) */                (IS_STAR(nameqn->localName) &&
6734: /* MUTANT (del_stmt) */ /*                 ok = Append(cx, list, kid); */ 
6735: /* MUTANT (negate) */                if(! (!ok))
6748: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6750: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6751: /* MUTANT (del_stmt) */ /*     xml = CHECK_COPY_ON_WRITE(cx, xml, obj); */ 
6752: /* MUTANT (negate) */    if(! (!xml))
6754: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
6755: /* MUTANT (del_stmt) */ /*     return Insert(cx, xml, 0, argv[0]); */ 
6755: /* MUTANT (rep_const) */    return Insert(cx, xml, 1, argv[0]);
6755: /* MUTANT (rep_const) */    return Insert(cx, xml, -1, argv[0]);
6755: /* MUTANT (rep_const) */    return Insert(cx, xml, 0, argv[1]);
6755: /* MUTANT (rep_const) */    return Insert(cx, xml, 0, argv[-1]);
6763: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6764: /* MUTANT (del_stmt) */ /*     jsval name; */ 
6765: /* MUTANT (del_stmt) */ /*     uint32 index; */ 
6767: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6768: /* MUTANT (del_stmt) */ /*     name = argv[0]; */ 
6768: /* MUTANT (rep_const) */    name = argv[1];
6768: /* MUTANT (rep_const) */    name = argv[-1];
6769: /* MUTANT (del_stmt) */ /*     *rval = JSVAL_FALSE; */ 
6770: /* MUTANT (negate) */    if(! (js_IdIsIndex(name, &index))) {
6771: /* MUTANT (rep_op) */        if (xml->xml_class != JSXML_CLASS_LIST) {
6771: /* MUTANT (negate) */        if(! (xml->xml_class == JSXML_CLASS_LIST)) {
6773: /* MUTANT (del_stmt) */ /*             *rval = BOOLEAN_TO_JSVAL(index < xml->xml_kids.length); */ 
6773: /* MUTANT (rep_op) */            *rval = BOOLEAN_TO_JSVAL(index <= xml->xml_kids.length);
6773: /* MUTANT (rep_op) */            *rval = BOOLEAN_TO_JSVAL(index > xml->xml_kids.length);
6773: /* MUTANT (rep_op) */            *rval = BOOLEAN_TO_JSVAL(index >= xml->xml_kids.length);
6773: /* MUTANT (rep_op) */            *rval = BOOLEAN_TO_JSVAL(index == xml->xml_kids.length);
6773: /* MUTANT (rep_op) */            *rval = BOOLEAN_TO_JSVAL(index != xml->xml_kids.length);
6776: /* MUTANT (del_stmt) */ /*             *rval = BOOLEAN_TO_JSVAL(index == 0); */ 
6776: /* MUTANT (rep_op) */            *rval = BOOLEAN_TO_JSVAL(index != 0);
6776: /* MUTANT (rep_const) */            *rval = BOOLEAN_TO_JSVAL(index == 1);
6776: /* MUTANT (rep_const) */            *rval = BOOLEAN_TO_JSVAL(index == -1);
6785: /* MUTANT (del_stmt) */ /*     const JSXMLNamespace *nsa = (const JSXMLNamespace *) a; */ 
6786: /* MUTANT (del_stmt) */ /*     const JSXMLNamespace *nsb = (const JSXMLNamespace *) b; */ 
6788: /* MUTANT (rep_op) */    if (nsa->prefix || nsb->prefix &&
6788: /* MUTANT (rep_op) */    if (nsa->prefix && nsb->prefix ||
6790: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
6798: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *thisns, *attrns; */ 
6799: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
6800: /* MUTANT (del_stmt) */ /*     JSXML *attr, *kid; */ 
6802: /* MUTANT (del_stmt) */ /*     thisns = GetNamespace(cx, xml->name, &xml->xml_namespaces); */ 
6803: /* MUTANT (del_stmt) */ /*     JS_ASSERT(thisns); */ 
6804: /* MUTANT (rep_op) */    if (thisns != ns)
6804: /* MUTANT (negate) */    if(! (thisns == ns))
6807: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_attrs.length; i <= n; i++) {
6807: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_attrs.length; i > n; i++) {
6807: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_attrs.length; i >= n; i++) {
6807: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_attrs.length; i == n; i++) {
6807: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_attrs.length; i != n; i++) {
6807: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_attrs.length; i < n; i--) {
6807: /* MUTANT (rep_const) */    for (i = 1, n = xml->xml_attrs.length; i < n; i++) {
6807: /* MUTANT (rep_const) */    for (i = -1, n = xml->xml_attrs.length; i < n; i++) {
6808: /* MUTANT (del_stmt) */ /*         attr = XMLARRAY_MEMBER(&xml->xml_attrs, i, JSXML); */ 
6809: /* MUTANT (negate) */        if(! (!attr))
6811: /* MUTANT (del_stmt) */ /*         attrns = GetNamespace(cx, attr->name, &xml->xml_namespaces); */ 
6812: /* MUTANT (del_stmt) */ /*         JS_ASSERT(attrns); */ 
6813: /* MUTANT (rep_op) */        if (attrns != ns)
6813: /* MUTANT (negate) */        if(! (attrns == ns))
6818: /* MUTANT (rep_op) */    if (i == XML_NOT_FOUND)
6818: /* MUTANT (negate) */    if(! (i != XML_NOT_FOUND))
6821: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i <= n; i++) {
6821: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i > n; i++) {
6821: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i >= n; i++) {
6821: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i == n; i++) {
6821: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i != n; i++) {
6821: /* MUTANT (rep_op) */    for (i = 0, n = xml->xml_kids.length; i < n; i--) {
6821: /* MUTANT (rep_const) */    for (i = 1, n = xml->xml_kids.length; i < n; i++) {
6821: /* MUTANT (rep_const) */    for (i = -1, n = xml->xml_kids.length; i < n; i++) {
6822: /* MUTANT (del_stmt) */ /*         kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
6823: /* MUTANT (rep_op) */        if (kid || kid->xml_class == JSXML_CLASS_ELEMENT) {
6823: /* MUTANT (rep_op) */        if (kid && kid->xml_class != JSXML_CLASS_ELEMENT) {
6823: /* MUTANT (negate) */        if(! (kid && kid->xml_class == JSXML_CLASS_ELEMENT)) {
6824: /* MUTANT (negate) */            if(! (!xml_removeNamespace_helper(cx, kid, ns)))
6835: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6836: /* MUTANT (del_stmt) */ /*     JSObject *nsobj; */ 
6837: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
6839: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6840: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
6841: /* MUTANT (rep_op) */    if (xml->xml_class == JSXML_CLASS_ELEMENT)
6841: /* MUTANT (negate) */    if(! (xml->xml_class != JSXML_CLASS_ELEMENT))
6843: /* MUTANT (del_stmt) */ /*     xml = CHECK_COPY_ON_WRITE(cx, xml, obj); */ 
6844: /* MUTANT (negate) */    if(! (!xml))
6847: /* MUTANT (del_stmt) */ /*     nsobj = CallConstructorFunction(cx, obj, &js_NamespaceClass.base, 1, argv); */ 
6847: /* MUTANT (rep_const) */    nsobj = CallConstructorFunction(cx, obj, &js_NamespaceClass.base, 0, argv);
6847: /* MUTANT (rep_const) */    nsobj = CallConstructorFunction(cx, obj, &js_NamespaceClass.base, -1, argv);
6847: /* MUTANT (rep_const) */    nsobj = CallConstructorFunction(cx, obj, &js_NamespaceClass.base, ((1)+1), argv);
6848: /* MUTANT (negate) */    if(! (!nsobj))
6850: /* MUTANT (del_stmt) */ /*     argv[0] = OBJECT_TO_JSVAL(nsobj); */ 
6850: /* MUTANT (rep_const) */    argv[1] = OBJECT_TO_JSVAL(nsobj);
6850: /* MUTANT (rep_const) */    argv[-1] = OBJECT_TO_JSVAL(nsobj);
6851: /* MUTANT (del_stmt) */ /*     ns = (JSXMLNamespace *) JS_GetPrivate(cx, nsobj); */ 
6854: /* MUTANT (del_stmt) */ /*     return xml_removeNamespace_helper(cx, xml, ns); */ 
6860: /* MUTANT (del_stmt) */ /*     JSXML *xml, *vxml, *kid; */ 
6861: /* MUTANT (del_stmt) */ /*     jsval name, value, id, junk; */ 
6862: /* MUTANT (del_stmt) */ /*     uint32 index; */ 
6863: /* MUTANT (del_stmt) */ /*     JSObject *nameobj; */ 
6864: /* MUTANT (del_stmt) */ /*     JSXMLQName *nameqn; */ 
6866: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6867: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
6868: /* MUTANT (rep_op) */    if (xml->xml_class == JSXML_CLASS_ELEMENT)
6868: /* MUTANT (negate) */    if(! (xml->xml_class != JSXML_CLASS_ELEMENT))
6871: /* MUTANT (del_stmt) */ /*     value = argv[1]; */ 
6871: /* MUTANT (rep_const) */    value = argv[0];
6871: /* MUTANT (rep_const) */    value = argv[-1];
6871: /* MUTANT (rep_const) */    value = argv[((1)+1)];
6875: /* MUTANT (negate) */    if(! (!vxml)) {
6876: /* MUTANT (rep_const) */        if (!JS_ConvertValue(cx, value, JSTYPE_STRING, &argv[0]))
6876: /* MUTANT (rep_const) */        if (!JS_ConvertValue(cx, value, JSTYPE_STRING, &argv[-1]))
6876: /* MUTANT (rep_const) */        if (!JS_ConvertValue(cx, value, JSTYPE_STRING, &argv[((1)+1)]))
6876: /* MUTANT (negate) */        if(! (!JS_ConvertValue(cx, value, JSTYPE_STRING, &argv[1])))
6878: /* MUTANT (del_stmt) */ /*         value = argv[1]; */ 
6878: /* MUTANT (rep_const) */        value = argv[0];
6878: /* MUTANT (rep_const) */        value = argv[-1];
6878: /* MUTANT (rep_const) */        value = argv[((1)+1)];
6880: /* MUTANT (del_stmt) */ /*         vxml = DeepCopy(cx, vxml, NULL, 0); */ 
6880: /* MUTANT (rep_const) */        vxml = DeepCopy(cx, vxml, NULL, 1);
6880: /* MUTANT (rep_const) */        vxml = DeepCopy(cx, vxml, NULL, -1);
6881: /* MUTANT (negate) */        if(! (!vxml))
6883: /* MUTANT (del_stmt) */ /*         value = argv[1] = OBJECT_TO_JSVAL(vxml->object); */ 
6883: /* MUTANT (rep_const) */        value = argv[0] = OBJECT_TO_JSVAL(vxml->object);
6883: /* MUTANT (rep_const) */        value = argv[-1] = OBJECT_TO_JSVAL(vxml->object);
6883: /* MUTANT (rep_const) */        value = argv[((1)+1)] = OBJECT_TO_JSVAL(vxml->object);
6887: /* MUTANT (negate) */    if(! (!xml))
6890: /* MUTANT (del_stmt) */ /*     name = argv[0]; */ 
6890: /* MUTANT (rep_const) */    name = argv[1];
6890: /* MUTANT (rep_const) */    name = argv[-1];
6891: /* MUTANT (negate) */    if(! (js_IdIsIndex(name, &index)))
6895: /* MUTANT (del_stmt) */ /*     nameobj = CallConstructorFunction(cx, obj, &js_QNameClass.base, 1, &name); */ 
6895: /* MUTANT (rep_const) */    nameobj = CallConstructorFunction(cx, obj, &js_QNameClass.base, 0, &name);
6895: /* MUTANT (rep_const) */    nameobj = CallConstructorFunction(cx, obj, &js_QNameClass.base, -1, &name);
6895: /* MUTANT (rep_const) */    nameobj = CallConstructorFunction(cx, obj, &js_QNameClass.base, ((1)+1), &name);
6896: /* MUTANT (negate) */    if(! (!nameobj))
6898: /* MUTANT (del_stmt) */ /*     argv[0] = OBJECT_TO_JSVAL(nameobj); */ 
6898: /* MUTANT (rep_const) */    argv[1] = OBJECT_TO_JSVAL(nameobj);
6898: /* MUTANT (rep_const) */    argv[-1] = OBJECT_TO_JSVAL(nameobj);
6899: /* MUTANT (del_stmt) */ /*     nameqn = (JSXMLQName *) JS_GetPrivate(cx, nameobj); */ 
6901: /* MUTANT (del_stmt) */ /*     id = JSVAL_VOID; */ 
6902: /* MUTANT (del_stmt) */ /*     index = xml->xml_kids.length; */ 
6903: /* MUTANT (rep_op) */    while (index == 0) {
6903: /* MUTANT (rep_const) */    while (index != 1) {
6903: /* MUTANT (rep_const) */    while (index != -1) {
6903: /* MUTANT (negate) */    while(! (index != 0)) {
6904: /* MUTANT (del_stmt) */ /*         --index; */ 
6904: /* MUTANT (rep_op) */        ++index;
6905: /* MUTANT (del_stmt) */ /*         kid = XMLARRAY_MEMBER(&xml->xml_kids, index, JSXML); */ 
6906: /* MUTANT (rep_op) */        if (kid || MatchElemName(nameqn, kid)) {
6906: /* MUTANT (negate) */        if(! (kid && MatchElemName(nameqn, kid))) {
6907: /* MUTANT (rep_op) */            if (!JSVAL_IS_VOID(id) || !DeleteByIndex(cx, xml, id, &junk))
6907: /* MUTANT (negate) */            if(! (!JSVAL_IS_VOID(id) && !DeleteByIndex(cx, xml, id, &junk)))
6909: /* MUTANT (negate) */            if(! (!IndexToIdVal(cx, index, &id)))
6913: /* MUTANT (negate) */    if(! (JSVAL_IS_VOID(id)))
6915: /* MUTANT (del_stmt) */ /*     return Replace(cx, xml, id, value); */ 
6923: /* MUTANT (rep_const) */                     &argv[1])) {
6923: /* MUTANT (rep_const) */                     &argv[-1])) {
6924: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
6928: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6935: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
6936: /* MUTANT (del_stmt) */ /*     jsval name; */ 
6937: /* MUTANT (del_stmt) */ /*     JSXMLQName *nameqn; */ 
6938: /* MUTANT (del_stmt) */ /*     JSString *namestr; */ 
6940: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6941: /* MUTANT (negate) */    if(! (!JSXML_HAS_NAME(xml)))
6944: /* MUTANT (del_stmt) */ /*     name = argv[0]; */ 
6944: /* MUTANT (rep_const) */    name = argv[1];
6944: /* MUTANT (rep_const) */    name = argv[-1];
6945: /* MUTANT (rep_op) */    if (!JSVAL_IS_PRIMITIVE(name) ||
6946: /* MUTANT (rep_op) */        OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(name)) != &js_QNameClass.base) {
6947: /* MUTANT (del_stmt) */ /*         nameqn = (JSXMLQName *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(name)); */ 
6948: /* MUTANT (del_stmt) */ /*         namestr = nameqn->localName; */ 
6950: /* MUTANT (rep_const) */        if (!JS_ConvertValue(cx, name, JSTYPE_STRING, &argv[1]))
6950: /* MUTANT (rep_const) */        if (!JS_ConvertValue(cx, name, JSTYPE_STRING, &argv[-1]))
6950: /* MUTANT (negate) */        if(! (!JS_ConvertValue(cx, name, JSTYPE_STRING, &argv[0])))
6952: /* MUTANT (del_stmt) */ /*         name = argv[0]; */ 
6952: /* MUTANT (rep_const) */        name = argv[1];
6952: /* MUTANT (rep_const) */        name = argv[-1];
6953: /* MUTANT (del_stmt) */ /*         namestr = JSVAL_TO_STRING(name); */ 
6957: /* MUTANT (negate) */    if(! (!xml))
6959: /* MUTANT (del_stmt) */ /*     xml->name->localName = namestr; */ 
6960: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
6966: /* MUTANT (del_stmt) */ /*     JSXML *xml, *nsowner; */ 
6967: /* MUTANT (del_stmt) */ /*     jsval name; */ 
6968: /* MUTANT (del_stmt) */ /*     JSXMLQName *nameqn; */ 
6969: /* MUTANT (del_stmt) */ /*     JSObject *nameobj; */ 
6970: /* MUTANT (del_stmt) */ /*     JSXMLArray *nsarray; */ 
6971: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
6972: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
6974: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
6975: /* MUTANT (negate) */    if(! (!JSXML_HAS_NAME(xml)))
6978: /* MUTANT (del_stmt) */ /*     name = argv[0]; */ 
6978: /* MUTANT (rep_const) */    name = argv[1];
6978: /* MUTANT (rep_const) */    name = argv[-1];
6979: /* MUTANT (rep_op) */    if (!JSVAL_IS_PRIMITIVE(name) ||
6980: /* MUTANT (rep_op) */        OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(name)) != &js_QNameClass.base &&
6980: /* MUTANT (rep_op) */        OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(name)) == &js_QNameClass.base ||
6983: /* MUTANT (del_stmt) */ /*         name = argv[0] = STRING_TO_JSVAL(nameqn->localName); */ 
6983: /* MUTANT (rep_const) */        name = argv[1] = STRING_TO_JSVAL(nameqn->localName);
6983: /* MUTANT (rep_const) */        name = argv[-1] = STRING_TO_JSVAL(nameqn->localName);
6986: /* MUTANT (rep_const) */    nameobj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, 0, &name);
6986: /* MUTANT (rep_const) */    nameobj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, -1, &name);
6986: /* MUTANT (rep_const) */    nameobj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, ((1)+1), &name);
6987: /* MUTANT (negate) */    if(! (!nameobj))
6989: /* MUTANT (del_stmt) */ /*     nameqn = (JSXMLQName *) JS_GetPrivate(cx, nameobj); */ 
6992: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_PROCESSING_INSTRUCTION)
6992: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_PROCESSING_INSTRUCTION))
6995: /* MUTANT (del_stmt) */ /*     xml = CHECK_COPY_ON_WRITE(cx, xml, obj); */ 
6996: /* MUTANT (negate) */    if(! (!xml))
6998: /* MUTANT (del_stmt) */ /*     xml->name = nameqn; */ 
7007: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_ELEMENT) {
7007: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_ELEMENT)) {
7008: /* MUTANT (del_stmt) */ /*         nsowner = xml; */ 
7010: /* MUTANT (rep_op) */        if (!xml->parent && xml->parent->xml_class != JSXML_CLASS_ELEMENT)
7010: /* MUTANT (rep_op) */        if (!xml->parent || xml->parent->xml_class == JSXML_CLASS_ELEMENT)
7010: /* MUTANT (negate) */        if(! (!xml->parent || xml->parent->xml_class != JSXML_CLASS_ELEMENT))
7012: /* MUTANT (del_stmt) */ /*         nsowner = xml->parent; */ 
7015: /* MUTANT (negate) */    if(! (nameqn->prefix)) {
7026: /* MUTANT (del_stmt) */ /*         ns = GetNamespace(cx, nameqn, &nsowner->xml_namespaces); */ 
7027: /* MUTANT (negate) */        if(! (!ns))
7031: /* MUTANT (negate) */        if(! (XMLARRAY_HAS_MEMBER(&nsowner->xml_namespaces, ns, NULL)))
7048: /* MUTANT (del_stmt) */ /*         JS_ASSERT(!IS_EMPTY(nameqn->uri)); */ 
7050: /* MUTANT (del_stmt) */ /*         nsarray = &nsowner->xml_namespaces; */ 
7051: /* MUTANT (rep_op) */        for (i = 0, n = nsarray->length; i <= n; i++) {
7051: /* MUTANT (rep_op) */        for (i = 0, n = nsarray->length; i > n; i++) {
7051: /* MUTANT (rep_op) */        for (i = 0, n = nsarray->length; i >= n; i++) {
7051: /* MUTANT (rep_op) */        for (i = 0, n = nsarray->length; i == n; i++) {
7051: /* MUTANT (rep_op) */        for (i = 0, n = nsarray->length; i != n; i++) {
7051: /* MUTANT (rep_op) */        for (i = 0, n = nsarray->length; i < n; i--) {
7051: /* MUTANT (rep_const) */        for (i = 1, n = nsarray->length; i < n; i++) {
7051: /* MUTANT (rep_const) */        for (i = -1, n = nsarray->length; i < n; i++) {
7052: /* MUTANT (del_stmt) */ /*             ns = XMLARRAY_MEMBER(nsarray, i, JSXMLNamespace); */ 
7053: /* MUTANT (rep_op) */            if (ns || !js_CompareStrings(ns->uri, nameqn->uri)) {
7053: /* MUTANT (negate) */            if(! (ns && !js_CompareStrings(ns->uri, nameqn->uri))) {
7054: /* MUTANT (del_stmt) */ /*                 nameqn->prefix = ns->prefix; */ 
7055: /* MUTANT (del_stmt) */ /*                 return JS_TRUE; */ 
7060: /* MUTANT (negate) */        if(! (!ns))
7071: /* MUTANT (del_stmt) */ /*     JSXML *xml, *nsowner; */ 
7072: /* MUTANT (del_stmt) */ /*     JSObject *nsobj, *qnobj; */ 
7073: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
7074: /* MUTANT (del_stmt) */ /*     jsval qnargv[2]; */ 
7074: /* MUTANT (rep_const) */    jsval qnargv[0];
7074: /* MUTANT (rep_const) */    jsval qnargv[1];
7074: /* MUTANT (rep_const) */    jsval qnargv[-1];
7074: /* MUTANT (rep_const) */    jsval qnargv[((2)+1)];
7074: /* MUTANT (rep_const) */    jsval qnargv[((2)-1)];
7076: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
7077: /* MUTANT (rep_op) */    if (xml->xml_class == JSXML_CLASS_ELEMENT &&
7077: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_ELEMENT ||
7078: /* MUTANT (rep_op) */        xml->xml_class == JSXML_CLASS_ATTRIBUTE) {
7079: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
7083: /* MUTANT (rep_op) */    if (!xml && !js_GetXMLQNameObject(cx, xml->name))
7083: /* MUTANT (negate) */    if(! (!xml || !js_GetXMLQNameObject(cx, xml->name)))
7086: /* MUTANT (del_stmt) */ /*     nsobj = js_ConstructObject(cx, &js_NamespaceClass.base, NULL, obj, 1, argv); */ 
7086: /* MUTANT (rep_const) */    nsobj = js_ConstructObject(cx, &js_NamespaceClass.base, NULL, obj, 0, argv);
7086: /* MUTANT (rep_const) */    nsobj = js_ConstructObject(cx, &js_NamespaceClass.base, NULL, obj, -1, argv);
7086: /* MUTANT (rep_const) */    nsobj = js_ConstructObject(cx, &js_NamespaceClass.base, NULL, obj, ((1)+1), argv);
7087: /* MUTANT (negate) */    if(! (!nsobj))
7089: /* MUTANT (del_stmt) */ /*     ns = (JSXMLNamespace *) JS_GetPrivate(cx, nsobj); */ 
7090: /* MUTANT (del_stmt) */ /*     ns->declared = JS_TRUE; */ 
7092: /* MUTANT (del_stmt) */ /*     qnargv[0] = argv[0] = OBJECT_TO_JSVAL(nsobj); */ 
7092: /* MUTANT (rep_const) */    qnargv[1] = argv[0] = OBJECT_TO_JSVAL(nsobj);
7092: /* MUTANT (rep_const) */    qnargv[-1] = argv[0] = OBJECT_TO_JSVAL(nsobj);
7092: /* MUTANT (rep_const) */    qnargv[0] = argv[1] = OBJECT_TO_JSVAL(nsobj);
7092: /* MUTANT (rep_const) */    qnargv[0] = argv[-1] = OBJECT_TO_JSVAL(nsobj);
7093: /* MUTANT (del_stmt) */ /*     qnargv[1] = OBJECT_TO_JSVAL(xml->name->object); */ 
7093: /* MUTANT (rep_const) */    qnargv[0] = OBJECT_TO_JSVAL(xml->name->object);
7093: /* MUTANT (rep_const) */    qnargv[-1] = OBJECT_TO_JSVAL(xml->name->object);
7093: /* MUTANT (rep_const) */    qnargv[((1)+1)] = OBJECT_TO_JSVAL(xml->name->object);
7094: /* MUTANT (del_stmt) */ /*     qnobj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, 2, qnargv); */ 
7094: /* MUTANT (rep_const) */    qnobj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, 0, qnargv);
7094: /* MUTANT (rep_const) */    qnobj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, 1, qnargv);
7094: /* MUTANT (rep_const) */    qnobj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, -1, qnargv);
7094: /* MUTANT (rep_const) */    qnobj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, ((2)+1), qnargv);
7094: /* MUTANT (rep_const) */    qnobj = js_ConstructObject(cx, &js_QNameClass.base, NULL, NULL, ((2)-1), qnargv);
7095: /* MUTANT (negate) */    if(! (!qnobj))
7098: /* MUTANT (del_stmt) */ /*     xml->name = (JSXMLQName *) JS_GetPrivate(cx, qnobj); */ 
7104: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_ELEMENT) {
7104: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_ELEMENT)) {
7105: /* MUTANT (del_stmt) */ /*         nsowner = xml; */ 
7107: /* MUTANT (rep_op) */        if (!xml->parent && xml->parent->xml_class != JSXML_CLASS_ELEMENT)
7107: /* MUTANT (rep_op) */        if (!xml->parent || xml->parent->xml_class == JSXML_CLASS_ELEMENT)
7107: /* MUTANT (negate) */        if(! (!xml->parent || xml->parent->xml_class != JSXML_CLASS_ELEMENT))
7109: /* MUTANT (del_stmt) */ /*         nsowner = xml->parent; */ 
7118: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list, *kid, *vxml; */ 
7119: /* MUTANT (del_stmt) */ /*     JSObject *listobj, *kidobj; */ 
7120: /* MUTANT (del_stmt) */ /*     uint32 i, n; */ 
7121: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
7122: /* MUTANT (del_stmt) */ /*     jsval v; */ 
7124: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
7125: /* MUTANT (del_stmt) */ /*     listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
7126: /* MUTANT (negate) */    if(! (!listobj))
7129: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(listobj); */ 
7130: /* MUTANT (del_stmt) */ /*     list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
7131: /* MUTANT (del_stmt) */ /*     list->xml_target = xml; */ 
7133: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
7133: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
7134: /* MUTANT (del_stmt) */ /*         ok = JS_TRUE; */ 
7135: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i <= n; i++) {
7135: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i > n; i++) {
7135: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i >= n; i++) {
7135: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i == n; i++) {
7135: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i != n; i++) {
7135: /* MUTANT (rep_op) */        for (i = 0, n = xml->xml_kids.length; i < n; i--) {
7135: /* MUTANT (rep_const) */        for (i = 1, n = xml->xml_kids.length; i < n; i++) {
7135: /* MUTANT (rep_const) */        for (i = -1, n = xml->xml_kids.length; i < n; i++) {
7136: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
7137: /* MUTANT (rep_op) */            if (kid || kid->xml_class == JSXML_CLASS_ELEMENT) {
7137: /* MUTANT (rep_op) */            if (kid && kid->xml_class != JSXML_CLASS_ELEMENT) {
7137: /* MUTANT (negate) */            if(! (kid && kid->xml_class == JSXML_CLASS_ELEMENT)) {
7138: /* MUTANT (del_stmt) */ /*                 ok = JS_EnterLocalRootScope(cx); */ 
7139: /* MUTANT (negate) */                if(! (!ok))
7141: /* MUTANT (del_stmt) */ /*                 kidobj = js_GetXMLObject(cx, kid); */ 
7145: /* MUTANT (del_stmt) */ /*                 JS_LeaveLocalRootScope(cx); */ 
7146: /* MUTANT (negate) */                if(! (!ok))
7148: /* MUTANT (del_stmt) */ /*                 vxml = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(v)); */ 
7149: /* MUTANT (rep_op) */                if (JSXML_LENGTH(vxml) == 0 && !Append(cx, list, vxml))
7149: /* MUTANT (rep_op) */                if (JSXML_LENGTH(vxml) != 0 || !Append(cx, list, vxml))
7149: /* MUTANT (rep_const) */                if (JSXML_LENGTH(vxml) != 1 && !Append(cx, list, vxml))
7149: /* MUTANT (rep_const) */                if (JSXML_LENGTH(vxml) != -1 && !Append(cx, list, vxml))
7149: /* MUTANT (negate) */                if(! (JSXML_LENGTH(vxml) != 0 && !Append(cx, list, vxml)))
7154: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i <= n; i++) {
7154: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i > n; i++) {
7154: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i >= n; i++) {
7154: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i == n; i++) {
7154: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i != n; i++) {
7154: /* MUTANT (rep_op) */        for (i = 0, n = JSXML_LENGTH(xml); i < n; i--) {
7154: /* MUTANT (rep_const) */        for (i = 1, n = JSXML_LENGTH(xml); i < n; i++) {
7154: /* MUTANT (rep_const) */        for (i = -1, n = JSXML_LENGTH(xml); i < n; i++) {
7155: /* MUTANT (del_stmt) */ /*             kid = XMLARRAY_MEMBER(&xml->xml_kids, i, JSXML); */ 
7156: /* MUTANT (rep_op) */            if (kid || kid->xml_class == JSXML_CLASS_TEXT) {
7156: /* MUTANT (rep_op) */            if (kid && kid->xml_class != JSXML_CLASS_TEXT) {
7156: /* MUTANT (negate) */            if(! (kid && kid->xml_class == JSXML_CLASS_TEXT)) {
7157: /* MUTANT (negate) */                if(! (!Append(cx, list, kid)))
7170: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
7172: /* MUTANT (del_stmt) */ /*     str = ToXMLString(cx, OBJECT_TO_JSVAL(obj)); */ 
7173: /* MUTANT (negate) */    if(! (!str))
7175: /* MUTANT (del_stmt) */ /*     *rval = STRING_TO_JSVAL(str); */ 
7176: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
7183: /* MUTANT (del_stmt) */ /*     JSString *str, *kidstr; */ 
7184: /* MUTANT (del_stmt) */ /*     JSXML *kid; */ 
7185: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor; */ 
7187: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_ATTRIBUTE ||
7187: /* MUTANT (rep_op) */    if (xml->xml_class == JSXML_CLASS_ATTRIBUTE &&
7188: /* MUTANT (rep_op) */        xml->xml_class != JSXML_CLASS_TEXT) {
7189: /* MUTANT (del_stmt) */ /*         return xml->xml_value; */ 
7192: /* MUTANT (negate) */    if(! (!HasSimpleContent(xml)))
7195: /* MUTANT (del_stmt) */ /*     str = cx->runtime->emptyString; */ 
7196: /* MUTANT (del_stmt) */ /*     JS_EnterLocalRootScope(cx); */ 
7197: /* MUTANT (del_stmt) */ /*     XMLArrayCursorInit(&cursor, &xml->xml_kids); */ 
7198: /* MUTANT (rep_op) */    while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
7198: /* MUTANT (negate) */    while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
7199: /* MUTANT (rep_op) */        if (kid->xml_class == JSXML_CLASS_COMMENT &&
7199: /* MUTANT (rep_op) */        if (kid->xml_class != JSXML_CLASS_COMMENT ||
7200: /* MUTANT (rep_op) */            kid->xml_class == JSXML_CLASS_PROCESSING_INSTRUCTION) {
7201: /* MUTANT (del_stmt) */ /*             kidstr = xml_toString_helper(cx, kid); */ 
7202: /* MUTANT (negate) */            if(! (!kidstr)) {
7203: /* MUTANT (del_stmt) */ /*                 str = NULL; */ 
7204: /* MUTANT (del_stmt) */ /*                 break; */ 
7207: /* MUTANT (negate) */            if(! (!str))
7212: /* MUTANT (del_stmt) */ /*     JS_LeaveLocalRootScope(cx); */ 
7213: /* MUTANT (del_stmt) */ /*     return str; */ 
7220: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
7221: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
7223: /* MUTANT (del_stmt) */ /*     XML_METHOD_PROLOG; */ 
7224: /* MUTANT (del_stmt) */ /*     str = xml_toString_helper(cx, xml); */ 
7225: /* MUTANT (negate) */    if(! (!str))
7227: /* MUTANT (del_stmt) */ /*     *rval = STRING_TO_JSVAL(str); */ 
7228: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
7235: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(obj); */ 
7236: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
7240: /* MUTANT (rep_const) */    {"addNamespace",          xml_addNamespace,          0,0,XML_MASK},
7240: /* MUTANT (rep_const) */    {"addNamespace",          xml_addNamespace,          -1,0,XML_MASK},
7240: /* MUTANT (rep_const) */    {"addNamespace",          xml_addNamespace,          ((1)+1),0,XML_MASK},
7240: /* MUTANT (rep_const) */    {"addNamespace",          xml_addNamespace,          1,1,XML_MASK},
7240: /* MUTANT (rep_const) */    {"addNamespace",          xml_addNamespace,          1,-1,XML_MASK},
7241: /* MUTANT (rep_const) */    {"appendChild",           xml_appendChild,           0,0,XML_MASK},
7241: /* MUTANT (rep_const) */    {"appendChild",           xml_appendChild,           -1,0,XML_MASK},
7241: /* MUTANT (rep_const) */    {"appendChild",           xml_appendChild,           ((1)+1),0,XML_MASK},
7241: /* MUTANT (rep_const) */    {"appendChild",           xml_appendChild,           1,1,XML_MASK},
7241: /* MUTANT (rep_const) */    {"appendChild",           xml_appendChild,           1,-1,XML_MASK},
7242: /* MUTANT (rep_const) */    {js_attribute_str,        xml_attribute,             0,0,GENERIC_MASK},
7242: /* MUTANT (rep_const) */    {js_attribute_str,        xml_attribute,             -1,0,GENERIC_MASK},
7242: /* MUTANT (rep_const) */    {js_attribute_str,        xml_attribute,             ((1)+1),0,GENERIC_MASK},
7242: /* MUTANT (rep_const) */    {js_attribute_str,        xml_attribute,             1,1,GENERIC_MASK},
7242: /* MUTANT (rep_const) */    {js_attribute_str,        xml_attribute,             1,-1,GENERIC_MASK},
7243: /* MUTANT (rep_const) */    {"attributes",            xml_attributes,            1,0,GENERIC_MASK},
7243: /* MUTANT (rep_const) */    {"attributes",            xml_attributes,            -1,0,GENERIC_MASK},
7243: /* MUTANT (rep_const) */    {"attributes",            xml_attributes,            0,1,GENERIC_MASK},
7243: /* MUTANT (rep_const) */    {"attributes",            xml_attributes,            0,-1,GENERIC_MASK},
7244: /* MUTANT (rep_const) */    {"child",                 xml_child,                 0,0,GENERIC_MASK},
7244: /* MUTANT (rep_const) */    {"child",                 xml_child,                 -1,0,GENERIC_MASK},
7244: /* MUTANT (rep_const) */    {"child",                 xml_child,                 ((1)+1),0,GENERIC_MASK},
7244: /* MUTANT (rep_const) */    {"child",                 xml_child,                 1,1,GENERIC_MASK},
7244: /* MUTANT (rep_const) */    {"child",                 xml_child,                 1,-1,GENERIC_MASK},
7245: /* MUTANT (rep_const) */    {"childIndex",            xml_childIndex,            1,0,XML_MASK},
7245: /* MUTANT (rep_const) */    {"childIndex",            xml_childIndex,            -1,0,XML_MASK},
7245: /* MUTANT (rep_const) */    {"childIndex",            xml_childIndex,            0,1,XML_MASK},
7245: /* MUTANT (rep_const) */    {"childIndex",            xml_childIndex,            0,-1,XML_MASK},
7246: /* MUTANT (rep_const) */    {"children",              xml_children,              1,0,GENERIC_MASK},
7246: /* MUTANT (rep_const) */    {"children",              xml_children,              -1,0,GENERIC_MASK},
7246: /* MUTANT (rep_const) */    {"children",              xml_children,              0,1,GENERIC_MASK},
7246: /* MUTANT (rep_const) */    {"children",              xml_children,              0,-1,GENERIC_MASK},
7247: /* MUTANT (rep_const) */    {"comments",              xml_comments,              1,0,GENERIC_MASK},
7247: /* MUTANT (rep_const) */    {"comments",              xml_comments,              -1,0,GENERIC_MASK},
7247: /* MUTANT (rep_const) */    {"comments",              xml_comments,              0,1,GENERIC_MASK},
7247: /* MUTANT (rep_const) */    {"comments",              xml_comments,              0,-1,GENERIC_MASK},
7248: /* MUTANT (rep_const) */    {"contains",              xml_contains,              0,0,GENERIC_MASK},
7248: /* MUTANT (rep_const) */    {"contains",              xml_contains,              -1,0,GENERIC_MASK},
7248: /* MUTANT (rep_const) */    {"contains",              xml_contains,              ((1)+1),0,GENERIC_MASK},
7248: /* MUTANT (rep_const) */    {"contains",              xml_contains,              1,1,GENERIC_MASK},
7248: /* MUTANT (rep_const) */    {"contains",              xml_contains,              1,-1,GENERIC_MASK},
7249: /* MUTANT (rep_const) */    {"copy",                  xml_copy,                  1,0,GENERIC_MASK},
7249: /* MUTANT (rep_const) */    {"copy",                  xml_copy,                  -1,0,GENERIC_MASK},
7249: /* MUTANT (rep_const) */    {"copy",                  xml_copy,                  0,1,GENERIC_MASK},
7249: /* MUTANT (rep_const) */    {"copy",                  xml_copy,                  0,-1,GENERIC_MASK},
7250: /* MUTANT (rep_const) */    {"descendants",           xml_descendants,           0,0,GENERIC_MASK},
7250: /* MUTANT (rep_const) */    {"descendants",           xml_descendants,           -1,0,GENERIC_MASK},
7250: /* MUTANT (rep_const) */    {"descendants",           xml_descendants,           ((1)+1),0,GENERIC_MASK},
7250: /* MUTANT (rep_const) */    {"descendants",           xml_descendants,           1,1,GENERIC_MASK},
7250: /* MUTANT (rep_const) */    {"descendants",           xml_descendants,           1,-1,GENERIC_MASK},
7251: /* MUTANT (rep_const) */    {"elements",              xml_elements,              0,0,GENERIC_MASK},
7251: /* MUTANT (rep_const) */    {"elements",              xml_elements,              -1,0,GENERIC_MASK},
7251: /* MUTANT (rep_const) */    {"elements",              xml_elements,              ((1)+1),0,GENERIC_MASK},
7251: /* MUTANT (rep_const) */    {"elements",              xml_elements,              1,1,GENERIC_MASK},
7251: /* MUTANT (rep_const) */    {"elements",              xml_elements,              1,-1,GENERIC_MASK},
7252: /* MUTANT (rep_const) */    {"hasOwnProperty",        xml_hasOwnProperty,        0,0,GENERIC_MASK},
7252: /* MUTANT (rep_const) */    {"hasOwnProperty",        xml_hasOwnProperty,        -1,0,GENERIC_MASK},
7252: /* MUTANT (rep_const) */    {"hasOwnProperty",        xml_hasOwnProperty,        ((1)+1),0,GENERIC_MASK},
7252: /* MUTANT (rep_const) */    {"hasOwnProperty",        xml_hasOwnProperty,        1,1,GENERIC_MASK},
7252: /* MUTANT (rep_const) */    {"hasOwnProperty",        xml_hasOwnProperty,        1,-1,GENERIC_MASK},
7253: /* MUTANT (rep_const) */    {"hasComplexContent",     xml_hasComplexContent,     0,0,GENERIC_MASK},
7253: /* MUTANT (rep_const) */    {"hasComplexContent",     xml_hasComplexContent,     -1,0,GENERIC_MASK},
7253: /* MUTANT (rep_const) */    {"hasComplexContent",     xml_hasComplexContent,     ((1)+1),0,GENERIC_MASK},
7253: /* MUTANT (rep_const) */    {"hasComplexContent",     xml_hasComplexContent,     1,1,GENERIC_MASK},
7253: /* MUTANT (rep_const) */    {"hasComplexContent",     xml_hasComplexContent,     1,-1,GENERIC_MASK},
7254: /* MUTANT (rep_const) */    {"hasSimpleContent",      xml_hasSimpleContent,      0,0,GENERIC_MASK},
7254: /* MUTANT (rep_const) */    {"hasSimpleContent",      xml_hasSimpleContent,      -1,0,GENERIC_MASK},
7254: /* MUTANT (rep_const) */    {"hasSimpleContent",      xml_hasSimpleContent,      ((1)+1),0,GENERIC_MASK},
7254: /* MUTANT (rep_const) */    {"hasSimpleContent",      xml_hasSimpleContent,      1,1,GENERIC_MASK},
7254: /* MUTANT (rep_const) */    {"hasSimpleContent",      xml_hasSimpleContent,      1,-1,GENERIC_MASK},
7255: /* MUTANT (rep_const) */    {"inScopeNamespaces",     xml_inScopeNamespaces,     1,0,XML_MASK},
7255: /* MUTANT (rep_const) */    {"inScopeNamespaces",     xml_inScopeNamespaces,     -1,0,XML_MASK},
7255: /* MUTANT (rep_const) */    {"inScopeNamespaces",     xml_inScopeNamespaces,     0,1,XML_MASK},
7255: /* MUTANT (rep_const) */    {"inScopeNamespaces",     xml_inScopeNamespaces,     0,-1,XML_MASK},
7256: /* MUTANT (rep_const) */    {"insertChildAfter",      xml_insertChildAfter,      0,0,XML_MASK},
7256: /* MUTANT (rep_const) */    {"insertChildAfter",      xml_insertChildAfter,      1,0,XML_MASK},
7256: /* MUTANT (rep_const) */    {"insertChildAfter",      xml_insertChildAfter,      -1,0,XML_MASK},
7256: /* MUTANT (rep_const) */    {"insertChildAfter",      xml_insertChildAfter,      ((2)+1),0,XML_MASK},
7256: /* MUTANT (rep_const) */    {"insertChildAfter",      xml_insertChildAfter,      ((2)-1),0,XML_MASK},
7256: /* MUTANT (rep_const) */    {"insertChildAfter",      xml_insertChildAfter,      2,1,XML_MASK},
7256: /* MUTANT (rep_const) */    {"insertChildAfter",      xml_insertChildAfter,      2,-1,XML_MASK},
7257: /* MUTANT (rep_const) */    {"insertChildBefore",     xml_insertChildBefore,     0,0,XML_MASK},
7257: /* MUTANT (rep_const) */    {"insertChildBefore",     xml_insertChildBefore,     1,0,XML_MASK},
7257: /* MUTANT (rep_const) */    {"insertChildBefore",     xml_insertChildBefore,     -1,0,XML_MASK},
7257: /* MUTANT (rep_const) */    {"insertChildBefore",     xml_insertChildBefore,     ((2)+1),0,XML_MASK},
7257: /* MUTANT (rep_const) */    {"insertChildBefore",     xml_insertChildBefore,     ((2)-1),0,XML_MASK},
7257: /* MUTANT (rep_const) */    {"insertChildBefore",     xml_insertChildBefore,     2,1,XML_MASK},
7257: /* MUTANT (rep_const) */    {"insertChildBefore",     xml_insertChildBefore,     2,-1,XML_MASK},
7258: /* MUTANT (rep_const) */    {js_length_str,           xml_length,                1,0,GENERIC_MASK},
7258: /* MUTANT (rep_const) */    {js_length_str,           xml_length,                -1,0,GENERIC_MASK},
7258: /* MUTANT (rep_const) */    {js_length_str,           xml_length,                0,1,GENERIC_MASK},
7258: /* MUTANT (rep_const) */    {js_length_str,           xml_length,                0,-1,GENERIC_MASK},
7259: /* MUTANT (rep_const) */    {js_localName_str,        xml_localName,             1,0,XML_MASK},
7259: /* MUTANT (rep_const) */    {js_localName_str,        xml_localName,             -1,0,XML_MASK},
7259: /* MUTANT (rep_const) */    {js_localName_str,        xml_localName,             0,1,XML_MASK},
7259: /* MUTANT (rep_const) */    {js_localName_str,        xml_localName,             0,-1,XML_MASK},
7260: /* MUTANT (rep_const) */    {js_name_str,             xml_name,                  1,0,XML_MASK},
7260: /* MUTANT (rep_const) */    {js_name_str,             xml_name,                  -1,0,XML_MASK},
7260: /* MUTANT (rep_const) */    {js_name_str,             xml_name,                  0,1,XML_MASK},
7260: /* MUTANT (rep_const) */    {js_name_str,             xml_name,                  0,-1,XML_MASK},
7261: /* MUTANT (rep_const) */    {js_namespace_str,        xml_namespace,             0,0,XML_MASK},
7261: /* MUTANT (rep_const) */    {js_namespace_str,        xml_namespace,             -1,0,XML_MASK},
7261: /* MUTANT (rep_const) */    {js_namespace_str,        xml_namespace,             ((1)+1),0,XML_MASK},
7261: /* MUTANT (rep_const) */    {js_namespace_str,        xml_namespace,             1,1,XML_MASK},
7261: /* MUTANT (rep_const) */    {js_namespace_str,        xml_namespace,             1,-1,XML_MASK},
7262: /* MUTANT (rep_const) */    {"namespaceDeclarations", xml_namespaceDeclarations, 1,0,XML_MASK},
7262: /* MUTANT (rep_const) */    {"namespaceDeclarations", xml_namespaceDeclarations, -1,0,XML_MASK},
7262: /* MUTANT (rep_const) */    {"namespaceDeclarations", xml_namespaceDeclarations, 0,1,XML_MASK},
7262: /* MUTANT (rep_const) */    {"namespaceDeclarations", xml_namespaceDeclarations, 0,-1,XML_MASK},
7263: /* MUTANT (rep_const) */    {"nodeKind",              xml_nodeKind,              1,0,XML_MASK},
7263: /* MUTANT (rep_const) */    {"nodeKind",              xml_nodeKind,              -1,0,XML_MASK},
7263: /* MUTANT (rep_const) */    {"nodeKind",              xml_nodeKind,              0,1,XML_MASK},
7263: /* MUTANT (rep_const) */    {"nodeKind",              xml_nodeKind,              0,-1,XML_MASK},
7264: /* MUTANT (rep_const) */    {"normalize",             xml_normalize,             1,0,GENERIC_MASK},
7264: /* MUTANT (rep_const) */    {"normalize",             xml_normalize,             -1,0,GENERIC_MASK},
7264: /* MUTANT (rep_const) */    {"normalize",             xml_normalize,             0,1,GENERIC_MASK},
7264: /* MUTANT (rep_const) */    {"normalize",             xml_normalize,             0,-1,GENERIC_MASK},
7265: /* MUTANT (rep_const) */    {js_xml_parent_str,       xml_parent,                1,0,GENERIC_MASK},
7265: /* MUTANT (rep_const) */    {js_xml_parent_str,       xml_parent,                -1,0,GENERIC_MASK},
7265: /* MUTANT (rep_const) */    {js_xml_parent_str,       xml_parent,                0,1,GENERIC_MASK},
7265: /* MUTANT (rep_const) */    {js_xml_parent_str,       xml_parent,                0,-1,GENERIC_MASK},
7266: /* MUTANT (rep_const) */    {"processingInstructions",xml_processingInstructions,0,0,GENERIC_MASK},
7266: /* MUTANT (rep_const) */    {"processingInstructions",xml_processingInstructions,-1,0,GENERIC_MASK},
7266: /* MUTANT (rep_const) */    {"processingInstructions",xml_processingInstructions,((1)+1),0,GENERIC_MASK},
7266: /* MUTANT (rep_const) */    {"processingInstructions",xml_processingInstructions,1,1,GENERIC_MASK},
7266: /* MUTANT (rep_const) */    {"processingInstructions",xml_processingInstructions,1,-1,GENERIC_MASK},
7267: /* MUTANT (rep_const) */    {"prependChild",          xml_prependChild,          0,0,XML_MASK},
7267: /* MUTANT (rep_const) */    {"prependChild",          xml_prependChild,          -1,0,XML_MASK},
7267: /* MUTANT (rep_const) */    {"prependChild",          xml_prependChild,          ((1)+1),0,XML_MASK},
7267: /* MUTANT (rep_const) */    {"prependChild",          xml_prependChild,          1,1,XML_MASK},
7267: /* MUTANT (rep_const) */    {"prependChild",          xml_prependChild,          1,-1,XML_MASK},
7268: /* MUTANT (rep_const) */    {"propertyIsEnumerable",  xml_propertyIsEnumerable,  0,0,GENERIC_MASK},
7268: /* MUTANT (rep_const) */    {"propertyIsEnumerable",  xml_propertyIsEnumerable,  -1,0,GENERIC_MASK},
7268: /* MUTANT (rep_const) */    {"propertyIsEnumerable",  xml_propertyIsEnumerable,  ((1)+1),0,GENERIC_MASK},
7268: /* MUTANT (rep_const) */    {"propertyIsEnumerable",  xml_propertyIsEnumerable,  1,1,GENERIC_MASK},
7268: /* MUTANT (rep_const) */    {"propertyIsEnumerable",  xml_propertyIsEnumerable,  1,-1,GENERIC_MASK},
7269: /* MUTANT (rep_const) */    {"removeNamespace",       xml_removeNamespace,       0,0,XML_MASK},
7269: /* MUTANT (rep_const) */    {"removeNamespace",       xml_removeNamespace,       -1,0,XML_MASK},
7269: /* MUTANT (rep_const) */    {"removeNamespace",       xml_removeNamespace,       ((1)+1),0,XML_MASK},
7269: /* MUTANT (rep_const) */    {"removeNamespace",       xml_removeNamespace,       1,1,XML_MASK},
7269: /* MUTANT (rep_const) */    {"removeNamespace",       xml_removeNamespace,       1,-1,XML_MASK},
7270: /* MUTANT (rep_const) */    {"replace",               xml_replace,               0,0,XML_MASK},
7270: /* MUTANT (rep_const) */    {"replace",               xml_replace,               1,0,XML_MASK},
7270: /* MUTANT (rep_const) */    {"replace",               xml_replace,               -1,0,XML_MASK},
7270: /* MUTANT (rep_const) */    {"replace",               xml_replace,               ((2)+1),0,XML_MASK},
7270: /* MUTANT (rep_const) */    {"replace",               xml_replace,               ((2)-1),0,XML_MASK},
7270: /* MUTANT (rep_const) */    {"replace",               xml_replace,               2,1,XML_MASK},
7270: /* MUTANT (rep_const) */    {"replace",               xml_replace,               2,-1,XML_MASK},
7271: /* MUTANT (rep_const) */    {"setChildren",           xml_setChildren,           0,0,XML_MASK},
7271: /* MUTANT (rep_const) */    {"setChildren",           xml_setChildren,           -1,0,XML_MASK},
7271: /* MUTANT (rep_const) */    {"setChildren",           xml_setChildren,           ((1)+1),0,XML_MASK},
7271: /* MUTANT (rep_const) */    {"setChildren",           xml_setChildren,           1,1,XML_MASK},
7271: /* MUTANT (rep_const) */    {"setChildren",           xml_setChildren,           1,-1,XML_MASK},
7272: /* MUTANT (rep_const) */    {"setLocalName",          xml_setLocalName,          0,0,XML_MASK},
7272: /* MUTANT (rep_const) */    {"setLocalName",          xml_setLocalName,          -1,0,XML_MASK},
7272: /* MUTANT (rep_const) */    {"setLocalName",          xml_setLocalName,          ((1)+1),0,XML_MASK},
7272: /* MUTANT (rep_const) */    {"setLocalName",          xml_setLocalName,          1,1,XML_MASK},
7272: /* MUTANT (rep_const) */    {"setLocalName",          xml_setLocalName,          1,-1,XML_MASK},
7273: /* MUTANT (rep_const) */    {"setName",               xml_setName,               0,0,XML_MASK},
7273: /* MUTANT (rep_const) */    {"setName",               xml_setName,               -1,0,XML_MASK},
7273: /* MUTANT (rep_const) */    {"setName",               xml_setName,               ((1)+1),0,XML_MASK},
7273: /* MUTANT (rep_const) */    {"setName",               xml_setName,               1,1,XML_MASK},
7273: /* MUTANT (rep_const) */    {"setName",               xml_setName,               1,-1,XML_MASK},
7274: /* MUTANT (rep_const) */    {"setNamespace",          xml_setNamespace,          0,0,XML_MASK},
7274: /* MUTANT (rep_const) */    {"setNamespace",          xml_setNamespace,          -1,0,XML_MASK},
7274: /* MUTANT (rep_const) */    {"setNamespace",          xml_setNamespace,          ((1)+1),0,XML_MASK},
7274: /* MUTANT (rep_const) */    {"setNamespace",          xml_setNamespace,          1,1,XML_MASK},
7274: /* MUTANT (rep_const) */    {"setNamespace",          xml_setNamespace,          1,-1,XML_MASK},
7275: /* MUTANT (rep_const) */    {js_text_str,             xml_text,                  1,0,GENERIC_MASK},
7275: /* MUTANT (rep_const) */    {js_text_str,             xml_text,                  -1,0,GENERIC_MASK},
7275: /* MUTANT (rep_const) */    {js_text_str,             xml_text,                  0,1,GENERIC_MASK},
7275: /* MUTANT (rep_const) */    {js_text_str,             xml_text,                  0,-1,GENERIC_MASK},
7276: /* MUTANT (rep_const) */    {js_toString_str,         xml_toString,              1,0,GENERIC_MASK},
7276: /* MUTANT (rep_const) */    {js_toString_str,         xml_toString,              -1,0,GENERIC_MASK},
7276: /* MUTANT (rep_const) */    {js_toString_str,         xml_toString,              0,1,GENERIC_MASK},
7276: /* MUTANT (rep_const) */    {js_toString_str,         xml_toString,              0,-1,GENERIC_MASK},
7277: /* MUTANT (rep_const) */    {js_toXMLString_str,      xml_toXMLString,           1,0,GENERIC_MASK},
7277: /* MUTANT (rep_const) */    {js_toXMLString_str,      xml_toXMLString,           -1,0,GENERIC_MASK},
7277: /* MUTANT (rep_const) */    {js_toXMLString_str,      xml_toXMLString,           0,1,GENERIC_MASK},
7277: /* MUTANT (rep_const) */    {js_toXMLString_str,      xml_toXMLString,           0,-1,GENERIC_MASK},
7278: /* MUTANT (rep_const) */    {js_toSource_str,         xml_toXMLString,           1,0,GENERIC_MASK},
7278: /* MUTANT (rep_const) */    {js_toSource_str,         xml_toXMLString,           -1,0,GENERIC_MASK},
7278: /* MUTANT (rep_const) */    {js_toSource_str,         xml_toXMLString,           0,1,GENERIC_MASK},
7278: /* MUTANT (rep_const) */    {js_toSource_str,         xml_toXMLString,           0,-1,GENERIC_MASK},
7279: /* MUTANT (rep_const) */    {js_valueOf_str,          xml_valueOf,               1,0,GENERIC_MASK},
7279: /* MUTANT (rep_const) */    {js_valueOf_str,          xml_valueOf,               -1,0,GENERIC_MASK},
7279: /* MUTANT (rep_const) */    {js_valueOf_str,          xml_valueOf,               0,1,GENERIC_MASK},
7279: /* MUTANT (rep_const) */    {js_valueOf_str,          xml_valueOf,               0,-1,GENERIC_MASK},
7280: /* MUTANT (rep_const) */    {1,0,0,0,0}
7280: /* MUTANT (rep_const) */    {-1,0,0,0,0}
7280: /* MUTANT (rep_const) */    {0,1,0,0,0}
7280: /* MUTANT (rep_const) */    {0,-1,0,0,0}
7280: /* MUTANT (rep_const) */    {0,0,1,0,0}
7280: /* MUTANT (rep_const) */    {0,0,-1,0,0}
7280: /* MUTANT (rep_const) */    {0,0,0,1,0}
7280: /* MUTANT (rep_const) */    {0,0,0,-1,0}
7280: /* MUTANT (rep_const) */    {0,0,0,0,1}
7280: /* MUTANT (rep_const) */    {0,0,0,0,-1}
7286: /* MUTANT (del_stmt) */ /*     int i; */ 
7287: /* MUTANT (del_stmt) */ /*     const char *name; */ 
7288: /* MUTANT (del_stmt) */ /*     jsval v; */ 
7290: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i <= XML_PRETTY_INDENT; i++) {
7290: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i > XML_PRETTY_INDENT; i++) {
7290: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i >= XML_PRETTY_INDENT; i++) {
7290: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i == XML_PRETTY_INDENT; i++) {
7290: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i != XML_PRETTY_INDENT; i++) {
7290: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i < XML_PRETTY_INDENT; i--) {
7291: /* MUTANT (del_stmt) */ /*         name = xml_static_props[i].name; */ 
7292: /* MUTANT (negate) */        if(! (!JS_GetProperty(cx, from, name, &v)))
7294: /* MUTANT (rep_op) */        if (JSVAL_IS_BOOLEAN(v) || !JS_SetProperty(cx, to, name, &v))
7294: /* MUTANT (negate) */        if(! (JSVAL_IS_BOOLEAN(v) && !JS_SetProperty(cx, to, name, &v)))
7299: /* MUTANT (negate) */    if(! (!JS_GetProperty(cx, from, name, &v)))
7301: /* MUTANT (rep_op) */    if (JSVAL_IS_NUMBER(v) || !JS_SetProperty(cx, to, name, &v))
7301: /* MUTANT (negate) */    if(! (JSVAL_IS_NUMBER(v) && !JS_SetProperty(cx, to, name, &v)))
7303: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
7309: /* MUTANT (del_stmt) */ /*     int i; */ 
7310: /* MUTANT (del_stmt) */ /*     jsval v; */ 
7312: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i <= XML_PRETTY_INDENT; i++) {
7312: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i > XML_PRETTY_INDENT; i++) {
7312: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i >= XML_PRETTY_INDENT; i++) {
7312: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i == XML_PRETTY_INDENT; i++) {
7312: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i != XML_PRETTY_INDENT; i++) {
7312: /* MUTANT (rep_op) */    for (i = XML_IGNORE_COMMENTS; i < XML_PRETTY_INDENT; i--) {
7313: /* MUTANT (del_stmt) */ /*         v = JSVAL_TRUE; */ 
7314: /* MUTANT (negate) */        if(! (!JS_SetProperty(cx, obj, xml_static_props[i].name, &v)))
7317: /* MUTANT (rep_const) */    v = INT_TO_JSVAL(0);
7317: /* MUTANT (rep_const) */    v = INT_TO_JSVAL(1);
7317: /* MUTANT (rep_const) */    v = INT_TO_JSVAL(-1);
7317: /* MUTANT (rep_const) */    v = INT_TO_JSVAL(((2)+1));
7317: /* MUTANT (rep_const) */    v = INT_TO_JSVAL(((2)-1));
7318: /* MUTANT (del_stmt) */ /*     return JS_SetProperty(cx, obj, xml_static_props[i].name, &v); */ 
7324: /* MUTANT (del_stmt) */ /*     JSObject *settings; */ 
7326: /* MUTANT (del_stmt) */ /*     settings = JS_NewObject(cx, NULL, NULL, NULL); */ 
7327: /* MUTANT (negate) */    if(! (!settings))
7329: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(settings); */ 
7330: /* MUTANT (del_stmt) */ /*     return CopyXMLSettings(cx, obj, settings); */ 
7337: /* MUTANT (del_stmt) */ /*     jsval v; */ 
7338: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
7339: /* MUTANT (del_stmt) */ /*     JSObject *settings; */ 
7341: /* MUTANT (del_stmt) */ /*     v = argv[0]; */ 
7341: /* MUTANT (rep_const) */    v = argv[1];
7341: /* MUTANT (rep_const) */    v = argv[-1];
7342: /* MUTANT (rep_op) */    if (JSVAL_IS_NULL(v) && JSVAL_IS_VOID(v)) {
7342: /* MUTANT (negate) */    if(! (JSVAL_IS_NULL(v) || JSVAL_IS_VOID(v))) {
7343: /* MUTANT (del_stmt) */ /*         cx->xmlSettingFlags = 0; */ 
7343: /* MUTANT (rep_const) */        cx->xmlSettingFlags = 1;
7343: /* MUTANT (rep_const) */        cx->xmlSettingFlags = -1;
7344: /* MUTANT (del_stmt) */ /*         ok = SetDefaultXMLSettings(cx, obj); */ 
7346: /* MUTANT (negate) */        if(! (JSVAL_IS_PRIMITIVE(v)))
7348: /* MUTANT (del_stmt) */ /*         settings = JSVAL_TO_OBJECT(v); */ 
7349: /* MUTANT (del_stmt) */ /*         cx->xmlSettingFlags = 0; */ 
7349: /* MUTANT (rep_const) */        cx->xmlSettingFlags = 1;
7349: /* MUTANT (rep_const) */        cx->xmlSettingFlags = -1;
7350: /* MUTANT (del_stmt) */ /*         ok = CopyXMLSettings(cx, settings, obj); */ 
7352: /* MUTANT (negate) */    if(! (ok))
7354: /* MUTANT (del_stmt) */ /*     return ok; */ 
7361: /* MUTANT (del_stmt) */ /*     JSObject *settings; */ 
7363: /* MUTANT (del_stmt) */ /*     settings = JS_NewObject(cx, NULL, NULL, NULL); */ 
7364: /* MUTANT (negate) */    if(! (!settings))
7366: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(settings); */ 
7367: /* MUTANT (del_stmt) */ /*     return SetDefaultXMLSettings(cx, settings); */ 
7371: /* MUTANT (rep_const) */    {"settings",         xml_settings,          1,0,0},
7371: /* MUTANT (rep_const) */    {"settings",         xml_settings,          -1,0,0},
7371: /* MUTANT (rep_const) */    {"settings",         xml_settings,          0,1,0},
7371: /* MUTANT (rep_const) */    {"settings",         xml_settings,          0,-1,0},
7371: /* MUTANT (rep_const) */    {"settings",         xml_settings,          0,0,1},
7371: /* MUTANT (rep_const) */    {"settings",         xml_settings,          0,0,-1},
7372: /* MUTANT (rep_const) */    {"setSettings",      xml_setSettings,       0,0,0},
7372: /* MUTANT (rep_const) */    {"setSettings",      xml_setSettings,       -1,0,0},
7372: /* MUTANT (rep_const) */    {"setSettings",      xml_setSettings,       ((1)+1),0,0},
7372: /* MUTANT (rep_const) */    {"setSettings",      xml_setSettings,       1,1,0},
7372: /* MUTANT (rep_const) */    {"setSettings",      xml_setSettings,       1,-1,0},
7372: /* MUTANT (rep_const) */    {"setSettings",      xml_setSettings,       1,0,1},
7372: /* MUTANT (rep_const) */    {"setSettings",      xml_setSettings,       1,0,-1},
7373: /* MUTANT (rep_const) */    {"defaultSettings",  xml_defaultSettings,   1,0,0},
7373: /* MUTANT (rep_const) */    {"defaultSettings",  xml_defaultSettings,   -1,0,0},
7373: /* MUTANT (rep_const) */    {"defaultSettings",  xml_defaultSettings,   0,1,0},
7373: /* MUTANT (rep_const) */    {"defaultSettings",  xml_defaultSettings,   0,-1,0},
7373: /* MUTANT (rep_const) */    {"defaultSettings",  xml_defaultSettings,   0,0,1},
7373: /* MUTANT (rep_const) */    {"defaultSettings",  xml_defaultSettings,   0,0,-1},
7374: /* MUTANT (rep_const) */    {1,0,0,0,0}
7374: /* MUTANT (rep_const) */    {-1,0,0,0,0}
7374: /* MUTANT (rep_const) */    {0,1,0,0,0}
7374: /* MUTANT (rep_const) */    {0,-1,0,0,0}
7374: /* MUTANT (rep_const) */    {0,0,1,0,0}
7374: /* MUTANT (rep_const) */    {0,0,-1,0,0}
7374: /* MUTANT (rep_const) */    {0,0,0,1,0}
7374: /* MUTANT (rep_const) */    {0,0,0,-1,0}
7374: /* MUTANT (rep_const) */    {0,0,0,0,1}
7374: /* MUTANT (rep_const) */    {0,0,0,0,-1}
7380: /* MUTANT (del_stmt) */ /*     jsval v; */ 
7381: /* MUTANT (del_stmt) */ /*     JSXML *xml, *copy; */ 
7382: /* MUTANT (del_stmt) */ /*     JSObject *xobj, *vobj; */ 
7383: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
7385: /* MUTANT (del_stmt) */ /*     v = argv[0]; */ 
7385: /* MUTANT (rep_const) */    v = argv[1];
7385: /* MUTANT (rep_const) */    v = argv[-1];
7386: /* MUTANT (rep_op) */    if (JSVAL_IS_NULL(v) && JSVAL_IS_VOID(v))
7386: /* MUTANT (negate) */    if(! (JSVAL_IS_NULL(v) || JSVAL_IS_VOID(v)))
7389: /* MUTANT (del_stmt) */ /*     xobj = ToXML(cx, v); */ 
7390: /* MUTANT (negate) */    if(! (!xobj))
7392: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(xobj); */ 
7393: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, xobj); */ 
7395: /* MUTANT (rep_op) */    if ((cx->fp->flags & JSFRAME_CONSTRUCTING) || !JSVAL_IS_PRIMITIVE(v)) {
7395: /* MUTANT (negate) */    if(! ((cx->fp->flags & JSFRAME_CONSTRUCTING) && !JSVAL_IS_PRIMITIVE(v))) {
7396: /* MUTANT (del_stmt) */ /*         vobj = JSVAL_TO_OBJECT(v); */ 
7397: /* MUTANT (del_stmt) */ /*         clasp = OBJ_GET_CLASS(cx, vobj); */ 
7398: /* MUTANT (rep_op) */        if (clasp != &js_XMLClass ||
7398: /* MUTANT (rep_op) */        if (clasp == &js_XMLClass &&
7401: /* MUTANT (del_stmt) */ /*             copy = DeepCopy(cx, xml, obj, 0); */ 
7401: /* MUTANT (rep_const) */            copy = DeepCopy(cx, xml, obj, 1);
7401: /* MUTANT (rep_const) */            copy = DeepCopy(cx, xml, obj, -1);
7402: /* MUTANT (negate) */            if(! (!copy))
7404: /* MUTANT (del_stmt) */ /*             JS_ASSERT(copy->object == obj); */ 
7404: /* MUTANT (rep_op) */            JS_ASSERT(copy->object != obj);
7405: /* MUTANT (del_stmt) */ /*             *rval = OBJECT_TO_JSVAL(obj); */ 
7406: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
7415: /* MUTANT (del_stmt) */ /*     jsval v; */ 
7416: /* MUTANT (del_stmt) */ /*     JSObject *vobj, *listobj; */ 
7417: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list; */ 
7419: /* MUTANT (del_stmt) */ /*     v = argv[0]; */ 
7419: /* MUTANT (rep_const) */    v = argv[1];
7419: /* MUTANT (rep_const) */    v = argv[-1];
7420: /* MUTANT (rep_op) */    if (JSVAL_IS_NULL(v) && JSVAL_IS_VOID(v))
7420: /* MUTANT (negate) */    if(! (JSVAL_IS_NULL(v) || JSVAL_IS_VOID(v)))
7423: /* MUTANT (rep_op) */    if ((cx->fp->flags & JSFRAME_CONSTRUCTING) || !JSVAL_IS_PRIMITIVE(v)) {
7423: /* MUTANT (negate) */    if(! ((cx->fp->flags & JSFRAME_CONSTRUCTING) && !JSVAL_IS_PRIMITIVE(v))) {
7424: /* MUTANT (del_stmt) */ /*         vobj = JSVAL_TO_OBJECT(v); */ 
7425: /* MUTANT (negate) */        if(! (OBJECT_IS_XML(cx, vobj))) {
7426: /* MUTANT (del_stmt) */ /*             xml = (JSXML *) JS_GetPrivate(cx, vobj); */ 
7427: /* MUTANT (rep_op) */            if (xml->xml_class != JSXML_CLASS_LIST) {
7427: /* MUTANT (negate) */            if(! (xml->xml_class == JSXML_CLASS_LIST)) {
7428: /* MUTANT (del_stmt) */ /*                 listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
7429: /* MUTANT (negate) */                if(! (!listobj))
7431: /* MUTANT (del_stmt) */ /*                 *rval = OBJECT_TO_JSVAL(listobj); */ 
7433: /* MUTANT (del_stmt) */ /*                 list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
7434: /* MUTANT (negate) */                if(! (!Append(cx, list, xml)))
7436: /* MUTANT (del_stmt) */ /*                 return JS_TRUE; */ 
7443: /* MUTANT (negate) */    if(! (!listobj))
7446: /* MUTANT (del_stmt) */ /*     *rval = OBJECT_TO_JSVAL(listobj); */ 
7447: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
7465: /* MUTANT (del_stmt) */ /* uint32  xml_serial; */ 
7471: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
7473: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) js_NewGCThing(cx, GCX_XML, sizeof_JSXML[xml_class]); */ 
7474: /* MUTANT (negate) */    if(! (!xml))
7477: /* MUTANT (del_stmt) */ /*     xml->object = NULL; */ 
7478: /* MUTANT (del_stmt) */ /*     xml->domnode = NULL; */ 
7479: /* MUTANT (del_stmt) */ /*     xml->parent = NULL; */ 
7480: /* MUTANT (del_stmt) */ /*     xml->name = NULL; */ 
7481: /* MUTANT (del_stmt) */ /*     xml->xml_class = xml_class; */ 
7482: /* MUTANT (del_stmt) */ /*     xml->xml_flags = 0; */ 
7482: /* MUTANT (rep_const) */    xml->xml_flags = 1;
7482: /* MUTANT (rep_const) */    xml->xml_flags = -1;
7483: /* MUTANT (negate) */    if(! (JSXML_CLASS_HAS_VALUE(xml_class))) {
7484: /* MUTANT (del_stmt) */ /*         xml->xml_value = cx->runtime->emptyString; */ 
7486: /* MUTANT (del_stmt) */ /*         XMLArrayInit(cx, &xml->xml_kids, 0); */ 
7486: /* MUTANT (rep_const) */        XMLArrayInit(cx, &xml->xml_kids, 1);
7486: /* MUTANT (rep_const) */        XMLArrayInit(cx, &xml->xml_kids, -1);
7487: /* MUTANT (rep_op) */        if (xml_class != JSXML_CLASS_LIST) {
7487: /* MUTANT (negate) */        if(! (xml_class == JSXML_CLASS_LIST)) {
7488: /* MUTANT (del_stmt) */ /*             xml->xml_target = NULL; */ 
7489: /* MUTANT (del_stmt) */ /*             xml->xml_targetprop = NULL; */ 
7491: /* MUTANT (del_stmt) */ /*             XMLArrayInit(cx, &xml->xml_namespaces, 0); */ 
7491: /* MUTANT (rep_const) */            XMLArrayInit(cx, &xml->xml_namespaces, 1);
7491: /* MUTANT (rep_const) */            XMLArrayInit(cx, &xml->xml_namespaces, -1);
7492: /* MUTANT (del_stmt) */ /*             XMLArrayInit(cx, &xml->xml_attrs, 0); */ 
7492: /* MUTANT (rep_const) */            XMLArrayInit(cx, &xml->xml_attrs, 1);
7492: /* MUTANT (rep_const) */            XMLArrayInit(cx, &xml->xml_attrs, -1);
7498: /* MUTANT (del_stmt) */ /*     xml->serial = xml_serial++; */ 
7498: /* MUTANT (rep_op) */    xml->serial = xml_serial--;
7501: /* MUTANT (del_stmt) */ /*     METER(xml_stats.livexml); */ 
7502: /* MUTANT (del_stmt) */ /*     return xml; */ 
7508: /* MUTANT (del_stmt) */ /*     XMLArrayTrim(&xml->xml_kids); */ 
7510: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
7510: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
7511: /* MUTANT (negate) */        if(! (xml->xml_target))
7513: /* MUTANT (negate) */        if(! (xml->xml_targetprop))
7520: /* MUTANT (del_stmt) */ /*         XMLArrayCursorMark(cx, xml->xml_namespaces.cursors); */ 
7521: /* MUTANT (del_stmt) */ /*         XMLArrayTrim(&xml->xml_namespaces); */ 
7527: /* MUTANT (del_stmt) */ /*         XMLArrayCursorMark(cx, xml->xml_attrs.cursors); */ 
7528: /* MUTANT (del_stmt) */ /*         XMLArrayTrim(&xml->xml_attrs); */ 
7535: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, xml->object, js_object_str, arg); */ 
7536: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, xml->name, js_name_str, arg); */ 
7537: /* MUTANT (del_stmt) */ /*     JS_MarkGCThing(cx, xml->parent, js_xml_parent_str, arg); */ 
7539: /* MUTANT (negate) */    if(! (JSXML_HAS_VALUE(xml))) {
7540: /* MUTANT (del_stmt) */ /*         JS_MarkGCThing(cx, xml->xml_value, "value", arg); */ 
7546: /* MUTANT (del_stmt) */ /*         XMLArrayCursorMark(cx, xml->xml_kids.cursors); */ 
7548: /* MUTANT (del_stmt) */ /*         xml_mark_tail(cx, xml, arg); */ 
7555: /* MUTANT (negate) */    if(! (JSXML_HAS_KIDS(xml))) {
7556: /* MUTANT (del_stmt) */ /*         XMLArrayFinish(cx, &xml->xml_kids); */ 
7557: /* MUTANT (rep_op) */        if (xml->xml_class != JSXML_CLASS_ELEMENT) {
7557: /* MUTANT (negate) */        if(! (xml->xml_class == JSXML_CLASS_ELEMENT)) {
7558: /* MUTANT (del_stmt) */ /*             XMLArrayFinish(cx, &xml->xml_namespaces); */ 
7559: /* MUTANT (del_stmt) */ /*             XMLArrayFinish(cx, &xml->xml_attrs); */ 
7573: /* MUTANT (del_stmt) */ /*     jsval nsval; */ 
7574: /* MUTANT (del_stmt) */ /*     JSXMLNamespace *ns; */ 
7575: /* MUTANT (del_stmt) */ /*     JSXMLArray nsarray; */ 
7576: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
7578: /* MUTANT (negate) */    if(! (!js_GetDefaultXMLNamespace(cx, &nsval)))
7580: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!JSVAL_IS_PRIMITIVE(nsval)); */ 
7581: /* MUTANT (del_stmt) */ /*     ns = (JSXMLNamespace *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(nsval)); */ 
7583: /* MUTANT (rep_const) */    if (!XMLArrayInit(cx, &nsarray, 0))
7583: /* MUTANT (rep_const) */    if (!XMLArrayInit(cx, &nsarray, -1))
7583: /* MUTANT (rep_const) */    if (!XMLArrayInit(cx, &nsarray, ((1)+1)))
7583: /* MUTANT (negate) */    if(! (!XMLArrayInit(cx, &nsarray, 1)))
7586: /* MUTANT (del_stmt) */ /*     XMLARRAY_APPEND(cx, &nsarray, ns); */ 
7587: /* MUTANT (del_stmt) */ /*     xml = ParseNodeToXML(cx, pn, &nsarray, XSF_PRECOMPILED_ROOT); */ 
7588: /* MUTANT (del_stmt) */ /*     XMLArrayFinish(cx, &nsarray); */ 
7589: /* MUTANT (negate) */    if(! (!xml))
7592: /* MUTANT (del_stmt) */ /*     return xml->object; */ 
7598: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
7599: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
7600: /* MUTANT (del_stmt) */ /*     JSTempValueRooter tvr; */ 
7602: /* MUTANT (del_stmt) */ /*     xml = js_NewXML(cx, xml_class); */ 
7603: /* MUTANT (negate) */    if(! (!xml))
7605: /* MUTANT (del_stmt) */ /*     JS_PUSH_SINGLE_TEMP_ROOT(cx, OBJECT_TO_JSVAL(xml), &tvr); */ 
7606: /* MUTANT (del_stmt) */ /*     obj = js_GetXMLObject(cx, xml); */ 
7607: /* MUTANT (del_stmt) */ /*     JS_POP_TEMP_ROOT(cx, &tvr); */ 
7608: /* MUTANT (del_stmt) */ /*     return obj; */ 
7614: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
7616: /* MUTANT (del_stmt) */ /*     obj = js_NewObject(cx, &js_XMLClass, NULL, NULL); */ 
7617: /* MUTANT (rep_op) */    if (!obj && !JS_SetPrivate(cx, obj, xml)) {
7617: /* MUTANT (negate) */    if(! (!obj || !JS_SetPrivate(cx, obj, xml))) {
7618: /* MUTANT (del_stmt) */ /*         cx->newborn[GCX_OBJECT] = NULL; */ 
7619: /* MUTANT (del_stmt) */ /*         return NULL; */ 
7622: /* MUTANT (del_stmt) */ /*     METER(xml_stats.livexmlobj); */ 
7623: /* MUTANT (del_stmt) */ /*     return obj; */ 
7629: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
7631: /* MUTANT (del_stmt) */ /*     obj = xml->object; */ 
7632: /* MUTANT (negate) */    if(! (obj)) {
7633: /* MUTANT (del_stmt) */ /*         JS_ASSERT(JS_GetPrivate(cx, obj) == xml); */ 
7633: /* MUTANT (rep_op) */        JS_ASSERT(JS_GetPrivate(cx, obj) != xml);
7634: /* MUTANT (del_stmt) */ /*         return obj; */ 
7646: /* MUTANT (rep_op) */    JS_ASSERT(!xml->parent &&
7647: /* MUTANT (rep_op) */              !xml->parent->object &&
7650: /* MUTANT (del_stmt) */ /*     obj = NewXMLObject(cx, xml); */ 
7651: /* MUTANT (negate) */    if(! (!obj))
7653: /* MUTANT (del_stmt) */ /*     xml->object = obj; */ 
7654: /* MUTANT (del_stmt) */ /*     return obj; */ 
7660: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_NamespaceClass.base, Namespace, 0,
7660: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_NamespaceClass.base, Namespace, 1,
7660: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_NamespaceClass.base, Namespace, -1,
7660: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_NamespaceClass.base, Namespace, ((2)+1),
7660: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_NamespaceClass.base, Namespace, ((2)-1),
7667: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_QNameClass.base, QName, 0,
7667: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_QNameClass.base, QName, 1,
7667: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_QNameClass.base, QName, -1,
7667: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_QNameClass.base, QName, ((2)+1),
7667: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_QNameClass.base, QName, ((2)-1),
7674: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_AttributeNameClass, AttributeName, 0,
7674: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_AttributeNameClass, AttributeName, 1,
7674: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_AttributeNameClass, AttributeName, -1,
7674: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_AttributeNameClass, AttributeName, ((2)+1),
7674: /* MUTANT (rep_const) */    return JS_InitClass(cx, obj, NULL, &js_AttributeNameClass, AttributeName, ((2)-1),
7681: /* MUTANT (del_stmt) */ /*     jsval v; */ 
7683: /* MUTANT (negate) */    if(! (!js_GetAnyName(cx, &v)))
7685: /* MUTANT (del_stmt) */ /*     return JSVAL_TO_OBJECT(v); */ 
7691: /* MUTANT (del_stmt) */ /*     JSObject *proto, *pobj, *ctor; */ 
7692: /* MUTANT (del_stmt) */ /*     JSFunctionSpec *fs; */ 
7693: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
7694: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
7695: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
7696: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
7697: /* MUTANT (del_stmt) */ /*     jsval cval, argv[1], junk; */ 
7697: /* MUTANT (rep_const) */    jsval cval, argv[0], junk;
7697: /* MUTANT (rep_const) */    jsval cval, argv[-1], junk;
7697: /* MUTANT (rep_const) */    jsval cval, argv[((1)+1)], junk;
7700: /* MUTANT (rep_const) */    if (!JS_DefineFunction(cx, obj, js_isXMLName_str, xml_isXMLName, 0, 0))
7700: /* MUTANT (rep_const) */    if (!JS_DefineFunction(cx, obj, js_isXMLName_str, xml_isXMLName, -1, 0))
7700: /* MUTANT (rep_const) */    if (!JS_DefineFunction(cx, obj, js_isXMLName_str, xml_isXMLName, ((1)+1), 0))
7700: /* MUTANT (rep_const) */    if (!JS_DefineFunction(cx, obj, js_isXMLName_str, xml_isXMLName, 1, 1))
7700: /* MUTANT (rep_const) */    if (!JS_DefineFunction(cx, obj, js_isXMLName_str, xml_isXMLName, 1, -1))
7700: /* MUTANT (negate) */    if(! (!JS_DefineFunction(cx, obj, js_isXMLName_str, xml_isXMLName, 1, 0)))
7704: /* MUTANT (rep_const) */    proto = JS_InitClass(cx, obj, NULL, &js_XMLClass, XML, 0,
7704: /* MUTANT (rep_const) */    proto = JS_InitClass(cx, obj, NULL, &js_XMLClass, XML, -1,
7704: /* MUTANT (rep_const) */    proto = JS_InitClass(cx, obj, NULL, &js_XMLClass, XML, ((1)+1),
7707: /* MUTANT (negate) */    if(! (!proto))
7717: /* MUTANT (rep_op) */    for (fs = xml_methods; fs->name; fs--) {
7720: /* MUTANT (negate) */        if(! (!fun))
7722: /* MUTANT (del_stmt) */ /*         fun->extra = 0; */ 
7722: /* MUTANT (rep_const) */        fun->extra = 1;
7722: /* MUTANT (rep_const) */        fun->extra = -1;
7723: /* MUTANT (del_stmt) */ /*         fun->spare = fs->extra; */ 
7727: /* MUTANT (rep_op) */    if (!xml && !JS_SetPrivate(cx, proto, xml))
7727: /* MUTANT (negate) */    if(! (!xml || !JS_SetPrivate(cx, proto, xml)))
7729: /* MUTANT (del_stmt) */ /*     xml->object = proto; */ 
7730: /* MUTANT (del_stmt) */ /*     METER(xml_stats.xmlobj); */ 
7731: /* MUTANT (del_stmt) */ /*     METER(xml_stats.livexmlobj); */ 
7742: /* MUTANT (del_stmt) */ /*         return NULL; */ 
7745: /* MUTANT (del_stmt) */ /*     sprop = (JSScopeProperty *) prop; */ 
7746: /* MUTANT (del_stmt) */ /*     JS_ASSERT(SPROP_HAS_VALID_SLOT(sprop, OBJ_SCOPE(pobj))); */ 
7747: /* MUTANT (del_stmt) */ /*     cval = OBJ_GET_SLOT(cx, pobj, sprop->slot); */ 
7748: /* MUTANT (del_stmt) */ /*     OBJ_DROP_PROPERTY(cx, pobj, prop); */ 
7749: /* MUTANT (del_stmt) */ /*     JS_ASSERT(JSVAL_IS_FUNCTION(cx, cval)); */ 
7752: /* MUTANT (del_stmt) */ /*     ctor = JSVAL_TO_OBJECT(cval); */ 
7753: /* MUTANT (del_stmt) */ /*     argv[0] = JSVAL_VOID; */ 
7753: /* MUTANT (rep_const) */    argv[1] = JSVAL_VOID;
7753: /* MUTANT (rep_const) */    argv[-1] = JSVAL_VOID;
7754: /* MUTANT (rep_const) */    if (!xml_setSettings(cx, ctor, 0, argv, &junk))
7754: /* MUTANT (rep_const) */    if (!xml_setSettings(cx, ctor, -1, argv, &junk))
7754: /* MUTANT (rep_const) */    if (!xml_setSettings(cx, ctor, ((1)+1), argv, &junk))
7754: /* MUTANT (negate) */    if(! (!xml_setSettings(cx, ctor, 1, argv, &junk)))
7758: /* MUTANT (del_stmt) */ /*     fun = JS_DefineFunction(cx, obj, js_XMLList_str, XMLList, 1, 0); */ 
7758: /* MUTANT (rep_const) */    fun = JS_DefineFunction(cx, obj, js_XMLList_str, XMLList, 0, 0);
7758: /* MUTANT (rep_const) */    fun = JS_DefineFunction(cx, obj, js_XMLList_str, XMLList, -1, 0);
7758: /* MUTANT (rep_const) */    fun = JS_DefineFunction(cx, obj, js_XMLList_str, XMLList, ((1)+1), 0);
7758: /* MUTANT (rep_const) */    fun = JS_DefineFunction(cx, obj, js_XMLList_str, XMLList, 1, 1);
7758: /* MUTANT (rep_const) */    fun = JS_DefineFunction(cx, obj, js_XMLList_str, XMLList, 1, -1);
7759: /* MUTANT (negate) */    if(! (!fun))
7762: /* MUTANT (rep_op) */                              JSPROP_READONLY & JSPROP_PERMANENT)) {
7763: /* MUTANT (del_stmt) */ /*         return NULL; */ 
7771: /* MUTANT (negate) */    if(! (!js_InitNamespaceClass(cx, obj)))
7773: /* MUTANT (negate) */    if(! (!js_InitQNameClass(cx, obj)))
7775: /* MUTANT (negate) */    if(! (!js_InitAttributeNameClass(cx, obj)))
7777: /* MUTANT (negate) */    if(! (!js_InitAnyNameClass(cx, obj)))
7779: /* MUTANT (del_stmt) */ /*     return js_InitXMLClass(cx, obj); */ 
7785: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
7786: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
7787: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
7788: /* MUTANT (del_stmt) */ /*     JSString *prefix, *uri; */ 
7791: /* MUTANT (del_stmt) */ /*     static const char anti_uri[] = "@mozilla.org/js/function"; */ 
7793: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
7794: /* MUTANT (del_stmt) */ /*     obj = rt->functionNamespaceObject; */ 
7795: /* MUTANT (negate) */    if(! (!obj)) {
7796: /* MUTANT (del_stmt) */ /*         atom = js_Atomize(cx, js_function_str, 8, 0); */ 
7796: /* MUTANT (rep_const) */        atom = js_Atomize(cx, js_function_str, 0, 0);
7796: /* MUTANT (rep_const) */        atom = js_Atomize(cx, js_function_str, 1, 0);
7796: /* MUTANT (rep_const) */        atom = js_Atomize(cx, js_function_str, -1, 0);
7796: /* MUTANT (rep_const) */        atom = js_Atomize(cx, js_function_str, ((8)+1), 0);
7796: /* MUTANT (rep_const) */        atom = js_Atomize(cx, js_function_str, ((8)-1), 0);
7796: /* MUTANT (rep_const) */        atom = js_Atomize(cx, js_function_str, 8, 1);
7796: /* MUTANT (rep_const) */        atom = js_Atomize(cx, js_function_str, 8, -1);
7797: /* MUTANT (del_stmt) */ /*         JS_ASSERT(atom); */ 
7798: /* MUTANT (del_stmt) */ /*         prefix = ATOM_TO_STRING(atom); */ 
7800: /* MUTANT (del_stmt) */ /*         atom = js_Atomize(cx, anti_uri, sizeof anti_uri - 1, ATOM_PINNED); */ 
7800: /* MUTANT (rep_const) */        atom = js_Atomize(cx, anti_uri, sizeof anti_uri - 0, ATOM_PINNED);
7800: /* MUTANT (rep_const) */        atom = js_Atomize(cx, anti_uri, sizeof anti_uri - -1, ATOM_PINNED);
7800: /* MUTANT (rep_const) */        atom = js_Atomize(cx, anti_uri, sizeof anti_uri - ((1)+1), ATOM_PINNED);
7801: /* MUTANT (negate) */        if(! (!atom))
7803: /* MUTANT (del_stmt) */ /*         rt->atomState.lazy.functionNamespaceURIAtom = atom; */ 
7805: /* MUTANT (del_stmt) */ /*         uri = ATOM_TO_STRING(atom); */ 
7806: /* MUTANT (del_stmt) */ /*         obj = js_NewXMLNamespaceObject(cx, prefix, uri, JS_FALSE); */ 
7807: /* MUTANT (negate) */        if(! (!obj))
7816: /* MUTANT (del_stmt) */ /*         OBJ_SET_PROTO(cx, obj, NULL); */ 
7817: /* MUTANT (del_stmt) */ /*         OBJ_SET_PARENT(cx, obj, NULL); */ 
7818: /* MUTANT (del_stmt) */ /*         rt->functionNamespaceObject = obj; */ 
7821: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
7842: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp; */ 
7843: /* MUTANT (del_stmt) */ /*     JSObject *nsobj, *obj, *tmp; */ 
7844: /* MUTANT (del_stmt) */ /*     jsval v; */ 
7846: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
7847: /* MUTANT (del_stmt) */ /*     nsobj = fp->xmlNamespace; */ 
7848: /* MUTANT (negate) */    if(! (nsobj)) {
7849: /* MUTANT (del_stmt) */ /*         *vp = OBJECT_TO_JSVAL(nsobj); */ 
7850: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
7855: /* MUTANT (del_stmt) */ /*         obj = tmp; */ 
7856: /* MUTANT (negate) */        if(! (!OBJ_GET_PROPERTY(cx, obj, JS_DEFAULT_XML_NAMESPACE_ID, &v)))
7858: /* MUTANT (negate) */        if(! (!JSVAL_IS_PRIMITIVE(v))) {
7859: /* MUTANT (del_stmt) */ /*             fp->xmlNamespace = JSVAL_TO_OBJECT(v); */ 
7860: /* MUTANT (del_stmt) */ /*             *vp = v; */ 
7861: /* MUTANT (del_stmt) */ /*             return JS_TRUE; */ 
7865: /* MUTANT (rep_const) */    nsobj = js_ConstructObject(cx, &js_NamespaceClass.base, NULL, obj, 1, NULL);
7865: /* MUTANT (rep_const) */    nsobj = js_ConstructObject(cx, &js_NamespaceClass.base, NULL, obj, -1, NULL);
7866: /* MUTANT (negate) */    if(! (!nsobj))
7868: /* MUTANT (del_stmt) */ /*     v = OBJECT_TO_JSVAL(nsobj); */ 
7869: /* MUTANT (rep_op) */    if (obj ||
7873: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
7876: /* MUTANT (del_stmt) */ /*     *vp = v; */ 
7877: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
7883: /* MUTANT (del_stmt) */ /*     jsval argv[2]; */ 
7883: /* MUTANT (rep_const) */    jsval argv[0];
7883: /* MUTANT (rep_const) */    jsval argv[1];
7883: /* MUTANT (rep_const) */    jsval argv[-1];
7883: /* MUTANT (rep_const) */    jsval argv[((2)+1)];
7883: /* MUTANT (rep_const) */    jsval argv[((2)-1)];
7884: /* MUTANT (del_stmt) */ /*     JSObject *nsobj, *varobj; */ 
7885: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp; */ 
7887: /* MUTANT (del_stmt) */ /*     argv[0] = STRING_TO_JSVAL(cx->runtime->emptyString); */ 
7887: /* MUTANT (rep_const) */    argv[1] = STRING_TO_JSVAL(cx->runtime->emptyString);
7887: /* MUTANT (rep_const) */    argv[-1] = STRING_TO_JSVAL(cx->runtime->emptyString);
7888: /* MUTANT (del_stmt) */ /*     argv[1] = v; */ 
7888: /* MUTANT (rep_const) */    argv[0] = v;
7888: /* MUTANT (rep_const) */    argv[-1] = v;
7888: /* MUTANT (rep_const) */    argv[((1)+1)] = v;
7890: /* MUTANT (rep_const) */                               0, argv);
7890: /* MUTANT (rep_const) */                               1, argv);
7890: /* MUTANT (rep_const) */                               -1, argv);
7890: /* MUTANT (rep_const) */                               ((2)+1), argv);
7890: /* MUTANT (rep_const) */                               ((2)-1), argv);
7891: /* MUTANT (negate) */    if(! (!nsobj))
7893: /* MUTANT (del_stmt) */ /*     v = OBJECT_TO_JSVAL(nsobj); */ 
7895: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
7896: /* MUTANT (del_stmt) */ /*     varobj = fp->varobj; */ 
7897: /* MUTANT (negate) */    if(! (varobj)) {
7901: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
7904: /* MUTANT (del_stmt) */ /*         JS_ASSERT(fp->fun && !(fp->fun->flags & JSFUN_HEAVYWEIGHT)); */ 
7904: /* MUTANT (rep_op) */        JS_ASSERT(fp->fun || !(fp->fun->flags & JSFUN_HEAVYWEIGHT));
7907: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
7913: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
7915: /* MUTANT (del_stmt) */ /*     qn = ToAttributeName(cx, *vp); */ 
7916: /* MUTANT (negate) */    if(! (!qn))
7918: /* MUTANT (del_stmt) */ /*     *vp = OBJECT_TO_JSVAL(qn->object); */ 
7919: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
7925: /* MUTANT (del_stmt) */ /*     return EscapeAttributeValue(cx, NULL, str); */ 
7931: /* MUTANT (del_stmt) */ /*     size_t len, len2, newlen; */ 
7932: /* MUTANT (del_stmt) */ /*     jschar *chars; */ 
7934: /* MUTANT (rep_op) */    if (JSSTRING_IS_DEPENDENT(str) &&
7937: /* MUTANT (rep_const) */                                1);
7937: /* MUTANT (rep_const) */                                -1);
7938: /* MUTANT (negate) */        if(! (!str))
7943: /* MUTANT (del_stmt) */ /*     len2 = JSSTRING_LENGTH(str2); */ 
7944: /* MUTANT (del_stmt) */ /*     newlen = (isName) ? len + 1 + len2 : len + 2 + len2 + 1; */ 
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len - 1 + len2 : len + 2 + len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len * 1 + len2 : len + 2 + len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len % 1 + len2 : len + 2 + len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 - len2 : len + 2 + len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 * len2 : len + 2 + len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 % len2 : len + 2 + len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 + len2 : len - 2 + len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 + len2 : len * 2 + len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 + len2 : len % 2 + len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 + len2 : len + 2 - len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 + len2 : len + 2 * len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 + len2 : len + 2 % len2 + 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 + len2 : len + 2 + len2 - 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 + len2 : len + 2 + len2 * 1;
7944: /* MUTANT (rep_op) */    newlen = (isName) ? len + 1 + len2 : len + 2 + len2 % 1;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + 0 + len2 : len + 2 + len2 + 1;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + -1 + len2 : len + 2 + len2 + 1;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + ((1)+1) + len2 : len + 2 + len2 + 1;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + 1 + len2 : len + 0 + len2 + 1;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + 1 + len2 : len + 1 + len2 + 1;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + 1 + len2 : len + -1 + len2 + 1;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + 1 + len2 : len + ((2)+1) + len2 + 1;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + 1 + len2 : len + ((2)-1) + len2 + 1;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + 1 + len2 : len + 2 + len2 + 0;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + 1 + len2 : len + 2 + len2 + -1;
7944: /* MUTANT (rep_const) */    newlen = (isName) ? len + 1 + len2 : len + 2 + len2 + ((1)+1);
7945: /* MUTANT (del_stmt) */ /*     chars = (jschar *) JS_realloc(cx, str->chars, (newlen+1) * sizeof(jschar)); */ 
7945: /* MUTANT (rep_op) */    chars = (jschar *) JS_realloc(cx, str->chars, (newlen-1) * sizeof(jschar));
7945: /* MUTANT (rep_op) */    chars = (jschar *) JS_realloc(cx, str->chars, (newlen*1) * sizeof(jschar));
7945: /* MUTANT (rep_op) */    chars = (jschar *) JS_realloc(cx, str->chars, (newlen%1) * sizeof(jschar));
7945: /* MUTANT (rep_const) */    chars = (jschar *) JS_realloc(cx, str->chars, (newlen+0) * sizeof(jschar));
7945: /* MUTANT (rep_const) */    chars = (jschar *) JS_realloc(cx, str->chars, (newlen+-1) * sizeof(jschar));
7945: /* MUTANT (rep_const) */    chars = (jschar *) JS_realloc(cx, str->chars, (newlen+((1)+1)) * sizeof(jschar));
7946: /* MUTANT (negate) */    if(! (!chars))
7953: /* MUTANT (del_stmt) */ /*     js_PurgeDeflatedStringCache(str); */ 
7955: /* MUTANT (del_stmt) */ /*     str->chars = chars; */ 
7956: /* MUTANT (del_stmt) */ /*     str->length = newlen; */ 
7957: /* MUTANT (del_stmt) */ /*     chars += len; */ 
7957: /* MUTANT (rep_op) */    chars -= len;
7957: /* MUTANT (rep_op) */    chars *= len;
7957: /* MUTANT (rep_op) */    chars %= len;
7958: /* MUTANT (negate) */    if(! (isName)) {
7959: /* MUTANT (del_stmt) */ /*         *chars++ = ' '; */ 
7959: /* MUTANT (rep_op) */        *chars-- = ' ';
7960: /* MUTANT (del_stmt) */ /*         js_strncpy(chars, JSSTRING_CHARS(str2), len2); */ 
7961: /* MUTANT (del_stmt) */ /*         chars += len2; */ 
7961: /* MUTANT (rep_op) */        chars -= len2;
7961: /* MUTANT (rep_op) */        chars *= len2;
7961: /* MUTANT (rep_op) */        chars %= len2;
7963: /* MUTANT (del_stmt) */ /*         *chars++ = '='; */ 
7963: /* MUTANT (rep_op) */        *chars-- = '=';
7964: /* MUTANT (del_stmt) */ /*         *chars++ = '"'; */ 
7964: /* MUTANT (rep_op) */        *chars-- = '"';
7965: /* MUTANT (del_stmt) */ /*         js_strncpy(chars, JSSTRING_CHARS(str2), len2); */ 
7966: /* MUTANT (del_stmt) */ /*         chars += len2; */ 
7966: /* MUTANT (rep_op) */        chars -= len2;
7966: /* MUTANT (rep_op) */        chars *= len2;
7966: /* MUTANT (rep_op) */        chars %= len2;
7967: /* MUTANT (del_stmt) */ /*         *chars++ = '"'; */ 
7967: /* MUTANT (rep_op) */        *chars-- = '"';
7969: /* MUTANT (rep_const) */    *chars = 1;
7969: /* MUTANT (rep_const) */    *chars = -1;
7970: /* MUTANT (del_stmt) */ /*     return str; */ 
7976: /* MUTANT (del_stmt) */ /*     return EscapeElementValue(cx, NULL, str); */ 
7982: /* MUTANT (del_stmt) */ /*     return ToXMLString(cx, v); */ 
7989: /* MUTANT (del_stmt) */ /*     *rval = ATOM_KEY(cx->runtime->atomState.starAtom); */ 
7990: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
7996: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
7997: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
7998: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
8000: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
8001: /* MUTANT (del_stmt) */ /*     obj = rt->anynameObject; */ 
8002: /* MUTANT (negate) */    if(! (!obj)) {
8005: /* MUTANT (negate) */        if(! (!qn))
8008: /* MUTANT (del_stmt) */ /*         obj = js_NewObject(cx, &js_AnyNameClass, NULL, NULL); */ 
8009: /* MUTANT (rep_op) */        if (!obj && !JS_SetPrivate(cx, obj, qn)) {
8009: /* MUTANT (negate) */        if(! (!obj || !JS_SetPrivate(cx, obj, qn))) {
8010: /* MUTANT (del_stmt) */ /*             cx->newborn[GCX_OBJECT] = NULL; */ 
8011: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
8014: /* MUTANT (del_stmt) */ /*         METER(xml_stats.qnameobj); */ 
8015: /* MUTANT (del_stmt) */ /*         METER(xml_stats.liveqnameobj); */ 
8023: /* MUTANT (rep_const) */                               1, 0)) {
8023: /* MUTANT (rep_const) */                               -1, 0)) {
8023: /* MUTANT (rep_const) */                               0, 1)) {
8023: /* MUTANT (rep_const) */                               0, -1)) {
8024: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
8027: /* MUTANT (del_stmt) */ /*         JS_ASSERT(!OBJ_GET_PARENT(cx, obj)); */ 
8028: /* MUTANT (del_stmt) */ /*         rt->anynameObject = obj; */ 
8031: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
8037: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
8038: /* MUTANT (del_stmt) */ /*     jsid funid, id; */ 
8039: /* MUTANT (del_stmt) */ /*     JSObject *obj, *pobj, *lastobj; */ 
8040: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
8041: /* MUTANT (del_stmt) */ /*     const char *printable; */ 
8043: /* MUTANT (del_stmt) */ /*     qn = ToXMLName(cx, name, &funid); */ 
8044: /* MUTANT (negate) */    if(! (!qn))
8046: /* MUTANT (del_stmt) */ /*     id = OBJECT_TO_JSID(qn->object); */ 
8048: /* MUTANT (del_stmt) */ /*     obj = cx->fp->scopeChain; */ 
8050: /* MUTANT (negate) */        if(! (!OBJ_LOOKUP_PROPERTY(cx, obj, id, &pobj, &prop)))
8052: /* MUTANT (negate) */        if(! (prop)) {
8053: /* MUTANT (del_stmt) */ /*             OBJ_DROP_PROPERTY(cx, pobj, prop); */ 
8059: /* MUTANT (del_stmt) */ /*             pobj = OBJ_THIS_OBJECT(cx, obj); */ 
8060: /* MUTANT (negate) */            if(! (OBJECT_IS_XML(cx, pobj))) {
8061: /* MUTANT (del_stmt) */ /*                 *objp = pobj; */ 
8062: /* MUTANT (del_stmt) */ /*                 *namep = ID_TO_VALUE(id); */ 
8063: /* MUTANT (del_stmt) */ /*                 return JS_TRUE; */ 
8068: /* MUTANT (del_stmt) */ /*     } while ((obj = OBJ_GET_PARENT(cx, obj)) != NULL); */ 
8068: /* MUTANT (rep_op) */    } while ((obj = OBJ_GET_PARENT(cx, obj)) == NULL);
8068: /* MUTANT (negate) */    } while(! ((obj = OBJ_GET_PARENT(cx, obj)) != NULL));
8070: /* MUTANT (del_stmt) */ /*     printable = js_ValueToPrintableString(cx, name); */ 
8071: /* MUTANT (negate) */    if(! (printable)) {
8082: /* MUTANT (del_stmt) */ /*     return GetProperty(cx, obj, name, vp); */ 
8088: /* MUTANT (del_stmt) */ /*     return PutProperty(cx, obj, name, vp); */ 
8094: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
8096: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetInstancePrivate(cx, obj, &js_XMLClass, NULL); */ 
8097: /* MUTANT (negate) */    if(! (!xml)) {
8108: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list; */ 
8110: /* MUTANT (del_stmt) */ /*     xml = GetPrivate(cx, obj, "descendants internal method"); */ 
8111: /* MUTANT (negate) */    if(! (!xml))
8114: /* MUTANT (del_stmt) */ /*     list = Descendants(cx, xml, id); */ 
8115: /* MUTANT (negate) */    if(! (!list))
8117: /* MUTANT (del_stmt) */ /*     *vp = OBJECT_TO_JSVAL(list->object); */ 
8118: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
8124: /* MUTANT (del_stmt) */ /*     JSXML *list; */ 
8125: /* MUTANT (del_stmt) */ /*     uint32 n; */ 
8126: /* MUTANT (del_stmt) */ /*     jsval junk; */ 
8128: /* MUTANT (del_stmt) */ /*     list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
8129: /* MUTANT (rep_op) */    for (n = list->xml_kids.length; n == 0; --n) {
8129: /* MUTANT (rep_op) */    for (n = list->xml_kids.length; n != 0; ++n) {
8129: /* MUTANT (rep_const) */    for (n = list->xml_kids.length; n != 1; --n) {
8129: /* MUTANT (rep_const) */    for (n = list->xml_kids.length; n != -1; --n) {
8130: /* MUTANT (rep_const) */        if (!DeleteProperty(cx, listobj, INT_TO_JSID(1), &junk))
8130: /* MUTANT (rep_const) */        if (!DeleteProperty(cx, listobj, INT_TO_JSID(-1), &junk))
8130: /* MUTANT (negate) */        if(! (!DeleteProperty(cx, listobj, INT_TO_JSID(0), &junk)))
8139: /* MUTANT (del_stmt) */ /*     JSBool ok, match; */ 
8140: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp; */ 
8141: /* MUTANT (del_stmt) */ /*     JSObject *scobj, *listobj, *resobj, *withobj, *kidobj; */ 
8142: /* MUTANT (del_stmt) */ /*     JSXML *xml, *list, *result, *kid; */ 
8143: /* MUTANT (del_stmt) */ /*     JSXMLArrayCursor cursor; */ 
8145: /* MUTANT (del_stmt) */ /*     ok = JS_EnterLocalRootScope(cx); */ 
8146: /* MUTANT (negate) */    if(! (!ok))
8150: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
8151: /* MUTANT (del_stmt) */ /*     scobj = fp->scopeChain; */ 
8152: /* MUTANT (del_stmt) */ /*     withobj = NULL; */ 
8153: /* MUTANT (del_stmt) */ /*     xml = GetPrivate(cx, obj, "filtering predicate operator"); */ 
8154: /* MUTANT (negate) */    if(! (!xml))
8157: /* MUTANT (rep_op) */    if (xml->xml_class != JSXML_CLASS_LIST) {
8157: /* MUTANT (negate) */    if(! (xml->xml_class == JSXML_CLASS_LIST)) {
8158: /* MUTANT (del_stmt) */ /*         list = xml; */ 
8160: /* MUTANT (del_stmt) */ /*         listobj = js_NewXMLObject(cx, JSXML_CLASS_LIST); */ 
8161: /* MUTANT (negate) */        if(! (!listobj))
8163: /* MUTANT (del_stmt) */ /*         list = (JSXML *) JS_GetPrivate(cx, listobj); */ 
8164: /* MUTANT (del_stmt) */ /*         ok = Append(cx, list, xml); */ 
8165: /* MUTANT (negate) */        if(! (!ok))
8170: /* MUTANT (negate) */    if(! (!resobj))
8172: /* MUTANT (del_stmt) */ /*     result = (JSXML *) JS_GetPrivate(cx, resobj); */ 
8175: /* MUTANT (del_stmt) */ /*     withobj = js_NewWithObject(cx, NULL, scobj, -1); */ 
8175: /* MUTANT (rep_const) */    withobj = js_NewWithObject(cx, NULL, scobj, 0);
8175: /* MUTANT (rep_const) */    withobj = js_NewWithObject(cx, NULL, scobj, 1);
8175: /* MUTANT (rep_const) */    withobj = js_NewWithObject(cx, NULL, scobj, ((-1)+1));
8175: /* MUTANT (rep_const) */    withobj = js_NewWithObject(cx, NULL, scobj, ((-1)-1));
8176: /* MUTANT (negate) */    if(! (!withobj))
8178: /* MUTANT (del_stmt) */ /*     fp->scopeChain = withobj; */ 
8180: /* MUTANT (del_stmt) */ /*     XMLArrayCursorInit(&cursor, &list->xml_kids); */ 
8181: /* MUTANT (rep_op) */    while ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) == NULL) {
8181: /* MUTANT (negate) */    while(! ((kid = (JSXML *) XMLArrayCursorNext(&cursor)) != NULL)) {
8182: /* MUTANT (del_stmt) */ /*         kidobj = js_GetXMLObject(cx, kid); */ 
8183: /* MUTANT (negate) */        if(! (!kidobj))
8185: /* MUTANT (del_stmt) */ /*         OBJ_SET_PROTO(cx, withobj, kidobj); */ 
8186: /* MUTANT (del_stmt) */ /*         ok = js_Interpret(cx, pc, vp) && js_ValueToBoolean(cx, *vp, &match); */ 
8186: /* MUTANT (rep_op) */        ok = js_Interpret(cx, pc, vp) || js_ValueToBoolean(cx, *vp, &match);
8187: /* MUTANT (rep_op) */        if (ok || match)
8187: /* MUTANT (negate) */        if(! (ok && match))
8189: /* MUTANT (negate) */        if(! (!ok))
8193: /* MUTANT (negate) */    if(! (!ok))
8195: /* MUTANT (negate) */    if(! (kid))
8198: /* MUTANT (del_stmt) */ /*     *vp = OBJECT_TO_JSVAL(resobj); */ 
8201: /* MUTANT (negate) */    if(! (withobj)) {
8202: /* MUTANT (del_stmt) */ /*         fp->scopeChain = scobj; */ 
8203: /* MUTANT (del_stmt) */ /*         JS_SetPrivate(cx, withobj, NULL); */ 
8206: /* MUTANT (del_stmt) */ /*     return ok; */ 
8209: /* MUTANT (del_stmt) */ /*     goto out; */ 
8215: /* MUTANT (del_stmt) */ /*     return ToXML(cx, v); */ 
8221: /* MUTANT (del_stmt) */ /*     return ToXMLList(cx, v); */ 
8227: /* MUTANT (del_stmt) */ /*     uintN flags; */ 
8228: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
8230: /* MUTANT (negate) */    if(! (!GetXMLSettingFlags(cx, &flags)))
8232: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
8233: /* MUTANT (rep_op) */    if (flags & (XSF_IGNORE_COMMENTS &
8234: /* MUTANT (rep_op) */                 XSF_IGNORE_PROCESSING_INSTRUCTIONS &
8236: /* MUTANT (del_stmt) */ /*         xml = DeepCopy(cx, xml, NULL, flags); */ 
8237: /* MUTANT (negate) */        if(! (!xml))
8239: /* MUTANT (del_stmt) */ /*         return xml->object; */ 
8248: /* MUTANT (del_stmt) */ /*     uintN flags; */ 
8249: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
8250: /* MUTANT (del_stmt) */ /*     JSXML *xml; */ 
8251: /* MUTANT (del_stmt) */ /*     JSXMLQName *qn; */ 
8253: /* MUTANT (negate) */    if(! (!GetXMLSettingFlags(cx, &flags)))
8256: /* MUTANT (rep_op) */    if ((xml_class != JSXML_CLASS_COMMENT &&
8256: /* MUTANT (rep_op) */    if ((xml_class == JSXML_CLASS_COMMENT ||
8257: /* MUTANT (rep_op) */         (flags & XSF_IGNORE_COMMENTS)) &&
8258: /* MUTANT (rep_op) */        (xml_class != JSXML_CLASS_PROCESSING_INSTRUCTION &&
8258: /* MUTANT (rep_op) */        (xml_class == JSXML_CLASS_PROCESSING_INSTRUCTION ||
8260: /* MUTANT (del_stmt) */ /*         return js_NewXMLObject(cx, JSXML_CLASS_TEXT); */ 
8264: /* MUTANT (negate) */    if(! (!obj))
8266: /* MUTANT (del_stmt) */ /*     xml = (JSXML *) JS_GetPrivate(cx, obj); */ 
8267: /* MUTANT (negate) */    if(! (name)) {
8268: /* MUTANT (del_stmt) */ /*         qn = js_NewXMLQName(cx, cx->runtime->emptyString, NULL, name); */ 
8269: /* MUTANT (negate) */        if(! (!qn))
8271: /* MUTANT (del_stmt) */ /*         xml->name = qn; */ 
8274: /* MUTANT (del_stmt) */ /*     return obj; */ 
8280: /* MUTANT (del_stmt) */ /*     return MakeXMLCDATAString(cx, NULL, str); */ 
8286: /* MUTANT (del_stmt) */ /*     return MakeXMLCommentString(cx, NULL, str); */ 
8292: /* MUTANT (del_stmt) */ /*     return MakeXMLPIString(cx, NULL, name, str); */ 
