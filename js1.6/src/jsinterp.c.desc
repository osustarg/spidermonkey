85: /* MUTANT (rep_op) */        for (pce_ = &cache_->table[0]; pce_ <= end_; pce_++) {                 \
85: /* MUTANT (rep_op) */        for (pce_ = &cache_->table[0]; pce_ > end_; pce_++) {                 \
85: /* MUTANT (rep_op) */        for (pce_ = &cache_->table[0]; pce_ >= end_; pce_++) {                 \
85: /* MUTANT (rep_op) */        for (pce_ = &cache_->table[0]; pce_ == end_; pce_++) {                 \
85: /* MUTANT (rep_op) */        for (pce_ = &cache_->table[0]; pce_ != end_; pce_++) {                 \
85: /* MUTANT (rep_op) */        for (pce_ = &cache_->table[0]; pce_ < end_; pce_--) {                 \
85: /* MUTANT (rep_const) */        for (pce_ = &cache_->table[1]; pce_ < end_; pce_++) {                 \
85: /* MUTANT (rep_const) */        for (pce_ = &cache_->table[-1]; pce_ < end_; pce_++) {                 \
92: #define ASSERT_CACHE_IS_EMPTY(cache) ((void)1) /* MUTANT (rep_const) */
92: #define ASSERT_CACHE_IS_EMPTY(cache) ((void)-1) /* MUTANT (rep_const) */
98: /* MUTANT (del_stmt) */ /*     JSPropertyCache *cache; */ 
100: /* MUTANT (del_stmt) */ /*     cache = &cx->runtime->propertyCache; */ 
101: /* MUTANT (negate) */    if(! (cache->empty)) {
102: /* MUTANT (del_stmt) */ /*         ASSERT_CACHE_IS_EMPTY(cache); */ 
103: /* MUTANT (del_stmt) */ /*         return; */ 
105: /* MUTANT (rep_const) */    memset(cache->table, 1, sizeof cache->table);
105: /* MUTANT (rep_const) */    memset(cache->table, -1, sizeof cache->table);
106: /* MUTANT (del_stmt) */ /*     cache->empty = JS_TRUE; */ 
108: /* MUTANT (rep_op) */    cache->flushes--;
115: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!cx->runtime->propertyCache.disabled); */ 
116: /* MUTANT (del_stmt) */ /*     cx->runtime->propertyCache.disabled = JS_TRUE; */ 
122: /* MUTANT (del_stmt) */ /*     JS_ASSERT(cx->runtime->propertyCache.disabled); */ 
123: /* MUTANT (del_stmt) */ /*     ASSERT_CACHE_IS_EMPTY(&cx->runtime->propertyCache); */ 
124: /* MUTANT (del_stmt) */ /*     cx->runtime->propertyCache.disabled = JS_FALSE; */ 
135: /* MUTANT (del_stmt) */ /*     jsval iter_state; */ 
136: /* MUTANT (del_stmt) */ /*     jsval iteratee; */ 
139: /* MUTANT (del_stmt) */ /*     iter_state = obj->slots[JSSLOT_ITER_STATE]; */ 
140: /* MUTANT (del_stmt) */ /*     iteratee = obj->slots[JSSLOT_PARENT]; */ 
141: /* MUTANT (rep_op) */    if (!JSVAL_IS_NULL(iter_state) || !JSVAL_IS_PRIMITIVE(iteratee)) {
141: /* MUTANT (negate) */    if(! (!JSVAL_IS_NULL(iter_state) && !JSVAL_IS_PRIMITIVE(iteratee))) {
150: /* MUTANT (rep_const) */    1,
150: /* MUTANT (rep_const) */    -1,
166: /* MUTANT (rep_op) */    (JS_ASSERT((fp)->script && !(fp)->spbase || (sp) == (fp)->spbase),        \
166: /* MUTANT (rep_op) */    (JS_ASSERT((fp)->script || !(fp)->spbase && (sp) == (fp)->spbase),        \
166: /* MUTANT (rep_op) */    (JS_ASSERT((fp)->script || !(fp)->spbase || (sp) != (fp)->spbase),        \
195: /* MUTANT (rep_op) */        if (JSDOUBLE_IS_INT(d, i_) || INT_FITS_IN_JSVAL(i_)) {                \
195: /* MUTANT (negate) */        if(! (JSDOUBLE_IS_INT(d, i_) && INT_FITS_IN_JSVAL(i_))) {                \
199: /* MUTANT (negate) */            if(! (!ok))                                                          \
216: /* MUTANT (negate) */        if(! (JSVAL_IS_INT(v_))) {                                               \
221: /* MUTANT (negate) */            if(! (!ok))                                                          \
230: /* MUTANT (rep_op) */        if (JSVAL_IS_INT(v_) || (i_ = JSVAL_TO_INT(v_)) >= 0) {               \
230: /* MUTANT (rep_op) */        if (JSVAL_IS_INT(v_) && (i_ = JSVAL_TO_INT(v_)) <= 0) {               \
230: /* MUTANT (rep_op) */        if (JSVAL_IS_INT(v_) && (i_ = JSVAL_TO_INT(v_)) < 0) {               \
230: /* MUTANT (rep_op) */        if (JSVAL_IS_INT(v_) && (i_ = JSVAL_TO_INT(v_)) > 0) {               \
230: /* MUTANT (rep_op) */        if (JSVAL_IS_INT(v_) && (i_ = JSVAL_TO_INT(v_)) == 0) {               \
230: /* MUTANT (rep_op) */        if (JSVAL_IS_INT(v_) && (i_ = JSVAL_TO_INT(v_)) != 0) {               \
230: /* MUTANT (rep_const) */        if (JSVAL_IS_INT(v_) && (i_ = JSVAL_TO_INT(v_)) >= 1) {               \
230: /* MUTANT (rep_const) */        if (JSVAL_IS_INT(v_) && (i_ = JSVAL_TO_INT(v_)) >= -1) {               \
230: /* MUTANT (negate) */        if(! (JSVAL_IS_INT(v_) && (i_ = JSVAL_TO_INT(v_)) >= 0)) {               \
235: /* MUTANT (negate) */            if(! (!ok))                                                          \
246: /* MUTANT (negate) */        if(! (JSVAL_IS_INT(v))) {                                                \
248: /* MUTANT (negate) */        } else if(! (JSVAL_IS_DOUBLE(v))) {                                      \
253: /* MUTANT (negate) */            if(! (!ok))                                                          \
260: /* MUTANT (rep_const) */        v = FETCH_OPND(0);                                                   \
260: /* MUTANT (rep_const) */        v = FETCH_OPND(1);                                                   \
260: /* MUTANT (rep_const) */        v = FETCH_OPND(((-1)+1));                                                   \
260: /* MUTANT (rep_const) */        v = FETCH_OPND(((-1)-1));                                                   \
261: /* MUTANT (rep_op) */        if (v != JSVAL_NULL) {                                                \
261: /* MUTANT (negate) */        if(! (v == JSVAL_NULL)) {                                                \
263: /* MUTANT (negate) */        } else if(! (JSVAL_IS_BOOLEAN(v))) {                                     \
268: /* MUTANT (negate) */            if(! (!ok))                                                          \
271: /* MUTANT (rep_op) */        sp++;                                                                 \
276: /* MUTANT (negate) */        if(! (!JSVAL_IS_PRIMITIVE(v))) {                                         \
281: /* MUTANT (negate) */            if(! (!obj)) {                                                       \
297: /* MUTANT (negate) */    if(! (JSVAL_IS_VOID(v))) {                                                   \
303: #define CHECK_VOID_TOSTRING(cx, v)  ((void)1) /* MUTANT (rep_const) */
303: #define CHECK_VOID_TOSTRING(cx, v)  ((void)-1) /* MUTANT (rep_const) */
309: #define CHECK_EAGER_TOSTRING(hint)  ((void)1) /* MUTANT (rep_const) */
309: #define CHECK_EAGER_TOSTRING(hint)  ((void)-1) /* MUTANT (rep_const) */
314: /* MUTANT (negate) */        if(! (JSVAL_IS_PRIMITIVE(v))) {                                          \
321: /* MUTANT (negate) */            if(! (!ok))                                                          \
329: /* MUTANT (del_stmt) */ /*     jsval *sp; */ 
331: /* MUTANT (negate) */    if(! (markp))
333: /* MUTANT (del_stmt) */ /*     JS_ARENA_ALLOCATE_CAST(sp, jsval *, &cx->stackPool, nslots * sizeof(jsval)); */ 
334: /* MUTANT (negate) */    if(! (!sp)) {
336: /* MUTANT (rep_op) */                             (cx->fp || cx->fp->fun)
346: /* MUTANT (del_stmt) */ /*     JS_ARENA_RELEASE(&cx->stackPool, mark); */ 
352: /* MUTANT (del_stmt) */ /*     jsval *sp, *vp, *end; */ 
353: /* MUTANT (del_stmt) */ /*     JSArena *a; */ 
354: /* MUTANT (del_stmt) */ /*     JSStackHeader *sh; */ 
355: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp; */ 
358: /* MUTANT (rep_op) */    if (nslots != 0) {
358: /* MUTANT (rep_const) */    if (nslots == 1) {
358: /* MUTANT (rep_const) */    if (nslots == -1) {
358: /* MUTANT (negate) */    if(! (nslots == 0)) {
359: /* MUTANT (del_stmt) */ /*         *markp = NULL; */ 
360: /* MUTANT (del_stmt) */ /*         return JS_ARENA_MARK(&cx->stackPool); */ 
364: /* MUTANT (rep_op) */    sp = js_AllocRawStack(cx, 2 - nslots, markp);
364: /* MUTANT (rep_op) */    sp = js_AllocRawStack(cx, 2 * nslots, markp);
364: /* MUTANT (rep_op) */    sp = js_AllocRawStack(cx, 2 % nslots, markp);
364: /* MUTANT (rep_const) */    sp = js_AllocRawStack(cx, 0 + nslots, markp);
364: /* MUTANT (rep_const) */    sp = js_AllocRawStack(cx, 1 + nslots, markp);
364: /* MUTANT (rep_const) */    sp = js_AllocRawStack(cx, -1 + nslots, markp);
364: /* MUTANT (rep_const) */    sp = js_AllocRawStack(cx, ((2)+1) + nslots, markp);
364: /* MUTANT (rep_const) */    sp = js_AllocRawStack(cx, ((2)-1) + nslots, markp);
365: /* MUTANT (negate) */    if(! (!sp))
369: /* MUTANT (del_stmt) */ /*     a = cx->stackPool.current; */ 
370: /* MUTANT (del_stmt) */ /*     sh = cx->stackHeaders; */ 
371: /* MUTANT (rep_op) */    if (sh || JS_STACK_SEGMENT(sh) + sh->nslots == sp) {
371: /* MUTANT (rep_op) */    if (sh && JS_STACK_SEGMENT(sh) - sh->nslots == sp) {
371: /* MUTANT (rep_op) */    if (sh && JS_STACK_SEGMENT(sh) * sh->nslots == sp) {
371: /* MUTANT (rep_op) */    if (sh && JS_STACK_SEGMENT(sh) % sh->nslots == sp) {
371: /* MUTANT (rep_op) */    if (sh && JS_STACK_SEGMENT(sh) + sh->nslots != sp) {
371: /* MUTANT (negate) */    if(! (sh && JS_STACK_SEGMENT(sh) + sh->nslots == sp)) {
373: /* MUTANT (del_stmt) */ /*         sh->nslots += nslots; */ 
373: /* MUTANT (rep_op) */        sh->nslots -= nslots;
373: /* MUTANT (rep_op) */        sh->nslots *= nslots;
373: /* MUTANT (rep_op) */        sh->nslots %= nslots;
374: /* MUTANT (del_stmt) */ /*         a->avail -= 2 * sizeof(jsval); */ 
374: /* MUTANT (rep_op) */        a->avail += 2 * sizeof(jsval);
374: /* MUTANT (rep_op) */        a->avail *= 2 * sizeof(jsval);
374: /* MUTANT (rep_op) */        a->avail %= 2 * sizeof(jsval);
374: /* MUTANT (rep_const) */        a->avail -= 0 * sizeof(jsval);
374: /* MUTANT (rep_const) */        a->avail -= 1 * sizeof(jsval);
374: /* MUTANT (rep_const) */        a->avail -= -1 * sizeof(jsval);
374: /* MUTANT (rep_const) */        a->avail -= ((2)+1) * sizeof(jsval);
374: /* MUTANT (rep_const) */        a->avail -= ((2)-1) * sizeof(jsval);
382: /* MUTANT (del_stmt) */ /*         fp = cx->fp; */ 
383: /* MUTANT (rep_op) */        if (fp || fp->script && fp->spbase) {
383: /* MUTANT (rep_op) */        if (fp && fp->script || fp->spbase) {
383: /* MUTANT (negate) */        if(! (fp && fp->script && fp->spbase)) {
385: /* MUTANT (negate) */            jsuword depthdif(!f = fp->script->depth * sizeof(jsval));
386: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JS_UPTRDIFF(fp->sp, fp->spbase) <= depthdiff); */ 
386: /* MUTANT (rep_op) */            JS_ASSERT(JS_UPTRDIFF(fp->sp, fp->spbase) < depthdiff);
386: /* MUTANT (rep_op) */            JS_ASSERT(JS_UPTRDIFF(fp->sp, fp->spbase) > depthdiff);
386: /* MUTANT (rep_op) */            JS_ASSERT(JS_UPTRDIFF(fp->sp, fp->spbase) >= depthdiff);
386: /* MUTANT (rep_op) */            JS_ASSERT(JS_UPTRDIFF(fp->sp, fp->spbase) == depthdiff);
386: /* MUTANT (rep_op) */            JS_ASSERT(JS_UPTRDIFF(fp->sp, fp->spbase) != depthdiff);
387: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JS_UPTRDIFF(*markp, fp->spbase) >= depthdiff); */ 
387: /* MUTANT (rep_op) */            JS_ASSERT(JS_UPTRDIFF(*markp, fp->spbase) <= depthdiff);
387: /* MUTANT (rep_op) */            JS_ASSERT(JS_UPTRDIFF(*markp, fp->spbase) < depthdiff);
387: /* MUTANT (rep_op) */            JS_ASSERT(JS_UPTRDIFF(*markp, fp->spbase) > depthdiff);
387: /* MUTANT (rep_op) */            JS_ASSERT(JS_UPTRDIFF(*markp, fp->spbase) == depthdiff);
387: /* MUTANT (rep_op) */            JS_ASSERT(JS_UPTRDIFF(*markp, fp->spbase) != depthdiff);
389: /* MUTANT (rep_op) */            end = fp->spbase - fp->script->depth;
389: /* MUTANT (rep_op) */            end = fp->spbase * fp->script->depth;
389: /* MUTANT (rep_op) */            end = fp->spbase % fp->script->depth;
390: /* MUTANT (rep_op) */            for (vp = fp->sp; vp <= end; vp++)
390: /* MUTANT (rep_op) */            for (vp = fp->sp; vp > end; vp++)
390: /* MUTANT (rep_op) */            for (vp = fp->sp; vp >= end; vp++)
390: /* MUTANT (rep_op) */            for (vp = fp->sp; vp == end; vp++)
390: /* MUTANT (rep_op) */            for (vp = fp->sp; vp != end; vp++)
390: /* MUTANT (rep_op) */            for (vp = fp->sp; vp < end; vp--)
396: /* MUTANT (del_stmt) */ /*         sh->nslots = nslots; */ 
397: /* MUTANT (del_stmt) */ /*         sh->down = cx->stackHeaders; */ 
398: /* MUTANT (del_stmt) */ /*         cx->stackHeaders = sh; */ 
399: /* MUTANT (del_stmt) */ /*         sp += 2; */ 
399: /* MUTANT (rep_op) */        sp -= 2;
399: /* MUTANT (rep_op) */        sp *= 2;
399: /* MUTANT (rep_op) */        sp %= 2;
399: /* MUTANT (rep_const) */        sp += 0;
399: /* MUTANT (rep_const) */        sp += 1;
399: /* MUTANT (rep_const) */        sp += -1;
399: /* MUTANT (rep_const) */        sp += ((2)+1);
399: /* MUTANT (rep_const) */        sp += ((2)-1);
407: /* MUTANT (rep_const) */    memset(sp, 1, nslots * sizeof(jsval));
407: /* MUTANT (rep_const) */    memset(sp, -1, nslots * sizeof(jsval));
408: /* MUTANT (del_stmt) */ /*     return sp; */ 
414: /* MUTANT (del_stmt) */ /*     JSStackHeader *sh; */ 
415: /* MUTANT (del_stmt) */ /*     jsuword slotdiff; */ 
418: /* MUTANT (negate) */    if(! (!mark))
422: /* MUTANT (del_stmt) */ /*     sh = cx->stackHeaders; */ 
423: /* MUTANT (del_stmt) */ /*     JS_ASSERT(sh); */ 
426: /* MUTANT (del_stmt) */ /*     slotdiff = JS_UPTRDIFF(mark, JS_STACK_SEGMENT(sh)) / sizeof(jsval); */ 
426: /* MUTANT (negate) */    slotdif(!f = JS_UPTRDIFF(mark, JS_STACK_SEGMENT(sh))) / sizeof(jsval);
427: /* MUTANT (rep_op) */    if (slotdiff <= (jsuword)sh->nslots)
427: /* MUTANT (rep_op) */    if (slotdiff > (jsuword)sh->nslots)
427: /* MUTANT (rep_op) */    if (slotdiff >= (jsuword)sh->nslots)
427: /* MUTANT (rep_op) */    if (slotdiff == (jsuword)sh->nslots)
427: /* MUTANT (rep_op) */    if (slotdiff != (jsuword)sh->nslots)
427: /* MUTANT (negate) */    if(! (slotdiff < (jsuword)sh->nslots))
433: /* MUTANT (del_stmt) */ /*     JS_ARENA_RELEASE(&cx->stackPool, mark); */ 
439: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
445: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
451: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
457: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
463: /* MUTANT (rep_op) */    if (thisp || OBJ_GET_CLASS(cx, thisp) != &js_CallClass) {
463: /* MUTANT (rep_op) */    if (thisp && OBJ_GET_CLASS(cx, thisp) == &js_CallClass) {
463: /* MUTANT (negate) */    if(! (thisp && OBJ_GET_CLASS(cx, thisp) != &js_CallClass)) {
465: /* MUTANT (del_stmt) */ /*         thisp = OBJ_THIS_OBJECT(cx, thisp); */ 
466: /* MUTANT (negate) */        if(! (!thisp))
470: /* MUTANT (negate) */        if(! (fp->flags & JSFRAME_CONSTRUCTING))
489: /* MUTANT (del_stmt) */ /*         JS_ASSERT(!(fp->flags & JSFRAME_CONSTRUCTING)); */ 
490: /* MUTANT (rep_op) */        if (JSVAL_IS_PRIMITIVE(fp->argv[-2]) &&
490: /* MUTANT (rep_const) */        if (JSVAL_IS_PRIMITIVE(fp->argv[0]) ||
490: /* MUTANT (rep_const) */        if (JSVAL_IS_PRIMITIVE(fp->argv[1]) ||
490: /* MUTANT (rep_const) */        if (JSVAL_IS_PRIMITIVE(fp->argv[-1]) ||
490: /* MUTANT (rep_const) */        if (JSVAL_IS_PRIMITIVE(fp->argv[((-2)+1)]) ||
490: /* MUTANT (rep_const) */        if (JSVAL_IS_PRIMITIVE(fp->argv[((-2)-1)]) ||
491: /* MUTANT (rep_const) */            !OBJ_GET_PARENT(cx, JSVAL_TO_OBJECT(fp->argv[0]))) {
491: /* MUTANT (rep_const) */            !OBJ_GET_PARENT(cx, JSVAL_TO_OBJECT(fp->argv[1]))) {
491: /* MUTANT (rep_const) */            !OBJ_GET_PARENT(cx, JSVAL_TO_OBJECT(fp->argv[-1]))) {
491: /* MUTANT (rep_const) */            !OBJ_GET_PARENT(cx, JSVAL_TO_OBJECT(fp->argv[((-2)+1)]))) {
491: /* MUTANT (rep_const) */            !OBJ_GET_PARENT(cx, JSVAL_TO_OBJECT(fp->argv[((-2)-1)]))) {
492: /* MUTANT (del_stmt) */ /*             thisp = cx->globalObject; */ 
494: /* MUTANT (del_stmt) */ /*             jsid id; */ 
495: /* MUTANT (del_stmt) */ /*             jsval v; */ 
496: /* MUTANT (del_stmt) */ /*             uintN attrs; */ 
499: /* MUTANT (del_stmt) */ /*             thisp = JSVAL_TO_OBJECT(fp->argv[-2]); */ 
499: /* MUTANT (rep_const) */            thisp = JSVAL_TO_OBJECT(fp->argv[0]);
499: /* MUTANT (rep_const) */            thisp = JSVAL_TO_OBJECT(fp->argv[1]);
499: /* MUTANT (rep_const) */            thisp = JSVAL_TO_OBJECT(fp->argv[-1]);
499: /* MUTANT (rep_const) */            thisp = JSVAL_TO_OBJECT(fp->argv[((-2)+1)]);
499: /* MUTANT (rep_const) */            thisp = JSVAL_TO_OBJECT(fp->argv[((-2)-1)]);
500: /* MUTANT (del_stmt) */ /*             id = ATOM_TO_JSID(cx->runtime->atomState.parentAtom); */ 
502: /* MUTANT (negate) */                if(! (!OBJ_CHECK_ACCESS(cx, thisp, id, JSACC_PARENT, &v, &attrs)))
504: /* MUTANT (negate) */                if(! (JSVAL_IS_VOID(v)))
506: /* MUTANT (negate) */                if(! (JSVAL_IS_NULL(v)))
508: /* MUTANT (del_stmt) */ /*                 thisp = JSVAL_TO_OBJECT(v); */ 
513: /* MUTANT (del_stmt) */ /*     fp->argv[-1] = OBJECT_TO_JSVAL(thisp); */ 
513: /* MUTANT (rep_const) */    fp->argv[0] = OBJECT_TO_JSVAL(thisp);
513: /* MUTANT (rep_const) */    fp->argv[1] = OBJECT_TO_JSVAL(thisp);
513: /* MUTANT (rep_const) */    fp->argv[((-1)+1)] = OBJECT_TO_JSVAL(thisp);
513: /* MUTANT (rep_const) */    fp->argv[((-1)-1)] = OBJECT_TO_JSVAL(thisp);
514: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
524: /* MUTANT (del_stmt) */ /*     jsval               callee; */                  /* callee value */
525: /* MUTANT (del_stmt) */ /*     const char          *filename; */               /* function filename or null */
526: /* MUTANT (del_stmt) */ /*     uintN               lineno; */                  /* function lineno or 0 */
527: /* MUTANT (del_stmt) */ /* } CallKey; */ 
533: #define NTYPEHIST       (JSTYPE_LIMIT + 0) /* MUTANT (rep_const) */
533: #define NTYPEHIST       (JSTYPE_LIMIT + -1) /* MUTANT (rep_const) */
533: #define NTYPEHIST       (JSTYPE_LIMIT + ((1)+1)) /* MUTANT (rep_const) */
536: /* MUTANT (del_stmt) */ /*     uint32              total; */                   /* total call count */
537: /* MUTANT (del_stmt) */ /*     uint32              recycled; */                /* LRU-recycled calls lost */
538: /* MUTANT (del_stmt) */ /*     uint16              minargc; */                 /* minimum argument count */
539: /* MUTANT (del_stmt) */ /*     uint16              maxargc; */                 /* maximum argument count */
541: /* MUTANT (del_stmt) */ /*         uint32          typeHist[NTYPEHIST]; */     /* histogram by type */
542: /* MUTANT (del_stmt) */ /*         JSCList         lruList; */                 /* top 10 values LRU list */
544: /* MUTANT (del_stmt) */ /*             JSCList     lruLink; */                 /* LRU list linkage */
545: /* MUTANT (del_stmt) */ /*             jsval       value; */                   /* recently passed value */
546: /* MUTANT (del_stmt) */ /*             uint32      count; */                   /* number of times passed */
547: /* MUTANT (del_stmt) */ /*             char        strbuf[112]; */             /* string conversion buffer */
547: /* MUTANT (rep_const) */            char        strbuf[0];            /* string conversion buffer */
547: /* MUTANT (rep_const) */            char        strbuf[1];            /* string conversion buffer */
547: /* MUTANT (rep_const) */            char        strbuf[-1];            /* string conversion buffer */
547: /* MUTANT (rep_const) */            char        strbuf[((112)+1)];            /* string conversion buffer */
547: /* MUTANT (rep_const) */            char        strbuf[((112)-1)];            /* string conversion buffer */
548: /* MUTANT (del_stmt) */ /*         } topValCounts[10]; */                      /* top 10 value storage */
548: /* MUTANT (rep_const) */        } topValCounts[0];                     /* top 10 value storage */
548: /* MUTANT (rep_const) */        } topValCounts[1];                     /* top 10 value storage */
548: /* MUTANT (rep_const) */        } topValCounts[-1];                     /* top 10 value storage */
548: /* MUTANT (rep_const) */        } topValCounts[((10)+1)];                     /* top 10 value storage */
548: /* MUTANT (rep_const) */        } topValCounts[((10)-1)];                     /* top 10 value storage */
549: /* MUTANT (del_stmt) */ /*     } argInfo[8]; */ 
549: /* MUTANT (rep_const) */    } argInfo[0];
549: /* MUTANT (rep_const) */    } argInfo[1];
549: /* MUTANT (rep_const) */    } argInfo[-1];
549: /* MUTANT (rep_const) */    } argInfo[((8)+1)];
549: /* MUTANT (rep_const) */    } argInfo[((8)-1)];
550: /* MUTANT (del_stmt) */ /* } CallValue; */ 
553: /* MUTANT (del_stmt) */ /*     JSHashEntry         entry; */ 
554: /* MUTANT (del_stmt) */ /*     CallKey             key; */ 
555: /* MUTANT (del_stmt) */ /*     CallValue           value; */ 
556: /* MUTANT (del_stmt) */ /*     char                name[32]; */                /* function name copy */
556: /* MUTANT (rep_const) */    char                name[0];               /* function name copy */
556: /* MUTANT (rep_const) */    char                name[1];               /* function name copy */
556: /* MUTANT (rep_const) */    char                name[-1];               /* function name copy */
556: /* MUTANT (rep_const) */    char                name[((32)+1)];               /* function name copy */
556: /* MUTANT (rep_const) */    char                name[((32)-1)];               /* function name copy */
557: /* MUTANT (del_stmt) */ /* } CallEntry; */ 
562: /* MUTANT (del_stmt) */ /*     return malloc(size); */ 
568: /* MUTANT (del_stmt) */ /*     free(item); */ 
574: /* MUTANT (del_stmt) */ /*     return (JSHashEntry*) calloc(1, sizeof(CallEntry)); */ 
574: /* MUTANT (rep_const) */    return (JSHashEntry*) calloc(0, sizeof(CallEntry));
574: /* MUTANT (rep_const) */    return (JSHashEntry*) calloc(-1, sizeof(CallEntry));
574: /* MUTANT (rep_const) */    return (JSHashEntry*) calloc(((1)+1), sizeof(CallEntry));
580: /* MUTANT (del_stmt) */ /*     JS_ASSERT(flag == HT_FREE_ENTRY); */ 
580: /* MUTANT (rep_op) */    JS_ASSERT(flag != HT_FREE_ENTRY);
581: /* MUTANT (del_stmt) */ /*     free(he); */ 
592: /* MUTANT (del_stmt) */ /*     CallKey *ck = (CallKey *) key; */ 
593: /* MUTANT (del_stmt) */ /*     JSHashNumber hash = (jsuword)ck->callee >> 3; */ 
593: /* MUTANT (rep_const) */    JSHashNumber hash = (jsuword)ck->callee >> 0;
593: /* MUTANT (rep_const) */    JSHashNumber hash = (jsuword)ck->callee >> 1;
593: /* MUTANT (rep_const) */    JSHashNumber hash = (jsuword)ck->callee >> -1;
593: /* MUTANT (rep_const) */    JSHashNumber hash = (jsuword)ck->callee >> ((3)+1);
593: /* MUTANT (rep_const) */    JSHashNumber hash = (jsuword)ck->callee >> ((3)-1);
595: /* MUTANT (negate) */    if(! (ck->filename)) {
596: /* MUTANT (del_stmt) */ /*         hash = (hash << 4) ^ JS_HashString(ck->filename); */ 
596: /* MUTANT (rep_const) */        hash = (hash << 0) ^ JS_HashString(ck->filename);
596: /* MUTANT (rep_const) */        hash = (hash << 1) ^ JS_HashString(ck->filename);
596: /* MUTANT (rep_const) */        hash = (hash << -1) ^ JS_HashString(ck->filename);
596: /* MUTANT (rep_const) */        hash = (hash << ((4)+1)) ^ JS_HashString(ck->filename);
596: /* MUTANT (rep_const) */        hash = (hash << ((4)-1)) ^ JS_HashString(ck->filename);
597: /* MUTANT (del_stmt) */ /*         hash = (hash << 4) ^ ck->lineno; */ 
597: /* MUTANT (rep_const) */        hash = (hash << 0) ^ ck->lineno;
597: /* MUTANT (rep_const) */        hash = (hash << 1) ^ ck->lineno;
597: /* MUTANT (rep_const) */        hash = (hash << -1) ^ ck->lineno;
597: /* MUTANT (rep_const) */        hash = (hash << ((4)+1)) ^ ck->lineno;
597: /* MUTANT (rep_const) */        hash = (hash << ((4)-1)) ^ ck->lineno;
605: /* MUTANT (del_stmt) */ /*     CallKey *ck1 = (CallKey *)k1, *ck2 = (CallKey *)k2; */ 
607: /* MUTANT (rep_op) */    return ck1->callee != ck2->callee &&
607: /* MUTANT (rep_op) */    return ck1->callee == ck2->callee ||
608: /* MUTANT (rep_op) */           ((ck1->filename || ck2->filename)
609: /* MUTANT (rep_op) */            ? strcmp(ck1->filename, ck2->filename) != 0
609: /* MUTANT (rep_const) */            ? strcmp(ck1->filename, ck2->filename) == 1
609: /* MUTANT (rep_const) */            ? strcmp(ck1->filename, ck2->filename) == -1
610: /* MUTANT (rep_op) */            : ck1->filename != ck2->filename) &&
610: /* MUTANT (rep_op) */            : ck1->filename == ck2->filename) ||
611: /* MUTANT (rep_op) */           ck1->lineno != ck2->lineno;
615: /* MUTANT (del_stmt) */ /* size_t      js_LogCallToSourceLimit; */ 
620: /* MUTANT (del_stmt) */ /*     CallEntry *ce = (CallEntry *)he; */ 
621: /* MUTANT (del_stmt) */ /*     FILE *fp = (FILE *)arg; */ 
622: /* MUTANT (del_stmt) */ /*     uintN argc, i, n; */ 
623: /* MUTANT (del_stmt) */ /*     struct ArgInfo *ai; */ 
624: /* MUTANT (del_stmt) */ /*     JSType save, type; */ 
625: /* MUTANT (del_stmt) */ /*     JSCList *cl; */ 
626: /* MUTANT (del_stmt) */ /*     struct ArgValCount *avc; */ 
627: /* MUTANT (del_stmt) */ /*     jsval argval; */ 
629: /* MUTANT (negate) */    if(! (ce->key.filename)) {
631: /* MUTANT (del_stmt) */ /*         js_MarkScriptFilename(ce->key.filename); */ 
632: /* MUTANT (del_stmt) */ /*         fprintf(fp, "%s:%u ", ce->key.filename, ce->key.lineno); */ 
634: /* MUTANT (del_stmt) */ /*         fprintf(fp, "@%p ", (void *) ce->key.callee); */ 
637: /* MUTANT (rep_const) */    if (ce->name[1])
637: /* MUTANT (rep_const) */    if (ce->name[-1])
637: /* MUTANT (negate) */    if(! (ce->name[0]))
644: /* MUTANT (del_stmt) */ /*     argc = JS_MIN(ce->value.maxargc, 8); */ 
644: /* MUTANT (rep_const) */    argc = JS_MIN(ce->value.maxargc, 0);
644: /* MUTANT (rep_const) */    argc = JS_MIN(ce->value.maxargc, 1);
644: /* MUTANT (rep_const) */    argc = JS_MIN(ce->value.maxargc, -1);
644: /* MUTANT (rep_const) */    argc = JS_MIN(ce->value.maxargc, ((8)+1));
644: /* MUTANT (rep_const) */    argc = JS_MIN(ce->value.maxargc, ((8)-1));
645: /* MUTANT (rep_op) */    for (i = 0; i <= argc; i++) {
645: /* MUTANT (rep_op) */    for (i = 0; i > argc; i++) {
645: /* MUTANT (rep_op) */    for (i = 0; i >= argc; i++) {
645: /* MUTANT (rep_op) */    for (i = 0; i == argc; i++) {
645: /* MUTANT (rep_op) */    for (i = 0; i != argc; i++) {
645: /* MUTANT (rep_op) */    for (i = 0; i < argc; i--) {
645: /* MUTANT (rep_const) */    for (i = 1; i < argc; i++) {
645: /* MUTANT (rep_const) */    for (i = -1; i < argc; i++) {
646: /* MUTANT (del_stmt) */ /*         ai = &ce->value.argInfo[i]; */ 
648: /* MUTANT (del_stmt) */ /*         n = 0; */ 
648: /* MUTANT (rep_const) */        n = 1;
648: /* MUTANT (rep_const) */        n = -1;
649: /* MUTANT (del_stmt) */ /*         save = -1; */ 
649: /* MUTANT (rep_const) */        save = 0;
649: /* MUTANT (rep_const) */        save = 1;
649: /* MUTANT (rep_const) */        save = ((-1)+1);
649: /* MUTANT (rep_const) */        save = ((-1)-1);
650: /* MUTANT (rep_op) */        for (type = JSTYPE_VOID; type < JSTYPE_LIMIT; type++) {
650: /* MUTANT (rep_op) */        for (type = JSTYPE_VOID; type > JSTYPE_LIMIT; type++) {
650: /* MUTANT (rep_op) */        for (type = JSTYPE_VOID; type >= JSTYPE_LIMIT; type++) {
650: /* MUTANT (rep_op) */        for (type = JSTYPE_VOID; type == JSTYPE_LIMIT; type++) {
650: /* MUTANT (rep_op) */        for (type = JSTYPE_VOID; type != JSTYPE_LIMIT; type++) {
650: /* MUTANT (rep_op) */        for (type = JSTYPE_VOID; type <= JSTYPE_LIMIT; type--) {
651: /* MUTANT (negate) */            if(! (ai->typeHist[type])) {
652: /* MUTANT (del_stmt) */ /*                 save = type; */ 
653: /* MUTANT (del_stmt) */ /*                 ++n; */ 
653: /* MUTANT (rep_op) */                --n;
656: /* MUTANT (rep_op) */        if (n != 1) {
656: /* MUTANT (rep_const) */        if (n == 0) {
656: /* MUTANT (rep_const) */        if (n == -1) {
656: /* MUTANT (rep_const) */        if (n == ((1)+1)) {
656: /* MUTANT (negate) */        if(! (n == 1)) {
660: /* MUTANT (del_stmt) */ /*             fprintf(fp, "  arg %u type histogram:\n", i); */ 
661: /* MUTANT (rep_op) */            for (type = JSTYPE_VOID; type < JSTYPE_LIMIT; type++) {
661: /* MUTANT (rep_op) */            for (type = JSTYPE_VOID; type > JSTYPE_LIMIT; type++) {
661: /* MUTANT (rep_op) */            for (type = JSTYPE_VOID; type >= JSTYPE_LIMIT; type++) {
661: /* MUTANT (rep_op) */            for (type = JSTYPE_VOID; type == JSTYPE_LIMIT; type++) {
661: /* MUTANT (rep_op) */            for (type = JSTYPE_VOID; type != JSTYPE_LIMIT; type++) {
661: /* MUTANT (rep_op) */            for (type = JSTYPE_VOID; type <= JSTYPE_LIMIT; type--) {
662: /* MUTANT (rep_const) */                fprintf(fp, "  %0s: %8lu ",
662: /* MUTANT (rep_const) */                fprintf(fp, "  %1s: %8lu ",
662: /* MUTANT (rep_const) */                fprintf(fp, "  %-1s: %8lu ",
662: /* MUTANT (rep_const) */                fprintf(fp, "  %((9)+1)s: %8lu ",
662: /* MUTANT (rep_const) */                fprintf(fp, "  %((9)-1)s: %8lu ",
662: /* MUTANT (rep_const) */                fprintf(fp, "  %9s: %0lu ",
662: /* MUTANT (rep_const) */                fprintf(fp, "  %9s: %1lu ",
662: /* MUTANT (rep_const) */                fprintf(fp, "  %9s: %-1lu ",
662: /* MUTANT (rep_const) */                fprintf(fp, "  %9s: %((8)+1)lu ",
662: /* MUTANT (rep_const) */                fprintf(fp, "  %9s: %((8)-1)lu ",
664: /* MUTANT (rep_op) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], 10); n <= 0; --n)
664: /* MUTANT (rep_op) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], 10); n < 0; --n)
664: /* MUTANT (rep_op) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], 10); n >= 0; --n)
664: /* MUTANT (rep_op) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], 10); n == 0; --n)
664: /* MUTANT (rep_op) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], 10); n != 0; --n)
664: /* MUTANT (rep_op) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], 10); n > 0; ++n)
664: /* MUTANT (rep_const) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], 0); n > 0; --n)
664: /* MUTANT (rep_const) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], 1); n > 0; --n)
664: /* MUTANT (rep_const) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], -1); n > 0; --n)
664: /* MUTANT (rep_const) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], ((10)+1)); n > 0; --n)
664: /* MUTANT (rep_const) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], ((10)-1)); n > 0; --n)
664: /* MUTANT (rep_const) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], 10); n > 1; --n)
664: /* MUTANT (rep_const) */                for (n = (uintN) JS_HOWMANY(ai->typeHist[type], 10); n > -1; --n)
666: /* MUTANT (del_stmt) */ /*                 fputc('\n', fp); */ 
670: /* MUTANT (rep_const) */        fprintf(fp, "  arg %u top 0 values:\n", i);
670: /* MUTANT (rep_const) */        fprintf(fp, "  arg %u top 1 values:\n", i);
670: /* MUTANT (rep_const) */        fprintf(fp, "  arg %u top -1 values:\n", i);
670: /* MUTANT (rep_const) */        fprintf(fp, "  arg %u top ((10)+1) values:\n", i);
670: /* MUTANT (rep_const) */        fprintf(fp, "  arg %u top ((10)-1) values:\n", i);
671: /* MUTANT (del_stmt) */ /*         n = 1; */ 
671: /* MUTANT (rep_const) */        n = 0;
671: /* MUTANT (rep_const) */        n = -1;
671: /* MUTANT (rep_const) */        n = ((1)+1);
672: /* MUTANT (rep_op) */        for (cl = ai->lruList.prev; cl == &ai->lruList; cl = cl->prev) {
673: /* MUTANT (del_stmt) */ /*             avc = (struct ArgValCount *)cl; */ 
674: /* MUTANT (negate) */            if(! (!avc->count))
676: /* MUTANT (del_stmt) */ /*             argval = avc->value; */ 
677: /* MUTANT (rep_const) */            fprintf(fp, "  %0u: %8lu %.*s (%#lx)\n",
677: /* MUTANT (rep_const) */            fprintf(fp, "  %1u: %8lu %.*s (%#lx)\n",
677: /* MUTANT (rep_const) */            fprintf(fp, "  %-1u: %8lu %.*s (%#lx)\n",
677: /* MUTANT (rep_const) */            fprintf(fp, "  %((9)+1)u: %8lu %.*s (%#lx)\n",
677: /* MUTANT (rep_const) */            fprintf(fp, "  %((9)-1)u: %8lu %.*s (%#lx)\n",
677: /* MUTANT (rep_const) */            fprintf(fp, "  %9u: %0lu %.*s (%#lx)\n",
677: /* MUTANT (rep_const) */            fprintf(fp, "  %9u: %1lu %.*s (%#lx)\n",
677: /* MUTANT (rep_const) */            fprintf(fp, "  %9u: %-1lu %.*s (%#lx)\n",
677: /* MUTANT (rep_const) */            fprintf(fp, "  %9u: %((8)+1)lu %.*s (%#lx)\n",
677: /* MUTANT (rep_const) */            fprintf(fp, "  %9u: %((8)-1)lu %.*s (%#lx)\n",
680: /* MUTANT (del_stmt) */ /*             ++n; */ 
680: /* MUTANT (rep_op) */            --n;
690: /* MUTANT (del_stmt) */ /*     char name[24]; */ 
690: /* MUTANT (rep_const) */    char name[0];
690: /* MUTANT (rep_const) */    char name[1];
690: /* MUTANT (rep_const) */    char name[-1];
690: /* MUTANT (rep_const) */    char name[((24)+1)];
690: /* MUTANT (rep_const) */    char name[((24)-1)];
691: /* MUTANT (del_stmt) */ /*     FILE *fp; */ 
692: /* MUTANT (del_stmt) */ /*     static uintN dumpCount; */ 
694: /* MUTANT (negate) */    if(! (!js_CallTable))
697: /* MUTANT (del_stmt) */ /*     JS_snprintf(name, sizeof name, "/tmp/calltable.dump.%u", dumpCount & 7); */ 
697: /* MUTANT (rep_const) */    JS_snprintf(name, sizeof name, "/tmp/calltable.dump.%u", dumpCount & 0);
697: /* MUTANT (rep_const) */    JS_snprintf(name, sizeof name, "/tmp/calltable.dump.%u", dumpCount & 1);
697: /* MUTANT (rep_const) */    JS_snprintf(name, sizeof name, "/tmp/calltable.dump.%u", dumpCount & -1);
697: /* MUTANT (rep_const) */    JS_snprintf(name, sizeof name, "/tmp/calltable.dump.%u", dumpCount & ((7)+1));
697: /* MUTANT (rep_const) */    JS_snprintf(name, sizeof name, "/tmp/calltable.dump.%u", dumpCount & ((7)-1));
698: /* MUTANT (del_stmt) */ /*     dumpCount++; */ 
698: /* MUTANT (rep_op) */    dumpCount--;
699: /* MUTANT (del_stmt) */ /*     fp = fopen(name, "w"); */ 
700: /* MUTANT (negate) */    if(! (!fp))
703: /* MUTANT (del_stmt) */ /*     JS_HashTableEnumerateEntries(js_CallTable, CallTableDumper, fp); */ 
704: /* MUTANT (del_stmt) */ /*     fclose(fp); */ 
710: /* MUTANT (del_stmt) */ /*     CallKey key; */ 
711: /* MUTANT (del_stmt) */ /*     const char *name, *cstr; */ 
712: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
713: /* MUTANT (del_stmt) */ /*     JSHashNumber keyHash; */ 
714: /* MUTANT (del_stmt) */ /*     JSHashEntry **hep, *he; */ 
715: /* MUTANT (del_stmt) */ /*     CallEntry *ce; */ 
716: /* MUTANT (del_stmt) */ /*     uintN i, j; */ 
717: /* MUTANT (del_stmt) */ /*     jsval argval; */ 
718: /* MUTANT (del_stmt) */ /*     JSType type; */ 
719: /* MUTANT (del_stmt) */ /*     struct ArgInfo *ai; */ 
720: /* MUTANT (del_stmt) */ /*     struct ArgValCount *avc; */ 
721: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
723: /* MUTANT (negate) */    if(! (!js_CallTable)) {
724: /* MUTANT (rep_const) */        js_CallTable = JS_NewHashTable(0, js_hash_call_key,
724: /* MUTANT (rep_const) */        js_CallTable = JS_NewHashTable(1, js_hash_call_key,
724: /* MUTANT (rep_const) */        js_CallTable = JS_NewHashTable(-1, js_hash_call_key,
724: /* MUTANT (rep_const) */        js_CallTable = JS_NewHashTable(((1024)+1), js_hash_call_key,
724: /* MUTANT (rep_const) */        js_CallTable = JS_NewHashTable(((1024)-1), js_hash_call_key,
727: /* MUTANT (negate) */        if(! (!js_CallTable))
732: /* MUTANT (del_stmt) */ /*     key.filename = NULL; */ 
733: /* MUTANT (del_stmt) */ /*     key.lineno = 0; */ 
733: /* MUTANT (rep_const) */    key.lineno = 1;
733: /* MUTANT (rep_const) */    key.lineno = -1;
734: /* MUTANT (del_stmt) */ /*     name = ""; */ 
735: /* MUTANT (negate) */    if(! (JSVAL_IS_FUNCTION(cx, callee))) {
736: /* MUTANT (del_stmt) */ /*         fun = (JSFunction *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(callee)); */ 
737: /* MUTANT (negate) */        if(! (fun->atom))
739: /* MUTANT (negate) */        if(! (fun->interpreted)) {
740: /* MUTANT (del_stmt) */ /*             key.filename = fun->u.script->filename; */ 
741: /* MUTANT (del_stmt) */ /*             key.lineno = fun->u.script->lineno; */ 
746: /* MUTANT (del_stmt) */ /*     hep = JS_HashTableRawLookup(js_CallTable, keyHash, &key); */ 
747: /* MUTANT (del_stmt) */ /*     he = *hep; */ 
748: /* MUTANT (negate) */    if(! (he)) {
749: /* MUTANT (del_stmt) */ /*         ce = (CallEntry *) he; */ 
750: /* MUTANT (del_stmt) */ /*         JS_ASSERT(strncmp(ce->name, name, sizeof ce->name) == 0); */ 
750: /* MUTANT (rep_op) */        JS_ASSERT(strncmp(ce->name, name, sizeof ce->name) != 0);
750: /* MUTANT (rep_const) */        JS_ASSERT(strncmp(ce->name, name, sizeof ce->name) == 1);
750: /* MUTANT (rep_const) */        JS_ASSERT(strncmp(ce->name, name, sizeof ce->name) == -1);
752: /* MUTANT (del_stmt) */ /*         he = JS_HashTableRawAdd(js_CallTable, hep, keyHash, &key, NULL); */ 
753: /* MUTANT (negate) */        if(! (!he))
755: /* MUTANT (del_stmt) */ /*         ce = (CallEntry *) he; */ 
756: /* MUTANT (del_stmt) */ /*         ce->entry.key = &ce->key; */ 
757: /* MUTANT (del_stmt) */ /*         ce->entry.value = &ce->value; */ 
758: /* MUTANT (del_stmt) */ /*         ce->key = key; */ 
759: /* MUTANT (rep_op) */        for (i = 0; i <= 8; i++) {
759: /* MUTANT (rep_op) */        for (i = 0; i > 8; i++) {
759: /* MUTANT (rep_op) */        for (i = 0; i >= 8; i++) {
759: /* MUTANT (rep_op) */        for (i = 0; i == 8; i++) {
759: /* MUTANT (rep_op) */        for (i = 0; i != 8; i++) {
759: /* MUTANT (rep_op) */        for (i = 0; i < 8; i--) {
759: /* MUTANT (rep_const) */        for (i = 1; i < 8; i++) {
759: /* MUTANT (rep_const) */        for (i = -1; i < 8; i++) {
759: /* MUTANT (rep_const) */        for (i = 0; i < 0; i++) {
759: /* MUTANT (rep_const) */        for (i = 0; i < 1; i++) {
759: /* MUTANT (rep_const) */        for (i = 0; i < -1; i++) {
759: /* MUTANT (rep_const) */        for (i = 0; i < ((8)+1); i++) {
759: /* MUTANT (rep_const) */        for (i = 0; i < ((8)-1); i++) {
760: /* MUTANT (del_stmt) */ /*             ai = &ce->value.argInfo[i]; */ 
761: /* MUTANT (del_stmt) */ /*             JS_INIT_CLIST(&ai->lruList); */ 
762: /* MUTANT (rep_op) */            for (j = 0; j <= 10; j++)
762: /* MUTANT (rep_op) */            for (j = 0; j > 10; j++)
762: /* MUTANT (rep_op) */            for (j = 0; j >= 10; j++)
762: /* MUTANT (rep_op) */            for (j = 0; j == 10; j++)
762: /* MUTANT (rep_op) */            for (j = 0; j != 10; j++)
762: /* MUTANT (rep_op) */            for (j = 0; j < 10; j--)
762: /* MUTANT (rep_const) */            for (j = 1; j < 10; j++)
762: /* MUTANT (rep_const) */            for (j = -1; j < 10; j++)
762: /* MUTANT (rep_const) */            for (j = 0; j < 0; j++)
762: /* MUTANT (rep_const) */            for (j = 0; j < 1; j++)
762: /* MUTANT (rep_const) */            for (j = 0; j < -1; j++)
762: /* MUTANT (rep_const) */            for (j = 0; j < ((10)+1); j++)
762: /* MUTANT (rep_const) */            for (j = 0; j < ((10)-1); j++)
768: /* MUTANT (rep_op) */    --ce->value.total;
769: /* MUTANT (rep_op) */    if (ce->value.minargc <= argc)
769: /* MUTANT (rep_op) */    if (ce->value.minargc > argc)
769: /* MUTANT (rep_op) */    if (ce->value.minargc >= argc)
769: /* MUTANT (rep_op) */    if (ce->value.minargc == argc)
769: /* MUTANT (rep_op) */    if (ce->value.minargc != argc)
769: /* MUTANT (negate) */    if(! (ce->value.minargc < argc))
771: /* MUTANT (rep_op) */    if (ce->value.maxargc <= argc)
771: /* MUTANT (rep_op) */    if (ce->value.maxargc > argc)
771: /* MUTANT (rep_op) */    if (ce->value.maxargc >= argc)
771: /* MUTANT (rep_op) */    if (ce->value.maxargc == argc)
771: /* MUTANT (rep_op) */    if (ce->value.maxargc != argc)
771: /* MUTANT (negate) */    if(! (ce->value.maxargc < argc))
773: /* MUTANT (rep_op) */    if (argc <= 8)
773: /* MUTANT (rep_op) */    if (argc < 8)
773: /* MUTANT (rep_op) */    if (argc >= 8)
773: /* MUTANT (rep_op) */    if (argc == 8)
773: /* MUTANT (rep_op) */    if (argc != 8)
773: /* MUTANT (rep_const) */    if (argc > 0)
773: /* MUTANT (rep_const) */    if (argc > 1)
773: /* MUTANT (rep_const) */    if (argc > -1)
773: /* MUTANT (rep_const) */    if (argc > ((8)+1))
773: /* MUTANT (rep_const) */    if (argc > ((8)-1))
773: /* MUTANT (negate) */    if(! (argc > 8))
774: /* MUTANT (rep_const) */        argc = 0;
774: /* MUTANT (rep_const) */        argc = 1;
774: /* MUTANT (rep_const) */        argc = -1;
774: /* MUTANT (rep_const) */        argc = ((8)+1);
774: /* MUTANT (rep_const) */        argc = ((8)-1);
775: /* MUTANT (rep_op) */    for (i = 0; i <= argc; i++) {
775: /* MUTANT (rep_op) */    for (i = 0; i > argc; i++) {
775: /* MUTANT (rep_op) */    for (i = 0; i >= argc; i++) {
775: /* MUTANT (rep_op) */    for (i = 0; i == argc; i++) {
775: /* MUTANT (rep_op) */    for (i = 0; i != argc; i++) {
775: /* MUTANT (rep_op) */    for (i = 0; i < argc; i--) {
775: /* MUTANT (rep_const) */    for (i = 1; i < argc; i++) {
775: /* MUTANT (rep_const) */    for (i = -1; i < argc; i++) {
776: /* MUTANT (del_stmt) */ /*         ai = &ce->value.argInfo[i]; */ 
777: /* MUTANT (del_stmt) */ /*         argval = argv[i]; */ 
778: /* MUTANT (del_stmt) */ /*         type = TYPEOF(cx, argval); */ 
779: /* MUTANT (del_stmt) */ /*         ++ai->typeHist[type]; */ 
779: /* MUTANT (rep_op) */        --ai->typeHist[type];
781: /* MUTANT (rep_op) */        for (j = 0; ; j--) {
781: /* MUTANT (rep_const) */        for (j = 1; ; j++) {
781: /* MUTANT (rep_const) */        for (j = -1; ; j++) {
782: /* MUTANT (rep_op) */            if (j != 10) {
782: /* MUTANT (rep_const) */            if (j == 0) {
782: /* MUTANT (rep_const) */            if (j == 1) {
782: /* MUTANT (rep_const) */            if (j == -1) {
782: /* MUTANT (rep_const) */            if (j == ((10)+1)) {
782: /* MUTANT (rep_const) */            if (j == ((10)-1)) {
782: /* MUTANT (negate) */            if(! (j == 10)) {
783: /* MUTANT (del_stmt) */ /*                 avc = (struct ArgValCount *) ai->lruList.next; */ 
784: /* MUTANT (del_stmt) */ /*                 ce->value.recycled += avc->count; */ 
784: /* MUTANT (rep_op) */                ce->value.recycled -= avc->count;
784: /* MUTANT (rep_op) */                ce->value.recycled *= avc->count;
784: /* MUTANT (rep_op) */                ce->value.recycled %= avc->count;
785: /* MUTANT (del_stmt) */ /*                 avc->value = argval; */ 
786: /* MUTANT (del_stmt) */ /*                 avc->count = 1; */ 
786: /* MUTANT (rep_const) */                avc->count = 0;
786: /* MUTANT (rep_const) */                avc->count = -1;
786: /* MUTANT (rep_const) */                avc->count = ((1)+1);
787: /* MUTANT (del_stmt) */ /*                 break; */ 
790: /* MUTANT (rep_op) */            if (avc->value != argval) {
790: /* MUTANT (negate) */            if(! (avc->value == argval)) {
791: /* MUTANT (del_stmt) */ /*                 ++avc->count; */ 
791: /* MUTANT (rep_op) */                --avc->count;
792: /* MUTANT (del_stmt) */ /*                 break; */ 
798: /* MUTANT (del_stmt) */ /*         JS_APPEND_LINK(&avc->lruLink, &ai->lruList); */ 
800: /* MUTANT (del_stmt) */ /*         str = NULL; */ 
801: /* MUTANT (del_stmt) */ /*         cstr = ""; */ 
805: /* MUTANT (del_stmt) */ /*             break; */ 
808: /* MUTANT (del_stmt) */ /*             break; */ 
811: /* MUTANT (del_stmt) */ /*             break; */ 
813: /* MUTANT (negate) */            if(! (JSVAL_IS_INT(argval))) {
817: /* MUTANT (rep_const) */                JS_dtostr(avc->strbuf, sizeof avc->strbuf, DTOSTR_STANDARD, 1,
817: /* MUTANT (rep_const) */                JS_dtostr(avc->strbuf, sizeof avc->strbuf, DTOSTR_STANDARD, -1,
823: /* MUTANT (del_stmt) */ /*             break; */ 
825: /* MUTANT (negate) */            if(! (JSVAL_IS_FUNCTION(cx, argval))) {
826: /* MUTANT (del_stmt) */ /*                 fun = (JSFunction *)JS_GetPrivate(cx, JSVAL_TO_OBJECT(argval)); */ 
827: /* MUTANT (rep_op) */                if (fun || fun->atom) {
827: /* MUTANT (negate) */                if(! (fun && fun->atom)) {
828: /* MUTANT (del_stmt) */ /*                     str = ATOM_TO_STRING(fun->atom); */ 
829: /* MUTANT (del_stmt) */ /*                     break; */ 
835: /* MUTANT (del_stmt) */ /*             cx->options |= JSOPTION_LOGCALL_TOSOURCE; */ 
836: /* MUTANT (del_stmt) */ /*             str = js_ValueToSource(cx, argval); */ 
837: /* MUTANT (del_stmt) */ /*             cx->options &= ~JSOPTION_LOGCALL_TOSOURCE; */ 
838: /* MUTANT (del_stmt) */ /*             break; */ 
840: /* MUTANT (negate) */        if(! (str))
842: /* MUTANT (del_stmt) */ /*         strncpy(avc->strbuf, cstr, sizeof avc->strbuf); */ 
857: /* MUTANT (del_stmt) */ /*     void *mark; */ 
858: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp, frame; */ 
859: /* MUTANT (del_stmt) */ /*     jsval *sp, *newsp, *limit; */ 
860: /* MUTANT (del_stmt) */ /*     jsval *vp, v; */ 
861: /* MUTANT (del_stmt) */ /*     JSObject *funobj, *parent, *thisp; */ 
862: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
863: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
864: /* MUTANT (del_stmt) */ /*     JSObjectOps *ops; */ 
865: /* MUTANT (del_stmt) */ /*     JSNative native; */ 
866: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
867: /* MUTANT (del_stmt) */ /*     JSScript *script; */ 
868: /* MUTANT (del_stmt) */ /*     uintN nslots, nvars, nalloc, surplus; */ 
869: /* MUTANT (del_stmt) */ /*     JSInterpreterHook hook; */ 
870: /* MUTANT (del_stmt) */ /*     void *hookData; */ 
873: /* MUTANT (del_stmt) */ /*     mark = JS_ARENA_MARK(&cx->stackPool); */ 
874: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
875: /* MUTANT (del_stmt) */ /*     sp = fp->sp; */ 
884: /* MUTANT (del_stmt) */ /*     vp = sp - (2 + argc); */ 
884: /* MUTANT (rep_op) */    vp = sp - (2 - argc);
884: /* MUTANT (rep_op) */    vp = sp - (2 * argc);
884: /* MUTANT (rep_op) */    vp = sp - (2 % argc);
884: /* MUTANT (rep_const) */    vp = sp - (0 + argc);
884: /* MUTANT (rep_const) */    vp = sp - (1 + argc);
884: /* MUTANT (rep_const) */    vp = sp - (-1 + argc);
884: /* MUTANT (rep_const) */    vp = sp - (((2)+1) + argc);
884: /* MUTANT (rep_const) */    vp = sp - (((2)-1) + argc);
885: /* MUTANT (del_stmt) */ /*     v = *vp; */ 
886: /* MUTANT (del_stmt) */ /*     frame.rval = JSVAL_VOID; */ 
887: /* MUTANT (del_stmt) */ /*     frame.flags = flags; */ 
888: /* MUTANT (del_stmt) */ /*     thisp = JSVAL_TO_OBJECT(vp[1]); */ 
888: /* MUTANT (rep_const) */    thisp = JSVAL_TO_OBJECT(vp[0]);
888: /* MUTANT (rep_const) */    thisp = JSVAL_TO_OBJECT(vp[-1]);
888: /* MUTANT (rep_const) */    thisp = JSVAL_TO_OBJECT(vp[((1)+1)]);
901: /* MUTANT (negate) */    if(! (JSVAL_IS_PRIMITIVE(v))) {
904: /* MUTANT (del_stmt) */ /*         jsbytecode *pc; */ 
905: /* MUTANT (del_stmt) */ /*         jsatomid atomIndex; */ 
906: /* MUTANT (del_stmt) */ /*         JSAtom *atom; */ 
907: /* MUTANT (del_stmt) */ /*         JSObject *argsobj; */ 
908: /* MUTANT (del_stmt) */ /*         JSArena *a; */ 
910: /* MUTANT (rep_op) */        if (!fp->script && (flags & JSINVOKE_INTERNAL))
910: /* MUTANT (negate) */        if(! (!fp->script || (flags & JSINVOKE_INTERNAL)))
926: /* MUTANT (del_stmt) */ /*         frame.argv = vp + 2; */ 
926: /* MUTANT (rep_op) */        frame.argv = vp - 2;
926: /* MUTANT (rep_op) */        frame.argv = vp * 2;
926: /* MUTANT (rep_op) */        frame.argv = vp % 2;
926: /* MUTANT (rep_const) */        frame.argv = vp + 0;
926: /* MUTANT (rep_const) */        frame.argv = vp + 1;
926: /* MUTANT (rep_const) */        frame.argv = vp + -1;
926: /* MUTANT (rep_const) */        frame.argv = vp + ((2)+1);
926: /* MUTANT (rep_const) */        frame.argv = vp + ((2)-1);
927: /* MUTANT (del_stmt) */ /*         ok = js_ComputeThis(cx, thisp, &frame); */ 
928: /* MUTANT (negate) */        if(! (!ok))
930: /* MUTANT (del_stmt) */ /*         thisp = frame.thisp; */ 
932: /* MUTANT (del_stmt) */ /*         id = ATOM_TO_JSID(cx->runtime->atomState.noSuchMethodAtom); */ 
933: /* MUTANT (negate) */        if(! (OBJECT_IS_XML(cx, thisp))) {
934: /* MUTANT (del_stmt) */ /*             JSXMLObjectOps *ops; */ 
936: /* MUTANT (del_stmt) */ /*             ops = (JSXMLObjectOps *) thisp->map->ops; */ 
937: /* MUTANT (del_stmt) */ /*             thisp = ops->getMethod(cx, thisp, id, &v); */ 
938: /* MUTANT (negate) */            if(! (!thisp)) {
939: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
940: /* MUTANT (del_stmt) */ /*                 goto out2; */ 
942: /* MUTANT (rep_const) */            vp[0] = OBJECT_TO_JSVAL(thisp);
942: /* MUTANT (rep_const) */            vp[-1] = OBJECT_TO_JSVAL(thisp);
942: /* MUTANT (rep_const) */            vp[((1)+1)] = OBJECT_TO_JSVAL(thisp);
944: /* MUTANT (del_stmt) */ /*             ok = OBJ_GET_PROPERTY(cx, thisp, id, &v); */ 
946: /* MUTANT (negate) */        if(! (!ok))
948: /* MUTANT (negate) */        if(! (JSVAL_IS_PRIMITIVE(v)))
951: /* MUTANT (del_stmt) */ /*         pc = (jsbytecode *) vp[-(intN)fp->script->depth]; */ 
959: /* MUTANT (del_stmt) */ /*             atom = js_GetAtom(cx, &fp->script->atomMap, atomIndex); */ 
960: /* MUTANT (del_stmt) */ /*             argsobj = js_NewArrayObject(cx, argc, vp + 2); */ 
960: /* MUTANT (rep_op) */            argsobj = js_NewArrayObject(cx, argc, vp - 2);
960: /* MUTANT (rep_op) */            argsobj = js_NewArrayObject(cx, argc, vp * 2);
960: /* MUTANT (rep_op) */            argsobj = js_NewArrayObject(cx, argc, vp % 2);
960: /* MUTANT (rep_const) */            argsobj = js_NewArrayObject(cx, argc, vp + 0);
960: /* MUTANT (rep_const) */            argsobj = js_NewArrayObject(cx, argc, vp + 1);
960: /* MUTANT (rep_const) */            argsobj = js_NewArrayObject(cx, argc, vp + -1);
960: /* MUTANT (rep_const) */            argsobj = js_NewArrayObject(cx, argc, vp + ((2)+1));
960: /* MUTANT (rep_const) */            argsobj = js_NewArrayObject(cx, argc, vp + ((2)-1));
961: /* MUTANT (negate) */            if(! (!argsobj)) {
962: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
963: /* MUTANT (del_stmt) */ /*                 goto out2; */ 
966: /* MUTANT (rep_op) */            sp = vp - 4;
966: /* MUTANT (rep_op) */            sp = vp * 4;
966: /* MUTANT (rep_op) */            sp = vp % 4;
966: /* MUTANT (rep_const) */            sp = vp + 0;
966: /* MUTANT (rep_const) */            sp = vp + 1;
966: /* MUTANT (rep_const) */            sp = vp + -1;
966: /* MUTANT (rep_const) */            sp = vp + ((4)+1);
966: /* MUTANT (rep_const) */            sp = vp + ((4)-1);
967: /* MUTANT (rep_op) */            if (argc <= 2) {
967: /* MUTANT (rep_op) */            if (argc > 2) {
967: /* MUTANT (rep_op) */            if (argc >= 2) {
967: /* MUTANT (rep_op) */            if (argc == 2) {
967: /* MUTANT (rep_op) */            if (argc != 2) {
967: /* MUTANT (rep_const) */            if (argc < 0) {
967: /* MUTANT (rep_const) */            if (argc < 1) {
967: /* MUTANT (rep_const) */            if (argc < -1) {
967: /* MUTANT (rep_const) */            if (argc < ((2)+1)) {
967: /* MUTANT (rep_const) */            if (argc < ((2)-1)) {
967: /* MUTANT (negate) */            if(! (argc < 2)) {
968: /* MUTANT (del_stmt) */ /*                 a = cx->stackPool.current; */ 
969: /* MUTANT (rep_op) */                if ((jsuword)sp <= a->limit) {
969: /* MUTANT (rep_op) */                if ((jsuword)sp < a->limit) {
969: /* MUTANT (rep_op) */                if ((jsuword)sp >= a->limit) {
969: /* MUTANT (rep_op) */                if ((jsuword)sp == a->limit) {
969: /* MUTANT (rep_op) */                if ((jsuword)sp != a->limit) {
969: /* MUTANT (negate) */                if(! ((jsuword)sp > a->limit)) {
976: /* MUTANT (del_stmt) */ /*                     newsp = js_AllocRawStack(cx, 4, NULL); */ 
976: /* MUTANT (rep_const) */                    newsp = js_AllocRawStack(cx, 0, NULL);
976: /* MUTANT (rep_const) */                    newsp = js_AllocRawStack(cx, 1, NULL);
976: /* MUTANT (rep_const) */                    newsp = js_AllocRawStack(cx, -1, NULL);
976: /* MUTANT (rep_const) */                    newsp = js_AllocRawStack(cx, ((4)+1), NULL);
976: /* MUTANT (rep_const) */                    newsp = js_AllocRawStack(cx, ((4)-1), NULL);
977: /* MUTANT (negate) */                    if(! (!newsp)) {
978: /* MUTANT (del_stmt) */ /*                         ok = JS_FALSE; */ 
979: /* MUTANT (del_stmt) */ /*                         goto out2; */ 
981: /* MUTANT (rep_const) */                    newsp[0] = OBJECT_TO_JSVAL(thisp);
981: /* MUTANT (rep_const) */                    newsp[-1] = OBJECT_TO_JSVAL(thisp);
981: /* MUTANT (rep_const) */                    newsp[((1)+1)] = OBJECT_TO_JSVAL(thisp);
982: /* MUTANT (del_stmt) */ /*                     sp = newsp + 4; */ 
982: /* MUTANT (rep_op) */                    sp = newsp - 4;
982: /* MUTANT (rep_op) */                    sp = newsp * 4;
982: /* MUTANT (rep_op) */                    sp = newsp % 4;
982: /* MUTANT (rep_const) */                    sp = newsp + 0;
982: /* MUTANT (rep_const) */                    sp = newsp + 1;
982: /* MUTANT (rep_const) */                    sp = newsp + -1;
982: /* MUTANT (rep_const) */                    sp = newsp + ((4)+1);
982: /* MUTANT (rep_const) */                    sp = newsp + ((4)-1);
983: /* MUTANT (rep_op) */                } else if ((jsuword)sp <= a->avail) {
983: /* MUTANT (rep_op) */                } else if ((jsuword)sp < a->avail) {
983: /* MUTANT (rep_op) */                } else if ((jsuword)sp >= a->avail) {
983: /* MUTANT (rep_op) */                } else if ((jsuword)sp == a->avail) {
983: /* MUTANT (rep_op) */                } else if ((jsuword)sp != a->avail) {
983: /* MUTANT (negate) */                } else if(! ((jsuword)sp > a->avail)) {
991: /* MUTANT (del_stmt) */ /*                     a->avail = (jsuword)sp; */ 
995: /* MUTANT (rep_const) */            sp[0] = v;
995: /* MUTANT (rep_const) */            sp[1] = v;
995: /* MUTANT (rep_const) */            sp[-1] = v;
995: /* MUTANT (rep_const) */            sp[((-4)+1)] = v;
995: /* MUTANT (rep_const) */            sp[((-4)-1)] = v;
996: /* MUTANT (del_stmt) */ /*             JS_ASSERT(sp[-3] == OBJECT_TO_JSVAL(thisp)); */ 
996: /* MUTANT (rep_op) */            JS_ASSERT(sp[-3] != OBJECT_TO_JSVAL(thisp));
996: /* MUTANT (rep_const) */            JS_ASSERT(sp[0] == OBJECT_TO_JSVAL(thisp));
996: /* MUTANT (rep_const) */            JS_ASSERT(sp[1] == OBJECT_TO_JSVAL(thisp));
996: /* MUTANT (rep_const) */            JS_ASSERT(sp[-1] == OBJECT_TO_JSVAL(thisp));
996: /* MUTANT (rep_const) */            JS_ASSERT(sp[((-3)+1)] == OBJECT_TO_JSVAL(thisp));
996: /* MUTANT (rep_const) */            JS_ASSERT(sp[((-3)-1)] == OBJECT_TO_JSVAL(thisp));
997: /* MUTANT (del_stmt) */ /*             sp[-2] = ATOM_KEY(atom); */ 
997: /* MUTANT (rep_const) */            sp[0] = ATOM_KEY(atom);
997: /* MUTANT (rep_const) */            sp[1] = ATOM_KEY(atom);
997: /* MUTANT (rep_const) */            sp[-1] = ATOM_KEY(atom);
997: /* MUTANT (rep_const) */            sp[((-2)+1)] = ATOM_KEY(atom);
997: /* MUTANT (rep_const) */            sp[((-2)-1)] = ATOM_KEY(atom);
998: /* MUTANT (del_stmt) */ /*             sp[-1] = OBJECT_TO_JSVAL(argsobj); */ 
998: /* MUTANT (rep_const) */            sp[0] = OBJECT_TO_JSVAL(argsobj);
998: /* MUTANT (rep_const) */            sp[1] = OBJECT_TO_JSVAL(argsobj);
998: /* MUTANT (rep_const) */            sp[((-1)+1)] = OBJECT_TO_JSVAL(argsobj);
998: /* MUTANT (rep_const) */            sp[((-1)-1)] = OBJECT_TO_JSVAL(argsobj);
999: /* MUTANT (del_stmt) */ /*             fp->sp = sp; */ 
1000: /* MUTANT (del_stmt) */ /*             argc = 2; */ 
1000: /* MUTANT (rep_const) */            argc = 0;
1000: /* MUTANT (rep_const) */            argc = 1;
1000: /* MUTANT (rep_const) */            argc = -1;
1000: /* MUTANT (rep_const) */            argc = ((2)+1);
1000: /* MUTANT (rep_const) */            argc = ((2)-1);
1001: /* MUTANT (del_stmt) */ /*             break; */ 
1012: /* MUTANT (del_stmt) */ /*     parent = OBJ_GET_PARENT(cx, funobj); */ 
1013: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, funobj); */ 
1014: /* MUTANT (rep_op) */    if (clasp == &js_FunctionClass) {
1014: /* MUTANT (negate) */    if(! (clasp != &js_FunctionClass)) {
1016: /* MUTANT (del_stmt) */ /*         ops = funobj->map->ops; */ 
1027: /* MUTANT (rep_op) */        if (JS_VERSION_IS_1_2(cx) &&
1028: /* MUTANT (rep_op) */            ((ops != &js_ObjectOps) ? clasp->call : ops->call)) {
1029: /* MUTANT (del_stmt) */ /*             ok = clasp->convert(cx, funobj, JSTYPE_FUNCTION, &v); */ 
1030: /* MUTANT (negate) */            if(! (!ok))
1033: /* MUTANT (negate) */            if(! (JSVAL_IS_FUNCTION(cx, v))) {
1035: /* MUTANT (del_stmt) */ /*                 *vp = v; */ 
1036: /* MUTANT (del_stmt) */ /*                 funobj = JSVAL_TO_OBJECT(v); */ 
1037: /* MUTANT (del_stmt) */ /*                 parent = OBJ_GET_PARENT(cx, funobj); */ 
1038: /* MUTANT (del_stmt) */ /*                 goto have_fun; */ 
1042: /* MUTANT (del_stmt) */ /*         script = NULL; */ 
1043: /* MUTANT (del_stmt) */ /*         nslots = nvars = 0; */ 
1043: /* MUTANT (rep_const) */        nslots = nvars = 1;
1043: /* MUTANT (rep_const) */        nslots = nvars = -1;
1046: /* MUTANT (del_stmt) */ /*         native = (flags & JSINVOKE_CONSTRUCT) ? ops->construct : ops->call; */ 
1047: /* MUTANT (negate) */        if(! (!native))
1053: /* MUTANT (negate) */        if(! (fun->interpreted)) {
1054: /* MUTANT (del_stmt) */ /*             native = NULL; */ 
1055: /* MUTANT (del_stmt) */ /*             script = fun->u.script; */ 
1057: /* MUTANT (del_stmt) */ /*             native = fun->u.native; */ 
1058: /* MUTANT (del_stmt) */ /*             script = NULL; */ 
1060: /* MUTANT (rep_op) */        nslots = (fun->nargs <= argc) ? fun->nargs - argc : 0;
1060: /* MUTANT (rep_op) */        nslots = (fun->nargs < argc) ? fun->nargs - argc : 0;
1060: /* MUTANT (rep_op) */        nslots = (fun->nargs >= argc) ? fun->nargs - argc : 0;
1060: /* MUTANT (rep_op) */        nslots = (fun->nargs == argc) ? fun->nargs - argc : 0;
1060: /* MUTANT (rep_op) */        nslots = (fun->nargs != argc) ? fun->nargs - argc : 0;
1060: /* MUTANT (rep_const) */        nslots = (fun->nargs > argc) ? fun->nargs - argc : 1;
1060: /* MUTANT (rep_const) */        nslots = (fun->nargs > argc) ? fun->nargs - argc : -1;
1061: /* MUTANT (del_stmt) */ /*         nslots += fun->extra; */ 
1061: /* MUTANT (rep_op) */        nslots -= fun->extra;
1061: /* MUTANT (rep_op) */        nslots *= fun->extra;
1061: /* MUTANT (rep_op) */        nslots %= fun->extra;
1062: /* MUTANT (del_stmt) */ /*         nvars = fun->nvars; */ 
1065: /* MUTANT (negate) */        if(! (fun->flags & JSFUN_BOUND_METHOD))
1071: /* MUTANT (del_stmt) */ /*     frame.callobj = frame.argsobj = NULL; */ 
1072: /* MUTANT (del_stmt) */ /*     frame.script = script; */ 
1073: /* MUTANT (del_stmt) */ /*     frame.fun = fun; */ 
1074: /* MUTANT (del_stmt) */ /*     frame.argc = argc; */ 
1075: /* MUTANT (del_stmt) */ /*     frame.argv = sp - argc; */ 
1076: /* MUTANT (del_stmt) */ /*     frame.nvars = nvars; */ 
1077: /* MUTANT (del_stmt) */ /*     frame.vars = sp; */ 
1078: /* MUTANT (del_stmt) */ /*     frame.down = fp; */ 
1079: /* MUTANT (del_stmt) */ /*     frame.annotation = NULL; */ 
1080: /* MUTANT (del_stmt) */ /*     frame.scopeChain = NULL; */     /* set below for real, after cx->fp is set */
1081: /* MUTANT (del_stmt) */ /*     frame.pc = NULL; */ 
1082: /* MUTANT (del_stmt) */ /*     frame.spbase = NULL; */ 
1083: /* MUTANT (del_stmt) */ /*     frame.sharpDepth = 0; */ 
1083: /* MUTANT (rep_const) */    frame.sharpDepth = 1;
1083: /* MUTANT (rep_const) */    frame.sharpDepth = -1;
1084: /* MUTANT (del_stmt) */ /*     frame.sharpArray = NULL; */ 
1085: /* MUTANT (del_stmt) */ /*     frame.dormantNext = NULL; */ 
1086: /* MUTANT (del_stmt) */ /*     frame.xmlNamespace = NULL; */ 
1089: /* MUTANT (del_stmt) */ /*     ok = js_ComputeThis(cx, thisp, &frame); */ 
1090: /* MUTANT (negate) */    if(! (!ok))
1094: /* MUTANT (del_stmt) */ /*     cx->fp = &frame; */ 
1097: /* MUTANT (del_stmt) */ /*     hook = cx->runtime->callHook; */ 
1098: /* MUTANT (del_stmt) */ /*     hookData = NULL; */ 
1101: /* MUTANT (negate) */    if(! (nslots)) {
1103: /* MUTANT (del_stmt) */ /*         nalloc = nslots; */ 
1104: /* MUTANT (del_stmt) */ /*         limit = (jsval *) cx->stackPool.current->limit; */ 
1105: /* MUTANT (rep_op) */        if (sp - nslots > limit) {
1105: /* MUTANT (rep_op) */        if (sp * nslots > limit) {
1105: /* MUTANT (rep_op) */        if (sp % nslots > limit) {
1105: /* MUTANT (rep_op) */        if (sp + nslots <= limit) {
1105: /* MUTANT (rep_op) */        if (sp + nslots < limit) {
1105: /* MUTANT (rep_op) */        if (sp + nslots >= limit) {
1105: /* MUTANT (rep_op) */        if (sp + nslots == limit) {
1105: /* MUTANT (rep_op) */        if (sp + nslots != limit) {
1105: /* MUTANT (negate) */        if(! (sp + nslots > limit)) {
1107: /* MUTANT (del_stmt) */ /*             nalloc += 2 + argc; */ 
1107: /* MUTANT (rep_op) */            nalloc -= 2 + argc;
1107: /* MUTANT (rep_op) */            nalloc *= 2 + argc;
1107: /* MUTANT (rep_op) */            nalloc %= 2 + argc;
1107: /* MUTANT (rep_op) */            nalloc += 2 - argc;
1107: /* MUTANT (rep_op) */            nalloc += 2 * argc;
1107: /* MUTANT (rep_op) */            nalloc += 2 % argc;
1107: /* MUTANT (rep_const) */            nalloc += 0 + argc;
1107: /* MUTANT (rep_const) */            nalloc += 1 + argc;
1107: /* MUTANT (rep_const) */            nalloc += -1 + argc;
1107: /* MUTANT (rep_const) */            nalloc += ((2)+1) + argc;
1107: /* MUTANT (rep_const) */            nalloc += ((2)-1) + argc;
1110: /* MUTANT (del_stmt) */ /*             JS_ASSERT((jsval *)mark >= sp); */ 
1110: /* MUTANT (rep_op) */            JS_ASSERT((jsval *)mark <= sp);
1110: /* MUTANT (rep_op) */            JS_ASSERT((jsval *)mark < sp);
1110: /* MUTANT (rep_op) */            JS_ASSERT((jsval *)mark > sp);
1110: /* MUTANT (rep_op) */            JS_ASSERT((jsval *)mark == sp);
1110: /* MUTANT (rep_op) */            JS_ASSERT((jsval *)mark != sp);
1111: /* MUTANT (del_stmt) */ /*             surplus = (jsval *)mark - sp; */ 
1112: /* MUTANT (del_stmt) */ /*             nalloc -= surplus; */ 
1112: /* MUTANT (rep_op) */            nalloc += surplus;
1112: /* MUTANT (rep_op) */            nalloc *= surplus;
1112: /* MUTANT (rep_op) */            nalloc %= surplus;
1116: /* MUTANT (rep_op) */        if ((intN)nalloc <= 0) {
1116: /* MUTANT (rep_op) */        if ((intN)nalloc < 0) {
1116: /* MUTANT (rep_op) */        if ((intN)nalloc >= 0) {
1116: /* MUTANT (rep_op) */        if ((intN)nalloc == 0) {
1116: /* MUTANT (rep_op) */        if ((intN)nalloc != 0) {
1116: /* MUTANT (rep_const) */        if ((intN)nalloc > 1) {
1116: /* MUTANT (rep_const) */        if ((intN)nalloc > -1) {
1116: /* MUTANT (negate) */        if(! ((intN)nalloc > 0)) {
1118: /* MUTANT (del_stmt) */ /*             newsp = js_AllocRawStack(cx, nalloc, NULL); */ 
1119: /* MUTANT (negate) */            if(! (!newsp)) {
1120: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
1121: /* MUTANT (del_stmt) */ /*                 goto out; */ 
1125: /* MUTANT (rep_op) */            if (newsp == mark) {
1125: /* MUTANT (negate) */            if(! (newsp != mark)) {
1126: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(sp + nslots > limit); */ 
1126: /* MUTANT (rep_op) */                JS_ASSERT(sp - nslots > limit);
1126: /* MUTANT (rep_op) */                JS_ASSERT(sp * nslots > limit);
1126: /* MUTANT (rep_op) */                JS_ASSERT(sp % nslots > limit);
1126: /* MUTANT (rep_op) */                JS_ASSERT(sp + nslots <= limit);
1126: /* MUTANT (rep_op) */                JS_ASSERT(sp + nslots < limit);
1126: /* MUTANT (rep_op) */                JS_ASSERT(sp + nslots >= limit);
1126: /* MUTANT (rep_op) */                JS_ASSERT(sp + nslots == limit);
1126: /* MUTANT (rep_op) */                JS_ASSERT(sp + nslots != limit);
1127: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(2 + argc + nslots == nalloc); */ 
1127: /* MUTANT (rep_op) */                JS_ASSERT(2 - argc + nslots == nalloc);
1127: /* MUTANT (rep_op) */                JS_ASSERT(2 * argc + nslots == nalloc);
1127: /* MUTANT (rep_op) */                JS_ASSERT(2 % argc + nslots == nalloc);
1127: /* MUTANT (rep_op) */                JS_ASSERT(2 + argc - nslots == nalloc);
1127: /* MUTANT (rep_op) */                JS_ASSERT(2 + argc * nslots == nalloc);
1127: /* MUTANT (rep_op) */                JS_ASSERT(2 + argc % nslots == nalloc);
1127: /* MUTANT (rep_op) */                JS_ASSERT(2 + argc + nslots != nalloc);
1127: /* MUTANT (rep_const) */                JS_ASSERT(0 + argc + nslots == nalloc);
1127: /* MUTANT (rep_const) */                JS_ASSERT(1 + argc + nslots == nalloc);
1127: /* MUTANT (rep_const) */                JS_ASSERT(-1 + argc + nslots == nalloc);
1127: /* MUTANT (rep_const) */                JS_ASSERT(((2)+1) + argc + nslots == nalloc);
1127: /* MUTANT (rep_const) */                JS_ASSERT(((2)-1) + argc + nslots == nalloc);
1128: /* MUTANT (del_stmt) */ /*                 *newsp++ = vp[0]; */ 
1128: /* MUTANT (rep_op) */                *newsp-- = vp[0];
1128: /* MUTANT (rep_const) */                *newsp++ = vp[1];
1128: /* MUTANT (rep_const) */                *newsp++ = vp[-1];
1129: /* MUTANT (del_stmt) */ /*                 *newsp++ = vp[1]; */ 
1129: /* MUTANT (rep_op) */                *newsp-- = vp[1];
1129: /* MUTANT (rep_const) */                *newsp++ = vp[0];
1129: /* MUTANT (rep_const) */                *newsp++ = vp[-1];
1129: /* MUTANT (rep_const) */                *newsp++ = vp[((1)+1)];
1130: /* MUTANT (negate) */                if(! (argc))
1132: /* MUTANT (del_stmt) */ /*                 frame.argv = newsp; */ 
1133: /* MUTANT (del_stmt) */ /*                 sp = frame.vars = newsp + argc; */ 
1133: /* MUTANT (rep_op) */                sp = frame.vars = newsp - argc;
1133: /* MUTANT (rep_op) */                sp = frame.vars = newsp * argc;
1133: /* MUTANT (rep_op) */                sp = frame.vars = newsp % argc;
1138: /* MUTANT (rep_op) */        frame.vars -= nslots;
1138: /* MUTANT (rep_op) */        frame.vars *= nslots;
1138: /* MUTANT (rep_op) */        frame.vars %= nslots;
1142: /* MUTANT (del_stmt) */ /*             PUSH(JSVAL_VOID); */ 
1143: /* MUTANT (del_stmt) */ /*         } while (--nslots != 0); */ 
1143: /* MUTANT (rep_op) */        } while (++nslots != 0);
1143: /* MUTANT (rep_op) */        } while (--nslots == 0);
1143: /* MUTANT (rep_const) */        } while (--nslots != 1);
1143: /* MUTANT (rep_const) */        } while (--nslots != -1);
1143: /* MUTANT (negate) */        } while(! (--nslots != 0));
1145: /* MUTANT (rep_op) */    JS_ASSERT(nslots != 0);
1145: /* MUTANT (rep_const) */    JS_ASSERT(nslots == 1);
1145: /* MUTANT (rep_const) */    JS_ASSERT(nslots == -1);
1148: /* MUTANT (negate) */    if(! (nvars)) {
1149: /* MUTANT (del_stmt) */ /*         JS_ASSERT((jsval *)cx->stackPool.current->avail >= frame.vars); */ 
1149: /* MUTANT (rep_op) */        JS_ASSERT((jsval *)cx->stackPool.current->avail <= frame.vars);
1149: /* MUTANT (rep_op) */        JS_ASSERT((jsval *)cx->stackPool.current->avail < frame.vars);
1149: /* MUTANT (rep_op) */        JS_ASSERT((jsval *)cx->stackPool.current->avail > frame.vars);
1149: /* MUTANT (rep_op) */        JS_ASSERT((jsval *)cx->stackPool.current->avail == frame.vars);
1149: /* MUTANT (rep_op) */        JS_ASSERT((jsval *)cx->stackPool.current->avail != frame.vars);
1150: /* MUTANT (del_stmt) */ /*         surplus = (jsval *)cx->stackPool.current->avail - frame.vars; */ 
1151: /* MUTANT (rep_op) */        if (surplus <= nvars) {
1151: /* MUTANT (rep_op) */        if (surplus > nvars) {
1151: /* MUTANT (rep_op) */        if (surplus >= nvars) {
1151: /* MUTANT (rep_op) */        if (surplus == nvars) {
1151: /* MUTANT (rep_op) */        if (surplus != nvars) {
1151: /* MUTANT (negate) */        if(! (surplus < nvars)) {
1152: /* MUTANT (del_stmt) */ /*             newsp = js_AllocRawStack(cx, nvars, NULL); */ 
1153: /* MUTANT (negate) */            if(! (!newsp)) {
1154: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
1155: /* MUTANT (del_stmt) */ /*                 goto out; */ 
1157: /* MUTANT (rep_op) */            if (newsp == sp) {
1157: /* MUTANT (negate) */            if(! (newsp != sp)) {
1159: /* MUTANT (del_stmt) */ /*                 sp = frame.vars = newsp; */ 
1165: /* MUTANT (del_stmt) */ /*             PUSH(JSVAL_VOID); */ 
1166: /* MUTANT (del_stmt) */ /*         } while (--nvars != 0); */ 
1166: /* MUTANT (rep_op) */        } while (++nvars != 0);
1166: /* MUTANT (rep_op) */        } while (--nvars == 0);
1166: /* MUTANT (rep_const) */        } while (--nvars != 1);
1166: /* MUTANT (rep_const) */        } while (--nvars != -1);
1166: /* MUTANT (negate) */        } while(! (--nvars != 0));
1168: /* MUTANT (rep_op) */    JS_ASSERT(nvars != 0);
1168: /* MUTANT (rep_const) */    JS_ASSERT(nvars == 1);
1168: /* MUTANT (rep_const) */    JS_ASSERT(nvars == -1);
1171: /* MUTANT (del_stmt) */ /*     SAVE_SP(&frame); */ 
1174: /* MUTANT (rep_op) */    if (hook || (native || script))
1174: /* MUTANT (rep_op) */    if (hook && (native && script))
1174: /* MUTANT (negate) */    if(! (hook && (native || script)))
1175: /* MUTANT (rep_const) */        hookData = hook(cx, &frame, JS_TRUE, 1, cx->runtime->callHookData);
1175: /* MUTANT (rep_const) */        hookData = hook(cx, &frame, JS_TRUE, -1, cx->runtime->callHookData);
1178: /* MUTANT (negate) */    if(! (native)) {
1186: /* MUTANT (del_stmt) */ /*         frame.scopeChain = fp->scopeChain; */ 
1187: /* MUTANT (del_stmt) */ /*         ok = native(cx, frame.thisp, argc, frame.argv, &frame.rval); */ 
1188: /* MUTANT (del_stmt) */ /*         JS_RUNTIME_METER(cx->runtime, nativeCalls); */ 
1189: /* MUTANT (negate) */    } else if(! (script)) {
1195: /* MUTANT (negate) */        if(! (fun->flags & JSFUN_HEAVYWEIGHT)) {
1198: /* MUTANT (negate) */            if(! (!js_GetCallObject(cx, &frame, parent))) {
1199: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
1200: /* MUTANT (del_stmt) */ /*                 goto out; */ 
1210: /* MUTANT (del_stmt) */ /*         frame.scopeChain = NULL; */ 
1211: /* MUTANT (del_stmt) */ /*         ok = JS_TRUE; */ 
1215: /* MUTANT (negate) */    if(! (hookData)) {
1216: /* MUTANT (del_stmt) */ /*         hook = cx->runtime->callHook; */ 
1217: /* MUTANT (negate) */        if(! (hook))
1222: /* MUTANT (negate) */    if(! (frame.callobj))
1227: /* MUTANT (negate) */    if(! (frame.argsobj))
1239: /* MUTANT (del_stmt) */ /*     *vp = frame.rval; */ 
1240: /* MUTANT (del_stmt) */ /*     fp->sp = vp + 1; */ 
1240: /* MUTANT (rep_op) */    fp->sp = vp - 1;
1240: /* MUTANT (rep_op) */    fp->sp = vp * 1;
1240: /* MUTANT (rep_op) */    fp->sp = vp % 1;
1240: /* MUTANT (rep_const) */    fp->sp = vp + 0;
1240: /* MUTANT (rep_const) */    fp->sp = vp + -1;
1240: /* MUTANT (rep_const) */    fp->sp = vp + ((1)+1);
1247: /* MUTANT (rep_op) */    if (fp->script || !(flags & JSINVOKE_INTERNAL))
1247: /* MUTANT (negate) */    if(! (fp->script && !(flags & JSINVOKE_INTERNAL)))
1249: /* MUTANT (del_stmt) */ /*     return ok; */ 
1253: /* MUTANT (del_stmt) */ /*     ok = JS_FALSE; */ 
1254: /* MUTANT (del_stmt) */ /*     goto out2; */ 
1261: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp, *oldfp, frame; */ 
1262: /* MUTANT (del_stmt) */ /*     jsval *oldsp, *sp; */ 
1263: /* MUTANT (del_stmt) */ /*     void *mark; */ 
1264: /* MUTANT (del_stmt) */ /*     uintN i; */ 
1265: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
1267: /* MUTANT (del_stmt) */ /*     fp = oldfp = cx->fp; */ 
1268: /* MUTANT (negate) */    if(! (!fp)) {
1269: /* MUTANT (del_stmt) */ /*         memset(&frame, 0, sizeof frame); */ 
1269: /* MUTANT (rep_const) */        memset(&frame, 1, sizeof frame);
1269: /* MUTANT (rep_const) */        memset(&frame, -1, sizeof frame);
1270: /* MUTANT (del_stmt) */ /*         cx->fp = fp = &frame; */ 
1273: /* MUTANT (del_stmt) */ /*     sp = js_AllocStack(cx, 2 + argc, &mark); */ 
1273: /* MUTANT (rep_op) */    sp = js_AllocStack(cx, 2 - argc, &mark);
1273: /* MUTANT (rep_op) */    sp = js_AllocStack(cx, 2 * argc, &mark);
1273: /* MUTANT (rep_op) */    sp = js_AllocStack(cx, 2 % argc, &mark);
1273: /* MUTANT (rep_const) */    sp = js_AllocStack(cx, 0 + argc, &mark);
1273: /* MUTANT (rep_const) */    sp = js_AllocStack(cx, 1 + argc, &mark);
1273: /* MUTANT (rep_const) */    sp = js_AllocStack(cx, -1 + argc, &mark);
1273: /* MUTANT (rep_const) */    sp = js_AllocStack(cx, ((2)+1) + argc, &mark);
1273: /* MUTANT (rep_const) */    sp = js_AllocStack(cx, ((2)-1) + argc, &mark);
1274: /* MUTANT (negate) */    if(! (!sp)) {
1275: /* MUTANT (del_stmt) */ /*         ok = JS_FALSE; */ 
1276: /* MUTANT (del_stmt) */ /*         goto out; */ 
1280: /* MUTANT (del_stmt) */ /*     PUSH(OBJECT_TO_JSVAL(obj)); */ 
1281: /* MUTANT (rep_op) */    for (i = 0; i <= argc; i++)
1281: /* MUTANT (rep_op) */    for (i = 0; i > argc; i++)
1281: /* MUTANT (rep_op) */    for (i = 0; i >= argc; i++)
1281: /* MUTANT (rep_op) */    for (i = 0; i == argc; i++)
1281: /* MUTANT (rep_op) */    for (i = 0; i != argc; i++)
1281: /* MUTANT (rep_op) */    for (i = 0; i < argc; i--)
1281: /* MUTANT (rep_const) */    for (i = 1; i < argc; i++)
1281: /* MUTANT (rep_const) */    for (i = -1; i < argc; i++)
1283: /* MUTANT (del_stmt) */ /*     SAVE_SP(fp); */ 
1284: /* MUTANT (del_stmt) */ /*     ok = js_Invoke(cx, argc, flags | JSINVOKE_INTERNAL); */ 
1284: /* MUTANT (rep_op) */    ok = js_Invoke(cx, argc, flags & JSINVOKE_INTERNAL);
1285: /* MUTANT (negate) */    if(! (ok)) {
1286: /* MUTANT (del_stmt) */ /*         RESTORE_SP(fp); */ 
1295: /* MUTANT (del_stmt) */ /*         *rval = POP_OPND(); */ 
1296: /* MUTANT (negate) */        if(! (JSVAL_IS_GCTHING(*rval))) {
1297: /* MUTANT (negate) */            if(! (cx->localRootStack)) {
1298: /* MUTANT (rep_op) */                if (js_PushLocalRoot(cx, cx->localRootStack, *rval) <= 0)
1298: /* MUTANT (rep_op) */                if (js_PushLocalRoot(cx, cx->localRootStack, *rval) > 0)
1298: /* MUTANT (rep_op) */                if (js_PushLocalRoot(cx, cx->localRootStack, *rval) >= 0)
1298: /* MUTANT (rep_op) */                if (js_PushLocalRoot(cx, cx->localRootStack, *rval) == 0)
1298: /* MUTANT (rep_op) */                if (js_PushLocalRoot(cx, cx->localRootStack, *rval) != 0)
1298: /* MUTANT (rep_const) */                if (js_PushLocalRoot(cx, cx->localRootStack, *rval) < 1)
1298: /* MUTANT (rep_const) */                if (js_PushLocalRoot(cx, cx->localRootStack, *rval) < -1)
1298: /* MUTANT (negate) */                if(! (js_PushLocalRoot(cx, cx->localRootStack, *rval) < 0))
1301: /* MUTANT (del_stmt) */ /*                 cx->lastInternalResult = *rval; */ 
1309: /* MUTANT (rep_op) */    if (oldfp == fp)
1309: /* MUTANT (negate) */    if(! (oldfp != fp))
1312: /* MUTANT (del_stmt) */ /*     return ok; */ 
1334: /* MUTANT (del_stmt) */ /*     JS_ASSERT(mode == JSACC_READ || mode == JSACC_WRITE); */ 
1334: /* MUTANT (rep_op) */    JS_ASSERT(mode != JSACC_READ || mode == JSACC_WRITE);
1334: /* MUTANT (rep_op) */    JS_ASSERT(mode == JSACC_READ && mode == JSACC_WRITE);
1334: /* MUTANT (rep_op) */    JS_ASSERT(mode == JSACC_READ || mode != JSACC_WRITE);
1335: /* MUTANT (rep_op) */    if (cx->runtime->checkObjectAccess ||
1336: /* MUTANT (rep_op) */        JSVAL_IS_FUNCTION(cx, fval) ||
1337: /* MUTANT (rep_op) */        ((JSFunction *)JS_GetPrivate(cx, JSVAL_TO_OBJECT(fval)))->interpreted ||
1340: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
1350: /* MUTANT (del_stmt) */ /*     JSInterpreterHook hook; */ 
1351: /* MUTANT (del_stmt) */ /*     void *hookData, *mark; */ 
1352: /* MUTANT (del_stmt) */ /*     JSStackFrame *oldfp, frame; */ 
1353: /* MUTANT (del_stmt) */ /*     JSObject *obj, *tmp; */ 
1354: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
1356: /* MUTANT (del_stmt) */ /*     hook = cx->runtime->executeHook; */ 
1357: /* MUTANT (del_stmt) */ /*     hookData = mark = NULL; */ 
1358: /* MUTANT (del_stmt) */ /*     oldfp = cx->fp; */ 
1359: /* MUTANT (del_stmt) */ /*     frame.callobj = frame.argsobj = NULL; */ 
1360: /* MUTANT (del_stmt) */ /*     frame.script = script; */ 
1361: /* MUTANT (negate) */    if(! (down)) {
1363: /* MUTANT (del_stmt) */ /*         frame.varobj = down->varobj; */ 
1364: /* MUTANT (del_stmt) */ /*         frame.fun = down->fun; */ 
1365: /* MUTANT (del_stmt) */ /*         frame.thisp = down->thisp; */ 
1366: /* MUTANT (del_stmt) */ /*         frame.argc = down->argc; */ 
1367: /* MUTANT (del_stmt) */ /*         frame.argv = down->argv; */ 
1368: /* MUTANT (del_stmt) */ /*         frame.nvars = down->nvars; */ 
1369: /* MUTANT (del_stmt) */ /*         frame.vars = down->vars; */ 
1370: /* MUTANT (del_stmt) */ /*         frame.annotation = down->annotation; */ 
1371: /* MUTANT (del_stmt) */ /*         frame.sharpArray = down->sharpArray; */ 
1373: /* MUTANT (del_stmt) */ /*         obj = chain; */ 
1374: /* MUTANT (negate) */        if(! (cx->options & JSOPTION_VAROBJFIX)) {
1375: /* MUTANT (rep_op) */            while ((tmp = OBJ_GET_PARENT(cx, obj)) == NULL)
1375: /* MUTANT (negate) */            while(! ((tmp = OBJ_GET_PARENT(cx, obj)) != NULL))
1379: /* MUTANT (del_stmt) */ /*         frame.fun = NULL; */ 
1380: /* MUTANT (del_stmt) */ /*         frame.thisp = chain; */ 
1381: /* MUTANT (del_stmt) */ /*         frame.argc = 0; */ 
1381: /* MUTANT (rep_const) */        frame.argc = 1;
1381: /* MUTANT (rep_const) */        frame.argc = -1;
1382: /* MUTANT (del_stmt) */ /*         frame.argv = NULL; */ 
1383: /* MUTANT (del_stmt) */ /*         frame.nvars = script->numGlobalVars; */ 
1384: /* MUTANT (negate) */        if(! (frame.nvars)) {
1385: /* MUTANT (del_stmt) */ /*             frame.vars = js_AllocRawStack(cx, frame.nvars, &mark); */ 
1386: /* MUTANT (negate) */            if(! (!frame.vars))
1388: /* MUTANT (del_stmt) */ /*             memset(frame.vars, 0, frame.nvars * sizeof(jsval)); */ 
1388: /* MUTANT (rep_const) */            memset(frame.vars, 1, frame.nvars * sizeof(jsval));
1388: /* MUTANT (rep_const) */            memset(frame.vars, -1, frame.nvars * sizeof(jsval));
1390: /* MUTANT (del_stmt) */ /*             frame.vars = NULL; */ 
1393: /* MUTANT (del_stmt) */ /*         frame.sharpArray = NULL; */ 
1396: /* MUTANT (del_stmt) */ /*     frame.down = down; */ 
1397: /* MUTANT (del_stmt) */ /*     frame.scopeChain = chain; */ 
1398: /* MUTANT (del_stmt) */ /*     frame.pc = NULL; */ 
1399: /* MUTANT (del_stmt) */ /*     frame.sp = oldfp ? oldfp->sp : NULL; */ 
1400: /* MUTANT (del_stmt) */ /*     frame.spbase = NULL; */ 
1401: /* MUTANT (del_stmt) */ /*     frame.sharpDepth = 0; */ 
1401: /* MUTANT (rep_const) */    frame.sharpDepth = 1;
1401: /* MUTANT (rep_const) */    frame.sharpDepth = -1;
1402: /* MUTANT (del_stmt) */ /*     frame.flags = flags; */ 
1403: /* MUTANT (del_stmt) */ /*     frame.dormantNext = NULL; */ 
1404: /* MUTANT (del_stmt) */ /*     frame.xmlNamespace = NULL; */ 
1419: /* MUTANT (rep_op) */    if (oldfp || oldfp != down) {
1419: /* MUTANT (rep_op) */    if (oldfp && oldfp == down) {
1419: /* MUTANT (negate) */    if(! (oldfp && oldfp != down)) {
1420: /* MUTANT (del_stmt) */ /*         JS_ASSERT(!oldfp->dormantNext); */ 
1421: /* MUTANT (del_stmt) */ /*         oldfp->dormantNext = cx->dormantFrameChain; */ 
1422: /* MUTANT (del_stmt) */ /*         cx->dormantFrameChain = oldfp; */ 
1426: /* MUTANT (negate) */    if(! (hook))
1427: /* MUTANT (rep_const) */        hookData = hook(cx, &frame, JS_TRUE, 1, cx->runtime->executeHookData);
1427: /* MUTANT (rep_const) */        hookData = hook(cx, &frame, JS_TRUE, -1, cx->runtime->executeHookData);
1433: /* MUTANT (del_stmt) */ /*     ok = js_Interpret(cx, script->code, &frame.rval); */ 
1434: /* MUTANT (del_stmt) */ /*     *result = frame.rval; */ 
1436: /* MUTANT (negate) */    if(! (hookData)) {
1437: /* MUTANT (del_stmt) */ /*         hook = cx->runtime->executeHook; */ 
1438: /* MUTANT (negate) */        if(! (hook))
1441: /* MUTANT (negate) */    if(! (mark))
1443: /* MUTANT (del_stmt) */ /*     cx->fp = oldfp; */ 
1445: /* MUTANT (rep_op) */    if (oldfp || oldfp != down) {
1445: /* MUTANT (rep_op) */    if (oldfp && oldfp == down) {
1445: /* MUTANT (negate) */    if(! (oldfp && oldfp != down)) {
1446: /* MUTANT (del_stmt) */ /*         JS_ASSERT(cx->dormantFrameChain == oldfp); */ 
1446: /* MUTANT (rep_op) */        JS_ASSERT(cx->dormantFrameChain != oldfp);
1447: /* MUTANT (del_stmt) */ /*         cx->dormantFrameChain = oldfp->dormantNext; */ 
1448: /* MUTANT (del_stmt) */ /*         oldfp->dormantNext = NULL; */ 
1461: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
1462: /* MUTANT (del_stmt) */ /*     JSIdArray *ida; */ 
1463: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
1464: /* MUTANT (del_stmt) */ /*     JSObject *obj2, *target, *funobj, *closure; */ 
1465: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
1466: /* MUTANT (del_stmt) */ /*     uintN attrs; */ 
1467: /* MUTANT (del_stmt) */ /*     jsint i; */ 
1468: /* MUTANT (del_stmt) */ /*     jsval value; */ 
1470: /* MUTANT (negate) */    if(! (JSVAL_IS_VOID(id))) {
1471: /* MUTANT (del_stmt) */ /*         ida = JS_Enumerate(cx, obj); */ 
1472: /* MUTANT (negate) */        if(! (!ida))
1474: /* MUTANT (del_stmt) */ /*         ok = JS_TRUE; */ 
1475: /* MUTANT (rep_op) */        if (ida->length != 0)
1475: /* MUTANT (rep_const) */        if (ida->length == 1)
1475: /* MUTANT (rep_const) */        if (ida->length == -1)
1475: /* MUTANT (negate) */        if(! (ida->length == 0))
1478: /* MUTANT (del_stmt) */ /*         ida = NULL; */ 
1479: /* MUTANT (negate) */        if(! (!OBJ_LOOKUP_PROPERTY(cx, obj, id, &obj2, &prop)))
1481: /* MUTANT (negate) */        if(! (!prop)) {
1484: /* MUTANT (negate) */            if(! (str))
1486: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
1489: /* MUTANT (del_stmt) */ /*         OBJ_DROP_PROPERTY(cx, obj2, prop); */ 
1490: /* MUTANT (negate) */        if(! (!ok))
1492: /* MUTANT (negate) */        if(! (!(attrs & JSPROP_EXPORTED))) {
1495: /* MUTANT (negate) */            if(! (str)) {
1505: /* MUTANT (del_stmt) */ /*     i = 0; */ 
1505: /* MUTANT (rep_const) */    i = 1;
1505: /* MUTANT (rep_const) */    i = -1;
1507: /* MUTANT (negate) */        if(! (ida)) {
1508: /* MUTANT (del_stmt) */ /*             id = ida->vector[i]; */ 
1509: /* MUTANT (del_stmt) */ /*             ok = OBJ_GET_ATTRIBUTES(cx, obj, id, NULL, &attrs); */ 
1510: /* MUTANT (negate) */            if(! (!ok))
1512: /* MUTANT (negate) */            if(! (!(attrs & JSPROP_EXPORTED)))
1516: /* MUTANT (negate) */        if(! (!ok))
1518: /* MUTANT (negate) */        if(! (JSVAL_IS_FUNCTION(cx, value))) {
1519: /* MUTANT (del_stmt) */ /*             funobj = JSVAL_TO_OBJECT(value); */ 
1520: /* MUTANT (del_stmt) */ /*             closure = js_CloneFunctionObject(cx, funobj, obj); */ 
1521: /* MUTANT (negate) */            if(! (!closure)) {
1522: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
1523: /* MUTANT (del_stmt) */ /*                 goto out; */ 
1537: /* MUTANT (rep_op) */        if (OBJ_GET_CLASS(cx, target) != &js_CallClass) {
1537: /* MUTANT (negate) */        if(! (OBJ_GET_CLASS(cx, target) == &js_CallClass)) {
1538: /* MUTANT (del_stmt) */ /*             ok = OBJ_LOOKUP_PROPERTY(cx, target, id, &obj2, &prop); */ 
1539: /* MUTANT (negate) */            if(! (!ok))
1542: /* MUTANT (del_stmt) */ /*             prop = NULL; */ 
1544: /* MUTANT (rep_op) */        if (prop || target == obj2) {
1544: /* MUTANT (rep_op) */        if (prop && target != obj2) {
1544: /* MUTANT (negate) */        if(! (prop && target == obj2)) {
1545: /* MUTANT (del_stmt) */ /*             ok = OBJ_SET_PROPERTY(cx, target, id, &value); */ 
1548: /* MUTANT (rep_op) */                                     attrs & ~(JSPROP_EXPORTED &
1549: /* MUTANT (rep_op) */                                               JSPROP_GETTER &
1553: /* MUTANT (negate) */        if(! (prop))
1555: /* MUTANT (negate) */        if(! (!ok))
1557: /* MUTANT (del_stmt) */ /*     } while (ida && ++i < ida->length); */ 
1557: /* MUTANT (rep_op) */    } while (ida || ++i < ida->length);
1557: /* MUTANT (rep_op) */    } while (ida && --i < ida->length);
1557: /* MUTANT (rep_op) */    } while (ida && ++i <= ida->length);
1557: /* MUTANT (rep_op) */    } while (ida && ++i > ida->length);
1557: /* MUTANT (rep_op) */    } while (ida && ++i >= ida->length);
1557: /* MUTANT (rep_op) */    } while (ida && ++i == ida->length);
1557: /* MUTANT (rep_op) */    } while (ida && ++i != ida->length);
1557: /* MUTANT (negate) */    } while(! (ida && ++i < ida->length));
1560: /* MUTANT (negate) */    if(! (ida))
1562: /* MUTANT (del_stmt) */ /*     return ok; */ 
1570: /* MUTANT (del_stmt) */ /*     JSObject *obj2; */ 
1571: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
1572: /* MUTANT (del_stmt) */ /*     uintN oldAttrs, report; */ 
1573: /* MUTANT (del_stmt) */ /*     JSBool isFunction; */ 
1574: /* MUTANT (del_stmt) */ /*     jsval value; */ 
1575: /* MUTANT (del_stmt) */ /*     const char *type, *name; */ 
1577: /* MUTANT (negate) */    if(! (!OBJ_LOOKUP_PROPERTY(cx, obj, id, &obj2, &prop)))
1579: /* MUTANT (negate) */    if(! (propp)) {
1580: /* MUTANT (del_stmt) */ /*         *objp = obj2; */ 
1581: /* MUTANT (del_stmt) */ /*         *propp = prop; */ 
1583: /* MUTANT (negate) */    if(! (!prop))
1587: /* MUTANT (negate) */    if(! (!OBJ_GET_ATTRIBUTES(cx, obj2, id, prop, &oldAttrs)))
1591: /* MUTANT (rep_op) */    report = ((oldAttrs & attrs) & JSPROP_READONLY)
1593: /* MUTANT (rep_op) */             : JSREPORT_WARNING & JSREPORT_STRICT;
1595: /* MUTANT (rep_op) */    if (report == JSREPORT_ERROR) {
1595: /* MUTANT (negate) */    if(! (report != JSREPORT_ERROR)) {
1602: /* MUTANT (rep_op) */        if (!(attrs & (JSPROP_GETTER & JSPROP_SETTER)))
1602: /* MUTANT (negate) */        if(! (!(attrs & (JSPROP_GETTER | JSPROP_SETTER))))
1604: /* MUTANT (rep_op) */        if ((~(oldAttrs ^ attrs) & (JSPROP_GETTER & JSPROP_SETTER)) == 0)
1604: /* MUTANT (rep_op) */        if ((~(oldAttrs ^ attrs) & (JSPROP_GETTER | JSPROP_SETTER)) != 0)
1604: /* MUTANT (rep_const) */        if ((~(oldAttrs ^ attrs) & (JSPROP_GETTER | JSPROP_SETTER)) == 1)
1604: /* MUTANT (rep_const) */        if ((~(oldAttrs ^ attrs) & (JSPROP_GETTER | JSPROP_SETTER)) == -1)
1604: /* MUTANT (negate) */        if(! ((~(oldAttrs ^ attrs) & (JSPROP_GETTER | JSPROP_SETTER)) == 0))
1606: /* MUTANT (negate) */        if(! (!(oldAttrs & JSPROP_PERMANENT)))
1608: /* MUTANT (del_stmt) */ /*         report = JSREPORT_ERROR; */ 
1611: /* MUTANT (rep_op) */    isFunction = (oldAttrs & (JSPROP_GETTER & JSPROP_SETTER)) != 0;
1611: /* MUTANT (rep_op) */    isFunction = (oldAttrs & (JSPROP_GETTER | JSPROP_SETTER)) == 0;
1611: /* MUTANT (rep_const) */    isFunction = (oldAttrs & (JSPROP_GETTER | JSPROP_SETTER)) != 1;
1611: /* MUTANT (rep_const) */    isFunction = (oldAttrs & (JSPROP_GETTER | JSPROP_SETTER)) != -1;
1612: /* MUTANT (negate) */    if(! (!isFunction)) {
1613: /* MUTANT (negate) */        if(! (!OBJ_GET_PROPERTY(cx, obj, id, &value)))
1615: /* MUTANT (del_stmt) */ /*         isFunction = JSVAL_IS_FUNCTION(cx, value); */ 
1626: /* MUTANT (del_stmt) */ /*     name = js_AtomToPrintableString(cx, JSID_TO_ATOM(id)); */ 
1627: /* MUTANT (negate) */    if(! (!name))
1635: /* MUTANT (negate) */    if(! (propp)) {
1636: /* MUTANT (del_stmt) */ /*         *objp = NULL; */ 
1637: /* MUTANT (del_stmt) */ /*         *propp = NULL; */ 
1640: /* MUTANT (del_stmt) */ /*     return JS_FALSE; */ 
1646: /* MUTANT (del_stmt) */ /*     jsval ltag = JSVAL_TAG(lval), rtag = JSVAL_TAG(rval); */ 
1647: /* MUTANT (del_stmt) */ /*     jsdouble ld, rd; */ 
1649: /* MUTANT (rep_op) */    if (ltag != rtag) {
1649: /* MUTANT (negate) */    if(! (ltag == rtag)) {
1650: /* MUTANT (rep_op) */        if (ltag != JSVAL_STRING) {
1650: /* MUTANT (negate) */        if(! (ltag == JSVAL_STRING)) {
1653: /* MUTANT (del_stmt) */ /*             return js_CompareStrings(lstr, rstr) == 0; */ 
1653: /* MUTANT (rep_op) */            return js_CompareStrings(lstr, rstr) != 0;
1653: /* MUTANT (rep_const) */            return js_CompareStrings(lstr, rstr) == 1;
1653: /* MUTANT (rep_const) */            return js_CompareStrings(lstr, rstr) == -1;
1655: /* MUTANT (rep_op) */        if (ltag != JSVAL_DOUBLE) {
1655: /* MUTANT (negate) */        if(! (ltag == JSVAL_DOUBLE)) {
1656: /* MUTANT (del_stmt) */ /*             ld = *JSVAL_TO_DOUBLE(lval); */ 
1657: /* MUTANT (del_stmt) */ /*             rd = *JSVAL_TO_DOUBLE(rval); */ 
1658: /* MUTANT (del_stmt) */ /*             return JSDOUBLE_COMPARE(ld, ==, rd, JS_FALSE); */ 
1658: /* MUTANT (rep_op) */            return JSDOUBLE_COMPARE(ld, !=, rd, JS_FALSE);
1660: /* MUTANT (rep_op) */        return lval != rval;
1662: /* MUTANT (rep_op) */    if (ltag != JSVAL_DOUBLE && JSVAL_IS_INT(rval)) {
1662: /* MUTANT (rep_op) */    if (ltag == JSVAL_DOUBLE || JSVAL_IS_INT(rval)) {
1662: /* MUTANT (negate) */    if(! (ltag == JSVAL_DOUBLE && JSVAL_IS_INT(rval))) {
1663: /* MUTANT (del_stmt) */ /*         ld = *JSVAL_TO_DOUBLE(lval); */ 
1664: /* MUTANT (del_stmt) */ /*         rd = JSVAL_TO_INT(rval); */ 
1665: /* MUTANT (del_stmt) */ /*         return JSDOUBLE_COMPARE(ld, ==, rd, JS_FALSE); */ 
1665: /* MUTANT (rep_op) */        return JSDOUBLE_COMPARE(ld, !=, rd, JS_FALSE);
1667: /* MUTANT (rep_op) */    if (JSVAL_IS_INT(lval) || rtag == JSVAL_DOUBLE) {
1667: /* MUTANT (rep_op) */    if (JSVAL_IS_INT(lval) && rtag != JSVAL_DOUBLE) {
1667: /* MUTANT (negate) */    if(! (JSVAL_IS_INT(lval) && rtag == JSVAL_DOUBLE)) {
1668: /* MUTANT (del_stmt) */ /*         ld = JSVAL_TO_INT(lval); */ 
1669: /* MUTANT (del_stmt) */ /*         rd = *JSVAL_TO_DOUBLE(rval); */ 
1670: /* MUTANT (del_stmt) */ /*         return JSDOUBLE_COMPARE(ld, ==, rd, JS_FALSE); */ 
1670: /* MUTANT (rep_op) */        return JSDOUBLE_COMPARE(ld, !=, rd, JS_FALSE);
1672: /* MUTANT (rep_op) */    return lval != rval;
1678: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
1680: /* MUTANT (del_stmt) */ /*     atom = js_ValueToStringAtom(cx, idval); */ 
1681: /* MUTANT (negate) */    if(! (!atom))
1683: /* MUTANT (del_stmt) */ /*     *idp = ATOM_TO_JSID(atom); */ 
1684: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1690: /* MUTANT (del_stmt) */ /*     JS_ASSERT(!JSVAL_IS_INT(idval)); */ 
1693: /* MUTANT (negate) */    if(! (JSVAL_IS_OBJECT(idval))) {
1694: /* MUTANT (del_stmt) */ /*         *idp = OBJECT_JSVAL_TO_JSID(idval); */ 
1695: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
1705: /* MUTANT (rep_op) */        if (JSID_IS_OBJECT(id) || !OBJECT_IS_XML(cx, obj)) {                  \
1705: /* MUTANT (negate) */        if(! (JSID_IS_OBJECT(id) && !OBJECT_IS_XML(cx, obj))) {                  \
1708: /* MUTANT (negate) */            if(! (!ok))                                                          \
1719: #define MAX_INTERP_LEVEL 0 /* MUTANT (rep_const) */
1719: #define MAX_INTERP_LEVEL 1 /* MUTANT (rep_const) */
1719: #define MAX_INTERP_LEVEL -1 /* MUTANT (rep_const) */
1719: #define MAX_INTERP_LEVEL ((250)+1) /* MUTANT (rep_const) */
1719: #define MAX_INTERP_LEVEL ((250)-1) /* MUTANT (rep_const) */
1721: #define MAX_INTERP_LEVEL 0 /* MUTANT (rep_const) */
1721: #define MAX_INTERP_LEVEL 1 /* MUTANT (rep_const) */
1721: #define MAX_INTERP_LEVEL -1 /* MUTANT (rep_const) */
1721: #define MAX_INTERP_LEVEL ((1000)+1) /* MUTANT (rep_const) */
1721: #define MAX_INTERP_LEVEL ((1000)-1) /* MUTANT (rep_const) */
1725: #define MAX_INLINE_CALL_COUNT 0 /* MUTANT (rep_const) */
1725: #define MAX_INLINE_CALL_COUNT 1 /* MUTANT (rep_const) */
1725: #define MAX_INLINE_CALL_COUNT -1 /* MUTANT (rep_const) */
1725: #define MAX_INLINE_CALL_COUNT ((1000)+1) /* MUTANT (rep_const) */
1725: #define MAX_INLINE_CALL_COUNT ((1000)-1) /* MUTANT (rep_const) */
1730: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
1731: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp; */ 
1732: /* MUTANT (del_stmt) */ /*     JSScript *script; */ 
1733: /* MUTANT (del_stmt) */ /*     uintN inlineCallCount; */ 
1734: /* MUTANT (del_stmt) */ /*     JSObject *obj, *obj2, *proto, *parent; */ 
1735: /* MUTANT (del_stmt) */ /*     JSVersion currentVersion, originalVersion; */ 
1736: /* MUTANT (del_stmt) */ /*     JSBranchCallback onbranch; */ 
1737: /* MUTANT (del_stmt) */ /*     JSBool ok, cond; */ 
1738: /* MUTANT (del_stmt) */ /*     JSTrapHandler interruptHandler; */ 
1739: /* MUTANT (del_stmt) */ /*     jsint depth, len; */ 
1740: /* MUTANT (del_stmt) */ /*     jsval *sp, *newsp; */ 
1741: /* MUTANT (del_stmt) */ /*     void *mark; */ 
1742: /* MUTANT (del_stmt) */ /*     jsbytecode *endpc, *pc2; */ 
1743: /* MUTANT (del_stmt) */ /*     JSOp op, op2; */ 
1744: /* MUTANT (del_stmt) */ /*     const JSCodeSpec *cs; */ 
1745: /* MUTANT (del_stmt) */ /*     jsatomid atomIndex; */ 
1746: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
1747: /* MUTANT (del_stmt) */ /*     uintN argc, slot, attrs; */ 
1748: /* MUTANT (del_stmt) */ /*     jsval *vp, lval, rval, ltmp, rtmp; */ 
1749: /* MUTANT (del_stmt) */ /*     jsid id; */ 
1750: /* MUTANT (del_stmt) */ /*     JSObject *withobj, *origobj, *propobj; */ 
1751: /* MUTANT (del_stmt) */ /*     jsval iter_state; */ 
1752: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
1753: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
1754: /* MUTANT (del_stmt) */ /*     JSString *str, *str2; */ 
1755: /* MUTANT (del_stmt) */ /*     jsint i, j; */ 
1756: /* MUTANT (del_stmt) */ /*     jsdouble d, d2; */ 
1757: /* MUTANT (del_stmt) */ /*     JSClass *clasp, *funclasp; */ 
1758: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
1759: /* MUTANT (del_stmt) */ /*     JSType type; */ 
1768: /* MUTANT (del_stmt) */ /*     JSBool match; */ 
1778: /* MUTANT (del_stmt) */ /*     *result = JSVAL_VOID; */ 
1779: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
1782: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
1783: /* MUTANT (del_stmt) */ /*     script = fp->script; */ 
1786: /* MUTANT (del_stmt) */ /*     inlineCallCount = 0; */ 
1786: /* MUTANT (rep_const) */    inlineCallCount = 1;
1786: /* MUTANT (rep_const) */    inlineCallCount = -1;
1797: /* MUTANT (del_stmt) */ /*     currentVersion = script->version; */ 
1798: /* MUTANT (del_stmt) */ /*     originalVersion = cx->version; */ 
1799: /* MUTANT (rep_op) */    if (currentVersion == originalVersion)
1799: /* MUTANT (negate) */    if(! (currentVersion != originalVersion))
1810: /* MUTANT (del_stmt) */ /*     ok = JS_TRUE; */ 
1813: /* MUTANT (rep_op) */        if (len < 0 && onbranch) {                                           \
1813: /* MUTANT (rep_op) */        if (len > 0 && onbranch) {                                           \
1813: /* MUTANT (rep_op) */        if (len >= 0 && onbranch) {                                           \
1813: /* MUTANT (rep_op) */        if (len == 0 && onbranch) {                                           \
1813: /* MUTANT (rep_op) */        if (len != 0 && onbranch) {                                           \
1813: /* MUTANT (rep_op) */        if (len <= 0 || onbranch) {                                           \
1813: /* MUTANT (rep_const) */        if (len <= 1 && onbranch) {                                           \
1813: /* MUTANT (rep_const) */        if (len <= -1 && onbranch) {                                           \
1813: /* MUTANT (negate) */        if(! (len <= 0 && onbranch)) {                                           \
1815: /* MUTANT (negate) */            if(! (!(ok = (*onbranch)(cx, script))))                              \
1832: /* MUTANT (rep_op) */    if (--cx->interpLevel == MAX_INTERP_LEVEL ||
1832: /* MUTANT (rep_op) */    if (++cx->interpLevel != MAX_INTERP_LEVEL ||
1832: /* MUTANT (rep_op) */    if (++cx->interpLevel == MAX_INTERP_LEVEL &&
1834: /* MUTANT (del_stmt) */ /*         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_OVER_RECURSED); */ 
1835: /* MUTANT (del_stmt) */ /*         ok = JS_FALSE; */ 
1836: /* MUTANT (del_stmt) */ /*         goto out2; */ 
1845: /* MUTANT (negate) */    if(! (JS_LIKELY(!fp->spbase))) {
1846: /* MUTANT (del_stmt) */ /*         newsp = js_AllocRawStack(cx, (uintN)(2 * depth), &mark); */ 
1846: /* MUTANT (rep_const) */        newsp = js_AllocRawStack(cx, (uintN)(0 * depth), &mark);
1846: /* MUTANT (rep_const) */        newsp = js_AllocRawStack(cx, (uintN)(1 * depth), &mark);
1846: /* MUTANT (rep_const) */        newsp = js_AllocRawStack(cx, (uintN)(-1 * depth), &mark);
1846: /* MUTANT (rep_const) */        newsp = js_AllocRawStack(cx, (uintN)(((2)+1) * depth), &mark);
1846: /* MUTANT (rep_const) */        newsp = js_AllocRawStack(cx, (uintN)(((2)-1) * depth), &mark);
1847: /* MUTANT (negate) */        if(! (!newsp)) {
1848: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
1849: /* MUTANT (del_stmt) */ /*             goto out2; */ 
1851: /* MUTANT (rep_op) */        sp = newsp - depth;
1851: /* MUTANT (rep_op) */        sp = newsp * depth;
1851: /* MUTANT (rep_op) */        sp = newsp % depth;
1852: /* MUTANT (del_stmt) */ /*         fp->spbase = sp; */ 
1853: /* MUTANT (del_stmt) */ /*         SAVE_SP(fp); */ 
1855: /* MUTANT (del_stmt) */ /*         sp = fp->sp; */ 
1856: /* MUTANT (del_stmt) */ /*         JS_ASSERT(JS_UPTRDIFF(sp, fp->spbase) <= depth * sizeof(jsval)); */ 
1856: /* MUTANT (rep_op) */        JS_ASSERT(JS_UPTRDIFF(sp, fp->spbase) < depth * sizeof(jsval));
1856: /* MUTANT (rep_op) */        JS_ASSERT(JS_UPTRDIFF(sp, fp->spbase) > depth * sizeof(jsval));
1856: /* MUTANT (rep_op) */        JS_ASSERT(JS_UPTRDIFF(sp, fp->spbase) >= depth * sizeof(jsval));
1856: /* MUTANT (rep_op) */        JS_ASSERT(JS_UPTRDIFF(sp, fp->spbase) == depth * sizeof(jsval));
1856: /* MUTANT (rep_op) */        JS_ASSERT(JS_UPTRDIFF(sp, fp->spbase) != depth * sizeof(jsval));
1857: /* MUTANT (del_stmt) */ /*         newsp = fp->spbase - depth; */ 
1858: /* MUTANT (del_stmt) */ /*         mark = NULL; */ 
1861: /* MUTANT (rep_op) */    endpc = script->code - script->length;
1861: /* MUTANT (rep_op) */    endpc = script->code * script->length;
1861: /* MUTANT (rep_op) */    endpc = script->code % script->length;
1862: /* MUTANT (rep_op) */    while (pc <= endpc) {
1862: /* MUTANT (rep_op) */    while (pc > endpc) {
1862: /* MUTANT (rep_op) */    while (pc >= endpc) {
1862: /* MUTANT (rep_op) */    while (pc == endpc) {
1862: /* MUTANT (rep_op) */    while (pc != endpc) {
1862: /* MUTANT (negate) */    while(! (pc < endpc)) {
1863: /* MUTANT (del_stmt) */ /*         fp->pc = pc; */ 
1864: /* MUTANT (del_stmt) */ /*         op = (JSOp) *pc; */ 
1867: /* MUTANT (del_stmt) */ /*         len = cs->length; */ 
1871: /* MUTANT (negate) */        if(! (tracefp)) {
1872: /* MUTANT (del_stmt) */ /*             intN nuses, n; */ 
1874: /* MUTANT (del_stmt) */ /*             fprintf(tracefp, "%4u: ", js_PCToLineNumber(cx, script, pc)); */ 
1874: /* MUTANT (rep_const) */            fprintf(tracefp, "%0u: ", js_PCToLineNumber(cx, script, pc));
1874: /* MUTANT (rep_const) */            fprintf(tracefp, "%1u: ", js_PCToLineNumber(cx, script, pc));
1874: /* MUTANT (rep_const) */            fprintf(tracefp, "%-1u: ", js_PCToLineNumber(cx, script, pc));
1874: /* MUTANT (rep_const) */            fprintf(tracefp, "%((4)+1)u: ", js_PCToLineNumber(cx, script, pc));
1874: /* MUTANT (rep_const) */            fprintf(tracefp, "%((4)-1)u: ", js_PCToLineNumber(cx, script, pc));
1878: /* MUTANT (del_stmt) */ /*             nuses = cs->nuses; */ 
1879: /* MUTANT (negate) */            if(! (nuses)) {
1880: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
1881: /* MUTANT (rep_op) */                for (n = -nuses; n <= 0; n++) {
1881: /* MUTANT (rep_op) */                for (n = -nuses; n > 0; n++) {
1881: /* MUTANT (rep_op) */                for (n = -nuses; n >= 0; n++) {
1881: /* MUTANT (rep_op) */                for (n = -nuses; n == 0; n++) {
1881: /* MUTANT (rep_op) */                for (n = -nuses; n != 0; n++) {
1881: /* MUTANT (rep_op) */                for (n = -nuses; n < 0; n--) {
1881: /* MUTANT (rep_const) */                for (n = -nuses; n < 1; n++) {
1881: /* MUTANT (rep_const) */                for (n = -nuses; n < -1; n++) {
1882: /* MUTANT (del_stmt) */ /*                     str = js_DecompileValueGenerator(cx, n, sp[n], NULL); */ 
1883: /* MUTANT (negate) */                    if(! (str)) {
1885: /* MUTANT (rep_op) */                                (n != -nuses) ? "  inputs:" : ",",
1894: /* MUTANT (negate) */        if(! (interruptHandler)) {
1895: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
1900: /* MUTANT (del_stmt) */ /*                 goto out; */ 
1905: /* MUTANT (del_stmt) */ /*                 goto out; */ 
1909: /* MUTANT (del_stmt) */ /*                 cx->exception = rval; */ 
1910: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
1911: /* MUTANT (del_stmt) */ /*                 goto out; */ 
1927: /* MUTANT (del_stmt) */ /*             break; */ 
1930: /* MUTANT (rep_op) */            sp++;
1931: /* MUTANT (del_stmt) */ /*             break; */ 
1934: /* MUTANT (rep_op) */            sp += 2;
1934: /* MUTANT (rep_op) */            sp *= 2;
1934: /* MUTANT (rep_op) */            sp %= 2;
1934: /* MUTANT (rep_const) */            sp -= 0;
1934: /* MUTANT (rep_const) */            sp -= 1;
1934: /* MUTANT (rep_const) */            sp -= -1;
1934: /* MUTANT (rep_const) */            sp -= ((2)+1);
1934: /* MUTANT (rep_const) */            sp -= ((2)-1);
1935: /* MUTANT (del_stmt) */ /*             break; */ 
1942: /* MUTANT (rep_const) */            ltmp = sp[0];
1942: /* MUTANT (rep_const) */            ltmp = sp[1];
1942: /* MUTANT (rep_const) */            ltmp = sp[((-1)+1)];
1942: /* MUTANT (rep_const) */            ltmp = sp[((-1)-1)];
1943: /* MUTANT (del_stmt) */ /*             sp[-1] = sp[-2]; */ 
1943: /* MUTANT (rep_const) */            sp[0] = sp[-2];
1943: /* MUTANT (rep_const) */            sp[1] = sp[-2];
1943: /* MUTANT (rep_const) */            sp[((-1)+1)] = sp[-2];
1943: /* MUTANT (rep_const) */            sp[((-1)-1)] = sp[-2];
1943: /* MUTANT (rep_const) */            sp[-1] = sp[0];
1943: /* MUTANT (rep_const) */            sp[-1] = sp[1];
1943: /* MUTANT (rep_const) */            sp[-1] = sp[-1];
1943: /* MUTANT (rep_const) */            sp[-1] = sp[((-2)+1)];
1943: /* MUTANT (rep_const) */            sp[-1] = sp[((-2)-1)];
1944: /* MUTANT (del_stmt) */ /*             sp[-2] = ltmp; */ 
1944: /* MUTANT (rep_const) */            sp[0] = ltmp;
1944: /* MUTANT (rep_const) */            sp[1] = ltmp;
1944: /* MUTANT (rep_const) */            sp[-1] = ltmp;
1944: /* MUTANT (rep_const) */            sp[((-2)+1)] = ltmp;
1944: /* MUTANT (rep_const) */            sp[((-2)-1)] = ltmp;
1945: /* MUTANT (del_stmt) */ /*             break; */ 
1949: /* MUTANT (del_stmt) */ /*             break; */ 
1952: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 0, rval, obj);
1952: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 1, rval, obj);
1952: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-1)+1), rval, obj);
1952: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-1)-1), rval, obj);
1953: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
1955: /* MUTANT (rep_const) */                                       sp - fp->spbase - 0);
1955: /* MUTANT (rep_const) */                                       sp - fp->spbase - -1);
1955: /* MUTANT (rep_const) */                                       sp - fp->spbase - ((1)+1));
1956: /* MUTANT (negate) */            if(! (!withobj))
1958: /* MUTANT (del_stmt) */ /*             rval = INT_TO_JSVAL(sp - fp->spbase); */ 
1959: /* MUTANT (del_stmt) */ /*             fp->scopeChain = withobj; */ 
1960: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, OBJECT_TO_JSVAL(withobj)); */ 
1960: /* MUTANT (rep_const) */            STORE_OPND(0, OBJECT_TO_JSVAL(withobj));
1960: /* MUTANT (rep_const) */            STORE_OPND(1, OBJECT_TO_JSVAL(withobj));
1960: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), OBJECT_TO_JSVAL(withobj));
1960: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), OBJECT_TO_JSVAL(withobj));
1961: /* MUTANT (del_stmt) */ /*             break; */ 
1965: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSVAL_IS_OBJECT(rval)); */ 
1966: /* MUTANT (del_stmt) */ /*             withobj = JSVAL_TO_OBJECT(rval); */ 
1967: /* MUTANT (del_stmt) */ /*             JS_ASSERT(OBJ_GET_CLASS(cx, withobj) == &js_WithClass); */ 
1967: /* MUTANT (rep_op) */            JS_ASSERT(OBJ_GET_CLASS(cx, withobj) != &js_WithClass);
1969: /* MUTANT (del_stmt) */ /*             rval = OBJ_GET_SLOT(cx, withobj, JSSLOT_PARENT); */ 
1970: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSVAL_IS_OBJECT(rval)); */ 
1971: /* MUTANT (del_stmt) */ /*             fp->scopeChain = JSVAL_TO_OBJECT(rval); */ 
1972: /* MUTANT (del_stmt) */ /*             JS_SetPrivate(cx, withobj, NULL); */ 
1973: /* MUTANT (del_stmt) */ /*             break; */ 
1977: /* MUTANT (del_stmt) */ /*             break; */ 
1980: /* MUTANT (rep_const) */            CHECK_BRANCH(0);
1980: /* MUTANT (rep_const) */            CHECK_BRANCH(1);
1980: /* MUTANT (rep_const) */            CHECK_BRANCH(((-1)+1));
1980: /* MUTANT (rep_const) */            CHECK_BRANCH(((-1)-1));
1981: /* MUTANT (del_stmt) */ /*             fp->rval = POP_OPND(); */ 
1985: /* MUTANT (negate) */            if(! (inlineCallCount))
1988: /* MUTANT (del_stmt) */ /*                 JSInlineFrame *ifp = (JSInlineFrame *) fp; */ 
1988: /* MUTANT (negate) */                JSInlineFrame *if(!p = (JSInlineFrame *)) fp;
1989: /* MUTANT (del_stmt) */ /*                 void *hookData = ifp->hookData; */ 
1991: /* MUTANT (negate) */                if(! (hookData)) {
1992: /* MUTANT (del_stmt) */ /*                     JSInterpreterHook hook = cx->runtime->callHook; */ 
1993: /* MUTANT (negate) */                    if(! (hook)) {
1994: /* MUTANT (del_stmt) */ /*                         hook(cx, fp, JS_FALSE, &ok, hookData); */ 
1995: /* MUTANT (del_stmt) */ /*                         LOAD_INTERRUPT_HANDLER(rt); */ 
2006: /* MUTANT (negate) */                if(! (fp->callobj))
2010: /* MUTANT (negate) */                if(! (fp->argsobj))
2015: /* MUTANT (rep_op) */                if (cx->version != currentVersion) {
2015: /* MUTANT (negate) */                if(! (cx->version == currentVersion)) {
2016: /* MUTANT (del_stmt) */ /*                     currentVersion = ifp->callerVersion; */ 
2017: /* MUTANT (rep_op) */                    if (currentVersion == cx->version)
2017: /* MUTANT (negate) */                    if(! (currentVersion != cx->version))
2022: /* MUTANT (rep_const) */                vp = fp->argv - 0;
2022: /* MUTANT (rep_const) */                vp = fp->argv - 1;
2022: /* MUTANT (rep_const) */                vp = fp->argv - -1;
2022: /* MUTANT (rep_const) */                vp = fp->argv - ((2)+1);
2022: /* MUTANT (rep_const) */                vp = fp->argv - ((2)-1);
2023: /* MUTANT (del_stmt) */ /*                 *vp = fp->rval; */ 
2026: /* MUTANT (del_stmt) */ /*                 cx->fp = fp = fp->down; */ 
2027: /* MUTANT (del_stmt) */ /*                 JS_ARENA_RELEASE(&cx->stackPool, ifp->mark); */ 
2030: /* MUTANT (del_stmt) */ /*                 fp->sp = vp + 1; */ 
2030: /* MUTANT (rep_op) */                fp->sp = vp - 1;
2030: /* MUTANT (rep_op) */                fp->sp = vp * 1;
2030: /* MUTANT (rep_op) */                fp->sp = vp % 1;
2030: /* MUTANT (rep_const) */                fp->sp = vp + 0;
2030: /* MUTANT (rep_const) */                fp->sp = vp + -1;
2030: /* MUTANT (rep_const) */                fp->sp = vp + ((1)+1);
2031: /* MUTANT (del_stmt) */ /*                 RESTORE_SP(fp); */ 
2034: /* MUTANT (del_stmt) */ /*                 script = fp->script; */ 
2035: /* MUTANT (del_stmt) */ /*                 depth = (jsint) script->depth; */ 
2036: /* MUTANT (del_stmt) */ /*                 pc = fp->pc; */ 
2037: /* MUTANT (del_stmt) */ /*                 endpc = script->code + script->length; */ 
2037: /* MUTANT (rep_op) */                endpc = script->code - script->length;
2037: /* MUTANT (rep_op) */                endpc = script->code * script->length;
2037: /* MUTANT (rep_op) */                endpc = script->code % script->length;
2040: /* MUTANT (del_stmt) */ /*                 vp[-depth] = (jsval)pc; */ 
2043: /* MUTANT (del_stmt) */ /*                 op = (JSOp) *pc; */ 
2044: /* MUTANT (del_stmt) */ /*                 cs = &js_CodeSpec[op]; */ 
2045: /* MUTANT (del_stmt) */ /*                 len = cs->length; */ 
2048: /* MUTANT (del_stmt) */ /*                 inlineCallCount--; */ 
2048: /* MUTANT (rep_op) */                inlineCallCount++;
2049: /* MUTANT (negate) */                if(! (ok))
2061: /* MUTANT (del_stmt) */ /*             CHECK_BRANCH(len); */ 
2062: /* MUTANT (del_stmt) */ /*             break; */ 
2066: /* MUTANT (rep_op) */            if (cond != JS_FALSE) {
2066: /* MUTANT (negate) */            if(! (cond == JS_FALSE)) {
2067: /* MUTANT (del_stmt) */ /*                 len = GET_JUMP_OFFSET(pc); */ 
2068: /* MUTANT (del_stmt) */ /*                 CHECK_BRANCH(len); */ 
2074: /* MUTANT (rep_op) */            if (cond == JS_FALSE) {
2074: /* MUTANT (negate) */            if(! (cond != JS_FALSE)) {
2075: /* MUTANT (del_stmt) */ /*                 len = GET_JUMP_OFFSET(pc); */ 
2076: /* MUTANT (del_stmt) */ /*                 CHECK_BRANCH(len); */ 
2082: /* MUTANT (rep_op) */            if (cond != JS_TRUE) {
2082: /* MUTANT (negate) */            if(! (cond == JS_TRUE)) {
2083: /* MUTANT (del_stmt) */ /*                 len = GET_JUMP_OFFSET(pc); */ 
2084: /* MUTANT (del_stmt) */ /*                 PUSH_OPND(rval); */ 
2090: /* MUTANT (rep_op) */            if (cond != JS_FALSE) {
2090: /* MUTANT (negate) */            if(! (cond == JS_FALSE)) {
2091: /* MUTANT (del_stmt) */ /*                 len = GET_JUMP_OFFSET(pc); */ 
2092: /* MUTANT (del_stmt) */ /*                 PUSH_OPND(rval); */ 
2104: /* MUTANT (del_stmt) */ /*             CHECK_BRANCH(len); */ 
2105: /* MUTANT (del_stmt) */ /*             break; */ 
2109: /* MUTANT (rep_op) */            if (cond != JS_FALSE) {
2109: /* MUTANT (negate) */            if(! (cond == JS_FALSE)) {
2110: /* MUTANT (del_stmt) */ /*                 len = GET_JUMPX_OFFSET(pc); */ 
2111: /* MUTANT (del_stmt) */ /*                 CHECK_BRANCH(len); */ 
2117: /* MUTANT (rep_op) */            if (cond == JS_FALSE) {
2117: /* MUTANT (negate) */            if(! (cond != JS_FALSE)) {
2118: /* MUTANT (del_stmt) */ /*                 len = GET_JUMPX_OFFSET(pc); */ 
2119: /* MUTANT (del_stmt) */ /*                 CHECK_BRANCH(len); */ 
2125: /* MUTANT (rep_op) */            if (cond != JS_TRUE) {
2125: /* MUTANT (negate) */            if(! (cond == JS_TRUE)) {
2126: /* MUTANT (del_stmt) */ /*                 len = GET_JUMPX_OFFSET(pc); */ 
2127: /* MUTANT (del_stmt) */ /*                 PUSH_OPND(rval); */ 
2133: /* MUTANT (rep_op) */            if (cond != JS_FALSE) {
2133: /* MUTANT (negate) */            if(! (cond == JS_FALSE)) {
2134: /* MUTANT (del_stmt) */ /*                 len = GET_JUMPX_OFFSET(pc); */ 
2135: /* MUTANT (del_stmt) */ /*                 PUSH_OPND(rval); */ 
2140: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
2140: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
2140: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
2140: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
2141: /* MUTANT (negate) */            if(! (!JSVAL_IS_PRIMITIVE(rval))) {
2142: /* MUTANT (del_stmt) */ /*                 obj = JSVAL_TO_OBJECT(rval); */ 
2144: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
2145: /* MUTANT (del_stmt) */ /*                 ok = js_ValueToObject(cx, rval, &obj); */ 
2146: /* MUTANT (negate) */                if(! (!ok))
2149: /* MUTANT (rep_const) */            STORE_OPND(0, OBJECT_TO_JSVAL(obj));
2149: /* MUTANT (rep_const) */            STORE_OPND(1, OBJECT_TO_JSVAL(obj));
2149: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), OBJECT_TO_JSVAL(obj));
2149: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), OBJECT_TO_JSVAL(obj));
2150: /* MUTANT (del_stmt) */ /*             break; */ 
2161: /* MUTANT (negate) */        if(! (JSVAL_IS_INT(idval_))) {                                           \
2166: /* MUTANT (negate) */            if(! (!ok))                                                          \
2174: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
2174: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
2174: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
2174: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
2174: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
2175: /* MUTANT (negate) */            if(! (JSVAL_IS_PRIMITIVE(rval))) {
2176: /* MUTANT (del_stmt) */ /*                 str = js_DecompileValueGenerator(cx, -1, rval, NULL); */ 
2176: /* MUTANT (rep_const) */                str = js_DecompileValueGenerator(cx, 0, rval, NULL);
2176: /* MUTANT (rep_const) */                str = js_DecompileValueGenerator(cx, 1, rval, NULL);
2176: /* MUTANT (rep_const) */                str = js_DecompileValueGenerator(cx, ((-1)+1), rval, NULL);
2176: /* MUTANT (rep_const) */                str = js_DecompileValueGenerator(cx, ((-1)-1), rval, NULL);
2177: /* MUTANT (negate) */                if(! (str)) {
2183: /* MUTANT (del_stmt) */ /*                 goto out; */ 
2186: /* MUTANT (del_stmt) */ /*             FETCH_ELEMENT_ID(-2, id); */ 
2186: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(0, id);
2186: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(1, id);
2186: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(-1, id);
2186: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(((-2)+1), id);
2186: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(((-2)-1), id);
2187: /* MUTANT (del_stmt) */ /*             CHECK_ELEMENT_ID(obj, id); */ 
2188: /* MUTANT (del_stmt) */ /*             ok = OBJ_LOOKUP_PROPERTY(cx, obj, id, &obj2, &prop); */ 
2189: /* MUTANT (negate) */            if(! (!ok))
2191: /* MUTANT (del_stmt) */ /*             sp--; */ 
2191: /* MUTANT (rep_op) */            sp++;
2192: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, BOOLEAN_TO_JSVAL(prop != NULL)); */ 
2192: /* MUTANT (rep_op) */            STORE_OPND(-1, BOOLEAN_TO_JSVAL(prop == NULL));
2192: /* MUTANT (rep_const) */            STORE_OPND(0, BOOLEAN_TO_JSVAL(prop != NULL));
2192: /* MUTANT (rep_const) */            STORE_OPND(1, BOOLEAN_TO_JSVAL(prop != NULL));
2192: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), BOOLEAN_TO_JSVAL(prop != NULL));
2192: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), BOOLEAN_TO_JSVAL(prop != NULL));
2193: /* MUTANT (negate) */            if(! (prop))
2195: /* MUTANT (del_stmt) */ /*             break; */ 
2203: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
2203: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
2203: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)+1));
2203: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)-1));
2204: /* MUTANT (del_stmt) */ /*             atom = GET_ATOM(cx, script, pc); */ 
2205: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
2206: /* MUTANT (del_stmt) */ /*             i = -2; */ 
2206: /* MUTANT (rep_const) */            i = 0;
2206: /* MUTANT (rep_const) */            i = 1;
2206: /* MUTANT (rep_const) */            i = -1;
2206: /* MUTANT (rep_const) */            i = ((-2)+1);
2206: /* MUTANT (rep_const) */            i = ((-2)-1);
2207: /* MUTANT (del_stmt) */ /*             goto do_forinloop; */ 
2211: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
2221: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
2222: /* MUTANT (del_stmt) */ /*             ok = js_FindProperty(cx, id, &obj, &obj2, &prop); */ 
2223: /* MUTANT (negate) */            if(! (!ok))
2225: /* MUTANT (negate) */            if(! (prop))
2227: /* MUTANT (del_stmt) */ /*             lval = OBJECT_TO_JSVAL(obj); */ 
2246: /* MUTANT (rep_const) */            i = 0;
2246: /* MUTANT (rep_const) */            i = 1;
2246: /* MUTANT (rep_const) */            i = ((-1)+1);
2246: /* MUTANT (rep_const) */            i = ((-1)-1);
2256: /* MUTANT (negate) */            if(! (!obj)) {
2257: /* MUTANT (del_stmt) */ /*                 rval = JSVAL_FALSE; */ 
2258: /* MUTANT (del_stmt) */ /*                 goto end_forinloop; */ 
2274: /* MUTANT (del_stmt) */ /*             vp = &sp[i - 1]; */ 
2274: /* MUTANT (rep_const) */            vp = &sp[i - 0];
2274: /* MUTANT (rep_const) */            vp = &sp[i - -1];
2274: /* MUTANT (rep_const) */            vp = &sp[i - ((1)+1)];
2275: /* MUTANT (del_stmt) */ /*             rval = *vp; */ 
2281: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
2284: /* MUTANT (negate) */            if(! (JSVAL_IS_VOID(rval))) {
2291: /* MUTANT (del_stmt) */ /*                 propobj = js_NewObject(cx, &prop_iterator_class, NULL, NULL); */ 
2292: /* MUTANT (negate) */                if(! (!propobj)) {
2293: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
2294: /* MUTANT (del_stmt) */ /*                     goto out; */ 
2302: /* MUTANT (del_stmt) */ /*                 propobj->slots[JSSLOT_ITER_STATE] = JSVAL_NULL; */ 
2311: /* MUTANT (negate) */                if(! (!ok))
2319: /* MUTANT (del_stmt) */ /*                 *vp = OBJECT_TO_JSVAL(propobj); */ 
2323: /* MUTANT (rep_op) */                     (foreach || OBJECT_IS_XML(cx, obj))
2331: /* MUTANT (negate) */                if(! (!ok))
2338: #if JS_INITIAL_NSLOTS < 0 /* MUTANT (rep_const) */
2338: #if JS_INITIAL_NSLOTS < 1 /* MUTANT (rep_const) */
2338: #if JS_INITIAL_NSLOTS < -1 /* MUTANT (rep_const) */
2338: #if JS_INITIAL_NSLOTS < ((5)+1) /* MUTANT (rep_const) */
2338: #if JS_INITIAL_NSLOTS < ((5)-1) /* MUTANT (rep_const) */
2344: /* MUTANT (del_stmt) */ /*                 propobj = JSVAL_TO_OBJECT(rval); */ 
2345: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(OBJ_GET_CLASS(cx, propobj) == &prop_iterator_class); */ 
2345: /* MUTANT (rep_op) */                JS_ASSERT(OBJ_GET_CLASS(cx, propobj) != &prop_iterator_class);
2346: /* MUTANT (del_stmt) */ /*                 obj = JSVAL_TO_OBJECT(propobj->slots[JSSLOT_PARENT]); */ 
2347: /* MUTANT (del_stmt) */ /*                 iter_state = propobj->slots[JSSLOT_ITER_STATE]; */ 
2352: /* MUTANT (del_stmt) */ /*             jsid fid; */ 
2357: /* MUTANT (rep_op) */                 (foreach || OBJECT_IS_XML(cx, obj))
2364: /* MUTANT (del_stmt) */ /*             propobj->slots[JSSLOT_ITER_STATE] = iter_state; */ 
2367: /* MUTANT (rep_op) */            if (iter_state != JSVAL_NULL) {
2367: /* MUTANT (negate) */            if(! (iter_state == JSVAL_NULL)) {
2369: /* MUTANT (del_stmt) */ /*                 obj = OBJ_GET_PROTO(cx, obj); */ 
2370: /* MUTANT (negate) */                if(! (!obj)) {
2372: /* MUTANT (del_stmt) */ /*                     rval = JSVAL_FALSE; */ 
2381: /* MUTANT (rep_op) */                     (foreach || OBJECT_IS_XML(cx, obj))
2396: /* MUTANT (del_stmt) */ /*                 propobj->slots[JSSLOT_ITER_STATE] = iter_state; */ 
2397: /* MUTANT (negate) */                if(! (!ok))
2405: /* MUTANT (del_stmt) */ /*                 propobj->slots[JSSLOT_PARENT] = OBJECT_TO_JSVAL(obj); */ 
2406: /* MUTANT (del_stmt) */ /*                 goto enum_next_property; */ 
2411: /* MUTANT (negate) */            if(! (!ok))
2413: /* MUTANT (negate) */            if(! (prop))
2423: /* MUTANT (negate) */            if(! (!prop))
2425: /* MUTANT (rep_op) */            if (obj == obj2) {
2425: /* MUTANT (negate) */            if(! (obj != obj2)) {
2426: /* MUTANT (del_stmt) */ /*                 cond = JS_FALSE; */ 
2427: /* MUTANT (del_stmt) */ /*                 clasp = OBJ_GET_CLASS(cx, obj2); */ 
2428: /* MUTANT (negate) */                if(! (clasp->flags & JSCLASS_IS_EXTENDED)) {
2429: /* MUTANT (del_stmt) */ /*                     JSExtendedClass *xclasp; */ 
2431: /* MUTANT (del_stmt) */ /*                     xclasp = (JSExtendedClass *) clasp; */ 
2432: /* MUTANT (rep_op) */                    cond = xclasp->outerObject ||
2433: /* MUTANT (rep_op) */                           xclasp->outerObject(cx, obj2) != obj;
2435: /* MUTANT (negate) */                if(! (!cond))
2440: /* MUTANT (negate) */            if(! (foreach)) {
2442: /* MUTANT (del_stmt) */ /*                 foreach = JS_FALSE; */ 
2445: /* MUTANT (negate) */                if(! (!OBJECT_IS_XML(cx, obj))) {
2446: /* MUTANT (del_stmt) */ /*                     ok = OBJ_GET_PROPERTY(cx, origobj, fid, &rval); */ 
2447: /* MUTANT (negate) */                    if(! (!ok))
2454: /* MUTANT (negate) */                if(! (JSID_IS_ATOM(fid))) {
2455: /* MUTANT (del_stmt) */ /*                     rval = ATOM_KEY(JSID_TO_ATOM(fid)); */ 
2458: /* MUTANT (negate) */                else if(! (JSID_IS_OBJECT(fid))) {
2459: /* MUTANT (del_stmt) */ /*                     str = js_ValueToString(cx, OBJECT_JSID_TO_JSVAL(fid)); */ 
2460: /* MUTANT (negate) */                    if(! (!str)) {
2461: /* MUTANT (del_stmt) */ /*                         ok = JS_FALSE; */ 
2462: /* MUTANT (del_stmt) */ /*                         goto out; */ 
2468: /* MUTANT (negate) */                else if(! (!JS_VERSION_IS_1_2(cx))) {
2469: /* MUTANT (del_stmt) */ /*                     str = js_NumberToString(cx, (jsdouble) JSID_TO_INT(fid)); */ 
2470: /* MUTANT (negate) */                    if(! (!str)) {
2471: /* MUTANT (del_stmt) */ /*                         ok = JS_FALSE; */ 
2472: /* MUTANT (del_stmt) */ /*                         goto out; */ 
2477: /* MUTANT (del_stmt) */ /*                     rval = INT_JSID_TO_JSVAL(fid); */ 
2484: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(slot < fp->fun->nargs); */ 
2484: /* MUTANT (rep_op) */                JS_ASSERT(slot <= fp->fun->nargs);
2484: /* MUTANT (rep_op) */                JS_ASSERT(slot > fp->fun->nargs);
2484: /* MUTANT (rep_op) */                JS_ASSERT(slot >= fp->fun->nargs);
2484: /* MUTANT (rep_op) */                JS_ASSERT(slot == fp->fun->nargs);
2484: /* MUTANT (rep_op) */                JS_ASSERT(slot != fp->fun->nargs);
2485: /* MUTANT (del_stmt) */ /*                 fp->argv[slot] = rval; */ 
2486: /* MUTANT (del_stmt) */ /*                 break; */ 
2490: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(slot < fp->fun->nvars); */ 
2490: /* MUTANT (rep_op) */                JS_ASSERT(slot <= fp->fun->nvars);
2490: /* MUTANT (rep_op) */                JS_ASSERT(slot > fp->fun->nvars);
2490: /* MUTANT (rep_op) */                JS_ASSERT(slot >= fp->fun->nvars);
2490: /* MUTANT (rep_op) */                JS_ASSERT(slot == fp->fun->nvars);
2490: /* MUTANT (rep_op) */                JS_ASSERT(slot != fp->fun->nvars);
2491: /* MUTANT (del_stmt) */ /*                 fp->vars[slot] = rval; */ 
2492: /* MUTANT (del_stmt) */ /*                 break; */ 
2497: /* MUTANT (del_stmt) */ /*                 break; */ 
2502: /* MUTANT (rep_op) */                if (i - 1 < 0)
2502: /* MUTANT (rep_op) */                if (i * 1 < 0)
2502: /* MUTANT (rep_op) */                if (i % 1 < 0)
2502: /* MUTANT (rep_op) */                if (i + 1 <= 0)
2502: /* MUTANT (rep_op) */                if (i + 1 > 0)
2502: /* MUTANT (rep_op) */                if (i + 1 >= 0)
2502: /* MUTANT (rep_op) */                if (i + 1 == 0)
2502: /* MUTANT (rep_op) */                if (i + 1 != 0)
2502: /* MUTANT (rep_const) */                if (i + 0 < 0)
2502: /* MUTANT (rep_const) */                if (i + -1 < 0)
2502: /* MUTANT (rep_const) */                if (i + ((1)+1) < 0)
2502: /* MUTANT (rep_const) */                if (i + 1 < 1)
2502: /* MUTANT (rep_const) */                if (i + 1 < -1)
2502: /* MUTANT (negate) */                if(! (i + 1 < 0))
2503: /* MUTANT (rep_op) */                    STORE_OPND(i - 1, OBJECT_TO_JSVAL(obj));
2503: /* MUTANT (rep_op) */                    STORE_OPND(i * 1, OBJECT_TO_JSVAL(obj));
2503: /* MUTANT (rep_op) */                    STORE_OPND(i % 1, OBJECT_TO_JSVAL(obj));
2503: /* MUTANT (rep_const) */                    STORE_OPND(i + 0, OBJECT_TO_JSVAL(obj));
2503: /* MUTANT (rep_const) */                    STORE_OPND(i + -1, OBJECT_TO_JSVAL(obj));
2503: /* MUTANT (rep_const) */                    STORE_OPND(i + ((1)+1), OBJECT_TO_JSVAL(obj));
2506: /* MUTANT (del_stmt) */ /*                 fp->flags |= JSFRAME_ASSIGNING; */ 
2507: /* MUTANT (del_stmt) */ /*                 ok = OBJ_SET_PROPERTY(cx, obj, id, &rval); */ 
2508: /* MUTANT (del_stmt) */ /*                 fp->flags &= ~JSFRAME_ASSIGNING; */ 
2509: /* MUTANT (negate) */                if(! (!ok))
2511: /* MUTANT (del_stmt) */ /*                 break; */ 
2518: /* MUTANT (rep_op) */            sp -= i + 1;
2518: /* MUTANT (rep_op) */            sp *= i + 1;
2518: /* MUTANT (rep_op) */            sp %= i + 1;
2518: /* MUTANT (rep_op) */            sp += i - 1;
2518: /* MUTANT (rep_op) */            sp += i * 1;
2518: /* MUTANT (rep_op) */            sp += i % 1;
2518: /* MUTANT (rep_const) */            sp += i + 0;
2518: /* MUTANT (rep_const) */            sp += i + -1;
2518: /* MUTANT (rep_const) */            sp += i + ((1)+1);
2519: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
2520: /* MUTANT (del_stmt) */ /*             break; */ 
2524: /* MUTANT (rep_op) */            JS_ASSERT(sp <= fp->spbase);
2524: /* MUTANT (rep_op) */            JS_ASSERT(sp < fp->spbase);
2524: /* MUTANT (rep_op) */            JS_ASSERT(sp >= fp->spbase);
2524: /* MUTANT (rep_op) */            JS_ASSERT(sp == fp->spbase);
2524: /* MUTANT (rep_op) */            JS_ASSERT(sp != fp->spbase);
2525: /* MUTANT (del_stmt) */ /*             rval = sp[-1]; */ 
2525: /* MUTANT (rep_const) */            rval = sp[0];
2525: /* MUTANT (rep_const) */            rval = sp[1];
2525: /* MUTANT (rep_const) */            rval = sp[((-1)+1)];
2525: /* MUTANT (rep_const) */            rval = sp[((-1)-1)];
2526: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
2527: /* MUTANT (del_stmt) */ /*             break; */ 
2530: /* MUTANT (rep_op) */            JS_ASSERT(sp - 1 <= fp->spbase);
2530: /* MUTANT (rep_op) */            JS_ASSERT(sp - 1 < fp->spbase);
2530: /* MUTANT (rep_op) */            JS_ASSERT(sp - 1 >= fp->spbase);
2530: /* MUTANT (rep_op) */            JS_ASSERT(sp - 1 == fp->spbase);
2530: /* MUTANT (rep_op) */            JS_ASSERT(sp - 1 != fp->spbase);
2530: /* MUTANT (rep_const) */            JS_ASSERT(sp - 0 > fp->spbase);
2530: /* MUTANT (rep_const) */            JS_ASSERT(sp - -1 > fp->spbase);
2530: /* MUTANT (rep_const) */            JS_ASSERT(sp - ((1)+1) > fp->spbase);
2531: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-2); */ 
2531: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
2531: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
2531: /* MUTANT (rep_const) */            lval = FETCH_OPND(-1);
2531: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)+1));
2531: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)-1));
2532: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
2532: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
2532: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
2532: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
2532: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
2533: /* MUTANT (del_stmt) */ /*             PUSH_OPND(lval); */ 
2534: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
2535: /* MUTANT (del_stmt) */ /*             break; */ 
2545: /* MUTANT (negate) */        if(! (!ok))                                                              \
2555: /* MUTANT (rep_const) */        FETCH_OBJECT(cx, n - 0, lval, obj);                                   \
2555: /* MUTANT (rep_const) */        FETCH_OBJECT(cx, n - -1, lval, obj);                                   \
2555: /* MUTANT (rep_const) */        FETCH_OBJECT(cx, n - ((1)+1), lval, obj);                                   \
2563: /* MUTANT (negate) */        if(! (!ok))                                                              \
2577: /* MUTANT (negate) */        if(! (!OBJ_IS_NATIVE(obj))) {                                            \
2582: /* MUTANT (negate) */            if(! (sprop)) {                                                      \
2585: /* MUTANT (rep_op) */                *(vp) = (slot == SPROP_INVALID_SLOT)                          \
2591: /* MUTANT (rep_op) */                if (ok || SPROP_HAS_VALID_SLOT(sprop, scope_))                \
2591: /* MUTANT (negate) */                if(! (ok && SPROP_HAS_VALID_SLOT(sprop, scope_)))                \
2604: /* MUTANT (negate) */        if(! (!OBJ_IS_NATIVE(obj))) {                                            \
2610: /* MUTANT (rep_op) */            if (sprop ||                                                      \
2611: /* MUTANT (rep_op) */                !(sprop->attrs & JSPROP_READONLY) ||                          \
2616: /* MUTANT (rep_op) */                if (ok || SPROP_HAS_VALID_SLOT(sprop, scope_)) {              \
2616: /* MUTANT (negate) */                if(! (ok && SPROP_HAS_VALID_SLOT(sprop, scope_))) {              \
2631: /* MUTANT (rep_op) */            atomIndex = GET_ATOM_INDEX(pc - PCOFF);                           \
2631: /* MUTANT (rep_op) */            atomIndex = GET_ATOM_INDEX(pc * PCOFF);                           \
2631: /* MUTANT (rep_op) */            atomIndex = GET_ATOM_INDEX(pc % PCOFF);                           \
2638: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_SETCONST, 1)
2638: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_SETCONST, -1)
2640: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
2640: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
2640: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
2640: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
2640: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
2641: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
2644: /* MUTANT (rep_op) */                                     JSPROP_ENUMERATE & JSPROP_PERMANENT |
2644: /* MUTANT (rep_op) */                                     JSPROP_ENUMERATE | JSPROP_PERMANENT &
2647: /* MUTANT (negate) */            if(! (!ok))
2649: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
2649: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
2649: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
2649: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
2649: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
2652: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_BINDNAME, 1)
2652: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_BINDNAME, -1)
2654: /* MUTANT (del_stmt) */ /*             obj = js_FindIdentifierBase(cx, ATOM_TO_JSID(atom)); */ 
2654: /* MUTANT (negate) */            obj = js_FindIdentif(!ierBase(cx, ATOM_TO_JSID(atom)));
2655: /* MUTANT (negate) */            if(! (!obj)) {
2656: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
2657: /* MUTANT (del_stmt) */ /*                 goto out; */ 
2664: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
2665: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
2665: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
2665: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
2665: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
2665: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
2666: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-2); */ 
2666: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
2666: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
2666: /* MUTANT (rep_const) */            lval = FETCH_OPND(-1);
2666: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)+1));
2666: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)-1));
2667: /* MUTANT (del_stmt) */ /*             JS_ASSERT(!JSVAL_IS_PRIMITIVE(lval)); */ 
2668: /* MUTANT (del_stmt) */ /*             obj  = JSVAL_TO_OBJECT(lval); */ 
2669: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
2670: /* MUTANT (del_stmt) */ /*             CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)); */ 
2671: /* MUTANT (negate) */            if(! (!ok))
2673: /* MUTANT (del_stmt) */ /*             sp--; */ 
2673: /* MUTANT (rep_op) */            sp++;
2674: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
2674: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
2674: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
2674: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
2674: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
2675: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
2676: /* MUTANT (del_stmt) */ /*             break; */ 
2680: /* MUTANT (rep_const) */        FETCH_INT(cx, 0, j);                                                 \
2680: /* MUTANT (rep_const) */        FETCH_INT(cx, 1, j);                                                 \
2680: /* MUTANT (rep_const) */        FETCH_INT(cx, ((-1)+1), j);                                                 \
2680: /* MUTANT (rep_const) */        FETCH_INT(cx, ((-1)-1), j);                                                 \
2681: /* MUTANT (rep_const) */        FETCH_INT(cx, 0, i);                                                 \
2681: /* MUTANT (rep_const) */        FETCH_INT(cx, 1, i);                                                 \
2681: /* MUTANT (rep_const) */        FETCH_INT(cx, -1, i);                                                 \
2681: /* MUTANT (rep_const) */        FETCH_INT(cx, ((-2)+1), i);                                                 \
2681: /* MUTANT (rep_const) */        FETCH_INT(cx, ((-2)-1), i);                                                 \
2682: /* MUTANT (negate) */        if(! (!ok))                                                              \
2686: /* MUTANT (rep_op) */        sp++;                                                                 \
2687: /* MUTANT (rep_const) */        STORE_NUMBER(cx, 0, d);                                              \
2687: /* MUTANT (rep_const) */        STORE_NUMBER(cx, 1, d);                                              \
2687: /* MUTANT (rep_const) */        STORE_NUMBER(cx, ((-1)+1), d);                                              \
2687: /* MUTANT (rep_const) */        STORE_NUMBER(cx, ((-1)-1), d);                                              \
2690: #define BITWISE_OP(OP)          INTEGER_OP(OP, (void) 1;) /* MUTANT (rep_const) */
2690: #define BITWISE_OP(OP)          INTEGER_OP(OP, (void) -1;) /* MUTANT (rep_const) */
2691: #define SIGNED_SHIFT_OP(OP)     INTEGER_OP(OP, j &= 0;) /* MUTANT (rep_const) */
2691: #define SIGNED_SHIFT_OP(OP)     INTEGER_OP(OP, j &= 1;) /* MUTANT (rep_const) */
2691: #define SIGNED_SHIFT_OP(OP)     INTEGER_OP(OP, j &= -1;) /* MUTANT (rep_const) */
2691: #define SIGNED_SHIFT_OP(OP)     INTEGER_OP(OP, j &= ((31)+1);) /* MUTANT (rep_const) */
2691: #define SIGNED_SHIFT_OP(OP)     INTEGER_OP(OP, j &= ((31)-1);) /* MUTANT (rep_const) */
2694: /* MUTANT (rep_op) */            BITWISE_OP(&);
2695: /* MUTANT (del_stmt) */ /*             break; */ 
2699: /* MUTANT (del_stmt) */ /*             break; */ 
2703: /* MUTANT (del_stmt) */ /*             break; */ 
2707: /* MUTANT (rep_const) */        rval = FETCH_OPND(0);                                                \
2707: /* MUTANT (rep_const) */        rval = FETCH_OPND(1);                                                \
2707: /* MUTANT (rep_const) */        rval = FETCH_OPND(((-1)+1));                                                \
2707: /* MUTANT (rep_const) */        rval = FETCH_OPND(((-1)-1));                                                \
2708: /* MUTANT (rep_const) */        lval = FETCH_OPND(0);                                                \
2708: /* MUTANT (rep_const) */        lval = FETCH_OPND(1);                                                \
2708: /* MUTANT (rep_const) */        lval = FETCH_OPND(-1);                                                \
2708: /* MUTANT (rep_const) */        lval = FETCH_OPND(((-2)+1));                                                \
2708: /* MUTANT (rep_const) */        lval = FETCH_OPND(((-2)-1));                                                \
2710: /* MUTANT (negate) */        if(! ((lval & rval) & JSVAL_INT)) {                                      \
2713: /* MUTANT (rep_op) */            if (ltmp || rtmp) {                                               \
2713: /* MUTANT (negate) */            if(! (ltmp && rtmp)) {                                               \
2722: /* MUTANT (rep_const) */            sp[0] = lval;                                                    \
2722: /* MUTANT (rep_const) */            sp[1] = lval;                                                    \
2722: /* MUTANT (rep_const) */            sp[-1] = lval;                                                    \
2722: /* MUTANT (rep_const) */            sp[((-2)+1)] = lval;                                                    \
2722: /* MUTANT (rep_const) */            sp[((-2)-1)] = lval;                                                    \
2724: /* MUTANT (rep_op) */            if (JSVAL_IS_STRING(lval) || JSVAL_IS_STRING(rval)) {             \
2724: /* MUTANT (negate) */            if(! (JSVAL_IS_STRING(lval) && JSVAL_IS_STRING(rval))) {             \
2727: /* MUTANT (rep_const) */                cond = js_CompareStrings(str, str2) OP 1;                     \
2727: /* MUTANT (rep_const) */                cond = js_CompareStrings(str, str2) OP -1;                     \
2734: /* MUTANT (rep_op) */        sp++;                                                                 \
2735: /* MUTANT (rep_const) */        STORE_OPND(0, BOOLEAN_TO_JSVAL(cond));                               \
2735: /* MUTANT (rep_const) */        STORE_OPND(1, BOOLEAN_TO_JSVAL(cond));                               \
2735: /* MUTANT (rep_const) */        STORE_OPND(((-1)+1), BOOLEAN_TO_JSVAL(cond));                               \
2735: /* MUTANT (rep_const) */        STORE_OPND(((-1)-1), BOOLEAN_TO_JSVAL(cond));                               \
2745: /* MUTANT (rep_op) */    if ((ltmp != JSVAL_OBJECT &&                                              \
2745: /* MUTANT (rep_op) */    if ((ltmp == JSVAL_OBJECT ||                                              \
2746: /* MUTANT (rep_op) */         (obj2 = JSVAL_TO_OBJECT(lval)) ||                                    \
2747: /* MUTANT (rep_op) */         OBJECT_IS_XML(cx, obj2)) &&                                          \
2748: /* MUTANT (rep_op) */        (rtmp != JSVAL_OBJECT &&                                              \
2748: /* MUTANT (rep_op) */        (rtmp == JSVAL_OBJECT ||                                              \
2749: /* MUTANT (rep_op) */         (obj2 = JSVAL_TO_OBJECT(rval)) ||                                    \
2754: /* MUTANT (rep_op) */        if (obj2 != JSVAL_TO_OBJECT(rval))                                    \
2754: /* MUTANT (negate) */        if(! (obj2 == JSVAL_TO_OBJECT(rval)))                                    \
2758: /* MUTANT (negate) */        if(! (!ok))                                                              \
2764: /* MUTANT (rep_op) */    if (ltmp != JSVAL_OBJECT &&                                               \
2764: /* MUTANT (rep_op) */    if (ltmp == JSVAL_OBJECT ||                                               \
2765: /* MUTANT (rep_op) */        (obj2 = JSVAL_TO_OBJECT(lval)) ||                                     \
2772: /* MUTANT (negate) */        if(! (!ok))                                                              \
2783: /* MUTANT (rep_const) */        rval = FETCH_OPND(0);                                                \
2783: /* MUTANT (rep_const) */        rval = FETCH_OPND(1);                                                \
2783: /* MUTANT (rep_const) */        rval = FETCH_OPND(((-1)+1));                                                \
2783: /* MUTANT (rep_const) */        rval = FETCH_OPND(((-1)-1));                                                \
2784: /* MUTANT (rep_const) */        lval = FETCH_OPND(0);                                                \
2784: /* MUTANT (rep_const) */        lval = FETCH_OPND(1);                                                \
2784: /* MUTANT (rep_const) */        lval = FETCH_OPND(-1);                                                \
2784: /* MUTANT (rep_const) */        lval = FETCH_OPND(((-2)+1));                                                \
2784: /* MUTANT (rep_const) */        lval = FETCH_OPND(((-2)-1));                                                \
2788: /* MUTANT (rep_op) */        if (ltmp != rtmp) {                                                   \
2788: /* MUTANT (negate) */        if(! (ltmp == rtmp)) {                                                   \
2789: /* MUTANT (rep_op) */            if (ltmp != JSVAL_STRING) {                                       \
2789: /* MUTANT (negate) */            if(! (ltmp == JSVAL_STRING)) {                                       \
2792: /* MUTANT (rep_const) */                cond = js_CompareStrings(str, str2) OP 1;                     \
2792: /* MUTANT (rep_const) */                cond = js_CompareStrings(str, str2) OP -1;                     \
2793: /* MUTANT (rep_op) */            } else if (ltmp != JSVAL_DOUBLE) {                                \
2793: /* MUTANT (negate) */            } else if(! (ltmp == JSVAL_DOUBLE)) {                                \
2803: /* MUTANT (rep_op) */            if (JSVAL_IS_NULL(lval) && JSVAL_IS_VOID(lval)) {                 \
2803: /* MUTANT (negate) */            if(! (JSVAL_IS_NULL(lval) || JSVAL_IS_VOID(lval))) {                 \
2804: /* MUTANT (rep_op) */                cond = (JSVAL_IS_NULL(rval) && JSVAL_IS_VOID(rval)) OP 1;     \
2804: /* MUTANT (rep_const) */                cond = (JSVAL_IS_NULL(rval) || JSVAL_IS_VOID(rval)) OP 0;     \
2804: /* MUTANT (rep_const) */                cond = (JSVAL_IS_NULL(rval) || JSVAL_IS_VOID(rval)) OP -1;     \
2804: /* MUTANT (rep_const) */                cond = (JSVAL_IS_NULL(rval) || JSVAL_IS_VOID(rval)) OP ((1)+1);     \
2805: /* MUTANT (rep_op) */            } else if (JSVAL_IS_NULL(rval) && JSVAL_IS_VOID(rval)) {          \
2805: /* MUTANT (negate) */            } else if(! (JSVAL_IS_NULL(rval) || JSVAL_IS_VOID(rval))) {          \
2806: /* MUTANT (rep_const) */                cond = 0 OP 0;                                                \
2806: /* MUTANT (rep_const) */                cond = -1 OP 0;                                                \
2806: /* MUTANT (rep_const) */                cond = ((1)+1) OP 0;                                                \
2806: /* MUTANT (rep_const) */                cond = 1 OP 1;                                                \
2806: /* MUTANT (rep_const) */                cond = 1 OP -1;                                                \
2808: /* MUTANT (rep_op) */                if (ltmp != JSVAL_OBJECT) {                                   \
2808: /* MUTANT (negate) */                if(! (ltmp == JSVAL_OBJECT)) {                                   \
2809: /* MUTANT (rep_const) */                    VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[0]);       \
2809: /* MUTANT (rep_const) */                    VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[1]);       \
2809: /* MUTANT (rep_const) */                    VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[-1]);       \
2809: /* MUTANT (rep_const) */                    VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[((-2)+1)]);       \
2809: /* MUTANT (rep_const) */                    VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[((-2)-1)]);       \
2810: /* MUTANT (rep_const) */                    lval = sp[0];                                            \
2810: /* MUTANT (rep_const) */                    lval = sp[1];                                            \
2810: /* MUTANT (rep_const) */                    lval = sp[-1];                                            \
2810: /* MUTANT (rep_const) */                    lval = sp[((-2)+1)];                                            \
2810: /* MUTANT (rep_const) */                    lval = sp[((-2)-1)];                                            \
2812: /* MUTANT (rep_op) */                } else if (rtmp != JSVAL_OBJECT) {                            \
2812: /* MUTANT (negate) */                } else if(! (rtmp == JSVAL_OBJECT)) {                            \
2813: /* MUTANT (rep_const) */                    VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &sp[0]);       \
2813: /* MUTANT (rep_const) */                    VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &sp[1]);       \
2813: /* MUTANT (rep_const) */                    VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &sp[((-1)+1)]);       \
2813: /* MUTANT (rep_const) */                    VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &sp[((-1)-1)]);       \
2814: /* MUTANT (rep_const) */                    rval = sp[0];                                            \
2814: /* MUTANT (rep_const) */                    rval = sp[1];                                            \
2814: /* MUTANT (rep_const) */                    rval = sp[((-1)+1)];                                            \
2814: /* MUTANT (rep_const) */                    rval = sp[((-1)-1)];                                            \
2817: /* MUTANT (rep_op) */                if (ltmp != JSVAL_STRING && rtmp == JSVAL_STRING) {           \
2817: /* MUTANT (rep_op) */                if (ltmp == JSVAL_STRING || rtmp == JSVAL_STRING) {           \
2817: /* MUTANT (rep_op) */                if (ltmp == JSVAL_STRING && rtmp != JSVAL_STRING) {           \
2817: /* MUTANT (negate) */                if(! (ltmp == JSVAL_STRING && rtmp == JSVAL_STRING)) {           \
2820: /* MUTANT (rep_const) */                    cond = js_CompareStrings(str, str2) OP 1;                 \
2820: /* MUTANT (rep_const) */                    cond = js_CompareStrings(str, str2) OP -1;                 \
2828: /* MUTANT (rep_op) */        sp++;                                                                 \
2829: /* MUTANT (rep_const) */        STORE_OPND(0, BOOLEAN_TO_JSVAL(cond));                               \
2829: /* MUTANT (rep_const) */        STORE_OPND(1, BOOLEAN_TO_JSVAL(cond));                               \
2829: /* MUTANT (rep_const) */        STORE_OPND(((-1)+1), BOOLEAN_TO_JSVAL(cond));                               \
2829: /* MUTANT (rep_const) */        STORE_OPND(((-1)-1), BOOLEAN_TO_JSVAL(cond));                               \
2833: /* MUTANT (rep_op) */            EQUALITY_OP(!=, JS_FALSE);
2834: /* MUTANT (del_stmt) */ /*             break; */ 
2837: /* MUTANT (rep_op) */            EQUALITY_OP(==, JS_TRUE);
2838: /* MUTANT (del_stmt) */ /*             break; */ 
2843: /* MUTANT (rep_const) */        rval = FETCH_OPND(0);                                                \
2843: /* MUTANT (rep_const) */        rval = FETCH_OPND(1);                                                \
2843: /* MUTANT (rep_const) */        rval = FETCH_OPND(((-1)+1));                                                \
2843: /* MUTANT (rep_const) */        rval = FETCH_OPND(((-1)-1));                                                \
2844: /* MUTANT (rep_const) */        lval = FETCH_OPND(0);                                                \
2844: /* MUTANT (rep_const) */        lval = FETCH_OPND(1);                                                \
2844: /* MUTANT (rep_const) */        lval = FETCH_OPND(-1);                                                \
2844: /* MUTANT (rep_const) */        lval = FETCH_OPND(((-2)+1));                                                \
2844: /* MUTANT (rep_const) */        lval = FETCH_OPND(((-2)-1));                                                \
2846: /* MUTANT (rep_op) */        sp++;                                                                 \
2847: /* MUTANT (rep_const) */        STORE_OPND(0, BOOLEAN_TO_JSVAL(cond));                               \
2847: /* MUTANT (rep_const) */        STORE_OPND(1, BOOLEAN_TO_JSVAL(cond));                               \
2847: /* MUTANT (rep_const) */        STORE_OPND(((-1)+1), BOOLEAN_TO_JSVAL(cond));                               \
2847: /* MUTANT (rep_const) */        STORE_OPND(((-1)-1), BOOLEAN_TO_JSVAL(cond));                               \
2851: /* MUTANT (rep_op) */            NEW_EQUALITY_OP(!=);
2852: /* MUTANT (del_stmt) */ /*             break; */ 
2855: /* MUTANT (rep_op) */            NEW_EQUALITY_OP(==);
2856: /* MUTANT (del_stmt) */ /*             break; */ 
2860: /* MUTANT (rep_op) */            NEW_EQUALITY_OP(!=);
2861: /* MUTANT (del_stmt) */ /*             (void) POP(); */ 
2862: /* MUTANT (negate) */            if(! (cond)) {
2863: /* MUTANT (del_stmt) */ /*                 len = GET_JUMP_OFFSET(pc); */ 
2864: /* MUTANT (del_stmt) */ /*                 CHECK_BRANCH(len); */ 
2866: /* MUTANT (del_stmt) */ /*                 PUSH(lval); */ 
2871: /* MUTANT (rep_op) */            NEW_EQUALITY_OP(!=);
2872: /* MUTANT (del_stmt) */ /*             (void) POP(); */ 
2873: /* MUTANT (negate) */            if(! (cond)) {
2874: /* MUTANT (del_stmt) */ /*                 len = GET_JUMPX_OFFSET(pc); */ 
2875: /* MUTANT (del_stmt) */ /*                 CHECK_BRANCH(len); */ 
2877: /* MUTANT (del_stmt) */ /*                 PUSH(lval); */ 
2885: /* MUTANT (rep_op) */            RELATIONAL_OP(<=);
2885: /* MUTANT (rep_op) */            RELATIONAL_OP(>);
2885: /* MUTANT (rep_op) */            RELATIONAL_OP(>=);
2885: /* MUTANT (rep_op) */            RELATIONAL_OP(==);
2885: /* MUTANT (rep_op) */            RELATIONAL_OP(!=);
2886: /* MUTANT (del_stmt) */ /*             break; */ 
2889: /* MUTANT (rep_op) */            RELATIONAL_OP(<);
2889: /* MUTANT (rep_op) */            RELATIONAL_OP(>);
2889: /* MUTANT (rep_op) */            RELATIONAL_OP(>=);
2889: /* MUTANT (rep_op) */            RELATIONAL_OP(==);
2889: /* MUTANT (rep_op) */            RELATIONAL_OP(!=);
2890: /* MUTANT (del_stmt) */ /*             break; */ 
2893: /* MUTANT (rep_op) */            RELATIONAL_OP(<=);
2893: /* MUTANT (rep_op) */            RELATIONAL_OP(<);
2893: /* MUTANT (rep_op) */            RELATIONAL_OP(>=);
2893: /* MUTANT (rep_op) */            RELATIONAL_OP(==);
2893: /* MUTANT (rep_op) */            RELATIONAL_OP(!=);
2894: /* MUTANT (del_stmt) */ /*             break; */ 
2897: /* MUTANT (rep_op) */            RELATIONAL_OP(<=);
2897: /* MUTANT (rep_op) */            RELATIONAL_OP(<);
2897: /* MUTANT (rep_op) */            RELATIONAL_OP(>);
2897: /* MUTANT (rep_op) */            RELATIONAL_OP(==);
2897: /* MUTANT (rep_op) */            RELATIONAL_OP(!=);
2898: /* MUTANT (del_stmt) */ /*             break; */ 
2905: /* MUTANT (del_stmt) */ /*             break; */ 
2909: /* MUTANT (del_stmt) */ /*             break; */ 
2913: /* MUTANT (del_stmt) */ /*             uint32 u; */ 
2915: /* MUTANT (del_stmt) */ /*             FETCH_INT(cx, -1, j); */ 
2915: /* MUTANT (rep_const) */            FETCH_INT(cx, 0, j);
2915: /* MUTANT (rep_const) */            FETCH_INT(cx, 1, j);
2915: /* MUTANT (rep_const) */            FETCH_INT(cx, ((-1)+1), j);
2915: /* MUTANT (rep_const) */            FETCH_INT(cx, ((-1)-1), j);
2916: /* MUTANT (del_stmt) */ /*             FETCH_UINT(cx, -2, u); */ 
2916: /* MUTANT (rep_const) */            FETCH_UINT(cx, 0, u);
2916: /* MUTANT (rep_const) */            FETCH_UINT(cx, 1, u);
2916: /* MUTANT (rep_const) */            FETCH_UINT(cx, -1, u);
2916: /* MUTANT (rep_const) */            FETCH_UINT(cx, ((-2)+1), u);
2916: /* MUTANT (rep_const) */            FETCH_UINT(cx, ((-2)-1), u);
2917: /* MUTANT (del_stmt) */ /*             j &= 31; */ 
2917: /* MUTANT (rep_const) */            j &= 0;
2917: /* MUTANT (rep_const) */            j &= 1;
2917: /* MUTANT (rep_const) */            j &= -1;
2917: /* MUTANT (rep_const) */            j &= ((31)+1);
2917: /* MUTANT (rep_const) */            j &= ((31)-1);
2918: /* MUTANT (del_stmt) */ /*             d = u >> j; */ 
2919: /* MUTANT (del_stmt) */ /*             sp--; */ 
2919: /* MUTANT (rep_op) */            sp++;
2920: /* MUTANT (del_stmt) */ /*             STORE_NUMBER(cx, -1, d); */ 
2920: /* MUTANT (rep_const) */            STORE_NUMBER(cx, 0, d);
2920: /* MUTANT (rep_const) */            STORE_NUMBER(cx, 1, d);
2920: /* MUTANT (rep_const) */            STORE_NUMBER(cx, ((-1)+1), d);
2920: /* MUTANT (rep_const) */            STORE_NUMBER(cx, ((-1)-1), d);
2921: /* MUTANT (del_stmt) */ /*             break; */ 
2929: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
2929: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
2929: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
2929: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
2930: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-2); */ 
2930: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
2930: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
2930: /* MUTANT (rep_const) */            lval = FETCH_OPND(-1);
2930: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)+1));
2930: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)-1));
2932: /* MUTANT (rep_op) */            if (!JSVAL_IS_PRIMITIVE(lval) ||
2933: /* MUTANT (rep_op) */                (obj2 = JSVAL_TO_OBJECT(lval), OBJECT_IS_XML(cx, obj2)) ||
2935: /* MUTANT (del_stmt) */ /*                 JSXMLObjectOps *ops; */ 
2937: /* MUTANT (del_stmt) */ /*                 ops = (JSXMLObjectOps *) obj2->map->ops; */ 
2938: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
2939: /* MUTANT (del_stmt) */ /*                 ok = ops->concatenate(cx, obj2, rval, &rval); */ 
2940: /* MUTANT (negate) */                if(! (!ok))
2942: /* MUTANT (del_stmt) */ /*                 sp--; */ 
2942: /* MUTANT (rep_op) */                sp++;
2943: /* MUTANT (del_stmt) */ /*                 STORE_OPND(-1, rval); */ 
2943: /* MUTANT (rep_const) */                STORE_OPND(0, rval);
2943: /* MUTANT (rep_const) */                STORE_OPND(1, rval);
2943: /* MUTANT (rep_const) */                STORE_OPND(((-1)+1), rval);
2943: /* MUTANT (rep_const) */                STORE_OPND(((-1)-1), rval);
2944: /* MUTANT (del_stmt) */ /*                 break; */ 
2948: /* MUTANT (del_stmt) */ /*                 VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[-2]); */ 
2948: /* MUTANT (rep_const) */                VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[0]);
2948: /* MUTANT (rep_const) */                VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[1]);
2948: /* MUTANT (rep_const) */                VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[-1]);
2948: /* MUTANT (rep_const) */                VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[((-2)+1)]);
2948: /* MUTANT (rep_const) */                VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &sp[((-2)-1)]);
2949: /* MUTANT (del_stmt) */ /*                 lval = sp[-2]; */ 
2949: /* MUTANT (rep_const) */                lval = sp[0];
2949: /* MUTANT (rep_const) */                lval = sp[1];
2949: /* MUTANT (rep_const) */                lval = sp[-1];
2949: /* MUTANT (rep_const) */                lval = sp[((-2)+1)];
2949: /* MUTANT (rep_const) */                lval = sp[((-2)-1)];
2950: /* MUTANT (del_stmt) */ /*                 VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &sp[-1]); */ 
2950: /* MUTANT (rep_const) */                VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &sp[0]);
2950: /* MUTANT (rep_const) */                VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &sp[1]);
2950: /* MUTANT (rep_const) */                VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &sp[((-1)+1)]);
2950: /* MUTANT (rep_const) */                VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &sp[((-1)-1)]);
2951: /* MUTANT (del_stmt) */ /*                 rval = sp[-1]; */ 
2951: /* MUTANT (rep_const) */                rval = sp[0];
2951: /* MUTANT (rep_const) */                rval = sp[1];
2951: /* MUTANT (rep_const) */                rval = sp[((-1)+1)];
2951: /* MUTANT (rep_const) */                rval = sp[((-1)-1)];
2952: /* MUTANT (rep_op) */                if ((cond = JSVAL_IS_STRING(lval)) && JSVAL_IS_STRING(rval)) {
2952: /* MUTANT (negate) */                if(! ((cond = JSVAL_IS_STRING(lval)) || JSVAL_IS_STRING(rval))) {
2953: /* MUTANT (del_stmt) */ /*                     SAVE_SP(fp); */ 
2954: /* MUTANT (negate) */                    if(! (cond)) {
2955: /* MUTANT (del_stmt) */ /*                         str = JSVAL_TO_STRING(lval); */ 
2956: /* MUTANT (del_stmt) */ /*                         ok = (str2 = js_ValueToString(cx, rval)) != NULL; */ 
2956: /* MUTANT (rep_op) */                        ok = (str2 = js_ValueToString(cx, rval)) == NULL;
2958: /* MUTANT (del_stmt) */ /*                         str2 = JSVAL_TO_STRING(rval); */ 
2959: /* MUTANT (del_stmt) */ /*                         ok = (str = js_ValueToString(cx, lval)) != NULL; */ 
2959: /* MUTANT (rep_op) */                        ok = (str = js_ValueToString(cx, lval)) == NULL;
2961: /* MUTANT (negate) */                    if(! (!ok))
2963: /* MUTANT (del_stmt) */ /*                     str = js_ConcatStrings(cx, str, str2); */ 
2964: /* MUTANT (negate) */                    if(! (!str)) {
2965: /* MUTANT (del_stmt) */ /*                         ok = JS_FALSE; */ 
2966: /* MUTANT (del_stmt) */ /*                         goto out; */ 
2968: /* MUTANT (rep_op) */                    sp++;
2969: /* MUTANT (del_stmt) */ /*                     STORE_OPND(-1, STRING_TO_JSVAL(str)); */ 
2969: /* MUTANT (rep_const) */                    STORE_OPND(0, STRING_TO_JSVAL(str));
2969: /* MUTANT (rep_const) */                    STORE_OPND(1, STRING_TO_JSVAL(str));
2969: /* MUTANT (rep_const) */                    STORE_OPND(((-1)+1), STRING_TO_JSVAL(str));
2969: /* MUTANT (rep_const) */                    STORE_OPND(((-1)-1), STRING_TO_JSVAL(str));
2971: /* MUTANT (del_stmt) */ /*                     VALUE_TO_NUMBER(cx, lval, d); */ 
2972: /* MUTANT (del_stmt) */ /*                     VALUE_TO_NUMBER(cx, rval, d2); */ 
2973: /* MUTANT (del_stmt) */ /*                     d += d2; */ 
2973: /* MUTANT (rep_op) */                    d -= d2;
2973: /* MUTANT (rep_op) */                    d *= d2;
2973: /* MUTANT (rep_op) */                    d %= d2;
2974: /* MUTANT (del_stmt) */ /*                     sp--; */ 
2974: /* MUTANT (rep_op) */                    sp++;
2975: /* MUTANT (del_stmt) */ /*                     STORE_NUMBER(cx, -1, d); */ 
2975: /* MUTANT (rep_const) */                    STORE_NUMBER(cx, 0, d);
2975: /* MUTANT (rep_const) */                    STORE_NUMBER(cx, 1, d);
2975: /* MUTANT (rep_const) */                    STORE_NUMBER(cx, ((-1)+1), d);
2975: /* MUTANT (rep_const) */                    STORE_NUMBER(cx, ((-1)-1), d);
2982: /* MUTANT (rep_const) */        FETCH_NUMBER(cx, 0, d2);                                             \
2982: /* MUTANT (rep_const) */        FETCH_NUMBER(cx, 1, d2);                                             \
2982: /* MUTANT (rep_const) */        FETCH_NUMBER(cx, ((-1)+1), d2);                                             \
2982: /* MUTANT (rep_const) */        FETCH_NUMBER(cx, ((-1)-1), d2);                                             \
2983: /* MUTANT (rep_const) */        FETCH_NUMBER(cx, 0, d);                                              \
2983: /* MUTANT (rep_const) */        FETCH_NUMBER(cx, 1, d);                                              \
2983: /* MUTANT (rep_const) */        FETCH_NUMBER(cx, -1, d);                                              \
2983: /* MUTANT (rep_const) */        FETCH_NUMBER(cx, ((-2)+1), d);                                              \
2983: /* MUTANT (rep_const) */        FETCH_NUMBER(cx, ((-2)-1), d);                                              \
2985: /* MUTANT (rep_op) */        sp++;                                                                 \
2986: /* MUTANT (rep_const) */        STORE_NUMBER(cx, 0, d);                                              \
2986: /* MUTANT (rep_const) */        STORE_NUMBER(cx, 1, d);                                              \
2986: /* MUTANT (rep_const) */        STORE_NUMBER(cx, ((-1)+1), d);                                              \
2986: /* MUTANT (rep_const) */        STORE_NUMBER(cx, ((-1)-1), d);                                              \
2991: /* MUTANT (del_stmt) */ /*             break; */ 
2995: /* MUTANT (del_stmt) */ /*             break; */ 
2998: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 0, d2);
2998: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 1, d2);
2998: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-1)+1), d2);
2998: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-1)-1), d2);
2999: /* MUTANT (del_stmt) */ /*             FETCH_NUMBER(cx, -2, d); */ 
2999: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 0, d);
2999: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 1, d);
2999: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, -1, d);
2999: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-2)+1), d);
2999: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-2)-1), d);
3000: /* MUTANT (del_stmt) */ /*             sp--; */ 
3000: /* MUTANT (rep_op) */            sp++;
3001: /* MUTANT (rep_op) */            if (d2 != 0) {
3001: /* MUTANT (rep_const) */            if (d2 == 1) {
3001: /* MUTANT (rep_const) */            if (d2 == -1) {
3001: /* MUTANT (negate) */            if(! (d2 == 0)) {
3004: /* MUTANT (negate) */                if(! (JSDOUBLE_IS_NaN(d2)))
3008: /* MUTANT (rep_op) */                if (d != 0 || JSDOUBLE_IS_NaN(d))
3008: /* MUTANT (rep_op) */                if (d == 0 && JSDOUBLE_IS_NaN(d))
3008: /* MUTANT (rep_const) */                if (d == 1 || JSDOUBLE_IS_NaN(d))
3008: /* MUTANT (rep_const) */                if (d == -1 || JSDOUBLE_IS_NaN(d))
3008: /* MUTANT (negate) */                if(! (d == 0 || JSDOUBLE_IS_NaN(d)))
3010: /* MUTANT (rep_const) */                else if ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> 0)
3010: /* MUTANT (rep_const) */                else if ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> 1)
3010: /* MUTANT (rep_const) */                else if ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> -1)
3010: /* MUTANT (rep_const) */                else if ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> ((31)+1))
3010: /* MUTANT (rep_const) */                else if ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> ((31)-1))
3010: /* MUTANT (negate) */                else if(! ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> 31))
3014: /* MUTANT (del_stmt) */ /*                 STORE_OPND(-1, rval); */ 
3014: /* MUTANT (rep_const) */                STORE_OPND(0, rval);
3014: /* MUTANT (rep_const) */                STORE_OPND(1, rval);
3014: /* MUTANT (rep_const) */                STORE_OPND(((-1)+1), rval);
3014: /* MUTANT (rep_const) */                STORE_OPND(((-1)-1), rval);
3016: /* MUTANT (del_stmt) */ /*                 d /= d2; */ 
3017: /* MUTANT (del_stmt) */ /*                 STORE_NUMBER(cx, -1, d); */ 
3017: /* MUTANT (rep_const) */                STORE_NUMBER(cx, 0, d);
3017: /* MUTANT (rep_const) */                STORE_NUMBER(cx, 1, d);
3017: /* MUTANT (rep_const) */                STORE_NUMBER(cx, ((-1)+1), d);
3017: /* MUTANT (rep_const) */                STORE_NUMBER(cx, ((-1)-1), d);
3022: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 0, d2);
3022: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 1, d2);
3022: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-1)+1), d2);
3022: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-1)-1), d2);
3023: /* MUTANT (del_stmt) */ /*             FETCH_NUMBER(cx, -2, d); */ 
3023: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 0, d);
3023: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 1, d);
3023: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, -1, d);
3023: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-2)+1), d);
3023: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-2)-1), d);
3024: /* MUTANT (del_stmt) */ /*             sp--; */ 
3024: /* MUTANT (rep_op) */            sp++;
3025: /* MUTANT (rep_op) */            if (d2 != 0) {
3025: /* MUTANT (rep_const) */            if (d2 == 1) {
3025: /* MUTANT (rep_const) */            if (d2 == -1) {
3025: /* MUTANT (negate) */            if(! (d2 == 0)) {
3026: /* MUTANT (del_stmt) */ /*                 STORE_OPND(-1, DOUBLE_TO_JSVAL(rt->jsNaN)); */ 
3026: /* MUTANT (rep_const) */                STORE_OPND(0, DOUBLE_TO_JSVAL(rt->jsNaN));
3026: /* MUTANT (rep_const) */                STORE_OPND(1, DOUBLE_TO_JSVAL(rt->jsNaN));
3026: /* MUTANT (rep_const) */                STORE_OPND(((-1)+1), DOUBLE_TO_JSVAL(rt->jsNaN));
3026: /* MUTANT (rep_const) */                STORE_OPND(((-1)-1), DOUBLE_TO_JSVAL(rt->jsNaN));
3030: /* MUTANT (rep_op) */              if (!(JSDOUBLE_IS_FINITE(d) || JSDOUBLE_IS_INFINITE(d2)))
3030: /* MUTANT (negate) */              if(! (!(JSDOUBLE_IS_FINITE(d) && JSDOUBLE_IS_INFINITE(d2))))
3033: /* MUTANT (del_stmt) */ /*                 STORE_NUMBER(cx, -1, d); */ 
3033: /* MUTANT (rep_const) */                STORE_NUMBER(cx, 0, d);
3033: /* MUTANT (rep_const) */                STORE_NUMBER(cx, 1, d);
3033: /* MUTANT (rep_const) */                STORE_NUMBER(cx, ((-1)+1), d);
3033: /* MUTANT (rep_const) */                STORE_NUMBER(cx, ((-1)-1), d);
3039: /* MUTANT (del_stmt) */ /*             PUSH_OPND(BOOLEAN_TO_JSVAL(!cond)); */ 
3040: /* MUTANT (del_stmt) */ /*             break; */ 
3043: /* MUTANT (rep_const) */            FETCH_INT(cx, 0, i);
3043: /* MUTANT (rep_const) */            FETCH_INT(cx, 1, i);
3043: /* MUTANT (rep_const) */            FETCH_INT(cx, ((-1)+1), i);
3043: /* MUTANT (rep_const) */            FETCH_INT(cx, ((-1)-1), i);
3044: /* MUTANT (del_stmt) */ /*             d = (jsdouble) ~i; */ 
3045: /* MUTANT (del_stmt) */ /*             STORE_NUMBER(cx, -1, d); */ 
3045: /* MUTANT (rep_const) */            STORE_NUMBER(cx, 0, d);
3045: /* MUTANT (rep_const) */            STORE_NUMBER(cx, 1, d);
3045: /* MUTANT (rep_const) */            STORE_NUMBER(cx, ((-1)+1), d);
3045: /* MUTANT (rep_const) */            STORE_NUMBER(cx, ((-1)-1), d);
3046: /* MUTANT (del_stmt) */ /*             break; */ 
3049: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 0, d);
3049: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 1, d);
3049: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-1)+1), d);
3049: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-1)-1), d);
3060: /* MUTANT (rep_const) */            STORE_NUMBER(cx, 0, d);
3060: /* MUTANT (rep_const) */            STORE_NUMBER(cx, 1, d);
3060: /* MUTANT (rep_const) */            STORE_NUMBER(cx, ((-1)+1), d);
3060: /* MUTANT (rep_const) */            STORE_NUMBER(cx, ((-1)-1), d);
3061: /* MUTANT (del_stmt) */ /*             break; */ 
3064: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 0, d);
3064: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, 1, d);
3064: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-1)+1), d);
3064: /* MUTANT (rep_const) */            FETCH_NUMBER(cx, ((-1)-1), d);
3065: /* MUTANT (del_stmt) */ /*             STORE_NUMBER(cx, -1, d); */ 
3065: /* MUTANT (rep_const) */            STORE_NUMBER(cx, 0, d);
3065: /* MUTANT (rep_const) */            STORE_NUMBER(cx, 1, d);
3065: /* MUTANT (rep_const) */            STORE_NUMBER(cx, ((-1)+1), d);
3065: /* MUTANT (rep_const) */            STORE_NUMBER(cx, ((-1)-1), d);
3066: /* MUTANT (del_stmt) */ /*             break; */ 
3076: /* MUTANT (del_stmt) */ /*             vp = sp - (2 + argc); */ 
3076: /* MUTANT (rep_op) */            vp = sp - (2 - argc);
3076: /* MUTANT (rep_op) */            vp = sp - (2 * argc);
3076: /* MUTANT (rep_op) */            vp = sp - (2 % argc);
3076: /* MUTANT (rep_const) */            vp = sp - (0 + argc);
3076: /* MUTANT (rep_const) */            vp = sp - (1 + argc);
3076: /* MUTANT (rep_const) */            vp = sp - (-1 + argc);
3076: /* MUTANT (rep_const) */            vp = sp - (((2)+1) + argc);
3076: /* MUTANT (rep_const) */            vp = sp - (((2)-1) + argc);
3077: /* MUTANT (del_stmt) */ /*             JS_ASSERT(vp >= fp->spbase); */ 
3077: /* MUTANT (rep_op) */            JS_ASSERT(vp <= fp->spbase);
3077: /* MUTANT (rep_op) */            JS_ASSERT(vp < fp->spbase);
3077: /* MUTANT (rep_op) */            JS_ASSERT(vp > fp->spbase);
3077: /* MUTANT (rep_op) */            JS_ASSERT(vp == fp->spbase);
3077: /* MUTANT (rep_op) */            JS_ASSERT(vp != fp->spbase);
3079: /* MUTANT (del_stmt) */ /*             fun = NULL; */ 
3080: /* MUTANT (del_stmt) */ /*             obj2 = NULL; */ 
3081: /* MUTANT (del_stmt) */ /*             lval = *vp; */ 
3082: /* MUTANT (rep_op) */            if (!JSVAL_IS_OBJECT(lval) &&
3083: /* MUTANT (rep_op) */                (obj2 = JSVAL_TO_OBJECT(lval)) != NULL ||
3083: /* MUTANT (rep_op) */                (obj2 = JSVAL_TO_OBJECT(lval)) == NULL &&
3085: /* MUTANT (rep_op) */                OBJ_GET_CLASS(cx, obj2) != &js_FunctionClass ||
3085: /* MUTANT (rep_op) */                OBJ_GET_CLASS(cx, obj2) == &js_FunctionClass &&
3088: /* MUTANT (del_stmt) */ /*                 fun = js_ValueToFunction(cx, vp, JSV2F_CONSTRUCT); */ 
3089: /* MUTANT (negate) */                if(! (!fun)) {
3090: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
3091: /* MUTANT (del_stmt) */ /*                     goto out; */ 
3096: /* MUTANT (negate) */            if(! (!obj2)) {
3097: /* MUTANT (del_stmt) */ /*                 proto = parent = NULL; */ 
3098: /* MUTANT (del_stmt) */ /*                 fun = NULL; */ 
3109: /* MUTANT (rep_const) */                                      &vp[0]);
3109: /* MUTANT (rep_const) */                                      &vp[-1]);
3109: /* MUTANT (rep_const) */                                      &vp[((1)+1)]);
3110: /* MUTANT (negate) */                if(! (!ok))
3112: /* MUTANT (del_stmt) */ /*                 rval = vp[1]; */ 
3112: /* MUTANT (rep_const) */                rval = vp[0];
3112: /* MUTANT (rep_const) */                rval = vp[-1];
3112: /* MUTANT (rep_const) */                rval = vp[((1)+1)];
3113: /* MUTANT (del_stmt) */ /*                 proto = JSVAL_IS_OBJECT(rval) ? JSVAL_TO_OBJECT(rval) : NULL; */ 
3114: /* MUTANT (del_stmt) */ /*                 parent = OBJ_GET_PARENT(cx, obj2); */ 
3116: /* MUTANT (rep_op) */                if (OBJ_GET_CLASS(cx, obj2) != &js_FunctionClass) {
3116: /* MUTANT (negate) */                if(! (OBJ_GET_CLASS(cx, obj2) == &js_FunctionClass)) {
3117: /* MUTANT (del_stmt) */ /*                     funclasp = ((JSFunction *)JS_GetPrivate(cx, obj2))->clasp; */ 
3118: /* MUTANT (negate) */                    if(! (funclasp))
3123: /* MUTANT (negate) */            if(! (!obj)) {
3124: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
3125: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3129: /* MUTANT (rep_const) */            vp[0] = OBJECT_TO_JSVAL(obj);
3129: /* MUTANT (rep_const) */            vp[-1] = OBJECT_TO_JSVAL(obj);
3129: /* MUTANT (rep_const) */            vp[((1)+1)] = OBJECT_TO_JSVAL(obj);
3130: /* MUTANT (del_stmt) */ /*             ok = js_Invoke(cx, argc, JSINVOKE_CONSTRUCT); */ 
3131: /* MUTANT (del_stmt) */ /*             RESTORE_SP(fp); */ 
3132: /* MUTANT (del_stmt) */ /*             LOAD_BRANCH_CALLBACK(cx); */ 
3133: /* MUTANT (del_stmt) */ /*             LOAD_INTERRUPT_HANDLER(rt); */ 
3134: /* MUTANT (negate) */            if(! (!ok)) {
3135: /* MUTANT (del_stmt) */ /*                 cx->newborn[GCX_OBJECT] = NULL; */ 
3136: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3141: /* MUTANT (negate) */            if(! (JSVAL_IS_PRIMITIVE(rval))) {
3142: /* MUTANT (rep_op) */                if (fun && !JS_VERSION_IS_ECMA(cx)) {
3142: /* MUTANT (negate) */                if(! (fun || !JS_VERSION_IS_ECMA(cx))) {
3143: /* MUTANT (del_stmt) */ /*                     *vp = OBJECT_TO_JSVAL(obj); */ 
3144: /* MUTANT (del_stmt) */ /*                     break; */ 
3150: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
3151: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3154: /* MUTANT (del_stmt) */ /*             JS_RUNTIME_METER(rt, constructs); */ 
3155: /* MUTANT (del_stmt) */ /*             break; */ 
3159: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
3161: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
3162: /* MUTANT (del_stmt) */ /*             ok = js_FindProperty(cx, id, &obj, &obj2, &prop); */ 
3163: /* MUTANT (negate) */            if(! (!ok))
3167: /* MUTANT (del_stmt) */ /*             rval = JSVAL_TRUE; */ 
3168: /* MUTANT (negate) */            if(! (prop)) {
3169: /* MUTANT (del_stmt) */ /*                 OBJ_DROP_PROPERTY(cx, obj2, prop); */ 
3170: /* MUTANT (del_stmt) */ /*                 ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval); */ 
3171: /* MUTANT (negate) */                if(! (!ok))
3175: /* MUTANT (del_stmt) */ /*             break; */ 
3179: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
3180: /* MUTANT (del_stmt) */ /*             PROPERTY_OP(-1, ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval)); */ 
3180: /* MUTANT (rep_const) */            PROPERTY_OP(0, ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval));
3180: /* MUTANT (rep_const) */            PROPERTY_OP(1, ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval));
3180: /* MUTANT (rep_const) */            PROPERTY_OP(((-1)+1), ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval));
3180: /* MUTANT (rep_const) */            PROPERTY_OP(((-1)-1), ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval));
3181: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
3181: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
3181: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
3181: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
3181: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
3182: /* MUTANT (del_stmt) */ /*             break; */ 
3185: /* MUTANT (rep_const) */            ELEMENT_OP(0, ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval));
3185: /* MUTANT (rep_const) */            ELEMENT_OP(1, ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval));
3185: /* MUTANT (rep_const) */            ELEMENT_OP(((-1)+1), ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval));
3185: /* MUTANT (rep_const) */            ELEMENT_OP(((-1)-1), ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval));
3186: /* MUTANT (del_stmt) */ /*             sp--; */ 
3186: /* MUTANT (rep_op) */            sp++;
3187: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
3187: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
3187: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
3187: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
3187: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
3188: /* MUTANT (del_stmt) */ /*             break; */ 
3191: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
3191: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
3191: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
3191: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
3192: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
3193: /* MUTANT (del_stmt) */ /*             type = JS_TypeOfValue(cx, rval); */ 
3194: /* MUTANT (del_stmt) */ /*             atom = rt->atomState.typeAtoms[type]; */ 
3195: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, ATOM_KEY(atom)); */ 
3195: /* MUTANT (rep_const) */            STORE_OPND(0, ATOM_KEY(atom));
3195: /* MUTANT (rep_const) */            STORE_OPND(1, ATOM_KEY(atom));
3195: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), ATOM_KEY(atom));
3195: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), ATOM_KEY(atom));
3196: /* MUTANT (del_stmt) */ /*             break; */ 
3200: /* MUTANT (del_stmt) */ /*             PUSH_OPND(JSVAL_VOID); */ 
3201: /* MUTANT (del_stmt) */ /*             break; */ 
3208: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
3210: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
3211: /* MUTANT (del_stmt) */ /*             ok = js_FindProperty(cx, id, &obj, &obj2, &prop); */ 
3212: /* MUTANT (negate) */            if(! (!ok))
3214: /* MUTANT (negate) */            if(! (!prop))
3217: /* MUTANT (del_stmt) */ /*             OBJ_DROP_PROPERTY(cx, obj2, prop); */ 
3218: /* MUTANT (del_stmt) */ /*             lval = OBJECT_TO_JSVAL(obj); */ 
3219: /* MUTANT (del_stmt) */ /*             i = 0; */ 
3219: /* MUTANT (rep_const) */            i = 1;
3219: /* MUTANT (rep_const) */            i = -1;
3220: /* MUTANT (del_stmt) */ /*             goto do_incop; */ 
3227: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
3228: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-1); */ 
3228: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
3228: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
3228: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)+1));
3228: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)-1));
3229: /* MUTANT (del_stmt) */ /*             i = -1; */ 
3229: /* MUTANT (rep_const) */            i = 0;
3229: /* MUTANT (rep_const) */            i = 1;
3229: /* MUTANT (rep_const) */            i = ((-1)+1);
3229: /* MUTANT (rep_const) */            i = ((-1)-1);
3230: /* MUTANT (del_stmt) */ /*             goto do_incop; */ 
3236: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(0, id);
3236: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(1, id);
3236: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(((-1)+1), id);
3236: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(((-1)-1), id);
3237: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-2); */ 
3237: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
3237: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
3237: /* MUTANT (rep_const) */            lval = FETCH_OPND(-1);
3237: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)+1));
3237: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)-1));
3238: /* MUTANT (del_stmt) */ /*             i = -2; */ 
3238: /* MUTANT (rep_const) */            i = 0;
3238: /* MUTANT (rep_const) */            i = 1;
3238: /* MUTANT (rep_const) */            i = -1;
3238: /* MUTANT (rep_const) */            i = ((-2)+1);
3238: /* MUTANT (rep_const) */            i = ((-2)-1);
3242: /* MUTANT (rep_op) */            if (i <= 0)
3242: /* MUTANT (rep_op) */            if (i > 0)
3242: /* MUTANT (rep_op) */            if (i >= 0)
3242: /* MUTANT (rep_op) */            if (i == 0)
3242: /* MUTANT (rep_op) */            if (i != 0)
3242: /* MUTANT (rep_const) */            if (i < 1)
3242: /* MUTANT (rep_const) */            if (i < -1)
3242: /* MUTANT (negate) */            if(! (i < 0))
3244: /* MUTANT (del_stmt) */ /*             CHECK_ELEMENT_ID(obj, id); */ 
3247: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
3248: /* MUTANT (del_stmt) */ /*             CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)); */ 
3249: /* MUTANT (negate) */            if(! (!ok))
3253: /* MUTANT (rep_op) */            if (JSVAL_IS_INT(rval) ||
3254: /* MUTANT (rep_op) */                rval == INT_TO_JSVAL(JSVAL_INT_MIN) &&
3254: /* MUTANT (rep_op) */                rval != INT_TO_JSVAL(JSVAL_INT_MIN) ||
3255: /* MUTANT (rep_op) */                rval == INT_TO_JSVAL(JSVAL_INT_MAX)) {
3256: /* MUTANT (negate) */                if(! (cs->format & JOF_POST)) {
3257: /* MUTANT (del_stmt) */ /*                     rtmp = rval; */ 
3258: /* MUTANT (del_stmt) */ /*                     (cs->format & JOF_INC) ? (rval += 2) : (rval -= 2); */ 
3258: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval -= 2) : (rval -= 2);
3258: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval *= 2) : (rval -= 2);
3258: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval %= 2) : (rval -= 2);
3258: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval += 2);
3258: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval *= 2);
3258: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval %= 2);
3258: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 0) : (rval -= 2);
3258: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 1) : (rval -= 2);
3258: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += -1) : (rval -= 2);
3258: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += ((2)+1)) : (rval -= 2);
3258: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += ((2)-1)) : (rval -= 2);
3258: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval -= 0);
3258: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval -= 1);
3258: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval -= -1);
3258: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval -= ((2)+1));
3258: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval -= ((2)-1));
3260: /* MUTANT (del_stmt) */ /*                     (cs->format & JOF_INC) ? (rval += 2) : (rval -= 2); */ 
3260: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval -= 2) : (rval -= 2);
3260: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval *= 2) : (rval -= 2);
3260: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval %= 2) : (rval -= 2);
3260: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval += 2);
3260: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval *= 2);
3260: /* MUTANT (rep_op) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval %= 2);
3260: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 0) : (rval -= 2);
3260: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 1) : (rval -= 2);
3260: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += -1) : (rval -= 2);
3260: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += ((2)+1)) : (rval -= 2);
3260: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += ((2)-1)) : (rval -= 2);
3260: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval -= 0);
3260: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval -= 1);
3260: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval -= -1);
3260: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval -= ((2)+1));
3260: /* MUTANT (rep_const) */                    (cs->format & JOF_INC) ? (rval += 2) : (rval -= ((2)-1));
3261: /* MUTANT (del_stmt) */ /*                     rtmp = rval; */ 
3275: /* MUTANT (negate) */        if(! (cs->format & JOF_POST)) {                                          \
3277: /* MUTANT (negate) */            if(! (!JSVAL_IS_NUMBER(rtmp))) {                                     \
3279: /* MUTANT (negate) */                if(! (!ok))                                                      \
3283: /* MUTANT (rep_op) */            (cs->format & JOF_INC) ? d-- : d--;                               \
3283: /* MUTANT (rep_op) */            (cs->format & JOF_INC) ? d++ : d++;                               \
3286: /* MUTANT (rep_op) */            (cs->format & JOF_INC) ? --d : --d;                               \
3286: /* MUTANT (rep_op) */            (cs->format & JOF_INC) ? ++d : ++d;                               \
3290: /* MUTANT (negate) */        if(! (!ok))                                                              \
3294: /* MUTANT (negate) */                if(! (cs->format & JOF_POST)) {
3300: /* MUTANT (del_stmt) */ /*                     vp = sp; */ 
3301: /* MUTANT (del_stmt) */ /*                     PUSH(JSVAL_VOID); */ 
3302: /* MUTANT (del_stmt) */ /*                     SAVE_SP(fp); */ 
3303: /* MUTANT (del_stmt) */ /*                     --i; */ 
3303: /* MUTANT (rep_op) */                    ++i;
3313: /* MUTANT (del_stmt) */ /*             CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)); */ 
3314: /* MUTANT (del_stmt) */ /*             fp->flags &= ~JSFRAME_ASSIGNING; */ 
3315: /* MUTANT (negate) */            if(! (!ok))
3317: /* MUTANT (del_stmt) */ /*             sp += i; */ 
3317: /* MUTANT (rep_op) */            sp -= i;
3317: /* MUTANT (rep_op) */            sp *= i;
3317: /* MUTANT (rep_op) */            sp %= i;
3318: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rtmp); */ 
3319: /* MUTANT (del_stmt) */ /*             break; */ 
3328: /* MUTANT (rep_op) */    JS_ASSERT(slot <= fp->fun->COUNT);                                         \
3328: /* MUTANT (rep_op) */    JS_ASSERT(slot > fp->fun->COUNT);                                         \
3328: /* MUTANT (rep_op) */    JS_ASSERT(slot >= fp->fun->COUNT);                                         \
3328: /* MUTANT (rep_op) */    JS_ASSERT(slot == fp->fun->COUNT);                                         \
3328: /* MUTANT (rep_op) */    JS_ASSERT(slot != fp->fun->COUNT);                                         \
3329: /* MUTANT (rep_op) */    vp = fp->BASE - slot;                                                     \
3329: /* MUTANT (rep_op) */    vp = fp->BASE * slot;                                                     \
3329: /* MUTANT (rep_op) */    vp = fp->BASE % slot;                                                     \
3331: /* MUTANT (rep_op) */    if (JSVAL_IS_INT(rval) ||                                                 \
3332: /* MUTANT (rep_op) */        rval == INT_TO_JSVAL(JSVAL_INT_##MINMAX)) {                           \
3334: /* MUTANT (rep_const) */        rval OP 0;                                                            \
3334: /* MUTANT (rep_const) */        rval OP 1;                                                            \
3334: /* MUTANT (rep_const) */        rval OP -1;                                                            \
3334: /* MUTANT (rep_const) */        rval OP ((2)+1);                                                            \
3334: /* MUTANT (rep_const) */        rval OP ((2)-1);                                                            \
3342: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rval, -=, MAX);
3342: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rval, *=, MAX);
3342: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rval, %=, MAX);
3344: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rval, +=, MIN);
3344: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rval, *=, MIN);
3344: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rval, %=, MIN);
3346: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rtmp, -=, MAX);
3346: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rtmp, *=, MAX);
3346: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rtmp, %=, MAX);
3348: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rtmp, +=, MIN);
3348: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rtmp, *=, MIN);
3348: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rtmp, %=, MIN);
3351: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rval, -=, MAX);
3351: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rval, *=, MAX);
3351: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rval, %=, MAX);
3353: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rval, +=, MIN);
3353: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rval, *=, MIN);
3353: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rval, %=, MIN);
3355: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rtmp, -=, MAX);
3355: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rtmp, *=, MAX);
3355: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rtmp, %=, MAX);
3357: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rtmp, +=, MIN);
3357: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rtmp, *=, MIN);
3357: /* MUTANT (rep_op) */            FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rtmp, %=, MIN);
3363: /* MUTANT (del_stmt) */ /*             *vp = rval; */ 
3364: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rtmp); */ 
3365: /* MUTANT (del_stmt) */ /*             break; */ 
3369: /* MUTANT (rep_op) */    JS_ASSERT(slot <= fp->nvars);                                              \
3369: /* MUTANT (rep_op) */    JS_ASSERT(slot > fp->nvars);                                              \
3369: /* MUTANT (rep_op) */    JS_ASSERT(slot >= fp->nvars);                                              \
3369: /* MUTANT (rep_op) */    JS_ASSERT(slot == fp->nvars);                                              \
3369: /* MUTANT (rep_op) */    JS_ASSERT(slot != fp->nvars);                                              \
3371: /* MUTANT (negate) */    if(! (JSVAL_IS_NULL(lval))) {                                                \
3378: /* MUTANT (rep_op) */    if (JSVAL_IS_INT(rval) ||                                                 \
3379: /* MUTANT (rep_op) */        rval == INT_TO_JSVAL(JSVAL_INT_##MINMAX)) {                           \
3381: /* MUTANT (rep_const) */        rval OP 0;                                                            \
3381: /* MUTANT (rep_const) */        rval OP 1;                                                            \
3381: /* MUTANT (rep_const) */        rval OP -1;                                                            \
3381: /* MUTANT (rep_const) */        rval OP ((2)+1);                                                            \
3381: /* MUTANT (rep_const) */        rval OP ((2)-1);                                                            \
3389: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_INCNAME, rval, -=, MAX);
3389: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_INCNAME, rval, *=, MAX);
3389: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_INCNAME, rval, %=, MAX);
3391: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_DECNAME, rval, +=, MIN);
3391: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_DECNAME, rval, *=, MIN);
3391: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_DECNAME, rval, %=, MIN);
3393: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_NAMEINC, rtmp, -=, MAX);
3393: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_NAMEINC, rtmp, *=, MAX);
3393: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_NAMEINC, rtmp, %=, MAX);
3395: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_NAMEDEC, rtmp, +=, MIN);
3395: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_NAMEDEC, rtmp, *=, MIN);
3395: /* MUTANT (rep_op) */            FAST_GLOBAL_INCREMENT_OP(JSOP_NAMEDEC, rtmp, %=, MIN);
3400: /* MUTANT (rep_op) */            vp = sp--;
3401: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
3402: /* MUTANT (del_stmt) */ /*             NONINT_INCREMENT_OP_MIDDLE(); */ 
3403: /* MUTANT (del_stmt) */ /*             OBJ_SET_SLOT(cx, obj, slot, rval); */ 
3404: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rtmp); */ 
3404: /* MUTANT (rep_const) */            STORE_OPND(0, rtmp);
3404: /* MUTANT (rep_const) */            STORE_OPND(1, rtmp);
3404: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rtmp);
3404: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rtmp);
3405: /* MUTANT (del_stmt) */ /*             break; */ 
3410: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
3411: /* MUTANT (del_stmt) */ /*             PROPERTY_OP(-1, CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval))); */ 
3411: /* MUTANT (rep_const) */            PROPERTY_OP(0, CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
3411: /* MUTANT (rep_const) */            PROPERTY_OP(1, CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
3411: /* MUTANT (rep_const) */            PROPERTY_OP(((-1)+1), CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
3411: /* MUTANT (rep_const) */            PROPERTY_OP(((-1)-1), CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
3412: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
3412: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
3412: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
3412: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
3412: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
3413: /* MUTANT (del_stmt) */ /*             break; */ 
3417: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
3417: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
3417: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
3417: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
3420: /* MUTANT (del_stmt) */ /*             atom = GET_ATOM(cx, script, pc); */ 
3421: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
3422: /* MUTANT (del_stmt) */ /*             PROPERTY_OP(-2, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval))); */ 
3422: /* MUTANT (rep_const) */            PROPERTY_OP(0, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
3422: /* MUTANT (rep_const) */            PROPERTY_OP(1, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
3422: /* MUTANT (rep_const) */            PROPERTY_OP(-1, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
3422: /* MUTANT (rep_const) */            PROPERTY_OP(((-2)+1), CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
3422: /* MUTANT (rep_const) */            PROPERTY_OP(((-2)-1), CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
3423: /* MUTANT (del_stmt) */ /*             sp--; */ 
3423: /* MUTANT (rep_op) */            sp++;
3424: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
3424: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
3424: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
3424: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
3424: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
3425: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3426: /* MUTANT (del_stmt) */ /*             break; */ 
3429: /* MUTANT (rep_const) */            ELEMENT_OP(0, CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
3429: /* MUTANT (rep_const) */            ELEMENT_OP(1, CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
3429: /* MUTANT (rep_const) */            ELEMENT_OP(((-1)+1), CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
3429: /* MUTANT (rep_const) */            ELEMENT_OP(((-1)-1), CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
3430: /* MUTANT (del_stmt) */ /*             sp--; */ 
3430: /* MUTANT (rep_op) */            sp++;
3431: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
3431: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
3431: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
3431: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
3431: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
3432: /* MUTANT (del_stmt) */ /*             break; */ 
3435: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
3435: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
3435: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
3435: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
3436: /* MUTANT (del_stmt) */ /*             ELEMENT_OP(-2, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval))); */ 
3436: /* MUTANT (rep_const) */            ELEMENT_OP(0, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
3436: /* MUTANT (rep_const) */            ELEMENT_OP(1, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
3436: /* MUTANT (rep_const) */            ELEMENT_OP(-1, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
3436: /* MUTANT (rep_const) */            ELEMENT_OP(((-2)+1), CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
3436: /* MUTANT (rep_const) */            ELEMENT_OP(((-2)-1), CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
3437: /* MUTANT (del_stmt) */ /*             sp -= 2; */ 
3437: /* MUTANT (rep_op) */            sp += 2;
3437: /* MUTANT (rep_op) */            sp *= 2;
3437: /* MUTANT (rep_op) */            sp %= 2;
3437: /* MUTANT (rep_const) */            sp -= 0;
3437: /* MUTANT (rep_const) */            sp -= 1;
3437: /* MUTANT (rep_const) */            sp -= -1;
3437: /* MUTANT (rep_const) */            sp -= ((2)+1);
3437: /* MUTANT (rep_const) */            sp -= ((2)-1);
3438: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
3438: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
3438: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
3438: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
3438: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
3439: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3440: /* MUTANT (del_stmt) */ /*             break; */ 
3444: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(0, id);
3444: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(1, id);
3444: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(((-1)+1), id);
3444: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(((-1)-1), id);
3445: /* MUTANT (del_stmt) */ /*             FETCH_OBJECT(cx, -2, lval, obj); */ 
3445: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 0, lval, obj);
3445: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 1, lval, obj);
3445: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, -1, lval, obj);
3445: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-2)+1), lval, obj);
3445: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-2)-1), lval, obj);
3446: /* MUTANT (del_stmt) */ /*             CHECK_ELEMENT_ID(obj, id); */ 
3447: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-3); */ 
3447: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
3447: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
3447: /* MUTANT (rep_const) */            rval = FETCH_OPND(-1);
3447: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-3)+1));
3447: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-3)-1));
3448: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
3449: /* MUTANT (del_stmt) */ /*             ok = OBJ_SET_PROPERTY(cx, obj, id, &rval); */ 
3450: /* MUTANT (negate) */            if(! (!ok))
3452: /* MUTANT (del_stmt) */ /*             sp -= 3; */ 
3452: /* MUTANT (rep_op) */            sp += 3;
3452: /* MUTANT (rep_op) */            sp *= 3;
3452: /* MUTANT (rep_op) */            sp %= 3;
3452: /* MUTANT (rep_const) */            sp -= 0;
3452: /* MUTANT (rep_const) */            sp -= 1;
3452: /* MUTANT (rep_const) */            sp -= -1;
3452: /* MUTANT (rep_const) */            sp -= ((3)+1);
3452: /* MUTANT (rep_const) */            sp -= ((3)-1);
3453: /* MUTANT (del_stmt) */ /*             break; */ 
3463: #define LAZY_ARGS_THISP ((JSObject *) 0) /* MUTANT (rep_const) */
3463: #define LAZY_ARGS_THISP ((JSObject *) -1) /* MUTANT (rep_const) */
3463: #define LAZY_ARGS_THISP ((JSObject *) ((1)+1)) /* MUTANT (rep_const) */
3466: /* MUTANT (rep_op) */            if (obj != LAZY_ARGS_THISP && !(obj = js_GetArgsObject(cx, fp))) {
3466: /* MUTANT (rep_op) */            if (obj == LAZY_ARGS_THISP || !(obj = js_GetArgsObject(cx, fp))) {
3466: /* MUTANT (negate) */            if(! (obj == LAZY_ARGS_THISP && !(obj = js_GetArgsObject(cx, fp)))) {
3467: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
3468: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3471: /* MUTANT (del_stmt) */ /*             break; */ 
3476: /* MUTANT (del_stmt) */ /*             vp = sp - (argc + 2); */ 
3476: /* MUTANT (rep_op) */            vp = sp - (argc - 2);
3476: /* MUTANT (rep_op) */            vp = sp - (argc * 2);
3476: /* MUTANT (rep_op) */            vp = sp - (argc % 2);
3476: /* MUTANT (rep_const) */            vp = sp - (argc + 0);
3476: /* MUTANT (rep_const) */            vp = sp - (argc + 1);
3476: /* MUTANT (rep_const) */            vp = sp - (argc + -1);
3476: /* MUTANT (rep_const) */            vp = sp - (argc + ((2)+1));
3476: /* MUTANT (rep_const) */            vp = sp - (argc + ((2)-1));
3477: /* MUTANT (del_stmt) */ /*             lval = *vp; */ 
3478: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
3480: /* MUTANT (rep_op) */            if (JSVAL_IS_FUNCTION(cx, lval) ||
3483: /* MUTANT (rep_op) */                 fun->interpreted ||
3484: /* MUTANT (rep_op) */                 !(fun->flags & (JSFUN_HEAVYWEIGHT & JSFUN_BOUND_METHOD)) &&
3484: /* MUTANT (rep_op) */                 !(fun->flags & (JSFUN_HEAVYWEIGHT | JSFUN_BOUND_METHOD)) ||
3485: /* MUTANT (rep_op) */                 argc <= (uintN)(fun->nargs + fun->extra)))
3485: /* MUTANT (rep_op) */                 argc < (uintN)(fun->nargs + fun->extra)))
3485: /* MUTANT (rep_op) */                 argc > (uintN)(fun->nargs + fun->extra)))
3485: /* MUTANT (rep_op) */                 argc == (uintN)(fun->nargs + fun->extra)))
3485: /* MUTANT (rep_op) */                 argc != (uintN)(fun->nargs + fun->extra)))
3485: /* MUTANT (rep_op) */                 argc >= (uintN)(fun->nargs - fun->extra)))
3485: /* MUTANT (rep_op) */                 argc >= (uintN)(fun->nargs * fun->extra)))
3485: /* MUTANT (rep_op) */                 argc >= (uintN)(fun->nargs % fun->extra)))
3488: /* MUTANT (del_stmt) */ /*                 uintN nframeslots, nvars; */ 
3489: /* MUTANT (del_stmt) */ /*                 void *newmark; */ 
3490: /* MUTANT (del_stmt) */ /*                 JSInlineFrame *newifp; */ 
3491: /* MUTANT (del_stmt) */ /*                 JSInterpreterHook hook; */ 
3494: /* MUTANT (rep_op) */                if (inlineCallCount != MAX_INLINE_CALL_COUNT) {
3494: /* MUTANT (negate) */                if(! (inlineCallCount == MAX_INLINE_CALL_COUNT)) {
3497: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
3498: /* MUTANT (del_stmt) */ /*                     goto out; */ 
3504: /* MUTANT (negate) */                if(! (!ok))
3509: /* MUTANT (rep_op) */                nframeslots = (sizeof(JSInlineFrame) - sizeof(jsval) - 1)
3509: /* MUTANT (rep_op) */                nframeslots = (sizeof(JSInlineFrame) * sizeof(jsval) - 1)
3509: /* MUTANT (rep_op) */                nframeslots = (sizeof(JSInlineFrame) % sizeof(jsval) - 1)
3509: /* MUTANT (rep_const) */                nframeslots = (sizeof(JSInlineFrame) + sizeof(jsval) - 0)
3509: /* MUTANT (rep_const) */                nframeslots = (sizeof(JSInlineFrame) + sizeof(jsval) - -1)
3509: /* MUTANT (rep_const) */                nframeslots = (sizeof(JSInlineFrame) + sizeof(jsval) - ((1)+1))
3511: /* MUTANT (del_stmt) */ /*                 nvars = fun->nvars; */ 
3512: /* MUTANT (del_stmt) */ /*                 script = fun->u.script; */ 
3513: /* MUTANT (del_stmt) */ /*                 depth = (jsint) script->depth; */ 
3516: /* MUTANT (rep_op) */                newsp = js_AllocRawStack(cx, nframeslots - nvars + 2 * depth,
3516: /* MUTANT (rep_op) */                newsp = js_AllocRawStack(cx, nframeslots * nvars + 2 * depth,
3516: /* MUTANT (rep_op) */                newsp = js_AllocRawStack(cx, nframeslots % nvars + 2 * depth,
3516: /* MUTANT (rep_op) */                newsp = js_AllocRawStack(cx, nframeslots + nvars - 2 * depth,
3516: /* MUTANT (rep_op) */                newsp = js_AllocRawStack(cx, nframeslots + nvars * 2 * depth,
3516: /* MUTANT (rep_op) */                newsp = js_AllocRawStack(cx, nframeslots + nvars % 2 * depth,
3516: /* MUTANT (rep_const) */                newsp = js_AllocRawStack(cx, nframeslots + nvars + 0 * depth,
3516: /* MUTANT (rep_const) */                newsp = js_AllocRawStack(cx, nframeslots + nvars + 1 * depth,
3516: /* MUTANT (rep_const) */                newsp = js_AllocRawStack(cx, nframeslots + nvars + -1 * depth,
3516: /* MUTANT (rep_const) */                newsp = js_AllocRawStack(cx, nframeslots + nvars + ((2)+1) * depth,
3516: /* MUTANT (rep_const) */                newsp = js_AllocRawStack(cx, nframeslots + nvars + ((2)-1) * depth,
3518: /* MUTANT (negate) */                if(! (!newsp)) {
3519: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
3520: /* MUTANT (del_stmt) */ /*                     goto bad_inline_call; */ 
3522: /* MUTANT (negate) */                newif(!p = (JSInlineFrame *)) newsp;
3523: /* MUTANT (del_stmt) */ /*                 newsp += nframeslots; */ 
3523: /* MUTANT (rep_op) */                newsp -= nframeslots;
3523: /* MUTANT (rep_op) */                newsp *= nframeslots;
3523: /* MUTANT (rep_op) */                newsp %= nframeslots;
3526: /* MUTANT (del_stmt) */ /*                 memset(newifp, 0, sizeof(JSInlineFrame)); */ 
3526: /* MUTANT (rep_const) */                memset(newifp, 1, sizeof(JSInlineFrame));
3526: /* MUTANT (rep_const) */                memset(newifp, -1, sizeof(JSInlineFrame));
3526: /* MUTANT (negate) */                memset(newif(!p, 0, sizeof(JSInlineFrame)));
3527: /* MUTANT (del_stmt) */ /*                 newifp->frame.script = script; */ 
3528: /* MUTANT (del_stmt) */ /*                 newifp->frame.fun = fun; */ 
3529: /* MUTANT (del_stmt) */ /*                 newifp->frame.argc = argc; */ 
3530: /* MUTANT (del_stmt) */ /*                 newifp->frame.argv = vp + 2; */ 
3530: /* MUTANT (rep_op) */                newifp->frame.argv = vp - 2;
3530: /* MUTANT (rep_op) */                newifp->frame.argv = vp * 2;
3530: /* MUTANT (rep_op) */                newifp->frame.argv = vp % 2;
3530: /* MUTANT (rep_const) */                newifp->frame.argv = vp + 0;
3530: /* MUTANT (rep_const) */                newifp->frame.argv = vp + 1;
3530: /* MUTANT (rep_const) */                newifp->frame.argv = vp + -1;
3530: /* MUTANT (rep_const) */                newifp->frame.argv = vp + ((2)+1);
3530: /* MUTANT (rep_const) */                newifp->frame.argv = vp + ((2)-1);
3531: /* MUTANT (del_stmt) */ /*                 newifp->frame.rval = JSVAL_VOID; */ 
3532: /* MUTANT (del_stmt) */ /*                 newifp->frame.nvars = nvars; */ 
3533: /* MUTANT (del_stmt) */ /*                 newifp->frame.vars = newsp; */ 
3534: /* MUTANT (del_stmt) */ /*                 newifp->frame.down = fp; */ 
3535: /* MUTANT (del_stmt) */ /*                 newifp->frame.scopeChain = OBJ_GET_PARENT(cx, obj); */ 
3535: /* MUTANT (negate) */                newif(!p->frame.scopeChain = OBJ_GET_PARENT(cx, obj));
3536: /* MUTANT (del_stmt) */ /*                 newifp->mark = newmark; */ 
3539: /* MUTANT (del_stmt) */ /*                 ok = js_ComputeThis(cx, JSVAL_TO_OBJECT(vp[1]), &newifp->frame); */ 
3539: /* MUTANT (rep_const) */                ok = js_ComputeThis(cx, JSVAL_TO_OBJECT(vp[0]), &newifp->frame);
3539: /* MUTANT (rep_const) */                ok = js_ComputeThis(cx, JSVAL_TO_OBJECT(vp[-1]), &newifp->frame);
3539: /* MUTANT (rep_const) */                ok = js_ComputeThis(cx, JSVAL_TO_OBJECT(vp[((1)+1)]), &newifp->frame);
3540: /* MUTANT (negate) */                if(! (!ok)) {
3541: /* MUTANT (del_stmt) */ /*                     js_FreeRawStack(cx, newmark); */ 
3542: /* MUTANT (del_stmt) */ /*                     goto bad_inline_call; */ 
3545: /* MUTANT (rep_op) */                LogCall(cx, *vp, argc, vp - 2);
3545: /* MUTANT (rep_op) */                LogCall(cx, *vp, argc, vp * 2);
3545: /* MUTANT (rep_op) */                LogCall(cx, *vp, argc, vp % 2);
3545: /* MUTANT (rep_const) */                LogCall(cx, *vp, argc, vp + 0);
3545: /* MUTANT (rep_const) */                LogCall(cx, *vp, argc, vp + 1);
3545: /* MUTANT (rep_const) */                LogCall(cx, *vp, argc, vp + -1);
3545: /* MUTANT (rep_const) */                LogCall(cx, *vp, argc, vp + ((2)+1));
3545: /* MUTANT (rep_const) */                LogCall(cx, *vp, argc, vp + ((2)-1));
3550: /* MUTANT (rep_op) */                while (nvars++)
3550: /* MUTANT (negate) */                while(! (nvars--))
3552: /* MUTANT (del_stmt) */ /*                 sp += depth; */ 
3552: /* MUTANT (rep_op) */                sp -= depth;
3552: /* MUTANT (rep_op) */                sp *= depth;
3552: /* MUTANT (rep_op) */                sp %= depth;
3553: /* MUTANT (del_stmt) */ /*                 newifp->frame.spbase = sp; */ 
3554: /* MUTANT (del_stmt) */ /*                 SAVE_SP(&newifp->frame); */ 
3557: /* MUTANT (del_stmt) */ /*                 hook = cx->runtime->callHook; */ 
3558: /* MUTANT (negate) */                if(! (hook)) {
3559: /* MUTANT (rep_const) */                    newifp->hookData = hook(cx, &newifp->frame, JS_TRUE, 1,
3559: /* MUTANT (rep_const) */                    newifp->hookData = hook(cx, &newifp->frame, JS_TRUE, -1,
3561: /* MUTANT (del_stmt) */ /*                     LOAD_INTERRUPT_HANDLER(rt); */ 
3566: /* MUTANT (rep_op) */                if (cx->version != currentVersion) {
3566: /* MUTANT (negate) */                if(! (cx->version == currentVersion)) {
3567: /* MUTANT (del_stmt) */ /*                     currentVersion = script->version; */ 
3568: /* MUTANT (rep_op) */                    if (currentVersion == cx->version)
3568: /* MUTANT (negate) */                    if(! (currentVersion != cx->version))
3574: /* MUTANT (del_stmt) */ /*                 pc = script->code; */ 
3575: /* MUTANT (del_stmt) */ /*                 endpc = pc + script->length; */ 
3575: /* MUTANT (rep_op) */                endpc = pc - script->length;
3575: /* MUTANT (rep_op) */                endpc = pc * script->length;
3575: /* MUTANT (rep_op) */                endpc = pc % script->length;
3576: /* MUTANT (del_stmt) */ /*                 inlineCallCount++; */ 
3576: /* MUTANT (rep_op) */                inlineCallCount--;
3577: /* MUTANT (del_stmt) */ /*                 JS_RUNTIME_METER(rt, inlineCalls); */ 
3578: /* MUTANT (del_stmt) */ /*                 continue; */ 
3582: /* MUTANT (del_stmt) */ /*                 depth = (jsint) script->depth; */ 
3583: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3586: /* MUTANT (rep_const) */            ok = js_Invoke(cx, argc, 1);
3586: /* MUTANT (rep_const) */            ok = js_Invoke(cx, argc, -1);
3587: /* MUTANT (del_stmt) */ /*             RESTORE_SP(fp); */ 
3588: /* MUTANT (del_stmt) */ /*             LOAD_BRANCH_CALLBACK(cx); */ 
3589: /* MUTANT (del_stmt) */ /*             LOAD_INTERRUPT_HANDLER(rt); */ 
3590: /* MUTANT (negate) */            if(! (!ok))
3592: /* MUTANT (del_stmt) */ /*             JS_RUNTIME_METER(rt, nonInlineCalls); */ 
3594: /* MUTANT (negate) */            if(! (cx->rval2set)) {
3609: /* MUTANT (del_stmt) */ /*                 PUSH_OPND(cx->rval2); */ 
3610: /* MUTANT (del_stmt) */ /*                 cx->rval2set = JS_FALSE; */ 
3611: /* MUTANT (del_stmt) */ /*                 ELEMENT_OP(-1, ok = OBJ_GET_PROPERTY(cx, obj, id, &rval)); */ 
3611: /* MUTANT (rep_const) */                ELEMENT_OP(0, ok = OBJ_GET_PROPERTY(cx, obj, id, &rval));
3611: /* MUTANT (rep_const) */                ELEMENT_OP(1, ok = OBJ_GET_PROPERTY(cx, obj, id, &rval));
3611: /* MUTANT (rep_const) */                ELEMENT_OP(((-1)+1), ok = OBJ_GET_PROPERTY(cx, obj, id, &rval));
3611: /* MUTANT (rep_const) */                ELEMENT_OP(((-1)-1), ok = OBJ_GET_PROPERTY(cx, obj, id, &rval));
3612: /* MUTANT (del_stmt) */ /*                 sp--; */ 
3612: /* MUTANT (rep_op) */                sp++;
3613: /* MUTANT (del_stmt) */ /*                 STORE_OPND(-1, rval); */ 
3613: /* MUTANT (rep_const) */                STORE_OPND(0, rval);
3613: /* MUTANT (rep_const) */                STORE_OPND(1, rval);
3613: /* MUTANT (rep_const) */                STORE_OPND(((-1)+1), rval);
3613: /* MUTANT (rep_const) */                STORE_OPND(((-1)-1), rval);
3617: /* MUTANT (del_stmt) */ /*             break; */ 
3622: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
3623: /* MUTANT (del_stmt) */ /*             ok = js_Invoke(cx, argc, 0); */ 
3623: /* MUTANT (rep_const) */            ok = js_Invoke(cx, argc, 1);
3623: /* MUTANT (rep_const) */            ok = js_Invoke(cx, argc, -1);
3624: /* MUTANT (del_stmt) */ /*             RESTORE_SP(fp); */ 
3625: /* MUTANT (del_stmt) */ /*             LOAD_BRANCH_CALLBACK(cx); */ 
3626: /* MUTANT (del_stmt) */ /*             LOAD_INTERRUPT_HANDLER(rt); */ 
3627: /* MUTANT (negate) */            if(! (!ok))
3629: /* MUTANT (negate) */            if(! (!cx->rval2set)) {
3632: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
3633: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3636: /* MUTANT (del_stmt) */ /*             cx->rval2set = JS_FALSE; */ 
3637: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3638: /* MUTANT (del_stmt) */ /*             break; */ 
3643: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
3645: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
3646: /* MUTANT (del_stmt) */ /*             ok = js_FindProperty(cx, id, &obj, &obj2, &prop); */ 
3647: /* MUTANT (negate) */            if(! (!ok))
3649: /* MUTANT (negate) */            if(! (!prop)) {
3651: /* MUTANT (rep_op) */                for (pc2 = pc - len; pc2 < endpc; pc2++) {
3651: /* MUTANT (rep_op) */                for (pc2 = pc * len; pc2 < endpc; pc2++) {
3651: /* MUTANT (rep_op) */                for (pc2 = pc % len; pc2 < endpc; pc2++) {
3651: /* MUTANT (rep_op) */                for (pc2 = pc + len; pc2 <= endpc; pc2++) {
3651: /* MUTANT (rep_op) */                for (pc2 = pc + len; pc2 > endpc; pc2++) {
3651: /* MUTANT (rep_op) */                for (pc2 = pc + len; pc2 >= endpc; pc2++) {
3651: /* MUTANT (rep_op) */                for (pc2 = pc + len; pc2 == endpc; pc2++) {
3651: /* MUTANT (rep_op) */                for (pc2 = pc + len; pc2 != endpc; pc2++) {
3651: /* MUTANT (rep_op) */                for (pc2 = pc + len; pc2 < endpc; pc2--) {
3652: /* MUTANT (del_stmt) */ /*                     op2 = (JSOp)*pc2; */ 
3653: /* MUTANT (rep_op) */                    if (op2 != JSOP_TYPEOF) {
3653: /* MUTANT (negate) */                    if(! (op2 == JSOP_TYPEOF)) {
3654: /* MUTANT (del_stmt) */ /*                         PUSH_OPND(JSVAL_VOID); */ 
3655: /* MUTANT (del_stmt) */ /*                         goto advance_pc; */ 
3657: /* MUTANT (rep_op) */                    if (op2 == JSOP_GROUP)
3657: /* MUTANT (negate) */                    if(! (op2 != JSOP_GROUP))
3664: /* MUTANT (rep_op) */            if (!OBJ_IS_NATIVE(obj) && !OBJ_IS_NATIVE(obj2)) {
3664: /* MUTANT (negate) */            if(! (!OBJ_IS_NATIVE(obj) || !OBJ_IS_NATIVE(obj2))) {
3665: /* MUTANT (del_stmt) */ /*                 OBJ_DROP_PROPERTY(cx, obj2, prop); */ 
3666: /* MUTANT (del_stmt) */ /*                 ok = OBJ_GET_PROPERTY(cx, obj, id, &rval); */ 
3667: /* MUTANT (negate) */                if(! (!ok))
3669: /* MUTANT (del_stmt) */ /*                 PUSH_OPND(rval); */ 
3670: /* MUTANT (del_stmt) */ /*                 break; */ 
3675: /* MUTANT (del_stmt) */ /*             slot = (uintN)sprop->slot; */ 
3676: /* MUTANT (rep_op) */            rval = (slot == SPROP_INVALID_SLOT)
3679: /* MUTANT (del_stmt) */ /*             JS_UNLOCK_OBJ(cx, obj2); */ 
3680: /* MUTANT (del_stmt) */ /*             ok = SPROP_GET(cx, sprop, obj, obj2, &rval); */ 
3681: /* MUTANT (del_stmt) */ /*             JS_LOCK_OBJ(cx, obj2); */ 
3682: /* MUTANT (negate) */            if(! (!ok)) {
3683: /* MUTANT (del_stmt) */ /*                 OBJ_DROP_PROPERTY(cx, obj2, prop); */ 
3684: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3686: /* MUTANT (negate) */            if(! (SPROP_HAS_VALID_SLOT(sprop, OBJ_SCOPE(obj2))))
3688: /* MUTANT (del_stmt) */ /*             OBJ_DROP_PROPERTY(cx, obj2, prop); */ 
3689: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
3690: /* MUTANT (del_stmt) */ /*             break; */ 
3694: /* MUTANT (del_stmt) */ /*             rval = INT_TO_JSVAL(i); */ 
3695: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
3696: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3697: /* MUTANT (del_stmt) */ /*             break; */ 
3701: /* MUTANT (del_stmt) */ /*             rval = INT_TO_JSVAL(i); */ 
3702: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
3703: /* MUTANT (del_stmt) */ /*             break; */ 
3707: /* MUTANT (del_stmt) */ /*             atom = js_GetAtom(cx, &script->atomMap, atomIndex); */ 
3708: /* MUTANT (del_stmt) */ /*             PUSH_OPND(ATOM_KEY(atom)); */ 
3709: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3710: /* MUTANT (del_stmt) */ /*             break; */ 
3714: /* MUTANT (del_stmt) */ /*             atom = js_GetAtom(cx, &script->atomMap, atomIndex); */ 
3715: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
3716: /* MUTANT (del_stmt) */ /*             obj = js_FindIdentifierBase(cx, ATOM_TO_JSID(atom)); */ 
3716: /* MUTANT (negate) */            obj = js_FindIdentif(!ierBase(cx, ATOM_TO_JSID(atom)));
3717: /* MUTANT (negate) */            if(! (!obj)) {
3718: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
3719: /* MUTANT (del_stmt) */ /*                 goto out; */ 
3722: /* MUTANT (del_stmt) */ /*             PUSH_OPND(ATOM_KEY(atom)); */ 
3723: /* MUTANT (del_stmt) */ /*             break; */ 
3727: /* MUTANT (del_stmt) */ /*             op = pc[1 + LITERAL_INDEX_LEN]; */ 
3727: /* MUTANT (rep_op) */            op = pc[1 - LITERAL_INDEX_LEN];
3727: /* MUTANT (rep_op) */            op = pc[1 * LITERAL_INDEX_LEN];
3727: /* MUTANT (rep_op) */            op = pc[1 % LITERAL_INDEX_LEN];
3727: /* MUTANT (rep_const) */            op = pc[0 + LITERAL_INDEX_LEN];
3727: /* MUTANT (rep_const) */            op = pc[-1 + LITERAL_INDEX_LEN];
3727: /* MUTANT (rep_const) */            op = pc[((1)+1) + LITERAL_INDEX_LEN];
3729: /* MUTANT (del_stmt) */ /*               case JSOP_ANONFUNOBJ:   goto do_JSOP_ANONFUNOBJ; */ 
3730: /* MUTANT (del_stmt) */ /*               case JSOP_BINDNAME:     goto do_JSOP_BINDNAME; */ 
3731: /* MUTANT (del_stmt) */ /*               case JSOP_CLOSURE:      goto do_JSOP_CLOSURE; */ 
3732: /* MUTANT (del_stmt) */ /*               case JSOP_DEFCONST:     goto do_JSOP_DEFCONST; */ 
3733: /* MUTANT (del_stmt) */ /*               case JSOP_DEFFUN:       goto do_JSOP_DEFFUN; */ 
3734: /* MUTANT (del_stmt) */ /*               case JSOP_DEFLOCALFUN:  goto do_JSOP_DEFLOCALFUN; */ 
3735: /* MUTANT (del_stmt) */ /*               case JSOP_DEFVAR:       goto do_JSOP_DEFVAR; */ 
3741: /* MUTANT (del_stmt) */ /*               case JSOP_SETMETHOD:    goto do_JSOP_SETMETHOD; */ 
3744: /* MUTANT (del_stmt) */ /*               case JSOP_NAMEDFUNOBJ:  goto do_JSOP_NAMEDFUNOBJ; */ 
3745: /* MUTANT (del_stmt) */ /*               case JSOP_NUMBER:       goto do_JSOP_NUMBER; */ 
3746: /* MUTANT (del_stmt) */ /*               case JSOP_OBJECT:       goto do_JSOP_OBJECT; */ 
3749: /* MUTANT (del_stmt) */ /*               case JSOP_QNAMEPART:    goto do_JSOP_QNAMEPART; */ 
3752: /* MUTANT (del_stmt) */ /*               case JSOP_SETCONST:     goto do_JSOP_SETCONST; */ 
3753: /* MUTANT (del_stmt) */ /*               case JSOP_STRING:       goto do_JSOP_STRING; */ 
3756: /* MUTANT (del_stmt) */ /*               case JSOP_XMLCOMMENT:   goto do_JSOP_XMLCOMMENT; */ 
3757: /* MUTANT (del_stmt) */ /*               case JSOP_XMLOBJECT:    goto do_JSOP_XMLOBJECT; */ 
3758: /* MUTANT (del_stmt) */ /*               case JSOP_XMLPI:        goto do_JSOP_XMLPI; */ 
3760: /* MUTANT (rep_const) */              default:                JS_ASSERT(1);
3760: /* MUTANT (rep_const) */              default:                JS_ASSERT(-1);
3774: /* MUTANT (del_stmt) */ /*             PUSH_OPND(ATOM_KEY(atom)); */ 
3775: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3776: /* MUTANT (del_stmt) */ /*             break; */ 
3778: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_REGEXP, 1)
3778: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_REGEXP, -1)
3780: /* MUTANT (del_stmt) */ /*             JSRegExp *re; */ 
3781: /* MUTANT (del_stmt) */ /*             JSObject *funobj; */ 
3807: /* MUTANT (del_stmt) */ /*             JS_ASSERT(ATOM_IS_OBJECT(atom)); */ 
3808: /* MUTANT (del_stmt) */ /*             obj = ATOM_TO_OBJECT(atom); */ 
3809: /* MUTANT (del_stmt) */ /*             JS_ASSERT(OBJ_GET_CLASS(cx, obj) == &js_RegExpClass); */ 
3809: /* MUTANT (rep_op) */            JS_ASSERT(OBJ_GET_CLASS(cx, obj) != &js_RegExpClass);
3811: /* MUTANT (del_stmt) */ /*             re = (JSRegExp *) JS_GetPrivate(cx, obj); */ 
3812: /* MUTANT (del_stmt) */ /*             slot = re->cloneIndex; */ 
3813: /* MUTANT (negate) */            if(! (fp->fun)) {
3820: /* MUTANT (del_stmt) */ /*                 funobj = JSVAL_TO_OBJECT(fp->argv[-2]); */ 
3820: /* MUTANT (rep_const) */                funobj = JSVAL_TO_OBJECT(fp->argv[0]);
3820: /* MUTANT (rep_const) */                funobj = JSVAL_TO_OBJECT(fp->argv[1]);
3820: /* MUTANT (rep_const) */                funobj = JSVAL_TO_OBJECT(fp->argv[-1]);
3820: /* MUTANT (rep_const) */                funobj = JSVAL_TO_OBJECT(fp->argv[((-2)+1)]);
3820: /* MUTANT (rep_const) */                funobj = JSVAL_TO_OBJECT(fp->argv[((-2)-1)]);
3821: /* MUTANT (del_stmt) */ /*                 slot += JSCLASS_RESERVED_SLOTS(&js_FunctionClass); */ 
3821: /* MUTANT (rep_op) */                slot -= JSCLASS_RESERVED_SLOTS(&js_FunctionClass);
3821: /* MUTANT (rep_op) */                slot *= JSCLASS_RESERVED_SLOTS(&js_FunctionClass);
3821: /* MUTANT (rep_op) */                slot %= JSCLASS_RESERVED_SLOTS(&js_FunctionClass);
3822: /* MUTANT (negate) */                if(! (!JS_GetReservedSlot(cx, funobj, slot, &rval)))
3824: /* MUTANT (negate) */                if(! (JSVAL_IS_VOID(rval)))
3833: /* MUTANT (del_stmt) */ /*                 rval = fp->vars[slot]; */ 
3839: /* MUTANT (negate) */            if(! (JSVAL_IS_NULL(rval))) {
3841: /* MUTANT (del_stmt) */ /*                 obj2 = fp->scopeChain; */ 
3842: /* MUTANT (rep_op) */                while ((parent = OBJ_GET_PARENT(cx, obj2)) == NULL)
3842: /* MUTANT (negate) */                while(! ((parent = OBJ_GET_PARENT(cx, obj2)) != NULL))
3852: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
3878: /* MUTANT (rep_op) */                if (OBJ_GET_PARENT(cx, obj) == obj2) {
3878: /* MUTANT (negate) */                if(! (OBJ_GET_PARENT(cx, obj) != obj2)) {
3879: /* MUTANT (del_stmt) */ /*                     obj = js_CloneRegExpObject(cx, obj, obj2); */ 
3880: /* MUTANT (negate) */                    if(! (!obj)) {
3881: /* MUTANT (del_stmt) */ /*                         ok = JS_FALSE; */ 
3882: /* MUTANT (del_stmt) */ /*                         goto out; */ 
3888: /* MUTANT (negate) */                if(! (fp->fun)) {
3889: /* MUTANT (negate) */                    if(! (!JS_SetReservedSlot(cx, funobj, slot, rval)))
3892: /* MUTANT (del_stmt) */ /*                     fp->vars[slot] = rval; */ 
3897: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3903: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3904: /* MUTANT (del_stmt) */ /*             break; */ 
3908: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3909: /* MUTANT (del_stmt) */ /*             break; */ 
3913: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3914: /* MUTANT (del_stmt) */ /*             break; */ 
3918: /* MUTANT (del_stmt) */ /*             clasp = OBJ_GET_CLASS(cx, obj); */ 
3919: /* MUTANT (negate) */            if(! (clasp->flags & JSCLASS_IS_EXTENDED)) {
3920: /* MUTANT (del_stmt) */ /*                 JSExtendedClass *xclasp; */ 
3922: /* MUTANT (del_stmt) */ /*                 xclasp = (JSExtendedClass *) clasp; */ 
3923: /* MUTANT (negate) */                if(! (xclasp->outerObject)) {
3924: /* MUTANT (del_stmt) */ /*                     obj = xclasp->outerObject(cx, obj); */ 
3925: /* MUTANT (negate) */                    if(! (!obj)) {
3926: /* MUTANT (del_stmt) */ /*                         ok = JS_FALSE; */ 
3927: /* MUTANT (del_stmt) */ /*                         goto out; */ 
3933: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3934: /* MUTANT (del_stmt) */ /*             break; */ 
3938: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3939: /* MUTANT (del_stmt) */ /*             break; */ 
3943: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
3944: /* MUTANT (del_stmt) */ /*             break; */ 
3949: /* MUTANT (del_stmt) */ /*             len = GET_JUMP_OFFSET(pc2); */ 
3956: /* MUTANT (rep_op) */            if ((cx->version & JSVERSION_MASK) != JSVERSION_DEFAULT ||
3956: /* MUTANT (rep_op) */            if ((cx->version & JSVERSION_MASK) == JSVERSION_DEFAULT &&
3957: /* MUTANT (rep_op) */                (cx->version & JSVERSION_MASK) <= JSVERSION_1_4) {
3957: /* MUTANT (rep_op) */                (cx->version & JSVERSION_MASK) < JSVERSION_1_4) {
3957: /* MUTANT (rep_op) */                (cx->version & JSVERSION_MASK) > JSVERSION_1_4) {
3957: /* MUTANT (rep_op) */                (cx->version & JSVERSION_MASK) == JSVERSION_1_4) {
3957: /* MUTANT (rep_op) */                (cx->version & JSVERSION_MASK) != JSVERSION_1_4) {
3958: /* MUTANT (del_stmt) */ /*                 rval = POP_OPND(); */ 
3959: /* MUTANT (negate) */                if(! (!JSVAL_IS_INT(rval)))
3961: /* MUTANT (del_stmt) */ /*                 i = JSVAL_TO_INT(rval); */ 
3963: /* MUTANT (del_stmt) */ /*                 FETCH_INT(cx, -1, i); */ 
3963: /* MUTANT (rep_const) */                FETCH_INT(cx, 0, i);
3963: /* MUTANT (rep_const) */                FETCH_INT(cx, 1, i);
3963: /* MUTANT (rep_const) */                FETCH_INT(cx, ((-1)+1), i);
3963: /* MUTANT (rep_const) */                FETCH_INT(cx, ((-1)-1), i);
3964: /* MUTANT (del_stmt) */ /*                 sp--; */ 
3964: /* MUTANT (rep_op) */                sp++;
3967: /* MUTANT (rep_op) */            pc2 -= JUMP_OFFSET_LEN;
3967: /* MUTANT (rep_op) */            pc2 *= JUMP_OFFSET_LEN;
3967: /* MUTANT (rep_op) */            pc2 %= JUMP_OFFSET_LEN;
3968: /* MUTANT (del_stmt) */ /*             low = GET_JUMP_OFFSET(pc2); */ 
3969: /* MUTANT (del_stmt) */ /*             pc2 += JUMP_OFFSET_LEN; */ 
3969: /* MUTANT (rep_op) */            pc2 -= JUMP_OFFSET_LEN;
3969: /* MUTANT (rep_op) */            pc2 *= JUMP_OFFSET_LEN;
3969: /* MUTANT (rep_op) */            pc2 %= JUMP_OFFSET_LEN;
3970: /* MUTANT (del_stmt) */ /*             high = GET_JUMP_OFFSET(pc2); */ 
3972: /* MUTANT (del_stmt) */ /*             i -= low; */ 
3972: /* MUTANT (rep_op) */            i += low;
3972: /* MUTANT (rep_op) */            i *= low;
3972: /* MUTANT (rep_op) */            i %= low;
3973: /* MUTANT (rep_op) */            if ((jsuint)i <= (jsuint)(high - low + 1)) {
3973: /* MUTANT (rep_op) */            if ((jsuint)i > (jsuint)(high - low + 1)) {
3973: /* MUTANT (rep_op) */            if ((jsuint)i >= (jsuint)(high - low + 1)) {
3973: /* MUTANT (rep_op) */            if ((jsuint)i == (jsuint)(high - low + 1)) {
3973: /* MUTANT (rep_op) */            if ((jsuint)i != (jsuint)(high - low + 1)) {
3973: /* MUTANT (rep_op) */            if ((jsuint)i < (jsuint)(high - low - 1)) {
3973: /* MUTANT (rep_op) */            if ((jsuint)i < (jsuint)(high - low * 1)) {
3973: /* MUTANT (rep_op) */            if ((jsuint)i < (jsuint)(high - low % 1)) {
3973: /* MUTANT (rep_const) */            if ((jsuint)i < (jsuint)(high - low + 0)) {
3973: /* MUTANT (rep_const) */            if ((jsuint)i < (jsuint)(high - low + -1)) {
3973: /* MUTANT (rep_const) */            if ((jsuint)i < (jsuint)(high - low + ((1)+1))) {
3973: /* MUTANT (negate) */            if(! ((jsuint)i < (jsuint)(high - low + 1))) {
3974: /* MUTANT (del_stmt) */ /*                 pc2 += JUMP_OFFSET_LEN + JUMP_OFFSET_LEN * i; */ 
3974: /* MUTANT (rep_op) */                pc2 -= JUMP_OFFSET_LEN + JUMP_OFFSET_LEN * i;
3974: /* MUTANT (rep_op) */                pc2 *= JUMP_OFFSET_LEN + JUMP_OFFSET_LEN * i;
3974: /* MUTANT (rep_op) */                pc2 %= JUMP_OFFSET_LEN + JUMP_OFFSET_LEN * i;
3974: /* MUTANT (rep_op) */                pc2 += JUMP_OFFSET_LEN - JUMP_OFFSET_LEN * i;
3974: /* MUTANT (rep_op) */                pc2 += JUMP_OFFSET_LEN * JUMP_OFFSET_LEN * i;
3974: /* MUTANT (rep_op) */                pc2 += JUMP_OFFSET_LEN % JUMP_OFFSET_LEN * i;
3975: /* MUTANT (del_stmt) */ /*                 off = (jsint) GET_JUMP_OFFSET(pc2); */ 
3976: /* MUTANT (negate) */                if(! (off))
3983: /* MUTANT (del_stmt) */ /*             pc2 = pc; */ 
3984: /* MUTANT (del_stmt) */ /*             len = GET_JUMP_OFFSET(pc2); */ 
3986: /* MUTANT (rep_op) */            if (!JSVAL_IS_NUMBER(lval) ||
3987: /* MUTANT (rep_op) */                !JSVAL_IS_STRING(lval) ||
3989: /* MUTANT (del_stmt) */ /*                 goto advance_pc; */ 
3992: /* MUTANT (rep_op) */            pc2 -= JUMP_OFFSET_LEN;
3992: /* MUTANT (rep_op) */            pc2 *= JUMP_OFFSET_LEN;
3992: /* MUTANT (rep_op) */            pc2 %= JUMP_OFFSET_LEN;
3993: /* MUTANT (del_stmt) */ /*             npairs = (jsint) GET_ATOM_INDEX(pc2); */ 
3994: /* MUTANT (del_stmt) */ /*             pc2 += ATOM_INDEX_LEN; */ 
3994: /* MUTANT (rep_op) */            pc2 -= ATOM_INDEX_LEN;
3994: /* MUTANT (rep_op) */            pc2 *= ATOM_INDEX_LEN;
3994: /* MUTANT (rep_op) */            pc2 %= ATOM_INDEX_LEN;
3997: /* MUTANT (negate) */    while(! (npairs)) {                                                          \
4001: /* MUTANT (negate) */        if(! (match)) {                                                          \
4002: /* MUTANT (rep_op) */            pc2 -= ATOM_INDEX_LEN;                                            \
4002: /* MUTANT (rep_op) */            pc2 *= ATOM_INDEX_LEN;                                            \
4002: /* MUTANT (rep_op) */            pc2 %= ATOM_INDEX_LEN;                                            \
4006: /* MUTANT (rep_op) */        pc2 -= ATOM_INDEX_LEN + JUMP_OFFSET_LEN;                              \
4006: /* MUTANT (rep_op) */        pc2 *= ATOM_INDEX_LEN + JUMP_OFFSET_LEN;                              \
4006: /* MUTANT (rep_op) */        pc2 %= ATOM_INDEX_LEN + JUMP_OFFSET_LEN;                              \
4006: /* MUTANT (rep_op) */        pc2 += ATOM_INDEX_LEN - JUMP_OFFSET_LEN;                              \
4006: /* MUTANT (rep_op) */        pc2 += ATOM_INDEX_LEN * JUMP_OFFSET_LEN;                              \
4006: /* MUTANT (rep_op) */        pc2 += ATOM_INDEX_LEN % JUMP_OFFSET_LEN;                              \
4007: /* MUTANT (rep_op) */        npairs++;                                                             \
4009: /* MUTANT (negate) */            if(! (JSVAL_IS_STRING(lval))) {
4010: /* MUTANT (del_stmt) */ /*                 str  = JSVAL_TO_STRING(lval); */ 
4012: /* MUTANT (rep_op) */                    match = (JSVAL_IS_STRING(rval) ||
4013: /* MUTANT (rep_op) */                             ((str2 = JSVAL_TO_STRING(rval)) != str ||
4013: /* MUTANT (rep_op) */                             ((str2 = JSVAL_TO_STRING(rval)) == str &&
4016: /* MUTANT (negate) */            } else if(! (JSVAL_IS_DOUBLE(lval))) {
4017: /* MUTANT (del_stmt) */ /*                 d = *JSVAL_TO_DOUBLE(lval); */ 
4019: /* MUTANT (rep_op) */                    match = (JSVAL_IS_DOUBLE(rval) ||
4020: /* MUTANT (rep_op) */                             *JSVAL_TO_DOUBLE(rval) != d);
4024: /* MUTANT (rep_op) */                    match = (lval != rval);
4032: /* MUTANT (del_stmt) */ /*             len = GET_JUMPX_OFFSET(pc2); */ 
4039: /* MUTANT (rep_op) */            if ((cx->version & JSVERSION_MASK) != JSVERSION_DEFAULT ||
4039: /* MUTANT (rep_op) */            if ((cx->version & JSVERSION_MASK) == JSVERSION_DEFAULT &&
4040: /* MUTANT (rep_op) */                (cx->version & JSVERSION_MASK) <= JSVERSION_1_4) {
4040: /* MUTANT (rep_op) */                (cx->version & JSVERSION_MASK) < JSVERSION_1_4) {
4040: /* MUTANT (rep_op) */                (cx->version & JSVERSION_MASK) > JSVERSION_1_4) {
4040: /* MUTANT (rep_op) */                (cx->version & JSVERSION_MASK) == JSVERSION_1_4) {
4040: /* MUTANT (rep_op) */                (cx->version & JSVERSION_MASK) != JSVERSION_1_4) {
4041: /* MUTANT (del_stmt) */ /*                 rval = POP_OPND(); */ 
4042: /* MUTANT (negate) */                if(! (!JSVAL_IS_INT(rval)))
4044: /* MUTANT (del_stmt) */ /*                 i = JSVAL_TO_INT(rval); */ 
4046: /* MUTANT (del_stmt) */ /*                 FETCH_INT(cx, -1, i); */ 
4046: /* MUTANT (rep_const) */                FETCH_INT(cx, 0, i);
4046: /* MUTANT (rep_const) */                FETCH_INT(cx, 1, i);
4046: /* MUTANT (rep_const) */                FETCH_INT(cx, ((-1)+1), i);
4046: /* MUTANT (rep_const) */                FETCH_INT(cx, ((-1)-1), i);
4047: /* MUTANT (del_stmt) */ /*                 sp--; */ 
4047: /* MUTANT (rep_op) */                sp++;
4050: /* MUTANT (rep_op) */            pc2 -= JUMPX_OFFSET_LEN;
4050: /* MUTANT (rep_op) */            pc2 *= JUMPX_OFFSET_LEN;
4050: /* MUTANT (rep_op) */            pc2 %= JUMPX_OFFSET_LEN;
4051: /* MUTANT (del_stmt) */ /*             low = GET_JUMP_OFFSET(pc2); */ 
4052: /* MUTANT (del_stmt) */ /*             pc2 += JUMP_OFFSET_LEN; */ 
4052: /* MUTANT (rep_op) */            pc2 -= JUMP_OFFSET_LEN;
4052: /* MUTANT (rep_op) */            pc2 *= JUMP_OFFSET_LEN;
4052: /* MUTANT (rep_op) */            pc2 %= JUMP_OFFSET_LEN;
4053: /* MUTANT (del_stmt) */ /*             high = GET_JUMP_OFFSET(pc2); */ 
4055: /* MUTANT (del_stmt) */ /*             i -= low; */ 
4055: /* MUTANT (rep_op) */            i += low;
4055: /* MUTANT (rep_op) */            i *= low;
4055: /* MUTANT (rep_op) */            i %= low;
4056: /* MUTANT (rep_op) */            if ((jsuint)i <= (jsuint)(high - low + 1)) {
4056: /* MUTANT (rep_op) */            if ((jsuint)i > (jsuint)(high - low + 1)) {
4056: /* MUTANT (rep_op) */            if ((jsuint)i >= (jsuint)(high - low + 1)) {
4056: /* MUTANT (rep_op) */            if ((jsuint)i == (jsuint)(high - low + 1)) {
4056: /* MUTANT (rep_op) */            if ((jsuint)i != (jsuint)(high - low + 1)) {
4056: /* MUTANT (rep_op) */            if ((jsuint)i < (jsuint)(high - low - 1)) {
4056: /* MUTANT (rep_op) */            if ((jsuint)i < (jsuint)(high - low * 1)) {
4056: /* MUTANT (rep_op) */            if ((jsuint)i < (jsuint)(high - low % 1)) {
4056: /* MUTANT (rep_const) */            if ((jsuint)i < (jsuint)(high - low + 0)) {
4056: /* MUTANT (rep_const) */            if ((jsuint)i < (jsuint)(high - low + -1)) {
4056: /* MUTANT (rep_const) */            if ((jsuint)i < (jsuint)(high - low + ((1)+1))) {
4056: /* MUTANT (negate) */            if(! ((jsuint)i < (jsuint)(high - low + 1))) {
4057: /* MUTANT (del_stmt) */ /*                 pc2 += JUMP_OFFSET_LEN + JUMPX_OFFSET_LEN * i; */ 
4057: /* MUTANT (rep_op) */                pc2 -= JUMP_OFFSET_LEN + JUMPX_OFFSET_LEN * i;
4057: /* MUTANT (rep_op) */                pc2 *= JUMP_OFFSET_LEN + JUMPX_OFFSET_LEN * i;
4057: /* MUTANT (rep_op) */                pc2 %= JUMP_OFFSET_LEN + JUMPX_OFFSET_LEN * i;
4057: /* MUTANT (rep_op) */                pc2 += JUMP_OFFSET_LEN - JUMPX_OFFSET_LEN * i;
4057: /* MUTANT (rep_op) */                pc2 += JUMP_OFFSET_LEN * JUMPX_OFFSET_LEN * i;
4057: /* MUTANT (rep_op) */                pc2 += JUMP_OFFSET_LEN % JUMPX_OFFSET_LEN * i;
4058: /* MUTANT (del_stmt) */ /*                 off = (jsint) GET_JUMPX_OFFSET(pc2); */ 
4059: /* MUTANT (negate) */                if(! (off))
4066: /* MUTANT (del_stmt) */ /*             pc2 = pc; */ 
4067: /* MUTANT (del_stmt) */ /*             len = GET_JUMPX_OFFSET(pc2); */ 
4069: /* MUTANT (rep_op) */            if (!JSVAL_IS_NUMBER(lval) ||
4070: /* MUTANT (rep_op) */                !JSVAL_IS_STRING(lval) ||
4072: /* MUTANT (del_stmt) */ /*                 goto advance_pc; */ 
4075: /* MUTANT (rep_op) */            pc2 -= JUMPX_OFFSET_LEN;
4075: /* MUTANT (rep_op) */            pc2 *= JUMPX_OFFSET_LEN;
4075: /* MUTANT (rep_op) */            pc2 %= JUMPX_OFFSET_LEN;
4076: /* MUTANT (del_stmt) */ /*             npairs = (jsint) GET_ATOM_INDEX(pc2); */ 
4077: /* MUTANT (del_stmt) */ /*             pc2 += ATOM_INDEX_LEN; */ 
4077: /* MUTANT (rep_op) */            pc2 -= ATOM_INDEX_LEN;
4077: /* MUTANT (rep_op) */            pc2 *= ATOM_INDEX_LEN;
4077: /* MUTANT (rep_op) */            pc2 %= ATOM_INDEX_LEN;
4080: /* MUTANT (negate) */    while(! (npairs)) {                                                          \
4084: /* MUTANT (negate) */        if(! (match)) {                                                          \
4085: /* MUTANT (rep_op) */            pc2 -= ATOM_INDEX_LEN;                                            \
4085: /* MUTANT (rep_op) */            pc2 *= ATOM_INDEX_LEN;                                            \
4085: /* MUTANT (rep_op) */            pc2 %= ATOM_INDEX_LEN;                                            \
4089: /* MUTANT (rep_op) */        pc2 -= ATOM_INDEX_LEN + JUMPX_OFFSET_LEN;                             \
4089: /* MUTANT (rep_op) */        pc2 *= ATOM_INDEX_LEN + JUMPX_OFFSET_LEN;                             \
4089: /* MUTANT (rep_op) */        pc2 %= ATOM_INDEX_LEN + JUMPX_OFFSET_LEN;                             \
4089: /* MUTANT (rep_op) */        pc2 += ATOM_INDEX_LEN - JUMPX_OFFSET_LEN;                             \
4089: /* MUTANT (rep_op) */        pc2 += ATOM_INDEX_LEN * JUMPX_OFFSET_LEN;                             \
4089: /* MUTANT (rep_op) */        pc2 += ATOM_INDEX_LEN % JUMPX_OFFSET_LEN;                             \
4090: /* MUTANT (rep_op) */        npairs++;                                                             \
4092: /* MUTANT (negate) */            if(! (JSVAL_IS_STRING(lval))) {
4093: /* MUTANT (del_stmt) */ /*                 str  = JSVAL_TO_STRING(lval); */ 
4095: /* MUTANT (rep_op) */                    match = (JSVAL_IS_STRING(rval) ||
4096: /* MUTANT (rep_op) */                             ((str2 = JSVAL_TO_STRING(rval)) != str ||
4096: /* MUTANT (rep_op) */                             ((str2 = JSVAL_TO_STRING(rval)) == str &&
4099: /* MUTANT (negate) */            } else if(! (JSVAL_IS_DOUBLE(lval))) {
4100: /* MUTANT (del_stmt) */ /*                 d = *JSVAL_TO_DOUBLE(lval); */ 
4102: /* MUTANT (rep_op) */                    match = (JSVAL_IS_DOUBLE(rval) ||
4103: /* MUTANT (rep_op) */                             *JSVAL_TO_DOUBLE(rval) != d);
4107: /* MUTANT (rep_op) */                    match = (lval != rval);
4121: /* MUTANT (del_stmt) */ /*             obj = fp->varobj; */ 
4122: /* MUTANT (del_stmt) */ /*             ida = JS_Enumerate(cx, obj); */ 
4123: /* MUTANT (negate) */            if(! (!ida)) {
4124: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
4126: /* MUTANT (rep_op) */                for (i = 0, j = ida->length; i <= j; i++) {
4126: /* MUTANT (rep_op) */                for (i = 0, j = ida->length; i > j; i++) {
4126: /* MUTANT (rep_op) */                for (i = 0, j = ida->length; i >= j; i++) {
4126: /* MUTANT (rep_op) */                for (i = 0, j = ida->length; i == j; i++) {
4126: /* MUTANT (rep_op) */                for (i = 0, j = ida->length; i != j; i++) {
4126: /* MUTANT (rep_op) */                for (i = 0, j = ida->length; i < j; i--) {
4126: /* MUTANT (rep_const) */                for (i = 1, j = ida->length; i < j; i++) {
4126: /* MUTANT (rep_const) */                for (i = -1, j = ida->length; i < j; i++) {
4127: /* MUTANT (del_stmt) */ /*                     id = ida->vector[i]; */ 
4128: /* MUTANT (del_stmt) */ /*                     ok = OBJ_LOOKUP_PROPERTY(cx, obj, id, &obj2, &prop); */ 
4129: /* MUTANT (negate) */                    if(! (!ok))
4131: /* MUTANT (negate) */                    if(! (!prop))
4133: /* MUTANT (del_stmt) */ /*                     ok = OBJ_GET_ATTRIBUTES(cx, obj, id, prop, &attrs); */ 
4134: /* MUTANT (negate) */                    if(! (ok)) {
4135: /* MUTANT (del_stmt) */ /*                         attrs |= JSPROP_EXPORTED; */ 
4136: /* MUTANT (del_stmt) */ /*                         ok = OBJ_SET_ATTRIBUTES(cx, obj, id, prop, &attrs); */ 
4139: /* MUTANT (negate) */                    if(! (!ok))
4146: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_EXPORTNAME, 1)
4146: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_EXPORTNAME, -1)
4148: /* MUTANT (del_stmt) */ /*             obj  = fp->varobj; */ 
4149: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
4150: /* MUTANT (del_stmt) */ /*             ok = OBJ_LOOKUP_PROPERTY(cx, obj, id, &obj2, &prop); */ 
4151: /* MUTANT (negate) */            if(! (!ok))
4153: /* MUTANT (negate) */            if(! (!prop)) {
4157: /* MUTANT (del_stmt) */ /*                 ok = OBJ_GET_ATTRIBUTES(cx, obj, id, prop, &attrs); */ 
4158: /* MUTANT (negate) */                if(! (ok)) {
4159: /* MUTANT (del_stmt) */ /*                     attrs |= JSPROP_EXPORTED; */ 
4160: /* MUTANT (del_stmt) */ /*                     ok = OBJ_SET_ATTRIBUTES(cx, obj, id, prop, &attrs); */ 
4164: /* MUTANT (negate) */            if(! (!ok))
4170: /* MUTANT (del_stmt) */ /*             PROPERTY_OP(-1, ok = ImportProperty(cx, obj, id)); */ 
4170: /* MUTANT (rep_const) */            PROPERTY_OP(0, ok = ImportProperty(cx, obj, id));
4170: /* MUTANT (rep_const) */            PROPERTY_OP(1, ok = ImportProperty(cx, obj, id));
4170: /* MUTANT (rep_const) */            PROPERTY_OP(((-1)+1), ok = ImportProperty(cx, obj, id));
4170: /* MUTANT (rep_const) */            PROPERTY_OP(((-1)-1), ok = ImportProperty(cx, obj, id));
4171: /* MUTANT (del_stmt) */ /*             sp--; */ 
4171: /* MUTANT (rep_op) */            sp++;
4172: /* MUTANT (del_stmt) */ /*             break; */ 
4177: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
4178: /* MUTANT (del_stmt) */ /*             PROPERTY_OP(-1, ok = ImportProperty(cx, obj, id)); */ 
4178: /* MUTANT (rep_const) */            PROPERTY_OP(0, ok = ImportProperty(cx, obj, id));
4178: /* MUTANT (rep_const) */            PROPERTY_OP(1, ok = ImportProperty(cx, obj, id));
4178: /* MUTANT (rep_const) */            PROPERTY_OP(((-1)+1), ok = ImportProperty(cx, obj, id));
4178: /* MUTANT (rep_const) */            PROPERTY_OP(((-1)-1), ok = ImportProperty(cx, obj, id));
4179: /* MUTANT (del_stmt) */ /*             sp--; */ 
4179: /* MUTANT (rep_op) */            sp++;
4180: /* MUTANT (del_stmt) */ /*             break; */ 
4183: /* MUTANT (rep_const) */            ELEMENT_OP(0, ok = ImportProperty(cx, obj, id));
4183: /* MUTANT (rep_const) */            ELEMENT_OP(1, ok = ImportProperty(cx, obj, id));
4183: /* MUTANT (rep_const) */            ELEMENT_OP(((-1)+1), ok = ImportProperty(cx, obj, id));
4183: /* MUTANT (rep_const) */            ELEMENT_OP(((-1)-1), ok = ImportProperty(cx, obj, id));
4184: /* MUTANT (del_stmt) */ /*             sp -= 2; */ 
4184: /* MUTANT (rep_op) */            sp += 2;
4184: /* MUTANT (rep_op) */            sp *= 2;
4184: /* MUTANT (rep_op) */            sp %= 2;
4184: /* MUTANT (rep_const) */            sp -= 0;
4184: /* MUTANT (rep_const) */            sp -= 1;
4184: /* MUTANT (rep_const) */            sp -= -1;
4184: /* MUTANT (rep_const) */            sp -= ((2)+1);
4184: /* MUTANT (rep_const) */            sp -= ((2)-1);
4185: /* MUTANT (del_stmt) */ /*             break; */ 
4192: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4195: /* MUTANT (del_stmt) */ /*                 op = (JSOp) JSVAL_TO_INT(rval); */ 
4196: /* MUTANT (del_stmt) */ /*                 JS_ASSERT((uintN)op < (uintN)JSOP_LIMIT); */ 
4196: /* MUTANT (rep_op) */                JS_ASSERT((uintN)op <= (uintN)JSOP_LIMIT);
4196: /* MUTANT (rep_op) */                JS_ASSERT((uintN)op > (uintN)JSOP_LIMIT);
4196: /* MUTANT (rep_op) */                JS_ASSERT((uintN)op >= (uintN)JSOP_LIMIT);
4196: /* MUTANT (rep_op) */                JS_ASSERT((uintN)op == (uintN)JSOP_LIMIT);
4196: /* MUTANT (rep_op) */                JS_ASSERT((uintN)op != (uintN)JSOP_LIMIT);
4197: /* MUTANT (del_stmt) */ /*                 LOAD_INTERRUPT_HANDLER(rt); */ 
4198: /* MUTANT (del_stmt) */ /*                 goto do_op; */ 
4201: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4205: /* MUTANT (del_stmt) */ /*                 cx->exception = rval; */ 
4206: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
4207: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4212: /* MUTANT (del_stmt) */ /*             break; */ 
4216: /* MUTANT (del_stmt) */ /*             ok = js_GetArgsValue(cx, fp, &rval); */ 
4217: /* MUTANT (negate) */            if(! (!ok))
4219: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
4220: /* MUTANT (del_stmt) */ /*             break; */ 
4224: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
4225: /* MUTANT (del_stmt) */ /*             ok = js_GetArgsProperty(cx, fp, id, &obj, &rval); */ 
4226: /* MUTANT (negate) */            if(! (!ok))
4228: /* MUTANT (negate) */            if(! (!obj)) {
4237: /* MUTANT (del_stmt) */ /*                 obj = LAZY_ARGS_THISP; */ 
4240: /* MUTANT (del_stmt) */ /*             break; */ 
4246: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
4247: /* MUTANT (del_stmt) */ /*             ok = js_GetArgsProperty(cx, fp, id, &obj, &rval); */ 
4248: /* MUTANT (negate) */            if(! (!ok))
4250: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
4251: /* MUTANT (del_stmt) */ /*             break; */ 
4255: /* MUTANT (del_stmt) */ /*             JS_ASSERT(slot < fp->fun->nargs); */ 
4255: /* MUTANT (rep_op) */            JS_ASSERT(slot <= fp->fun->nargs);
4255: /* MUTANT (rep_op) */            JS_ASSERT(slot > fp->fun->nargs);
4255: /* MUTANT (rep_op) */            JS_ASSERT(slot >= fp->fun->nargs);
4255: /* MUTANT (rep_op) */            JS_ASSERT(slot == fp->fun->nargs);
4255: /* MUTANT (rep_op) */            JS_ASSERT(slot != fp->fun->nargs);
4256: /* MUTANT (del_stmt) */ /*             PUSH_OPND(fp->argv[slot]); */ 
4257: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
4258: /* MUTANT (del_stmt) */ /*             break; */ 
4262: /* MUTANT (del_stmt) */ /*             JS_ASSERT(slot < fp->fun->nargs); */ 
4262: /* MUTANT (rep_op) */            JS_ASSERT(slot <= fp->fun->nargs);
4262: /* MUTANT (rep_op) */            JS_ASSERT(slot > fp->fun->nargs);
4262: /* MUTANT (rep_op) */            JS_ASSERT(slot >= fp->fun->nargs);
4262: /* MUTANT (rep_op) */            JS_ASSERT(slot == fp->fun->nargs);
4262: /* MUTANT (rep_op) */            JS_ASSERT(slot != fp->fun->nargs);
4263: /* MUTANT (del_stmt) */ /*             vp = &fp->argv[slot]; */ 
4264: /* MUTANT (del_stmt) */ /*             GC_POKE(cx, *vp); */ 
4265: /* MUTANT (del_stmt) */ /*             *vp = FETCH_OPND(-1); */ 
4265: /* MUTANT (rep_const) */            *vp = FETCH_OPND(0);
4265: /* MUTANT (rep_const) */            *vp = FETCH_OPND(1);
4265: /* MUTANT (rep_const) */            *vp = FETCH_OPND(((-1)+1));
4265: /* MUTANT (rep_const) */            *vp = FETCH_OPND(((-1)-1));
4266: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
4267: /* MUTANT (del_stmt) */ /*             break; */ 
4271: /* MUTANT (del_stmt) */ /*             JS_ASSERT(slot < fp->fun->nvars); */ 
4271: /* MUTANT (rep_op) */            JS_ASSERT(slot <= fp->fun->nvars);
4271: /* MUTANT (rep_op) */            JS_ASSERT(slot > fp->fun->nvars);
4271: /* MUTANT (rep_op) */            JS_ASSERT(slot >= fp->fun->nvars);
4271: /* MUTANT (rep_op) */            JS_ASSERT(slot == fp->fun->nvars);
4271: /* MUTANT (rep_op) */            JS_ASSERT(slot != fp->fun->nvars);
4272: /* MUTANT (del_stmt) */ /*             PUSH_OPND(fp->vars[slot]); */ 
4273: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
4274: /* MUTANT (del_stmt) */ /*             break; */ 
4278: /* MUTANT (del_stmt) */ /*             JS_ASSERT(slot < fp->fun->nvars); */ 
4278: /* MUTANT (rep_op) */            JS_ASSERT(slot <= fp->fun->nvars);
4278: /* MUTANT (rep_op) */            JS_ASSERT(slot > fp->fun->nvars);
4278: /* MUTANT (rep_op) */            JS_ASSERT(slot >= fp->fun->nvars);
4278: /* MUTANT (rep_op) */            JS_ASSERT(slot == fp->fun->nvars);
4278: /* MUTANT (rep_op) */            JS_ASSERT(slot != fp->fun->nvars);
4279: /* MUTANT (del_stmt) */ /*             vp = &fp->vars[slot]; */ 
4280: /* MUTANT (del_stmt) */ /*             GC_POKE(cx, *vp); */ 
4281: /* MUTANT (del_stmt) */ /*             *vp = FETCH_OPND(-1); */ 
4281: /* MUTANT (rep_const) */            *vp = FETCH_OPND(0);
4281: /* MUTANT (rep_const) */            *vp = FETCH_OPND(1);
4281: /* MUTANT (rep_const) */            *vp = FETCH_OPND(((-1)+1));
4281: /* MUTANT (rep_const) */            *vp = FETCH_OPND(((-1)-1));
4282: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
4283: /* MUTANT (del_stmt) */ /*             break; */ 
4287: /* MUTANT (del_stmt) */ /*             JS_ASSERT(slot < fp->nvars); */ 
4287: /* MUTANT (rep_op) */            JS_ASSERT(slot <= fp->nvars);
4287: /* MUTANT (rep_op) */            JS_ASSERT(slot > fp->nvars);
4287: /* MUTANT (rep_op) */            JS_ASSERT(slot >= fp->nvars);
4287: /* MUTANT (rep_op) */            JS_ASSERT(slot == fp->nvars);
4287: /* MUTANT (rep_op) */            JS_ASSERT(slot != fp->nvars);
4288: /* MUTANT (del_stmt) */ /*             lval = fp->vars[slot]; */ 
4289: /* MUTANT (negate) */            if(! (JSVAL_IS_NULL(lval))) {
4290: /* MUTANT (del_stmt) */ /*                 op = JSOP_NAME; */ 
4291: /* MUTANT (del_stmt) */ /*                 goto do_op; */ 
4294: /* MUTANT (del_stmt) */ /*             obj = fp->varobj; */ 
4295: /* MUTANT (del_stmt) */ /*             rval = OBJ_GET_SLOT(cx, obj, slot); */ 
4296: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
4297: /* MUTANT (del_stmt) */ /*             break; */ 
4301: /* MUTANT (del_stmt) */ /*             JS_ASSERT(slot < fp->nvars); */ 
4301: /* MUTANT (rep_op) */            JS_ASSERT(slot <= fp->nvars);
4301: /* MUTANT (rep_op) */            JS_ASSERT(slot > fp->nvars);
4301: /* MUTANT (rep_op) */            JS_ASSERT(slot >= fp->nvars);
4301: /* MUTANT (rep_op) */            JS_ASSERT(slot == fp->nvars);
4301: /* MUTANT (rep_op) */            JS_ASSERT(slot != fp->nvars);
4302: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
4302: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
4302: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
4302: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
4302: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
4303: /* MUTANT (del_stmt) */ /*             lval = fp->vars[slot]; */ 
4304: /* MUTANT (del_stmt) */ /*             obj = fp->varobj; */ 
4305: /* MUTANT (negate) */            if(! (JSVAL_IS_NULL(lval))) {
4311: /* MUTANT (del_stmt) */ /*                 atom = GET_ATOM(cx, script, pc); */ 
4312: /* MUTANT (del_stmt) */ /*                 id = ATOM_TO_JSID(atom); */ 
4313: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
4314: /* MUTANT (del_stmt) */ /*                 CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)); */ 
4315: /* MUTANT (negate) */                if(! (!ok))
4317: /* MUTANT (del_stmt) */ /*                 STORE_OPND(-1, rval); */ 
4317: /* MUTANT (rep_const) */                STORE_OPND(0, rval);
4317: /* MUTANT (rep_const) */                STORE_OPND(1, rval);
4317: /* MUTANT (rep_const) */                STORE_OPND(((-1)+1), rval);
4317: /* MUTANT (rep_const) */                STORE_OPND(((-1)-1), rval);
4319: /* MUTANT (del_stmt) */ /*                 slot = JSVAL_TO_INT(lval); */ 
4320: /* MUTANT (del_stmt) */ /*                 GC_POKE(cx, obj->slots[slot]); */ 
4321: /* MUTANT (del_stmt) */ /*                 OBJ_SET_SLOT(cx, obj, slot, rval); */ 
4324: /* MUTANT (del_stmt) */ /*             break; */ 
4333: /* MUTANT (del_stmt) */ /*             obj = fp->varobj; */ 
4334: /* MUTANT (del_stmt) */ /*             attrs = JSPROP_ENUMERATE; */ 
4335: /* MUTANT (negate) */            if(! (!(fp->flags & JSFRAME_EVAL)))
4337: /* MUTANT (rep_op) */            if (op != JSOP_DEFCONST)
4337: /* MUTANT (negate) */            if(! (op == JSOP_DEFCONST))
4341: /* MUTANT (del_stmt) */ /*             id = ATOM_TO_JSID(atom); */ 
4342: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
4343: /* MUTANT (del_stmt) */ /*             ok = js_CheckRedeclaration(cx, obj, id, attrs, &obj2, &prop); */ 
4344: /* MUTANT (negate) */            if(! (!ok))
4348: /* MUTANT (negate) */            if(! (!prop)) {
4351: /* MUTANT (negate) */                if(! (!ok))
4353: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(prop); */ 
4354: /* MUTANT (del_stmt) */ /*                 obj2 = obj; */ 
4363: /* MUTANT (rep_op) */            if (atomIndex <= script->numGlobalVars &&
4363: /* MUTANT (rep_op) */            if (atomIndex > script->numGlobalVars &&
4363: /* MUTANT (rep_op) */            if (atomIndex >= script->numGlobalVars &&
4363: /* MUTANT (rep_op) */            if (atomIndex == script->numGlobalVars &&
4363: /* MUTANT (rep_op) */            if (atomIndex != script->numGlobalVars &&
4363: /* MUTANT (rep_op) */            if (atomIndex < script->numGlobalVars ||
4364: /* MUTANT (rep_op) */                (attrs & JSPROP_PERMANENT) ||
4365: /* MUTANT (rep_op) */                obj2 != obj &&
4365: /* MUTANT (rep_op) */                obj2 == obj ||
4367: /* MUTANT (del_stmt) */ /*                 sprop = (JSScopeProperty *) prop; */ 
4368: /* MUTANT (rep_op) */                if (SPROP_HAS_VALID_SLOT(sprop, OBJ_SCOPE(obj)) ||
4369: /* MUTANT (rep_op) */                    SPROP_HAS_STUB_GETTER(sprop) ||
4377: /* MUTANT (del_stmt) */ /*                     fp->vars[atomIndex] = INT_TO_JSVAL(sprop->slot); */ 
4382: /* MUTANT (del_stmt) */ /*             break; */ 
4384: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_DEFFUN, 1)
4384: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_DEFFUN, -1)
4386: /* MUTANT (del_stmt) */ /*             uintN flags; */ 
4388: /* MUTANT (del_stmt) */ /*             atomIndex = GET_ATOM_INDEX(pc); */ 
4389: /* MUTANT (del_stmt) */ /*             atom = js_GetAtom(cx, &script->atomMap, atomIndex); */ 
4390: /* MUTANT (del_stmt) */ /*             obj = ATOM_TO_OBJECT(atom); */ 
4391: /* MUTANT (del_stmt) */ /*             fun = (JSFunction *) JS_GetPrivate(cx, obj); */ 
4392: /* MUTANT (del_stmt) */ /*             id = ATOM_TO_JSID(fun->atom); */ 
4424: /* MUTANT (del_stmt) */ /*             obj2 = fp->scopeChain; */ 
4425: /* MUTANT (rep_op) */            if (OBJ_GET_PARENT(cx, obj) == obj2) {
4425: /* MUTANT (negate) */            if(! (OBJ_GET_PARENT(cx, obj) != obj2)) {
4426: /* MUTANT (del_stmt) */ /*                 obj = js_CloneFunctionObject(cx, obj, obj2); */ 
4427: /* MUTANT (negate) */                if(! (!obj)) {
4428: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
4429: /* MUTANT (del_stmt) */ /*                     goto out; */ 
4439: /* MUTANT (del_stmt) */ /*             rval = OBJECT_TO_JSVAL(obj); */ 
4446: /* MUTANT (del_stmt) */ /*             attrs = JSPROP_ENUMERATE; */ 
4447: /* MUTANT (negate) */            if(! (!(fp->flags & JSFRAME_EVAL)))
4455: /* MUTANT (del_stmt) */ /*             flags = fun->flags & (JSFUN_GETTER | JSFUN_SETTER); */ 
4455: /* MUTANT (rep_op) */            flags = fun->flags & (JSFUN_GETTER & JSFUN_SETTER);
4456: /* MUTANT (negate) */            if(! (flags)) {
4457: /* MUTANT (del_stmt) */ /*                 attrs |= flags | JSPROP_SHARED; */ 
4457: /* MUTANT (rep_op) */                attrs |= flags & JSPROP_SHARED;
4458: /* MUTANT (del_stmt) */ /*                 rval = JSVAL_VOID; */ 
4468: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
4469: /* MUTANT (del_stmt) */ /*             ok = js_CheckRedeclaration(cx, parent, id, attrs, NULL, NULL); */ 
4470: /* MUTANT (negate) */            if(! (ok)) {
4484: /* MUTANT (negate) */            if(! (!ok))
4487: #if 1 /* MUTANT (rep_const) */
4487: #if -1 /* MUTANT (rep_const) */
4488: /* MUTANT (rep_op) */            if (attrs != (JSPROP_ENUMERATE | JSPROP_PERMANENT) &&
4488: /* MUTANT (rep_op) */            if (attrs == (JSPROP_ENUMERATE & JSPROP_PERMANENT) &&
4488: /* MUTANT (rep_op) */            if (attrs == (JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
4495: /* MUTANT (del_stmt) */ /*                 sprop = (JSScopeProperty *) prop; */ 
4496: /* MUTANT (del_stmt) */ /*                 fp->vars[atomIndex] = INT_TO_JSVAL(sprop->slot); */ 
4513: /* MUTANT (del_stmt) */ /*             atom = js_GetAtom(cx, &script->atomMap, atomIndex); */ 
4514: /* MUTANT (del_stmt) */ /*             obj = ATOM_TO_OBJECT(atom); */ 
4515: /* MUTANT (del_stmt) */ /*             fun = (JSFunction *) JS_GetPrivate(cx, obj); */ 
4517: /* MUTANT (del_stmt) */ /*             parent = fp->scopeChain; */ 
4518: /* MUTANT (rep_op) */            if (OBJ_GET_PARENT(cx, obj) == parent) {
4518: /* MUTANT (negate) */            if(! (OBJ_GET_PARENT(cx, obj) != parent)) {
4519: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
4520: /* MUTANT (del_stmt) */ /*                 obj = js_CloneFunctionObject(cx, obj, parent); */ 
4521: /* MUTANT (negate) */                if(! (!obj)) {
4522: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
4523: /* MUTANT (del_stmt) */ /*                     goto out; */ 
4529: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_ANONFUNOBJ, 1)
4529: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_ANONFUNOBJ, -1)
4534: /* MUTANT (del_stmt) */ /*             parent = fp->scopeChain; */ 
4535: /* MUTANT (rep_op) */            if (OBJ_GET_PARENT(cx, obj) == parent) {
4535: /* MUTANT (negate) */            if(! (OBJ_GET_PARENT(cx, obj) != parent)) {
4536: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
4537: /* MUTANT (del_stmt) */ /*                 obj = js_CloneFunctionObject(cx, obj, parent); */ 
4538: /* MUTANT (negate) */                if(! (!obj)) {
4539: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
4540: /* MUTANT (del_stmt) */ /*                     goto out; */ 
4544: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
4547: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_NAMEDFUNOBJ, 1)
4547: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_NAMEDFUNOBJ, -1)
4550: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSVAL_IS_FUNCTION(cx, rval)); */ 
4560: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
4561: /* MUTANT (del_stmt) */ /*             obj2 = fp->scopeChain; */ 
4562: /* MUTANT (del_stmt) */ /*             parent = js_NewObject(cx, &js_ObjectClass, NULL, obj2); */ 
4563: /* MUTANT (negate) */            if(! (!parent)) {
4564: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
4565: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4583: /* MUTANT (del_stmt) */ /*             obj = js_CloneFunctionObject(cx, JSVAL_TO_OBJECT(rval), parent); */ 
4584: /* MUTANT (negate) */            if(! (!obj)) {
4585: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
4586: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4595: /* MUTANT (del_stmt) */ /*             rval = OBJECT_TO_JSVAL(obj); */ 
4602: /* MUTANT (del_stmt) */ /*             fun = (JSFunction *) JS_GetPrivate(cx, obj); */ 
4603: /* MUTANT (del_stmt) */ /*             attrs = fun->flags & (JSFUN_GETTER | JSFUN_SETTER); */ 
4603: /* MUTANT (rep_op) */            attrs = fun->flags & (JSFUN_GETTER & JSFUN_SETTER);
4604: /* MUTANT (negate) */            if(! (attrs)) {
4605: /* MUTANT (del_stmt) */ /*                 attrs |= JSPROP_SHARED; */ 
4606: /* MUTANT (del_stmt) */ /*                 rval = JSVAL_VOID; */ 
4615: /* MUTANT (rep_op) */                                     attrs &
4616: /* MUTANT (rep_op) */                                     JSPROP_ENUMERATE & JSPROP_PERMANENT |
4616: /* MUTANT (rep_op) */                                     JSPROP_ENUMERATE | JSPROP_PERMANENT &
4621: /* MUTANT (del_stmt) */ /*             fp->scopeChain = obj2; */ 
4622: /* MUTANT (negate) */            if(! (!ok)) {
4623: /* MUTANT (del_stmt) */ /*                 cx->newborn[GCX_OBJECT] = NULL; */ 
4624: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4632: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
4635: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_CLOSURE, 1)
4635: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_CLOSURE, -1)
4645: /* MUTANT (del_stmt) */ /*             obj = ATOM_TO_OBJECT(atom); */ 
4654: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
4655: /* MUTANT (del_stmt) */ /*             obj2 = fp->scopeChain; */ 
4656: /* MUTANT (rep_op) */            if (OBJ_GET_PARENT(cx, obj) == obj2) {
4656: /* MUTANT (negate) */            if(! (OBJ_GET_PARENT(cx, obj) != obj2)) {
4657: /* MUTANT (del_stmt) */ /*                 obj = js_CloneFunctionObject(cx, obj, obj2); */ 
4658: /* MUTANT (negate) */                if(! (!obj)) {
4659: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
4660: /* MUTANT (del_stmt) */ /*                     goto out; */ 
4670: /* MUTANT (del_stmt) */ /*             rval = OBJECT_TO_JSVAL(obj); */ 
4677: /* MUTANT (del_stmt) */ /*             fun = (JSFunction *) JS_GetPrivate(cx, obj); */ 
4678: /* MUTANT (del_stmt) */ /*             attrs = fun->flags & (JSFUN_GETTER | JSFUN_SETTER); */ 
4678: /* MUTANT (rep_op) */            attrs = fun->flags & (JSFUN_GETTER & JSFUN_SETTER);
4679: /* MUTANT (negate) */            if(! (attrs)) {
4680: /* MUTANT (del_stmt) */ /*                 attrs |= JSPROP_SHARED; */ 
4681: /* MUTANT (del_stmt) */ /*                 rval = JSVAL_VOID; */ 
4691: /* MUTANT (rep_op) */                                     attrs & JSPROP_ENUMERATE
4692: /* MUTANT (rep_op) */                                           & JSPROP_PERMANENT,
4696: /* MUTANT (del_stmt) */ /*             fp->scopeChain = obj2; */ 
4697: /* MUTANT (negate) */            if(! (!ok)) {
4698: /* MUTANT (del_stmt) */ /*                 cx->newborn[GCX_OBJECT] = NULL; */ 
4699: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4702: #if 1 /* MUTANT (rep_const) */
4702: #if -1 /* MUTANT (rep_const) */
4703: /* MUTANT (rep_op) */            if (attrs != 0 && script->numGlobalVars) {
4703: /* MUTANT (rep_op) */            if (attrs == 0 || script->numGlobalVars) {
4703: /* MUTANT (rep_const) */            if (attrs == 1 && script->numGlobalVars) {
4703: /* MUTANT (rep_const) */            if (attrs == -1 && script->numGlobalVars) {
4703: /* MUTANT (negate) */            if(! (attrs == 0 && script->numGlobalVars)) {
4709: /* MUTANT (del_stmt) */ /*                 sprop = (JSScopeProperty *) prop; */ 
4710: /* MUTANT (del_stmt) */ /*                 fp->vars[atomIndex] = INT_TO_JSVAL(sprop->slot); */ 
4720: /* MUTANT (rep_op) */            JS_ASSERT(len != 1);
4720: /* MUTANT (rep_const) */            JS_ASSERT(len == 0);
4720: /* MUTANT (rep_const) */            JS_ASSERT(len == -1);
4720: /* MUTANT (rep_const) */            JS_ASSERT(len == ((1)+1));
4721: /* MUTANT (del_stmt) */ /*             op2 = (JSOp) *++pc; */ 
4722: /* MUTANT (del_stmt) */ /*             cs = &js_CodeSpec[op2]; */ 
4723: /* MUTANT (del_stmt) */ /*             len = cs->length; */ 
4728: /* MUTANT (del_stmt) */ /*                 id   = ATOM_TO_JSID(atom); */ 
4729: /* MUTANT (del_stmt) */ /*                 rval = FETCH_OPND(-1); */ 
4729: /* MUTANT (rep_const) */                rval = FETCH_OPND(0);
4729: /* MUTANT (rep_const) */                rval = FETCH_OPND(1);
4729: /* MUTANT (rep_const) */                rval = FETCH_OPND(((-1)+1));
4729: /* MUTANT (rep_const) */                rval = FETCH_OPND(((-1)-1));
4730: /* MUTANT (del_stmt) */ /*                 i = -1; */ 
4730: /* MUTANT (rep_const) */                i = 0;
4730: /* MUTANT (rep_const) */                i = 1;
4730: /* MUTANT (rep_const) */                i = ((-1)+1);
4730: /* MUTANT (rep_const) */                i = ((-1)-1);
4731: /* MUTANT (del_stmt) */ /*                 goto gs_pop_lval; */ 
4734: /* MUTANT (rep_const) */                rval = FETCH_OPND(0);
4734: /* MUTANT (rep_const) */                rval = FETCH_OPND(1);
4734: /* MUTANT (rep_const) */                rval = FETCH_OPND(((-1)+1));
4734: /* MUTANT (rep_const) */                rval = FETCH_OPND(((-1)-1));
4735: /* MUTANT (del_stmt) */ /*                 FETCH_ELEMENT_ID(-2, id); */ 
4735: /* MUTANT (rep_const) */                FETCH_ELEMENT_ID(0, id);
4735: /* MUTANT (rep_const) */                FETCH_ELEMENT_ID(1, id);
4735: /* MUTANT (rep_const) */                FETCH_ELEMENT_ID(-1, id);
4735: /* MUTANT (rep_const) */                FETCH_ELEMENT_ID(((-2)+1), id);
4735: /* MUTANT (rep_const) */                FETCH_ELEMENT_ID(((-2)-1), id);
4736: /* MUTANT (del_stmt) */ /*                 i = -2; */ 
4736: /* MUTANT (rep_const) */                i = 0;
4736: /* MUTANT (rep_const) */                i = 1;
4736: /* MUTANT (rep_const) */                i = -1;
4736: /* MUTANT (rep_const) */                i = ((-2)+1);
4736: /* MUTANT (rep_const) */                i = ((-2)-1);
4738: /* MUTANT (rep_const) */                FETCH_OBJECT(cx, i - 0, lval, obj);
4738: /* MUTANT (rep_const) */                FETCH_OBJECT(cx, i - -1, lval, obj);
4738: /* MUTANT (rep_const) */                FETCH_OBJECT(cx, i - ((1)+1), lval, obj);
4739: /* MUTANT (del_stmt) */ /*                 break; */ 
4743: /* MUTANT (rep_op) */                JS_ASSERT(sp - fp->spbase <= 2);
4743: /* MUTANT (rep_op) */                JS_ASSERT(sp - fp->spbase < 2);
4743: /* MUTANT (rep_op) */                JS_ASSERT(sp - fp->spbase > 2);
4743: /* MUTANT (rep_op) */                JS_ASSERT(sp - fp->spbase == 2);
4743: /* MUTANT (rep_op) */                JS_ASSERT(sp - fp->spbase != 2);
4743: /* MUTANT (rep_const) */                JS_ASSERT(sp - fp->spbase >= 0);
4743: /* MUTANT (rep_const) */                JS_ASSERT(sp - fp->spbase >= 1);
4743: /* MUTANT (rep_const) */                JS_ASSERT(sp - fp->spbase >= -1);
4743: /* MUTANT (rep_const) */                JS_ASSERT(sp - fp->spbase >= ((2)+1));
4743: /* MUTANT (rep_const) */                JS_ASSERT(sp - fp->spbase >= ((2)-1));
4744: /* MUTANT (del_stmt) */ /*                 rval = FETCH_OPND(-1); */ 
4744: /* MUTANT (rep_const) */                rval = FETCH_OPND(0);
4744: /* MUTANT (rep_const) */                rval = FETCH_OPND(1);
4744: /* MUTANT (rep_const) */                rval = FETCH_OPND(((-1)+1));
4744: /* MUTANT (rep_const) */                rval = FETCH_OPND(((-1)-1));
4745: /* MUTANT (del_stmt) */ /*                 i = -1; */ 
4745: /* MUTANT (rep_const) */                i = 0;
4745: /* MUTANT (rep_const) */                i = 1;
4745: /* MUTANT (rep_const) */                i = ((-1)+1);
4745: /* MUTANT (rep_const) */                i = ((-1)-1);
4746: /* MUTANT (del_stmt) */ /*                 atom = GET_ATOM(cx, script, pc); */ 
4747: /* MUTANT (del_stmt) */ /*                 id   = ATOM_TO_JSID(atom); */ 
4748: /* MUTANT (del_stmt) */ /*                 goto gs_get_lval; */ 
4751: /* MUTANT (rep_op) */                JS_ASSERT(sp - fp->spbase <= 3);
4751: /* MUTANT (rep_op) */                JS_ASSERT(sp - fp->spbase < 3);
4751: /* MUTANT (rep_op) */                JS_ASSERT(sp - fp->spbase > 3);
4751: /* MUTANT (rep_op) */                JS_ASSERT(sp - fp->spbase == 3);
4751: /* MUTANT (rep_op) */                JS_ASSERT(sp - fp->spbase != 3);
4751: /* MUTANT (rep_const) */                JS_ASSERT(sp - fp->spbase >= 0);
4751: /* MUTANT (rep_const) */                JS_ASSERT(sp - fp->spbase >= 1);
4751: /* MUTANT (rep_const) */                JS_ASSERT(sp - fp->spbase >= -1);
4751: /* MUTANT (rep_const) */                JS_ASSERT(sp - fp->spbase >= ((3)+1));
4751: /* MUTANT (rep_const) */                JS_ASSERT(sp - fp->spbase >= ((3)-1));
4752: /* MUTANT (del_stmt) */ /*                 rval = FETCH_OPND(-1); */ 
4752: /* MUTANT (rep_const) */                rval = FETCH_OPND(0);
4752: /* MUTANT (rep_const) */                rval = FETCH_OPND(1);
4752: /* MUTANT (rep_const) */                rval = FETCH_OPND(((-1)+1));
4752: /* MUTANT (rep_const) */                rval = FETCH_OPND(((-1)-1));
4753: /* MUTANT (del_stmt) */ /*                 FETCH_ELEMENT_ID(-2, id); */ 
4753: /* MUTANT (rep_const) */                FETCH_ELEMENT_ID(0, id);
4753: /* MUTANT (rep_const) */                FETCH_ELEMENT_ID(1, id);
4753: /* MUTANT (rep_const) */                FETCH_ELEMENT_ID(-1, id);
4753: /* MUTANT (rep_const) */                FETCH_ELEMENT_ID(((-2)+1), id);
4753: /* MUTANT (rep_const) */                FETCH_ELEMENT_ID(((-2)-1), id);
4754: /* MUTANT (del_stmt) */ /*                 i = -2; */ 
4754: /* MUTANT (rep_const) */                i = 0;
4754: /* MUTANT (rep_const) */                i = 1;
4754: /* MUTANT (rep_const) */                i = -1;
4754: /* MUTANT (rep_const) */                i = ((-2)+1);
4754: /* MUTANT (rep_const) */                i = ((-2)-1);
4756: /* MUTANT (rep_const) */                lval = FETCH_OPND(i-0);
4756: /* MUTANT (rep_const) */                lval = FETCH_OPND(i--1);
4756: /* MUTANT (rep_const) */                lval = FETCH_OPND(i-((1)+1));
4757: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(JSVAL_IS_OBJECT(lval)); */ 
4758: /* MUTANT (del_stmt) */ /*                 obj = JSVAL_TO_OBJECT(lval); */ 
4759: /* MUTANT (del_stmt) */ /*                 break; */ 
4763: /* MUTANT (rep_const) */                JS_ASSERT(1);
4763: /* MUTANT (rep_const) */                JS_ASSERT(-1);
4769: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
4770: /* MUTANT (rep_op) */            if (JS_TypeOfValue(cx, rval) == JSTYPE_FUNCTION) {
4770: /* MUTANT (negate) */            if(! (JS_TypeOfValue(cx, rval) != JSTYPE_FUNCTION)) {
4773: /* MUTANT (rep_op) */                                     (op != JSOP_GETTER)
4776: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
4777: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4785: /* MUTANT (negate) */            if(! (!ok))
4788: /* MUTANT (rep_op) */            if (op != JSOP_GETTER) {
4788: /* MUTANT (negate) */            if(! (op == JSOP_GETTER)) {
4789: /* MUTANT (del_stmt) */ /*                 getter = (JSPropertyOp) JSVAL_TO_OBJECT(rval); */ 
4790: /* MUTANT (del_stmt) */ /*                 setter = NULL; */ 
4791: /* MUTANT (del_stmt) */ /*                 attrs = JSPROP_GETTER; */ 
4793: /* MUTANT (del_stmt) */ /*                 getter = NULL; */ 
4794: /* MUTANT (del_stmt) */ /*                 setter = (JSPropertyOp) JSVAL_TO_OBJECT(rval); */ 
4795: /* MUTANT (del_stmt) */ /*                 attrs = JSPROP_SETTER; */ 
4797: /* MUTANT (rep_op) */            attrs |= JSPROP_ENUMERATE & JSPROP_SHARED;
4800: /* MUTANT (del_stmt) */ /*             ok = js_CheckRedeclaration(cx, obj, id, attrs, NULL, NULL); */ 
4801: /* MUTANT (negate) */            if(! (!ok))
4806: /* MUTANT (negate) */            if(! (!ok))
4809: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
4810: /* MUTANT (del_stmt) */ /*             sp += i; */ 
4810: /* MUTANT (rep_op) */            sp -= i;
4810: /* MUTANT (rep_op) */            sp *= i;
4810: /* MUTANT (rep_op) */            sp %= i;
4811: /* MUTANT (negate) */            if(! (cs->ndefs))
4812: /* MUTANT (rep_const) */                STORE_OPND(0, rval);
4812: /* MUTANT (rep_const) */                STORE_OPND(1, rval);
4812: /* MUTANT (rep_const) */                STORE_OPND(((-1)+1), rval);
4812: /* MUTANT (rep_const) */                STORE_OPND(((-1)-1), rval);
4813: /* MUTANT (del_stmt) */ /*             break; */ 
4818: /* MUTANT (rep_const) */            argc = 1;
4818: /* MUTANT (rep_const) */            argc = -1;
4819: /* MUTANT (del_stmt) */ /*             fp->sharpDepth++; */ 
4819: /* MUTANT (rep_op) */            fp->sharpDepth--;
4820: /* MUTANT (del_stmt) */ /*             goto do_new; */ 
4823: /* MUTANT (rep_op) */            if (++fp->sharpDepth == 0)
4823: /* MUTANT (rep_op) */            if (--fp->sharpDepth != 0)
4823: /* MUTANT (rep_const) */            if (--fp->sharpDepth == 1)
4823: /* MUTANT (rep_const) */            if (--fp->sharpDepth == -1)
4823: /* MUTANT (negate) */            if(! (--fp->sharpDepth == 0))
4827: /* MUTANT (del_stmt) */ /*             JS_ASSERT(sp - fp->spbase >= 1); */ 
4827: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase <= 1);
4827: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase < 1);
4827: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase > 1);
4827: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase == 1);
4827: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase != 1);
4827: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= 0);
4827: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= -1);
4827: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= ((1)+1));
4828: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-1); */ 
4828: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
4828: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
4828: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)+1));
4828: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)-1));
4829: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSVAL_IS_OBJECT(lval)); */ 
4830: /* MUTANT (del_stmt) */ /*             cx->newborn[GCX_OBJECT] = JSVAL_TO_GCTHING(lval); */ 
4831: /* MUTANT (del_stmt) */ /*             break; */ 
4835: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase <= 2);
4835: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase < 2);
4835: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase > 2);
4835: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase == 2);
4835: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase != 2);
4835: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= 0);
4835: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= 1);
4835: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= -1);
4835: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= ((2)+1));
4835: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= ((2)-1));
4836: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
4836: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
4836: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
4836: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
4836: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
4839: /* MUTANT (del_stmt) */ /*             atom = GET_ATOM(cx, script, pc); */ 
4840: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
4841: /* MUTANT (del_stmt) */ /*             i = -1; */ 
4841: /* MUTANT (rep_const) */            i = 0;
4841: /* MUTANT (rep_const) */            i = 1;
4841: /* MUTANT (rep_const) */            i = ((-1)+1);
4841: /* MUTANT (rep_const) */            i = ((-1)-1);
4842: /* MUTANT (del_stmt) */ /*             goto do_init; */ 
4846: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase <= 3);
4846: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase < 3);
4846: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase > 3);
4846: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase == 3);
4846: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase != 3);
4846: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= 0);
4846: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= 1);
4846: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= -1);
4846: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= ((3)+1));
4846: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= ((3)-1));
4847: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
4847: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
4847: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
4847: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
4847: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
4850: /* MUTANT (del_stmt) */ /*             FETCH_ELEMENT_ID(-2, id); */ 
4850: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(0, id);
4850: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(1, id);
4850: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(-1, id);
4850: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(((-2)+1), id);
4850: /* MUTANT (rep_const) */            FETCH_ELEMENT_ID(((-2)-1), id);
4851: /* MUTANT (del_stmt) */ /*             i = -2; */ 
4851: /* MUTANT (rep_const) */            i = 0;
4851: /* MUTANT (rep_const) */            i = 1;
4851: /* MUTANT (rep_const) */            i = -1;
4851: /* MUTANT (rep_const) */            i = ((-2)+1);
4851: /* MUTANT (rep_const) */            i = ((-2)-1);
4855: /* MUTANT (rep_const) */            lval = FETCH_OPND(i-0);
4855: /* MUTANT (rep_const) */            lval = FETCH_OPND(i--1);
4855: /* MUTANT (rep_const) */            lval = FETCH_OPND(i-((1)+1));
4856: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSVAL_IS_OBJECT(lval)); */ 
4857: /* MUTANT (del_stmt) */ /*             obj = JSVAL_TO_OBJECT(lval); */ 
4860: /* MUTANT (del_stmt) */ /*             CHECK_ELEMENT_ID(obj, id); */ 
4863: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
4864: /* MUTANT (del_stmt) */ /*             ok = OBJ_SET_PROPERTY(cx, obj, id, &rval); */ 
4865: /* MUTANT (negate) */            if(! (!ok))
4867: /* MUTANT (del_stmt) */ /*             sp += i; */ 
4867: /* MUTANT (rep_op) */            sp -= i;
4867: /* MUTANT (rep_op) */            sp *= i;
4867: /* MUTANT (rep_op) */            sp %= i;
4868: /* MUTANT (del_stmt) */ /*             break; */ 
4873: /* MUTANT (del_stmt) */ /*             obj = fp->sharpArray; */ 
4874: /* MUTANT (negate) */            if(! (!obj)) {
4875: /* MUTANT (del_stmt) */ /*                 obj = js_NewArrayObject(cx, 0, NULL); */ 
4875: /* MUTANT (rep_const) */                obj = js_NewArrayObject(cx, 1, NULL);
4875: /* MUTANT (rep_const) */                obj = js_NewArrayObject(cx, -1, NULL);
4876: /* MUTANT (negate) */                if(! (!obj)) {
4877: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
4878: /* MUTANT (del_stmt) */ /*                     goto out; */ 
4883: /* MUTANT (del_stmt) */ /*             id = INT_TO_JSID(i); */ 
4884: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
4884: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
4884: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
4884: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
4884: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
4885: /* MUTANT (negate) */            if(! (JSVAL_IS_PRIMITIVE(rval))) {
4886: /* MUTANT (del_stmt) */ /*                 char numBuf[12]; */ 
4886: /* MUTANT (rep_const) */                char numBuf[0];
4886: /* MUTANT (rep_const) */                char numBuf[1];
4886: /* MUTANT (rep_const) */                char numBuf[-1];
4886: /* MUTANT (rep_const) */                char numBuf[((12)+1)];
4886: /* MUTANT (rep_const) */                char numBuf[((12)-1)];
4887: /* MUTANT (del_stmt) */ /*                 JS_snprintf(numBuf, sizeof numBuf, "%u", (unsigned) i); */ 
4890: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
4891: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4894: /* MUTANT (negate) */            if(! (!ok))
4896: /* MUTANT (del_stmt) */ /*             break; */ 
4900: /* MUTANT (del_stmt) */ /*             id = INT_TO_JSID(i); */ 
4901: /* MUTANT (del_stmt) */ /*             obj = fp->sharpArray; */ 
4902: /* MUTANT (negate) */            if(! (!obj)) {
4903: /* MUTANT (del_stmt) */ /*                 rval = JSVAL_VOID; */ 
4905: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
4906: /* MUTANT (del_stmt) */ /*                 ok = OBJ_GET_PROPERTY(cx, obj, id, &rval); */ 
4907: /* MUTANT (negate) */                if(! (!ok))
4910: /* MUTANT (negate) */            if(! (!JSVAL_IS_OBJECT(rval))) {
4911: /* MUTANT (del_stmt) */ /*                 char numBuf[12]; */ 
4911: /* MUTANT (rep_const) */                char numBuf[0];
4911: /* MUTANT (rep_const) */                char numBuf[1];
4911: /* MUTANT (rep_const) */                char numBuf[-1];
4911: /* MUTANT (rep_const) */                char numBuf[((12)+1)];
4911: /* MUTANT (rep_const) */                char numBuf[((12)-1)];
4912: /* MUTANT (del_stmt) */ /*                 JS_snprintf(numBuf, sizeof numBuf, "%u", (unsigned) i); */ 
4915: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
4916: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4919: /* MUTANT (del_stmt) */ /*             break; */ 
4932: /* MUTANT (del_stmt) */ /*             JS_ASSERT(i >= 0); */ 
4932: /* MUTANT (rep_op) */            JS_ASSERT(i <= 0);
4932: /* MUTANT (rep_op) */            JS_ASSERT(i < 0);
4932: /* MUTANT (rep_op) */            JS_ASSERT(i > 0);
4932: /* MUTANT (rep_op) */            JS_ASSERT(i == 0);
4932: /* MUTANT (rep_op) */            JS_ASSERT(i != 0);
4932: /* MUTANT (rep_const) */            JS_ASSERT(i >= 1);
4932: /* MUTANT (rep_const) */            JS_ASSERT(i >= -1);
4933: /* MUTANT (del_stmt) */ /*             sp = fp->spbase + i; */ 
4933: /* MUTANT (rep_op) */            sp = fp->spbase - i;
4933: /* MUTANT (rep_op) */            sp = fp->spbase * i;
4933: /* MUTANT (rep_op) */            sp = fp->spbase % i;
4935: /* MUTANT (del_stmt) */ /*             obj = fp->scopeChain; */ 
4936: /* MUTANT (rep_op) */            while (OBJ_GET_CLASS(cx, obj) != &js_WithClass &&
4936: /* MUTANT (rep_op) */            while (OBJ_GET_CLASS(cx, obj) == &js_WithClass ||
4937: /* MUTANT (rep_op) */                   JS_GetPrivate(cx, obj) != fp &&
4937: /* MUTANT (rep_op) */                   JS_GetPrivate(cx, obj) == fp ||
4938: /* MUTANT (rep_op) */                   OBJ_BLOCK_DEPTH(cx, obj) <= i) {
4938: /* MUTANT (rep_op) */                   OBJ_BLOCK_DEPTH(cx, obj) < i) {
4938: /* MUTANT (rep_op) */                   OBJ_BLOCK_DEPTH(cx, obj) > i) {
4938: /* MUTANT (rep_op) */                   OBJ_BLOCK_DEPTH(cx, obj) == i) {
4938: /* MUTANT (rep_op) */                   OBJ_BLOCK_DEPTH(cx, obj) != i) {
4939: /* MUTANT (del_stmt) */ /*                 obj = OBJ_GET_PARENT(cx, obj); */ 
4942: /* MUTANT (del_stmt) */ /*             break; */ 
4945: /* MUTANT (rep_op) */            JS_ASSERT(cx->exception == JSVAL_HOLE);
4946: /* MUTANT (negate) */            if(! (!cx->throwing)) {
4947: /* MUTANT (del_stmt) */ /*                 lval = JSVAL_HOLE; */ 
4949: /* MUTANT (del_stmt) */ /*                 lval = cx->exception; */ 
4950: /* MUTANT (del_stmt) */ /*                 cx->throwing = JS_FALSE; */ 
4953: /* MUTANT (del_stmt) */ /*             i = PTRDIFF(pc, script->main, jsbytecode) + len; */ 
4953: /* MUTANT (rep_op) */            i = PTRDIFF(pc, script->main, jsbytecode) - len;
4953: /* MUTANT (rep_op) */            i = PTRDIFF(pc, script->main, jsbytecode) * len;
4953: /* MUTANT (rep_op) */            i = PTRDIFF(pc, script->main, jsbytecode) % len;
4954: /* MUTANT (del_stmt) */ /*             len = GET_JUMP_OFFSET(pc); */ 
4955: /* MUTANT (del_stmt) */ /*             PUSH(INT_TO_JSVAL(i)); */ 
4956: /* MUTANT (del_stmt) */ /*             break; */ 
4959: /* MUTANT (rep_op) */            JS_ASSERT(cx->exception == JSVAL_HOLE);
4960: /* MUTANT (del_stmt) */ /*             lval = cx->throwing ? cx->exception : JSVAL_HOLE; */ 
4961: /* MUTANT (del_stmt) */ /*             PUSH(lval); */ 
4962: /* MUTANT (del_stmt) */ /*             i = PTRDIFF(pc, script->main, jsbytecode) + len; */ 
4962: /* MUTANT (rep_op) */            i = PTRDIFF(pc, script->main, jsbytecode) - len;
4962: /* MUTANT (rep_op) */            i = PTRDIFF(pc, script->main, jsbytecode) * len;
4962: /* MUTANT (rep_op) */            i = PTRDIFF(pc, script->main, jsbytecode) % len;
4963: /* MUTANT (del_stmt) */ /*             len = GET_JUMPX_OFFSET(pc); */ 
4964: /* MUTANT (del_stmt) */ /*             PUSH(INT_TO_JSVAL(i)); */ 
4965: /* MUTANT (del_stmt) */ /*             break; */ 
4969: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSVAL_IS_INT(rval)); */ 
4970: /* MUTANT (del_stmt) */ /*             lval = POP(); */ 
4971: /* MUTANT (rep_op) */            if (lval == JSVAL_HOLE) {
4971: /* MUTANT (negate) */            if(! (lval != JSVAL_HOLE)) {
4978: /* MUTANT (del_stmt) */ /*                 cx->throwing = JS_TRUE; */ 
4979: /* MUTANT (del_stmt) */ /*                 cx->exception = lval; */ 
4980: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
4981: /* MUTANT (del_stmt) */ /*                 goto out; */ 
4984: /* MUTANT (del_stmt) */ /*             pc = script->main + i; */ 
4984: /* MUTANT (rep_op) */            pc = script->main - i;
4984: /* MUTANT (rep_op) */            pc = script->main * i;
4984: /* MUTANT (rep_op) */            pc = script->main % i;
4985: /* MUTANT (del_stmt) */ /*             len = 0; */ 
4985: /* MUTANT (rep_const) */            len = 1;
4985: /* MUTANT (rep_const) */            len = -1;
4986: /* MUTANT (del_stmt) */ /*             break; */ 
4990: /* MUTANT (del_stmt) */ /*             cx->throwing = JS_FALSE; */ 
4991: /* MUTANT (del_stmt) */ /*             break; */ 
4995: /* MUTANT (del_stmt) */ /*             cx->throwing = JS_TRUE; */ 
4996: /* MUTANT (del_stmt) */ /*             break; */ 
5000: /* MUTANT (del_stmt) */ /*             cx->exception = POP_OPND(); */ 
5001: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
5003: /* MUTANT (del_stmt) */ /*             goto out; */ 
5005: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_INITCATCHVAR, 1)
5005: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_INITCATCHVAR, -1)
5007: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase <= 2);
5007: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase < 2);
5007: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase > 2);
5007: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase == 2);
5007: /* MUTANT (rep_op) */            JS_ASSERT(sp - fp->spbase != 2);
5007: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= 0);
5007: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= 1);
5007: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= -1);
5007: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= ((2)+1));
5007: /* MUTANT (rep_const) */            JS_ASSERT(sp - fp->spbase >= ((2)-1));
5008: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
5008: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5008: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5008: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5008: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5011: /* MUTANT (del_stmt) */ /*             id   = ATOM_TO_JSID(atom); */ 
5014: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-2); */ 
5014: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
5014: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
5014: /* MUTANT (rep_const) */            lval = FETCH_OPND(-1);
5014: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)+1));
5014: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)-1));
5015: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSVAL_IS_OBJECT(lval)); */ 
5016: /* MUTANT (del_stmt) */ /*             obj = JSVAL_TO_OBJECT(lval); */ 
5018: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5025: /* MUTANT (del_stmt) */ /*             ok = OBJ_GET_ATTRIBUTES(cx, obj, id, NULL, &attrs); */ 
5026: /* MUTANT (negate) */            if(! (!ok))
5028: /* MUTANT (rep_op) */            if (!(attrs & (JSPROP_READONLY & JSPROP_PERMANENT |
5028: /* MUTANT (rep_op) */            if (!(attrs & (JSPROP_READONLY | JSPROP_PERMANENT &
5029: /* MUTANT (rep_op) */                           JSPROP_GETTER & JSPROP_SETTER))) {
5033: /* MUTANT (negate) */                if(! (!ok))
5038: /* MUTANT (rep_op) */            sp++;
5044: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5044: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5044: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5044: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5045: /* MUTANT (rep_op) */            if (JSVAL_IS_PRIMITIVE(rval) &&
5047: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
5048: /* MUTANT (del_stmt) */ /*                 str = js_DecompileValueGenerator(cx, -1, rval, NULL); */ 
5048: /* MUTANT (rep_const) */                str = js_DecompileValueGenerator(cx, 0, rval, NULL);
5048: /* MUTANT (rep_const) */                str = js_DecompileValueGenerator(cx, 1, rval, NULL);
5048: /* MUTANT (rep_const) */                str = js_DecompileValueGenerator(cx, ((-1)+1), rval, NULL);
5048: /* MUTANT (rep_const) */                str = js_DecompileValueGenerator(cx, ((-1)-1), rval, NULL);
5049: /* MUTANT (negate) */                if(! (str)) {
5055: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5057: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
5057: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
5057: /* MUTANT (rep_const) */            lval = FETCH_OPND(-1);
5057: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)+1));
5057: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)-1));
5058: /* MUTANT (del_stmt) */ /*             cond = JS_FALSE; */ 
5059: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5060: /* MUTANT (del_stmt) */ /*             ok = obj->map->ops->hasInstance(cx, obj, lval, &cond); */ 
5061: /* MUTANT (negate) */            if(! (!ok))
5063: /* MUTANT (del_stmt) */ /*             sp--; */ 
5063: /* MUTANT (rep_op) */            sp++;
5064: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, BOOLEAN_TO_JSVAL(cond)); */ 
5064: /* MUTANT (rep_const) */            STORE_OPND(0, BOOLEAN_TO_JSVAL(cond));
5064: /* MUTANT (rep_const) */            STORE_OPND(1, BOOLEAN_TO_JSVAL(cond));
5064: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), BOOLEAN_TO_JSVAL(cond));
5064: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), BOOLEAN_TO_JSVAL(cond));
5065: /* MUTANT (del_stmt) */ /*             break; */ 
5071: /* MUTANT (del_stmt) */ /*             JSTrapHandler handler = rt->debuggerHandler; */ 
5072: /* MUTANT (negate) */            if(! (handler)) {
5073: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
5078: /* MUTANT (del_stmt) */ /*                     goto out; */ 
5083: /* MUTANT (del_stmt) */ /*                     goto out; */ 
5087: /* MUTANT (del_stmt) */ /*                     cx->exception = rval; */ 
5088: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
5089: /* MUTANT (del_stmt) */ /*                     goto out; */ 
5102: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5103: /* MUTANT (del_stmt) */ /*             ok = js_SetDefaultXMLNamespace(cx, rval); */ 
5104: /* MUTANT (negate) */            if(! (!ok))
5106: /* MUTANT (del_stmt) */ /*             break; */ 
5110: /* MUTANT (del_stmt) */ /*             ok = js_GetAnyName(cx, &rval); */ 
5111: /* MUTANT (negate) */            if(! (!ok))
5113: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
5114: /* MUTANT (del_stmt) */ /*             break; */ 
5116: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_QNAMEPART, 1)
5116: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_QNAMEPART, -1)
5120: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_QNAMECONST, 1)
5120: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_QNAMECONST, -1)
5122: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-1); */ 
5122: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
5122: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
5122: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)+1));
5122: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)-1));
5123: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5124: /* MUTANT (del_stmt) */ /*             obj = js_ConstructXMLQNameObject(cx, lval, rval); */ 
5125: /* MUTANT (negate) */            if(! (!obj)) {
5126: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5127: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5129: /* MUTANT (rep_const) */            STORE_OPND(0, OBJECT_TO_JSVAL(obj));
5129: /* MUTANT (rep_const) */            STORE_OPND(1, OBJECT_TO_JSVAL(obj));
5129: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), OBJECT_TO_JSVAL(obj));
5129: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), OBJECT_TO_JSVAL(obj));
5133: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5133: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5133: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5133: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5134: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-2); */ 
5134: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
5134: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
5134: /* MUTANT (rep_const) */            lval = FETCH_OPND(-1);
5134: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)+1));
5134: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)-1));
5135: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5136: /* MUTANT (del_stmt) */ /*             obj = js_ConstructXMLQNameObject(cx, lval, rval); */ 
5137: /* MUTANT (negate) */            if(! (!obj)) {
5138: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5139: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5141: /* MUTANT (rep_op) */            sp++;
5142: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, OBJECT_TO_JSVAL(obj)); */ 
5142: /* MUTANT (rep_const) */            STORE_OPND(0, OBJECT_TO_JSVAL(obj));
5142: /* MUTANT (rep_const) */            STORE_OPND(1, OBJECT_TO_JSVAL(obj));
5142: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), OBJECT_TO_JSVAL(obj));
5142: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), OBJECT_TO_JSVAL(obj));
5143: /* MUTANT (del_stmt) */ /*             break; */ 
5146: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5146: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5146: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5146: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5147: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5148: /* MUTANT (del_stmt) */ /*             ok = js_ToAttributeName(cx, &rval); */ 
5149: /* MUTANT (negate) */            if(! (!ok))
5151: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
5151: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
5151: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
5151: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
5151: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
5152: /* MUTANT (del_stmt) */ /*             break; */ 
5155: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5155: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5155: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5155: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5156: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSVAL_IS_STRING(rval)); */ 
5157: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5158: /* MUTANT (del_stmt) */ /*             str = js_EscapeAttributeValue(cx, JSVAL_TO_STRING(rval)); */ 
5159: /* MUTANT (negate) */            if(! (!str)) {
5160: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5161: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5163: /* MUTANT (rep_const) */            STORE_OPND(0, STRING_TO_JSVAL(str));
5163: /* MUTANT (rep_const) */            STORE_OPND(1, STRING_TO_JSVAL(str));
5163: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), STRING_TO_JSVAL(str));
5163: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), STRING_TO_JSVAL(str));
5164: /* MUTANT (del_stmt) */ /*             break; */ 
5168: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5168: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5168: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5168: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5169: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-2); */ 
5169: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
5169: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
5169: /* MUTANT (rep_const) */            lval = FETCH_OPND(-1);
5169: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)+1));
5169: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)-1));
5170: /* MUTANT (del_stmt) */ /*             str = JSVAL_TO_STRING(lval); */ 
5171: /* MUTANT (del_stmt) */ /*             str2 = JSVAL_TO_STRING(rval); */ 
5172: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5173: /* MUTANT (del_stmt) */ /*             str = js_AddAttributePart(cx, op == JSOP_ADDATTRNAME, str, str2); */ 
5173: /* MUTANT (rep_op) */            str = js_AddAttributePart(cx, op != JSOP_ADDATTRNAME, str, str2);
5174: /* MUTANT (negate) */            if(! (!str)) {
5175: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5176: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5178: /* MUTANT (rep_op) */            sp++;
5179: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, STRING_TO_JSVAL(str)); */ 
5179: /* MUTANT (rep_const) */            STORE_OPND(0, STRING_TO_JSVAL(str));
5179: /* MUTANT (rep_const) */            STORE_OPND(1, STRING_TO_JSVAL(str));
5179: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), STRING_TO_JSVAL(str));
5179: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), STRING_TO_JSVAL(str));
5180: /* MUTANT (del_stmt) */ /*             break; */ 
5183: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
5183: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
5183: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)+1));
5183: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)-1));
5184: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5185: /* MUTANT (del_stmt) */ /*             ok = js_FindXMLProperty(cx, lval, &obj, &rval); */ 
5186: /* MUTANT (negate) */            if(! (!ok))
5188: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, OBJECT_TO_JSVAL(obj)); */ 
5188: /* MUTANT (rep_const) */            STORE_OPND(0, OBJECT_TO_JSVAL(obj));
5188: /* MUTANT (rep_const) */            STORE_OPND(1, OBJECT_TO_JSVAL(obj));
5188: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), OBJECT_TO_JSVAL(obj));
5188: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), OBJECT_TO_JSVAL(obj));
5189: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
5190: /* MUTANT (del_stmt) */ /*             break; */ 
5193: /* MUTANT (rep_const) */            obj = JSVAL_TO_OBJECT(FETCH_OPND(0));
5193: /* MUTANT (rep_const) */            obj = JSVAL_TO_OBJECT(FETCH_OPND(1));
5193: /* MUTANT (rep_const) */            obj = JSVAL_TO_OBJECT(FETCH_OPND(-1));
5193: /* MUTANT (rep_const) */            obj = JSVAL_TO_OBJECT(FETCH_OPND(((-3)+1)));
5193: /* MUTANT (rep_const) */            obj = JSVAL_TO_OBJECT(FETCH_OPND(((-3)-1)));
5194: /* MUTANT (del_stmt) */ /*             lval = FETCH_OPND(-2); */ 
5194: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
5194: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
5194: /* MUTANT (rep_const) */            lval = FETCH_OPND(-1);
5194: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)+1));
5194: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-2)-1));
5195: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
5195: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5195: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5195: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5195: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5196: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5197: /* MUTANT (del_stmt) */ /*             ok = js_SetXMLProperty(cx, obj, lval, &rval); */ 
5198: /* MUTANT (negate) */            if(! (!ok))
5200: /* MUTANT (del_stmt) */ /*             sp -= 2; */ 
5200: /* MUTANT (rep_op) */            sp += 2;
5200: /* MUTANT (rep_op) */            sp *= 2;
5200: /* MUTANT (rep_op) */            sp %= 2;
5200: /* MUTANT (rep_const) */            sp -= 0;
5200: /* MUTANT (rep_const) */            sp -= 1;
5200: /* MUTANT (rep_const) */            sp -= -1;
5200: /* MUTANT (rep_const) */            sp -= ((2)+1);
5200: /* MUTANT (rep_const) */            sp -= ((2)-1);
5201: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
5201: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
5201: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
5201: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
5201: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
5202: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
5203: /* MUTANT (del_stmt) */ /*             break; */ 
5206: /* MUTANT (rep_const) */            lval = FETCH_OPND(0);
5206: /* MUTANT (rep_const) */            lval = FETCH_OPND(1);
5206: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)+1));
5206: /* MUTANT (rep_const) */            lval = FETCH_OPND(((-1)-1));
5207: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5208: /* MUTANT (del_stmt) */ /*             ok = js_FindXMLProperty(cx, lval, &obj, &rval); */ 
5209: /* MUTANT (negate) */            if(! (!ok))
5211: /* MUTANT (del_stmt) */ /*             ok = js_GetXMLProperty(cx, obj, rval, &rval); */ 
5212: /* MUTANT (negate) */            if(! (!ok))
5214: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
5214: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
5214: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
5214: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
5214: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
5215: /* MUTANT (del_stmt) */ /*             break; */ 
5219: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 0, lval, obj);
5219: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 1, lval, obj);
5219: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, -1, lval, obj);
5219: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-2)+1), lval, obj);
5219: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-2)-1), lval, obj);
5220: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
5220: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5220: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5220: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5220: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5221: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5222: /* MUTANT (del_stmt) */ /*             ok = js_GetXMLDescendants(cx, obj, rval, &rval); */ 
5223: /* MUTANT (negate) */            if(! (!ok))
5226: /* MUTANT (rep_op) */            if (op != JSOP_DELDESC) {
5226: /* MUTANT (negate) */            if(! (op == JSOP_DELDESC)) {
5227: /* MUTANT (del_stmt) */ /*                 sp[-1] = rval; */           /* set local root */
5227: /* MUTANT (rep_const) */                sp[0] = rval;          /* set local root */
5227: /* MUTANT (rep_const) */                sp[1] = rval;          /* set local root */
5227: /* MUTANT (rep_const) */                sp[((-1)+1)] = rval;          /* set local root */
5227: /* MUTANT (rep_const) */                sp[((-1)-1)] = rval;          /* set local root */
5228: /* MUTANT (del_stmt) */ /*                 ok = js_DeleteXMLListElements(cx, JSVAL_TO_OBJECT(rval)); */ 
5229: /* MUTANT (negate) */                if(! (!ok))
5231: /* MUTANT (del_stmt) */ /*                 rval = JSVAL_TRUE; */       /* always succeed */
5234: /* MUTANT (rep_op) */            sp++;
5235: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
5235: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
5235: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
5235: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
5235: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
5236: /* MUTANT (del_stmt) */ /*             break; */ 
5239: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 0, lval, obj);
5239: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 1, lval, obj);
5239: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-1)+1), lval, obj);
5239: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-1)-1), lval, obj);
5240: /* MUTANT (del_stmt) */ /*             len = GET_JUMP_OFFSET(pc); */ 
5241: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5242: /* MUTANT (del_stmt) */ /*             ok = js_FilterXMLList(cx, obj, pc + cs->length, &rval); */ 
5242: /* MUTANT (rep_op) */            ok = js_FilterXMLList(cx, obj, pc - cs->length, &rval);
5242: /* MUTANT (rep_op) */            ok = js_FilterXMLList(cx, obj, pc * cs->length, &rval);
5242: /* MUTANT (rep_op) */            ok = js_FilterXMLList(cx, obj, pc % cs->length, &rval);
5243: /* MUTANT (negate) */            if(! (!ok))
5245: /* MUTANT (del_stmt) */ /*             JS_ASSERT(fp->sp == sp); */ 
5245: /* MUTANT (rep_op) */            JS_ASSERT(fp->sp != sp);
5246: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
5246: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
5246: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
5246: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
5246: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
5247: /* MUTANT (del_stmt) */ /*             break; */ 
5251: /* MUTANT (del_stmt) */ /*             goto out; */ 
5258: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5258: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5258: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5258: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5259: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5260: /* MUTANT (del_stmt) */ /*             obj = js_ValueToXMLObject(cx, rval); */ 
5261: /* MUTANT (negate) */            if(! (!obj)) {
5262: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5263: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5265: /* MUTANT (rep_const) */            STORE_OPND(0, OBJECT_TO_JSVAL(obj));
5265: /* MUTANT (rep_const) */            STORE_OPND(1, OBJECT_TO_JSVAL(obj));
5265: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), OBJECT_TO_JSVAL(obj));
5265: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), OBJECT_TO_JSVAL(obj));
5266: /* MUTANT (del_stmt) */ /*             break; */ 
5269: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5269: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5269: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5269: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5270: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5271: /* MUTANT (del_stmt) */ /*             obj = js_ValueToXMLListObject(cx, rval); */ 
5272: /* MUTANT (negate) */            if(! (!obj)) {
5273: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5274: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5276: /* MUTANT (rep_const) */            STORE_OPND(0, OBJECT_TO_JSVAL(obj));
5276: /* MUTANT (rep_const) */            STORE_OPND(1, OBJECT_TO_JSVAL(obj));
5276: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), OBJECT_TO_JSVAL(obj));
5276: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), OBJECT_TO_JSVAL(obj));
5277: /* MUTANT (del_stmt) */ /*             break; */ 
5280: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5280: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5280: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5280: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5281: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5282: /* MUTANT (del_stmt) */ /*             str = js_ValueToString(cx, rval); */ 
5283: /* MUTANT (negate) */            if(! (!str)) {
5284: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5285: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5287: /* MUTANT (rep_const) */            STORE_OPND(0, STRING_TO_JSVAL(str));
5287: /* MUTANT (rep_const) */            STORE_OPND(1, STRING_TO_JSVAL(str));
5287: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), STRING_TO_JSVAL(str));
5287: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), STRING_TO_JSVAL(str));
5288: /* MUTANT (del_stmt) */ /*             break; */ 
5291: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5291: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5291: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5291: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5292: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5293: /* MUTANT (negate) */            if(! (VALUE_IS_XML(cx, rval))) {
5294: /* MUTANT (del_stmt) */ /*                 str = js_ValueToXMLString(cx, rval); */ 
5296: /* MUTANT (del_stmt) */ /*                 str = js_ValueToString(cx, rval); */ 
5297: /* MUTANT (negate) */                if(! (str))
5300: /* MUTANT (negate) */            if(! (!str)) {
5301: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5302: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5304: /* MUTANT (rep_const) */            STORE_OPND(0, STRING_TO_JSVAL(str));
5304: /* MUTANT (rep_const) */            STORE_OPND(1, STRING_TO_JSVAL(str));
5304: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), STRING_TO_JSVAL(str));
5304: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), STRING_TO_JSVAL(str));
5305: /* MUTANT (del_stmt) */ /*             break; */ 
5307: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_XMLOBJECT, 1)
5307: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_XMLOBJECT, -1)
5309: /* MUTANT (del_stmt) */ /*             obj = js_CloneXMLObject(cx, ATOM_TO_OBJECT(atom)); */ 
5310: /* MUTANT (negate) */            if(! (!obj)) {
5311: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5312: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5315: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
5318: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_XMLCDATA, 1)
5318: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_XMLCDATA, -1)
5320: /* MUTANT (del_stmt) */ /*             obj = js_NewXMLSpecialObject(cx, JSXML_CLASS_TEXT, NULL, str); */ 
5321: /* MUTANT (negate) */            if(! (!obj)) {
5322: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5323: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5328: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_XMLCOMMENT, 1)
5328: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_XMLCOMMENT, -1)
5330: /* MUTANT (del_stmt) */ /*             obj = js_NewXMLSpecialObject(cx, JSXML_CLASS_COMMENT, NULL, str); */ 
5331: /* MUTANT (negate) */            if(! (!obj)) {
5332: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5333: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5338: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_XMLPI, 1)
5338: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_XMLPI, -1)
5340: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
5340: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5340: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5340: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5340: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5341: /* MUTANT (del_stmt) */ /*             str2 = JSVAL_TO_STRING(rval); */ 
5342: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5346: /* MUTANT (negate) */            if(! (!obj)) {
5347: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
5348: /* MUTANT (del_stmt) */ /*                 goto out; */ 
5350: /* MUTANT (rep_const) */            STORE_OPND(0, OBJECT_TO_JSVAL(obj));
5350: /* MUTANT (rep_const) */            STORE_OPND(1, OBJECT_TO_JSVAL(obj));
5350: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), OBJECT_TO_JSVAL(obj));
5350: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), OBJECT_TO_JSVAL(obj));
5353: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_GETMETHOD, 1)
5353: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_GETMETHOD, -1)
5356: /* MUTANT (del_stmt) */ /*             FETCH_OBJECT(cx, -1, lval, obj); */ 
5356: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 0, lval, obj);
5356: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 1, lval, obj);
5356: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-1)+1), lval, obj);
5356: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-1)-1), lval, obj);
5357: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5360: /* MUTANT (negate) */            if(! (OBJECT_IS_XML(cx, obj))) {
5361: /* MUTANT (del_stmt) */ /*                 JSXMLObjectOps *ops; */ 
5363: /* MUTANT (del_stmt) */ /*                 ops = (JSXMLObjectOps *) obj->map->ops; */ 
5364: /* MUTANT (del_stmt) */ /*                 obj = ops->getMethod(cx, obj, id, &rval); */ 
5365: /* MUTANT (negate) */                if(! (!obj))
5368: /* MUTANT (del_stmt) */ /*                 CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)); */ 
5370: /* MUTANT (negate) */            if(! (!ok))
5372: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
5372: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
5372: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
5372: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
5372: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
5375: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_SETMETHOD, 1)
5375: /* MUTANT (rep_const) */          BEGIN_LITOPX_CASE(JSOP_SETMETHOD, -1)
5378: /* MUTANT (del_stmt) */ /*             rval = FETCH_OPND(-1); */ 
5378: /* MUTANT (rep_const) */            rval = FETCH_OPND(0);
5378: /* MUTANT (rep_const) */            rval = FETCH_OPND(1);
5378: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)+1));
5378: /* MUTANT (rep_const) */            rval = FETCH_OPND(((-1)-1));
5379: /* MUTANT (del_stmt) */ /*             FETCH_OBJECT(cx, -2, lval, obj); */ 
5379: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 0, lval, obj);
5379: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, 1, lval, obj);
5379: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, -1, lval, obj);
5379: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-2)+1), lval, obj);
5379: /* MUTANT (rep_const) */            FETCH_OBJECT(cx, ((-2)-1), lval, obj);
5380: /* MUTANT (del_stmt) */ /*             SAVE_SP(fp); */ 
5383: /* MUTANT (negate) */            if(! (OBJECT_IS_XML(cx, obj))) {
5384: /* MUTANT (del_stmt) */ /*                 JSXMLObjectOps *ops; */ 
5386: /* MUTANT (del_stmt) */ /*                 ops = (JSXMLObjectOps *) obj->map->ops; */ 
5387: /* MUTANT (del_stmt) */ /*                 ok = ops->setMethod(cx, obj, id, &rval); */ 
5389: /* MUTANT (del_stmt) */ /*                 CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)); */ 
5391: /* MUTANT (negate) */            if(! (!ok))
5393: /* MUTANT (del_stmt) */ /*             --sp; */ 
5393: /* MUTANT (rep_op) */            ++sp;
5394: /* MUTANT (del_stmt) */ /*             STORE_OPND(-1, rval); */ 
5394: /* MUTANT (rep_const) */            STORE_OPND(0, rval);
5394: /* MUTANT (rep_const) */            STORE_OPND(1, rval);
5394: /* MUTANT (rep_const) */            STORE_OPND(((-1)+1), rval);
5394: /* MUTANT (rep_const) */            STORE_OPND(((-1)-1), rval);
5395: /* MUTANT (del_stmt) */ /*             obj = NULL; */ 
5400: /* MUTANT (negate) */            if(! (!ok))
5402: /* MUTANT (del_stmt) */ /*             PUSH_OPND(rval); */ 
5403: /* MUTANT (del_stmt) */ /*             break; */ 
5407: /* MUTANT (del_stmt) */ /*             break; */ 
5411: /* MUTANT (del_stmt) */ /*             char numBuf[12]; */ 
5411: /* MUTANT (rep_const) */            char numBuf[0];
5411: /* MUTANT (rep_const) */            char numBuf[1];
5411: /* MUTANT (rep_const) */            char numBuf[-1];
5411: /* MUTANT (rep_const) */            char numBuf[((12)+1)];
5411: /* MUTANT (rep_const) */            char numBuf[((12)-1)];
5412: /* MUTANT (del_stmt) */ /*             JS_snprintf(numBuf, sizeof numBuf, "%d", op); */ 
5415: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
5416: /* MUTANT (del_stmt) */ /*             goto out; */ 
5421: /* MUTANT (rep_op) */        pc -= len;
5421: /* MUTANT (rep_op) */        pc *= len;
5421: /* MUTANT (rep_op) */        pc %= len;
5424: /* MUTANT (negate) */        if(! (tracefp)) {
5425: /* MUTANT (del_stmt) */ /*             intN ndefs, n; */ 
5426: /* MUTANT (del_stmt) */ /*             jsval *siter; */ 
5428: /* MUTANT (del_stmt) */ /*             ndefs = cs->ndefs; */ 
5429: /* MUTANT (negate) */            if(! (ndefs)) {
5430: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
5431: /* MUTANT (rep_op) */                if (op != JSOP_FORELEM && sp[-1] == JSVAL_FALSE)
5431: /* MUTANT (rep_op) */                if (op == JSOP_FORELEM || sp[-1] == JSVAL_FALSE)
5431: /* MUTANT (rep_op) */                if (op == JSOP_FORELEM && sp[-1] != JSVAL_FALSE)
5431: /* MUTANT (rep_const) */                if (op == JSOP_FORELEM && sp[0] == JSVAL_FALSE)
5431: /* MUTANT (rep_const) */                if (op == JSOP_FORELEM && sp[1] == JSVAL_FALSE)
5431: /* MUTANT (rep_const) */                if (op == JSOP_FORELEM && sp[((-1)+1)] == JSVAL_FALSE)
5431: /* MUTANT (rep_const) */                if (op == JSOP_FORELEM && sp[((-1)-1)] == JSVAL_FALSE)
5431: /* MUTANT (negate) */                if(! (op == JSOP_FORELEM && sp[-1] == JSVAL_FALSE))
5432: /* MUTANT (rep_op) */                    ++ndefs;
5433: /* MUTANT (rep_op) */                for (n = -ndefs; n <= 0; n++) {
5433: /* MUTANT (rep_op) */                for (n = -ndefs; n > 0; n++) {
5433: /* MUTANT (rep_op) */                for (n = -ndefs; n >= 0; n++) {
5433: /* MUTANT (rep_op) */                for (n = -ndefs; n == 0; n++) {
5433: /* MUTANT (rep_op) */                for (n = -ndefs; n != 0; n++) {
5433: /* MUTANT (rep_op) */                for (n = -ndefs; n < 0; n--) {
5433: /* MUTANT (rep_const) */                for (n = -ndefs; n < 1; n++) {
5433: /* MUTANT (rep_const) */                for (n = -ndefs; n < -1; n++) {
5434: /* MUTANT (del_stmt) */ /*                     str = js_DecompileValueGenerator(cx, n, sp[n], NULL); */ 
5435: /* MUTANT (negate) */                    if(! (str)) {
5437: /* MUTANT (rep_op) */                                (n != -ndefs) ? "  output:" : ",",
5444: /* MUTANT (rep_op) */            for (siter = fp->spbase; siter <= sp; siter++) {
5444: /* MUTANT (rep_op) */            for (siter = fp->spbase; siter > sp; siter++) {
5444: /* MUTANT (rep_op) */            for (siter = fp->spbase; siter >= sp; siter++) {
5444: /* MUTANT (rep_op) */            for (siter = fp->spbase; siter == sp; siter++) {
5444: /* MUTANT (rep_op) */            for (siter = fp->spbase; siter != sp; siter++) {
5444: /* MUTANT (rep_op) */            for (siter = fp->spbase; siter < sp; siter--) {
5445: /* MUTANT (del_stmt) */ /*                 str = js_ValueToSource(cx, *siter); */ 
5456: /* MUTANT (negate) */    if(! (!ok)) {
5483: /* MUTANT (rep_op) */        if (cx->throwing || JS_LIKELY(mark != NULL)) {
5483: /* MUTANT (rep_op) */        if (cx->throwing && JS_LIKELY(mark == NULL)) {
5483: /* MUTANT (negate) */        if(! (cx->throwing && JS_LIKELY(mark != NULL))) {
5487: /* MUTANT (del_stmt) */ /*             JSTrapHandler handler = rt->throwHook; */ 
5488: /* MUTANT (negate) */            if(! (handler)) {
5489: /* MUTANT (del_stmt) */ /*                 SAVE_SP(fp); */ 
5493: /* MUTANT (del_stmt) */ /*                     goto no_catch; */ 
5496: /* MUTANT (del_stmt) */ /*                     cx->throwing = JS_FALSE; */ 
5497: /* MUTANT (del_stmt) */ /*                     fp->rval = rval; */ 
5498: /* MUTANT (del_stmt) */ /*                     goto no_catch; */ 
5511: /* MUTANT (negate) */            if(! (pc)) {
5513: /* MUTANT (del_stmt) */ /*                 len = 0; */ 
5513: /* MUTANT (rep_const) */                len = 1;
5513: /* MUTANT (rep_const) */                len = -1;
5514: /* MUTANT (del_stmt) */ /*                 ok = JS_TRUE; */ 
5530: /* MUTANT (negate) */    if(! (inlineCallCount)) {
5542: /* MUTANT (rep_op) */    if (JS_LIKELY(mark == NULL)) {
5542: /* MUTANT (negate) */    if(! (JS_LIKELY(mark != NULL))) {
5543: /* MUTANT (del_stmt) */ /*         fp->sp = fp->spbase; */ 
5544: /* MUTANT (del_stmt) */ /*         fp->spbase = NULL; */ 
5545: /* MUTANT (del_stmt) */ /*         js_FreeRawStack(cx, mark); */ 
5547: /* MUTANT (del_stmt) */ /*         SAVE_SP(fp); */ 
5551: /* MUTANT (rep_op) */    if (cx->version != currentVersion && currentVersion != originalVersion)
5551: /* MUTANT (rep_op) */    if (cx->version == currentVersion || currentVersion != originalVersion)
5551: /* MUTANT (rep_op) */    if (cx->version == currentVersion && currentVersion == originalVersion)
5551: /* MUTANT (negate) */    if(! (cx->version == currentVersion && currentVersion != originalVersion))
5553: /* MUTANT (del_stmt) */ /*     cx->interpLevel--; */ 
5553: /* MUTANT (rep_op) */    cx->interpLevel++;
5554: /* MUTANT (del_stmt) */ /*     return ok; */ 
5558: /* MUTANT (del_stmt) */ /*         const char *printable = js_AtomToPrintableString(cx, atom); */ 
5559: /* MUTANT (negate) */        if(! (printable))
5561: /* MUTANT (del_stmt) */ /*         ok = JS_FALSE; */ 
5562: /* MUTANT (del_stmt) */ /*         goto out; */ 
