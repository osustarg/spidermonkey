74: /* MUTANT (del_stmt) */ /* const char js_var_str[]         = "var"; */ 
75: /* MUTANT (del_stmt) */ /* const char js_function_str[]    = "function"; */ 
76: /* MUTANT (del_stmt) */ /* const char js_in_str[]          = "in"; */ 
77: /* MUTANT (del_stmt) */ /* const char js_instanceof_str[]  = "instanceof"; */ 
78: /* MUTANT (del_stmt) */ /* const char js_new_str[]         = "new"; */ 
79: /* MUTANT (del_stmt) */ /* const char js_delete_str[]      = "delete"; */ 
80: /* MUTANT (del_stmt) */ /* const char js_typeof_str[]      = "typeof"; */ 
81: /* MUTANT (del_stmt) */ /* const char js_void_str[]        = "void"; */ 
82: /* MUTANT (del_stmt) */ /* const char js_null_str[]        = "null"; */ 
83: /* MUTANT (del_stmt) */ /* const char js_this_str[]        = "this"; */ 
84: /* MUTANT (del_stmt) */ /* const char js_false_str[]       = "false"; */ 
85: /* MUTANT (del_stmt) */ /* const char js_true_str[]        = "true"; */ 
86: /* MUTANT (del_stmt) */ /* const char js_default_str[]     = "default"; */ 
88: /* MUTANT (del_stmt) */ /* const char *js_incop_str[]      = {"++", "--"}; */ 
88: /* MUTANT (rep_op) */const char *js_incop_str[]      = {"++", "++"};
108: /* MUTANT (del_stmt) */ /* uintN js_NumCodeSpecs = sizeof (js_CodeSpec) / sizeof js_CodeSpec[0]; */ 
108: /* MUTANT (rep_const) */uintN js_NumCodeSpecs = sizeof (js_CodeSpec) / sizeof js_CodeSpec[1];
108: /* MUTANT (rep_const) */uintN js_NumCodeSpecs = sizeof (js_CodeSpec) / sizeof js_CodeSpec[-1];
115: /* MUTANT (del_stmt) */ /*     uint32 type; */ 
117: /* MUTANT (del_stmt) */ /*     type = (js_CodeSpec[*pc].format & JOF_TYPEMASK); */ 
118: /* MUTANT (negate) */    if(! (JOF_TYPE_IS_EXTENDED_JUMP(type)))
120: /* MUTANT (del_stmt) */ /*     return GET_JUMP_OFFSET(pc2); */ 
128: /* MUTANT (del_stmt) */ /*     jsbytecode *pc, *end; */ 
129: /* MUTANT (del_stmt) */ /*     uintN len; */ 
131: /* MUTANT (del_stmt) */ /*     pc = script->code; */ 
132: /* MUTANT (del_stmt) */ /*     end = pc + script->length; */ 
132: /* MUTANT (rep_op) */    end = pc - script->length;
132: /* MUTANT (rep_op) */    end = pc * script->length;
132: /* MUTANT (rep_op) */    end = pc % script->length;
133: /* MUTANT (rep_op) */    while (pc <= end) {
133: /* MUTANT (rep_op) */    while (pc > end) {
133: /* MUTANT (rep_op) */    while (pc >= end) {
133: /* MUTANT (rep_op) */    while (pc == end) {
133: /* MUTANT (rep_op) */    while (pc != end) {
133: /* MUTANT (negate) */    while(! (pc < end)) {
134: /* MUTANT (rep_op) */        if (pc != script->main)
134: /* MUTANT (negate) */        if(! (pc == script->main))
139: /* MUTANT (negate) */        if(! (!len))
141: /* MUTANT (del_stmt) */ /*         pc += len; */ 
141: /* MUTANT (rep_op) */        pc -= len;
141: /* MUTANT (rep_op) */        pc *= len;
141: /* MUTANT (rep_op) */        pc %= len;
150: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
151: /* MUTANT (del_stmt) */ /*     const JSCodeSpec *cs; */ 
152: /* MUTANT (del_stmt) */ /*     ptrdiff_t len, off, jmplen; */ 
153: /* MUTANT (del_stmt) */ /*     uint32 type; */ 
154: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
155: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
157: /* MUTANT (del_stmt) */ /*     op = (JSOp)*pc; */ 
158: /* MUTANT (rep_op) */    if (op <= JSOP_LIMIT) {
158: /* MUTANT (rep_op) */    if (op < JSOP_LIMIT) {
158: /* MUTANT (rep_op) */    if (op > JSOP_LIMIT) {
158: /* MUTANT (rep_op) */    if (op == JSOP_LIMIT) {
158: /* MUTANT (rep_op) */    if (op != JSOP_LIMIT) {
158: /* MUTANT (negate) */    if(! (op >= JSOP_LIMIT)) {
159: /* MUTANT (del_stmt) */ /*         char numBuf1[12], numBuf2[12]; */ 
159: /* MUTANT (rep_const) */        char numBuf1[0], numBuf2[12];
159: /* MUTANT (rep_const) */        char numBuf1[1], numBuf2[12];
159: /* MUTANT (rep_const) */        char numBuf1[-1], numBuf2[12];
159: /* MUTANT (rep_const) */        char numBuf1[((12)+1)], numBuf2[12];
159: /* MUTANT (rep_const) */        char numBuf1[((12)-1)], numBuf2[12];
159: /* MUTANT (rep_const) */        char numBuf1[12], numBuf2[0];
159: /* MUTANT (rep_const) */        char numBuf1[12], numBuf2[1];
159: /* MUTANT (rep_const) */        char numBuf1[12], numBuf2[-1];
159: /* MUTANT (rep_const) */        char numBuf1[12], numBuf2[((12)+1)];
159: /* MUTANT (rep_const) */        char numBuf1[12], numBuf2[((12)-1)];
160: /* MUTANT (del_stmt) */ /*         JS_snprintf(numBuf1, sizeof numBuf1, "%d", op); */ 
161: /* MUTANT (del_stmt) */ /*         JS_snprintf(numBuf2, sizeof numBuf2, "%d", JSOP_LIMIT); */ 
164: /* MUTANT (del_stmt) */ /*         return 0; */ 
164: /* MUTANT (rep_const) */        return 1;
164: /* MUTANT (rep_const) */        return -1;
167: /* MUTANT (del_stmt) */ /*     len = (ptrdiff_t) cs->length; */ 
168: /* MUTANT (del_stmt) */ /*     fprintf(fp, "%05u:", loc); */ 
168: /* MUTANT (rep_const) */    fprintf(fp, "%0u:", loc);
168: /* MUTANT (rep_const) */    fprintf(fp, "%1u:", loc);
168: /* MUTANT (rep_const) */    fprintf(fp, "%-1u:", loc);
168: /* MUTANT (rep_const) */    fprintf(fp, "%((05)+1)u:", loc);
168: /* MUTANT (rep_const) */    fprintf(fp, "%((05)-1)u:", loc);
169: /* MUTANT (negate) */    if(! (lines))
170: /* MUTANT (rep_const) */        fprintf(fp, "%0u", JS_PCToLineNumber(cx, script, pc));
170: /* MUTANT (rep_const) */        fprintf(fp, "%1u", JS_PCToLineNumber(cx, script, pc));
170: /* MUTANT (rep_const) */        fprintf(fp, "%-1u", JS_PCToLineNumber(cx, script, pc));
170: /* MUTANT (rep_const) */        fprintf(fp, "%((4)+1)u", JS_PCToLineNumber(cx, script, pc));
170: /* MUTANT (rep_const) */        fprintf(fp, "%((4)-1)u", JS_PCToLineNumber(cx, script, pc));
171: /* MUTANT (del_stmt) */ /*     fprintf(fp, "  %s", cs->name); */ 
172: /* MUTANT (del_stmt) */ /*     type = cs->format & JOF_TYPEMASK; */ 
175: /* MUTANT (rep_op) */        if (op != JSOP_TRAP) {
175: /* MUTANT (negate) */        if(! (op == JSOP_TRAP)) {
176: /* MUTANT (del_stmt) */ /*             op = JS_GetTrapOpcode(cx, script, pc); */ 
177: /* MUTANT (rep_op) */            if (op != JSOP_LIMIT)
177: /* MUTANT (negate) */            if(! (op == JSOP_LIMIT))
178: /* MUTANT (rep_const) */                return 1;
178: /* MUTANT (rep_const) */                return -1;
179: /* MUTANT (del_stmt) */ /*             len = (ptrdiff_t) js_CodeSpec[op].length; */ 
186: /* MUTANT (del_stmt) */ /*         fprintf(fp, " %u (%d)", loc + off, off); */ 
186: /* MUTANT (rep_op) */        fprintf(fp, " %u (%d)", loc - off, off);
186: /* MUTANT (rep_op) */        fprintf(fp, " %u (%d)", loc * off, off);
186: /* MUTANT (rep_op) */        fprintf(fp, " %u (%d)", loc % off, off);
187: /* MUTANT (del_stmt) */ /*         break; */ 
191: /* MUTANT (del_stmt) */ /*         str = js_ValueToSource(cx, ATOM_KEY(atom)); */ 
192: /* MUTANT (negate) */        if(! (!str))
193: /* MUTANT (rep_const) */            return 1;
193: /* MUTANT (rep_const) */            return -1;
194: /* MUTANT (del_stmt) */ /*         fprintf(fp, " %s", JS_GetStringBytes(str)); */ 
195: /* MUTANT (del_stmt) */ /*         break; */ 
199: /* MUTANT (del_stmt) */ /*         break; */ 
205: /* MUTANT (del_stmt) */ /*         jsbytecode *pc2; */ 
206: /* MUTANT (del_stmt) */ /*         jsint i, low, high; */ 
208: /* MUTANT (rep_op) */        jmplen = (type != JOF_TABLESWITCH) ? JUMP_OFFSET_LEN
210: /* MUTANT (del_stmt) */ /*         pc2 = pc; */ 
211: /* MUTANT (del_stmt) */ /*         off = GetJumpOffset(pc, pc2); */ 
212: /* MUTANT (del_stmt) */ /*         pc2 += jmplen; */ 
212: /* MUTANT (rep_op) */        pc2 -= jmplen;
212: /* MUTANT (rep_op) */        pc2 *= jmplen;
212: /* MUTANT (rep_op) */        pc2 %= jmplen;
213: /* MUTANT (del_stmt) */ /*         low = GET_JUMP_OFFSET(pc2); */ 
214: /* MUTANT (del_stmt) */ /*         pc2 += JUMP_OFFSET_LEN; */ 
214: /* MUTANT (rep_op) */        pc2 -= JUMP_OFFSET_LEN;
214: /* MUTANT (rep_op) */        pc2 *= JUMP_OFFSET_LEN;
214: /* MUTANT (rep_op) */        pc2 %= JUMP_OFFSET_LEN;
215: /* MUTANT (del_stmt) */ /*         high = GET_JUMP_OFFSET(pc2); */ 
216: /* MUTANT (del_stmt) */ /*         pc2 += JUMP_OFFSET_LEN; */ 
216: /* MUTANT (rep_op) */        pc2 -= JUMP_OFFSET_LEN;
216: /* MUTANT (rep_op) */        pc2 *= JUMP_OFFSET_LEN;
216: /* MUTANT (rep_op) */        pc2 %= JUMP_OFFSET_LEN;
217: /* MUTANT (del_stmt) */ /*         fprintf(fp, " defaultOffset %d low %d high %d", off, low, high); */ 
218: /* MUTANT (rep_op) */        for (i = low; i < high; i++) {
218: /* MUTANT (rep_op) */        for (i = low; i > high; i++) {
218: /* MUTANT (rep_op) */        for (i = low; i >= high; i++) {
218: /* MUTANT (rep_op) */        for (i = low; i == high; i++) {
218: /* MUTANT (rep_op) */        for (i = low; i != high; i++) {
218: /* MUTANT (rep_op) */        for (i = low; i <= high; i--) {
219: /* MUTANT (del_stmt) */ /*             off = GetJumpOffset(pc, pc2); */ 
220: /* MUTANT (del_stmt) */ /*             fprintf(fp, "\n\t%d: %d", i, off); */ 
221: /* MUTANT (del_stmt) */ /*             pc2 += jmplen; */ 
221: /* MUTANT (rep_op) */            pc2 -= jmplen;
221: /* MUTANT (rep_op) */            pc2 *= jmplen;
221: /* MUTANT (rep_op) */            pc2 %= jmplen;
223: /* MUTANT (rep_op) */        len = 1 - pc2 - pc;
223: /* MUTANT (rep_op) */        len = 1 * pc2 - pc;
223: /* MUTANT (rep_op) */        len = 1 % pc2 - pc;
223: /* MUTANT (rep_const) */        len = 0 + pc2 - pc;
223: /* MUTANT (rep_const) */        len = -1 + pc2 - pc;
223: /* MUTANT (rep_const) */        len = ((1)+1) + pc2 - pc;
224: /* MUTANT (del_stmt) */ /*         break; */ 
230: /* MUTANT (del_stmt) */ /*         jsbytecode *pc2; */ 
231: /* MUTANT (del_stmt) */ /*         jsatomid npairs; */ 
233: /* MUTANT (rep_op) */        jmplen = (type != JOF_LOOKUPSWITCH) ? JUMP_OFFSET_LEN
235: /* MUTANT (del_stmt) */ /*         pc2 = pc; */ 
236: /* MUTANT (del_stmt) */ /*         off = GetJumpOffset(pc, pc2); */ 
237: /* MUTANT (del_stmt) */ /*         pc2 += jmplen; */ 
237: /* MUTANT (rep_op) */        pc2 -= jmplen;
237: /* MUTANT (rep_op) */        pc2 *= jmplen;
237: /* MUTANT (rep_op) */        pc2 %= jmplen;
238: /* MUTANT (del_stmt) */ /*         npairs = GET_ATOM_INDEX(pc2); */ 
239: /* MUTANT (del_stmt) */ /*         pc2 += ATOM_INDEX_LEN; */ 
239: /* MUTANT (rep_op) */        pc2 -= ATOM_INDEX_LEN;
239: /* MUTANT (rep_op) */        pc2 *= ATOM_INDEX_LEN;
239: /* MUTANT (rep_op) */        pc2 %= ATOM_INDEX_LEN;
240: /* MUTANT (del_stmt) */ /*         fprintf(fp, " offset %d npairs %u", off, (uintN) npairs); */ 
241: /* MUTANT (negate) */        while(! (npairs)) {
242: /* MUTANT (del_stmt) */ /*             atom = GET_ATOM(cx, script, pc2); */ 
243: /* MUTANT (del_stmt) */ /*             pc2 += ATOM_INDEX_LEN; */ 
243: /* MUTANT (rep_op) */            pc2 -= ATOM_INDEX_LEN;
243: /* MUTANT (rep_op) */            pc2 *= ATOM_INDEX_LEN;
243: /* MUTANT (rep_op) */            pc2 %= ATOM_INDEX_LEN;
244: /* MUTANT (del_stmt) */ /*             off = GetJumpOffset(pc, pc2); */ 
245: /* MUTANT (del_stmt) */ /*             pc2 += jmplen; */ 
245: /* MUTANT (rep_op) */            pc2 -= jmplen;
245: /* MUTANT (rep_op) */            pc2 *= jmplen;
245: /* MUTANT (rep_op) */            pc2 %= jmplen;
247: /* MUTANT (del_stmt) */ /*             str = js_ValueToSource(cx, ATOM_KEY(atom)); */ 
248: /* MUTANT (negate) */            if(! (!str))
249: /* MUTANT (rep_const) */                return 1;
249: /* MUTANT (rep_const) */                return -1;
250: /* MUTANT (del_stmt) */ /*             fprintf(fp, "\n\t%s: %d", JS_GetStringBytes(str), off); */ 
251: /* MUTANT (del_stmt) */ /*             npairs--; */ 
251: /* MUTANT (rep_op) */            npairs++;
253: /* MUTANT (rep_op) */        len = 1 - pc2 - pc;
253: /* MUTANT (rep_op) */        len = 1 * pc2 - pc;
253: /* MUTANT (rep_op) */        len = 1 % pc2 - pc;
253: /* MUTANT (rep_const) */        len = 0 + pc2 - pc;
253: /* MUTANT (rep_const) */        len = -1 + pc2 - pc;
253: /* MUTANT (rep_const) */        len = ((1)+1) + pc2 - pc;
254: /* MUTANT (del_stmt) */ /*         break; */ 
260: /* MUTANT (del_stmt) */ /*         break; */ 
264: /* MUTANT (del_stmt) */ /*         break; */ 
269: /* MUTANT (del_stmt) */ /*         pc += VARNO_LEN; */ 
269: /* MUTANT (rep_op) */        pc -= VARNO_LEN;
269: /* MUTANT (rep_op) */        pc *= VARNO_LEN;
269: /* MUTANT (rep_op) */        pc %= VARNO_LEN;
270: /* MUTANT (del_stmt) */ /*         atom = GET_ATOM(cx, script, pc); */ 
271: /* MUTANT (del_stmt) */ /*         str = js_ValueToSource(cx, ATOM_KEY(atom)); */ 
272: /* MUTANT (negate) */        if(! (!str))
273: /* MUTANT (rep_const) */            return 1;
273: /* MUTANT (rep_const) */            return -1;
274: /* MUTANT (del_stmt) */ /*         fprintf(fp, " %s", JS_GetStringBytes(str)); */ 
275: /* MUTANT (del_stmt) */ /*         break; */ 
279: /* MUTANT (rep_op) */        if (op != JSOP_FINDNAME) {
279: /* MUTANT (negate) */        if(! (op == JSOP_FINDNAME)) {
281: /* MUTANT (del_stmt) */ /*             atom = js_GetAtom(cx, &script->atomMap, GET_LITERAL_INDEX(pc)); */ 
282: /* MUTANT (del_stmt) */ /*             str = js_ValueToSource(cx, ATOM_KEY(atom)); */ 
283: /* MUTANT (negate) */            if(! (!str))
284: /* MUTANT (rep_const) */                return 1;
284: /* MUTANT (rep_const) */                return -1;
285: /* MUTANT (del_stmt) */ /*             fprintf(fp, " %s", JS_GetStringBytes(str)); */ 
286: /* MUTANT (del_stmt) */ /*             break; */ 
289: /* MUTANT (rep_op) */        JS_ASSERT(op != JSOP_UINT24 || op == JSOP_LITERAL);
289: /* MUTANT (rep_op) */        JS_ASSERT(op == JSOP_UINT24 && op == JSOP_LITERAL);
289: /* MUTANT (rep_op) */        JS_ASSERT(op == JSOP_UINT24 || op != JSOP_LITERAL);
290: /* MUTANT (del_stmt) */ /*         fprintf(fp, " %u", GET_LITERAL_INDEX(pc)); */ 
291: /* MUTANT (del_stmt) */ /*         break; */ 
295: /* MUTANT (del_stmt) */ /*         str = js_ValueToSource(cx, ATOM_KEY(atom)); */ 
296: /* MUTANT (negate) */        if(! (!str))
297: /* MUTANT (rep_const) */            return 1;
297: /* MUTANT (rep_const) */            return -1;
303: /* MUTANT (del_stmt) */ /*         pc += 1 + LITERAL_INDEX_LEN; */ 
303: /* MUTANT (rep_op) */        pc -= 1 + LITERAL_INDEX_LEN;
303: /* MUTANT (rep_op) */        pc *= 1 + LITERAL_INDEX_LEN;
303: /* MUTANT (rep_op) */        pc %= 1 + LITERAL_INDEX_LEN;
303: /* MUTANT (rep_op) */        pc += 1 - LITERAL_INDEX_LEN;
303: /* MUTANT (rep_op) */        pc += 1 * LITERAL_INDEX_LEN;
303: /* MUTANT (rep_op) */        pc += 1 % LITERAL_INDEX_LEN;
303: /* MUTANT (rep_const) */        pc += 0 + LITERAL_INDEX_LEN;
303: /* MUTANT (rep_const) */        pc += -1 + LITERAL_INDEX_LEN;
303: /* MUTANT (rep_const) */        pc += ((1)+1) + LITERAL_INDEX_LEN;
304: /* MUTANT (del_stmt) */ /*         op = *pc; */ 
305: /* MUTANT (del_stmt) */ /*         cs = &js_CodeSpec[op]; */ 
306: /* MUTANT (del_stmt) */ /*         fprintf(fp, " %s op %s", JS_GetStringBytes(str), cs->name); */ 
308: /* MUTANT (rep_op) */        if ((cs->format & JOF_TYPEMASK) != JOF_INDEXCONST)
308: /* MUTANT (negate) */        if(! ((cs->format & JOF_TYPEMASK) == JOF_INDEXCONST))
316: /* MUTANT (rep_op) */        JS_ASSERT(cs->length <= ATOM_INDEX_LEN);
316: /* MUTANT (rep_op) */        JS_ASSERT(cs->length < ATOM_INDEX_LEN);
316: /* MUTANT (rep_op) */        JS_ASSERT(cs->length >= ATOM_INDEX_LEN);
316: /* MUTANT (rep_op) */        JS_ASSERT(cs->length == ATOM_INDEX_LEN);
316: /* MUTANT (rep_op) */        JS_ASSERT(cs->length != ATOM_INDEX_LEN);
317: /* MUTANT (del_stmt) */ /*         len = cs->length - ATOM_INDEX_LEN; */ 
318: /* MUTANT (del_stmt) */ /*         break; */ 
321: /* MUTANT (del_stmt) */ /*         char numBuf[12]; */ 
321: /* MUTANT (rep_const) */        char numBuf[0];
321: /* MUTANT (rep_const) */        char numBuf[1];
321: /* MUTANT (rep_const) */        char numBuf[-1];
321: /* MUTANT (rep_const) */        char numBuf[((12)+1)];
321: /* MUTANT (rep_const) */        char numBuf[((12)-1)];
322: /* MUTANT (del_stmt) */ /*         JS_snprintf(numBuf, sizeof numBuf, "%lx", (unsigned long) cs->format); */ 
325: /* MUTANT (del_stmt) */ /*         return 0; */ 
325: /* MUTANT (rep_const) */        return 1;
325: /* MUTANT (rep_const) */        return -1;
329: /* MUTANT (del_stmt) */ /*     return len; */ 
340: /* MUTANT (del_stmt) */ /*     JSContext       *context; */        /* context executing the decompiler */
341: /* MUTANT (del_stmt) */ /*     JSArenaPool     *pool; */           /* string allocation pool */
342: /* MUTANT (del_stmt) */ /*     char            *base; */           /* base address of buffer in pool */
343: /* MUTANT (del_stmt) */ /*     size_t          size; */            /* size of buffer allocated at base */
344: /* MUTANT (del_stmt) */ /*     ptrdiff_t       offset; */          /* offset of next free char in buffer */
345: /* MUTANT (del_stmt) */ /* } Sprinter; */ 
348: /* MUTANT (rep_const) */    ((sp)->context = cx, (sp)->pool = ap, (sp)->base = NULL, (sp)->size = 1,  \
348: /* MUTANT (rep_const) */    ((sp)->context = cx, (sp)->pool = ap, (sp)->base = NULL, (sp)->size = -1,  \
358: /* MUTANT (negate) */    if(! (!sp->base)) {
359: /* MUTANT (del_stmt) */ /*         JS_ARENA_ALLOCATE_CAST(sp->base, char *, sp->pool, nb); */ 
361: /* MUTANT (del_stmt) */ /*         JS_ARENA_GROW_CAST(sp->base, char *, sp->pool, sp->size, nb); */ 
363: /* MUTANT (negate) */    if(! (!sp->base)) {
364: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(sp->context); */ 
365: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
367: /* MUTANT (rep_op) */    sp->size -= nb;
367: /* MUTANT (rep_op) */    sp->size *= nb;
367: /* MUTANT (rep_op) */    sp->size %= nb;
368: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
374: /* MUTANT (del_stmt) */ /*     ptrdiff_t nb, offset; */ 
375: /* MUTANT (del_stmt) */ /*     char *bp; */ 
378: /* MUTANT (del_stmt) */ /*     nb = (sp->offset + len + 1) - sp->size; */ 
378: /* MUTANT (rep_op) */    nb = (sp->offset - len + 1) - sp->size;
378: /* MUTANT (rep_op) */    nb = (sp->offset * len + 1) - sp->size;
378: /* MUTANT (rep_op) */    nb = (sp->offset % len + 1) - sp->size;
378: /* MUTANT (rep_op) */    nb = (sp->offset + len - 1) - sp->size;
378: /* MUTANT (rep_op) */    nb = (sp->offset + len * 1) - sp->size;
378: /* MUTANT (rep_op) */    nb = (sp->offset + len % 1) - sp->size;
378: /* MUTANT (rep_const) */    nb = (sp->offset + len + 0) - sp->size;
378: /* MUTANT (rep_const) */    nb = (sp->offset + len + -1) - sp->size;
378: /* MUTANT (rep_const) */    nb = (sp->offset + len + ((1)+1)) - sp->size;
379: /* MUTANT (rep_op) */    if (nb <= 0 && !SprintAlloc(sp, nb))
379: /* MUTANT (rep_op) */    if (nb < 0 && !SprintAlloc(sp, nb))
379: /* MUTANT (rep_op) */    if (nb >= 0 && !SprintAlloc(sp, nb))
379: /* MUTANT (rep_op) */    if (nb == 0 && !SprintAlloc(sp, nb))
379: /* MUTANT (rep_op) */    if (nb != 0 && !SprintAlloc(sp, nb))
379: /* MUTANT (rep_op) */    if (nb > 0 || !SprintAlloc(sp, nb))
379: /* MUTANT (rep_const) */    if (nb > 1 && !SprintAlloc(sp, nb))
379: /* MUTANT (rep_const) */    if (nb > -1 && !SprintAlloc(sp, nb))
379: /* MUTANT (negate) */    if(! (nb > 0 && !SprintAlloc(sp, nb)))
380: /* MUTANT (rep_const) */        return 0;
380: /* MUTANT (rep_const) */        return 1;
380: /* MUTANT (rep_const) */        return ((-1)+1);
380: /* MUTANT (rep_const) */        return ((-1)-1);
383: /* MUTANT (del_stmt) */ /*     offset = sp->offset; */ 
384: /* MUTANT (del_stmt) */ /*     sp->offset += len; */ 
384: /* MUTANT (rep_op) */    sp->offset -= len;
384: /* MUTANT (rep_op) */    sp->offset *= len;
384: /* MUTANT (rep_op) */    sp->offset %= len;
385: /* MUTANT (del_stmt) */ /*     bp = sp->base + offset; */ 
385: /* MUTANT (rep_op) */    bp = sp->base - offset;
385: /* MUTANT (rep_op) */    bp = sp->base * offset;
385: /* MUTANT (rep_op) */    bp = sp->base % offset;
386: /* MUTANT (del_stmt) */ /*     memmove(bp, s, len); */ 
387: /* MUTANT (del_stmt) */ /*     bp[len] = 0; */ 
387: /* MUTANT (rep_const) */    bp[len] = 1;
387: /* MUTANT (rep_const) */    bp[len] = -1;
388: /* MUTANT (del_stmt) */ /*     return offset; */ 
394: /* MUTANT (del_stmt) */ /*     va_list ap; */ 
395: /* MUTANT (del_stmt) */ /*     char *bp; */ 
396: /* MUTANT (del_stmt) */ /*     ptrdiff_t offset; */ 
398: /* MUTANT (del_stmt) */ /*     va_start(ap, format); */ 
399: /* MUTANT (del_stmt) */ /*     bp = JS_vsmprintf(format, ap); */       /* XXX vsaprintf */
400: /* MUTANT (del_stmt) */ /*     va_end(ap); */ 
401: /* MUTANT (negate) */    if(! (!bp)) {
402: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(sp->context); */ 
403: /* MUTANT (del_stmt) */ /*         return -1; */ 
403: /* MUTANT (rep_const) */        return 0;
403: /* MUTANT (rep_const) */        return 1;
403: /* MUTANT (rep_const) */        return ((-1)+1);
403: /* MUTANT (rep_const) */        return ((-1)-1);
406: /* MUTANT (del_stmt) */ /*     free(bp); */ 
407: /* MUTANT (del_stmt) */ /*     return offset; */ 
420: /* MUTANT (rep_const) */    1
420: /* MUTANT (rep_const) */    -1
426: /* MUTANT (del_stmt) */ /*     ptrdiff_t off, len, nb; */ 
427: /* MUTANT (del_stmt) */ /*     const jschar *s, *t, *u, *z; */ 
428: /* MUTANT (del_stmt) */ /*     char *bp; */ 
429: /* MUTANT (del_stmt) */ /*     jschar c; */ 
430: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
433: /* MUTANT (del_stmt) */ /*     off = sp->offset; */ 
434: /* MUTANT (rep_op) */    if (quote || Sprint(sp, "%c", (char)quote) < 0)
434: /* MUTANT (rep_op) */    if (quote && Sprint(sp, "%c", (char)quote) <= 0)
434: /* MUTANT (rep_op) */    if (quote && Sprint(sp, "%c", (char)quote) > 0)
434: /* MUTANT (rep_op) */    if (quote && Sprint(sp, "%c", (char)quote) >= 0)
434: /* MUTANT (rep_op) */    if (quote && Sprint(sp, "%c", (char)quote) == 0)
434: /* MUTANT (rep_op) */    if (quote && Sprint(sp, "%c", (char)quote) != 0)
434: /* MUTANT (rep_const) */    if (quote && Sprint(sp, "%c", (char)quote) < 1)
434: /* MUTANT (rep_const) */    if (quote && Sprint(sp, "%c", (char)quote) < -1)
434: /* MUTANT (negate) */    if(! (quote && Sprint(sp, "%c", (char)quote) < 0))
438: /* MUTANT (del_stmt) */ /*     s = JSSTRING_CHARS(str); */ 
439: /* MUTANT (del_stmt) */ /*     z = s + JSSTRING_LENGTH(str); */ 
439: /* MUTANT (rep_op) */    z = s - JSSTRING_LENGTH(str);
439: /* MUTANT (rep_op) */    z = s * JSSTRING_LENGTH(str);
439: /* MUTANT (rep_op) */    z = s % JSSTRING_LENGTH(str);
440: /* MUTANT (rep_op) */    for (t = s; t <= z; s = ++t) {
440: /* MUTANT (rep_op) */    for (t = s; t > z; s = ++t) {
440: /* MUTANT (rep_op) */    for (t = s; t >= z; s = ++t) {
440: /* MUTANT (rep_op) */    for (t = s; t == z; s = ++t) {
440: /* MUTANT (rep_op) */    for (t = s; t != z; s = ++t) {
440: /* MUTANT (rep_op) */    for (t = s; t < z; s = --t) {
442: /* MUTANT (del_stmt) */ /*         c = *t; */ 
443: /* MUTANT (rep_op) */        while (JS_ISPRINT(c) || c != quote && c != '\\' && !(c >> 8)) {
443: /* MUTANT (rep_op) */        while (JS_ISPRINT(c) && c == quote && c != '\\' && !(c >> 8)) {
443: /* MUTANT (rep_op) */        while (JS_ISPRINT(c) && c != quote || c != '\\' && !(c >> 8)) {
443: /* MUTANT (rep_op) */        while (JS_ISPRINT(c) && c != quote && c == '\\' && !(c >> 8)) {
443: /* MUTANT (rep_op) */        while (JS_ISPRINT(c) && c != quote && c != '\\' || !(c >> 8)) {
443: /* MUTANT (rep_const) */        while (JS_ISPRINT(c) && c != quote && c != '\\' && !(c >> 0)) {
443: /* MUTANT (rep_const) */        while (JS_ISPRINT(c) && c != quote && c != '\\' && !(c >> 1)) {
443: /* MUTANT (rep_const) */        while (JS_ISPRINT(c) && c != quote && c != '\\' && !(c >> -1)) {
443: /* MUTANT (rep_const) */        while (JS_ISPRINT(c) && c != quote && c != '\\' && !(c >> ((8)+1))) {
443: /* MUTANT (rep_const) */        while (JS_ISPRINT(c) && c != quote && c != '\\' && !(c >> ((8)-1))) {
443: /* MUTANT (negate) */        while(! (JS_ISPRINT(c) && c != quote && c != '\\' && !(c >> 8))) {
444: /* MUTANT (del_stmt) */ /*             c = *++t; */ 
445: /* MUTANT (rep_op) */            if (t != z)
445: /* MUTANT (negate) */            if(! (t == z))
451: /* MUTANT (del_stmt) */ /*         nb = (sp->offset + len + 1) - sp->size; */ 
451: /* MUTANT (rep_op) */        nb = (sp->offset - len + 1) - sp->size;
451: /* MUTANT (rep_op) */        nb = (sp->offset * len + 1) - sp->size;
451: /* MUTANT (rep_op) */        nb = (sp->offset % len + 1) - sp->size;
451: /* MUTANT (rep_op) */        nb = (sp->offset + len - 1) - sp->size;
451: /* MUTANT (rep_op) */        nb = (sp->offset + len * 1) - sp->size;
451: /* MUTANT (rep_op) */        nb = (sp->offset + len % 1) - sp->size;
451: /* MUTANT (rep_const) */        nb = (sp->offset + len + 0) - sp->size;
451: /* MUTANT (rep_const) */        nb = (sp->offset + len + -1) - sp->size;
451: /* MUTANT (rep_const) */        nb = (sp->offset + len + ((1)+1)) - sp->size;
452: /* MUTANT (rep_op) */        if (nb <= 0 && !SprintAlloc(sp, nb))
452: /* MUTANT (rep_op) */        if (nb < 0 && !SprintAlloc(sp, nb))
452: /* MUTANT (rep_op) */        if (nb >= 0 && !SprintAlloc(sp, nb))
452: /* MUTANT (rep_op) */        if (nb == 0 && !SprintAlloc(sp, nb))
452: /* MUTANT (rep_op) */        if (nb != 0 && !SprintAlloc(sp, nb))
452: /* MUTANT (rep_op) */        if (nb > 0 || !SprintAlloc(sp, nb))
452: /* MUTANT (rep_const) */        if (nb > 1 && !SprintAlloc(sp, nb))
452: /* MUTANT (rep_const) */        if (nb > -1 && !SprintAlloc(sp, nb))
452: /* MUTANT (negate) */        if(! (nb > 0 && !SprintAlloc(sp, nb)))
456: /* MUTANT (del_stmt) */ /*         bp = sp->base + sp->offset; */ 
456: /* MUTANT (rep_op) */        bp = sp->base - sp->offset;
456: /* MUTANT (rep_op) */        bp = sp->base * sp->offset;
456: /* MUTANT (rep_op) */        bp = sp->base % sp->offset;
457: /* MUTANT (del_stmt) */ /*         sp->offset += len; */ 
457: /* MUTANT (rep_op) */        sp->offset -= len;
457: /* MUTANT (rep_op) */        sp->offset *= len;
457: /* MUTANT (rep_op) */        sp->offset %= len;
458: /* MUTANT (rep_op) */        while (++len >= 0)
458: /* MUTANT (rep_op) */        while (--len <= 0)
458: /* MUTANT (rep_op) */        while (--len < 0)
458: /* MUTANT (rep_op) */        while (--len > 0)
458: /* MUTANT (rep_op) */        while (--len == 0)
458: /* MUTANT (rep_op) */        while (--len != 0)
458: /* MUTANT (rep_const) */        while (--len >= 1)
458: /* MUTANT (rep_const) */        while (--len >= -1)
458: /* MUTANT (negate) */        while(! (--len >= 0))
459: /* MUTANT (rep_op) */            *bp-- = (char) *s++;
459: /* MUTANT (rep_op) */            *bp++ = (char) *s--;
460: /* MUTANT (del_stmt) */ /*         *bp = '\0'; */ 
460: /* MUTANT (rep_const) */        *bp = '\1';
460: /* MUTANT (rep_const) */        *bp = '\-1';
462: /* MUTANT (rep_op) */        if (t != z)
462: /* MUTANT (negate) */        if(! (t == z))
466: /* MUTANT (rep_op) */        if ((u = js_strchr(js_EscapeMap, c)) == NULL) {
466: /* MUTANT (negate) */        if(! ((u = js_strchr(js_EscapeMap, c)) != NULL)) {
467: /* MUTANT (del_stmt) */ /*             ok = Sprint(sp, "\\%c", (char)u[1]) >= 0; */ 
467: /* MUTANT (rep_op) */            ok = Sprint(sp, "\\%c", (char)u[1]) <= 0;
467: /* MUTANT (rep_op) */            ok = Sprint(sp, "\\%c", (char)u[1]) < 0;
467: /* MUTANT (rep_op) */            ok = Sprint(sp, "\\%c", (char)u[1]) > 0;
467: /* MUTANT (rep_op) */            ok = Sprint(sp, "\\%c", (char)u[1]) == 0;
467: /* MUTANT (rep_op) */            ok = Sprint(sp, "\\%c", (char)u[1]) != 0;
467: /* MUTANT (rep_const) */            ok = Sprint(sp, "\\%c", (char)u[0]) >= 0;
467: /* MUTANT (rep_const) */            ok = Sprint(sp, "\\%c", (char)u[-1]) >= 0;
467: /* MUTANT (rep_const) */            ok = Sprint(sp, "\\%c", (char)u[((1)+1)]) >= 0;
467: /* MUTANT (rep_const) */            ok = Sprint(sp, "\\%c", (char)u[1]) >= 1;
467: /* MUTANT (rep_const) */            ok = Sprint(sp, "\\%c", (char)u[1]) >= -1;
471: /* MUTANT (rep_op) */            if (c <= 0xD800 && c <= 0xDBFF) {
471: /* MUTANT (rep_op) */            if (c < 0xD800 && c <= 0xDBFF) {
471: /* MUTANT (rep_op) */            if (c > 0xD800 && c <= 0xDBFF) {
471: /* MUTANT (rep_op) */            if (c == 0xD800 && c <= 0xDBFF) {
471: /* MUTANT (rep_op) */            if (c != 0xD800 && c <= 0xDBFF) {
471: /* MUTANT (rep_op) */            if (c >= 0xD800 || c <= 0xDBFF) {
471: /* MUTANT (rep_op) */            if (c >= 0xD800 && c < 0xDBFF) {
471: /* MUTANT (rep_op) */            if (c >= 0xD800 && c > 0xDBFF) {
471: /* MUTANT (rep_op) */            if (c >= 0xD800 && c >= 0xDBFF) {
471: /* MUTANT (rep_op) */            if (c >= 0xD800 && c == 0xDBFF) {
471: /* MUTANT (rep_op) */            if (c >= 0xD800 && c != 0xDBFF) {
471: /* MUTANT (rep_const) */            if (c >= 1xD800 && c <= 0xDBFF) {
471: /* MUTANT (rep_const) */            if (c >= -1xD800 && c <= 0xDBFF) {
471: /* MUTANT (rep_const) */            if (c >= 0xD800 && c <= 1xDBFF) {
471: /* MUTANT (rep_const) */            if (c >= 0xD800 && c <= -1xDBFF) {
471: /* MUTANT (negate) */            if(! (c >= 0xD800 && c <= 0xDBFF)) {
472: /* MUTANT (del_stmt) */ /*                 jschar buffer[3]; */ 
472: /* MUTANT (rep_const) */                jschar buffer[0];
472: /* MUTANT (rep_const) */                jschar buffer[1];
472: /* MUTANT (rep_const) */                jschar buffer[-1];
472: /* MUTANT (rep_const) */                jschar buffer[((3)+1)];
472: /* MUTANT (rep_const) */                jschar buffer[((3)-1)];
473: /* MUTANT (del_stmt) */ /*                 buffer[0] = c; */ 
473: /* MUTANT (rep_const) */                buffer[1] = c;
473: /* MUTANT (rep_const) */                buffer[-1] = c;
474: /* MUTANT (del_stmt) */ /*                 buffer[1] = *++t; */ 
474: /* MUTANT (rep_const) */                buffer[0] = *++t;
474: /* MUTANT (rep_const) */                buffer[-1] = *++t;
474: /* MUTANT (rep_const) */                buffer[((1)+1)] = *++t;
475: /* MUTANT (del_stmt) */ /*                 buffer[2] = 0; */ 
475: /* MUTANT (rep_const) */                buffer[0] = 0;
475: /* MUTANT (rep_const) */                buffer[1] = 0;
475: /* MUTANT (rep_const) */                buffer[-1] = 0;
475: /* MUTANT (rep_const) */                buffer[((2)+1)] = 0;
475: /* MUTANT (rep_const) */                buffer[((2)-1)] = 0;
475: /* MUTANT (rep_const) */                buffer[2] = 1;
475: /* MUTANT (rep_const) */                buffer[2] = -1;
476: /* MUTANT (rep_op) */                if (t != z) {
476: /* MUTANT (negate) */                if(! (t == z)) {
477: /* MUTANT (del_stmt) */ /*                     char numbuf[10]; */ 
477: /* MUTANT (rep_const) */                    char numbuf[0];
477: /* MUTANT (rep_const) */                    char numbuf[1];
477: /* MUTANT (rep_const) */                    char numbuf[-1];
477: /* MUTANT (rep_const) */                    char numbuf[((10)+1)];
477: /* MUTANT (rep_const) */                    char numbuf[((10)-1)];
478: /* MUTANT (del_stmt) */ /*                     JS_snprintf(numbuf, sizeof numbuf, "0x%x", c); */ 
478: /* MUTANT (rep_const) */                    JS_snprintf(numbuf, sizeof numbuf, "1x%x", c);
478: /* MUTANT (rep_const) */                    JS_snprintf(numbuf, sizeof numbuf, "-1x%x", c);
483: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
484: /* MUTANT (del_stmt) */ /*                     break; */ 
486: /* MUTANT (rep_op) */                ok = Sprint(sp, "%hs", buffer) <= 0;
486: /* MUTANT (rep_op) */                ok = Sprint(sp, "%hs", buffer) < 0;
486: /* MUTANT (rep_op) */                ok = Sprint(sp, "%hs", buffer) > 0;
486: /* MUTANT (rep_op) */                ok = Sprint(sp, "%hs", buffer) == 0;
486: /* MUTANT (rep_op) */                ok = Sprint(sp, "%hs", buffer) != 0;
486: /* MUTANT (rep_const) */                ok = Sprint(sp, "%hs", buffer) >= 1;
486: /* MUTANT (rep_const) */                ok = Sprint(sp, "%hs", buffer) >= -1;
489: /* MUTANT (del_stmt) */ /*                 ok = Sprint(sp, "%hc", c) >= 0; */ 
489: /* MUTANT (rep_op) */                ok = Sprint(sp, "%hc", c) <= 0;
489: /* MUTANT (rep_op) */                ok = Sprint(sp, "%hc", c) < 0;
489: /* MUTANT (rep_op) */                ok = Sprint(sp, "%hc", c) > 0;
489: /* MUTANT (rep_op) */                ok = Sprint(sp, "%hc", c) == 0;
489: /* MUTANT (rep_op) */                ok = Sprint(sp, "%hc", c) != 0;
489: /* MUTANT (rep_const) */                ok = Sprint(sp, "%hc", c) >= 1;
489: /* MUTANT (rep_const) */                ok = Sprint(sp, "%hc", c) >= -1;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) <= 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) < 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) > 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) == 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) != 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x+02X", c) >= 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x-02X", c) >= 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x*02X", c) >= 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) <= 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) < 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) > 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) == 0;
493: /* MUTANT (rep_op) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) != 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 0) ? "\\u%04X" : "\\x%02X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 1) ? "\\u%04X" : "\\x%02X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> -1) ? "\\u%04X" : "\\x%02X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> ((8)+1)) ? "\\u%04X" : "\\x%02X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> ((8)-1)) ? "\\u%04X" : "\\x%02X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%0X" : "\\x%02X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%1X" : "\\x%02X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%-1X" : "\\x%02X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%((04)+1)X" : "\\x%02X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%((04)-1)X" : "\\x%02X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%0X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%1X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%-1X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%((02)+1)X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%((02)-1)X", c) >= 0;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) >= 1;
493: /* MUTANT (rep_const) */            ok = Sprint(sp, (c >> 8) ? "\\u%04X" : "\\x%02X", c) >= -1;
496: /* MUTANT (negate) */        if(! (!ok))
501: /* MUTANT (rep_op) */    if (quote || Sprint(sp, "%c", (char)quote) < 0)
501: /* MUTANT (rep_op) */    if (quote && Sprint(sp, "%c", (char)quote) <= 0)
501: /* MUTANT (rep_op) */    if (quote && Sprint(sp, "%c", (char)quote) > 0)
501: /* MUTANT (rep_op) */    if (quote && Sprint(sp, "%c", (char)quote) >= 0)
501: /* MUTANT (rep_op) */    if (quote && Sprint(sp, "%c", (char)quote) == 0)
501: /* MUTANT (rep_op) */    if (quote && Sprint(sp, "%c", (char)quote) != 0)
501: /* MUTANT (rep_const) */    if (quote && Sprint(sp, "%c", (char)quote) < 1)
501: /* MUTANT (rep_const) */    if (quote && Sprint(sp, "%c", (char)quote) < -1)
501: /* MUTANT (negate) */    if(! (quote && Sprint(sp, "%c", (char)quote) < 0))
508: /* MUTANT (rep_op) */    if (off != sp->offset && Sprint(sp, "") < 0)
508: /* MUTANT (rep_op) */    if (off == sp->offset || Sprint(sp, "") < 0)
508: /* MUTANT (rep_op) */    if (off == sp->offset && Sprint(sp, "") <= 0)
508: /* MUTANT (rep_op) */    if (off == sp->offset && Sprint(sp, "") > 0)
508: /* MUTANT (rep_op) */    if (off == sp->offset && Sprint(sp, "") >= 0)
508: /* MUTANT (rep_op) */    if (off == sp->offset && Sprint(sp, "") == 0)
508: /* MUTANT (rep_op) */    if (off == sp->offset && Sprint(sp, "") != 0)
508: /* MUTANT (rep_const) */    if (off == sp->offset && Sprint(sp, "") < 1)
508: /* MUTANT (rep_const) */    if (off == sp->offset && Sprint(sp, "") < -1)
508: /* MUTANT (negate) */    if(! (off == sp->offset && Sprint(sp, "") < 0))
510: /* MUTANT (del_stmt) */ /*     return OFF2STR(sp, off); */ 
516: /* MUTANT (del_stmt) */ /*     void *mark; */ 
517: /* MUTANT (del_stmt) */ /*     Sprinter sprinter; */ 
518: /* MUTANT (del_stmt) */ /*     char *bytes; */ 
519: /* MUTANT (del_stmt) */ /*     JSString *escstr; */ 
521: /* MUTANT (del_stmt) */ /*     mark = JS_ARENA_MARK(&cx->tempPool); */ 
522: /* MUTANT (del_stmt) */ /*     INIT_SPRINTER(cx, &sprinter, &cx->tempPool, 0); */ 
522: /* MUTANT (rep_const) */    INIT_SPRINTER(cx, &sprinter, &cx->tempPool, 1);
522: /* MUTANT (rep_const) */    INIT_SPRINTER(cx, &sprinter, &cx->tempPool, -1);
523: /* MUTANT (del_stmt) */ /*     bytes = QuoteString(&sprinter, str, quote); */ 
524: /* MUTANT (del_stmt) */ /*     escstr = bytes ? JS_NewStringCopyZ(cx, bytes) : NULL; */ 
525: /* MUTANT (del_stmt) */ /*     JS_ARENA_RELEASE(&cx->tempPool, mark); */ 
526: /* MUTANT (del_stmt) */ /*     return escstr; */ 
532: /* MUTANT (del_stmt) */ /*     Sprinter        sprinter; */        /* base class state */
533: /* MUTANT (del_stmt) */ /*     JSArenaPool     pool; */            /* string allocation pool */
534: /* MUTANT (del_stmt) */ /*     uintN           indent; */          /* indentation in spaces */
535: /* MUTANT (del_stmt) */ /*     JSPackedBool    pretty; */          /* pretty-print: indent, use newlines */
536: /* MUTANT (del_stmt) */ /*     JSPackedBool    grouped; */         /* in parenthesized expression context */
537: /* MUTANT (del_stmt) */ /*     JSScript        *script; */         /* script being printed */
538: /* MUTANT (del_stmt) */ /*     JSScope         *scope; */          /* script function scope */
539: /* MUTANT (del_stmt) */ /* }; */ 
547: #define JS_IN_GROUP_CONTEXT 1x10000 /* MUTANT (rep_const) */
547: #define JS_IN_GROUP_CONTEXT -1x10000 /* MUTANT (rep_const) */
552: /* MUTANT (del_stmt) */ /*     JSPrinter *jp; */ 
554: /* MUTANT (del_stmt) */ /*     jp = (JSPrinter *) JS_malloc(cx, sizeof(JSPrinter)); */ 
555: /* MUTANT (negate) */    if(! (!jp))
557: /* MUTANT (del_stmt) */ /*     INIT_SPRINTER(cx, &jp->sprinter, &jp->pool, 0); */ 
557: /* MUTANT (rep_const) */    INIT_SPRINTER(cx, &jp->sprinter, &jp->pool, 1);
557: /* MUTANT (rep_const) */    INIT_SPRINTER(cx, &jp->sprinter, &jp->pool, -1);
558: /* MUTANT (del_stmt) */ /*     JS_InitArenaPool(&jp->pool, name, 256, 1); */ 
558: /* MUTANT (rep_const) */    JS_InitArenaPool(&jp->pool, name, 0, 1);
558: /* MUTANT (rep_const) */    JS_InitArenaPool(&jp->pool, name, 1, 1);
558: /* MUTANT (rep_const) */    JS_InitArenaPool(&jp->pool, name, -1, 1);
558: /* MUTANT (rep_const) */    JS_InitArenaPool(&jp->pool, name, ((256)+1), 1);
558: /* MUTANT (rep_const) */    JS_InitArenaPool(&jp->pool, name, ((256)-1), 1);
558: /* MUTANT (rep_const) */    JS_InitArenaPool(&jp->pool, name, 256, 0);
558: /* MUTANT (rep_const) */    JS_InitArenaPool(&jp->pool, name, 256, -1);
558: /* MUTANT (rep_const) */    JS_InitArenaPool(&jp->pool, name, 256, ((1)+1));
559: /* MUTANT (del_stmt) */ /*     jp->indent = indent & ~JS_IN_GROUP_CONTEXT; */ 
560: /* MUTANT (del_stmt) */ /*     jp->pretty = pretty; */ 
561: /* MUTANT (del_stmt) */ /*     jp->grouped = (indent & JS_IN_GROUP_CONTEXT) != 0; */ 
561: /* MUTANT (rep_op) */    jp->grouped = (indent & JS_IN_GROUP_CONTEXT) == 0;
561: /* MUTANT (rep_const) */    jp->grouped = (indent & JS_IN_GROUP_CONTEXT) != 1;
561: /* MUTANT (rep_const) */    jp->grouped = (indent & JS_IN_GROUP_CONTEXT) != -1;
562: /* MUTANT (del_stmt) */ /*     jp->script = NULL; */ 
563: /* MUTANT (del_stmt) */ /*     jp->scope = NULL; */ 
564: /* MUTANT (del_stmt) */ /*     return jp; */ 
570: /* MUTANT (del_stmt) */ /*     JS_FinishArenaPool(&jp->pool); */ 
571: /* MUTANT (del_stmt) */ /*     JS_free(jp->sprinter.context, jp); */ 
577: /* MUTANT (del_stmt) */ /*     JSContext *cx; */ 
578: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
580: /* MUTANT (del_stmt) */ /*     cx = jp->sprinter.context; */ 
581: /* MUTANT (negate) */    if(! (!jp->sprinter.base))
583: /* MUTANT (del_stmt) */ /*     str = JS_NewStringCopyZ(cx, jp->sprinter.base); */ 
584: /* MUTANT (negate) */    if(! (!str))
586: /* MUTANT (del_stmt) */ /*     JS_FreeArenaPool(&jp->pool); */ 
587: /* MUTANT (del_stmt) */ /*     INIT_SPRINTER(cx, &jp->sprinter, &jp->pool, 0); */ 
587: /* MUTANT (rep_const) */    INIT_SPRINTER(cx, &jp->sprinter, &jp->pool, 1);
587: /* MUTANT (rep_const) */    INIT_SPRINTER(cx, &jp->sprinter, &jp->pool, -1);
588: /* MUTANT (del_stmt) */ /*     return str; */ 
594: /* MUTANT (del_stmt) */ /*     va_list ap; */ 
595: /* MUTANT (del_stmt) */ /*     char *bp, *fp; */ 
596: /* MUTANT (del_stmt) */ /*     int cc; */ 
598: /* MUTANT (rep_op) */    if (*format != '\0')
598: /* MUTANT (rep_const) */    if (*format == '\1')
598: /* MUTANT (rep_const) */    if (*format == '\-1')
598: /* MUTANT (negate) */    if(! (*format == '\0'))
599: /* MUTANT (rep_const) */        return 1;
599: /* MUTANT (rep_const) */        return -1;
601: /* MUTANT (del_stmt) */ /*     va_start(ap, format); */ 
604: /* MUTANT (rep_op) */    if (*format != '\t') {
604: /* MUTANT (negate) */    if(! (*format == '\t')) {
605: /* MUTANT (rep_op) */        if (jp->pretty || Sprint(&jp->sprinter, "%*s", jp->indent, "") < 0)
605: /* MUTANT (rep_op) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") <= 0)
605: /* MUTANT (rep_op) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") > 0)
605: /* MUTANT (rep_op) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") >= 0)
605: /* MUTANT (rep_op) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") == 0)
605: /* MUTANT (rep_op) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") != 0)
605: /* MUTANT (rep_op) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") <= 0)
605: /* MUTANT (rep_op) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") > 0)
605: /* MUTANT (rep_op) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") >= 0)
605: /* MUTANT (rep_op) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") == 0)
605: /* MUTANT (rep_op) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") != 0)
605: /* MUTANT (rep_const) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") < 1)
605: /* MUTANT (rep_const) */        if (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") < -1)
605: /* MUTANT (negate) */        if(! (jp->pretty && Sprint(&jp->sprinter, "%*s", jp->indent, "") < 0))
606: /* MUTANT (rep_const) */            return 0;
606: /* MUTANT (rep_const) */            return 1;
606: /* MUTANT (rep_const) */            return ((-1)+1);
606: /* MUTANT (rep_const) */            return ((-1)-1);
607: /* MUTANT (del_stmt) */ /*         format++; */ 
607: /* MUTANT (rep_op) */        format--;
612: /* MUTANT (rep_op) */    if (!jp->pretty || format[cc = strlen(format) - 1] == '\n') {
612: /* MUTANT (rep_op) */    if (!jp->pretty && format[cc = strlen(format) - 1] != '\n') {
612: /* MUTANT (rep_const) */    if (!jp->pretty && format[cc = strlen(format) - 0] == '\n') {
612: /* MUTANT (rep_const) */    if (!jp->pretty && format[cc = strlen(format) - -1] == '\n') {
612: /* MUTANT (rep_const) */    if (!jp->pretty && format[cc = strlen(format) - ((1)+1)] == '\n') {
612: /* MUTANT (negate) */    if(! (!jp->pretty && format[cc = strlen(format) - 1] == '\n')) {
613: /* MUTANT (del_stmt) */ /*         fp = JS_strdup(jp->sprinter.context, format); */ 
614: /* MUTANT (negate) */        if(! (!fp))
615: /* MUTANT (rep_const) */            return 0;
615: /* MUTANT (rep_const) */            return 1;
615: /* MUTANT (rep_const) */            return ((-1)+1);
615: /* MUTANT (rep_const) */            return ((-1)-1);
616: /* MUTANT (del_stmt) */ /*         fp[cc] = '\0'; */ 
616: /* MUTANT (rep_const) */        fp[cc] = '\1';
616: /* MUTANT (rep_const) */        fp[cc] = '\-1';
617: /* MUTANT (del_stmt) */ /*         format = fp; */ 
622: /* MUTANT (negate) */    if(! (fp)) {
623: /* MUTANT (del_stmt) */ /*         JS_free(jp->sprinter.context, fp); */ 
624: /* MUTANT (del_stmt) */ /*         format = NULL; */ 
626: /* MUTANT (negate) */    if(! (!bp)) {
627: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(jp->sprinter.context); */ 
628: /* MUTANT (del_stmt) */ /*         return -1; */ 
628: /* MUTANT (rep_const) */        return 0;
628: /* MUTANT (rep_const) */        return 1;
628: /* MUTANT (rep_const) */        return ((-1)+1);
628: /* MUTANT (rep_const) */        return ((-1)-1);
632: /* MUTANT (rep_op) */    if (SprintPut(&jp->sprinter, bp, (size_t)cc) <= 0)
632: /* MUTANT (rep_op) */    if (SprintPut(&jp->sprinter, bp, (size_t)cc) > 0)
632: /* MUTANT (rep_op) */    if (SprintPut(&jp->sprinter, bp, (size_t)cc) >= 0)
632: /* MUTANT (rep_op) */    if (SprintPut(&jp->sprinter, bp, (size_t)cc) == 0)
632: /* MUTANT (rep_op) */    if (SprintPut(&jp->sprinter, bp, (size_t)cc) != 0)
632: /* MUTANT (rep_const) */    if (SprintPut(&jp->sprinter, bp, (size_t)cc) < 1)
632: /* MUTANT (rep_const) */    if (SprintPut(&jp->sprinter, bp, (size_t)cc) < -1)
632: /* MUTANT (negate) */    if(! (SprintPut(&jp->sprinter, bp, (size_t)cc) < 0))
633: /* MUTANT (rep_const) */        cc = 0;
633: /* MUTANT (rep_const) */        cc = 1;
633: /* MUTANT (rep_const) */        cc = ((-1)+1);
633: /* MUTANT (rep_const) */        cc = ((-1)-1);
634: /* MUTANT (del_stmt) */ /*     free(bp); */ 
636: /* MUTANT (del_stmt) */ /*     va_end(ap); */ 
637: /* MUTANT (del_stmt) */ /*     return cc; */ 
643: /* MUTANT (del_stmt) */ /*     return SprintPut(&jp->sprinter, s, strlen(s)) >= 0; */ 
643: /* MUTANT (rep_op) */    return SprintPut(&jp->sprinter, s, strlen(s)) <= 0;
643: /* MUTANT (rep_op) */    return SprintPut(&jp->sprinter, s, strlen(s)) < 0;
643: /* MUTANT (rep_op) */    return SprintPut(&jp->sprinter, s, strlen(s)) > 0;
643: /* MUTANT (rep_op) */    return SprintPut(&jp->sprinter, s, strlen(s)) == 0;
643: /* MUTANT (rep_op) */    return SprintPut(&jp->sprinter, s, strlen(s)) != 0;
643: /* MUTANT (rep_const) */    return SprintPut(&jp->sprinter, s, strlen(s)) >= 1;
643: /* MUTANT (rep_const) */    return SprintPut(&jp->sprinter, s, strlen(s)) >= -1;
649: /* MUTANT (del_stmt) */ /*     Sprinter    sprinter; */        /* sprinter for postfix to infix buffering */
650: /* MUTANT (del_stmt) */ /*     ptrdiff_t   *offsets; */        /* stack of postfix string offsets */
651: /* MUTANT (del_stmt) */ /*     jsbytecode  *opcodes; */        /* parallel stack of JS opcodes */
652: /* MUTANT (del_stmt) */ /*     uintN       top; */             /* top of stack index */
653: /* MUTANT (del_stmt) */ /*     JSPrinter   *printer; */        /* permanent output goes here */
654: /* MUTANT (del_stmt) */ /* } SprintStack; */ 
657: #define PAREN_SLOP      (0 + 1) /* MUTANT (rep_const) */
657: #define PAREN_SLOP      (1 + 1) /* MUTANT (rep_const) */
657: #define PAREN_SLOP      (-1 + 1) /* MUTANT (rep_const) */
657: #define PAREN_SLOP      (((2)+1) + 1) /* MUTANT (rep_const) */
657: #define PAREN_SLOP      (((2)-1) + 1) /* MUTANT (rep_const) */
657: #define PAREN_SLOP      (2 + 0) /* MUTANT (rep_const) */
657: #define PAREN_SLOP      (2 + -1) /* MUTANT (rep_const) */
657: #define PAREN_SLOP      (2 + ((1)+1)) /* MUTANT (rep_const) */
664: #define JSOP_GETPROP2   0 /* MUTANT (rep_const) */
664: #define JSOP_GETPROP2   1 /* MUTANT (rep_const) */
664: #define JSOP_GETPROP2   -1 /* MUTANT (rep_const) */
664: #define JSOP_GETPROP2   ((254)+1) /* MUTANT (rep_const) */
664: #define JSOP_GETPROP2   ((254)-1) /* MUTANT (rep_const) */
665: #define JSOP_GETELEM2   0 /* MUTANT (rep_const) */
665: #define JSOP_GETELEM2   1 /* MUTANT (rep_const) */
665: #define JSOP_GETELEM2   -1 /* MUTANT (rep_const) */
665: #define JSOP_GETELEM2   ((255)+1) /* MUTANT (rep_const) */
665: #define JSOP_GETELEM2   ((255)-1) /* MUTANT (rep_const) */
670: /* MUTANT (del_stmt) */ /*     uintN top; */ 
675: /* MUTANT (negate) */    if(! (!SprintAlloc(&ss->sprinter, PAREN_SLOP)))
679: /* MUTANT (del_stmt) */ /*     top = ss->top; */ 
680: /* MUTANT (del_stmt) */ /*     JS_ASSERT(top < ss->printer->script->depth); */ 
680: /* MUTANT (rep_op) */    JS_ASSERT(top <= ss->printer->script->depth);
680: /* MUTANT (rep_op) */    JS_ASSERT(top > ss->printer->script->depth);
680: /* MUTANT (rep_op) */    JS_ASSERT(top >= ss->printer->script->depth);
680: /* MUTANT (rep_op) */    JS_ASSERT(top == ss->printer->script->depth);
680: /* MUTANT (rep_op) */    JS_ASSERT(top != ss->printer->script->depth);
681: /* MUTANT (rep_op) */    if (top <= ss->printer->script->depth) {
681: /* MUTANT (rep_op) */    if (top < ss->printer->script->depth) {
681: /* MUTANT (rep_op) */    if (top > ss->printer->script->depth) {
681: /* MUTANT (rep_op) */    if (top == ss->printer->script->depth) {
681: /* MUTANT (rep_op) */    if (top != ss->printer->script->depth) {
681: /* MUTANT (negate) */    if(! (top >= ss->printer->script->depth)) {
682: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(ss->sprinter.context); */ 
683: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
688: /* MUTANT (rep_op) */    ss->opcodes[top] = (op != JSOP_GETPROP2) ? JSOP_GETPROP
689: /* MUTANT (rep_op) */                     : (op != JSOP_GETELEM2) ? JSOP_GETELEM
691: /* MUTANT (del_stmt) */ /*     ss->top = ++top; */ 
691: /* MUTANT (rep_op) */    ss->top = --top;
692: /* MUTANT (del_stmt) */ /*     ss->sprinter.offset += PAREN_SLOP; */ 
692: /* MUTANT (rep_op) */    ss->sprinter.offset -= PAREN_SLOP;
692: /* MUTANT (rep_op) */    ss->sprinter.offset *= PAREN_SLOP;
692: /* MUTANT (rep_op) */    ss->sprinter.offset %= PAREN_SLOP;
693: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
699: /* MUTANT (del_stmt) */ /*     uintN top; */ 
700: /* MUTANT (del_stmt) */ /*     const JSCodeSpec *cs, *topcs; */ 
701: /* MUTANT (del_stmt) */ /*     ptrdiff_t off; */ 
704: /* MUTANT (del_stmt) */ /*     top = ss->top; */ 
705: /* MUTANT (del_stmt) */ /*     JS_ASSERT(top != 0); */ 
705: /* MUTANT (rep_op) */    JS_ASSERT(top == 0);
705: /* MUTANT (rep_const) */    JS_ASSERT(top != 1);
705: /* MUTANT (rep_const) */    JS_ASSERT(top != -1);
706: /* MUTANT (rep_op) */    if (top != 0)
706: /* MUTANT (rep_const) */    if (top == 1)
706: /* MUTANT (rep_const) */    if (top == -1)
706: /* MUTANT (negate) */    if(! (top == 0))
707: /* MUTANT (rep_const) */        return 1;
707: /* MUTANT (rep_const) */        return -1;
709: /* MUTANT (del_stmt) */ /*     ss->top = --top; */ 
709: /* MUTANT (rep_op) */    ss->top = ++top;
710: /* MUTANT (del_stmt) */ /*     topcs = &js_CodeSpec[ss->opcodes[top]]; */ 
711: /* MUTANT (del_stmt) */ /*     cs = &js_CodeSpec[op]; */ 
712: /* MUTANT (rep_op) */    if (topcs->prec == 0 && topcs->prec < cs->prec) {
712: /* MUTANT (rep_op) */    if (topcs->prec != 0 || topcs->prec < cs->prec) {
712: /* MUTANT (rep_op) */    if (topcs->prec != 0 && topcs->prec <= cs->prec) {
712: /* MUTANT (rep_op) */    if (topcs->prec != 0 && topcs->prec > cs->prec) {
712: /* MUTANT (rep_op) */    if (topcs->prec != 0 && topcs->prec >= cs->prec) {
712: /* MUTANT (rep_op) */    if (topcs->prec != 0 && topcs->prec == cs->prec) {
712: /* MUTANT (rep_op) */    if (topcs->prec != 0 && topcs->prec != cs->prec) {
712: /* MUTANT (rep_const) */    if (topcs->prec != 1 && topcs->prec < cs->prec) {
712: /* MUTANT (rep_const) */    if (topcs->prec != -1 && topcs->prec < cs->prec) {
712: /* MUTANT (negate) */    if(! (topcs->prec != 0 && topcs->prec < cs->prec)) {
713: /* MUTANT (del_stmt) */ /*         ss->offsets[top] -= 2; */ 
713: /* MUTANT (rep_op) */        ss->offsets[top] += 2;
713: /* MUTANT (rep_op) */        ss->offsets[top] *= 2;
713: /* MUTANT (rep_op) */        ss->offsets[top] %= 2;
713: /* MUTANT (rep_const) */        ss->offsets[top] -= 0;
713: /* MUTANT (rep_const) */        ss->offsets[top] -= 1;
713: /* MUTANT (rep_const) */        ss->offsets[top] -= -1;
713: /* MUTANT (rep_const) */        ss->offsets[top] -= ((2)+1);
713: /* MUTANT (rep_const) */        ss->offsets[top] -= ((2)-1);
714: /* MUTANT (del_stmt) */ /*         ss->sprinter.offset = ss->offsets[top]; */ 
716: /* MUTANT (rep_op) */                     OFF2STR(&ss->sprinter, ss->sprinter.offset - 2));
716: /* MUTANT (rep_op) */                     OFF2STR(&ss->sprinter, ss->sprinter.offset * 2));
716: /* MUTANT (rep_op) */                     OFF2STR(&ss->sprinter, ss->sprinter.offset % 2));
716: /* MUTANT (rep_const) */                     OFF2STR(&ss->sprinter, ss->sprinter.offset + 0));
716: /* MUTANT (rep_const) */                     OFF2STR(&ss->sprinter, ss->sprinter.offset + 1));
716: /* MUTANT (rep_const) */                     OFF2STR(&ss->sprinter, ss->sprinter.offset + -1));
716: /* MUTANT (rep_const) */                     OFF2STR(&ss->sprinter, ss->sprinter.offset + ((2)+1)));
716: /* MUTANT (rep_const) */                     OFF2STR(&ss->sprinter, ss->sprinter.offset + ((2)-1)));
718: /* MUTANT (del_stmt) */ /*         off = ss->sprinter.offset = ss->offsets[top]; */ 
725: /* MUTANT (del_stmt) */ /*     jsval       key; */ 
726: /* MUTANT (del_stmt) */ /*     ptrdiff_t   offset; */ 
727: /* MUTANT (del_stmt) */ /*     JSAtom      *label; */ 
728: /* MUTANT (del_stmt) */ /*     jsint       order; */           /* source order for stable tableswitch sort */
729: /* MUTANT (del_stmt) */ /* } TableEntry; */ 
737: /* MUTANT (rep_op) */    if (te1->offset != te2->offset)
737: /* MUTANT (negate) */    if(! (te1->offset == te2->offset))
739: /* MUTANT (del_stmt) */ /*     return (int) (te1->offset - te2->offset); */ 
750: /* MUTANT (del_stmt) */ /*     JSContext *cx; */ 
751: /* MUTANT (del_stmt) */ /*     JSPrinter *jp; */ 
752: /* MUTANT (del_stmt) */ /*     char *lval, *rval; */ 
753: /* MUTANT (del_stmt) */ /*     uintN i; */ 
754: /* MUTANT (del_stmt) */ /*     ptrdiff_t diff, off, off2, caseExprOff; */ 
755: /* MUTANT (del_stmt) */ /*     jsval key; */ 
756: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
758: /* MUTANT (del_stmt) */ /*     cx = ss->sprinter.context; */ 
759: /* MUTANT (del_stmt) */ /*     jp = ss->printer; */ 
761: /* MUTANT (del_stmt) */ /*     lval = OFF2STR(&ss->sprinter, PopOff(ss, JSOP_NOP)); */ 
762: /* MUTANT (del_stmt) */ /*     js_printf(jp, "\tswitch (%s) {\n", lval); */ 
764: /* MUTANT (negate) */    if(! (tableLength)) {
765: /* MUTANT (del_stmt) */ /*         diff = table[0].offset - defaultOffset; */ 
765: /* MUTANT (rep_const) */        diff = table[1].offset - defaultOffset;
765: /* MUTANT (rep_const) */        diff = table[-1].offset - defaultOffset;
766: /* MUTANT (rep_op) */        if (diff <= 0) {
766: /* MUTANT (rep_op) */        if (diff < 0) {
766: /* MUTANT (rep_op) */        if (diff >= 0) {
766: /* MUTANT (rep_op) */        if (diff == 0) {
766: /* MUTANT (rep_op) */        if (diff != 0) {
766: /* MUTANT (rep_const) */        if (diff > 1) {
766: /* MUTANT (rep_const) */        if (diff > -1) {
766: /* MUTANT (negate) */        if(! (diff > 0)) {
767: /* MUTANT (del_stmt) */ /*             jp->indent += 2; */ 
767: /* MUTANT (rep_op) */            jp->indent -= 2;
767: /* MUTANT (rep_op) */            jp->indent *= 2;
767: /* MUTANT (rep_op) */            jp->indent %= 2;
767: /* MUTANT (rep_const) */            jp->indent += 0;
767: /* MUTANT (rep_const) */            jp->indent += 1;
767: /* MUTANT (rep_const) */            jp->indent += -1;
767: /* MUTANT (rep_const) */            jp->indent += ((2)+1);
767: /* MUTANT (rep_const) */            jp->indent += ((2)-1);
768: /* MUTANT (del_stmt) */ /*             js_printf(jp, "\t%s:\n", js_default_str); */ 
769: /* MUTANT (del_stmt) */ /*             jp->indent += 2; */ 
769: /* MUTANT (rep_op) */            jp->indent -= 2;
769: /* MUTANT (rep_op) */            jp->indent *= 2;
769: /* MUTANT (rep_op) */            jp->indent %= 2;
769: /* MUTANT (rep_const) */            jp->indent += 0;
769: /* MUTANT (rep_const) */            jp->indent += 1;
769: /* MUTANT (rep_const) */            jp->indent += -1;
769: /* MUTANT (rep_const) */            jp->indent += ((2)+1);
769: /* MUTANT (rep_const) */            jp->indent += ((2)-1);
770: /* MUTANT (rep_op) */            if (!Decompile(ss, pc - defaultOffset, diff))
770: /* MUTANT (rep_op) */            if (!Decompile(ss, pc * defaultOffset, diff))
770: /* MUTANT (rep_op) */            if (!Decompile(ss, pc % defaultOffset, diff))
770: /* MUTANT (negate) */            if(! (!Decompile(ss, pc + defaultOffset, diff)))
772: /* MUTANT (del_stmt) */ /*             jp->indent -= 4; */ 
772: /* MUTANT (rep_op) */            jp->indent += 4;
772: /* MUTANT (rep_op) */            jp->indent *= 4;
772: /* MUTANT (rep_op) */            jp->indent %= 4;
772: /* MUTANT (rep_const) */            jp->indent -= 0;
772: /* MUTANT (rep_const) */            jp->indent -= 1;
772: /* MUTANT (rep_const) */            jp->indent -= -1;
772: /* MUTANT (rep_const) */            jp->indent -= ((4)+1);
772: /* MUTANT (rep_const) */            jp->indent -= ((4)-1);
777: /* MUTANT (rep_const) */                      : 1;
777: /* MUTANT (rep_const) */                      : -1;
779: /* MUTANT (rep_op) */        for (i = 0; i <= tableLength; i++) {
779: /* MUTANT (rep_op) */        for (i = 0; i > tableLength; i++) {
779: /* MUTANT (rep_op) */        for (i = 0; i >= tableLength; i++) {
779: /* MUTANT (rep_op) */        for (i = 0; i == tableLength; i++) {
779: /* MUTANT (rep_op) */        for (i = 0; i != tableLength; i++) {
779: /* MUTANT (rep_op) */        for (i = 0; i < tableLength; i--) {
779: /* MUTANT (rep_const) */        for (i = 1; i < tableLength; i++) {
779: /* MUTANT (rep_const) */        for (i = -1; i < tableLength; i++) {
780: /* MUTANT (del_stmt) */ /*             off = table[i].offset; */ 
781: /* MUTANT (del_stmt) */ /*             off2 = (i + 1 < tableLength) ? table[i + 1].offset : switchLength; */ 
781: /* MUTANT (rep_op) */            off2 = (i - 1 < tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_op) */            off2 = (i * 1 < tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_op) */            off2 = (i % 1 < tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_op) */            off2 = (i + 1 <= tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_op) */            off2 = (i + 1 > tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_op) */            off2 = (i + 1 >= tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_op) */            off2 = (i + 1 == tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_op) */            off2 = (i + 1 != tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_op) */            off2 = (i + 1 < tableLength) ? table[i - 1].offset : switchLength;
781: /* MUTANT (rep_op) */            off2 = (i + 1 < tableLength) ? table[i * 1].offset : switchLength;
781: /* MUTANT (rep_op) */            off2 = (i + 1 < tableLength) ? table[i % 1].offset : switchLength;
781: /* MUTANT (rep_const) */            off2 = (i + 0 < tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_const) */            off2 = (i + -1 < tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_const) */            off2 = (i + ((1)+1) < tableLength) ? table[i + 1].offset : switchLength;
781: /* MUTANT (rep_const) */            off2 = (i + 1 < tableLength) ? table[i + 0].offset : switchLength;
781: /* MUTANT (rep_const) */            off2 = (i + 1 < tableLength) ? table[i + -1].offset : switchLength;
781: /* MUTANT (rep_const) */            off2 = (i + 1 < tableLength) ? table[i + ((1)+1)].offset : switchLength;
783: /* MUTANT (del_stmt) */ /*             key = table[i].key; */ 
784: /* MUTANT (negate) */            if(! (isCondSwitch)) {
785: /* MUTANT (del_stmt) */ /*                 ptrdiff_t nextCaseExprOff; */ 
792: /* MUTANT (del_stmt) */ /*                 nextCaseExprOff = (ptrdiff_t)JSVAL_TO_INT(key); */ 
792: /* MUTANT (negate) */                nextCaseExprOff = (ptrdif(!f_t)JSVAL_TO_INT(key));
793: /* MUTANT (del_stmt) */ /*                 nextCaseExprOff += js_CodeSpec[pc[nextCaseExprOff]].length; */ 
793: /* MUTANT (rep_op) */                nextCaseExprOff -= js_CodeSpec[pc[nextCaseExprOff]].length;
793: /* MUTANT (rep_op) */                nextCaseExprOff *= js_CodeSpec[pc[nextCaseExprOff]].length;
793: /* MUTANT (rep_op) */                nextCaseExprOff %= js_CodeSpec[pc[nextCaseExprOff]].length;
794: /* MUTANT (del_stmt) */ /*                 jp->indent += 2; */ 
794: /* MUTANT (rep_op) */                jp->indent -= 2;
794: /* MUTANT (rep_op) */                jp->indent *= 2;
794: /* MUTANT (rep_op) */                jp->indent %= 2;
794: /* MUTANT (rep_const) */                jp->indent += 0;
794: /* MUTANT (rep_const) */                jp->indent += 1;
794: /* MUTANT (rep_const) */                jp->indent += -1;
794: /* MUTANT (rep_const) */                jp->indent += ((2)+1);
794: /* MUTANT (rep_const) */                jp->indent += ((2)-1);
795: /* MUTANT (rep_op) */                if (!Decompile(ss, pc - caseExprOff,
795: /* MUTANT (rep_op) */                if (!Decompile(ss, pc * caseExprOff,
795: /* MUTANT (rep_op) */                if (!Decompile(ss, pc % caseExprOff,
797: /* MUTANT (del_stmt) */ /*                     return JS_FALSE; */ 
809: /* MUTANT (negate) */                if(! (table[i].label)) {
810: /* MUTANT (del_stmt) */ /*                     str = ATOM_TO_STRING(table[i].label); */ 
811: /* MUTANT (del_stmt) */ /*                     key = JSVAL_VOID; */ 
813: /* MUTANT (del_stmt) */ /*                     str = js_ValueToString(cx, key); */ 
814: /* MUTANT (negate) */                    if(! (!str))
818: /* MUTANT (rep_const) */                                   (jschar)(JSVAL_IS_STRING(key) ? '"' : 1));
818: /* MUTANT (rep_const) */                                   (jschar)(JSVAL_IS_STRING(key) ? '"' : -1));
819: /* MUTANT (negate) */                if(! (!rval))
821: /* MUTANT (del_stmt) */ /*                 RETRACT(&ss->sprinter, rval); */ 
822: /* MUTANT (del_stmt) */ /*                 jp->indent += 2; */ 
822: /* MUTANT (rep_op) */                jp->indent -= 2;
822: /* MUTANT (rep_op) */                jp->indent *= 2;
822: /* MUTANT (rep_op) */                jp->indent %= 2;
822: /* MUTANT (rep_const) */                jp->indent += 0;
822: /* MUTANT (rep_const) */                jp->indent += 1;
822: /* MUTANT (rep_const) */                jp->indent += -1;
822: /* MUTANT (rep_const) */                jp->indent += ((2)+1);
822: /* MUTANT (rep_const) */                jp->indent += ((2)-1);
823: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\tcase %s:\n", rval); */ 
826: /* MUTANT (rep_op) */            jp->indent -= 2;
826: /* MUTANT (rep_op) */            jp->indent *= 2;
826: /* MUTANT (rep_op) */            jp->indent %= 2;
826: /* MUTANT (rep_const) */            jp->indent += 0;
826: /* MUTANT (rep_const) */            jp->indent += 1;
826: /* MUTANT (rep_const) */            jp->indent += -1;
826: /* MUTANT (rep_const) */            jp->indent += ((2)+1);
826: /* MUTANT (rep_const) */            jp->indent += ((2)-1);
827: /* MUTANT (rep_op) */            if (off < defaultOffset && defaultOffset < off2) {
827: /* MUTANT (rep_op) */            if (off > defaultOffset && defaultOffset < off2) {
827: /* MUTANT (rep_op) */            if (off >= defaultOffset && defaultOffset < off2) {
827: /* MUTANT (rep_op) */            if (off == defaultOffset && defaultOffset < off2) {
827: /* MUTANT (rep_op) */            if (off != defaultOffset && defaultOffset < off2) {
827: /* MUTANT (rep_op) */            if (off <= defaultOffset || defaultOffset < off2) {
827: /* MUTANT (rep_op) */            if (off <= defaultOffset && defaultOffset <= off2) {
827: /* MUTANT (rep_op) */            if (off <= defaultOffset && defaultOffset > off2) {
827: /* MUTANT (rep_op) */            if (off <= defaultOffset && defaultOffset >= off2) {
827: /* MUTANT (rep_op) */            if (off <= defaultOffset && defaultOffset == off2) {
827: /* MUTANT (rep_op) */            if (off <= defaultOffset && defaultOffset != off2) {
827: /* MUTANT (negate) */            if(! (off <= defaultOffset && defaultOffset < off2)) {
828: /* MUTANT (del_stmt) */ /*                 diff = defaultOffset - off; */ 
829: /* MUTANT (rep_op) */                if (diff == 0) {
829: /* MUTANT (rep_const) */                if (diff != 1) {
829: /* MUTANT (rep_const) */                if (diff != -1) {
829: /* MUTANT (negate) */                if(! (diff != 0)) {
830: /* MUTANT (rep_op) */                    if (!Decompile(ss, pc - off, diff))
830: /* MUTANT (rep_op) */                    if (!Decompile(ss, pc * off, diff))
830: /* MUTANT (rep_op) */                    if (!Decompile(ss, pc % off, diff))
830: /* MUTANT (negate) */                    if(! (!Decompile(ss, pc + off, diff)))
832: /* MUTANT (del_stmt) */ /*                     off = defaultOffset; */ 
834: /* MUTANT (rep_op) */                jp->indent += 2;
834: /* MUTANT (rep_op) */                jp->indent *= 2;
834: /* MUTANT (rep_op) */                jp->indent %= 2;
834: /* MUTANT (rep_const) */                jp->indent -= 0;
834: /* MUTANT (rep_const) */                jp->indent -= 1;
834: /* MUTANT (rep_const) */                jp->indent -= -1;
834: /* MUTANT (rep_const) */                jp->indent -= ((2)+1);
834: /* MUTANT (rep_const) */                jp->indent -= ((2)-1);
835: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\t%s:\n", js_default_str); */ 
836: /* MUTANT (del_stmt) */ /*                 jp->indent += 2; */ 
836: /* MUTANT (rep_op) */                jp->indent -= 2;
836: /* MUTANT (rep_op) */                jp->indent *= 2;
836: /* MUTANT (rep_op) */                jp->indent %= 2;
836: /* MUTANT (rep_const) */                jp->indent += 0;
836: /* MUTANT (rep_const) */                jp->indent += 1;
836: /* MUTANT (rep_const) */                jp->indent += -1;
836: /* MUTANT (rep_const) */                jp->indent += ((2)+1);
836: /* MUTANT (rep_const) */                jp->indent += ((2)-1);
838: /* MUTANT (rep_op) */            if (!Decompile(ss, pc - off, off2 - off))
838: /* MUTANT (rep_op) */            if (!Decompile(ss, pc * off, off2 - off))
838: /* MUTANT (rep_op) */            if (!Decompile(ss, pc % off, off2 - off))
838: /* MUTANT (negate) */            if(! (!Decompile(ss, pc + off, off2 - off)))
840: /* MUTANT (del_stmt) */ /*             jp->indent -= 4; */ 
840: /* MUTANT (rep_op) */            jp->indent += 4;
840: /* MUTANT (rep_op) */            jp->indent *= 4;
840: /* MUTANT (rep_op) */            jp->indent %= 4;
840: /* MUTANT (rep_const) */            jp->indent -= 0;
840: /* MUTANT (rep_const) */            jp->indent -= 1;
840: /* MUTANT (rep_const) */            jp->indent -= -1;
840: /* MUTANT (rep_const) */            jp->indent -= ((4)+1);
840: /* MUTANT (rep_const) */            jp->indent -= ((4)-1);
844: /* MUTANT (rep_op) */    if (defaultOffset != switchLength) {
844: /* MUTANT (negate) */    if(! (defaultOffset == switchLength)) {
845: /* MUTANT (del_stmt) */ /*         jp->indent += 2; */ 
845: /* MUTANT (rep_op) */        jp->indent -= 2;
845: /* MUTANT (rep_op) */        jp->indent *= 2;
845: /* MUTANT (rep_op) */        jp->indent %= 2;
845: /* MUTANT (rep_const) */        jp->indent += 0;
845: /* MUTANT (rep_const) */        jp->indent += 1;
845: /* MUTANT (rep_const) */        jp->indent += -1;
845: /* MUTANT (rep_const) */        jp->indent += ((2)+1);
845: /* MUTANT (rep_const) */        jp->indent += ((2)-1);
846: /* MUTANT (del_stmt) */ /*         js_printf(jp, "\t%s:;\n", js_default_str); */ 
847: /* MUTANT (del_stmt) */ /*         jp->indent -= 2; */ 
847: /* MUTANT (rep_op) */        jp->indent += 2;
847: /* MUTANT (rep_op) */        jp->indent *= 2;
847: /* MUTANT (rep_op) */        jp->indent %= 2;
847: /* MUTANT (rep_const) */        jp->indent -= 0;
847: /* MUTANT (rep_const) */        jp->indent -= 1;
847: /* MUTANT (rep_const) */        jp->indent -= -1;
847: /* MUTANT (rep_const) */        jp->indent -= ((2)+1);
847: /* MUTANT (rep_const) */        jp->indent -= ((2)-1);
850: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
857: /* MUTANT (del_stmt) */ /*     JSScope *scope; */ 
858: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
859: /* MUTANT (del_stmt) */ /*     JSObject *obj, *proto; */ 
861: /* MUTANT (del_stmt) */ /*     scope = jp->scope; */ 
862: /* MUTANT (negate) */    while(! (scope)) {
864: /* MUTANT (rep_op) */            if (sprop->getter == getter)
864: /* MUTANT (negate) */            if(! (sprop->getter != getter))
866: /* MUTANT (del_stmt) */ /*             JS_ASSERT(sprop->flags & SPROP_HAS_SHORTID); */ 
867: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSID_IS_ATOM(sprop->id)); */ 
868: /* MUTANT (rep_op) */            if ((uintN) sprop->shortid != slot)
868: /* MUTANT (negate) */            if(! ((uintN) sprop->shortid == slot))
872: /* MUTANT (negate) */        if(! (!obj))
874: /* MUTANT (del_stmt) */ /*         proto = OBJ_GET_PROTO(jp->sprinter.context, obj); */ 
875: /* MUTANT (negate) */        if(! (!proto))
877: /* MUTANT (del_stmt) */ /*         scope = OBJ_SCOPE(proto); */ 
885: /* MUTANT (negate) */    if(! (sn)) {
886: /* MUTANT (rep_op) */        if (SN_TYPE(sn) != SRC_VAR)
886: /* MUTANT (negate) */        if(! (SN_TYPE(sn) == SRC_VAR))
888: /* MUTANT (rep_op) */        if (SN_TYPE(sn) != SRC_CONST)
888: /* MUTANT (negate) */        if(! (SN_TYPE(sn) == SRC_CONST))
897: /* MUTANT (del_stmt) */ /*     JSContext *cx; */ 
898: /* MUTANT (del_stmt) */ /*     JSPrinter *jp, *jp2; */ 
899: /* MUTANT (del_stmt) */ /*     jsbytecode *endpc, *done, *forelem_tail, *forelem_done; */ 
900: /* MUTANT (del_stmt) */ /*     ptrdiff_t tail, todo, len, oplen, cond, next; */ 
901: /* MUTANT (del_stmt) */ /*     JSOp op, lastop, saveop; */ 
902: /* MUTANT (del_stmt) */ /*     const JSCodeSpec *cs, *topcs; */ 
903: /* MUTANT (del_stmt) */ /*     jssrcnote *sn, *sn2; */ 
904: /* MUTANT (del_stmt) */ /*     const char *lval, *rval, *xval, *fmt; */ 
905: /* MUTANT (del_stmt) */ /*     jsint i, argc; */ 
906: /* MUTANT (del_stmt) */ /*     char **argv; */ 
907: /* MUTANT (del_stmt) */ /*     jsatomid atomIndex; */ 
908: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
909: /* MUTANT (del_stmt) */ /*     JSObject *obj; */ 
910: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
911: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
912: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
919: /* MUTANT (del_stmt) */ /*     int stackDummy; */ 
935: /* MUTANT (rep_op) */    (!ATOM_KEYWORD(atom) || js_IsIdentifier(ATOM_TO_STRING(atom)))
935: /* MUTANT (negate) */    (!ATOM_KEYWORD(atom) && js_IsIdentif(!ier(ATOM_TO_STRING(atom))))
945: /* MUTANT (negate) */        if(! (!ATOM_IS_IDENTIFIER(atom))) {                                      \
949: /* MUTANT (rep_const) */            quote_ = 1;                                                       \
949: /* MUTANT (rep_const) */            quote_ = -1;                                                       \
953: /* MUTANT (negate) */        if(! (!rval))                                                            \
968: /* MUTANT (negate) */    if(! (!JS_CHECK_STACK_SIZE(cx, stackDummy))) {
969: /* MUTANT (del_stmt) */ /*         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_OVER_RECURSED); */ 
970: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
974: /* MUTANT (del_stmt) */ /*     endpc = pc + nb; */ 
974: /* MUTANT (rep_op) */    endpc = pc - nb;
974: /* MUTANT (rep_op) */    endpc = pc * nb;
974: /* MUTANT (rep_op) */    endpc = pc % nb;
975: /* MUTANT (del_stmt) */ /*     forelem_tail = forelem_done = NULL; */ 
976: /* MUTANT (del_stmt) */ /*     tail = -1; */ 
976: /* MUTANT (rep_const) */    tail = 0;
976: /* MUTANT (rep_const) */    tail = 1;
976: /* MUTANT (rep_const) */    tail = ((-1)+1);
976: /* MUTANT (rep_const) */    tail = ((-1)-1);
977: /* MUTANT (del_stmt) */ /*     todo = -2; */                   /* NB: different from Sprint() error return. */
977: /* MUTANT (rep_const) */    todo = 0;                  /* NB: different from Sprint() error return. */
977: /* MUTANT (rep_const) */    todo = 1;                  /* NB: different from Sprint() error return. */
977: /* MUTANT (rep_const) */    todo = -1;                  /* NB: different from Sprint() error return. */
977: /* MUTANT (rep_const) */    todo = ((-2)+1);                  /* NB: different from Sprint() error return. */
977: /* MUTANT (rep_const) */    todo = ((-2)-1);                  /* NB: different from Sprint() error return. */
978: /* MUTANT (del_stmt) */ /*     op = JSOP_NOP; */ 
979: /* MUTANT (del_stmt) */ /*     sn = NULL; */ 
980: /* MUTANT (del_stmt) */ /*     rval = NULL; */ 
985: /* MUTANT (rep_op) */    while (pc <= endpc) {
985: /* MUTANT (rep_op) */    while (pc > endpc) {
985: /* MUTANT (rep_op) */    while (pc >= endpc) {
985: /* MUTANT (rep_op) */    while (pc == endpc) {
985: /* MUTANT (rep_op) */    while (pc != endpc) {
985: /* MUTANT (negate) */    while(! (pc < endpc)) {
986: /* MUTANT (del_stmt) */ /*         lastop = op; */ 
987: /* MUTANT (del_stmt) */ /*         op = saveop = (JSOp) *pc; */ 
988: /* MUTANT (rep_op) */        if (op <= JSOP_LIMIT) {
988: /* MUTANT (rep_op) */        if (op < JSOP_LIMIT) {
988: /* MUTANT (rep_op) */        if (op > JSOP_LIMIT) {
988: /* MUTANT (rep_op) */        if (op == JSOP_LIMIT) {
988: /* MUTANT (rep_op) */        if (op != JSOP_LIMIT) {
988: /* MUTANT (negate) */        if(! (op >= JSOP_LIMIT)) {
992: /* MUTANT (del_stmt) */ /*                 break; */ 
995: /* MUTANT (del_stmt) */ /*                 break; */ 
996: /* MUTANT (del_stmt) */ /*               default:; */ 
1000: /* MUTANT (del_stmt) */ /*         len = oplen = cs->length; */ 
1002: /* MUTANT (negate) */        if(! (cs->token)) {
1004: /* MUTANT (rep_const) */              case 0:
1004: /* MUTANT (rep_const) */              case 1:
1004: /* MUTANT (rep_const) */              case -1:
1004: /* MUTANT (rep_const) */              case ((2)+1):
1004: /* MUTANT (rep_const) */              case ((2)-1):
1006: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
1007: /* MUTANT (del_stmt) */ /*                 sn = js_GetSrcNote(jp->script, pc); */ 
1008: /* MUTANT (rep_op) */                if (sn || SN_TYPE(sn) == SRC_ASSIGNOP) {
1008: /* MUTANT (rep_op) */                if (sn && SN_TYPE(sn) != SRC_ASSIGNOP) {
1008: /* MUTANT (negate) */                if(! (sn && SN_TYPE(sn) == SRC_ASSIGNOP)) {
1010: /* MUTANT (del_stmt) */ /*                     todo = SprintPut(&ss->sprinter, rval, strlen(rval)); */ 
1011: /* MUTANT (negate) */                } else if(! (!inXML)) {
1016: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(op == JSOP_ADD); */ 
1016: /* MUTANT (rep_op) */                    JS_ASSERT(op != JSOP_ADD);
1017: /* MUTANT (del_stmt) */ /*                     todo = Sprint(&ss->sprinter, "%s%s", lval, rval); */ 
1021: /* MUTANT (rep_const) */              case 0:
1021: /* MUTANT (rep_const) */              case -1:
1021: /* MUTANT (rep_const) */              case ((1)+1):
1023: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "%s%s", cs->token, rval); */ 
1024: /* MUTANT (del_stmt) */ /*                 break; */ 
1026: /* MUTANT (rep_const) */              case 1:
1026: /* MUTANT (rep_const) */              case -1:
1028: /* MUTANT (del_stmt) */ /*                 break; */ 
1031: /* MUTANT (rep_const) */                todo = 0;
1031: /* MUTANT (rep_const) */                todo = 1;
1031: /* MUTANT (rep_const) */                todo = -1;
1031: /* MUTANT (rep_const) */                todo = ((-2)+1);
1031: /* MUTANT (rep_const) */                todo = ((-2)-1);
1032: /* MUTANT (del_stmt) */ /*                 break; */ 
1052: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
1052: /* MUTANT (rep_const) */                todo = 0;
1052: /* MUTANT (rep_const) */                todo = 1;
1052: /* MUTANT (rep_const) */                todo = -1;
1052: /* MUTANT (rep_const) */                todo = ((-2)+1);
1052: /* MUTANT (rep_const) */                todo = ((-2)-1);
1057: /* MUTANT (del_stmt) */ /*                     jp->indent += 4; */ 
1057: /* MUTANT (rep_op) */                    jp->indent -= 4;
1057: /* MUTANT (rep_op) */                    jp->indent *= 4;
1057: /* MUTANT (rep_op) */                    jp->indent %= 4;
1057: /* MUTANT (rep_const) */                    jp->indent += 0;
1057: /* MUTANT (rep_const) */                    jp->indent += 1;
1057: /* MUTANT (rep_const) */                    jp->indent += -1;
1057: /* MUTANT (rep_const) */                    jp->indent += ((4)+1);
1057: /* MUTANT (rep_const) */                    jp->indent += ((4)-1);
1058: /* MUTANT (del_stmt) */ /*                     break; */ 
1066: /* MUTANT (rep_op) */                    pc--;
1069: /* MUTANT (del_stmt) */ /*                     cond = js_GetSrcNoteOffset(sn, 0); */ 
1069: /* MUTANT (rep_const) */                    cond = js_GetSrcNoteOffset(sn, 1);
1069: /* MUTANT (rep_const) */                    cond = js_GetSrcNoteOffset(sn, -1);
1070: /* MUTANT (del_stmt) */ /*                     next = js_GetSrcNoteOffset(sn, 1); */ 
1070: /* MUTANT (rep_const) */                    next = js_GetSrcNoteOffset(sn, 0);
1070: /* MUTANT (rep_const) */                    next = js_GetSrcNoteOffset(sn, -1);
1070: /* MUTANT (rep_const) */                    next = js_GetSrcNoteOffset(sn, ((1)+1));
1071: /* MUTANT (del_stmt) */ /*                     tail = js_GetSrcNoteOffset(sn, 2); */ 
1071: /* MUTANT (rep_const) */                    tail = js_GetSrcNoteOffset(sn, 0);
1071: /* MUTANT (rep_const) */                    tail = js_GetSrcNoteOffset(sn, 1);
1071: /* MUTANT (rep_const) */                    tail = js_GetSrcNoteOffset(sn, -1);
1071: /* MUTANT (rep_const) */                    tail = js_GetSrcNoteOffset(sn, ((2)+1));
1071: /* MUTANT (rep_const) */                    tail = js_GetSrcNoteOffset(sn, ((2)-1));
1072: /* MUTANT (del_stmt) */ /*                     LOCAL_ASSERT(tail + GetJumpOffset(pc+tail, pc+tail) == 0); */ 
1072: /* MUTANT (rep_op) */                    LOCAL_ASSERT(tail - GetJumpOffset(pc+tail, pc+tail) == 0);
1072: /* MUTANT (rep_op) */                    LOCAL_ASSERT(tail * GetJumpOffset(pc+tail, pc+tail) == 0);
1072: /* MUTANT (rep_op) */                    LOCAL_ASSERT(tail % GetJumpOffset(pc+tail, pc+tail) == 0);
1072: /* MUTANT (rep_op) */                    LOCAL_ASSERT(tail + GetJumpOffset(pc-tail, pc+tail) == 0);
1072: /* MUTANT (rep_op) */                    LOCAL_ASSERT(tail + GetJumpOffset(pc*tail, pc+tail) == 0);
1072: /* MUTANT (rep_op) */                    LOCAL_ASSERT(tail + GetJumpOffset(pc%tail, pc+tail) == 0);
1072: /* MUTANT (rep_op) */                    LOCAL_ASSERT(tail + GetJumpOffset(pc+tail, pc-tail) == 0);
1072: /* MUTANT (rep_op) */                    LOCAL_ASSERT(tail + GetJumpOffset(pc+tail, pc*tail) == 0);
1072: /* MUTANT (rep_op) */                    LOCAL_ASSERT(tail + GetJumpOffset(pc+tail, pc%tail) == 0);
1072: /* MUTANT (rep_op) */                    LOCAL_ASSERT(tail + GetJumpOffset(pc+tail, pc+tail) != 0);
1072: /* MUTANT (rep_const) */                    LOCAL_ASSERT(tail + GetJumpOffset(pc+tail, pc+tail) == 1);
1072: /* MUTANT (rep_const) */                    LOCAL_ASSERT(tail + GetJumpOffset(pc+tail, pc+tail) == -1);
1077: /* MUTANT (rep_op) */                    if (pc[cond] != JSOP_IFEQ || pc[cond] == JSOP_IFEQX) {
1077: /* MUTANT (rep_op) */                    if (pc[cond] == JSOP_IFEQ && pc[cond] == JSOP_IFEQX) {
1077: /* MUTANT (rep_op) */                    if (pc[cond] == JSOP_IFEQ || pc[cond] != JSOP_IFEQX) {
1077: /* MUTANT (negate) */                    if(! (pc[cond] == JSOP_IFEQ || pc[cond] == JSOP_IFEQX)) {
1079: /* MUTANT (del_stmt) */ /*                         DECOMPILE_CODE(pc, cond); */ 
1080: /* MUTANT (del_stmt) */ /*                         js_printf(jp, " %s", POP_STR()); */ 
1086: /* MUTANT (rep_op) */                    if (pc[next] == JSOP_GOTO && pc[next] != JSOP_GOTOX) {
1086: /* MUTANT (rep_op) */                    if (pc[next] != JSOP_GOTO || pc[next] != JSOP_GOTOX) {
1086: /* MUTANT (rep_op) */                    if (pc[next] != JSOP_GOTO && pc[next] == JSOP_GOTOX) {
1086: /* MUTANT (negate) */                    if(! (pc[next] != JSOP_GOTO && pc[next] != JSOP_GOTOX)) {
1088: /* MUTANT (del_stmt) */ /*                         DECOMPILE_CODE(pc + next, tail - next - 1); */ 
1088: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc - next, tail - next - 1);
1088: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc * next, tail - next - 1);
1088: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc % next, tail - next - 1);
1088: /* MUTANT (rep_const) */                        DECOMPILE_CODE(pc + next, tail - next - 0);
1088: /* MUTANT (rep_const) */                        DECOMPILE_CODE(pc + next, tail - next - -1);
1088: /* MUTANT (rep_const) */                        DECOMPILE_CODE(pc + next, tail - next - ((1)+1));
1089: /* MUTANT (del_stmt) */ /*                         js_printf(jp, " %s", POP_STR()); */ 
1094: /* MUTANT (del_stmt) */ /*                     jp->indent += 4; */ 
1094: /* MUTANT (rep_op) */                    jp->indent -= 4;
1094: /* MUTANT (rep_op) */                    jp->indent *= 4;
1094: /* MUTANT (rep_op) */                    jp->indent %= 4;
1094: /* MUTANT (rep_const) */                    jp->indent += 0;
1094: /* MUTANT (rep_const) */                    jp->indent += 1;
1094: /* MUTANT (rep_const) */                    jp->indent += -1;
1094: /* MUTANT (rep_const) */                    jp->indent += ((4)+1);
1094: /* MUTANT (rep_const) */                    jp->indent += ((4)-1);
1095: /* MUTANT (del_stmt) */ /*                     oplen = (cond) ? js_CodeSpec[pc[cond]].length : 0; */ 
1095: /* MUTANT (rep_const) */                    oplen = (cond) ? js_CodeSpec[pc[cond]].length : 1;
1095: /* MUTANT (rep_const) */                    oplen = (cond) ? js_CodeSpec[pc[cond]].length : -1;
1096: /* MUTANT (del_stmt) */ /*                     DECOMPILE_CODE(pc + cond + oplen, next - cond - oplen); */ 
1096: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc - cond + oplen, next - cond - oplen);
1096: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc * cond + oplen, next - cond - oplen);
1096: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc % cond + oplen, next - cond - oplen);
1096: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc + cond - oplen, next - cond - oplen);
1096: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc + cond * oplen, next - cond - oplen);
1096: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc + cond % oplen, next - cond - oplen);
1097: /* MUTANT (del_stmt) */ /*                     jp->indent -= 4; */ 
1097: /* MUTANT (rep_op) */                    jp->indent += 4;
1097: /* MUTANT (rep_op) */                    jp->indent *= 4;
1097: /* MUTANT (rep_op) */                    jp->indent %= 4;
1097: /* MUTANT (rep_const) */                    jp->indent -= 0;
1097: /* MUTANT (rep_const) */                    jp->indent -= 1;
1097: /* MUTANT (rep_const) */                    jp->indent -= -1;
1097: /* MUTANT (rep_const) */                    jp->indent -= ((4)+1);
1097: /* MUTANT (rep_const) */                    jp->indent -= ((4)-1);
1098: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "\t}\n"); */ 
1101: /* MUTANT (del_stmt) */ /*                     len = tail + js_CodeSpec[pc[tail]].length; */ 
1101: /* MUTANT (rep_op) */                    len = tail - js_CodeSpec[pc[tail]].length;
1101: /* MUTANT (rep_op) */                    len = tail * js_CodeSpec[pc[tail]].length;
1101: /* MUTANT (rep_op) */                    len = tail % js_CodeSpec[pc[tail]].length;
1102: /* MUTANT (del_stmt) */ /*                     break; */ 
1106: /* MUTANT (rep_const) */                                      (jsatomid) js_GetSrcNoteOffset(sn, 1));
1106: /* MUTANT (rep_const) */                                      (jsatomid) js_GetSrcNoteOffset(sn, -1));
1107: /* MUTANT (del_stmt) */ /*                     jp->indent -= 4; */ 
1107: /* MUTANT (rep_op) */                    jp->indent += 4;
1107: /* MUTANT (rep_op) */                    jp->indent *= 4;
1107: /* MUTANT (rep_op) */                    jp->indent %= 4;
1107: /* MUTANT (rep_const) */                    jp->indent -= 0;
1107: /* MUTANT (rep_const) */                    jp->indent -= 1;
1107: /* MUTANT (rep_const) */                    jp->indent -= -1;
1107: /* MUTANT (rep_const) */                    jp->indent -= ((4)+1);
1107: /* MUTANT (rep_const) */                    jp->indent -= ((4)-1);
1108: /* MUTANT (del_stmt) */ /*                     rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0); */ 
1108: /* MUTANT (rep_const) */                    rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
1108: /* MUTANT (rep_const) */                    rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
1109: /* MUTANT (negate) */                    if(! (!rval))
1111: /* MUTANT (del_stmt) */ /*                     RETRACT(&ss->sprinter, rval); */ 
1112: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "\t%s:\n", rval); */ 
1113: /* MUTANT (del_stmt) */ /*                     jp->indent += 4; */ 
1113: /* MUTANT (rep_op) */                    jp->indent -= 4;
1113: /* MUTANT (rep_op) */                    jp->indent *= 4;
1113: /* MUTANT (rep_op) */                    jp->indent %= 4;
1113: /* MUTANT (rep_const) */                    jp->indent += 0;
1113: /* MUTANT (rep_const) */                    jp->indent += 1;
1113: /* MUTANT (rep_const) */                    jp->indent += -1;
1113: /* MUTANT (rep_const) */                    jp->indent += ((4)+1);
1113: /* MUTANT (rep_const) */                    jp->indent += ((4)-1);
1114: /* MUTANT (del_stmt) */ /*                     break; */ 
1118: /* MUTANT (rep_const) */                                      (jsatomid) js_GetSrcNoteOffset(sn, 1));
1118: /* MUTANT (rep_const) */                                      (jsatomid) js_GetSrcNoteOffset(sn, -1));
1119: /* MUTANT (del_stmt) */ /*                     rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0); */ 
1119: /* MUTANT (rep_const) */                    rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
1119: /* MUTANT (rep_const) */                    rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
1120: /* MUTANT (negate) */                    if(! (!rval))
1122: /* MUTANT (del_stmt) */ /*                     RETRACT(&ss->sprinter, rval); */ 
1123: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "\t%s: {\n", rval); */ 
1124: /* MUTANT (del_stmt) */ /*                     jp->indent += 4; */ 
1124: /* MUTANT (rep_op) */                    jp->indent -= 4;
1124: /* MUTANT (rep_op) */                    jp->indent *= 4;
1124: /* MUTANT (rep_op) */                    jp->indent %= 4;
1124: /* MUTANT (rep_const) */                    jp->indent += 0;
1124: /* MUTANT (rep_const) */                    jp->indent += 1;
1124: /* MUTANT (rep_const) */                    jp->indent += -1;
1124: /* MUTANT (rep_const) */                    jp->indent += ((4)+1);
1124: /* MUTANT (rep_const) */                    jp->indent += ((4)-1);
1125: /* MUTANT (del_stmt) */ /*                     break; */ 
1128: /* MUTANT (rep_op) */                    jp->indent += 4;
1128: /* MUTANT (rep_op) */                    jp->indent *= 4;
1128: /* MUTANT (rep_op) */                    jp->indent %= 4;
1128: /* MUTANT (rep_const) */                    jp->indent -= 0;
1128: /* MUTANT (rep_const) */                    jp->indent -= 1;
1128: /* MUTANT (rep_const) */                    jp->indent -= -1;
1128: /* MUTANT (rep_const) */                    jp->indent -= ((4)+1);
1128: /* MUTANT (rep_const) */                    jp->indent -= ((4)-1);
1129: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "\t}\n"); */ 
1130: /* MUTANT (del_stmt) */ /*                     break; */ 
1133: /* MUTANT (rep_op) */                    jp->indent += 4;
1133: /* MUTANT (rep_op) */                    jp->indent *= 4;
1133: /* MUTANT (rep_op) */                    jp->indent %= 4;
1133: /* MUTANT (rep_const) */                    jp->indent -= 0;
1133: /* MUTANT (rep_const) */                    jp->indent -= 1;
1133: /* MUTANT (rep_const) */                    jp->indent -= -1;
1133: /* MUTANT (rep_const) */                    jp->indent -= ((4)+1);
1133: /* MUTANT (rep_const) */                    jp->indent -= ((4)-1);
1134: /* MUTANT (del_stmt) */ /*                     sn = js_GetSrcNote(jp->script, pc); */ 
1135: /* MUTANT (del_stmt) */ /*                     pc += oplen; */ 
1135: /* MUTANT (rep_op) */                    pc -= oplen;
1135: /* MUTANT (rep_op) */                    pc *= oplen;
1135: /* MUTANT (rep_op) */                    pc %= oplen;
1138: /* MUTANT (del_stmt) */ /*                     LOCAL_ASSERT(*pc == JSOP_NAME); */ 
1138: /* MUTANT (rep_op) */                    LOCAL_ASSERT(*pc != JSOP_NAME);
1139: /* MUTANT (del_stmt) */ /*                     pc += js_CodeSpec[JSOP_NAME].length; */ 
1139: /* MUTANT (rep_op) */                    pc -= js_CodeSpec[JSOP_NAME].length;
1139: /* MUTANT (rep_op) */                    pc *= js_CodeSpec[JSOP_NAME].length;
1139: /* MUTANT (rep_op) */                    pc %= js_CodeSpec[JSOP_NAME].length;
1140: /* MUTANT (del_stmt) */ /*                     LOCAL_ASSERT(*pc == JSOP_PUSHOBJ); */ 
1140: /* MUTANT (rep_op) */                    LOCAL_ASSERT(*pc != JSOP_PUSHOBJ);
1141: /* MUTANT (del_stmt) */ /*                     pc += js_CodeSpec[JSOP_PUSHOBJ].length; */ 
1141: /* MUTANT (rep_op) */                    pc -= js_CodeSpec[JSOP_PUSHOBJ].length;
1141: /* MUTANT (rep_op) */                    pc *= js_CodeSpec[JSOP_PUSHOBJ].length;
1141: /* MUTANT (rep_op) */                    pc %= js_CodeSpec[JSOP_PUSHOBJ].length;
1142: /* MUTANT (del_stmt) */ /*                     LOCAL_ASSERT(*pc == JSOP_NEWINIT); */ 
1142: /* MUTANT (rep_op) */                    LOCAL_ASSERT(*pc != JSOP_NEWINIT);
1143: /* MUTANT (del_stmt) */ /*                     pc += js_CodeSpec[JSOP_NEWINIT].length; */ 
1143: /* MUTANT (rep_op) */                    pc -= js_CodeSpec[JSOP_NEWINIT].length;
1143: /* MUTANT (rep_op) */                    pc *= js_CodeSpec[JSOP_NEWINIT].length;
1143: /* MUTANT (rep_op) */                    pc %= js_CodeSpec[JSOP_NEWINIT].length;
1144: /* MUTANT (del_stmt) */ /*                     LOCAL_ASSERT(*pc == JSOP_EXCEPTION); */ 
1144: /* MUTANT (rep_op) */                    LOCAL_ASSERT(*pc != JSOP_EXCEPTION);
1145: /* MUTANT (del_stmt) */ /*                     pc += js_CodeSpec[JSOP_EXCEPTION].length; */ 
1145: /* MUTANT (rep_op) */                    pc -= js_CodeSpec[JSOP_EXCEPTION].length;
1145: /* MUTANT (rep_op) */                    pc *= js_CodeSpec[JSOP_EXCEPTION].length;
1145: /* MUTANT (rep_op) */                    pc %= js_CodeSpec[JSOP_EXCEPTION].length;
1146: /* MUTANT (rep_op) */                    if (*pc != JSOP_LITOPX) {
1146: /* MUTANT (negate) */                    if(! (*pc == JSOP_LITOPX)) {
1147: /* MUTANT (del_stmt) */ /*                         atomIndex = GET_LITERAL_INDEX(pc); */ 
1148: /* MUTANT (del_stmt) */ /*                         pc += 1 + LITERAL_INDEX_LEN; */ 
1148: /* MUTANT (rep_op) */                        pc -= 1 + LITERAL_INDEX_LEN;
1148: /* MUTANT (rep_op) */                        pc *= 1 + LITERAL_INDEX_LEN;
1148: /* MUTANT (rep_op) */                        pc %= 1 + LITERAL_INDEX_LEN;
1148: /* MUTANT (rep_op) */                        pc += 1 - LITERAL_INDEX_LEN;
1148: /* MUTANT (rep_op) */                        pc += 1 * LITERAL_INDEX_LEN;
1148: /* MUTANT (rep_op) */                        pc += 1 % LITERAL_INDEX_LEN;
1148: /* MUTANT (rep_const) */                        pc += 0 + LITERAL_INDEX_LEN;
1148: /* MUTANT (rep_const) */                        pc += -1 + LITERAL_INDEX_LEN;
1148: /* MUTANT (rep_const) */                        pc += ((1)+1) + LITERAL_INDEX_LEN;
1149: /* MUTANT (del_stmt) */ /*                         LOCAL_ASSERT(*pc == JSOP_INITCATCHVAR); */ 
1149: /* MUTANT (rep_op) */                        LOCAL_ASSERT(*pc != JSOP_INITCATCHVAR);
1150: /* MUTANT (del_stmt) */ /*                         ++pc; */ 
1150: /* MUTANT (rep_op) */                        --pc;
1152: /* MUTANT (del_stmt) */ /*                         LOCAL_ASSERT(*pc == JSOP_INITCATCHVAR); */ 
1152: /* MUTANT (rep_op) */                        LOCAL_ASSERT(*pc != JSOP_INITCATCHVAR);
1153: /* MUTANT (del_stmt) */ /*                         atomIndex = GET_ATOM_INDEX(pc); */ 
1154: /* MUTANT (del_stmt) */ /*                         pc += js_CodeSpec[JSOP_INITCATCHVAR].length; */ 
1154: /* MUTANT (rep_op) */                        pc -= js_CodeSpec[JSOP_INITCATCHVAR].length;
1154: /* MUTANT (rep_op) */                        pc *= js_CodeSpec[JSOP_INITCATCHVAR].length;
1154: /* MUTANT (rep_op) */                        pc %= js_CodeSpec[JSOP_INITCATCHVAR].length;
1157: /* MUTANT (del_stmt) */ /*                     rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0); */ 
1157: /* MUTANT (rep_const) */                    rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
1157: /* MUTANT (rep_const) */                    rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
1158: /* MUTANT (negate) */                    if(! (!rval))
1160: /* MUTANT (del_stmt) */ /*                     RETRACT(&ss->sprinter, rval); */ 
1161: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "%s", rval); */ 
1162: /* MUTANT (del_stmt) */ /*                     LOCAL_ASSERT(*pc == JSOP_ENTERWITH); */ 
1162: /* MUTANT (rep_op) */                    LOCAL_ASSERT(*pc != JSOP_ENTERWITH);
1163: /* MUTANT (del_stmt) */ /*                     pc += js_CodeSpec[JSOP_ENTERWITH].length; */ 
1163: /* MUTANT (rep_op) */                    pc -= js_CodeSpec[JSOP_ENTERWITH].length;
1163: /* MUTANT (rep_op) */                    pc *= js_CodeSpec[JSOP_ENTERWITH].length;
1163: /* MUTANT (rep_op) */                    pc %= js_CodeSpec[JSOP_ENTERWITH].length;
1165: /* MUTANT (del_stmt) */ /*                     len = js_GetSrcNoteOffset(sn, 0); */ 
1165: /* MUTANT (rep_const) */                    len = js_GetSrcNoteOffset(sn, 1);
1165: /* MUTANT (rep_const) */                    len = js_GetSrcNoteOffset(sn, -1);
1166: /* MUTANT (negate) */                    if(! (len)) {
1167: /* MUTANT (del_stmt) */ /*                         js_printf(jp, " if "); */ 
1168: /* MUTANT (del_stmt) */ /*                         DECOMPILE_CODE(pc, len); */ 
1169: /* MUTANT (del_stmt) */ /*                         js_printf(jp, "%s", POP_STR()); */ 
1170: /* MUTANT (del_stmt) */ /*                         pc += len; */ 
1170: /* MUTANT (rep_op) */                        pc -= len;
1170: /* MUTANT (rep_op) */                        pc *= len;
1170: /* MUTANT (rep_op) */                        pc %= len;
1171: /* MUTANT (del_stmt) */ /*                         LOCAL_ASSERT(*pc == JSOP_IFEQ || *pc == JSOP_IFEQX); */ 
1171: /* MUTANT (rep_op) */                        LOCAL_ASSERT(*pc != JSOP_IFEQ || *pc == JSOP_IFEQX);
1171: /* MUTANT (rep_op) */                        LOCAL_ASSERT(*pc == JSOP_IFEQ && *pc == JSOP_IFEQX);
1171: /* MUTANT (rep_op) */                        LOCAL_ASSERT(*pc == JSOP_IFEQ || *pc != JSOP_IFEQX);
1172: /* MUTANT (del_stmt) */ /*                         pc += js_CodeSpec[*pc].length; */ 
1172: /* MUTANT (rep_op) */                        pc -= js_CodeSpec[*pc].length;
1172: /* MUTANT (rep_op) */                        pc *= js_CodeSpec[*pc].length;
1172: /* MUTANT (rep_op) */                        pc %= js_CodeSpec[*pc].length;
1176: /* MUTANT (del_stmt) */ /*                     jp->indent += 4; */ 
1176: /* MUTANT (rep_op) */                    jp->indent -= 4;
1176: /* MUTANT (rep_op) */                    jp->indent *= 4;
1176: /* MUTANT (rep_op) */                    jp->indent %= 4;
1176: /* MUTANT (rep_const) */                    jp->indent += 0;
1176: /* MUTANT (rep_const) */                    jp->indent += 1;
1176: /* MUTANT (rep_const) */                    jp->indent += -1;
1176: /* MUTANT (rep_const) */                    jp->indent += ((4)+1);
1176: /* MUTANT (rep_const) */                    jp->indent += ((4)-1);
1177: /* MUTANT (del_stmt) */ /*                     todo = Sprint(&ss->sprinter, catch_cookie); */ 
1178: /* MUTANT (del_stmt) */ /*                     len = 0; */ 
1178: /* MUTANT (rep_const) */                    len = 1;
1178: /* MUTANT (rep_const) */                    len = -1;
1179: /* MUTANT (del_stmt) */ /*                     break; */ 
1183: /* MUTANT (rep_const) */                                      (jsatomid) js_GetSrcNoteOffset(sn, 1));
1183: /* MUTANT (rep_const) */                                      (jsatomid) js_GetSrcNoteOffset(sn, -1));
1184: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(ATOM_IS_OBJECT(atom)); */ 
1187: /* MUTANT (del_stmt) */ /*                     fun = (JSFunction *) JS_GetPrivate(cx, obj); */ 
1190: /* MUTANT (negate) */                    if(! (!jp2))
1192: /* MUTANT (del_stmt) */ /*                     jp2->scope = jp->scope; */ 
1193: /* MUTANT (del_stmt) */ /*                     js_puts(jp2, "\n"); */ 
1194: /* MUTANT (del_stmt) */ /*                     ok = js_DecompileFunction(jp2, fun); */ 
1195: /* MUTANT (negate) */                    if(! (ok)) {
1196: /* MUTANT (del_stmt) */ /*                         js_puts(jp2, "\n"); */ 
1197: /* MUTANT (del_stmt) */ /*                         str = js_GetPrinterOutput(jp2); */ 
1198: /* MUTANT (negate) */                        if(! (str))
1204: /* MUTANT (negate) */                    if(! (!ok))
1207: /* MUTANT (del_stmt) */ /*                     break; */ 
1209: /* MUTANT (del_stmt) */ /*                   default:; */ 
1219: /* MUTANT (del_stmt) */ /*                 cs    = &js_CodeSpec[lastop]; */ 
1220: /* MUTANT (del_stmt) */ /*                 topcs = &js_CodeSpec[ss->opcodes[ss->top]]; */ 
1221: /* MUTANT (rep_op) */                if (topcs->prec <= cs->prec) {
1221: /* MUTANT (rep_op) */                if (topcs->prec < cs->prec) {
1221: /* MUTANT (rep_op) */                if (topcs->prec > cs->prec) {
1221: /* MUTANT (rep_op) */                if (topcs->prec == cs->prec) {
1221: /* MUTANT (rep_op) */                if (topcs->prec != cs->prec) {
1221: /* MUTANT (negate) */                if(! (topcs->prec >= cs->prec)) {
1232: /* MUTANT (del_stmt) */ /*                 break; */ 
1237: /* MUTANT (del_stmt) */ /*                 jp->indent += 4; */ 
1237: /* MUTANT (rep_op) */                jp->indent -= 4;
1237: /* MUTANT (rep_op) */                jp->indent *= 4;
1237: /* MUTANT (rep_op) */                jp->indent %= 4;
1237: /* MUTANT (rep_const) */                jp->indent += 0;
1237: /* MUTANT (rep_const) */                jp->indent += 1;
1237: /* MUTANT (rep_const) */                jp->indent += -1;
1237: /* MUTANT (rep_const) */                jp->indent += ((4)+1);
1237: /* MUTANT (rep_const) */                jp->indent += ((4)-1);
1238: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
1238: /* MUTANT (rep_const) */                todo = 0;
1238: /* MUTANT (rep_const) */                todo = 1;
1238: /* MUTANT (rep_const) */                todo = -1;
1238: /* MUTANT (rep_const) */                todo = ((-2)+1);
1238: /* MUTANT (rep_const) */                todo = ((-2)-1);
1239: /* MUTANT (del_stmt) */ /*                 break; */ 
1246: /* MUTANT (rep_op) */                jp->indent += 4;
1246: /* MUTANT (rep_op) */                jp->indent *= 4;
1246: /* MUTANT (rep_op) */                jp->indent %= 4;
1246: /* MUTANT (rep_const) */                jp->indent -= 0;
1246: /* MUTANT (rep_const) */                jp->indent -= 1;
1246: /* MUTANT (rep_const) */                jp->indent -= -1;
1246: /* MUTANT (rep_const) */                jp->indent -= ((4)+1);
1246: /* MUTANT (rep_const) */                jp->indent -= ((4)-1);
1247: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\t} finally {\n"); */ 
1248: /* MUTANT (del_stmt) */ /*                 jp->indent += 4; */ 
1248: /* MUTANT (rep_op) */                jp->indent -= 4;
1248: /* MUTANT (rep_op) */                jp->indent *= 4;
1248: /* MUTANT (rep_op) */                jp->indent %= 4;
1248: /* MUTANT (rep_const) */                jp->indent += 0;
1248: /* MUTANT (rep_const) */                jp->indent += 1;
1248: /* MUTANT (rep_const) */                jp->indent += -1;
1248: /* MUTANT (rep_const) */                jp->indent += ((4)+1);
1248: /* MUTANT (rep_const) */                jp->indent += ((4)-1);
1255: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, exception_cookie); */ 
1256: /* MUTANT (rep_op) */                if (todo <= 0 || !PushOff(ss, todo, op))
1256: /* MUTANT (rep_op) */                if (todo > 0 || !PushOff(ss, todo, op))
1256: /* MUTANT (rep_op) */                if (todo >= 0 || !PushOff(ss, todo, op))
1256: /* MUTANT (rep_op) */                if (todo == 0 || !PushOff(ss, todo, op))
1256: /* MUTANT (rep_op) */                if (todo != 0 || !PushOff(ss, todo, op))
1256: /* MUTANT (rep_op) */                if (todo < 0 && !PushOff(ss, todo, op))
1256: /* MUTANT (rep_const) */                if (todo < 1 || !PushOff(ss, todo, op))
1256: /* MUTANT (rep_const) */                if (todo < -1 || !PushOff(ss, todo, op))
1256: /* MUTANT (negate) */                if(! (todo < 0 || !PushOff(ss, todo, op)))
1258: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, retsub_pc_cookie); */ 
1259: /* MUTANT (del_stmt) */ /*                 break; */ 
1263: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(strcmp(rval, retsub_pc_cookie) == 0); */ 
1263: /* MUTANT (rep_op) */                LOCAL_ASSERT(strcmp(rval, retsub_pc_cookie) != 0);
1263: /* MUTANT (rep_const) */                LOCAL_ASSERT(strcmp(rval, retsub_pc_cookie) == 1);
1263: /* MUTANT (rep_const) */                LOCAL_ASSERT(strcmp(rval, retsub_pc_cookie) == -1);
1264: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
1265: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(strcmp(lval, exception_cookie) == 0); */ 
1265: /* MUTANT (rep_op) */                LOCAL_ASSERT(strcmp(lval, exception_cookie) != 0);
1265: /* MUTANT (rep_const) */                LOCAL_ASSERT(strcmp(lval, exception_cookie) == 1);
1265: /* MUTANT (rep_const) */                LOCAL_ASSERT(strcmp(lval, exception_cookie) == -1);
1266: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
1266: /* MUTANT (rep_const) */                todo = 0;
1266: /* MUTANT (rep_const) */                todo = 1;
1266: /* MUTANT (rep_const) */                todo = -1;
1266: /* MUTANT (rep_const) */                todo = ((-2)+1);
1266: /* MUTANT (rep_const) */                todo = ((-2)-1);
1267: /* MUTANT (del_stmt) */ /*                 break; */ 
1285: /* MUTANT (rep_const) */                todo = 0;
1285: /* MUTANT (rep_const) */                todo = 1;
1285: /* MUTANT (rep_const) */                todo = -1;
1285: /* MUTANT (rep_const) */                todo = ((-2)+1);
1285: /* MUTANT (rep_const) */                todo = ((-2)-1);
1286: /* MUTANT (del_stmt) */ /*                 break; */ 
1295: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top <= (uintN) GET_ATOM_INDEX(pc));
1295: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top < (uintN) GET_ATOM_INDEX(pc));
1295: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top > (uintN) GET_ATOM_INDEX(pc));
1295: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top == (uintN) GET_ATOM_INDEX(pc));
1295: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top != (uintN) GET_ATOM_INDEX(pc));
1296: /* MUTANT (del_stmt) */ /*                 ss->top = (uintN) GET_ATOM_INDEX(pc); */ 
1297: /* MUTANT (del_stmt) */ /*                 break; */ 
1305: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(sn && SN_TYPE(sn) == SRC_HIDDEN); */ 
1305: /* MUTANT (rep_op) */                LOCAL_ASSERT(sn || SN_TYPE(sn) == SRC_HIDDEN);
1305: /* MUTANT (rep_op) */                LOCAL_ASSERT(sn && SN_TYPE(sn) != SRC_HIDDEN);
1306: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
1306: /* MUTANT (rep_const) */                todo = 0;
1306: /* MUTANT (rep_const) */                todo = 1;
1306: /* MUTANT (rep_const) */                todo = -1;
1306: /* MUTANT (rep_const) */                todo = ((-2)+1);
1306: /* MUTANT (rep_const) */                todo = ((-2)-1);
1307: /* MUTANT (del_stmt) */ /*                 break; */ 
1316: /* MUTANT (del_stmt) */ /*                     todo = -2; */ 
1316: /* MUTANT (rep_const) */                    todo = 0;
1316: /* MUTANT (rep_const) */                    todo = 1;
1316: /* MUTANT (rep_const) */                    todo = -1;
1316: /* MUTANT (rep_const) */                    todo = ((-2)+1);
1316: /* MUTANT (rep_const) */                    todo = ((-2)-1);
1317: /* MUTANT (del_stmt) */ /*                     goto do_forloop; */ 
1322: /* MUTANT (negate) */                    if(! (!lval))
1329: /* MUTANT (del_stmt) */ /*                     done = pc + len; */ 
1329: /* MUTANT (rep_op) */                    done = pc - len;
1329: /* MUTANT (rep_op) */                    done = pc * len;
1329: /* MUTANT (rep_op) */                    done = pc % len;
1330: /* MUTANT (del_stmt) */ /*                     pc += js_GetSrcNoteOffset(sn, 0); */ 
1330: /* MUTANT (rep_op) */                    pc -= js_GetSrcNoteOffset(sn, 0);
1330: /* MUTANT (rep_op) */                    pc *= js_GetSrcNoteOffset(sn, 0);
1330: /* MUTANT (rep_op) */                    pc %= js_GetSrcNoteOffset(sn, 0);
1330: /* MUTANT (rep_const) */                    pc += js_GetSrcNoteOffset(sn, 1);
1330: /* MUTANT (rep_const) */                    pc += js_GetSrcNoteOffset(sn, -1);
1331: /* MUTANT (del_stmt) */ /*                     len = 0; */ 
1331: /* MUTANT (rep_const) */                    len = 1;
1331: /* MUTANT (rep_const) */                    len = -1;
1333: /* MUTANT (negate) */                    if(! (!Decompile(ss, done, pc - done))) {
1334: /* MUTANT (del_stmt) */ /*                         JS_free(cx, (char *)lval); */ 
1335: /* MUTANT (del_stmt) */ /*                         return JS_FALSE; */ 
1340: /* MUTANT (del_stmt) */ /*                     todo = Sprint(&ss->sprinter, "%s, %s", lval, rval); */ 
1341: /* MUTANT (del_stmt) */ /*                     JS_free(cx, (char *)lval); */ 
1342: /* MUTANT (del_stmt) */ /*                     break; */ 
1346: /* MUTANT (rep_const) */                    todo = 0;
1346: /* MUTANT (rep_const) */                    todo = 1;
1346: /* MUTANT (rep_const) */                    todo = -1;
1346: /* MUTANT (rep_const) */                    todo = ((-2)+1);
1346: /* MUTANT (rep_const) */                    todo = ((-2)-1);
1347: /* MUTANT (del_stmt) */ /*                     break; */ 
1351: /* MUTANT (rep_op) */                    if (*rval == '\0')
1351: /* MUTANT (rep_const) */                    if (*rval != '\1')
1351: /* MUTANT (rep_const) */                    if (*rval != '\-1')
1351: /* MUTANT (negate) */                    if(! (*rval != '\0'))
1353: /* MUTANT (del_stmt) */ /*                     todo = -2; */ 
1353: /* MUTANT (rep_const) */                    todo = 0;
1353: /* MUTANT (rep_const) */                    todo = 1;
1353: /* MUTANT (rep_const) */                    todo = -1;
1353: /* MUTANT (rep_const) */                    todo = ((-2)+1);
1353: /* MUTANT (rep_const) */                    todo = ((-2)-1);
1354: /* MUTANT (del_stmt) */ /*                     break; */ 
1360: /* MUTANT (del_stmt) */ /*                 (void) PopOff(ss, op); */ 
1361: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
1361: /* MUTANT (rep_const) */                todo = 0;
1361: /* MUTANT (rep_const) */                todo = 1;
1361: /* MUTANT (rep_const) */                todo = -1;
1361: /* MUTANT (rep_const) */                todo = ((-2)+1);
1361: /* MUTANT (rep_const) */                todo = ((-2)-1);
1362: /* MUTANT (del_stmt) */ /*                 break; */ 
1366: /* MUTANT (del_stmt) */ /*                 rval = POP_STR(); */ 
1367: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\twith (%s) {\n", rval); */ 
1368: /* MUTANT (del_stmt) */ /*                 jp->indent += 4; */ 
1368: /* MUTANT (rep_op) */                jp->indent -= 4;
1368: /* MUTANT (rep_op) */                jp->indent *= 4;
1368: /* MUTANT (rep_op) */                jp->indent %= 4;
1368: /* MUTANT (rep_const) */                jp->indent += 0;
1368: /* MUTANT (rep_const) */                jp->indent += 1;
1368: /* MUTANT (rep_const) */                jp->indent += -1;
1368: /* MUTANT (rep_const) */                jp->indent += ((4)+1);
1368: /* MUTANT (rep_const) */                jp->indent += ((4)-1);
1369: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, with_cookie); */ 
1370: /* MUTANT (del_stmt) */ /*                 break; */ 
1374: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
1374: /* MUTANT (rep_const) */                todo = 0;
1374: /* MUTANT (rep_const) */                todo = 1;
1374: /* MUTANT (rep_const) */                todo = -1;
1374: /* MUTANT (rep_const) */                todo = ((-2)+1);
1374: /* MUTANT (rep_const) */                todo = ((-2)-1);
1375: /* MUTANT (rep_op) */                if (sn || SN_TYPE(sn) == SRC_HIDDEN)
1375: /* MUTANT (rep_op) */                if (sn && SN_TYPE(sn) != SRC_HIDDEN)
1375: /* MUTANT (negate) */                if(! (sn && SN_TYPE(sn) == SRC_HIDDEN))
1377: /* MUTANT (del_stmt) */ /*                 rval = POP_STR(); */ 
1378: /* MUTANT (rep_op) */                if (sn || SN_TYPE(sn) == SRC_CATCH) {
1378: /* MUTANT (rep_op) */                if (sn && SN_TYPE(sn) != SRC_CATCH) {
1378: /* MUTANT (negate) */                if(! (sn && SN_TYPE(sn) == SRC_CATCH)) {
1379: /* MUTANT (del_stmt) */ /*                     LOCAL_ASSERT(strcmp(rval, catch_cookie) == 0); */ 
1379: /* MUTANT (rep_op) */                    LOCAL_ASSERT(strcmp(rval, catch_cookie) != 0);
1379: /* MUTANT (rep_const) */                    LOCAL_ASSERT(strcmp(rval, catch_cookie) == 1);
1379: /* MUTANT (rep_const) */                    LOCAL_ASSERT(strcmp(rval, catch_cookie) == -1);
1380: /* MUTANT (del_stmt) */ /*                     LOCAL_ASSERT((uintN) js_GetSrcNoteOffset(sn, 0) == ss->top); */ 
1380: /* MUTANT (rep_op) */                    LOCAL_ASSERT((uintN) js_GetSrcNoteOffset(sn, 0) != ss->top);
1380: /* MUTANT (rep_const) */                    LOCAL_ASSERT((uintN) js_GetSrcNoteOffset(sn, 1) == ss->top);
1380: /* MUTANT (rep_const) */                    LOCAL_ASSERT((uintN) js_GetSrcNoteOffset(sn, -1) == ss->top);
1381: /* MUTANT (del_stmt) */ /*                     break; */ 
1383: /* MUTANT (rep_op) */                LOCAL_ASSERT(strcmp(rval, with_cookie) != 0);
1383: /* MUTANT (rep_const) */                LOCAL_ASSERT(strcmp(rval, with_cookie) == 1);
1383: /* MUTANT (rep_const) */                LOCAL_ASSERT(strcmp(rval, with_cookie) == -1);
1384: /* MUTANT (del_stmt) */ /*                 jp->indent -= 4; */ 
1384: /* MUTANT (rep_op) */                jp->indent += 4;
1384: /* MUTANT (rep_op) */                jp->indent *= 4;
1384: /* MUTANT (rep_op) */                jp->indent %= 4;
1384: /* MUTANT (rep_const) */                jp->indent -= 0;
1384: /* MUTANT (rep_const) */                jp->indent -= 1;
1384: /* MUTANT (rep_const) */                jp->indent -= -1;
1384: /* MUTANT (rep_const) */                jp->indent -= ((4)+1);
1384: /* MUTANT (rep_const) */                jp->indent -= ((4)-1);
1385: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\t}\n"); */ 
1386: /* MUTANT (del_stmt) */ /*                 break; */ 
1391: /* MUTANT (del_stmt) */ /*                 rval = POP_STR(); */ 
1392: /* MUTANT (rep_op) */                if (*rval == '\0')
1392: /* MUTANT (rep_const) */                if (*rval != '\1')
1392: /* MUTANT (rep_const) */                if (*rval != '\-1')
1392: /* MUTANT (negate) */                if(! (*rval != '\0'))
1396: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
1396: /* MUTANT (rep_const) */                todo = 0;
1396: /* MUTANT (rep_const) */                todo = 1;
1396: /* MUTANT (rep_const) */                todo = -1;
1396: /* MUTANT (rep_const) */                todo = ((-2)+1);
1396: /* MUTANT (rep_const) */                todo = ((-2)-1);
1397: /* MUTANT (del_stmt) */ /*                 break; */ 
1401: /* MUTANT (rep_const) */                todo = 0;
1401: /* MUTANT (rep_const) */                todo = 1;
1401: /* MUTANT (rep_const) */                todo = -1;
1401: /* MUTANT (rep_const) */                todo = ((-2)+1);
1401: /* MUTANT (rep_const) */                todo = ((-2)-1);
1402: /* MUTANT (del_stmt) */ /*                 break; */ 
1406: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
1406: /* MUTANT (rep_const) */                todo = 0;
1406: /* MUTANT (rep_const) */                todo = 1;
1406: /* MUTANT (rep_const) */                todo = -1;
1406: /* MUTANT (rep_const) */                todo = ((-2)+1);
1406: /* MUTANT (rep_const) */                todo = ((-2)-1);
1407: /* MUTANT (rep_op) */                if (sn || SN_TYPE(sn) == SRC_HIDDEN)
1407: /* MUTANT (rep_op) */                if (sn && SN_TYPE(sn) != SRC_HIDDEN)
1407: /* MUTANT (negate) */                if(! (sn && SN_TYPE(sn) == SRC_HIDDEN))
1409: /* MUTANT (del_stmt) */ /*                 rval = POP_STR(); */ 
1410: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\t%s %s;\n", cs->name, rval); */ 
1411: /* MUTANT (del_stmt) */ /*                 break; */ 
1420: /* MUTANT (rep_const) */                                      (jsatomid) js_GetSrcNoteOffset(sn, 1));
1420: /* MUTANT (rep_const) */                                      (jsatomid) js_GetSrcNoteOffset(sn, -1));
1421: /* MUTANT (del_stmt) */ /*                     rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0); */ 
1421: /* MUTANT (rep_const) */                    rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
1421: /* MUTANT (rep_const) */                    rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
1422: /* MUTANT (negate) */                    if(! (!rval))
1424: /* MUTANT (del_stmt) */ /*                     RETRACT(&ss->sprinter, rval); */ 
1425: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "\tcontinue %s;\n", rval); */ 
1426: /* MUTANT (del_stmt) */ /*                     break; */ 
1429: /* MUTANT (del_stmt) */ /*                     break; */ 
1432: /* MUTANT (rep_const) */                                      (jsatomid) js_GetSrcNoteOffset(sn, 1));
1432: /* MUTANT (rep_const) */                                      (jsatomid) js_GetSrcNoteOffset(sn, -1));
1433: /* MUTANT (del_stmt) */ /*                     rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0); */ 
1433: /* MUTANT (rep_const) */                    rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
1433: /* MUTANT (rep_const) */                    rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
1434: /* MUTANT (negate) */                    if(! (!rval))
1436: /* MUTANT (del_stmt) */ /*                     RETRACT(&ss->sprinter, rval); */ 
1437: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "\tbreak %s;\n", rval); */ 
1438: /* MUTANT (del_stmt) */ /*                     break; */ 
1443: /* MUTANT (del_stmt) */ /*                     break; */ 
1445: /* MUTANT (rep_const) */                todo = 0;
1445: /* MUTANT (rep_const) */                todo = 1;
1445: /* MUTANT (rep_const) */                todo = -1;
1445: /* MUTANT (rep_const) */                todo = ((-2)+1);
1445: /* MUTANT (rep_const) */                todo = ((-2)-1);
1446: /* MUTANT (del_stmt) */ /*                 break; */ 
1451: /* MUTANT (del_stmt) */ /*                 sn = js_GetSrcNote(jp->script, pc); */ 
1457: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "\tif (%s) {\n", rval); */ 
1457: /* MUTANT (negate) */                    js_printf(jp, "\tif(! (%s)) {\n", rval);
1458: /* MUTANT (del_stmt) */ /*                     jp->indent += 4; */ 
1458: /* MUTANT (rep_op) */                    jp->indent -= 4;
1458: /* MUTANT (rep_op) */                    jp->indent *= 4;
1458: /* MUTANT (rep_op) */                    jp->indent %= 4;
1458: /* MUTANT (rep_const) */                    jp->indent += 0;
1458: /* MUTANT (rep_const) */                    jp->indent += 1;
1458: /* MUTANT (rep_const) */                    jp->indent += -1;
1458: /* MUTANT (rep_const) */                    jp->indent += ((4)+1);
1458: /* MUTANT (rep_const) */                    jp->indent += ((4)-1);
1459: /* MUTANT (rep_op) */                    if (SN_TYPE(sn) != SRC_IF) {
1459: /* MUTANT (negate) */                    if(! (SN_TYPE(sn) == SRC_IF)) {
1460: /* MUTANT (del_stmt) */ /*                         DECOMPILE_CODE(pc + oplen, len - oplen); */ 
1460: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc - oplen, len - oplen);
1460: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc * oplen, len - oplen);
1460: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc % oplen, len - oplen);
1462: /* MUTANT (del_stmt) */ /*                         len = js_GetSrcNoteOffset(sn, 0); */ 
1462: /* MUTANT (rep_const) */                        len = js_GetSrcNoteOffset(sn, 1);
1462: /* MUTANT (rep_const) */                        len = js_GetSrcNoteOffset(sn, -1);
1463: /* MUTANT (del_stmt) */ /*                         DECOMPILE_CODE(pc + oplen, len - oplen); */ 
1463: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc - oplen, len - oplen);
1463: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc * oplen, len - oplen);
1463: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc % oplen, len - oplen);
1464: /* MUTANT (del_stmt) */ /*                         jp->indent -= 4; */ 
1464: /* MUTANT (rep_op) */                        jp->indent += 4;
1464: /* MUTANT (rep_op) */                        jp->indent *= 4;
1464: /* MUTANT (rep_op) */                        jp->indent %= 4;
1464: /* MUTANT (rep_const) */                        jp->indent -= 0;
1464: /* MUTANT (rep_const) */                        jp->indent -= 1;
1464: /* MUTANT (rep_const) */                        jp->indent -= -1;
1464: /* MUTANT (rep_const) */                        jp->indent -= ((4)+1);
1464: /* MUTANT (rep_const) */                        jp->indent -= ((4)-1);
1465: /* MUTANT (del_stmt) */ /*                         pc += len; */ 
1465: /* MUTANT (rep_op) */                        pc -= len;
1465: /* MUTANT (rep_op) */                        pc *= len;
1465: /* MUTANT (rep_op) */                        pc %= len;
1466: /* MUTANT (del_stmt) */ /*                         LOCAL_ASSERT(*pc == JSOP_GOTO || *pc == JSOP_GOTOX); */ 
1466: /* MUTANT (rep_op) */                        LOCAL_ASSERT(*pc != JSOP_GOTO || *pc == JSOP_GOTOX);
1466: /* MUTANT (rep_op) */                        LOCAL_ASSERT(*pc == JSOP_GOTO && *pc == JSOP_GOTOX);
1466: /* MUTANT (rep_op) */                        LOCAL_ASSERT(*pc == JSOP_GOTO || *pc != JSOP_GOTOX);
1467: /* MUTANT (del_stmt) */ /*                         oplen = js_CodeSpec[*pc].length; */ 
1468: /* MUTANT (del_stmt) */ /*                         len = GetJumpOffset(pc, pc); */ 
1469: /* MUTANT (del_stmt) */ /*                         js_printf(jp, "\t} else {\n"); */ 
1470: /* MUTANT (del_stmt) */ /*                         jp->indent += 4; */ 
1470: /* MUTANT (rep_op) */                        jp->indent -= 4;
1470: /* MUTANT (rep_op) */                        jp->indent *= 4;
1470: /* MUTANT (rep_op) */                        jp->indent %= 4;
1470: /* MUTANT (rep_const) */                        jp->indent += 0;
1470: /* MUTANT (rep_const) */                        jp->indent += 1;
1470: /* MUTANT (rep_const) */                        jp->indent += -1;
1470: /* MUTANT (rep_const) */                        jp->indent += ((4)+1);
1470: /* MUTANT (rep_const) */                        jp->indent += ((4)-1);
1471: /* MUTANT (del_stmt) */ /*                         DECOMPILE_CODE(pc + oplen, len - oplen); */ 
1471: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc - oplen, len - oplen);
1471: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc * oplen, len - oplen);
1471: /* MUTANT (rep_op) */                        DECOMPILE_CODE(pc % oplen, len - oplen);
1473: /* MUTANT (rep_op) */                    jp->indent += 4;
1473: /* MUTANT (rep_op) */                    jp->indent *= 4;
1473: /* MUTANT (rep_op) */                    jp->indent %= 4;
1473: /* MUTANT (rep_const) */                    jp->indent -= 0;
1473: /* MUTANT (rep_const) */                    jp->indent -= 1;
1473: /* MUTANT (rep_const) */                    jp->indent -= -1;
1473: /* MUTANT (rep_const) */                    jp->indent -= ((4)+1);
1473: /* MUTANT (rep_const) */                    jp->indent -= ((4)-1);
1474: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "\t}\n"); */ 
1475: /* MUTANT (del_stmt) */ /*                     todo = -2; */ 
1475: /* MUTANT (rep_const) */                    todo = 0;
1475: /* MUTANT (rep_const) */                    todo = 1;
1475: /* MUTANT (rep_const) */                    todo = -1;
1475: /* MUTANT (rep_const) */                    todo = ((-2)+1);
1475: /* MUTANT (rep_const) */                    todo = ((-2)-1);
1476: /* MUTANT (del_stmt) */ /*                     break; */ 
1480: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "\twhile (%s) {\n", rval); */ 
1480: /* MUTANT (negate) */                    js_printf(jp, "\twhile(! (%s)) {\n", rval);
1481: /* MUTANT (del_stmt) */ /*                     jp->indent += 4; */ 
1481: /* MUTANT (rep_op) */                    jp->indent -= 4;
1481: /* MUTANT (rep_op) */                    jp->indent *= 4;
1481: /* MUTANT (rep_op) */                    jp->indent %= 4;
1481: /* MUTANT (rep_const) */                    jp->indent += 0;
1481: /* MUTANT (rep_const) */                    jp->indent += 1;
1481: /* MUTANT (rep_const) */                    jp->indent += -1;
1481: /* MUTANT (rep_const) */                    jp->indent += ((4)+1);
1481: /* MUTANT (rep_const) */                    jp->indent += ((4)-1);
1482: /* MUTANT (del_stmt) */ /*                     tail = js_GetSrcNoteOffset(sn, 0); */ 
1482: /* MUTANT (rep_const) */                    tail = js_GetSrcNoteOffset(sn, 1);
1482: /* MUTANT (rep_const) */                    tail = js_GetSrcNoteOffset(sn, -1);
1483: /* MUTANT (del_stmt) */ /*                     DECOMPILE_CODE(pc + oplen, tail - oplen); */ 
1483: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc - oplen, tail - oplen);
1483: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc * oplen, tail - oplen);
1483: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc % oplen, tail - oplen);
1484: /* MUTANT (del_stmt) */ /*                     jp->indent -= 4; */ 
1484: /* MUTANT (rep_op) */                    jp->indent += 4;
1484: /* MUTANT (rep_op) */                    jp->indent *= 4;
1484: /* MUTANT (rep_op) */                    jp->indent %= 4;
1484: /* MUTANT (rep_const) */                    jp->indent -= 0;
1484: /* MUTANT (rep_const) */                    jp->indent -= 1;
1484: /* MUTANT (rep_const) */                    jp->indent -= -1;
1484: /* MUTANT (rep_const) */                    jp->indent -= ((4)+1);
1484: /* MUTANT (rep_const) */                    jp->indent -= ((4)-1);
1485: /* MUTANT (del_stmt) */ /*                     js_printf(jp, "\t}\n"); */ 
1486: /* MUTANT (del_stmt) */ /*                     todo = -2; */ 
1486: /* MUTANT (rep_const) */                    todo = 0;
1486: /* MUTANT (rep_const) */                    todo = 1;
1486: /* MUTANT (rep_const) */                    todo = -1;
1486: /* MUTANT (rep_const) */                    todo = ((-2)+1);
1486: /* MUTANT (rep_const) */                    todo = ((-2)-1);
1487: /* MUTANT (del_stmt) */ /*                     break; */ 
1491: /* MUTANT (negate) */                    if(! (!xval))
1493: /* MUTANT (del_stmt) */ /*                     len = js_GetSrcNoteOffset(sn, 0); */ 
1493: /* MUTANT (rep_const) */                    len = js_GetSrcNoteOffset(sn, 1);
1493: /* MUTANT (rep_const) */                    len = js_GetSrcNoteOffset(sn, -1);
1494: /* MUTANT (del_stmt) */ /*                     DECOMPILE_CODE(pc + oplen, len - oplen); */ 
1494: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc - oplen, len - oplen);
1494: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc * oplen, len - oplen);
1494: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc % oplen, len - oplen);
1495: /* MUTANT (del_stmt) */ /*                     lval = JS_strdup(cx, POP_STR()); */ 
1496: /* MUTANT (negate) */                    if(! (!lval)) {
1497: /* MUTANT (del_stmt) */ /*                         JS_free(cx, (void *)xval); */ 
1498: /* MUTANT (del_stmt) */ /*                         return JS_FALSE; */ 
1500: /* MUTANT (rep_op) */                    pc -= len;
1500: /* MUTANT (rep_op) */                    pc *= len;
1500: /* MUTANT (rep_op) */                    pc %= len;
1501: /* MUTANT (del_stmt) */ /*                     LOCAL_ASSERT(*pc == JSOP_GOTO || *pc == JSOP_GOTOX); */ 
1501: /* MUTANT (rep_op) */                    LOCAL_ASSERT(*pc != JSOP_GOTO || *pc == JSOP_GOTOX);
1501: /* MUTANT (rep_op) */                    LOCAL_ASSERT(*pc == JSOP_GOTO && *pc == JSOP_GOTOX);
1501: /* MUTANT (rep_op) */                    LOCAL_ASSERT(*pc == JSOP_GOTO || *pc != JSOP_GOTOX);
1502: /* MUTANT (del_stmt) */ /*                     oplen = js_CodeSpec[*pc].length; */ 
1503: /* MUTANT (del_stmt) */ /*                     len = GetJumpOffset(pc, pc); */ 
1504: /* MUTANT (del_stmt) */ /*                     DECOMPILE_CODE(pc + oplen, len - oplen); */ 
1504: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc - oplen, len - oplen);
1504: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc * oplen, len - oplen);
1504: /* MUTANT (rep_op) */                    DECOMPILE_CODE(pc % oplen, len - oplen);
1505: /* MUTANT (del_stmt) */ /*                     rval = POP_STR(); */ 
1508: /* MUTANT (del_stmt) */ /*                     JS_free(cx, (void *)xval); */ 
1509: /* MUTANT (del_stmt) */ /*                     JS_free(cx, (void *)lval); */ 
1510: /* MUTANT (del_stmt) */ /*                     break; */ 
1521: /* MUTANT (rep_op) */                jp->indent += 4;
1521: /* MUTANT (rep_op) */                jp->indent *= 4;
1521: /* MUTANT (rep_op) */                jp->indent %= 4;
1521: /* MUTANT (rep_const) */                jp->indent -= 0;
1521: /* MUTANT (rep_const) */                jp->indent -= 1;
1521: /* MUTANT (rep_const) */                jp->indent -= -1;
1521: /* MUTANT (rep_const) */                jp->indent -= ((4)+1);
1521: /* MUTANT (rep_const) */                jp->indent -= ((4)-1);
1522: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\t} while (%s);\n", POP_STR()); */ 
1522: /* MUTANT (negate) */                js_printf(jp, "\t} while(! (%s));\n", POP_STR());
1523: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
1523: /* MUTANT (rep_const) */                todo = 0;
1523: /* MUTANT (rep_const) */                todo = 1;
1523: /* MUTANT (rep_const) */                todo = -1;
1523: /* MUTANT (rep_const) */                todo = ((-2)+1);
1523: /* MUTANT (rep_const) */                todo = ((-2)-1);
1525: /* MUTANT (rep_const) */                JS_ASSERT(1);
1525: /* MUTANT (rep_const) */                JS_ASSERT(-1);
1536: /* MUTANT (negate) */                if(! (!lval))
1538: /* MUTANT (del_stmt) */ /*                 done = pc + GetJumpOffset(pc, pc); */ 
1538: /* MUTANT (rep_op) */                done = pc - GetJumpOffset(pc, pc);
1538: /* MUTANT (rep_op) */                done = pc * GetJumpOffset(pc, pc);
1538: /* MUTANT (rep_op) */                done = pc % GetJumpOffset(pc, pc);
1539: /* MUTANT (del_stmt) */ /*                 pc += len; */ 
1539: /* MUTANT (rep_op) */                pc -= len;
1539: /* MUTANT (rep_op) */                pc *= len;
1539: /* MUTANT (rep_op) */                pc %= len;
1540: /* MUTANT (del_stmt) */ /*                 len = PTRDIFF(done, pc, jsbytecode); */ 
1541: /* MUTANT (del_stmt) */ /*                 DECOMPILE_CODE(pc, len); */ 
1542: /* MUTANT (del_stmt) */ /*                 rval = POP_STR(); */ 
1543: /* MUTANT (rep_op) */                if (jp->pretty ||
1544: /* MUTANT (rep_op) */                    jp->indent - 4 + strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent * 4 + strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent % 4 + strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 - strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 * strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 % strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) - 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) * 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) % 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) + 4 - strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) + 4 * strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) + 4 % strlen(rval) > 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) + 4 + strlen(rval) <= 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) + 4 + strlen(rval) < 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) + 4 + strlen(rval) >= 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) + 4 + strlen(rval) == 75) {
1544: /* MUTANT (rep_op) */                    jp->indent + 4 + strlen(lval) + 4 + strlen(rval) != 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + 0 + strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + 1 + strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + -1 + strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + ((4)+1) + strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + ((4)-1) + strlen(lval) + 4 + strlen(rval) > 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + 4 + strlen(lval) + 0 + strlen(rval) > 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + 4 + strlen(lval) + 1 + strlen(rval) > 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + 4 + strlen(lval) + -1 + strlen(rval) > 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + 4 + strlen(lval) + ((4)+1) + strlen(rval) > 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + 4 + strlen(lval) + ((4)-1) + strlen(rval) > 75) {
1544: /* MUTANT (rep_const) */                    jp->indent + 4 + strlen(lval) + 4 + strlen(rval) > 0) {
1544: /* MUTANT (rep_const) */                    jp->indent + 4 + strlen(lval) + 4 + strlen(rval) > 1) {
1544: /* MUTANT (rep_const) */                    jp->indent + 4 + strlen(lval) + 4 + strlen(rval) > -1) {
1544: /* MUTANT (rep_const) */                    jp->indent + 4 + strlen(lval) + 4 + strlen(rval) > ((75)+1)) {
1544: /* MUTANT (rep_const) */                    jp->indent + 4 + strlen(lval) + 4 + strlen(rval) > ((75)-1)) {
1545: /* MUTANT (del_stmt) */ /*                     rval = JS_strdup(cx, rval); */ 
1546: /* MUTANT (negate) */                    if(! (!rval)) {
1547: /* MUTANT (del_stmt) */ /*                         tail = -1; */ 
1547: /* MUTANT (rep_const) */                        tail = 0;
1547: /* MUTANT (rep_const) */                        tail = 1;
1547: /* MUTANT (rep_const) */                        tail = ((-1)+1);
1547: /* MUTANT (rep_const) */                        tail = ((-1)-1);
1549: /* MUTANT (del_stmt) */ /*                         todo = Sprint(&ss->sprinter, "%s %s\n", lval, xval); */ 
1551: /* MUTANT (rep_op) */                                      jp->indent - 4, "", rval);
1551: /* MUTANT (rep_op) */                                      jp->indent * 4, "", rval);
1551: /* MUTANT (rep_op) */                                      jp->indent % 4, "", rval);
1551: /* MUTANT (rep_const) */                                      jp->indent + 0, "", rval);
1551: /* MUTANT (rep_const) */                                      jp->indent + 1, "", rval);
1551: /* MUTANT (rep_const) */                                      jp->indent + -1, "", rval);
1551: /* MUTANT (rep_const) */                                      jp->indent + ((4)+1), "", rval);
1551: /* MUTANT (rep_const) */                                      jp->indent + ((4)-1), "", rval);
1552: /* MUTANT (del_stmt) */ /*                         JS_free(cx, (char *)rval); */ 
1554: /* MUTANT (rep_op) */                    if (tail <= 0)
1554: /* MUTANT (rep_op) */                    if (tail > 0)
1554: /* MUTANT (rep_op) */                    if (tail >= 0)
1554: /* MUTANT (rep_op) */                    if (tail == 0)
1554: /* MUTANT (rep_op) */                    if (tail != 0)
1554: /* MUTANT (rep_const) */                    if (tail < 1)
1554: /* MUTANT (rep_const) */                    if (tail < -1)
1554: /* MUTANT (negate) */                    if(! (tail < 0))
1555: /* MUTANT (rep_const) */                        todo = 0;
1555: /* MUTANT (rep_const) */                        todo = 1;
1555: /* MUTANT (rep_const) */                        todo = ((-1)+1);
1555: /* MUTANT (rep_const) */                        todo = ((-1)-1);
1557: /* MUTANT (del_stmt) */ /*                     todo = Sprint(&ss->sprinter, "%s %s %s", lval, xval, rval); */ 
1560: /* MUTANT (del_stmt) */ /*                 break; */ 
1565: /* MUTANT (del_stmt) */ /*                 goto do_logical_connective; */ 
1569: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(atom); */ 
1570: /* MUTANT (del_stmt) */ /*                 goto do_fornameinloop; */ 
1574: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(atom); */ 
1575: /* MUTANT (del_stmt) */ /*                 goto do_fornameinloop; */ 
1582: /* MUTANT (del_stmt) */ /*                 xval = NULL; */ 
1583: /* MUTANT (del_stmt) */ /*                 lval = ""; */ 
1584: /* MUTANT (del_stmt) */ /*                 goto do_forinloop; */ 
1588: /* MUTANT (del_stmt) */ /*                 atom = GET_ATOM(cx, jp->script, pc); */ 
1589: /* MUTANT (negate) */                if(! (!ATOM_IS_IDENTIFIER(atom))) {
1592: /* MUTANT (negate) */                    if(! (!xval))
1594: /* MUTANT (del_stmt) */ /*                     atom = NULL; */ 
1597: /* MUTANT (del_stmt) */ /*                 sn = NULL; */ 
1600: /* MUTANT (rep_op) */                pc -= oplen;
1600: /* MUTANT (rep_op) */                pc *= oplen;
1600: /* MUTANT (rep_op) */                pc %= oplen;
1601: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(*pc == JSOP_IFEQ || *pc == JSOP_IFEQX); */ 
1601: /* MUTANT (rep_op) */                LOCAL_ASSERT(*pc != JSOP_IFEQ || *pc == JSOP_IFEQX);
1601: /* MUTANT (rep_op) */                LOCAL_ASSERT(*pc == JSOP_IFEQ && *pc == JSOP_IFEQX);
1601: /* MUTANT (rep_op) */                LOCAL_ASSERT(*pc == JSOP_IFEQ || *pc != JSOP_IFEQX);
1602: /* MUTANT (del_stmt) */ /*                 oplen = js_CodeSpec[*pc].length; */ 
1603: /* MUTANT (del_stmt) */ /*                 len = GetJumpOffset(pc, pc); */ 
1604: /* MUTANT (del_stmt) */ /*                 sn2 = js_GetSrcNote(jp->script, pc); */ 
1605: /* MUTANT (del_stmt) */ /*                 tail = js_GetSrcNoteOffset(sn2, 0); */ 
1605: /* MUTANT (rep_const) */                tail = js_GetSrcNoteOffset(sn2, 1);
1605: /* MUTANT (rep_const) */                tail = js_GetSrcNoteOffset(sn2, -1);
1609: /* MUTANT (negate) */                if(! (foreach)) {
1610: /* MUTANT (del_stmt) */ /*                     foreach = JS_FALSE; */ 
1616: /* MUTANT (negate) */                if(! (atom)) {
1617: /* MUTANT (del_stmt) */ /*                     xval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0); */ 
1617: /* MUTANT (rep_const) */                    xval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
1617: /* MUTANT (rep_const) */                    xval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
1618: /* MUTANT (negate) */                    if(! (!xval))
1620: /* MUTANT (del_stmt) */ /*                     RETRACT(&ss->sprinter, xval); */ 
1621: /* MUTANT (del_stmt) */ /*                     js_printf(jp, *lval ? ".%s" : "%s", xval); */ 
1621: /* MUTANT (rep_op) */                    js_printf(jp, *lval ? ".%s" : "+s", xval);
1621: /* MUTANT (rep_op) */                    js_printf(jp, *lval ? ".%s" : "-s", xval);
1621: /* MUTANT (rep_op) */                    js_printf(jp, *lval ? ".%s" : "*s", xval);
1622: /* MUTANT (rep_op) */                } else if (xval || *xval) {
1622: /* MUTANT (negate) */                } else if(! (xval && *xval)) {
1629: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-0]);
1629: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top--1]);
1629: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-((1)+1)]);
1630: /* MUTANT (del_stmt) */ /*                 js_printf(jp, " in %s) {\n", rval); */ 
1631: /* MUTANT (del_stmt) */ /*                 jp->indent += 4; */ 
1631: /* MUTANT (rep_op) */                jp->indent -= 4;
1631: /* MUTANT (rep_op) */                jp->indent *= 4;
1631: /* MUTANT (rep_op) */                jp->indent %= 4;
1631: /* MUTANT (rep_const) */                jp->indent += 0;
1631: /* MUTANT (rep_const) */                jp->indent += 1;
1631: /* MUTANT (rep_const) */                jp->indent += -1;
1631: /* MUTANT (rep_const) */                jp->indent += ((4)+1);
1631: /* MUTANT (rep_const) */                jp->indent += ((4)-1);
1632: /* MUTANT (del_stmt) */ /*                 DECOMPILE_CODE(pc + oplen, tail - oplen); */ 
1632: /* MUTANT (rep_op) */                DECOMPILE_CODE(pc - oplen, tail - oplen);
1632: /* MUTANT (rep_op) */                DECOMPILE_CODE(pc * oplen, tail - oplen);
1632: /* MUTANT (rep_op) */                DECOMPILE_CODE(pc % oplen, tail - oplen);
1633: /* MUTANT (del_stmt) */ /*                 jp->indent -= 4; */ 
1633: /* MUTANT (rep_op) */                jp->indent += 4;
1633: /* MUTANT (rep_op) */                jp->indent *= 4;
1633: /* MUTANT (rep_op) */                jp->indent %= 4;
1633: /* MUTANT (rep_const) */                jp->indent -= 0;
1633: /* MUTANT (rep_const) */                jp->indent -= 1;
1633: /* MUTANT (rep_const) */                jp->indent -= -1;
1633: /* MUTANT (rep_const) */                jp->indent -= ((4)+1);
1633: /* MUTANT (rep_const) */                jp->indent -= ((4)-1);
1634: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\t}\n"); */ 
1635: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
1635: /* MUTANT (rep_const) */                todo = 0;
1635: /* MUTANT (rep_const) */                todo = 1;
1635: /* MUTANT (rep_const) */                todo = -1;
1635: /* MUTANT (rep_const) */                todo = ((-2)+1);
1635: /* MUTANT (rep_const) */                todo = ((-2)-1);
1636: /* MUTANT (del_stmt) */ /*                 break; */ 
1639: /* MUTANT (rep_op) */                pc--;
1640: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(*pc == JSOP_IFEQ || *pc == JSOP_IFEQX); */ 
1640: /* MUTANT (rep_op) */                LOCAL_ASSERT(*pc != JSOP_IFEQ || *pc == JSOP_IFEQX);
1640: /* MUTANT (rep_op) */                LOCAL_ASSERT(*pc == JSOP_IFEQ && *pc == JSOP_IFEQX);
1640: /* MUTANT (rep_op) */                LOCAL_ASSERT(*pc == JSOP_IFEQ || *pc != JSOP_IFEQX);
1641: /* MUTANT (del_stmt) */ /*                 len = js_CodeSpec[*pc].length; */ 
1649: /* MUTANT (del_stmt) */ /*                 sn = js_GetSrcNote(jp->script, pc); */ 
1650: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(!forelem_tail); */ 
1651: /* MUTANT (del_stmt) */ /*                 forelem_tail = pc + js_GetSrcNoteOffset(sn, 0); */ 
1651: /* MUTANT (rep_op) */                forelem_tail = pc - js_GetSrcNoteOffset(sn, 0);
1651: /* MUTANT (rep_op) */                forelem_tail = pc * js_GetSrcNoteOffset(sn, 0);
1651: /* MUTANT (rep_op) */                forelem_tail = pc % js_GetSrcNoteOffset(sn, 0);
1651: /* MUTANT (rep_const) */                forelem_tail = pc + js_GetSrcNoteOffset(sn, 1);
1651: /* MUTANT (rep_const) */                forelem_tail = pc + js_GetSrcNoteOffset(sn, -1);
1665: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(!forelem_done); */ 
1666: /* MUTANT (del_stmt) */ /*                 forelem_done = pc + GetJumpOffset(pc, pc); */ 
1666: /* MUTANT (rep_op) */                forelem_done = pc - GetJumpOffset(pc, pc);
1666: /* MUTANT (rep_op) */                forelem_done = pc * GetJumpOffset(pc, pc);
1666: /* MUTANT (rep_op) */                forelem_done = pc % GetJumpOffset(pc, pc);
1667: /* MUTANT (del_stmt) */ /*                 break; */ 
1678: /* MUTANT (del_stmt) */ /*                 xval = POP_STR(); */ 
1679: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
1680: /* MUTANT (del_stmt) */ /*                 rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-1]); */ 
1680: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-0]);
1680: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top--1]);
1680: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-((1)+1)]);
1681: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(forelem_tail > pc); */ 
1681: /* MUTANT (rep_op) */                JS_ASSERT(forelem_tail <= pc);
1681: /* MUTANT (rep_op) */                JS_ASSERT(forelem_tail < pc);
1681: /* MUTANT (rep_op) */                JS_ASSERT(forelem_tail >= pc);
1681: /* MUTANT (rep_op) */                JS_ASSERT(forelem_tail == pc);
1681: /* MUTANT (rep_op) */                JS_ASSERT(forelem_tail != pc);
1682: /* MUTANT (del_stmt) */ /*                 tail = forelem_tail - pc; */ 
1683: /* MUTANT (del_stmt) */ /*                 forelem_tail = NULL; */ 
1684: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(forelem_done > pc); */ 
1684: /* MUTANT (rep_op) */                JS_ASSERT(forelem_done <= pc);
1684: /* MUTANT (rep_op) */                JS_ASSERT(forelem_done < pc);
1684: /* MUTANT (rep_op) */                JS_ASSERT(forelem_done >= pc);
1684: /* MUTANT (rep_op) */                JS_ASSERT(forelem_done == pc);
1684: /* MUTANT (rep_op) */                JS_ASSERT(forelem_done != pc);
1685: /* MUTANT (del_stmt) */ /*                 len = forelem_done - pc; */ 
1686: /* MUTANT (del_stmt) */ /*                 forelem_done = NULL; */ 
1687: /* MUTANT (del_stmt) */ /*                 goto do_forinbody; */ 
1692: /* MUTANT (rep_const) */                todo = 0;
1692: /* MUTANT (rep_const) */                todo = 1;
1692: /* MUTANT (rep_const) */                todo = -1;
1692: /* MUTANT (rep_const) */                todo = ((-2)+1);
1692: /* MUTANT (rep_const) */                todo = ((-2)-1);
1693: /* MUTANT (del_stmt) */ /*                 break; */ 
1697: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-0]);
1697: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-1]);
1697: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top--1]);
1697: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-((2)+1)]);
1697: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-((2)-1)]);
1698: /* MUTANT (del_stmt) */ /*                 todo = SprintPut(&ss->sprinter, rval, strlen(rval)); */ 
1699: /* MUTANT (rep_op) */                if (todo <= 0 || !PushOff(ss, todo, ss->opcodes[ss->top-2]))
1699: /* MUTANT (rep_op) */                if (todo > 0 || !PushOff(ss, todo, ss->opcodes[ss->top-2]))
1699: /* MUTANT (rep_op) */                if (todo >= 0 || !PushOff(ss, todo, ss->opcodes[ss->top-2]))
1699: /* MUTANT (rep_op) */                if (todo == 0 || !PushOff(ss, todo, ss->opcodes[ss->top-2]))
1699: /* MUTANT (rep_op) */                if (todo != 0 || !PushOff(ss, todo, ss->opcodes[ss->top-2]))
1699: /* MUTANT (rep_op) */                if (todo < 0 && !PushOff(ss, todo, ss->opcodes[ss->top-2]))
1699: /* MUTANT (rep_const) */                if (todo < 1 || !PushOff(ss, todo, ss->opcodes[ss->top-2]))
1699: /* MUTANT (rep_const) */                if (todo < -1 || !PushOff(ss, todo, ss->opcodes[ss->top-2]))
1699: /* MUTANT (rep_const) */                if (todo < 0 || !PushOff(ss, todo, ss->opcodes[ss->top-0]))
1699: /* MUTANT (rep_const) */                if (todo < 0 || !PushOff(ss, todo, ss->opcodes[ss->top-1]))
1699: /* MUTANT (rep_const) */                if (todo < 0 || !PushOff(ss, todo, ss->opcodes[ss->top--1]))
1699: /* MUTANT (rep_const) */                if (todo < 0 || !PushOff(ss, todo, ss->opcodes[ss->top-((2)+1)]))
1699: /* MUTANT (rep_const) */                if (todo < 0 || !PushOff(ss, todo, ss->opcodes[ss->top-((2)-1)]))
1699: /* MUTANT (negate) */                if(! (todo < 0 || !PushOff(ss, todo, ss->opcodes[ss->top-2])))
1704: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-0]);
1704: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top--1]);
1704: /* MUTANT (rep_const) */                rval = OFF2STR(&ss->sprinter, ss->offsets[ss->top-((1)+1)]);
1705: /* MUTANT (del_stmt) */ /*                 op = ss->opcodes[ss->top-1]; */ 
1705: /* MUTANT (rep_const) */                op = ss->opcodes[ss->top-0];
1705: /* MUTANT (rep_const) */                op = ss->opcodes[ss->top--1];
1705: /* MUTANT (rep_const) */                op = ss->opcodes[ss->top-((1)+1)];
1706: /* MUTANT (del_stmt) */ /*                 todo = SprintPut(&ss->sprinter, rval, strlen(rval)); */ 
1707: /* MUTANT (del_stmt) */ /*                 break; */ 
1711: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(atom); */ 
1712: /* MUTANT (del_stmt) */ /*                 goto do_setname; */ 
1716: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(atom); */ 
1717: /* MUTANT (del_stmt) */ /*                 goto do_setname; */ 
1728: /* MUTANT (rep_const) */                lval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
1728: /* MUTANT (rep_const) */                lval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
1729: /* MUTANT (negate) */                if(! (!lval))
1731: /* MUTANT (del_stmt) */ /*                 rval = POP_STR(); */ 
1732: /* MUTANT (rep_op) */                if (op != JSOP_SETNAME)
1732: /* MUTANT (negate) */                if(! (op == JSOP_SETNAME))
1736: /* MUTANT (rep_const) */                sn = js_GetSrcNote(jp->script, pc - 0);
1736: /* MUTANT (rep_const) */                sn = js_GetSrcNote(jp->script, pc - -1);
1736: /* MUTANT (rep_const) */                sn = js_GetSrcNote(jp->script, pc - ((1)+1));
1737: /* MUTANT (rep_op) */                if (sn || SN_TYPE(sn) == SRC_ASSIGNOP) {
1737: /* MUTANT (rep_op) */                if (sn && SN_TYPE(sn) != SRC_ASSIGNOP) {
1737: /* MUTANT (negate) */                if(! (sn && SN_TYPE(sn) == SRC_ASSIGNOP)) {
1741: /* MUTANT (del_stmt) */ /*                     sn = js_GetSrcNote(jp->script, pc); */ 
1754: /* MUTANT (del_stmt) */ /*                 op = JSOP_NOP; */            /* turn off parens */
1755: /* MUTANT (del_stmt) */ /*                 argc = GET_ARGC(pc); */ 
1757: /* MUTANT (rep_op) */                    JS_malloc(cx, (size_t)(argc - 1) * sizeof *argv);
1757: /* MUTANT (rep_op) */                    JS_malloc(cx, (size_t)(argc * 1) * sizeof *argv);
1757: /* MUTANT (rep_op) */                    JS_malloc(cx, (size_t)(argc % 1) * sizeof *argv);
1757: /* MUTANT (rep_const) */                    JS_malloc(cx, (size_t)(argc + 0) * sizeof *argv);
1757: /* MUTANT (rep_const) */                    JS_malloc(cx, (size_t)(argc + -1) * sizeof *argv);
1757: /* MUTANT (rep_const) */                    JS_malloc(cx, (size_t)(argc + ((1)+1)) * sizeof *argv);
1758: /* MUTANT (negate) */                if(! (!argv))
1761: /* MUTANT (del_stmt) */ /*                 ok = JS_TRUE; */ 
1762: /* MUTANT (rep_op) */                for (i = argc; i <= 0; i--) {
1762: /* MUTANT (rep_op) */                for (i = argc; i < 0; i--) {
1762: /* MUTANT (rep_op) */                for (i = argc; i >= 0; i--) {
1762: /* MUTANT (rep_op) */                for (i = argc; i == 0; i--) {
1762: /* MUTANT (rep_op) */                for (i = argc; i != 0; i--) {
1762: /* MUTANT (rep_op) */                for (i = argc; i > 0; i++) {
1762: /* MUTANT (rep_const) */                for (i = argc; i > 1; i--) {
1762: /* MUTANT (rep_const) */                for (i = argc; i > -1; i--) {
1763: /* MUTANT (del_stmt) */ /*                     argv[i] = JS_strdup(cx, POP_STR()); */ 
1764: /* MUTANT (negate) */                    if(! (!argv[i])) {
1765: /* MUTANT (del_stmt) */ /*                         ok = JS_FALSE; */ 
1766: /* MUTANT (del_stmt) */ /*                         break; */ 
1771: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top <= 2);
1771: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top < 2);
1771: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top > 2);
1771: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top == 2);
1771: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top != 2);
1771: /* MUTANT (rep_const) */                LOCAL_ASSERT(ss->top >= 0);
1771: /* MUTANT (rep_const) */                LOCAL_ASSERT(ss->top >= 1);
1771: /* MUTANT (rep_const) */                LOCAL_ASSERT(ss->top >= -1);
1771: /* MUTANT (rep_const) */                LOCAL_ASSERT(ss->top >= ((2)+1));
1771: /* MUTANT (rep_const) */                LOCAL_ASSERT(ss->top >= ((2)-1));
1772: /* MUTANT (del_stmt) */ /*                 (void) PopOff(ss, op); */ 
1775: /* MUTANT (del_stmt) */ /*                 argv[0] = JS_strdup(cx, POP_STR()); */ 
1775: /* MUTANT (rep_const) */                argv[1] = JS_strdup(cx, POP_STR());
1775: /* MUTANT (rep_const) */                argv[-1] = JS_strdup(cx, POP_STR());
1776: /* MUTANT (negate) */                if(! (!argv[i]))
1779: /* MUTANT (del_stmt) */ /*                 lval = "(", rval = ")"; */ 
1780: /* MUTANT (rep_op) */                if (saveop != JSOP_NEW) {
1780: /* MUTANT (negate) */                if(! (saveop == JSOP_NEW)) {
1782: /* MUTANT (rep_const) */                                  js_new_str, argv[1], lval);
1782: /* MUTANT (rep_const) */                                  js_new_str, argv[-1], lval);
1785: /* MUTANT (rep_const) */                                  argv[1], lval);
1785: /* MUTANT (rep_const) */                                  argv[-1], lval);
1787: /* MUTANT (rep_op) */                if (todo <= 0)
1787: /* MUTANT (rep_op) */                if (todo > 0)
1787: /* MUTANT (rep_op) */                if (todo >= 0)
1787: /* MUTANT (rep_op) */                if (todo == 0)
1787: /* MUTANT (rep_op) */                if (todo != 0)
1787: /* MUTANT (rep_const) */                if (todo < 1)
1787: /* MUTANT (rep_const) */                if (todo < -1)
1787: /* MUTANT (negate) */                if(! (todo < 0))
1790: /* MUTANT (rep_op) */                for (i = 1; i < argc; i++) {
1790: /* MUTANT (rep_op) */                for (i = 1; i > argc; i++) {
1790: /* MUTANT (rep_op) */                for (i = 1; i >= argc; i++) {
1790: /* MUTANT (rep_op) */                for (i = 1; i == argc; i++) {
1790: /* MUTANT (rep_op) */                for (i = 1; i != argc; i++) {
1790: /* MUTANT (rep_op) */                for (i = 1; i <= argc; i--) {
1790: /* MUTANT (rep_const) */                for (i = 0; i <= argc; i++) {
1790: /* MUTANT (rep_const) */                for (i = -1; i <= argc; i++) {
1790: /* MUTANT (rep_const) */                for (i = ((1)+1); i <= argc; i++) {
1791: /* MUTANT (rep_op) */                    if (!argv[i] &&
1793: /* MUTANT (rep_op) */                               argv[i], (i <= argc) ? ", " : "") < 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i > argc) ? ", " : "") < 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i >= argc) ? ", " : "") < 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i == argc) ? ", " : "") < 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i != argc) ? ", " : "") < 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i < argc) ? ", " : "") <= 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i < argc) ? ", " : "") > 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i < argc) ? ", " : "") >= 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i < argc) ? ", " : "") == 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i < argc) ? ", " : "") != 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i < argc) ? ", " : "") <= 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i < argc) ? ", " : "") > 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i < argc) ? ", " : "") >= 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i < argc) ? ", " : "") == 0) {
1793: /* MUTANT (rep_op) */                               argv[i], (i < argc) ? ", " : "") != 0) {
1793: /* MUTANT (rep_const) */                               argv[i], (i < argc) ? ", " : "") < 1) {
1793: /* MUTANT (rep_const) */                               argv[i], (i < argc) ? ", " : "") < -1) {
1794: /* MUTANT (del_stmt) */ /*                         ok = JS_FALSE; */ 
1795: /* MUTANT (del_stmt) */ /*                         break; */ 
1798: /* MUTANT (rep_op) */                if (Sprint(&ss->sprinter, rval) <= 0)
1798: /* MUTANT (rep_op) */                if (Sprint(&ss->sprinter, rval) > 0)
1798: /* MUTANT (rep_op) */                if (Sprint(&ss->sprinter, rval) >= 0)
1798: /* MUTANT (rep_op) */                if (Sprint(&ss->sprinter, rval) == 0)
1798: /* MUTANT (rep_op) */                if (Sprint(&ss->sprinter, rval) != 0)
1798: /* MUTANT (rep_const) */                if (Sprint(&ss->sprinter, rval) < 1)
1798: /* MUTANT (rep_const) */                if (Sprint(&ss->sprinter, rval) < -1)
1798: /* MUTANT (negate) */                if(! (Sprint(&ss->sprinter, rval) < 0))
1801: /* MUTANT (rep_op) */                for (i = 0; i < argc; i++) {
1801: /* MUTANT (rep_op) */                for (i = 0; i > argc; i++) {
1801: /* MUTANT (rep_op) */                for (i = 0; i >= argc; i++) {
1801: /* MUTANT (rep_op) */                for (i = 0; i == argc; i++) {
1801: /* MUTANT (rep_op) */                for (i = 0; i != argc; i++) {
1801: /* MUTANT (rep_op) */                for (i = 0; i <= argc; i--) {
1801: /* MUTANT (rep_const) */                for (i = 1; i <= argc; i++) {
1801: /* MUTANT (rep_const) */                for (i = -1; i <= argc; i++) {
1802: /* MUTANT (negate) */                    if(! (argv[i]))
1806: /* MUTANT (negate) */                if(! (!ok))
1808: /* MUTANT (del_stmt) */ /*                 op = saveop; */ 
1810: /* MUTANT (rep_op) */                if (op != JSOP_SETCALL) {
1810: /* MUTANT (negate) */                if(! (op == JSOP_SETCALL)) {
1811: /* MUTANT (negate) */                    if(! (!PushOff(ss, todo, op)))
1813: /* MUTANT (del_stmt) */ /*                     todo = Sprint(&ss->sprinter, ""); */ 
1820: /* MUTANT (del_stmt) */ /*                 lval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0); */ 
1820: /* MUTANT (rep_const) */                lval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
1820: /* MUTANT (rep_const) */                lval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
1821: /* MUTANT (negate) */                if(! (!lval))
1823: /* MUTANT (del_stmt) */ /*                 RETRACT(&ss->sprinter, lval); */ 
1824: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "%s %s", js_delete_str, lval); */ 
1825: /* MUTANT (del_stmt) */ /*                 break; */ 
1828: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s %s[%s]", "+s %s.%s", rval);
1828: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s %s[%s]", "-s %s.%s", rval);
1828: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s %s[%s]", "*s %s.%s", rval);
1828: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s %s[%s]", "%s +s.%s", rval);
1828: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s %s[%s]", "%s -s.%s", rval);
1828: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s %s[%s]", "%s *s.%s", rval);
1828: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s %s[%s]", "%s %s.+s", rval);
1828: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s %s[%s]", "%s %s.-s", rval);
1828: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s %s[%s]", "%s %s.*s", rval);
1829: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
1830: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, fmt, js_delete_str, lval, rval); */ 
1831: /* MUTANT (del_stmt) */ /*                 break; */ 
1835: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
1841: /* MUTANT (del_stmt) */ /*                 break; */ 
1846: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
1849: /* MUTANT (del_stmt) */ /*                 break; */ 
1855: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "%s %s", cs->name, rval); */ 
1856: /* MUTANT (del_stmt) */ /*                 break; */ 
1861: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(atom); */ 
1862: /* MUTANT (del_stmt) */ /*                 goto do_incatom; */ 
1867: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(atom); */ 
1868: /* MUTANT (del_stmt) */ /*                 goto do_incatom; */ 
1876: /* MUTANT (rep_const) */                lval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
1876: /* MUTANT (rep_const) */                lval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
1877: /* MUTANT (negate) */                if(! (!lval))
1879: /* MUTANT (del_stmt) */ /*                 RETRACT(&ss->sprinter, lval); */ 
1882: /* MUTANT (del_stmt) */ /*                 break; */ 
1886: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s%s[%s]", "+s%s.%s", rval);
1886: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s%s[%s]", "-s%s.%s", rval);
1886: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s%s[%s]", "*s%s.%s", rval);
1886: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s%s[%s]", "%s+s.%s", rval);
1886: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s%s[%s]", "%s-s.%s", rval);
1886: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s%s[%s]", "%s*s.%s", rval);
1886: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s%s[%s]", "%s%s.+s", rval);
1886: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s%s[%s]", "%s%s.-s", rval);
1886: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s%s[%s]", "%s%s.*s", rval);
1887: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
1891: /* MUTANT (del_stmt) */ /*                 break; */ 
1896: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
1897: /* MUTANT (rep_op) */                if (*xval == '\0') {
1897: /* MUTANT (rep_const) */                if (*xval != '\1') {
1897: /* MUTANT (rep_const) */                if (*xval != '\-1') {
1897: /* MUTANT (negate) */                if(! (*xval != '\0')) {
1913: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(atom); */ 
1914: /* MUTANT (del_stmt) */ /*                 goto do_atominc; */ 
1919: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(atom); */ 
1920: /* MUTANT (del_stmt) */ /*                 goto do_atominc; */ 
1928: /* MUTANT (rep_const) */                lval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
1928: /* MUTANT (rep_const) */                lval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
1929: /* MUTANT (negate) */                if(! (!lval))
1931: /* MUTANT (del_stmt) */ /*                 todo = STR2OFF(&ss->sprinter, lval); */ 
1934: /* MUTANT (rep_const) */                          0);
1934: /* MUTANT (rep_const) */                          1);
1934: /* MUTANT (rep_const) */                          -1);
1934: /* MUTANT (rep_const) */                          ((2)+1));
1934: /* MUTANT (rep_const) */                          ((2)-1));
1935: /* MUTANT (del_stmt) */ /*                 break; */ 
1939: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s[%s]%s", "+s.%s%s", rval);
1939: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s[%s]%s", "-s.%s%s", rval);
1939: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s[%s]%s", "*s.%s%s", rval);
1939: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s[%s]%s", "%s.+s%s", rval);
1939: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s[%s]%s", "%s.-s%s", rval);
1939: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s[%s]%s", "%s.*s%s", rval);
1939: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s[%s]%s", "%s.%s+s", rval);
1939: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s[%s]%s", "%s.%s-s", rval);
1939: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("%s[%s]%s", "%s.%s*s", rval);
1940: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
1943: /* MUTANT (del_stmt) */ /*                 break; */ 
1948: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
1949: /* MUTANT (rep_op) */                if (*xval == '\0') {
1949: /* MUTANT (rep_const) */                if (*xval != '\1') {
1949: /* MUTANT (rep_const) */                if (*xval != '\-1') {
1949: /* MUTANT (negate) */                if(! (*xval != '\0')) {
1964: /* MUTANT (del_stmt) */ /*                 (void) PopOff(ss, lastop); */ 
1971: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s]", "+s.%s", rval);
1971: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s]", "-s.%s", rval);
1971: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s]", "*s.%s", rval);
1971: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s]", "%s.+s", rval);
1971: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s]", "%s.-s", rval);
1971: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s]", "%s.*s", rval);
1975: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, fmt, lval, rval); */ 
1976: /* MUTANT (del_stmt) */ /*                 break; */ 
1981: /* MUTANT (rep_op) */                if (sn || SN_TYPE(sn) == SRC_PCBASE)
1981: /* MUTANT (rep_op) */                if (sn && SN_TYPE(sn) != SRC_PCBASE)
1981: /* MUTANT (negate) */                if(! (sn && SN_TYPE(sn) == SRC_PCBASE))
1983: /* MUTANT (del_stmt) */ /*                 GET_QUOTE_AND_FMT("%s.function::[%s]", "%s.function::%s", rval); */ 
1983: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s.function::[%s]", "+s.function::%s", rval);
1983: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s.function::[%s]", "-s.function::%s", rval);
1983: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s.function::[%s]", "*s.function::%s", rval);
1983: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s.function::[%s]", "%s.function::+s", rval);
1983: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s.function::[%s]", "%s.function::-s", rval);
1983: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s.function::[%s]", "%s.function::*s", rval);
1984: /* MUTANT (del_stmt) */ /*                 goto do_getprop_lval; */ 
1988: /* MUTANT (rep_op) */                if (sn || SN_TYPE(sn) == SRC_PCBASE)
1988: /* MUTANT (rep_op) */                if (sn && SN_TYPE(sn) != SRC_PCBASE)
1988: /* MUTANT (negate) */                if(! (sn && SN_TYPE(sn) == SRC_PCBASE))
1993: /* MUTANT (del_stmt) */ /*                 goto do_setprop_rval; */ 
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "+s.%s %s= %s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "-s.%s %s= %s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "*s.%s %s= %s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "%s.+s %s= %s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "%s.-s %s= %s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "%s.*s %s= %s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "%s.%s +s= %s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "%s.%s -s= %s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "%s.%s *s= %s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "%s.%s %s= +s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "%s.%s %s= -s", xval);
2000: /* MUTANT (rep_op) */                GET_QUOTE_AND_FMT("%s[%s] %s= %s", "%s.%s %s= *s", xval);
2004: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2005: /* MUTANT (del_stmt) */ /*                 sn = js_GetSrcNote(jp->script, pc - 1); */ 
2005: /* MUTANT (rep_const) */                sn = js_GetSrcNote(jp->script, pc - 0);
2005: /* MUTANT (rep_const) */                sn = js_GetSrcNote(jp->script, pc - -1);
2005: /* MUTANT (rep_const) */                sn = js_GetSrcNote(jp->script, pc - ((1)+1));
2007: /* MUTANT (rep_op) */                              (sn || SN_TYPE(sn) == SRC_ASSIGNOP)
2007: /* MUTANT (rep_op) */                              (sn && SN_TYPE(sn) != SRC_ASSIGNOP)
2011: /* MUTANT (del_stmt) */ /*                 break; */ 
2015: /* MUTANT (del_stmt) */ /*                 (void) PopOff(ss, lastop); */ 
2020: /* MUTANT (del_stmt) */ /*                 xval = POP_STR(); */ 
2021: /* MUTANT (del_stmt) */ /*                 op = JSOP_GETELEM; */ 
2022: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2023: /* MUTANT (rep_op) */                if (*xval != '\0') {
2023: /* MUTANT (rep_const) */                if (*xval == '\1') {
2023: /* MUTANT (rep_const) */                if (*xval == '\-1') {
2023: /* MUTANT (negate) */                if(! (*xval == '\0')) {
2024: /* MUTANT (del_stmt) */ /*                     todo = Sprint(&ss->sprinter, "%s", lval); */ 
2036: /* MUTANT (del_stmt) */ /*                 rval = POP_STR(); */ 
2037: /* MUTANT (del_stmt) */ /*                 xval = POP_STR(); */ 
2038: /* MUTANT (del_stmt) */ /*                 op = JSOP_SETELEM; */ 
2039: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2040: /* MUTANT (rep_op) */                if (*xval != '\0')
2040: /* MUTANT (rep_const) */                if (*xval == '\1')
2040: /* MUTANT (rep_const) */                if (*xval == '\-1')
2040: /* MUTANT (negate) */                if(! (*xval == '\0'))
2042: /* MUTANT (del_stmt) */ /*                 sn = js_GetSrcNote(jp->script, pc - 1); */ 
2042: /* MUTANT (rep_const) */                sn = js_GetSrcNote(jp->script, pc - 0);
2042: /* MUTANT (rep_const) */                sn = js_GetSrcNote(jp->script, pc - -1);
2042: /* MUTANT (rep_const) */                sn = js_GetSrcNote(jp->script, pc - ((1)+1));
2048: /* MUTANT (rep_op) */                              (sn || SN_TYPE(sn) == SRC_ASSIGNOP)
2048: /* MUTANT (rep_op) */                              (sn && SN_TYPE(sn) != SRC_ASSIGNOP)
2052: /* MUTANT (del_stmt) */ /*                 break; */ 
2058: /* MUTANT (del_stmt) */ /*                 break; */ 
2063: /* MUTANT (del_stmt) */ /*                 break; */ 
2067: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(atom); */ 
2068: /* MUTANT (del_stmt) */ /*                 goto do_name; */ 
2072: /* MUTANT (del_stmt) */ /*                 LOCAL_ASSERT(atom); */ 
2073: /* MUTANT (del_stmt) */ /*                 goto do_name; */ 
2080: /* MUTANT (del_stmt) */ /*                 rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0); */ 
2080: /* MUTANT (rep_const) */                rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
2080: /* MUTANT (rep_const) */                rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
2081: /* MUTANT (negate) */                if(! (!rval))
2083: /* MUTANT (del_stmt) */ /*                 RETRACT(&ss->sprinter, rval); */ 
2084: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "%s%s", VarPrefix(sn), rval); */ 
2085: /* MUTANT (del_stmt) */ /*                 break; */ 
2089: /* MUTANT (del_stmt) */ /*                 goto do_sprint_int; */ 
2095: /* MUTANT (del_stmt) */ /*                 break; */ 
2099: /* MUTANT (del_stmt) */ /*                 goto do_JSOP_STRING; */ 
2103: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, ""); */ 
2104: /* MUTANT (rep_op) */                if (todo <= 0 || !PushOff(ss, todo, op))
2104: /* MUTANT (rep_op) */                if (todo > 0 || !PushOff(ss, todo, op))
2104: /* MUTANT (rep_op) */                if (todo >= 0 || !PushOff(ss, todo, op))
2104: /* MUTANT (rep_op) */                if (todo == 0 || !PushOff(ss, todo, op))
2104: /* MUTANT (rep_op) */                if (todo != 0 || !PushOff(ss, todo, op))
2104: /* MUTANT (rep_op) */                if (todo < 0 && !PushOff(ss, todo, op))
2104: /* MUTANT (rep_const) */                if (todo < 1 || !PushOff(ss, todo, op))
2104: /* MUTANT (rep_const) */                if (todo < -1 || !PushOff(ss, todo, op))
2104: /* MUTANT (negate) */                if(! (todo < 0 || !PushOff(ss, todo, op)))
2106: /* MUTANT (del_stmt) */ /*                 atom = js_GetAtom(cx, &jp->script->atomMap, atomIndex); */ 
2107: /* MUTANT (del_stmt) */ /*                 goto do_name; */ 
2111: /* MUTANT (del_stmt) */ /*                 op = pc[1 + LITERAL_INDEX_LEN]; */ 
2111: /* MUTANT (rep_op) */                op = pc[1 - LITERAL_INDEX_LEN];
2111: /* MUTANT (rep_op) */                op = pc[1 * LITERAL_INDEX_LEN];
2111: /* MUTANT (rep_op) */                op = pc[1 % LITERAL_INDEX_LEN];
2111: /* MUTANT (rep_const) */                op = pc[0 + LITERAL_INDEX_LEN];
2111: /* MUTANT (rep_const) */                op = pc[-1 + LITERAL_INDEX_LEN];
2111: /* MUTANT (rep_const) */                op = pc[((1)+1) + LITERAL_INDEX_LEN];
2113: /* MUTANT (del_stmt) */ /*                   case JSOP_ANONFUNOBJ:   goto do_JSOP_ANONFUNOBJ; */ 
2114: /* MUTANT (del_stmt) */ /*                   case JSOP_BINDNAME:     goto do_JSOP_BINDNAME; */ 
2115: /* MUTANT (del_stmt) */ /*                   case JSOP_CLOSURE:      goto do_JSOP_CLOSURE; */ 
2121: /* MUTANT (del_stmt) */ /*                   case JSOP_SETMETHOD:    goto do_JSOP_SETMETHOD; */ 
2124: /* MUTANT (del_stmt) */ /*                   case JSOP_NUMBER:       goto do_JSOP_NUMBER; */ 
2125: /* MUTANT (del_stmt) */ /*                   case JSOP_OBJECT:       goto do_JSOP_OBJECT; */ 
2128: /* MUTANT (del_stmt) */ /*                   case JSOP_QNAMEPART:    goto do_JSOP_QNAMEPART; */ 
2131: /* MUTANT (del_stmt) */ /*                   case JSOP_SETCONST:     goto do_JSOP_SETCONST; */ 
2132: /* MUTANT (del_stmt) */ /*                   case JSOP_STRING:       goto do_JSOP_STRING; */ 
2135: /* MUTANT (del_stmt) */ /*                   case JSOP_XMLCOMMENT:   goto do_JSOP_XMLCOMMENT; */ 
2136: /* MUTANT (del_stmt) */ /*                   case JSOP_XMLOBJECT:    goto do_JSOP_XMLOBJECT; */ 
2137: /* MUTANT (del_stmt) */ /*                   case JSOP_XMLPI:        goto do_JSOP_XMLPI; */ 
2139: /* MUTANT (rep_const) */                  default:                JS_ASSERT(1);
2139: /* MUTANT (rep_const) */                  default:                JS_ASSERT(-1);
2146: /* MUTANT (negate) */                if(! (JSVAL_IS_INT(val))) {
2147: /* MUTANT (del_stmt) */ /*                     long ival = (long)JSVAL_TO_INT(val); */ 
2148: /* MUTANT (del_stmt) */ /*                     todo = Sprint(&ss->sprinter, "%ld", ival); */ 
2150: /* MUTANT (del_stmt) */ /*                     char buf[DTOSTR_STANDARD_BUFFER_SIZE]; */ 
2152: /* MUTANT (rep_const) */                                             1, *JSVAL_TO_DOUBLE(val));
2152: /* MUTANT (rep_const) */                                             -1, *JSVAL_TO_DOUBLE(val));
2153: /* MUTANT (negate) */                    if(! (!numStr)) {
2154: /* MUTANT (del_stmt) */ /*                         JS_ReportOutOfMemory(cx); */ 
2155: /* MUTANT (del_stmt) */ /*                         return JS_FALSE; */ 
2163: /* MUTANT (rep_const) */                                   inXML ? 1 : (jschar)'"');
2163: /* MUTANT (rep_const) */                                   inXML ? -1 : (jschar)'"');
2164: /* MUTANT (negate) */                if(! (!rval))
2166: /* MUTANT (del_stmt) */ /*                 todo = STR2OFF(&ss->sprinter, rval); */ 
2180: /* MUTANT (rep_op) */                if (op != JSOP_OBJECT || op == JSOP_REGEXP) {
2180: /* MUTANT (rep_op) */                if (op == JSOP_OBJECT && op == JSOP_REGEXP) {
2180: /* MUTANT (rep_op) */                if (op == JSOP_OBJECT || op != JSOP_REGEXP) {
2180: /* MUTANT (negate) */                if(! (op == JSOP_OBJECT || op == JSOP_REGEXP)) {
2181: /* MUTANT (rep_const) */                    if (!js_regexp_toString(cx, ATOM_TO_OBJECT(atom), 1, NULL,
2181: /* MUTANT (rep_const) */                    if (!js_regexp_toString(cx, ATOM_TO_OBJECT(atom), -1, NULL,
2183: /* MUTANT (del_stmt) */ /*                         return JS_FALSE; */ 
2187: /* MUTANT (rep_op) */                                         (pc - len < endpc &&
2187: /* MUTANT (rep_op) */                                         (pc * len < endpc &&
2187: /* MUTANT (rep_op) */                                         (pc % len < endpc &&
2187: /* MUTANT (rep_op) */                                         (pc + len <= endpc &&
2187: /* MUTANT (rep_op) */                                         (pc + len > endpc &&
2187: /* MUTANT (rep_op) */                                         (pc + len >= endpc &&
2187: /* MUTANT (rep_op) */                                         (pc + len == endpc &&
2187: /* MUTANT (rep_op) */                                         (pc + len != endpc &&
2187: /* MUTANT (rep_op) */                                         (pc + len < endpc ||
2188: /* MUTANT (rep_op) */                                          pc[len] != JSOP_GROUP)
2189: /* MUTANT (rep_op) */                                         ? JS_IN_GROUP_CONTEXT &
2192: /* MUTANT (rep_const) */                                         1, NULL, &val)) {
2192: /* MUTANT (rep_const) */                                         -1, NULL, &val)) {
2193: /* MUTANT (del_stmt) */ /*                         return JS_FALSE; */ 
2199: /* MUTANT (del_stmt) */ /*                 break; */ 
2205: /* MUTANT (del_stmt) */ /*                 jsbytecode *pc2; */ 
2206: /* MUTANT (del_stmt) */ /*                 ptrdiff_t jmplen, off, off2; */ 
2207: /* MUTANT (del_stmt) */ /*                 jsint j, n, low, high; */ 
2208: /* MUTANT (del_stmt) */ /*                 TableEntry *table, pivot; */ 
2210: /* MUTANT (del_stmt) */ /*                 sn = js_GetSrcNote(jp->script, pc); */ 
2211: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(sn && SN_TYPE(sn) == SRC_SWITCH); */ 
2211: /* MUTANT (rep_op) */                JS_ASSERT(sn || SN_TYPE(sn) == SRC_SWITCH);
2211: /* MUTANT (rep_op) */                JS_ASSERT(sn && SN_TYPE(sn) != SRC_SWITCH);
2212: /* MUTANT (del_stmt) */ /*                 len = js_GetSrcNoteOffset(sn, 0); */ 
2212: /* MUTANT (rep_const) */                len = js_GetSrcNoteOffset(sn, 1);
2212: /* MUTANT (rep_const) */                len = js_GetSrcNoteOffset(sn, -1);
2213: /* MUTANT (rep_op) */                jmplen = (op != JSOP_TABLESWITCH) ? JUMP_OFFSET_LEN
2215: /* MUTANT (del_stmt) */ /*                 pc2 = pc; */ 
2216: /* MUTANT (del_stmt) */ /*                 off = GetJumpOffset(pc, pc2); */ 
2217: /* MUTANT (del_stmt) */ /*                 pc2 += jmplen; */ 
2217: /* MUTANT (rep_op) */                pc2 -= jmplen;
2217: /* MUTANT (rep_op) */                pc2 *= jmplen;
2217: /* MUTANT (rep_op) */                pc2 %= jmplen;
2218: /* MUTANT (del_stmt) */ /*                 low = GET_JUMP_OFFSET(pc2); */ 
2219: /* MUTANT (del_stmt) */ /*                 pc2 += JUMP_OFFSET_LEN; */ 
2219: /* MUTANT (rep_op) */                pc2 -= JUMP_OFFSET_LEN;
2219: /* MUTANT (rep_op) */                pc2 *= JUMP_OFFSET_LEN;
2219: /* MUTANT (rep_op) */                pc2 %= JUMP_OFFSET_LEN;
2220: /* MUTANT (del_stmt) */ /*                 high = GET_JUMP_OFFSET(pc2); */ 
2221: /* MUTANT (del_stmt) */ /*                 pc2 += JUMP_OFFSET_LEN; */ 
2221: /* MUTANT (rep_op) */                pc2 -= JUMP_OFFSET_LEN;
2221: /* MUTANT (rep_op) */                pc2 *= JUMP_OFFSET_LEN;
2221: /* MUTANT (rep_op) */                pc2 %= JUMP_OFFSET_LEN;
2223: /* MUTANT (del_stmt) */ /*                 n = high - low + 1; */ 
2223: /* MUTANT (rep_op) */                n = high - low - 1;
2223: /* MUTANT (rep_op) */                n = high - low * 1;
2223: /* MUTANT (rep_op) */                n = high - low % 1;
2223: /* MUTANT (rep_const) */                n = high - low + 0;
2223: /* MUTANT (rep_const) */                n = high - low + -1;
2223: /* MUTANT (rep_const) */                n = high - low + ((1)+1);
2224: /* MUTANT (rep_op) */                if (n != 0) {
2224: /* MUTANT (rep_const) */                if (n == 1) {
2224: /* MUTANT (rep_const) */                if (n == -1) {
2224: /* MUTANT (negate) */                if(! (n == 0)) {
2225: /* MUTANT (del_stmt) */ /*                     table = NULL; */ 
2226: /* MUTANT (del_stmt) */ /*                     j = 0; */ 
2226: /* MUTANT (rep_const) */                    j = 1;
2226: /* MUTANT (rep_const) */                    j = -1;
2230: /* MUTANT (negate) */                    if(! (!table))
2232: /* MUTANT (rep_op) */                    for (i = j = 0; i <= n; i++) {
2232: /* MUTANT (rep_op) */                    for (i = j = 0; i > n; i++) {
2232: /* MUTANT (rep_op) */                    for (i = j = 0; i >= n; i++) {
2232: /* MUTANT (rep_op) */                    for (i = j = 0; i == n; i++) {
2232: /* MUTANT (rep_op) */                    for (i = j = 0; i != n; i++) {
2232: /* MUTANT (rep_op) */                    for (i = j = 0; i < n; i--) {
2232: /* MUTANT (rep_const) */                    for (i = j = 1; i < n; i++) {
2232: /* MUTANT (rep_const) */                    for (i = j = -1; i < n; i++) {
2233: /* MUTANT (del_stmt) */ /*                         table[j].label = NULL; */ 
2234: /* MUTANT (del_stmt) */ /*                         off2 = GetJumpOffset(pc, pc2); */ 
2235: /* MUTANT (negate) */                        if(! (off2)) {
2236: /* MUTANT (del_stmt) */ /*                             sn = js_GetSrcNote(jp->script, pc2); */ 
2237: /* MUTANT (negate) */                            if(! (sn)) {
2238: /* MUTANT (del_stmt) */ /*                                 JS_ASSERT(SN_TYPE(sn) == SRC_LABEL); */ 
2238: /* MUTANT (rep_op) */                                JS_ASSERT(SN_TYPE(sn) != SRC_LABEL);
2242: /* MUTANT (rep_const) */                                               js_GetSrcNoteOffset(sn, 1));
2242: /* MUTANT (rep_const) */                                               js_GetSrcNoteOffset(sn, -1));
2244: /* MUTANT (rep_op) */                            table[j].key = INT_TO_JSVAL(low - i);
2244: /* MUTANT (rep_op) */                            table[j].key = INT_TO_JSVAL(low * i);
2244: /* MUTANT (rep_op) */                            table[j].key = INT_TO_JSVAL(low % i);
2245: /* MUTANT (del_stmt) */ /*                             table[j].offset = off2; */ 
2246: /* MUTANT (del_stmt) */ /*                             table[j].order = j; */ 
2247: /* MUTANT (del_stmt) */ /*                             j++; */ 
2247: /* MUTANT (rep_op) */                            j--;
2249: /* MUTANT (rep_op) */                        pc2 -= jmplen;
2249: /* MUTANT (rep_op) */                        pc2 *= jmplen;
2249: /* MUTANT (rep_op) */                        pc2 %= jmplen;
2257: /* MUTANT (del_stmt) */ /*                 JS_free(cx, table); */ 
2258: /* MUTANT (negate) */                if(! (!ok))
2260: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2260: /* MUTANT (rep_const) */                todo = 0;
2260: /* MUTANT (rep_const) */                todo = 1;
2260: /* MUTANT (rep_const) */                todo = -1;
2260: /* MUTANT (rep_const) */                todo = ((-2)+1);
2260: /* MUTANT (rep_const) */                todo = ((-2)-1);
2261: /* MUTANT (del_stmt) */ /*                 break; */ 
2267: /* MUTANT (del_stmt) */ /*                 jsbytecode *pc2; */ 
2268: /* MUTANT (del_stmt) */ /*                 ptrdiff_t jmplen, off, off2; */ 
2269: /* MUTANT (del_stmt) */ /*                 jsatomid npairs, k; */ 
2270: /* MUTANT (del_stmt) */ /*                 TableEntry *table; */ 
2272: /* MUTANT (del_stmt) */ /*                 sn = js_GetSrcNote(jp->script, pc); */ 
2273: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(sn && SN_TYPE(sn) == SRC_SWITCH); */ 
2273: /* MUTANT (rep_op) */                JS_ASSERT(sn || SN_TYPE(sn) == SRC_SWITCH);
2273: /* MUTANT (rep_op) */                JS_ASSERT(sn && SN_TYPE(sn) != SRC_SWITCH);
2274: /* MUTANT (del_stmt) */ /*                 len = js_GetSrcNoteOffset(sn, 0); */ 
2274: /* MUTANT (rep_const) */                len = js_GetSrcNoteOffset(sn, 1);
2274: /* MUTANT (rep_const) */                len = js_GetSrcNoteOffset(sn, -1);
2275: /* MUTANT (rep_op) */                jmplen = (op != JSOP_LOOKUPSWITCH) ? JUMP_OFFSET_LEN
2277: /* MUTANT (del_stmt) */ /*                 pc2 = pc; */ 
2278: /* MUTANT (del_stmt) */ /*                 off = GetJumpOffset(pc, pc2); */ 
2279: /* MUTANT (del_stmt) */ /*                 pc2 += jmplen; */ 
2279: /* MUTANT (rep_op) */                pc2 -= jmplen;
2279: /* MUTANT (rep_op) */                pc2 *= jmplen;
2279: /* MUTANT (rep_op) */                pc2 %= jmplen;
2280: /* MUTANT (del_stmt) */ /*                 npairs = GET_ATOM_INDEX(pc2); */ 
2281: /* MUTANT (del_stmt) */ /*                 pc2 += ATOM_INDEX_LEN; */ 
2281: /* MUTANT (rep_op) */                pc2 -= ATOM_INDEX_LEN;
2281: /* MUTANT (rep_op) */                pc2 *= ATOM_INDEX_LEN;
2281: /* MUTANT (rep_op) */                pc2 %= ATOM_INDEX_LEN;
2285: /* MUTANT (negate) */                if(! (!table))
2287: /* MUTANT (rep_op) */                for (k = 0; k <= npairs; k++) {
2287: /* MUTANT (rep_op) */                for (k = 0; k > npairs; k++) {
2287: /* MUTANT (rep_op) */                for (k = 0; k >= npairs; k++) {
2287: /* MUTANT (rep_op) */                for (k = 0; k == npairs; k++) {
2287: /* MUTANT (rep_op) */                for (k = 0; k != npairs; k++) {
2287: /* MUTANT (rep_op) */                for (k = 0; k < npairs; k--) {
2287: /* MUTANT (rep_const) */                for (k = 1; k < npairs; k++) {
2287: /* MUTANT (rep_const) */                for (k = -1; k < npairs; k++) {
2288: /* MUTANT (del_stmt) */ /*                     sn = js_GetSrcNote(jp->script, pc2); */ 
2289: /* MUTANT (negate) */                    if(! (sn)) {
2290: /* MUTANT (del_stmt) */ /*                         JS_ASSERT(SN_TYPE(sn) == SRC_LABEL); */ 
2290: /* MUTANT (rep_op) */                        JS_ASSERT(SN_TYPE(sn) != SRC_LABEL);
2293: /* MUTANT (rep_const) */                                       js_GetSrcNoteOffset(sn, 1));
2293: /* MUTANT (rep_const) */                                       js_GetSrcNoteOffset(sn, -1));
2295: /* MUTANT (del_stmt) */ /*                         table[k].label = NULL; */ 
2298: /* MUTANT (del_stmt) */ /*                     pc2 += ATOM_INDEX_LEN; */ 
2298: /* MUTANT (rep_op) */                    pc2 -= ATOM_INDEX_LEN;
2298: /* MUTANT (rep_op) */                    pc2 *= ATOM_INDEX_LEN;
2298: /* MUTANT (rep_op) */                    pc2 %= ATOM_INDEX_LEN;
2299: /* MUTANT (del_stmt) */ /*                     off2 = GetJumpOffset(pc, pc2); */ 
2300: /* MUTANT (del_stmt) */ /*                     pc2 += jmplen; */ 
2300: /* MUTANT (rep_op) */                    pc2 -= jmplen;
2300: /* MUTANT (rep_op) */                    pc2 *= jmplen;
2300: /* MUTANT (rep_op) */                    pc2 %= jmplen;
2301: /* MUTANT (del_stmt) */ /*                     table[k].key = ATOM_KEY(atom); */ 
2302: /* MUTANT (del_stmt) */ /*                     table[k].offset = off2; */ 
2307: /* MUTANT (del_stmt) */ /*                 JS_free(cx, table); */ 
2308: /* MUTANT (negate) */                if(! (!ok))
2310: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2310: /* MUTANT (rep_const) */                todo = 0;
2310: /* MUTANT (rep_const) */                todo = 1;
2310: /* MUTANT (rep_const) */                todo = -1;
2310: /* MUTANT (rep_const) */                todo = ((-2)+1);
2310: /* MUTANT (rep_const) */                todo = ((-2)-1);
2311: /* MUTANT (del_stmt) */ /*                 break; */ 
2316: /* MUTANT (del_stmt) */ /*                 jsbytecode *pc2; */ 
2317: /* MUTANT (del_stmt) */ /*                 ptrdiff_t off, off2, caseOff; */ 
2318: /* MUTANT (del_stmt) */ /*                 jsint ncases; */ 
2319: /* MUTANT (del_stmt) */ /*                 TableEntry *table; */ 
2321: /* MUTANT (del_stmt) */ /*                 sn = js_GetSrcNote(jp->script, pc); */ 
2322: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(sn && SN_TYPE(sn) == SRC_SWITCH); */ 
2322: /* MUTANT (rep_op) */                JS_ASSERT(sn || SN_TYPE(sn) == SRC_SWITCH);
2322: /* MUTANT (rep_op) */                JS_ASSERT(sn && SN_TYPE(sn) != SRC_SWITCH);
2323: /* MUTANT (del_stmt) */ /*                 len = js_GetSrcNoteOffset(sn, 0); */ 
2323: /* MUTANT (rep_const) */                len = js_GetSrcNoteOffset(sn, 1);
2323: /* MUTANT (rep_const) */                len = js_GetSrcNoteOffset(sn, -1);
2324: /* MUTANT (del_stmt) */ /*                 off = js_GetSrcNoteOffset(sn, 1); */ 
2324: /* MUTANT (rep_const) */                off = js_GetSrcNoteOffset(sn, 0);
2324: /* MUTANT (rep_const) */                off = js_GetSrcNoteOffset(sn, -1);
2324: /* MUTANT (rep_const) */                off = js_GetSrcNoteOffset(sn, ((1)+1));
2330: /* MUTANT (del_stmt) */ /*                 pc2 = pc; */ 
2331: /* MUTANT (del_stmt) */ /*                 off2 = off; */ 
2332: /* MUTANT (rep_op) */                for (ncases = 0; off2 == 0; ncases++) {
2332: /* MUTANT (rep_op) */                for (ncases = 0; off2 != 0; ncases--) {
2332: /* MUTANT (rep_const) */                for (ncases = 1; off2 != 0; ncases++) {
2332: /* MUTANT (rep_const) */                for (ncases = -1; off2 != 0; ncases++) {
2332: /* MUTANT (rep_const) */                for (ncases = 0; off2 != 1; ncases++) {
2332: /* MUTANT (rep_const) */                for (ncases = 0; off2 != -1; ncases++) {
2333: /* MUTANT (del_stmt) */ /*                     pc2 += off2; */ 
2333: /* MUTANT (rep_op) */                    pc2 -= off2;
2333: /* MUTANT (rep_op) */                    pc2 *= off2;
2333: /* MUTANT (rep_op) */                    pc2 %= off2;
2334: /* MUTANT (rep_op) */                    JS_ASSERT(*pc2 != JSOP_CASE || *pc2 == JSOP_DEFAULT ||
2334: /* MUTANT (rep_op) */                    JS_ASSERT(*pc2 == JSOP_CASE && *pc2 == JSOP_DEFAULT ||
2334: /* MUTANT (rep_op) */                    JS_ASSERT(*pc2 == JSOP_CASE || *pc2 != JSOP_DEFAULT ||
2334: /* MUTANT (rep_op) */                    JS_ASSERT(*pc2 == JSOP_CASE || *pc2 == JSOP_DEFAULT &&
2335: /* MUTANT (rep_op) */                              *pc2 != JSOP_CASEX || *pc2 == JSOP_DEFAULTX);
2335: /* MUTANT (rep_op) */                              *pc2 == JSOP_CASEX && *pc2 == JSOP_DEFAULTX);
2335: /* MUTANT (rep_op) */                              *pc2 == JSOP_CASEX || *pc2 != JSOP_DEFAULTX);
2336: /* MUTANT (rep_op) */                    if (*pc2 != JSOP_DEFAULT || *pc2 == JSOP_DEFAULTX) {
2336: /* MUTANT (rep_op) */                    if (*pc2 == JSOP_DEFAULT && *pc2 == JSOP_DEFAULTX) {
2336: /* MUTANT (rep_op) */                    if (*pc2 == JSOP_DEFAULT || *pc2 != JSOP_DEFAULTX) {
2336: /* MUTANT (negate) */                    if(! (*pc2 == JSOP_DEFAULT || *pc2 == JSOP_DEFAULTX)) {
2338: /* MUTANT (del_stmt) */ /*                         off2 = 0; */ 
2338: /* MUTANT (rep_const) */                        off2 = 1;
2338: /* MUTANT (rep_const) */                        off2 = -1;
2340: /* MUTANT (del_stmt) */ /*                         sn = js_GetSrcNote(jp->script, pc2); */ 
2341: /* MUTANT (del_stmt) */ /*                         JS_ASSERT(sn && SN_TYPE(sn) == SRC_PCDELTA); */ 
2341: /* MUTANT (rep_op) */                        JS_ASSERT(sn || SN_TYPE(sn) == SRC_PCDELTA);
2341: /* MUTANT (rep_op) */                        JS_ASSERT(sn && SN_TYPE(sn) != SRC_PCDELTA);
2342: /* MUTANT (del_stmt) */ /*                         off2 = js_GetSrcNoteOffset(sn, 0); */ 
2342: /* MUTANT (rep_const) */                        off2 = js_GetSrcNoteOffset(sn, 1);
2342: /* MUTANT (rep_const) */                        off2 = js_GetSrcNoteOffset(sn, -1);
2353: /* MUTANT (negate) */                if(! (!table))
2355: /* MUTANT (del_stmt) */ /*                 pc2 = pc; */ 
2356: /* MUTANT (del_stmt) */ /*                 off2 = off; */ 
2357: /* MUTANT (rep_op) */                for (i = 0; i <= ncases; i++) {
2357: /* MUTANT (rep_op) */                for (i = 0; i > ncases; i++) {
2357: /* MUTANT (rep_op) */                for (i = 0; i >= ncases; i++) {
2357: /* MUTANT (rep_op) */                for (i = 0; i == ncases; i++) {
2357: /* MUTANT (rep_op) */                for (i = 0; i != ncases; i++) {
2357: /* MUTANT (rep_op) */                for (i = 0; i < ncases; i--) {
2357: /* MUTANT (rep_const) */                for (i = 1; i < ncases; i++) {
2357: /* MUTANT (rep_const) */                for (i = -1; i < ncases; i++) {
2358: /* MUTANT (del_stmt) */ /*                     pc2 += off2; */ 
2358: /* MUTANT (rep_op) */                    pc2 -= off2;
2358: /* MUTANT (rep_op) */                    pc2 *= off2;
2358: /* MUTANT (rep_op) */                    pc2 %= off2;
2359: /* MUTANT (rep_op) */                    JS_ASSERT(*pc2 != JSOP_CASE || *pc2 == JSOP_DEFAULT ||
2359: /* MUTANT (rep_op) */                    JS_ASSERT(*pc2 == JSOP_CASE && *pc2 == JSOP_DEFAULT ||
2359: /* MUTANT (rep_op) */                    JS_ASSERT(*pc2 == JSOP_CASE || *pc2 != JSOP_DEFAULT ||
2359: /* MUTANT (rep_op) */                    JS_ASSERT(*pc2 == JSOP_CASE || *pc2 == JSOP_DEFAULT &&
2360: /* MUTANT (rep_op) */                              *pc2 != JSOP_CASEX || *pc2 == JSOP_DEFAULTX);
2360: /* MUTANT (rep_op) */                              *pc2 == JSOP_CASEX && *pc2 == JSOP_DEFAULTX);
2360: /* MUTANT (rep_op) */                              *pc2 == JSOP_CASEX || *pc2 != JSOP_DEFAULTX);
2361: /* MUTANT (del_stmt) */ /*                     caseOff = pc2 - pc; */ 
2362: /* MUTANT (del_stmt) */ /*                     table[i].key = INT_TO_JSVAL((jsint) caseOff); */ 
2363: /* MUTANT (del_stmt) */ /*                     table[i].offset = caseOff + GetJumpOffset(pc2, pc2); */ 
2363: /* MUTANT (rep_op) */                    table[i].offset = caseOff - GetJumpOffset(pc2, pc2);
2363: /* MUTANT (rep_op) */                    table[i].offset = caseOff * GetJumpOffset(pc2, pc2);
2363: /* MUTANT (rep_op) */                    table[i].offset = caseOff % GetJumpOffset(pc2, pc2);
2364: /* MUTANT (rep_op) */                    if (*pc2 != JSOP_CASE || *pc2 == JSOP_CASEX) {
2364: /* MUTANT (rep_op) */                    if (*pc2 == JSOP_CASE && *pc2 == JSOP_CASEX) {
2364: /* MUTANT (rep_op) */                    if (*pc2 == JSOP_CASE || *pc2 != JSOP_CASEX) {
2364: /* MUTANT (negate) */                    if(! (*pc2 == JSOP_CASE || *pc2 == JSOP_CASEX)) {
2365: /* MUTANT (del_stmt) */ /*                         sn = js_GetSrcNote(jp->script, pc2); */ 
2366: /* MUTANT (del_stmt) */ /*                         JS_ASSERT(sn && SN_TYPE(sn) == SRC_PCDELTA); */ 
2366: /* MUTANT (rep_op) */                        JS_ASSERT(sn || SN_TYPE(sn) == SRC_PCDELTA);
2366: /* MUTANT (rep_op) */                        JS_ASSERT(sn && SN_TYPE(sn) != SRC_PCDELTA);
2367: /* MUTANT (del_stmt) */ /*                         off2 = js_GetSrcNoteOffset(sn, 0); */ 
2367: /* MUTANT (rep_const) */                        off2 = js_GetSrcNoteOffset(sn, 1);
2367: /* MUTANT (rep_const) */                        off2 = js_GetSrcNoteOffset(sn, -1);
2376: /* MUTANT (rep_const) */                off = JSVAL_TO_INT(table[ncases-0].key);
2376: /* MUTANT (rep_const) */                off = JSVAL_TO_INT(table[ncases--1].key);
2376: /* MUTANT (rep_const) */                off = JSVAL_TO_INT(table[ncases-((1)+1)].key);
2377: /* MUTANT (del_stmt) */ /*                 pc2 = pc + off; */ 
2377: /* MUTANT (rep_op) */                pc2 = pc - off;
2377: /* MUTANT (rep_op) */                pc2 = pc * off;
2377: /* MUTANT (rep_op) */                pc2 = pc % off;
2378: /* MUTANT (del_stmt) */ /*                 off += GetJumpOffset(pc2, pc2); */ 
2378: /* MUTANT (rep_op) */                off -= GetJumpOffset(pc2, pc2);
2378: /* MUTANT (rep_op) */                off *= GetJumpOffset(pc2, pc2);
2378: /* MUTANT (rep_op) */                off %= GetJumpOffset(pc2, pc2);
2382: /* MUTANT (del_stmt) */ /*                 JS_free(cx, table); */ 
2383: /* MUTANT (negate) */                if(! (!ok))
2385: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2385: /* MUTANT (rep_const) */                todo = 0;
2385: /* MUTANT (rep_const) */                todo = 1;
2385: /* MUTANT (rep_const) */                todo = -1;
2385: /* MUTANT (rep_const) */                todo = ((-2)+1);
2385: /* MUTANT (rep_const) */                todo = ((-2)-1);
2386: /* MUTANT (del_stmt) */ /*                 break; */ 
2392: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2393: /* MUTANT (negate) */                if(! (!lval))
2395: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\tcase %s:\n", lval); */ 
2396: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2396: /* MUTANT (rep_const) */                todo = 0;
2396: /* MUTANT (rep_const) */                todo = 1;
2396: /* MUTANT (rep_const) */                todo = -1;
2396: /* MUTANT (rep_const) */                todo = ((-2)+1);
2396: /* MUTANT (rep_const) */                todo = ((-2)-1);
2397: /* MUTANT (del_stmt) */ /*                 break; */ 
2406: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2409: /* MUTANT (rep_op) */                              (op != JSOP_NEW_EQ) ? '=' : '!',
2415: /* MUTANT (del_stmt) */ /*                 break; */ 
2421: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2421: /* MUTANT (rep_const) */                todo = 0;
2421: /* MUTANT (rep_const) */                todo = 1;
2421: /* MUTANT (rep_const) */                todo = -1;
2421: /* MUTANT (rep_const) */                todo = ((-2)+1);
2421: /* MUTANT (rep_const) */                todo = ((-2)-1);
2422: /* MUTANT (del_stmt) */ /*                 goto do_function; */ 
2429: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2429: /* MUTANT (rep_const) */                todo = 0;
2429: /* MUTANT (rep_const) */                todo = 1;
2429: /* MUTANT (rep_const) */                todo = -1;
2429: /* MUTANT (rep_const) */                todo = ((-2)+1);
2429: /* MUTANT (rep_const) */                todo = ((-2)-1);
2430: /* MUTANT (del_stmt) */ /*                 break; */ 
2433: /* MUTANT (rep_const) */                rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
2433: /* MUTANT (rep_const) */                rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
2434: /* MUTANT (negate) */                if(! (!rval))
2436: /* MUTANT (del_stmt) */ /*                 RETRACT(&ss->sprinter, rval); */ 
2437: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\texport %s\n", rval); */ 
2438: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2438: /* MUTANT (rep_const) */                todo = 0;
2438: /* MUTANT (rep_const) */                todo = 1;
2438: /* MUTANT (rep_const) */                todo = -1;
2438: /* MUTANT (rep_const) */                todo = ((-2)+1);
2438: /* MUTANT (rep_const) */                todo = ((-2)-1);
2443: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\timport %s.*\n", lval); */ 
2444: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2444: /* MUTANT (rep_const) */                todo = 0;
2444: /* MUTANT (rep_const) */                todo = 1;
2444: /* MUTANT (rep_const) */                todo = -1;
2444: /* MUTANT (rep_const) */                todo = ((-2)+1);
2444: /* MUTANT (rep_const) */                todo = ((-2)-1);
2445: /* MUTANT (del_stmt) */ /*                 break; */ 
2449: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("\timport %s[%s]\n", "\timport +s.%s\n",
2449: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("\timport %s[%s]\n", "\timport -s.%s\n",
2449: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("\timport %s[%s]\n", "\timport *s.%s\n",
2449: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("\timport %s[%s]\n", "\timport %s.+s\n",
2449: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("\timport %s[%s]\n", "\timport %s.-s\n",
2449: /* MUTANT (rep_op) */                GET_ATOM_QUOTE_AND_FMT("\timport %s[%s]\n", "\timport %s.*s\n",
2451: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2452: /* MUTANT (del_stmt) */ /*                 js_printf(jp, fmt, lval, rval); */ 
2453: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2453: /* MUTANT (rep_const) */                todo = 0;
2453: /* MUTANT (rep_const) */                todo = 1;
2453: /* MUTANT (rep_const) */                todo = -1;
2453: /* MUTANT (rep_const) */                todo = ((-2)+1);
2453: /* MUTANT (rep_const) */                todo = ((-2)-1);
2454: /* MUTANT (del_stmt) */ /*                 break; */ 
2458: /* MUTANT (del_stmt) */ /*                 op = JSOP_GETELEM; */ 
2459: /* MUTANT (negate) */                if(! (js_CodeSpec[lastop].format & JOF_XMLNAME))
2461: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2462: /* MUTANT (del_stmt) */ /*                 js_printf(jp, "\timport %s[%s]\n", lval, xval); */ 
2463: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2463: /* MUTANT (rep_const) */                todo = 0;
2463: /* MUTANT (rep_const) */                todo = 1;
2463: /* MUTANT (rep_const) */                todo = -1;
2463: /* MUTANT (rep_const) */                todo = ((-2)+1);
2463: /* MUTANT (rep_const) */                todo = ((-2)-1);
2464: /* MUTANT (del_stmt) */ /*                 break; */ 
2469: /* MUTANT (rep_op) */                if (op != JSOP_LIMIT)
2469: /* MUTANT (negate) */                if(! (op == JSOP_LIMIT))
2471: /* MUTANT (del_stmt) */ /*                 *pc = op; */ 
2472: /* MUTANT (del_stmt) */ /*                 cs = &js_CodeSpec[op]; */ 
2473: /* MUTANT (del_stmt) */ /*                 len = cs->length; */ 
2474: /* MUTANT (del_stmt) */ /*                 DECOMPILE_CODE(pc, len); */ 
2475: /* MUTANT (del_stmt) */ /*                 *pc = JSOP_TRAP; */ 
2476: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2476: /* MUTANT (rep_const) */                todo = 0;
2476: /* MUTANT (rep_const) */                todo = 1;
2476: /* MUTANT (rep_const) */                todo = -1;
2476: /* MUTANT (rep_const) */                todo = ((-2)+1);
2476: /* MUTANT (rep_const) */                todo = ((-2)-1);
2477: /* MUTANT (del_stmt) */ /*                 break; */ 
2481: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top <= 2);
2481: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top < 2);
2481: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top > 2);
2481: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top == 2);
2481: /* MUTANT (rep_op) */                LOCAL_ASSERT(ss->top != 2);
2481: /* MUTANT (rep_const) */                LOCAL_ASSERT(ss->top >= 0);
2481: /* MUTANT (rep_const) */                LOCAL_ASSERT(ss->top >= 1);
2481: /* MUTANT (rep_const) */                LOCAL_ASSERT(ss->top >= -1);
2481: /* MUTANT (rep_const) */                LOCAL_ASSERT(ss->top >= ((2)+1));
2481: /* MUTANT (rep_const) */                LOCAL_ASSERT(ss->top >= ((2)-1));
2482: /* MUTANT (del_stmt) */ /*                 (void) PopOff(ss, op); */ 
2483: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2486: /* MUTANT (rep_op) */                if (op != JSOP_DEFSHARP) {
2486: /* MUTANT (negate) */                if(! (op == JSOP_DEFSHARP)) {
2487: /* MUTANT (del_stmt) */ /*                     pc += len; */ 
2487: /* MUTANT (rep_op) */                    pc -= len;
2487: /* MUTANT (rep_op) */                    pc *= len;
2487: /* MUTANT (rep_op) */                    pc %= len;
2488: /* MUTANT (del_stmt) */ /*                     cs = &js_CodeSpec[op]; */ 
2489: /* MUTANT (del_stmt) */ /*                     len = cs->length; */ 
2490: /* MUTANT (del_stmt) */ /*                     i = (jsint) GET_ATOM_INDEX(pc); */ 
2493: /* MUTANT (rep_op) */                                  (*lval != 'O') ? '{' : '[');
2497: /* MUTANT (del_stmt) */ /*                     todo = Sprint(&ss->sprinter, (*lval == 'O') ? "{" : "["); */ 
2497: /* MUTANT (rep_op) */                    todo = Sprint(&ss->sprinter, (*lval != 'O') ? "{" : "[");
2503: /* MUTANT (del_stmt) */ /*                 sn = js_GetSrcNote(jp->script, pc); */ 
2506: /* MUTANT (rep_op) */                              (sn || SN_TYPE(sn) == SRC_CONTINUE) ? ", " : "",
2506: /* MUTANT (rep_op) */                              (sn && SN_TYPE(sn) != SRC_CONTINUE) ? ", " : "",
2507: /* MUTANT (rep_op) */                              (*rval != '{') ? '}' : ']');
2508: /* MUTANT (del_stmt) */ /*                 break; */ 
2514: /* MUTANT (rep_const) */                                   (ATOM_IS_IDENTIFIER(atom) ? 1 : '\''));
2514: /* MUTANT (rep_const) */                                   (ATOM_IS_IDENTIFIER(atom) ? -1 : '\''));
2515: /* MUTANT (negate) */                if(! (!xval))
2517: /* MUTANT (del_stmt) */ /*                 rval = POP_STR(); */ 
2518: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2523: /* MUTANT (rep_op) */                              (lval[1] == '\0') ? ", " : "",
2523: /* MUTANT (rep_const) */                              (lval[0] != '\0') ? ", " : "",
2523: /* MUTANT (rep_const) */                              (lval[-1] != '\0') ? ", " : "",
2523: /* MUTANT (rep_const) */                              (lval[((1)+1)] != '\0') ? ", " : "",
2523: /* MUTANT (rep_const) */                              (lval[1] != '\1') ? ", " : "",
2523: /* MUTANT (rep_const) */                              (lval[1] != '\-1') ? ", " : "",
2525: /* MUTANT (rep_op) */                              (lastop != JSOP_GETTER || lastop == JSOP_SETTER)
2525: /* MUTANT (rep_op) */                              (lastop == JSOP_GETTER && lastop == JSOP_SETTER)
2525: /* MUTANT (rep_op) */                              (lastop == JSOP_GETTER || lastop != JSOP_SETTER)
2527: /* MUTANT (rep_op) */                              (lastop != JSOP_GETTER) ? js_getter_str :
2528: /* MUTANT (rep_op) */                              (lastop != JSOP_SETTER) ? js_setter_str :
2532: /* MUTANT (rep_op) */                if (lastop != JSOP_GETTER || lastop == JSOP_SETTER) {
2532: /* MUTANT (rep_op) */                if (lastop == JSOP_GETTER && lastop == JSOP_SETTER) {
2532: /* MUTANT (rep_op) */                if (lastop == JSOP_GETTER || lastop != JSOP_SETTER) {
2532: /* MUTANT (negate) */                if(! (lastop == JSOP_GETTER || lastop == JSOP_SETTER)) {
2533: /* MUTANT (del_stmt) */ /*                     rval += strlen(js_function_str) + 1; */ 
2533: /* MUTANT (rep_op) */                    rval -= strlen(js_function_str) + 1;
2533: /* MUTANT (rep_op) */                    rval *= strlen(js_function_str) + 1;
2533: /* MUTANT (rep_op) */                    rval %= strlen(js_function_str) + 1;
2533: /* MUTANT (rep_op) */                    rval += strlen(js_function_str) - 1;
2533: /* MUTANT (rep_op) */                    rval += strlen(js_function_str) * 1;
2533: /* MUTANT (rep_op) */                    rval += strlen(js_function_str) % 1;
2533: /* MUTANT (rep_const) */                    rval += strlen(js_function_str) + 0;
2533: /* MUTANT (rep_const) */                    rval += strlen(js_function_str) + -1;
2533: /* MUTANT (rep_const) */                    rval += strlen(js_function_str) + ((1)+1);
2536: /* MUTANT (rep_op) */                                  (lval[1] == '\0') ? ", " : "",
2536: /* MUTANT (rep_const) */                                  (lval[0] != '\0') ? ", " : "",
2536: /* MUTANT (rep_const) */                                  (lval[-1] != '\0') ? ", " : "",
2536: /* MUTANT (rep_const) */                                  (lval[((1)+1)] != '\0') ? ", " : "",
2536: /* MUTANT (rep_const) */                                  (lval[1] != '\1') ? ", " : "",
2536: /* MUTANT (rep_const) */                                  (lval[1] != '\-1') ? ", " : "",
2537: /* MUTANT (rep_op) */                                  (lastop != JSOP_GETTER)
2540: /* MUTANT (rep_const) */                                  strlen(rval) - 0,
2540: /* MUTANT (rep_const) */                                  strlen(rval) - -1,
2540: /* MUTANT (rep_const) */                                  strlen(rval) - ((1)+1),
2545: /* MUTANT (rep_op) */                                  (lval[1] == '\0') ? ", " : "",
2545: /* MUTANT (rep_const) */                                  (lval[0] != '\0') ? ", " : "",
2545: /* MUTANT (rep_const) */                                  (lval[-1] != '\0') ? ", " : "",
2545: /* MUTANT (rep_const) */                                  (lval[((1)+1)] != '\0') ? ", " : "",
2545: /* MUTANT (rep_const) */                                  (lval[1] != '\1') ? ", " : "",
2545: /* MUTANT (rep_const) */                                  (lval[1] != '\-1') ? ", " : "",
2554: /* MUTANT (del_stmt) */ /*                 xval = POP_STR(); */ 
2555: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2556: /* MUTANT (del_stmt) */ /*                 sn = js_GetSrcNote(jp->script, pc); */ 
2557: /* MUTANT (rep_op) */                if (sn || SN_TYPE(sn) == SRC_LABEL)
2557: /* MUTANT (rep_op) */                if (sn && SN_TYPE(sn) != SRC_LABEL)
2557: /* MUTANT (negate) */                if(! (sn && SN_TYPE(sn) == SRC_LABEL))
2561: /* MUTANT (rep_op) */                              (lval[1] == '\0' || *xval != '0') ? ", " : "",
2561: /* MUTANT (rep_op) */                              (lval[1] != '\0' && *xval != '0') ? ", " : "",
2561: /* MUTANT (rep_op) */                              (lval[1] != '\0' || *xval == '0') ? ", " : "",
2561: /* MUTANT (rep_const) */                              (lval[0] != '\0' || *xval != '0') ? ", " : "",
2561: /* MUTANT (rep_const) */                              (lval[-1] != '\0' || *xval != '0') ? ", " : "",
2561: /* MUTANT (rep_const) */                              (lval[((1)+1)] != '\0' || *xval != '0') ? ", " : "",
2561: /* MUTANT (rep_const) */                              (lval[1] != '\1' || *xval != '0') ? ", " : "",
2561: /* MUTANT (rep_const) */                              (lval[1] != '\-1' || *xval != '0') ? ", " : "",
2561: /* MUTANT (rep_const) */                              (lval[1] != '\0' || *xval != '1') ? ", " : "",
2561: /* MUTANT (rep_const) */                              (lval[1] != '\0' || *xval != '-1') ? ", " : "",
2563: /* MUTANT (del_stmt) */ /*                 break; */ 
2568: /* MUTANT (del_stmt) */ /*                 rval = POP_STR(); */ 
2569: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "#%u=%s", (unsigned) i, rval); */ 
2570: /* MUTANT (del_stmt) */ /*                 break; */ 
2574: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "#%u#", (unsigned) i); */ 
2575: /* MUTANT (del_stmt) */ /*                 break; */ 
2582: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2582: /* MUTANT (rep_const) */                todo = 0;
2582: /* MUTANT (rep_const) */                todo = 1;
2582: /* MUTANT (rep_const) */                todo = -1;
2582: /* MUTANT (rep_const) */                todo = ((-2)+1);
2582: /* MUTANT (rep_const) */                todo = ((-2)-1);
2583: /* MUTANT (del_stmt) */ /*                 break; */ 
2589: /* MUTANT (rep_op) */                inXML = op != JSOP_STARTXML;
2590: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2590: /* MUTANT (rep_const) */                todo = 0;
2590: /* MUTANT (rep_const) */                todo = 1;
2590: /* MUTANT (rep_const) */                todo = -1;
2590: /* MUTANT (rep_const) */                todo = ((-2)+1);
2590: /* MUTANT (rep_const) */                todo = ((-2)-1);
2591: /* MUTANT (del_stmt) */ /*                 break; */ 
2597: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2597: /* MUTANT (rep_const) */                todo = 0;
2597: /* MUTANT (rep_const) */                todo = 1;
2597: /* MUTANT (rep_const) */                todo = -1;
2597: /* MUTANT (rep_const) */                todo = ((-2)+1);
2597: /* MUTANT (rep_const) */                todo = ((-2)-1);
2598: /* MUTANT (del_stmt) */ /*                 break; */ 
2601: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "*", 0);
2601: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "*", -1);
2601: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "*", ((1)+1));
2602: /* MUTANT (del_stmt) */ /*                 break; */ 
2609: /* MUTANT (rep_const) */                rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1);
2609: /* MUTANT (rep_const) */                rval = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1);
2610: /* MUTANT (negate) */                if(! (!rval))
2612: /* MUTANT (del_stmt) */ /*                 RETRACT(&ss->sprinter, rval); */ 
2613: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2614: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "%s::%s", lval, rval); */ 
2619: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2620: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "%s::[%s]", lval, rval); */ 
2621: /* MUTANT (del_stmt) */ /*                 break; */ 
2625: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "@%s", rval); */ 
2626: /* MUTANT (del_stmt) */ /*                 break; */ 
2629: /* MUTANT (rep_const) */                todo = 0;
2629: /* MUTANT (rep_const) */                todo = 1;
2629: /* MUTANT (rep_const) */                todo = -1;
2629: /* MUTANT (rep_const) */                todo = ((-2)+1);
2629: /* MUTANT (rep_const) */                todo = ((-2)-1);
2630: /* MUTANT (del_stmt) */ /*                 break; */ 
2634: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2635: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "%s %s", lval, rval); */ 
2637: /* MUTANT (del_stmt) */ /*                 quoteAttr = JS_TRUE; */ 
2638: /* MUTANT (del_stmt) */ /*                 break; */ 
2642: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2643: /* MUTANT (negate) */                if(! (quoteAttr))
2644: /* MUTANT (rep_op) */                    todo = Sprint(&ss->sprinter, "%s=\"+s\"", lval, rval);
2644: /* MUTANT (rep_op) */                    todo = Sprint(&ss->sprinter, "%s=\"-s\"", lval, rval);
2644: /* MUTANT (rep_op) */                    todo = Sprint(&ss->sprinter, "%s=\"*s\"", lval, rval);
2647: /* MUTANT (del_stmt) */ /*                 break; */ 
2652: /* MUTANT (del_stmt) */ /*                 break; */ 
2657: /* MUTANT (del_stmt) */ /*                 (void) PopOff(ss, op); */ 
2658: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2659: /* MUTANT (del_stmt) */ /*                 goto do_setlval; */ 
2664: /* MUTANT (del_stmt) */ /*                 inXML = JS_TRUE; */ 
2666: /* MUTANT (del_stmt) */ /*                 quoteAttr = JS_FALSE; */ 
2667: /* MUTANT (del_stmt) */ /*                 break; */ 
2671: /* MUTANT (del_stmt) */ /*                 inXML = JS_FALSE; */ 
2672: /* MUTANT (del_stmt) */ /*                 break; */ 
2676: /* MUTANT (del_stmt) */ /*                 todo = -2; */ 
2676: /* MUTANT (rep_const) */                todo = 0;
2676: /* MUTANT (rep_const) */                todo = 1;
2676: /* MUTANT (rep_const) */                todo = -1;
2676: /* MUTANT (rep_const) */                todo = ((-2)+1);
2676: /* MUTANT (rep_const) */                todo = ((-2)-1);
2677: /* MUTANT (del_stmt) */ /*                 break; */ 
2686: /* MUTANT (rep_const) */                todo = 0;
2686: /* MUTANT (rep_const) */                todo = 1;
2686: /* MUTANT (rep_const) */                todo = -1;
2686: /* MUTANT (rep_const) */                todo = ((-2)+1);
2686: /* MUTANT (rep_const) */                todo = ((-2)-1);
2687: /* MUTANT (del_stmt) */ /*                 break; */ 
2691: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2692: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "%s.(%s)", lval, rval); */ 
2693: /* MUTANT (del_stmt) */ /*                 break; */ 
2697: /* MUTANT (del_stmt) */ /*                 lval = POP_STR(); */ 
2698: /* MUTANT (del_stmt) */ /*                 todo = Sprint(&ss->sprinter, "%s..%s", lval, rval); */ 
2699: /* MUTANT (del_stmt) */ /*                 break; */ 
2708: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<![CDATA[", 0);
2708: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<![CDATA[", 1);
2708: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<![CDATA[", -1);
2708: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<![CDATA[", ((9)+1));
2708: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<![CDATA[", ((9)-1));
2709: /* MUTANT (rep_const) */                if (!QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1))
2709: /* MUTANT (rep_const) */                if (!QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1))
2709: /* MUTANT (negate) */                if(! (!QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0)))
2711: /* MUTANT (del_stmt) */ /*                 SprintPut(&ss->sprinter, "]]>", 3); */ 
2711: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "]]>", 0);
2711: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "]]>", 1);
2711: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "]]>", -1);
2711: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "]]>", ((3)+1));
2711: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "]]>", ((3)-1));
2715: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<!--", 0);
2715: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<!--", 1);
2715: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<!--", -1);
2715: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<!--", ((4)+1));
2715: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<!--", ((4)-1));
2716: /* MUTANT (rep_const) */                if (!QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1))
2716: /* MUTANT (rep_const) */                if (!QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1))
2716: /* MUTANT (negate) */                if(! (!QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0)))
2718: /* MUTANT (del_stmt) */ /*                 SprintPut(&ss->sprinter, "-->", 3); */ 
2718: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "-->", 0);
2718: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "-->", 1);
2718: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "-->", -1);
2718: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "-->", ((3)+1));
2718: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "-->", ((3)-1));
2723: /* MUTANT (negate) */                if(! (!rval))
2725: /* MUTANT (del_stmt) */ /*                 todo = SprintPut(&ss->sprinter, "<?", 2); */ 
2725: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<?", 0);
2725: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<?", 1);
2725: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<?", -1);
2725: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<?", ((2)+1));
2725: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, "<?", ((2)-1));
2726: /* MUTANT (rep_op) */                ok = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 0) ||
2726: /* MUTANT (rep_const) */                ok = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), 1) &&
2726: /* MUTANT (rep_const) */                ok = QuoteString(&ss->sprinter, ATOM_TO_STRING(atom), -1) &&
2727: /* MUTANT (rep_op) */                     SprintPut(&ss->sprinter, " ", 1) <= 0 &&
2727: /* MUTANT (rep_op) */                     SprintPut(&ss->sprinter, " ", 1) < 0 &&
2727: /* MUTANT (rep_op) */                     SprintPut(&ss->sprinter, " ", 1) > 0 &&
2727: /* MUTANT (rep_op) */                     SprintPut(&ss->sprinter, " ", 1) == 0 &&
2727: /* MUTANT (rep_op) */                     SprintPut(&ss->sprinter, " ", 1) != 0 &&
2727: /* MUTANT (rep_op) */                     SprintPut(&ss->sprinter, " ", 1) >= 0 ||
2727: /* MUTANT (rep_const) */                     SprintPut(&ss->sprinter, " ", 0) >= 0 &&
2727: /* MUTANT (rep_const) */                     SprintPut(&ss->sprinter, " ", -1) >= 0 &&
2727: /* MUTANT (rep_const) */                     SprintPut(&ss->sprinter, " ", ((1)+1)) >= 0 &&
2727: /* MUTANT (rep_const) */                     SprintPut(&ss->sprinter, " ", 1) >= 1 &&
2727: /* MUTANT (rep_const) */                     SprintPut(&ss->sprinter, " ", 1) >= -1 &&
2729: /* MUTANT (del_stmt) */ /*                 JS_free(cx, (char *)rval); */ 
2730: /* MUTANT (negate) */                if(! (!ok))
2732: /* MUTANT (del_stmt) */ /*                 SprintPut(&ss->sprinter, "?>", 2); */ 
2732: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "?>", 0);
2732: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "?>", 1);
2732: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "?>", -1);
2732: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "?>", ((2)+1));
2732: /* MUTANT (rep_const) */                SprintPut(&ss->sprinter, "?>", ((2)-1));
2736: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, js_function_str, 0);
2736: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, js_function_str, 1);
2736: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, js_function_str, -1);
2736: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, js_function_str, ((8)+1));
2736: /* MUTANT (rep_const) */                todo = SprintPut(&ss->sprinter, js_function_str, ((8)-1));
2737: /* MUTANT (del_stmt) */ /*                 break; */ 
2741: /* MUTANT (rep_const) */                todo = 0;
2741: /* MUTANT (rep_const) */                todo = 1;
2741: /* MUTANT (rep_const) */                todo = -1;
2741: /* MUTANT (rep_const) */                todo = ((-2)+1);
2741: /* MUTANT (rep_const) */                todo = ((-2)-1);
2742: /* MUTANT (del_stmt) */ /*                 break; */ 
2749: /* MUTANT (rep_op) */        if (todo <= 0) {
2749: /* MUTANT (rep_op) */        if (todo > 0) {
2749: /* MUTANT (rep_op) */        if (todo >= 0) {
2749: /* MUTANT (rep_op) */        if (todo == 0) {
2749: /* MUTANT (rep_op) */        if (todo != 0) {
2749: /* MUTANT (rep_const) */        if (todo < 1) {
2749: /* MUTANT (rep_const) */        if (todo < -1) {
2749: /* MUTANT (negate) */        if(! (todo < 0)) {
2751: /* MUTANT (rep_op) */            if (todo != -1)
2751: /* MUTANT (rep_const) */            if (todo == 0)
2751: /* MUTANT (rep_const) */            if (todo == 1)
2751: /* MUTANT (rep_const) */            if (todo == ((-1)+1))
2751: /* MUTANT (rep_const) */            if (todo == ((-1)-1))
2751: /* MUTANT (negate) */            if(! (todo == -1))
2754: /* MUTANT (negate) */            if(! (!PushOff(ss, todo, op)))
2757: /* MUTANT (rep_op) */        pc -= len;
2757: /* MUTANT (rep_op) */        pc *= len;
2757: /* MUTANT (rep_op) */        pc %= len;
2778: /* MUTANT (del_stmt) */ /*     SprintStack ss; */ 
2779: /* MUTANT (del_stmt) */ /*     JSContext *cx; */ 
2780: /* MUTANT (del_stmt) */ /*     void *mark, *space; */ 
2781: /* MUTANT (del_stmt) */ /*     size_t offsetsz, opcodesz; */ 
2782: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
2783: /* MUTANT (del_stmt) */ /*     JSScript *oldscript; */ 
2784: /* MUTANT (del_stmt) */ /*     char *last; */ 
2787: /* MUTANT (del_stmt) */ /*     ss.printer = jp; */ 
2788: /* MUTANT (del_stmt) */ /*     cx = jp->sprinter.context; */ 
2789: /* MUTANT (del_stmt) */ /*     mark = JS_ARENA_MARK(&cx->tempPool); */ 
2790: /* MUTANT (del_stmt) */ /*     INIT_SPRINTER(cx, &ss.sprinter, &cx->tempPool, PAREN_SLOP); */ 
2793: /* MUTANT (del_stmt) */ /*     offsetsz = script->depth * sizeof(ptrdiff_t); */ 
2794: /* MUTANT (del_stmt) */ /*     opcodesz = script->depth * sizeof(jsbytecode); */ 
2795: /* MUTANT (del_stmt) */ /*     JS_ARENA_ALLOCATE(space, &cx->tempPool, offsetsz + opcodesz); */ 
2795: /* MUTANT (rep_op) */    JS_ARENA_ALLOCATE(space, &cx->tempPool, offsetsz - opcodesz);
2795: /* MUTANT (rep_op) */    JS_ARENA_ALLOCATE(space, &cx->tempPool, offsetsz * opcodesz);
2795: /* MUTANT (rep_op) */    JS_ARENA_ALLOCATE(space, &cx->tempPool, offsetsz % opcodesz);
2796: /* MUTANT (negate) */    if(! (!space)) {
2797: /* MUTANT (del_stmt) */ /*         ok = JS_FALSE; */ 
2798: /* MUTANT (del_stmt) */ /*         goto out; */ 
2801: /* MUTANT (del_stmt) */ /*     ss.opcodes = (jsbytecode *) ((char *)space + offsetsz); */ 
2801: /* MUTANT (rep_op) */    ss.opcodes = (jsbytecode *) ((char *)space - offsetsz);
2801: /* MUTANT (rep_op) */    ss.opcodes = (jsbytecode *) ((char *)space * offsetsz);
2801: /* MUTANT (rep_op) */    ss.opcodes = (jsbytecode *) ((char *)space % offsetsz);
2802: /* MUTANT (del_stmt) */ /*     ss.top = 0; */ 
2802: /* MUTANT (rep_const) */    ss.top = 1;
2802: /* MUTANT (rep_const) */    ss.top = -1;
2805: /* MUTANT (del_stmt) */ /*     oldscript = jp->script; */ 
2806: /* MUTANT (del_stmt) */ /*     jp->script = script; */ 
2807: /* MUTANT (del_stmt) */ /*     ok = Decompile(&ss, pc, len); */ 
2808: /* MUTANT (del_stmt) */ /*     jp->script = oldscript; */ 
2811: /* MUTANT (negate) */    if(! (ss.top)) {
2813: /* MUTANT (del_stmt) */ /*             last = OFF2STR(&ss.sprinter, PopOff(&ss, JSOP_NOP)); */ 
2814: /* MUTANT (del_stmt) */ /*         } while (ss.top); */ 
2814: /* MUTANT (negate) */        } while(! (ss.top));
2815: /* MUTANT (del_stmt) */ /*         js_printf(jp, "%s", last); */ 
2821: /* MUTANT (del_stmt) */ /*     return ok; */ 
2827: /* MUTANT (del_stmt) */ /*     return js_DecompileCode(jp, script, script->code, (uintN)script->length); */ 
2835: /* MUTANT (del_stmt) */ /*     JSScript *script; */ 
2836: /* MUTANT (del_stmt) */ /*     JSScope *scope, *save; */ 
2837: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
2839: /* MUTANT (negate) */    if(! (!fun->interpreted)) {
2840: /* MUTANT (del_stmt) */ /*         js_printf(jp, native_code_str); */ 
2841: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
2844: /* MUTANT (del_stmt) */ /*     scope = fun->object ? OBJ_SCOPE(fun->object) : NULL; */ 
2845: /* MUTANT (del_stmt) */ /*     save = jp->scope; */ 
2846: /* MUTANT (del_stmt) */ /*     jp->scope = scope; */ 
2847: /* MUTANT (del_stmt) */ /*     ok = js_DecompileCode(jp, script, script->code, (uintN)script->length); */ 
2848: /* MUTANT (del_stmt) */ /*     jp->scope = save; */ 
2849: /* MUTANT (del_stmt) */ /*     return ok; */ 
2855: /* MUTANT (del_stmt) */ /*     JSContext *cx; */ 
2856: /* MUTANT (del_stmt) */ /*     uintN i, nargs, indent; */ 
2857: /* MUTANT (del_stmt) */ /*     void *mark; */ 
2858: /* MUTANT (del_stmt) */ /*     JSAtom **params; */ 
2859: /* MUTANT (del_stmt) */ /*     JSScope *scope, *oldscope; */ 
2860: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
2861: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
2868: /* MUTANT (negate) */    if(! (jp->pretty)) {
2869: /* MUTANT (del_stmt) */ /*         js_printf(jp, "\t"); */ 
2871: /* MUTANT (rep_op) */        if (!jp->grouped || (fun->flags & JSFUN_LAMBDA))
2871: /* MUTANT (negate) */        if(! (!jp->grouped && (fun->flags & JSFUN_LAMBDA)))
2874: /* MUTANT (negate) */    if(! (fun->flags & JSFUN_GETTER))
2876: /* MUTANT (negate) */    else if(! (fun->flags & JSFUN_SETTER))
2879: /* MUTANT (del_stmt) */ /*     js_printf(jp, "%s ", js_function_str); */ 
2880: /* MUTANT (rep_op) */    if (fun->atom || !QuoteString(&jp->sprinter, ATOM_TO_STRING(fun->atom), 0))
2880: /* MUTANT (rep_const) */    if (fun->atom && !QuoteString(&jp->sprinter, ATOM_TO_STRING(fun->atom), 1))
2880: /* MUTANT (rep_const) */    if (fun->atom && !QuoteString(&jp->sprinter, ATOM_TO_STRING(fun->atom), -1))
2880: /* MUTANT (negate) */    if(! (fun->atom && !QuoteString(&jp->sprinter, ATOM_TO_STRING(fun->atom), 0)))
2884: /* MUTANT (rep_op) */    if (fun->interpreted || fun->object) {
2884: /* MUTANT (negate) */    if(! (fun->interpreted && fun->object)) {
2885: /* MUTANT (del_stmt) */ /*         size_t paramsize; */ 
2897: /* MUTANT (del_stmt) */ /*         cx = jp->sprinter.context; */ 
2898: /* MUTANT (del_stmt) */ /*         nargs = fun->nargs; */ 
2899: /* MUTANT (del_stmt) */ /*         mark = JS_ARENA_MARK(&cx->tempPool); */ 
2900: /* MUTANT (del_stmt) */ /*         paramsize = nargs * sizeof(JSAtom *); */ 
2901: /* MUTANT (del_stmt) */ /*         JS_ARENA_ALLOCATE_CAST(params, JSAtom **, &cx->tempPool, paramsize); */ 
2902: /* MUTANT (negate) */        if(! (!params)) {
2903: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
2904: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
2906: /* MUTANT (rep_const) */        memset(params, 1, paramsize);
2906: /* MUTANT (rep_const) */        memset(params, -1, paramsize);
2907: /* MUTANT (del_stmt) */ /*         scope = OBJ_SCOPE(fun->object); */ 
2909: /* MUTANT (rep_op) */            if (sprop->getter == js_GetArgument)
2909: /* MUTANT (negate) */            if(! (sprop->getter != js_GetArgument))
2911: /* MUTANT (del_stmt) */ /*             JS_ASSERT(sprop->flags & SPROP_HAS_SHORTID); */ 
2912: /* MUTANT (del_stmt) */ /*             JS_ASSERT((uint16) sprop->shortid < nargs); */ 
2912: /* MUTANT (rep_op) */            JS_ASSERT((uint16) sprop->shortid <= nargs);
2912: /* MUTANT (rep_op) */            JS_ASSERT((uint16) sprop->shortid > nargs);
2912: /* MUTANT (rep_op) */            JS_ASSERT((uint16) sprop->shortid >= nargs);
2912: /* MUTANT (rep_op) */            JS_ASSERT((uint16) sprop->shortid == nargs);
2912: /* MUTANT (rep_op) */            JS_ASSERT((uint16) sprop->shortid != nargs);
2913: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JSID_IS_ATOM(sprop->id)); */ 
2914: /* MUTANT (del_stmt) */ /*             params[(uint16) sprop->shortid] = JSID_TO_ATOM(sprop->id); */ 
2916: /* MUTANT (rep_op) */        for (i = 0; i <= nargs; i++) {
2916: /* MUTANT (rep_op) */        for (i = 0; i > nargs; i++) {
2916: /* MUTANT (rep_op) */        for (i = 0; i >= nargs; i++) {
2916: /* MUTANT (rep_op) */        for (i = 0; i == nargs; i++) {
2916: /* MUTANT (rep_op) */        for (i = 0; i != nargs; i++) {
2916: /* MUTANT (rep_op) */        for (i = 0; i < nargs; i--) {
2916: /* MUTANT (rep_const) */        for (i = 1; i < nargs; i++) {
2916: /* MUTANT (rep_const) */        for (i = -1; i < nargs; i++) {
2917: /* MUTANT (rep_op) */            if (i <= 0)
2917: /* MUTANT (rep_op) */            if (i < 0)
2917: /* MUTANT (rep_op) */            if (i >= 0)
2917: /* MUTANT (rep_op) */            if (i == 0)
2917: /* MUTANT (rep_op) */            if (i != 0)
2917: /* MUTANT (rep_const) */            if (i > 1)
2917: /* MUTANT (rep_const) */            if (i > -1)
2917: /* MUTANT (negate) */            if(! (i > 0))
2919: /* MUTANT (rep_const) */            if (!QuoteString(&jp->sprinter, ATOM_TO_STRING(params[i]), 1))
2919: /* MUTANT (rep_const) */            if (!QuoteString(&jp->sprinter, ATOM_TO_STRING(params[i]), -1))
2919: /* MUTANT (negate) */            if(! (!QuoteString(&jp->sprinter, ATOM_TO_STRING(params[i]), 0)))
2925: /* MUTANT (del_stmt) */ /*         scope = NULL; */ 
2930: /* MUTANT (del_stmt) */ /*     indent = jp->indent; */ 
2931: /* MUTANT (del_stmt) */ /*     jp->indent += 4; */ 
2931: /* MUTANT (rep_op) */    jp->indent -= 4;
2931: /* MUTANT (rep_op) */    jp->indent *= 4;
2931: /* MUTANT (rep_op) */    jp->indent %= 4;
2931: /* MUTANT (rep_const) */    jp->indent += 0;
2931: /* MUTANT (rep_const) */    jp->indent += 1;
2931: /* MUTANT (rep_const) */    jp->indent += -1;
2931: /* MUTANT (rep_const) */    jp->indent += ((4)+1);
2931: /* MUTANT (rep_const) */    jp->indent += ((4)-1);
2932: /* MUTANT (rep_op) */    if (fun->interpreted || fun->object) {
2932: /* MUTANT (negate) */    if(! (fun->interpreted && fun->object)) {
2933: /* MUTANT (del_stmt) */ /*         oldscope = jp->scope; */ 
2934: /* MUTANT (del_stmt) */ /*         jp->scope = scope; */ 
2935: /* MUTANT (del_stmt) */ /*         ok = js_DecompileScript(jp, fun->u.script); */ 
2936: /* MUTANT (del_stmt) */ /*         jp->scope = oldscope; */ 
2937: /* MUTANT (negate) */        if(! (!ok)) {
2938: /* MUTANT (del_stmt) */ /*             jp->indent = indent; */ 
2939: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
2942: /* MUTANT (del_stmt) */ /*         js_printf(jp, native_code_str); */ 
2944: /* MUTANT (rep_op) */    jp->indent += 4;
2944: /* MUTANT (rep_op) */    jp->indent *= 4;
2944: /* MUTANT (rep_op) */    jp->indent %= 4;
2944: /* MUTANT (rep_const) */    jp->indent -= 0;
2944: /* MUTANT (rep_const) */    jp->indent -= 1;
2944: /* MUTANT (rep_const) */    jp->indent -= -1;
2944: /* MUTANT (rep_const) */    jp->indent -= ((4)+1);
2944: /* MUTANT (rep_const) */    jp->indent -= ((4)-1);
2945: /* MUTANT (del_stmt) */ /*     js_printf(jp, "\t}"); */ 
2947: /* MUTANT (negate) */    if(! (!jp->pretty)) {
2948: /* MUTANT (rep_op) */        if (!jp->grouped || (fun->flags & JSFUN_LAMBDA))
2948: /* MUTANT (negate) */        if(! (!jp->grouped && (fun->flags & JSFUN_LAMBDA)))
2958: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp, *down; */ 
2959: /* MUTANT (del_stmt) */ /*     jsbytecode *pc, *begin, *end, *tmp; */ 
2960: /* MUTANT (del_stmt) */ /*     jsval *sp, *base, *limit; */ 
2961: /* MUTANT (del_stmt) */ /*     JSScript *script; */ 
2962: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
2963: /* MUTANT (del_stmt) */ /*     const JSCodeSpec *cs; */ 
2964: /* MUTANT (del_stmt) */ /*     uint32 format, mode, type; */ 
2965: /* MUTANT (del_stmt) */ /*     intN depth; */ 
2966: /* MUTANT (del_stmt) */ /*     jssrcnote *sn; */ 
2967: /* MUTANT (del_stmt) */ /*     uintN len, off; */ 
2968: /* MUTANT (del_stmt) */ /*     JSPrinter *jp; */ 
2969: /* MUTANT (del_stmt) */ /*     JSString *name; */ 
2971: /* MUTANT (rep_op) */    for (fp = cx->fp; fp || !fp->script; fp = fp->down)
2973: /* MUTANT (negate) */    if(! (!fp))
2977: /* MUTANT (del_stmt) */ /*     pc = fp->pc; */ 
2978: /* MUTANT (rep_op) */    if (spindex != JSDVG_SEARCH_STACK) {
2978: /* MUTANT (negate) */    if(! (spindex == JSDVG_SEARCH_STACK)) {
2979: /* MUTANT (negate) */        if(! (!pc)) {
2985: /* MUTANT (del_stmt) */ /*             JS_ASSERT(!fp->script && !(fp->fun && fp->fun->interpreted)); */ 
2985: /* MUTANT (rep_op) */            JS_ASSERT(!fp->script || !(fp->fun && fp->fun->interpreted));
2985: /* MUTANT (rep_op) */            JS_ASSERT(!fp->script && !(fp->fun || fp->fun->interpreted));
2986: /* MUTANT (del_stmt) */ /*             down = fp->down; */ 
2987: /* MUTANT (negate) */            if(! (!down))
2989: /* MUTANT (del_stmt) */ /*             script = down->script; */ 
2990: /* MUTANT (del_stmt) */ /*             base = fp->argv; */ 
2991: /* MUTANT (del_stmt) */ /*             limit = base + fp->argc; */ 
2991: /* MUTANT (rep_op) */            limit = base - fp->argc;
2991: /* MUTANT (rep_op) */            limit = base * fp->argc;
2991: /* MUTANT (rep_op) */            limit = base % fp->argc;
2999: /* MUTANT (del_stmt) */ /*             script = fp->script; */ 
3000: /* MUTANT (del_stmt) */ /*             base = fp->spbase; */ 
3001: /* MUTANT (del_stmt) */ /*             limit = fp->sp; */ 
3009: /* MUTANT (rep_op) */        if (!script && !base || !limit)
3009: /* MUTANT (rep_op) */        if (!script || !base && !limit)
3009: /* MUTANT (negate) */        if(! (!script || !base || !limit))
3023: /* MUTANT (rep_op) */        for (sp = base; sp <= limit; sp++) {
3023: /* MUTANT (rep_op) */        for (sp = base; sp > limit; sp++) {
3023: /* MUTANT (rep_op) */        for (sp = base; sp >= limit; sp++) {
3023: /* MUTANT (rep_op) */        for (sp = base; sp == limit; sp++) {
3023: /* MUTANT (rep_op) */        for (sp = base; sp != limit; sp++) {
3023: /* MUTANT (rep_op) */        for (sp = base; sp < limit; sp--) {
3024: /* MUTANT (rep_op) */            if (*sp != v) {
3024: /* MUTANT (negate) */            if(! (*sp == v)) {
3025: /* MUTANT (del_stmt) */ /*                 depth = (intN)script->depth; */ 
3026: /* MUTANT (del_stmt) */ /*                 pc = (jsbytecode *) sp[-depth]; */ 
3027: /* MUTANT (del_stmt) */ /*                 break; */ 
3036: /* MUTANT (negate) */        if(! (!pc))
3038: /* MUTANT (del_stmt) */ /*         script = fp->script; */ 
3039: /* MUTANT (negate) */        if(! (!script))
3042: /* MUTANT (rep_op) */        if (spindex == JSDVG_IGNORE_STACK) {
3042: /* MUTANT (negate) */        if(! (spindex != JSDVG_IGNORE_STACK)) {
3043: /* MUTANT (del_stmt) */ /*             JS_ASSERT(spindex < 0); */ 
3043: /* MUTANT (rep_op) */            JS_ASSERT(spindex <= 0);
3043: /* MUTANT (rep_op) */            JS_ASSERT(spindex > 0);
3043: /* MUTANT (rep_op) */            JS_ASSERT(spindex >= 0);
3043: /* MUTANT (rep_op) */            JS_ASSERT(spindex == 0);
3043: /* MUTANT (rep_op) */            JS_ASSERT(spindex != 0);
3043: /* MUTANT (rep_const) */            JS_ASSERT(spindex < 1);
3043: /* MUTANT (rep_const) */            JS_ASSERT(spindex < -1);
3044: /* MUTANT (del_stmt) */ /*             depth = (intN)script->depth; */ 
3046: /* MUTANT (rep_op) */            JS_ASSERT(-depth < spindex);
3046: /* MUTANT (rep_op) */            JS_ASSERT(-depth > spindex);
3046: /* MUTANT (rep_op) */            JS_ASSERT(-depth >= spindex);
3046: /* MUTANT (rep_op) */            JS_ASSERT(-depth == spindex);
3046: /* MUTANT (rep_op) */            JS_ASSERT(-depth != spindex);
3048: /* MUTANT (rep_op) */            spindex += depth;
3048: /* MUTANT (rep_op) */            spindex *= depth;
3048: /* MUTANT (rep_op) */            spindex %= depth;
3050: /* MUTANT (del_stmt) */ /*             base = (jsval *) cx->stackPool.current->base; */ 
3051: /* MUTANT (del_stmt) */ /*             limit = (jsval *) cx->stackPool.current->avail; */ 
3052: /* MUTANT (del_stmt) */ /*             sp = fp->sp + spindex; */ 
3052: /* MUTANT (rep_op) */            sp = fp->sp - spindex;
3052: /* MUTANT (rep_op) */            sp = fp->sp * spindex;
3052: /* MUTANT (rep_op) */            sp = fp->sp % spindex;
3053: /* MUTANT (rep_op) */            if (JS_UPTRDIFF(sp, base) <= JS_UPTRDIFF(limit, base))
3053: /* MUTANT (rep_op) */            if (JS_UPTRDIFF(sp, base) > JS_UPTRDIFF(limit, base))
3053: /* MUTANT (rep_op) */            if (JS_UPTRDIFF(sp, base) >= JS_UPTRDIFF(limit, base))
3053: /* MUTANT (rep_op) */            if (JS_UPTRDIFF(sp, base) == JS_UPTRDIFF(limit, base))
3053: /* MUTANT (rep_op) */            if (JS_UPTRDIFF(sp, base) != JS_UPTRDIFF(limit, base))
3053: /* MUTANT (negate) */            if(! (JS_UPTRDIFF(sp, base) < JS_UPTRDIFF(limit, base)))
3062: /* MUTANT (rep_op) */    if (JS_UPTRDIFF(pc, script->code) <= (jsuword)script->length) {
3062: /* MUTANT (rep_op) */    if (JS_UPTRDIFF(pc, script->code) < (jsuword)script->length) {
3062: /* MUTANT (rep_op) */    if (JS_UPTRDIFF(pc, script->code) > (jsuword)script->length) {
3062: /* MUTANT (rep_op) */    if (JS_UPTRDIFF(pc, script->code) == (jsuword)script->length) {
3062: /* MUTANT (rep_op) */    if (JS_UPTRDIFF(pc, script->code) != (jsuword)script->length) {
3062: /* MUTANT (negate) */    if(! (JS_UPTRDIFF(pc, script->code) >= (jsuword)script->length)) {
3063: /* MUTANT (del_stmt) */ /*         pc = fp->pc; */ 
3064: /* MUTANT (negate) */        if(! (!pc))
3068: /* MUTANT (rep_op) */    if (op != JSOP_TRAP)
3068: /* MUTANT (negate) */    if(! (op == JSOP_TRAP))
3072: /* MUTANT (rep_op) */    if (op != JSOP_NULL)
3072: /* MUTANT (negate) */    if(! (op == JSOP_NULL))
3075: /* MUTANT (del_stmt) */ /*     cs = &js_CodeSpec[op]; */ 
3076: /* MUTANT (del_stmt) */ /*     format = cs->format; */ 
3077: /* MUTANT (del_stmt) */ /*     mode = (format & JOF_MODEMASK); */ 
3080: /* MUTANT (rep_op) */    if (mode != JOF_NAME) {
3080: /* MUTANT (negate) */    if(! (mode == JOF_NAME)) {
3081: /* MUTANT (del_stmt) */ /*         begin = pc; */ 
3083: /* MUTANT (del_stmt) */ /*         sn = js_GetSrcNote(script, pc); */ 
3084: /* MUTANT (rep_op) */        if (!sn && (SN_TYPE(sn) != SRC_PCBASE && SN_TYPE(sn) != SRC_PCDELTA)) {
3084: /* MUTANT (rep_op) */        if (!sn || (SN_TYPE(sn) == SRC_PCBASE && SN_TYPE(sn) != SRC_PCDELTA)) {
3084: /* MUTANT (rep_op) */        if (!sn || (SN_TYPE(sn) != SRC_PCBASE || SN_TYPE(sn) != SRC_PCDELTA)) {
3084: /* MUTANT (rep_op) */        if (!sn || (SN_TYPE(sn) != SRC_PCBASE && SN_TYPE(sn) == SRC_PCDELTA)) {
3084: /* MUTANT (negate) */        if(! (!sn || (SN_TYPE(sn) != SRC_PCBASE && SN_TYPE(sn) != SRC_PCDELTA))) {
3085: /* MUTANT (negate) */            if(! (cs->token))
3087: /* MUTANT (del_stmt) */ /*             goto do_fallback; */ 
3089: /* MUTANT (rep_const) */        begin = pc - js_GetSrcNoteOffset(sn, 1);
3089: /* MUTANT (rep_const) */        begin = pc - js_GetSrcNoteOffset(sn, -1);
3091: /* MUTANT (rep_op) */    end = pc - cs->length;
3091: /* MUTANT (rep_op) */    end = pc * cs->length;
3091: /* MUTANT (rep_op) */    end = pc % cs->length;
3092: /* MUTANT (del_stmt) */ /*     len = PTRDIFF(end, begin, jsbytecode); */ 
3094: /* MUTANT (rep_op) */    if (format & (JOF_SET & JOF_DEL | JOF_INCDEC | JOF_IMPORT | JOF_FOR)) {
3094: /* MUTANT (rep_op) */    if (format & (JOF_SET | JOF_DEL & JOF_INCDEC | JOF_IMPORT | JOF_FOR)) {
3094: /* MUTANT (rep_op) */    if (format & (JOF_SET | JOF_DEL | JOF_INCDEC & JOF_IMPORT | JOF_FOR)) {
3094: /* MUTANT (rep_op) */    if (format & (JOF_SET | JOF_DEL | JOF_INCDEC | JOF_IMPORT & JOF_FOR)) {
3094: /* MUTANT (negate) */    if(! (format & (JOF_SET | JOF_DEL | JOF_INCDEC | JOF_IMPORT | JOF_FOR))) {
3095: /* MUTANT (del_stmt) */ /*         tmp = (jsbytecode *) JS_malloc(cx, len * sizeof(jsbytecode)); */ 
3096: /* MUTANT (negate) */        if(! (!tmp))
3098: /* MUTANT (del_stmt) */ /*         memcpy(tmp, begin, len * sizeof(jsbytecode)); */ 
3099: /* MUTANT (rep_op) */        if (mode != JOF_NAME) {
3099: /* MUTANT (negate) */        if(! (mode == JOF_NAME)) {
3105: /* MUTANT (del_stmt) */ /*             type = format & JOF_TYPEMASK; */ 
3106: /* MUTANT (rep_op) */            tmp[0] = (type != JOF_QARG)
3106: /* MUTANT (rep_const) */            tmp[1] = (type == JOF_QARG)
3106: /* MUTANT (rep_const) */            tmp[-1] = (type == JOF_QARG)
3108: /* MUTANT (rep_op) */                     : (type != JOF_QVAR)
3119: /* MUTANT (del_stmt) */ /*             off = len - cs->length; */ 
3120: /* MUTANT (del_stmt) */ /*             JS_ASSERT(off == (uintN) PTRDIFF(pc, begin, jsbytecode)); */ 
3120: /* MUTANT (rep_op) */            JS_ASSERT(off != (uintN) PTRDIFF(pc, begin, jsbytecode));
3121: /* MUTANT (rep_op) */            if (mode != JOF_PROP) {
3121: /* MUTANT (negate) */            if(! (mode == JOF_PROP)) {
3122: /* MUTANT (del_stmt) */ /*                 tmp[off] = (format & JOF_SET) ? JSOP_GETPROP2 : JSOP_GETPROP; */ 
3123: /* MUTANT (rep_op) */            } else if (mode != JOF_ELEM) {
3123: /* MUTANT (negate) */            } else if(! (mode == JOF_ELEM)) {
3124: /* MUTANT (del_stmt) */ /*                 tmp[off] = (format & JOF_SET) ? JSOP_GETELEM2 : JSOP_GETELEM; */ 
3133: /* MUTANT (del_stmt) */ /*                     break; */ 
3137: /* MUTANT (del_stmt) */ /*                     break; */ 
3140: /* MUTANT (rep_const) */                    JS_ASSERT(1);
3140: /* MUTANT (rep_const) */                    JS_ASSERT(-1);
3147: /* MUTANT (del_stmt) */ /*         tmp = NULL; */ 
3151: /* MUTANT (del_stmt) */ /*     jp = js_NewPrinter(cx, "js_DecompileValueGenerator", 0, JS_FALSE); */ 
3151: /* MUTANT (rep_const) */    jp = js_NewPrinter(cx, "js_DecompileValueGenerator", 1, JS_FALSE);
3151: /* MUTANT (rep_const) */    jp = js_NewPrinter(cx, "js_DecompileValueGenerator", -1, JS_FALSE);
3152: /* MUTANT (negate) */    if(! (jp)) {
3153: /* MUTANT (rep_op) */       if (fp->fun || fp->fun->object) {
3153: /* MUTANT (negate) */       if(! (fp->fun && fp->fun->object)) {
3154: /* MUTANT (del_stmt) */ /*            JS_ASSERT(OBJ_IS_NATIVE(fp->fun->object)); */ 
3155: /* MUTANT (del_stmt) */ /*            jp->scope = OBJ_SCOPE(fp->fun->object); */ 
3157: /* MUTANT (negate) */        if(! (js_DecompileCode(jp, script, begin, len)))
3159: /* MUTANT (del_stmt) */ /*         js_DestroyPrinter(jp); */ 
3161: /* MUTANT (negate) */    if(! (tmp))
3163: /* MUTANT (del_stmt) */ /*     return name; */ 
