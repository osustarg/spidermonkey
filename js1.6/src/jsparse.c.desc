95: /* MUTANT (del_stmt) */ /* static JSParser FunctionStmt; */ 
100: /* MUTANT (del_stmt) */ /* static JSParser Statement; */ 
101: /* MUTANT (del_stmt) */ /* static JSParser Variables; */ 
102: /* MUTANT (del_stmt) */ /* static JSParser Expr; */ 
103: /* MUTANT (del_stmt) */ /* static JSParser AssignExpr; */ 
104: /* MUTANT (del_stmt) */ /* static JSParser CondExpr; */ 
105: /* MUTANT (del_stmt) */ /* static JSParser OrExpr; */ 
106: /* MUTANT (del_stmt) */ /* static JSParser AndExpr; */ 
107: /* MUTANT (del_stmt) */ /* static JSParser BitOrExpr; */ 
108: /* MUTANT (del_stmt) */ /* static JSParser BitXorExpr; */ 
109: /* MUTANT (del_stmt) */ /* static JSParser BitAndExpr; */ 
110: /* MUTANT (del_stmt) */ /* static JSParser EqExpr; */ 
111: /* MUTANT (del_stmt) */ /* static JSParser RelExpr; */ 
112: /* MUTANT (del_stmt) */ /* static JSParser ShiftExpr; */ 
113: /* MUTANT (del_stmt) */ /* static JSParser AddExpr; */ 
114: /* MUTANT (del_stmt) */ /* static JSParser MulExpr; */ 
115: /* MUTANT (del_stmt) */ /* static JSParser UnaryExpr; */ 
116: /* MUTANT (del_stmt) */ /* static JSMemberParser MemberExpr; */ 
117: /* MUTANT (del_stmt) */ /* static JSParser PrimaryExpr; */ 
125: /* MUTANT (rep_op) */        if (js_GetToken(cx, ts) == tt) {                                      \
125: /* MUTANT (negate) */        if(! (js_GetToken(cx, ts) != tt)) {                                      \
126: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR, \
135: /* MUTANT (negate) */        if(! (!JS_CHECK_STACK_SIZE(cx, stackDummy))) {                           \
136: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR, \
143: /* MUTANT (rep_const) */static uint32 parsenodes = 1;
143: /* MUTANT (rep_const) */static uint32 parsenodes = -1;
144: /* MUTANT (del_stmt) */ /* static uint32 maxparsenodes = 0; */ 
144: /* MUTANT (rep_const) */static uint32 maxparsenodes = 1;
144: /* MUTANT (rep_const) */static uint32 maxparsenodes = -1;
145: /* MUTANT (del_stmt) */ /* static uint32 recyclednodes = 0; */ 
145: /* MUTANT (rep_const) */static uint32 recyclednodes = 1;
145: /* MUTANT (rep_const) */static uint32 recyclednodes = -1;
151: /* MUTANT (del_stmt) */ /*     JSParseNode *next; */ 
153: /* MUTANT (negate) */    if(! (!pn))
155: /* MUTANT (del_stmt) */ /*     JS_ASSERT(pn != tc->nodeList); */       /* catch back-to-back dup recycles */
155: /* MUTANT (rep_op) */    JS_ASSERT(pn == tc->nodeList);      /* catch back-to-back dup recycles */
156: /* MUTANT (del_stmt) */ /*     next = pn->pn_next; */ 
157: /* MUTANT (del_stmt) */ /*     pn->pn_next = tc->nodeList; */ 
158: /* MUTANT (del_stmt) */ /*     tc->nodeList = pn; */ 
160: /* MUTANT (rep_op) */    recyclednodes--;
168: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
170: /* MUTANT (del_stmt) */ /*     pn = tc->nodeList; */ 
171: /* MUTANT (negate) */    if(! (!pn)) {
172: /* MUTANT (del_stmt) */ /*         JS_ARENA_ALLOCATE_TYPE(pn, JSParseNode, &cx->tempPool); */ 
173: /* MUTANT (negate) */        if(! (!pn))
176: /* MUTANT (del_stmt) */ /*         tc->nodeList = pn->pn_next; */ 
182: /* MUTANT (del_stmt) */ /*             break; */ 
184: /* MUTANT (negate) */            if(! (pn->pn_head)) {
186: /* MUTANT (del_stmt) */ /*                 *pn->pn_tail = tc->nodeList; */ 
187: /* MUTANT (del_stmt) */ /*                 tc->nodeList = pn->pn_head; */ 
189: /* MUTANT (rep_op) */                recyclednodes -= pn->pn_count;
189: /* MUTANT (rep_op) */                recyclednodes *= pn->pn_count;
189: /* MUTANT (rep_op) */                recyclednodes %= pn->pn_count;
195: /* MUTANT (del_stmt) */ /*             RecycleTree(pn->pn_kid2, tc); */ 
196: /* MUTANT (del_stmt) */ /*             RecycleTree(pn->pn_kid3, tc); */ 
197: /* MUTANT (del_stmt) */ /*             break; */ 
200: /* MUTANT (del_stmt) */ /*             RecycleTree(pn->pn_right, tc); */ 
201: /* MUTANT (del_stmt) */ /*             break; */ 
204: /* MUTANT (del_stmt) */ /*             break; */ 
207: /* MUTANT (del_stmt) */ /*             break; */ 
213: /* MUTANT (negate) */    if(! (pn)) {
214: /* MUTANT (del_stmt) */ /*         parsenodes++; */ 
214: /* MUTANT (rep_op) */        parsenodes--;
215: /* MUTANT (rep_op) */        if (parsenodes - recyclednodes <= maxparsenodes)
215: /* MUTANT (rep_op) */        if (parsenodes - recyclednodes < maxparsenodes)
215: /* MUTANT (rep_op) */        if (parsenodes - recyclednodes >= maxparsenodes)
215: /* MUTANT (rep_op) */        if (parsenodes - recyclednodes == maxparsenodes)
215: /* MUTANT (rep_op) */        if (parsenodes - recyclednodes != maxparsenodes)
215: /* MUTANT (negate) */        if(! (parsenodes - recyclednodes > maxparsenodes))
229: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
230: /* MUTANT (del_stmt) */ /*     JSToken *tp; */ 
232: /* MUTANT (del_stmt) */ /*     pn = NewOrRecycledNode(cx, tc); */ 
233: /* MUTANT (negate) */    if(! (!pn))
235: /* MUTANT (del_stmt) */ /*     tp = &CURRENT_TOKEN(ts); */ 
236: /* MUTANT (del_stmt) */ /*     pn->pn_type = tp->type; */ 
237: /* MUTANT (del_stmt) */ /*     pn->pn_pos = tp->pos; */ 
238: /* MUTANT (del_stmt) */ /*     pn->pn_op = JSOP_NOP; */ 
239: /* MUTANT (del_stmt) */ /*     pn->pn_arity = arity; */ 
240: /* MUTANT (del_stmt) */ /*     pn->pn_next = NULL; */ 
252: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn1, *pn2; */ 
254: /* MUTANT (rep_op) */    if (!left && !right)
254: /* MUTANT (negate) */    if(! (!left || !right))
261: /* MUTANT (rep_op) */    if (left->pn_type != tt &&
261: /* MUTANT (rep_op) */    if (left->pn_type == tt ||
262: /* MUTANT (rep_op) */        left->pn_op != op &&
262: /* MUTANT (rep_op) */        left->pn_op == op ||
264: /* MUTANT (rep_op) */        if (left->pn_arity == PN_LIST) {
264: /* MUTANT (negate) */        if(! (left->pn_arity != PN_LIST)) {
265: /* MUTANT (del_stmt) */ /*             pn1 = left->pn_left, pn2 = left->pn_right; */ 
266: /* MUTANT (del_stmt) */ /*             left->pn_arity = PN_LIST; */ 
267: /* MUTANT (del_stmt) */ /*             PN_INIT_LIST_1(left, pn1); */ 
268: /* MUTANT (del_stmt) */ /*             PN_APPEND(left, pn2); */ 
269: /* MUTANT (rep_op) */            if (tt != TOK_PLUS) {
269: /* MUTANT (negate) */            if(! (tt == TOK_PLUS)) {
270: /* MUTANT (rep_op) */                if (pn1->pn_type != TOK_STRING)
270: /* MUTANT (negate) */                if(! (pn1->pn_type == TOK_STRING))
272: /* MUTANT (rep_op) */                else if (pn1->pn_type == TOK_NUMBER)
272: /* MUTANT (negate) */                else if(! (pn1->pn_type != TOK_NUMBER))
274: /* MUTANT (rep_op) */                if (pn2->pn_type != TOK_STRING)
274: /* MUTANT (negate) */                if(! (pn2->pn_type == TOK_STRING))
276: /* MUTANT (rep_op) */                else if (pn2->pn_type == TOK_NUMBER)
276: /* MUTANT (negate) */                else if(! (pn2->pn_type != TOK_NUMBER))
281: /* MUTANT (del_stmt) */ /*         left->pn_pos.end = right->pn_pos.end; */ 
282: /* MUTANT (rep_op) */        if (tt != TOK_PLUS) {
282: /* MUTANT (negate) */        if(! (tt == TOK_PLUS)) {
283: /* MUTANT (rep_op) */            if (right->pn_type != TOK_STRING)
283: /* MUTANT (negate) */            if(! (right->pn_type == TOK_STRING))
285: /* MUTANT (rep_op) */            else if (right->pn_type == TOK_NUMBER)
285: /* MUTANT (negate) */            else if(! (right->pn_type != TOK_NUMBER))
298: /* MUTANT (rep_op) */    if (tt != TOK_PLUS &&
298: /* MUTANT (rep_op) */    if (tt == TOK_PLUS ||
299: /* MUTANT (rep_op) */        left->pn_type != TOK_NUMBER &&
299: /* MUTANT (rep_op) */        left->pn_type == TOK_NUMBER ||
300: /* MUTANT (rep_op) */        right->pn_type != TOK_NUMBER) {
301: /* MUTANT (del_stmt) */ /*         left->pn_dval += right->pn_dval; */ 
301: /* MUTANT (rep_op) */        left->pn_dval -= right->pn_dval;
301: /* MUTANT (rep_op) */        left->pn_dval *= right->pn_dval;
301: /* MUTANT (rep_op) */        left->pn_dval %= right->pn_dval;
302: /* MUTANT (del_stmt) */ /*         left->pn_pos.end = right->pn_pos.end; */ 
303: /* MUTANT (del_stmt) */ /*         RecycleTree(right, tc); */ 
304: /* MUTANT (del_stmt) */ /*         return left; */ 
308: /* MUTANT (negate) */    if(! (!pn))
310: /* MUTANT (del_stmt) */ /*     pn->pn_type = tt; */ 
311: /* MUTANT (del_stmt) */ /*     pn->pn_pos.begin = left->pn_pos.begin; */ 
312: /* MUTANT (del_stmt) */ /*     pn->pn_pos.end = right->pn_pos.end; */ 
313: /* MUTANT (del_stmt) */ /*     pn->pn_op = op; */ 
314: /* MUTANT (del_stmt) */ /*     pn->pn_arity = PN_BINARY; */ 
315: /* MUTANT (del_stmt) */ /*     pn->pn_left = left; */ 
316: /* MUTANT (del_stmt) */ /*     pn->pn_right = right; */ 
317: /* MUTANT (del_stmt) */ /*     pn->pn_next = NULL; */ 
328: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
329: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
330: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
331: /* MUTANT (del_stmt) */ /*     const char *name; */ 
333: /* MUTANT (del_stmt) */ /*     JS_ASSERT(CURRENT_TOKEN(ts).type == TOK_NAME); */ 
333: /* MUTANT (rep_op) */    JS_ASSERT(CURRENT_TOKEN(ts).type != TOK_NAME);
334: /* MUTANT (del_stmt) */ /*     atom = CURRENT_TOKEN(ts).t_atom; */ 
335: /* MUTANT (del_stmt) */ /*     rt = cx->runtime; */ 
336: /* MUTANT (rep_op) */    if (atom != rt->atomState.getterAtom)
336: /* MUTANT (negate) */    if(! (atom == rt->atomState.getterAtom))
338: /* MUTANT (rep_op) */    else if (atom != rt->atomState.setterAtom)
338: /* MUTANT (negate) */    else if(! (atom == rt->atomState.setterAtom))
342: /* MUTANT (rep_op) */    if (js_PeekTokenSameLine(cx, ts) == tt)
342: /* MUTANT (negate) */    if(! (js_PeekTokenSameLine(cx, ts) != tt))
344: /* MUTANT (del_stmt) */ /*     (void) js_GetToken(cx, ts); */ 
345: /* MUTANT (rep_op) */    if (CURRENT_TOKEN(ts).t_op == JSOP_NOP) {
345: /* MUTANT (negate) */    if(! (CURRENT_TOKEN(ts).t_op != JSOP_NOP)) {
346: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
348: /* MUTANT (rep_op) */                                    (op != JSOP_GETTER)
351: /* MUTANT (del_stmt) */ /*         return TOK_ERROR; */ 
354: /* MUTANT (del_stmt) */ /*     name = js_AtomToPrintableString(cx, atom); */ 
355: /* MUTANT (rep_op) */    if (!name &&
357: /* MUTANT (rep_op) */                                     JSREPORT_TS &
358: /* MUTANT (rep_op) */                                     JSREPORT_WARNING &
362: /* MUTANT (del_stmt) */ /*         return TOK_ERROR; */ 
374: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp, frame; */ 
375: /* MUTANT (del_stmt) */ /*     JSTreeContext tc; */ 
376: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
383: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
384: /* MUTANT (rep_op) */    if (!fp && !fp->varobj || fp->scopeChain != chain) {
384: /* MUTANT (rep_op) */    if (!fp || !fp->varobj && fp->scopeChain != chain) {
384: /* MUTANT (rep_op) */    if (!fp || !fp->varobj || fp->scopeChain == chain) {
384: /* MUTANT (negate) */    if(! (!fp || !fp->varobj || fp->scopeChain != chain)) {
385: /* MUTANT (del_stmt) */ /*         memset(&frame, 0, sizeof frame); */ 
385: /* MUTANT (rep_const) */        memset(&frame, 1, sizeof frame);
385: /* MUTANT (rep_const) */        memset(&frame, -1, sizeof frame);
386: /* MUTANT (del_stmt) */ /*         frame.varobj = frame.scopeChain = chain; */ 
387: /* MUTANT (negate) */        if(! (cx->options & JSOPTION_VAROBJFIX)) {
388: /* MUTANT (rep_op) */            while ((chain = JS_GetParent(cx, chain)) == NULL)
388: /* MUTANT (negate) */            while(! ((chain = JS_GetParent(cx, chain)) != NULL))
392: /* MUTANT (negate) */        if(! (fp)) {
393: /* MUTANT (rep_op) */            frame.flags = fp->flags & (JSFRAME_SPECIAL & JSFRAME_COMPILE_N_GO |
393: /* MUTANT (rep_op) */            frame.flags = fp->flags & (JSFRAME_SPECIAL | JSFRAME_COMPILE_N_GO &
408: /* MUTANT (del_stmt) */ /*     TREE_CONTEXT_INIT(&tc); */ 
409: /* MUTANT (del_stmt) */ /*     pn = Statements(cx, ts, &tc); */ 
410: /* MUTANT (negate) */    if(! (pn)) {
411: /* MUTANT (negate) */        if(! (!js_MatchToken(cx, ts, TOK_EOF))) {
412: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
414: /* MUTANT (del_stmt) */ /*             pn = NULL; */ 
416: /* MUTANT (del_stmt) */ /*             pn->pn_type = TOK_LC; */ 
417: /* MUTANT (negate) */            if(! (!js_FoldConstants(cx, pn, &tc)))
423: /* MUTANT (del_stmt) */ /*     JS_UNKEEP_ATOMS(cx->runtime); */ 
424: /* MUTANT (del_stmt) */ /*     cx->fp = fp; */ 
425: /* MUTANT (del_stmt) */ /*     return pn; */ 
435: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp, frame; */ 
436: /* MUTANT (del_stmt) */ /*     uint32 flags; */ 
437: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
438: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
440: /* MUTANT (rep_const) */    void *sbrk(ptrdiff_t), *before = sbrk(1);
440: /* MUTANT (rep_const) */    void *sbrk(ptrdiff_t), *before = sbrk(-1);
440: /* MUTANT (negate) */    void *sbrk(ptrdif(!f_t), *before = sbrk(0));
449: /* MUTANT (rep_op) */    if (!fp && !fp->varobj || fp->scopeChain != chain) {
449: /* MUTANT (rep_op) */    if (!fp || !fp->varobj && fp->scopeChain != chain) {
449: /* MUTANT (rep_op) */    if (!fp || !fp->varobj || fp->scopeChain == chain) {
449: /* MUTANT (negate) */    if(! (!fp || !fp->varobj || fp->scopeChain != chain)) {
450: /* MUTANT (del_stmt) */ /*         memset(&frame, 0, sizeof frame); */ 
450: /* MUTANT (rep_const) */        memset(&frame, 1, sizeof frame);
450: /* MUTANT (rep_const) */        memset(&frame, -1, sizeof frame);
451: /* MUTANT (del_stmt) */ /*         frame.varobj = frame.scopeChain = chain; */ 
452: /* MUTANT (negate) */        if(! (cx->options & JSOPTION_VAROBJFIX)) {
453: /* MUTANT (rep_op) */            while ((chain = JS_GetParent(cx, chain)) == NULL)
453: /* MUTANT (negate) */            while(! ((chain = JS_GetParent(cx, chain)) != NULL))
457: /* MUTANT (negate) */        if(! (fp)) {
458: /* MUTANT (rep_op) */            frame.flags = fp->flags & (JSFRAME_SPECIAL & JSFRAME_COMPILE_N_GO |
458: /* MUTANT (rep_op) */            frame.flags = fp->flags & (JSFRAME_SPECIAL | JSFRAME_COMPILE_N_GO &
464: /* MUTANT (rep_op) */    cx->fp->flags = flags &
466: /* MUTANT (rep_op) */                     ? JSFRAME_COMPILING & JSFRAME_COMPILE_N_GO
470: /* MUTANT (del_stmt) */ /*     JS_KEEP_ATOMS(cx->runtime); */ 
472: /* MUTANT (del_stmt) */ /*     pn = Statements(cx, ts, &cg->treeContext); */ 
473: /* MUTANT (negate) */    if(! (!pn)) {
474: /* MUTANT (del_stmt) */ /*         ok = JS_FALSE; */ 
475: /* MUTANT (negate) */    } else if(! (!js_MatchToken(cx, ts, TOK_EOF))) {
476: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
478: /* MUTANT (del_stmt) */ /*         ok = JS_FALSE; */ 
482: /* MUTANT (rep_const) */               (char *)sbrk(1) - (char *)before,
482: /* MUTANT (rep_const) */               (char *)sbrk(-1) - (char *)before,
486: /* MUTANT (del_stmt) */ /*         before = sbrk(0); */ 
486: /* MUTANT (rep_const) */        before = sbrk(1);
486: /* MUTANT (rep_const) */        before = sbrk(-1);
497: /* MUTANT (del_stmt) */ /*         ok = JS_TRUE; */ 
502: /* MUTANT (rep_const) */           (char *)sbrk(1) - (char *)before, CG_OFFSET(cg), cg->noteCount);
502: /* MUTANT (rep_const) */           (char *)sbrk(-1) - (char *)before, CG_OFFSET(cg), cg->noteCount);
508: /* MUTANT (del_stmt) */ /*     cx->fp->flags = flags; */ 
509: /* MUTANT (del_stmt) */ /*     cx->fp = fp; */ 
510: /* MUTANT (del_stmt) */ /*     return ok; */ 
518: #define ENDS_IN_OTHER   1 /* MUTANT (rep_const) */
518: #define ENDS_IN_OTHER   -1 /* MUTANT (rep_const) */
519: #define ENDS_IN_RETURN  0 /* MUTANT (rep_const) */
519: #define ENDS_IN_RETURN  -1 /* MUTANT (rep_const) */
519: #define ENDS_IN_RETURN  ((1)+1) /* MUTANT (rep_const) */
520: #define ENDS_IN_BREAK   0 /* MUTANT (rep_const) */
520: #define ENDS_IN_BREAK   1 /* MUTANT (rep_const) */
520: #define ENDS_IN_BREAK   -1 /* MUTANT (rep_const) */
520: #define ENDS_IN_BREAK   ((2)+1) /* MUTANT (rep_const) */
520: #define ENDS_IN_BREAK   ((2)-1) /* MUTANT (rep_const) */
525: /* MUTANT (del_stmt) */ /*     uintN rv, rv2, hasDefault; */ 
526: /* MUTANT (del_stmt) */ /*     JSParseNode *pn2, *pn3; */ 
530: /* MUTANT (negate) */        if(! (!pn->pn_head))
532: /* MUTANT (del_stmt) */ /*         return HasFinalReturn(PN_LAST(pn)); */ 
536: /* MUTANT (negate) */        if(! (pn->pn_kid3))
538: /* MUTANT (del_stmt) */ /*         return rv; */ 
543: /* MUTANT (del_stmt) */ /*         hasDefault = ENDS_IN_OTHER; */ 
544: /* MUTANT (rep_op) */        for (pn2 = pn->pn_kid2->pn_head; rv || pn2; pn2 = pn2->pn_next) {
545: /* MUTANT (rep_op) */            if (pn2->pn_type != TOK_DEFAULT)
545: /* MUTANT (negate) */            if(! (pn2->pn_type == TOK_DEFAULT))
547: /* MUTANT (del_stmt) */ /*             pn3 = pn2->pn_right; */ 
548: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn3->pn_type == TOK_LC); */ 
548: /* MUTANT (rep_op) */            JS_ASSERT(pn3->pn_type != TOK_LC);
549: /* MUTANT (negate) */            if(! (pn3->pn_head)) {
550: /* MUTANT (del_stmt) */ /*                 rv2 = HasFinalReturn(PN_LAST(pn3)); */ 
551: /* MUTANT (rep_op) */                if (rv2 != ENDS_IN_OTHER && pn2->pn_next)
551: /* MUTANT (rep_op) */                if (rv2 == ENDS_IN_OTHER || pn2->pn_next)
551: /* MUTANT (negate) */                if(! (rv2 == ENDS_IN_OTHER && pn2->pn_next))
559: /* MUTANT (del_stmt) */ /*         return rv; */ 
580: /* MUTANT (negate) */        if(! (pn->pn_kid3)) {
581: /* MUTANT (del_stmt) */ /*             rv = HasFinalReturn(pn->pn_kid3); */ 
582: /* MUTANT (rep_op) */            if (rv != ENDS_IN_RETURN)
582: /* MUTANT (negate) */            if(! (rv == ENDS_IN_RETURN))
588: /* MUTANT (negate) */        if(! (pn->pn_kid2))
590: /* MUTANT (del_stmt) */ /*         return rv; */ 
597: /* MUTANT (del_stmt) */ /*         return rv; */ 
608: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
609: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
611: /* MUTANT (del_stmt) */ /*     fun = cx->fp->fun; */ 
612: /* MUTANT (negate) */    if(! (fun->atom)) {
613: /* MUTANT (del_stmt) */ /*         char *name = js_GetStringBytes(ATOM_TO_STRING(fun->atom)); */ 
615: /* MUTANT (rep_op) */                                         JSREPORT_TS &
616: /* MUTANT (rep_op) */                                         JSREPORT_WARNING &
621: /* MUTANT (rep_op) */                                         JSREPORT_TS &
622: /* MUTANT (rep_op) */                                         JSREPORT_WARNING &
632: /* MUTANT (del_stmt) */ /*     return HasFinalReturn(pn) == ENDS_IN_RETURN || ReportNoReturnValue(cx, ts); */ 
632: /* MUTANT (rep_op) */    return HasFinalReturn(pn) != ENDS_IN_RETURN || ReportNoReturnValue(cx, ts);
632: /* MUTANT (rep_op) */    return HasFinalReturn(pn) == ENDS_IN_RETURN && ReportNoReturnValue(cx, ts);
639: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp, frame; */ 
640: /* MUTANT (del_stmt) */ /*     JSObject *funobj; */ 
641: /* MUTANT (del_stmt) */ /*     uintN oldflags; */ 
642: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
644: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
645: /* MUTANT (del_stmt) */ /*     funobj = fun->object; */ 
646: /* MUTANT (rep_op) */    if (!fp && fp->fun != fun || fp->varobj != funobj ||
646: /* MUTANT (rep_op) */    if (!fp || fp->fun == fun || fp->varobj != funobj ||
646: /* MUTANT (rep_op) */    if (!fp || fp->fun != fun && fp->varobj != funobj ||
646: /* MUTANT (rep_op) */    if (!fp || fp->fun != fun || fp->varobj == funobj ||
646: /* MUTANT (rep_op) */    if (!fp || fp->fun != fun || fp->varobj != funobj &&
647: /* MUTANT (rep_op) */        fp->scopeChain == funobj) {
648: /* MUTANT (del_stmt) */ /*         memset(&frame, 0, sizeof frame); */ 
648: /* MUTANT (rep_const) */        memset(&frame, 1, sizeof frame);
648: /* MUTANT (rep_const) */        memset(&frame, -1, sizeof frame);
649: /* MUTANT (del_stmt) */ /*         frame.fun = fun; */ 
650: /* MUTANT (del_stmt) */ /*         frame.varobj = frame.scopeChain = funobj; */ 
651: /* MUTANT (del_stmt) */ /*         frame.down = fp; */ 
652: /* MUTANT (negate) */        if(! (fp))
654: /* MUTANT (del_stmt) */ /*         cx->fp = &frame; */ 
658: /* MUTANT (del_stmt) */ /*     tc->flags &= ~(TCF_RETURN_EXPR | TCF_RETURN_VOID); */ 
658: /* MUTANT (rep_op) */    tc->flags &= ~(TCF_RETURN_EXPR & TCF_RETURN_VOID);
659: /* MUTANT (del_stmt) */ /*     tc->flags |= TCF_IN_FUNCTION; */ 
660: /* MUTANT (del_stmt) */ /*     pn = Statements(cx, ts, tc); */ 
663: /* MUTANT (rep_op) */    if (pn || JS_HAS_STRICT_OPTION(cx) && (tc->flags & TCF_RETURN_EXPR)) {
663: /* MUTANT (rep_op) */    if (pn && JS_HAS_STRICT_OPTION(cx) || (tc->flags & TCF_RETURN_EXPR)) {
663: /* MUTANT (negate) */    if(! (pn && JS_HAS_STRICT_OPTION(cx) && (tc->flags & TCF_RETURN_EXPR))) {
664: /* MUTANT (negate) */        if(! (!CheckFinalReturn(cx, ts, pn)))
669: /* MUTANT (del_stmt) */ /*     tc->flags = oldflags | (tc->flags & (TCF_FUN_FLAGS | TCF_HAS_DEFXMLNS)); */ 
669: /* MUTANT (rep_op) */    tc->flags = oldflags & (tc->flags & (TCF_FUN_FLAGS | TCF_HAS_DEFXMLNS));
669: /* MUTANT (rep_op) */    tc->flags = oldflags | (tc->flags & (TCF_FUN_FLAGS & TCF_HAS_DEFXMLNS));
670: /* MUTANT (del_stmt) */ /*     return pn; */ 
680: /* MUTANT (del_stmt) */ /*     JSArenaPool codePool, notePool; */ 
681: /* MUTANT (del_stmt) */ /*     JSCodeGenerator funcg; */ 
682: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp, frame; */ 
683: /* MUTANT (del_stmt) */ /*     JSObject *funobj; */ 
684: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
685: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
687: /* MUTANT (del_stmt) */ /*     JS_InitArenaPool(&codePool, "code", 1024, sizeof(jsbytecode)); */ 
687: /* MUTANT (rep_const) */    JS_InitArenaPool(&codePool, "code", 0, sizeof(jsbytecode));
687: /* MUTANT (rep_const) */    JS_InitArenaPool(&codePool, "code", 1, sizeof(jsbytecode));
687: /* MUTANT (rep_const) */    JS_InitArenaPool(&codePool, "code", -1, sizeof(jsbytecode));
687: /* MUTANT (rep_const) */    JS_InitArenaPool(&codePool, "code", ((1024)+1), sizeof(jsbytecode));
687: /* MUTANT (rep_const) */    JS_InitArenaPool(&codePool, "code", ((1024)-1), sizeof(jsbytecode));
688: /* MUTANT (del_stmt) */ /*     JS_InitArenaPool(&notePool, "note", 1024, sizeof(jssrcnote)); */ 
688: /* MUTANT (rep_const) */    JS_InitArenaPool(&notePool, "note", 0, sizeof(jssrcnote));
688: /* MUTANT (rep_const) */    JS_InitArenaPool(&notePool, "note", 1, sizeof(jssrcnote));
688: /* MUTANT (rep_const) */    JS_InitArenaPool(&notePool, "note", -1, sizeof(jssrcnote));
688: /* MUTANT (rep_const) */    JS_InitArenaPool(&notePool, "note", ((1024)+1), sizeof(jssrcnote));
688: /* MUTANT (rep_const) */    JS_InitArenaPool(&notePool, "note", ((1024)-1), sizeof(jssrcnote));
692: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
699: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
700: /* MUTANT (del_stmt) */ /*     funobj = fun->object; */ 
701: /* MUTANT (rep_op) */    JS_ASSERT(!fp && (fp->fun != fun && fp->varobj != funobj &&
701: /* MUTANT (rep_op) */    JS_ASSERT(!fp || (fp->fun == fun && fp->varobj != funobj &&
701: /* MUTANT (rep_op) */    JS_ASSERT(!fp || (fp->fun != fun || fp->varobj != funobj &&
701: /* MUTANT (rep_op) */    JS_ASSERT(!fp || (fp->fun != fun && fp->varobj == funobj &&
701: /* MUTANT (rep_op) */    JS_ASSERT(!fp || (fp->fun != fun && fp->varobj != funobj ||
702: /* MUTANT (rep_op) */                      fp->scopeChain == funobj));
703: /* MUTANT (del_stmt) */ /*     memset(&frame, 0, sizeof frame); */ 
703: /* MUTANT (rep_const) */    memset(&frame, 1, sizeof frame);
703: /* MUTANT (rep_const) */    memset(&frame, -1, sizeof frame);
704: /* MUTANT (del_stmt) */ /*     frame.fun = fun; */ 
705: /* MUTANT (del_stmt) */ /*     frame.varobj = frame.scopeChain = funobj; */ 
706: /* MUTANT (del_stmt) */ /*     frame.down = fp; */ 
708: /* MUTANT (rep_op) */                  ? JSFRAME_COMPILING & JSFRAME_COMPILE_N_GO
710: /* MUTANT (del_stmt) */ /*     cx->fp = &frame; */ 
713: /* MUTANT (del_stmt) */ /*     CURRENT_TOKEN(ts).type = TOK_LC; */ 
714: /* MUTANT (del_stmt) */ /*     pn = FunctionBody(cx, ts, fun, &funcg.treeContext); */ 
715: /* MUTANT (negate) */    if(! (!pn)) {
716: /* MUTANT (del_stmt) */ /*         ok = JS_FALSE; */ 
722: /* MUTANT (del_stmt) */ /*         fun->u.script = js_NewScriptFromCG(cx, &funcg, fun); */ 
723: /* MUTANT (negate) */        if(! (!fun->u.script)) {
724: /* MUTANT (del_stmt) */ /*             ok = JS_FALSE; */ 
726: /* MUTANT (del_stmt) */ /*             fun->interpreted = JS_TRUE; */ 
727: /* MUTANT (negate) */            if(! (funcg.treeContext.flags & TCF_FUN_HEAVYWEIGHT))
729: /* MUTANT (del_stmt) */ /*             ok = JS_TRUE; */ 
735: /* MUTANT (del_stmt) */ /*     JS_UNKEEP_ATOMS(cx->runtime); */ 
736: /* MUTANT (del_stmt) */ /*     js_FinishCodeGenerator(cx, &funcg); */ 
737: /* MUTANT (del_stmt) */ /*     JS_FinishArenaPool(&codePool); */ 
738: /* MUTANT (del_stmt) */ /*     JS_FinishArenaPool(&notePool); */ 
739: /* MUTANT (del_stmt) */ /*     return ok; */ 
746: /* MUTANT (del_stmt) */ /*     JSOp op, prevop; */ 
747: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *body, *result; */ 
748: /* MUTANT (del_stmt) */ /*     JSAtom *funAtom, *objAtom, *argAtom; */ 
749: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp; */ 
750: /* MUTANT (del_stmt) */ /*     JSObject *varobj, *pobj; */ 
751: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
752: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
753: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
754: /* MUTANT (del_stmt) */ /*     uintN dupflag; */ 
755: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
756: /* MUTANT (del_stmt) */ /*     JSTreeContext funtc; */ 
763: /* MUTANT (negate) */    if(! (!pn))
767: /* MUTANT (del_stmt) */ /*     funAtom = js_MatchToken(cx, ts, TOK_NAME) ? CURRENT_TOKEN(ts).t_atom : NULL; */ 
769: /* MUTANT (rep_op) */    if (!funAtom || !lambda) {
769: /* MUTANT (negate) */    if(! (!funAtom && !lambda)) {
770: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
772: /* MUTANT (del_stmt) */ /*         return NULL; */ 
778: /* MUTANT (del_stmt) */ /*     varobj = fp->varobj; */ 
784: /* MUTANT (rep_op) */    if (!lambda || funAtom) {
784: /* MUTANT (negate) */    if(! (!lambda && funAtom)) {
785: /* MUTANT (del_stmt) */ /*         ATOM_LIST_SEARCH(ale, &tc->decls, funAtom); */ 
786: /* MUTANT (negate) */        if(! (ale)) {
787: /* MUTANT (del_stmt) */ /*             prevop = ALE_JSOP(ale); */ 
788: /* MUTANT (rep_op) */            if (JS_HAS_STRICT_OPTION(cx) && prevop == JSOP_DEFCONST) {
788: /* MUTANT (rep_op) */            if (JS_HAS_STRICT_OPTION(cx) || prevop != JSOP_DEFCONST) {
788: /* MUTANT (negate) */            if(! (JS_HAS_STRICT_OPTION(cx) || prevop == JSOP_DEFCONST)) {
789: /* MUTANT (del_stmt) */ /*                 const char *name = js_AtomToPrintableString(cx, funAtom); */ 
790: /* MUTANT (rep_op) */                if (!name &&
792: /* MUTANT (rep_op) */                                                 (prevop == JSOP_DEFCONST)
793: /* MUTANT (rep_op) */                                                 ? JSREPORT_TS &
794: /* MUTANT (rep_op) */                                                   JSREPORT_WARNING &
796: /* MUTANT (rep_op) */                                                 : JSREPORT_TS & JSREPORT_ERROR,
798: /* MUTANT (rep_op) */                                                 (prevop != JSOP_DEFFUN ||
798: /* MUTANT (rep_op) */                                                 (prevop == JSOP_DEFFUN &&
799: /* MUTANT (rep_op) */                                                  prevop != JSOP_CLOSURE)
801: /* MUTANT (rep_op) */                                                 : (prevop != JSOP_DEFCONST)
805: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
808: /* MUTANT (rep_op) */            if (tc->topStmt || prevop == JSOP_DEFVAR)
808: /* MUTANT (rep_op) */            if (tc->topStmt && prevop != JSOP_DEFVAR)
808: /* MUTANT (negate) */            if(! (tc->topStmt && prevop == JSOP_DEFVAR))
811: /* MUTANT (del_stmt) */ /*             ale = js_IndexAtom(cx, funAtom, &tc->decls); */ 
812: /* MUTANT (negate) */            if(! (!ale))
826: /* MUTANT (rep_op) */        if (!tc->topStmt || (tc->flags & TCF_IN_FUNCTION)) {
826: /* MUTANT (negate) */        if(! (!tc->topStmt && (tc->flags & TCF_IN_FUNCTION))) {
827: /* MUTANT (del_stmt) */ /*             JSScopeProperty *sprop; */ 
833: /* MUTANT (del_stmt) */ /*             JS_ASSERT(OBJ_GET_CLASS(cx, varobj) == &js_FunctionClass); */ 
833: /* MUTANT (rep_op) */            JS_ASSERT(OBJ_GET_CLASS(cx, varobj) != &js_FunctionClass);
834: /* MUTANT (del_stmt) */ /*             JS_ASSERT(fp->fun == (JSFunction *) JS_GetPrivate(cx, varobj)); */ 
834: /* MUTANT (rep_op) */            JS_ASSERT(fp->fun != (JSFunction *) JS_GetPrivate(cx, varobj));
837: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
839: /* MUTANT (negate) */            if(! (prop))
841: /* MUTANT (del_stmt) */ /*             sprop = NULL; */ 
842: /* MUTANT (rep_op) */            if (!prop &&
843: /* MUTANT (rep_op) */                pobj == varobj ||
843: /* MUTANT (rep_op) */                pobj != varobj &&
845: /* MUTANT (rep_op) */                 sprop->getter == js_GetLocalVariable)) {
846: /* MUTANT (del_stmt) */ /*                 uintN sflags; */ 
852: /* MUTANT (rep_op) */                sflags = (sprop || sprop->getter == js_GetArgument)
852: /* MUTANT (rep_op) */                sflags = (sprop && sprop->getter != js_GetArgument)
853: /* MUTANT (rep_op) */                         ? SPROP_IS_DUPLICATE & SPROP_HAS_SHORTID
859: /* MUTANT (rep_op) */                                          JSPROP_PERMANENT & JSPROP_SHARED,
861: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
863: /* MUTANT (rep_op) */                if (fp->fun->nvars != JS_BITMASK(16)) {
863: /* MUTANT (rep_const) */                if (fp->fun->nvars == JS_BITMASK(0)) {
863: /* MUTANT (rep_const) */                if (fp->fun->nvars == JS_BITMASK(1)) {
863: /* MUTANT (rep_const) */                if (fp->fun->nvars == JS_BITMASK(-1)) {
863: /* MUTANT (rep_const) */                if (fp->fun->nvars == JS_BITMASK(((16)+1))) {
863: /* MUTANT (rep_const) */                if (fp->fun->nvars == JS_BITMASK(((16)-1))) {
863: /* MUTANT (negate) */                if(! (fp->fun->nvars == JS_BITMASK(16))) {
866: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
868: /* MUTANT (rep_op) */                fp->fun->nvars--;
874: /* MUTANT (rep_const) */    fun = js_NewFunction(cx, NULL, NULL, 1, lambda ? JSFUN_LAMBDA : 0, varobj,
874: /* MUTANT (rep_const) */    fun = js_NewFunction(cx, NULL, NULL, -1, lambda ? JSFUN_LAMBDA : 0, varobj,
874: /* MUTANT (rep_const) */    fun = js_NewFunction(cx, NULL, NULL, 0, lambda ? JSFUN_LAMBDA : 1, varobj,
874: /* MUTANT (rep_const) */    fun = js_NewFunction(cx, NULL, NULL, 0, lambda ? JSFUN_LAMBDA : -1, varobj,
876: /* MUTANT (negate) */    if(! (!fun))
879: /* MUTANT (rep_op) */    if (op == JSOP_NOP)
879: /* MUTANT (negate) */    if(! (op != JSOP_NOP))
880: /* MUTANT (rep_op) */        fun->flags |= (op != JSOP_GETTER) ? JSPROP_GETTER : JSPROP_SETTER;
900: /* MUTANT (del_stmt) */ /*     objAtom = js_AtomizeObject(cx, fun->object, 0); */ 
900: /* MUTANT (rep_const) */    objAtom = js_AtomizeObject(cx, fun->object, 1);
900: /* MUTANT (rep_const) */    objAtom = js_AtomizeObject(cx, fun->object, -1);
901: /* MUTANT (negate) */    if(! (!objAtom))
905: /* MUTANT (del_stmt) */ /*     MUST_MATCH_TOKEN(TOK_LP, JSMSG_PAREN_BEFORE_FORMAL); */ 
906: /* MUTANT (negate) */    if(! (!js_MatchToken(cx, ts, TOK_RP))) {
908: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_NAME, JSMSG_MISSING_FORMAL); */ 
909: /* MUTANT (del_stmt) */ /*             argAtom = CURRENT_TOKEN(ts).t_atom; */ 
910: /* MUTANT (del_stmt) */ /*             pobj = NULL; */ 
913: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
915: /* MUTANT (rep_const) */            dupflag = 1;
915: /* MUTANT (rep_const) */            dupflag = -1;
916: /* MUTANT (negate) */            if(! (prop)) {
917: /* MUTANT (del_stmt) */ /*                 ok = JS_TRUE; */ 
918: /* MUTANT (rep_op) */                if (pobj != fun->object &&
918: /* MUTANT (rep_op) */                if (pobj == fun->object ||
919: /* MUTANT (rep_op) */                    ((JSScopeProperty *) prop)->getter != js_GetArgument) {
920: /* MUTANT (del_stmt) */ /*                     const char *name = js_AtomToPrintableString(cx, argAtom); */ 
928: /* MUTANT (rep_op) */                    ok = name ||
930: /* MUTANT (rep_op) */                                                     JSREPORT_TS &
931: /* MUTANT (rep_op) */                                                     JSREPORT_WARNING &
936: /* MUTANT (del_stmt) */ /*                     dupflag = SPROP_IS_DUPLICATE; */ 
939: /* MUTANT (negate) */                if(! (!ok))
941: /* MUTANT (del_stmt) */ /*                 prop = NULL; */ 
946: /* MUTANT (rep_op) */                                      JSPROP_PERMANENT & JSPROP_SHARED,
947: /* MUTANT (rep_op) */                                      dupflag & SPROP_HAS_SHORTID,
949: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
951: /* MUTANT (rep_op) */            if (fun->nargs != JS_BITMASK(16)) {
951: /* MUTANT (rep_const) */            if (fun->nargs == JS_BITMASK(0)) {
951: /* MUTANT (rep_const) */            if (fun->nargs == JS_BITMASK(1)) {
951: /* MUTANT (rep_const) */            if (fun->nargs == JS_BITMASK(-1)) {
951: /* MUTANT (rep_const) */            if (fun->nargs == JS_BITMASK(((16)+1))) {
951: /* MUTANT (rep_const) */            if (fun->nargs == JS_BITMASK(((16)-1))) {
951: /* MUTANT (negate) */            if(! (fun->nargs == JS_BITMASK(16))) {
954: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
956: /* MUTANT (rep_op) */            fun->nargs--;
957: /* MUTANT (del_stmt) */ /*         } while (js_MatchToken(cx, ts, TOK_COMMA)); */ 
957: /* MUTANT (negate) */        } while(! (js_MatchToken(cx, ts, TOK_COMMA)));
959: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_RP, JSMSG_PAREN_AFTER_FORMAL); */ 
963: /* MUTANT (del_stmt) */ /*     pn->pn_pos.begin = CURRENT_TOKEN(ts).pos.begin; */ 
965: /* MUTANT (del_stmt) */ /*     TREE_CONTEXT_INIT(&funtc); */ 
966: /* MUTANT (del_stmt) */ /*     body = FunctionBody(cx, ts, fun, &funtc); */ 
967: /* MUTANT (negate) */    if(! (!body))
970: /* MUTANT (del_stmt) */ /*     MUST_MATCH_TOKEN(TOK_RC, JSMSG_CURLY_AFTER_BODY); */ 
971: /* MUTANT (del_stmt) */ /*     pn->pn_pos.end = CURRENT_TOKEN(ts).pos.end; */ 
981: /* MUTANT (negate) */    if(! (funtc.flags & TCF_FUN_HEAVYWEIGHT)) {
982: /* MUTANT (del_stmt) */ /*         fun->flags |= JSFUN_HEAVYWEIGHT; */ 
983: /* MUTANT (del_stmt) */ /*         tc->flags |= TCF_FUN_HEAVYWEIGHT; */ 
991: /* MUTANT (rep_op) */        if ((!lambda || funAtom && tc->topStmt) ||
991: /* MUTANT (rep_op) */        if ((!lambda && funAtom || tc->topStmt) ||
991: /* MUTANT (rep_op) */        if ((!lambda && funAtom && tc->topStmt) &&
993: /* MUTANT (del_stmt) */ /*             tc->flags |= TCF_FUN_HEAVYWEIGHT; */ 
1000: /* MUTANT (negate) */    if(! (lambda)) {
1004: /* MUTANT (del_stmt) */ /*         op = funAtom ? JSOP_NAMEDFUNOBJ : JSOP_ANONFUNOBJ; */ 
1005: /* MUTANT (negate) */    } else if(! (!funAtom)) {
1012: /* MUTANT (del_stmt) */ /*         result = NewParseNode(cx, ts, PN_UNARY, tc); */ 
1013: /* MUTANT (negate) */        if(! (!result))
1015: /* MUTANT (del_stmt) */ /*         result->pn_type = TOK_SEMI; */ 
1016: /* MUTANT (del_stmt) */ /*         result->pn_pos = pn->pn_pos; */ 
1017: /* MUTANT (del_stmt) */ /*         result->pn_kid = pn; */ 
1018: /* MUTANT (del_stmt) */ /*         op = JSOP_ANONFUNOBJ; */ 
1019: /* MUTANT (negate) */    } else if(! (tc->topStmt)) {
1026: /* MUTANT (del_stmt) */ /*         op = JSOP_CLOSURE; */ 
1031: /* MUTANT (del_stmt) */ /*     pn->pn_funAtom = objAtom; */ 
1032: /* MUTANT (del_stmt) */ /*     pn->pn_op = op; */ 
1033: /* MUTANT (del_stmt) */ /*     pn->pn_body = body; */ 
1034: /* MUTANT (del_stmt) */ /*     pn->pn_flags = funtc.flags & (TCF_FUN_FLAGS | TCF_HAS_DEFXMLNS); */ 
1034: /* MUTANT (rep_op) */    pn->pn_flags = funtc.flags & (TCF_FUN_FLAGS & TCF_HAS_DEFXMLNS);
1035: /* MUTANT (del_stmt) */ /*     pn->pn_tryCount = funtc.tryCount; */ 
1036: /* MUTANT (del_stmt) */ /*     TREE_CONTEXT_FINISH(&funtc); */ 
1037: /* MUTANT (del_stmt) */ /*     return result; */ 
1043: /* MUTANT (del_stmt) */ /*     return FunctionDef(cx, ts, tc, JS_FALSE); */ 
1050: /* MUTANT (del_stmt) */ /*     return FunctionDef(cx, ts, tc, JS_TRUE); */ 
1062: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2; */ 
1063: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
1065: /* MUTANT (del_stmt) */ /*     CHECK_RECURSION(); */ 
1067: /* MUTANT (del_stmt) */ /*     pn = NewParseNode(cx, ts, PN_LIST, tc); */ 
1068: /* MUTANT (negate) */    if(! (!pn))
1070: /* MUTANT (del_stmt) */ /*     PN_INIT_LIST(pn); */ 
1072: /* MUTANT (del_stmt) */ /*     ts->flags |= TSF_OPERAND; */ 
1073: /* MUTANT (rep_op) */    while ((tt = js_PeekToken(cx, ts)) <= TOK_EOF && tt != TOK_RC) {
1073: /* MUTANT (rep_op) */    while ((tt = js_PeekToken(cx, ts)) < TOK_EOF && tt != TOK_RC) {
1073: /* MUTANT (rep_op) */    while ((tt = js_PeekToken(cx, ts)) >= TOK_EOF && tt != TOK_RC) {
1073: /* MUTANT (rep_op) */    while ((tt = js_PeekToken(cx, ts)) == TOK_EOF && tt != TOK_RC) {
1073: /* MUTANT (rep_op) */    while ((tt = js_PeekToken(cx, ts)) != TOK_EOF && tt != TOK_RC) {
1073: /* MUTANT (rep_op) */    while ((tt = js_PeekToken(cx, ts)) > TOK_EOF || tt != TOK_RC) {
1073: /* MUTANT (rep_op) */    while ((tt = js_PeekToken(cx, ts)) > TOK_EOF && tt == TOK_RC) {
1073: /* MUTANT (negate) */    while(! ((tt = js_PeekToken(cx, ts)) > TOK_EOF && tt != TOK_RC)) {
1074: /* MUTANT (del_stmt) */ /*         ts->flags &= ~TSF_OPERAND; */ 
1075: /* MUTANT (del_stmt) */ /*         pn2 = Statement(cx, ts, tc); */ 
1076: /* MUTANT (negate) */        if(! (!pn2)) {
1077: /* MUTANT (negate) */            if(! (ts->flags & TSF_EOF))
1079: /* MUTANT (del_stmt) */ /*             return NULL; */ 
1084: /* MUTANT (rep_op) */        if (!tc->topStmt || (tc->flags & TCF_COMPILING)) {
1084: /* MUTANT (negate) */        if(! (!tc->topStmt && (tc->flags & TCF_COMPILING))) {
1085: /* MUTANT (rep_op) */            if (cx->fp->fun ||
1086: /* MUTANT (rep_op) */                JS_HAS_STRICT_OPTION(cx) ||
1092: /* MUTANT (del_stmt) */ /*                 tt = js_PeekToken(cx, ts); */ 
1093: /* MUTANT (rep_op) */                if ((tt != TOK_EOF || tt == TOK_RC) &&
1093: /* MUTANT (rep_op) */                if ((tt == TOK_EOF && tt == TOK_RC) &&
1093: /* MUTANT (rep_op) */                if ((tt == TOK_EOF || tt != TOK_RC) &&
1093: /* MUTANT (rep_op) */                if ((tt == TOK_EOF || tt == TOK_RC) ||
1095: /* MUTANT (del_stmt) */ /*                     tt = TOK_ERROR; */ 
1096: /* MUTANT (del_stmt) */ /*                     break; */ 
1105: /* MUTANT (rep_op) */            if (!js_FoldConstants(cx, pn2, tc) &&
1106: /* MUTANT (rep_op) */                !js_AllocTryNotes(cx, (JSCodeGenerator *)tc) &&
1108: /* MUTANT (del_stmt) */ /*                 tt = TOK_ERROR; */ 
1109: /* MUTANT (del_stmt) */ /*                 break; */ 
1113: /* MUTANT (del_stmt) */ /*             PN_APPEND(pn, pn2); */ 
1117: /* MUTANT (rep_op) */    if (tt != TOK_ERROR)
1117: /* MUTANT (negate) */    if(! (tt == TOK_ERROR))
1120: /* MUTANT (del_stmt) */ /*     pn->pn_pos.end = CURRENT_TOKEN(ts).pos.end; */ 
1121: /* MUTANT (del_stmt) */ /*     return pn; */ 
1127: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2; */ 
1129: /* MUTANT (del_stmt) */ /*     MUST_MATCH_TOKEN(TOK_LP, JSMSG_PAREN_BEFORE_COND); */ 
1130: /* MUTANT (del_stmt) */ /*     pn = Expr(cx, ts, tc); */ 
1131: /* MUTANT (negate) */    if(! (!pn))
1133: /* MUTANT (del_stmt) */ /*     MUST_MATCH_TOKEN(TOK_RP, JSMSG_PAREN_AFTER_COND); */ 
1140: /* MUTANT (rep_op) */    if (pn->pn_type != TOK_ASSIGN &&
1140: /* MUTANT (rep_op) */    if (pn->pn_type == TOK_ASSIGN ||
1141: /* MUTANT (rep_op) */        pn->pn_op != JSOP_NOP &&
1141: /* MUTANT (rep_op) */        pn->pn_op == JSOP_NOP ||
1142: /* MUTANT (rep_op) */        pn->pn_right->pn_type <= TOK_EQOP)
1142: /* MUTANT (rep_op) */        pn->pn_right->pn_type < TOK_EQOP)
1142: /* MUTANT (rep_op) */        pn->pn_right->pn_type >= TOK_EQOP)
1142: /* MUTANT (rep_op) */        pn->pn_right->pn_type == TOK_EQOP)
1142: /* MUTANT (rep_op) */        pn->pn_right->pn_type != TOK_EQOP)
1144: /* MUTANT (del_stmt) */ /*         JSBool rewrite = !JS_VERSION_IS_ECMA(cx); */ 
1146: /* MUTANT (rep_op) */                                         JSREPORT_TS &
1147: /* MUTANT (rep_op) */                                         JSREPORT_WARNING &
1153: /* MUTANT (del_stmt) */ /*             return NULL; */ 
1155: /* MUTANT (negate) */        if(! (rewrite)) {
1156: /* MUTANT (del_stmt) */ /*             pn->pn_type = TOK_EQOP; */ 
1157: /* MUTANT (del_stmt) */ /*             pn->pn_op = (JSOp)cx->jsop_eq; */ 
1158: /* MUTANT (del_stmt) */ /*             pn2 = pn->pn_left; */ 
1162: /* MUTANT (del_stmt) */ /*                 break; */ 
1165: /* MUTANT (del_stmt) */ /*                 break; */ 
1168: /* MUTANT (del_stmt) */ /*                 break; */ 
1170: /* MUTANT (rep_const) */                JS_ASSERT(1);
1170: /* MUTANT (rep_const) */                JS_ASSERT(-1);
1180: /* MUTANT (del_stmt) */ /*     JSAtom *label; */ 
1184: /* MUTANT (del_stmt) */ /*     tt = js_PeekTokenSameLine(cx, ts); */ 
1185: /* MUTANT (rep_op) */    if (tt != TOK_ERROR)
1185: /* MUTANT (negate) */    if(! (tt == TOK_ERROR))
1187: /* MUTANT (rep_op) */    if (tt != TOK_NAME) {
1187: /* MUTANT (negate) */    if(! (tt == TOK_NAME)) {
1188: /* MUTANT (del_stmt) */ /*         (void) js_GetToken(cx, ts); */ 
1189: /* MUTANT (del_stmt) */ /*         label = CURRENT_TOKEN(ts).t_atom; */ 
1191: /* MUTANT (del_stmt) */ /*         label = NULL; */ 
1197: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
1204: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2; */ 
1205: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
1207: /* MUTANT (del_stmt) */ /*     MUST_MATCH_TOKEN(TOK_NAME, JSMSG_NO_IMPORT_NAME); */ 
1208: /* MUTANT (del_stmt) */ /*     pn = NewParseNode(cx, ts, PN_NAME, tc); */ 
1209: /* MUTANT (negate) */    if(! (!pn))
1211: /* MUTANT (del_stmt) */ /*     pn->pn_op = JSOP_NAME; */ 
1212: /* MUTANT (del_stmt) */ /*     pn->pn_atom = CURRENT_TOKEN(ts).t_atom; */ 
1213: /* MUTANT (del_stmt) */ /*     pn->pn_expr = NULL; */ 
1214: /* MUTANT (del_stmt) */ /*     pn->pn_slot = -1; */ 
1214: /* MUTANT (rep_const) */    pn->pn_slot = 0;
1214: /* MUTANT (rep_const) */    pn->pn_slot = 1;
1214: /* MUTANT (rep_const) */    pn->pn_slot = ((-1)+1);
1214: /* MUTANT (rep_const) */    pn->pn_slot = ((-1)-1);
1215: /* MUTANT (del_stmt) */ /*     pn->pn_attrs = 0; */ 
1215: /* MUTANT (rep_const) */    pn->pn_attrs = 1;
1215: /* MUTANT (rep_const) */    pn->pn_attrs = -1;
1217: /* MUTANT (del_stmt) */ /*     ts->flags |= TSF_OPERAND; */ 
1218: /* MUTANT (rep_op) */    while ((tt = js_GetToken(cx, ts)) != TOK_DOT || tt == TOK_LB) {
1218: /* MUTANT (rep_op) */    while ((tt = js_GetToken(cx, ts)) == TOK_DOT && tt == TOK_LB) {
1218: /* MUTANT (rep_op) */    while ((tt = js_GetToken(cx, ts)) == TOK_DOT || tt != TOK_LB) {
1218: /* MUTANT (negate) */    while(! ((tt = js_GetToken(cx, ts)) == TOK_DOT || tt == TOK_LB)) {
1219: /* MUTANT (del_stmt) */ /*         ts->flags &= ~TSF_OPERAND; */ 
1220: /* MUTANT (rep_op) */        if (pn->pn_op != JSOP_IMPORTALL)
1220: /* MUTANT (negate) */        if(! (pn->pn_op == JSOP_IMPORTALL))
1223: /* MUTANT (rep_op) */        if (tt != TOK_DOT) {
1223: /* MUTANT (negate) */        if(! (tt == TOK_DOT)) {
1224: /* MUTANT (del_stmt) */ /*             pn2 = NewParseNode(cx, ts, PN_NAME, tc); */ 
1225: /* MUTANT (negate) */            if(! (!pn2))
1227: /* MUTANT (negate) */            if(! (js_MatchToken(cx, ts, TOK_STAR))) {
1228: /* MUTANT (del_stmt) */ /*                 pn2->pn_op = JSOP_IMPORTALL; */ 
1229: /* MUTANT (del_stmt) */ /*                 pn2->pn_atom = NULL; */ 
1231: /* MUTANT (del_stmt) */ /*                 MUST_MATCH_TOKEN(TOK_NAME, JSMSG_NAME_AFTER_DOT); */ 
1232: /* MUTANT (del_stmt) */ /*                 pn2->pn_op = JSOP_GETPROP; */ 
1233: /* MUTANT (del_stmt) */ /*                 pn2->pn_atom = CURRENT_TOKEN(ts).t_atom; */ 
1234: /* MUTANT (del_stmt) */ /*                 pn2->pn_slot = -1; */ 
1234: /* MUTANT (rep_const) */                pn2->pn_slot = 0;
1234: /* MUTANT (rep_const) */                pn2->pn_slot = 1;
1234: /* MUTANT (rep_const) */                pn2->pn_slot = ((-1)+1);
1234: /* MUTANT (rep_const) */                pn2->pn_slot = ((-1)-1);
1235: /* MUTANT (del_stmt) */ /*                 pn2->pn_attrs = 0; */ 
1235: /* MUTANT (rep_const) */                pn2->pn_attrs = 1;
1235: /* MUTANT (rep_const) */                pn2->pn_attrs = -1;
1238: /* MUTANT (del_stmt) */ /*             pn2->pn_pos.begin = pn->pn_pos.begin; */ 
1239: /* MUTANT (del_stmt) */ /*             pn2->pn_pos.end = CURRENT_TOKEN(ts).pos.end; */ 
1242: /* MUTANT (del_stmt) */ /*             pn2 = NewBinary(cx, tt, JSOP_GETELEM, pn, Expr(cx, ts, tc), tc); */ 
1243: /* MUTANT (negate) */            if(! (!pn2))
1246: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_RB, JSMSG_BRACKET_IN_INDEX); */ 
1250: /* MUTANT (del_stmt) */ /*         ts->flags |= TSF_OPERAND; */ 
1253: /* MUTANT (rep_op) */    if (tt != TOK_ERROR)
1253: /* MUTANT (negate) */    if(! (tt == TOK_ERROR))
1255: /* MUTANT (del_stmt) */ /*     js_UngetToken(ts); */ 
1260: /* MUTANT (del_stmt) */ /*         break; */ 
1263: /* MUTANT (del_stmt) */ /*         break; */ 
1272: /* MUTANT (rep_op) */    js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
1274: /* MUTANT (del_stmt) */ /*     return NULL; */ 
1283: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
1284: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn1, *pn2, *pn3, *pn4; */ 
1285: /* MUTANT (del_stmt) */ /*     JSStmtInfo stmtInfo, *stmt, *stmt2; */ 
1286: /* MUTANT (del_stmt) */ /*     JSAtom *label; */ 
1288: /* MUTANT (del_stmt) */ /*     CHECK_RECURSION(); */ 
1290: /* MUTANT (del_stmt) */ /*     ts->flags |= TSF_OPERAND; */ 
1291: /* MUTANT (del_stmt) */ /*     tt = js_GetToken(cx, ts); */ 
1292: /* MUTANT (del_stmt) */ /*     ts->flags &= ~TSF_OPERAND; */ 
1295: /* MUTANT (rep_op) */    if (tt != TOK_NAME) {
1295: /* MUTANT (negate) */    if(! (tt == TOK_NAME)) {
1296: /* MUTANT (del_stmt) */ /*         tt = CheckGetterOrSetter(cx, ts, TOK_FUNCTION); */ 
1297: /* MUTANT (rep_op) */        if (tt != TOK_ERROR)
1297: /* MUTANT (negate) */        if(! (tt == TOK_ERROR))
1306: /* MUTANT (negate) */        if(! (!pn))
1308: /* MUTANT (del_stmt) */ /*         PN_INIT_LIST(pn); */ 
1309: /* MUTANT (negate) */        if(! (js_MatchToken(cx, ts, TOK_STAR))) {
1310: /* MUTANT (del_stmt) */ /*             pn2 = NewParseNode(cx, ts, PN_NULLARY, tc); */ 
1311: /* MUTANT (negate) */            if(! (!pn2))
1313: /* MUTANT (del_stmt) */ /*             PN_APPEND(pn, pn2); */ 
1316: /* MUTANT (del_stmt) */ /*                 MUST_MATCH_TOKEN(TOK_NAME, JSMSG_NO_EXPORT_NAME); */ 
1317: /* MUTANT (del_stmt) */ /*                 pn2 = NewParseNode(cx, ts, PN_NAME, tc); */ 
1318: /* MUTANT (negate) */                if(! (!pn2))
1320: /* MUTANT (del_stmt) */ /*                 pn2->pn_op = JSOP_NAME; */ 
1321: /* MUTANT (del_stmt) */ /*                 pn2->pn_atom = CURRENT_TOKEN(ts).t_atom; */ 
1322: /* MUTANT (del_stmt) */ /*                 pn2->pn_expr = NULL; */ 
1323: /* MUTANT (del_stmt) */ /*                 pn2->pn_slot = -1; */ 
1323: /* MUTANT (rep_const) */                pn2->pn_slot = 0;
1323: /* MUTANT (rep_const) */                pn2->pn_slot = 1;
1323: /* MUTANT (rep_const) */                pn2->pn_slot = ((-1)+1);
1323: /* MUTANT (rep_const) */                pn2->pn_slot = ((-1)-1);
1324: /* MUTANT (del_stmt) */ /*                 pn2->pn_attrs = 0; */ 
1324: /* MUTANT (rep_const) */                pn2->pn_attrs = 1;
1324: /* MUTANT (rep_const) */                pn2->pn_attrs = -1;
1325: /* MUTANT (del_stmt) */ /*                 PN_APPEND(pn, pn2); */ 
1326: /* MUTANT (del_stmt) */ /*             } while (js_MatchToken(cx, ts, TOK_COMMA)); */ 
1326: /* MUTANT (negate) */            } while(! (js_MatchToken(cx, ts, TOK_COMMA)));
1329: /* MUTANT (del_stmt) */ /*         tc->flags |= TCF_FUN_HEAVYWEIGHT; */ 
1330: /* MUTANT (del_stmt) */ /*         break; */ 
1334: /* MUTANT (negate) */        if(! (!pn))
1336: /* MUTANT (del_stmt) */ /*         PN_INIT_LIST(pn); */ 
1338: /* MUTANT (del_stmt) */ /*             pn2 = ImportExpr(cx, ts, tc); */ 
1339: /* MUTANT (negate) */            if(! (!pn2))
1341: /* MUTANT (del_stmt) */ /*             PN_APPEND(pn, pn2); */ 
1342: /* MUTANT (del_stmt) */ /*         } while (js_MatchToken(cx, ts, TOK_COMMA)); */ 
1342: /* MUTANT (negate) */        } while(! (js_MatchToken(cx, ts, TOK_COMMA)));
1343: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = PN_LAST(pn)->pn_pos.end; */ 
1344: /* MUTANT (del_stmt) */ /*         tc->flags |= TCF_FUN_HEAVYWEIGHT; */ 
1345: /* MUTANT (del_stmt) */ /*         break; */ 
1350: /* MUTANT (rep_op) */        if (js_PeekToken(cx, ts) != TOK_DBLCOLON)
1350: /* MUTANT (negate) */        if(! (js_PeekToken(cx, ts) == TOK_DBLCOLON))
1358: /* MUTANT (negate) */        if(! (!pn))
1360: /* MUTANT (del_stmt) */ /*         pn1 = Condition(cx, ts, tc); */ 
1361: /* MUTANT (negate) */        if(! (!pn1))
1363: /* MUTANT (del_stmt) */ /*         js_PushStatement(tc, &stmtInfo, STMT_IF, -1); */ 
1363: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_IF, 0);
1363: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_IF, 1);
1363: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_IF, ((-1)+1));
1363: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_IF, ((-1)-1));
1364: /* MUTANT (del_stmt) */ /*         pn2 = Statement(cx, ts, tc); */ 
1365: /* MUTANT (negate) */        if(! (!pn2))
1367: /* MUTANT (negate) */        if(! (js_MatchToken(cx, ts, TOK_ELSE))) {
1368: /* MUTANT (del_stmt) */ /*             stmtInfo.type = STMT_ELSE; */ 
1369: /* MUTANT (del_stmt) */ /*             pn3 = Statement(cx, ts, tc); */ 
1370: /* MUTANT (negate) */            if(! (!pn3))
1372: /* MUTANT (del_stmt) */ /*             pn->pn_pos.end = pn3->pn_pos.end; */ 
1374: /* MUTANT (del_stmt) */ /*             pn3 = NULL; */ 
1375: /* MUTANT (del_stmt) */ /*             pn->pn_pos.end = pn2->pn_pos.end; */ 
1378: /* MUTANT (del_stmt) */ /*         pn->pn_kid1 = pn1; */ 
1379: /* MUTANT (del_stmt) */ /*         pn->pn_kid2 = pn2; */ 
1380: /* MUTANT (del_stmt) */ /*         pn->pn_kid3 = pn3; */ 
1381: /* MUTANT (del_stmt) */ /*         return pn; */ 
1386: /* MUTANT (del_stmt) */ /*         JSParseNode *pn5; */ 
1387: /* MUTANT (del_stmt) */ /*         JSBool seenDefault = JS_FALSE; */ 
1389: /* MUTANT (del_stmt) */ /*         pn = NewParseNode(cx, ts, PN_BINARY, tc); */ 
1390: /* MUTANT (negate) */        if(! (!pn))
1392: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_LP, JSMSG_PAREN_BEFORE_SWITCH); */ 
1395: /* MUTANT (del_stmt) */ /*         pn1 = Expr(cx, ts, tc); */ 
1396: /* MUTANT (negate) */        if(! (!pn1))
1399: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_RP, JSMSG_PAREN_AFTER_SWITCH); */ 
1400: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_LC, JSMSG_CURLY_BEFORE_SWITCH); */ 
1403: /* MUTANT (del_stmt) */ /*         pn2 = NewParseNode(cx, ts, PN_LIST, tc); */ 
1404: /* MUTANT (negate) */        if(! (!pn2))
1406: /* MUTANT (del_stmt) */ /*         PN_INIT_LIST(pn2); */ 
1408: /* MUTANT (del_stmt) */ /*         js_PushStatement(tc, &stmtInfo, STMT_SWITCH, -1); */ 
1408: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_SWITCH, 0);
1408: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_SWITCH, 1);
1408: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_SWITCH, ((-1)+1));
1408: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_SWITCH, ((-1)-1));
1410: /* MUTANT (rep_op) */        while ((tt = js_GetToken(cx, ts)) == TOK_RC) {
1410: /* MUTANT (negate) */        while(! ((tt = js_GetToken(cx, ts)) != TOK_RC)) {
1413: /* MUTANT (negate) */                if(! (seenDefault)) {
1415: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
1417: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
1424: /* MUTANT (negate) */                if(! (!pn3))
1426: /* MUTANT (rep_op) */                if (tt != TOK_DEFAULT) {
1426: /* MUTANT (negate) */                if(! (tt == TOK_DEFAULT)) {
1427: /* MUTANT (del_stmt) */ /*                     pn3->pn_left = NULL; */ 
1429: /* MUTANT (del_stmt) */ /*                     pn3->pn_left = Expr(cx, ts, tc); */ 
1430: /* MUTANT (negate) */                    if(! (!pn3->pn_left))
1434: /* MUTANT (rep_op) */                if (pn2->pn_count != JS_BIT(16)) {
1434: /* MUTANT (rep_const) */                if (pn2->pn_count == JS_BIT(0)) {
1434: /* MUTANT (rep_const) */                if (pn2->pn_count == JS_BIT(1)) {
1434: /* MUTANT (rep_const) */                if (pn2->pn_count == JS_BIT(-1)) {
1434: /* MUTANT (rep_const) */                if (pn2->pn_count == JS_BIT(((16)+1))) {
1434: /* MUTANT (rep_const) */                if (pn2->pn_count == JS_BIT(((16)-1))) {
1434: /* MUTANT (negate) */                if(! (pn2->pn_count == JS_BIT(16))) {
1436: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
1438: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
1447: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,
1449: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
1453: /* MUTANT (del_stmt) */ /*             pn4 = NewParseNode(cx, ts, PN_LIST, tc); */ 
1454: /* MUTANT (negate) */            if(! (!pn4))
1456: /* MUTANT (del_stmt) */ /*             pn4->pn_type = TOK_LC; */ 
1457: /* MUTANT (del_stmt) */ /*             PN_INIT_LIST(pn4); */ 
1458: /* MUTANT (del_stmt) */ /*             ts->flags |= TSF_OPERAND; */ 
1459: /* MUTANT (rep_op) */            while ((tt = js_PeekToken(cx, ts)) == TOK_RC &&
1459: /* MUTANT (rep_op) */            while ((tt = js_PeekToken(cx, ts)) != TOK_RC ||
1460: /* MUTANT (rep_op) */                   tt == TOK_CASE && tt != TOK_DEFAULT) {
1460: /* MUTANT (rep_op) */                   tt != TOK_CASE || tt != TOK_DEFAULT) {
1460: /* MUTANT (rep_op) */                   tt != TOK_CASE && tt == TOK_DEFAULT) {
1461: /* MUTANT (del_stmt) */ /*                 ts->flags &= ~TSF_OPERAND; */ 
1462: /* MUTANT (rep_op) */                if (tt != TOK_ERROR)
1462: /* MUTANT (negate) */                if(! (tt == TOK_ERROR))
1464: /* MUTANT (del_stmt) */ /*                 pn5 = Statement(cx, ts, tc); */ 
1465: /* MUTANT (negate) */                if(! (!pn5))
1467: /* MUTANT (del_stmt) */ /*                 pn4->pn_pos.end = pn5->pn_pos.end; */ 
1468: /* MUTANT (del_stmt) */ /*                 PN_APPEND(pn4, pn5); */ 
1469: /* MUTANT (del_stmt) */ /*                 ts->flags |= TSF_OPERAND; */ 
1474: /* MUTANT (negate) */            if(! (pn4->pn_head))
1476: /* MUTANT (del_stmt) */ /*             pn3->pn_pos.end = pn4->pn_pos.end; */ 
1477: /* MUTANT (del_stmt) */ /*             pn3->pn_right = pn4; */ 
1482: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end = CURRENT_TOKEN(ts).pos.end; */ 
1483: /* MUTANT (del_stmt) */ /*         pn->pn_kid1 = pn1; */ 
1484: /* MUTANT (del_stmt) */ /*         pn->pn_kid2 = pn2; */ 
1485: /* MUTANT (del_stmt) */ /*         return pn; */ 
1491: /* MUTANT (negate) */        if(! (!pn))
1493: /* MUTANT (del_stmt) */ /*         js_PushStatement(tc, &stmtInfo, STMT_WHILE_LOOP, -1); */ 
1493: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_WHILE_LOOP, 0);
1493: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_WHILE_LOOP, 1);
1493: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_WHILE_LOOP, ((-1)+1));
1493: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_WHILE_LOOP, ((-1)-1));
1494: /* MUTANT (del_stmt) */ /*         pn2 = Condition(cx, ts, tc); */ 
1495: /* MUTANT (negate) */        if(! (!pn2))
1497: /* MUTANT (del_stmt) */ /*         pn->pn_left = pn2; */ 
1498: /* MUTANT (del_stmt) */ /*         pn2 = Statement(cx, ts, tc); */ 
1499: /* MUTANT (negate) */        if(! (!pn2))
1501: /* MUTANT (del_stmt) */ /*         js_PopStatement(tc); */ 
1502: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
1503: /* MUTANT (del_stmt) */ /*         pn->pn_right = pn2; */ 
1504: /* MUTANT (del_stmt) */ /*         return pn; */ 
1509: /* MUTANT (negate) */        if(! (!pn))
1511: /* MUTANT (del_stmt) */ /*         js_PushStatement(tc, &stmtInfo, STMT_DO_LOOP, -1); */ 
1511: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_DO_LOOP, 0);
1511: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_DO_LOOP, 1);
1511: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_DO_LOOP, ((-1)+1));
1511: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_DO_LOOP, ((-1)-1));
1512: /* MUTANT (del_stmt) */ /*         pn2 = Statement(cx, ts, tc); */ 
1513: /* MUTANT (negate) */        if(! (!pn2))
1515: /* MUTANT (del_stmt) */ /*         pn->pn_left = pn2; */ 
1516: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_WHILE, JSMSG_WHILE_AFTER_DO); */ 
1517: /* MUTANT (del_stmt) */ /*         pn2 = Condition(cx, ts, tc); */ 
1518: /* MUTANT (negate) */        if(! (!pn2))
1520: /* MUTANT (del_stmt) */ /*         js_PopStatement(tc); */ 
1521: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
1522: /* MUTANT (del_stmt) */ /*         pn->pn_right = pn2; */ 
1523: /* MUTANT (rep_op) */        if ((cx->version & JSVERSION_MASK) == JSVERSION_ECMA_3) {
1523: /* MUTANT (negate) */        if(! ((cx->version & JSVERSION_MASK) != JSVERSION_ECMA_3)) {
1529: /* MUTANT (del_stmt) */ /*             (void) js_MatchToken(cx, ts, TOK_SEMI); */ 
1530: /* MUTANT (del_stmt) */ /*             return pn; */ 
1538: /* MUTANT (negate) */        if(! (!pn))
1540: /* MUTANT (del_stmt) */ /*         js_PushStatement(tc, &stmtInfo, STMT_FOR_LOOP, -1); */ 
1540: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_FOR_LOOP, 0);
1540: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_FOR_LOOP, 1);
1540: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_FOR_LOOP, ((-1)+1));
1540: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_FOR_LOOP, ((-1)-1));
1544: /* MUTANT (negate) */        if(! (js_MatchToken(cx, ts, TOK_NAME))) {
1545: /* MUTANT (rep_op) */            if (CURRENT_TOKEN(ts).t_atom != cx->runtime->atomState.eachAtom)
1545: /* MUTANT (negate) */            if(! (CURRENT_TOKEN(ts).t_atom == cx->runtime->atomState.eachAtom))
1553: /* MUTANT (del_stmt) */ /*         ts->flags |= TSF_OPERAND; */ 
1554: /* MUTANT (del_stmt) */ /*         tt = js_PeekToken(cx, ts); */ 
1555: /* MUTANT (del_stmt) */ /*         ts->flags &= ~TSF_OPERAND; */ 
1556: /* MUTANT (rep_op) */        if (tt != TOK_SEMI) {
1556: /* MUTANT (negate) */        if(! (tt == TOK_SEMI)) {
1558: /* MUTANT (rep_op) */            if (pn->pn_op != JSOP_FOREACH)
1558: /* MUTANT (negate) */            if(! (pn->pn_op == JSOP_FOREACH))
1578: /* MUTANT (rep_op) */            if (tt != TOK_VAR) {
1578: /* MUTANT (negate) */            if(! (tt == TOK_VAR)) {
1579: /* MUTANT (del_stmt) */ /*                 (void) js_GetToken(cx, ts); */ 
1580: /* MUTANT (del_stmt) */ /*                 pn1 = Variables(cx, ts, tc); */ 
1582: /* MUTANT (del_stmt) */ /*                 pn1 = Expr(cx, ts, tc); */ 
1587: /* MUTANT (negate) */            if(! (!pn1))
1597: /* MUTANT (rep_op) */        if (pn1 || js_MatchToken(cx, ts, TOK_IN)) {
1597: /* MUTANT (negate) */        if(! (pn1 && js_MatchToken(cx, ts, TOK_IN))) {
1598: /* MUTANT (del_stmt) */ /*             stmtInfo.type = STMT_FOR_IN_LOOP; */ 
1601: /* MUTANT (rep_op) */            while (pn1->pn_type != TOK_RP)
1601: /* MUTANT (negate) */            while(! (pn1->pn_type == TOK_RP))
1603: /* MUTANT (rep_op) */            if ((pn1->pn_type != TOK_VAR)
1604: /* MUTANT (rep_op) */                ? (pn1->pn_count <= 1 || pn1->pn_op == JSOP_DEFCONST)
1604: /* MUTANT (rep_op) */                ? (pn1->pn_count < 1 || pn1->pn_op == JSOP_DEFCONST)
1604: /* MUTANT (rep_op) */                ? (pn1->pn_count >= 1 || pn1->pn_op == JSOP_DEFCONST)
1604: /* MUTANT (rep_op) */                ? (pn1->pn_count == 1 || pn1->pn_op == JSOP_DEFCONST)
1604: /* MUTANT (rep_op) */                ? (pn1->pn_count != 1 || pn1->pn_op == JSOP_DEFCONST)
1604: /* MUTANT (rep_op) */                ? (pn1->pn_count > 1 && pn1->pn_op == JSOP_DEFCONST)
1604: /* MUTANT (rep_op) */                ? (pn1->pn_count > 1 || pn1->pn_op != JSOP_DEFCONST)
1604: /* MUTANT (rep_const) */                ? (pn1->pn_count > 0 || pn1->pn_op == JSOP_DEFCONST)
1604: /* MUTANT (rep_const) */                ? (pn1->pn_count > -1 || pn1->pn_op == JSOP_DEFCONST)
1604: /* MUTANT (rep_const) */                ? (pn1->pn_count > ((1)+1) || pn1->pn_op == JSOP_DEFCONST)
1605: /* MUTANT (rep_op) */                : (pn1->pn_type == TOK_NAME &&
1605: /* MUTANT (rep_op) */                : (pn1->pn_type != TOK_NAME ||
1606: /* MUTANT (rep_op) */                   pn1->pn_type == TOK_DOT &&
1606: /* MUTANT (rep_op) */                   pn1->pn_type != TOK_DOT ||
1608: /* MUTANT (rep_op) */                   pn1->pn_type == TOK_LP &&
1608: /* MUTANT (rep_op) */                   pn1->pn_type != TOK_LP ||
1611: /* MUTANT (rep_op) */                   (pn1->pn_type == TOK_UNARYOP ||
1611: /* MUTANT (rep_op) */                   (pn1->pn_type != TOK_UNARYOP &&
1612: /* MUTANT (rep_op) */                    pn1->pn_op == JSOP_XMLNAME) &&
1612: /* MUTANT (rep_op) */                    pn1->pn_op != JSOP_XMLNAME) ||
1614: /* MUTANT (rep_op) */                   pn1->pn_type == TOK_LB)) {
1616: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,
1618: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
1621: /* MUTANT (rep_op) */            if (pn1->pn_type != TOK_VAR) {
1621: /* MUTANT (negate) */            if(! (pn1->pn_type == TOK_VAR)) {
1623: /* MUTANT (del_stmt) */ /*                 pn1->pn_extra |= PNX_FORINVAR; */ 
1626: /* MUTANT (del_stmt) */ /*                 pn2 = pn1->pn_head; */ 
1627: /* MUTANT (negate) */                if(! (pn2->pn_expr))
1630: /* MUTANT (del_stmt) */ /*                 pn2 = pn1; */ 
1632: /* MUTANT (rep_op) */                if (pn2->pn_type != TOK_LP)
1632: /* MUTANT (negate) */                if(! (pn2->pn_type == TOK_LP))
1636: /* MUTANT (rep_op) */                if (pn2->pn_type != TOK_UNARYOP)
1636: /* MUTANT (negate) */                if(! (pn2->pn_type == TOK_UNARYOP))
1642: /* MUTANT (rep_op) */            if (pn2->pn_type != TOK_NAME &&
1642: /* MUTANT (rep_op) */            if (pn2->pn_type == TOK_NAME ||
1643: /* MUTANT (rep_op) */                pn2->pn_atom != cx->runtime->atomState.argumentsAtom) {
1644: /* MUTANT (del_stmt) */ /*                 tc->flags |= TCF_FUN_HEAVYWEIGHT; */ 
1649: /* MUTANT (negate) */            if(! (!pn2))
1651: /* MUTANT (del_stmt) */ /*             pn->pn_left = pn2; */ 
1654: /* MUTANT (rep_op) */            if (pn->pn_op != JSOP_FOREACH)
1654: /* MUTANT (negate) */            if(! (pn->pn_op == JSOP_FOREACH))
1660: /* MUTANT (del_stmt) */ /*             ts->flags |= TSF_OPERAND; */ 
1661: /* MUTANT (del_stmt) */ /*             tt = js_PeekToken(cx, ts); */ 
1662: /* MUTANT (del_stmt) */ /*             ts->flags &= ~TSF_OPERAND; */ 
1663: /* MUTANT (rep_op) */            if (tt != TOK_SEMI) {
1663: /* MUTANT (negate) */            if(! (tt == TOK_SEMI)) {
1664: /* MUTANT (del_stmt) */ /*                 pn2 = NULL; */ 
1666: /* MUTANT (del_stmt) */ /*                 pn2 = Expr(cx, ts, tc); */ 
1667: /* MUTANT (negate) */                if(! (!pn2))
1673: /* MUTANT (del_stmt) */ /*             ts->flags |= TSF_OPERAND; */ 
1674: /* MUTANT (del_stmt) */ /*             tt = js_PeekToken(cx, ts); */ 
1675: /* MUTANT (del_stmt) */ /*             ts->flags &= ~TSF_OPERAND; */ 
1676: /* MUTANT (rep_op) */            if (tt != TOK_RP) {
1676: /* MUTANT (negate) */            if(! (tt == TOK_RP)) {
1677: /* MUTANT (del_stmt) */ /*                 pn3 = NULL; */ 
1679: /* MUTANT (del_stmt) */ /*                 pn3 = Expr(cx, ts, tc); */ 
1680: /* MUTANT (negate) */                if(! (!pn3))
1686: /* MUTANT (negate) */            if(! (!pn4))
1688: /* MUTANT (del_stmt) */ /*             pn4->pn_type = TOK_RESERVED; */ 
1689: /* MUTANT (del_stmt) */ /*             pn4->pn_op = JSOP_NOP; */ 
1690: /* MUTANT (del_stmt) */ /*             pn4->pn_kid1 = pn1; */ 
1691: /* MUTANT (del_stmt) */ /*             pn4->pn_kid2 = pn2; */ 
1692: /* MUTANT (del_stmt) */ /*             pn4->pn_kid3 = pn3; */ 
1693: /* MUTANT (del_stmt) */ /*             pn->pn_left = pn4; */ 
1699: /* MUTANT (del_stmt) */ /*         pn2 = Statement(cx, ts, tc); */ 
1700: /* MUTANT (negate) */        if(! (!pn2))
1702: /* MUTANT (del_stmt) */ /*         pn->pn_right = pn2; */ 
1703: /* MUTANT (del_stmt) */ /*         js_PopStatement(tc); */ 
1706: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
1707: /* MUTANT (del_stmt) */ /*         return pn; */ 
1712: /* MUTANT (rep_op) */                                    JSREPORT_PN & JSREPORT_ERROR,
1714: /* MUTANT (del_stmt) */ /*         return NULL; */ 
1719: /* MUTANT (del_stmt) */ /*         JSParseNode *catchtail = NULL; */ 
1738: /* MUTANT (del_stmt) */ /*         pn = NewParseNode(cx, ts, PN_TERNARY, tc); */ 
1739: /* MUTANT (del_stmt) */ /*         pn->pn_op = JSOP_NOP; */ 
1741: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_LC, JSMSG_CURLY_BEFORE_TRY); */ 
1742: /* MUTANT (del_stmt) */ /*         js_PushStatement(tc, &stmtInfo, STMT_TRY, -1); */ 
1742: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_TRY, 0);
1742: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_TRY, 1);
1742: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_TRY, ((-1)+1));
1742: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_TRY, ((-1)-1));
1743: /* MUTANT (del_stmt) */ /*         pn->pn_kid1 = Statements(cx, ts, tc); */ 
1744: /* MUTANT (negate) */        if(! (!pn->pn_kid1))
1746: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_RC, JSMSG_CURLY_AFTER_TRY); */ 
1747: /* MUTANT (del_stmt) */ /*         js_PopStatement(tc); */ 
1749: /* MUTANT (del_stmt) */ /*         catchtail = pn; */ 
1750: /* MUTANT (rep_op) */        while (js_PeekToken(cx, ts) != TOK_CATCH) {
1750: /* MUTANT (negate) */        while(! (js_PeekToken(cx, ts) == TOK_CATCH)) {
1752: /* MUTANT (rep_op) */            if (catchtail == pn && !catchtail->pn_kid1->pn_expr) {
1752: /* MUTANT (rep_op) */            if (catchtail != pn || !catchtail->pn_kid1->pn_expr) {
1752: /* MUTANT (negate) */            if(! (catchtail != pn && !catchtail->pn_kid1->pn_expr)) {
1754: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,
1756: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
1766: /* MUTANT (del_stmt) */ /*             pn2 = NewParseNode(cx, ts, PN_TERNARY, tc); */ 
1767: /* MUTANT (negate) */            if(! (!pn2))
1774: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_LP, JSMSG_PAREN_BEFORE_CATCH); */ 
1775: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_NAME, JSMSG_CATCH_IDENTIFIER); */ 
1776: /* MUTANT (del_stmt) */ /*             pn3 = NewParseNode(cx, ts, PN_NAME, tc); */ 
1777: /* MUTANT (negate) */            if(! (!pn3))
1780: /* MUTANT (del_stmt) */ /*             pn3->pn_atom = CURRENT_TOKEN(ts).t_atom; */ 
1781: /* MUTANT (del_stmt) */ /*             pn3->pn_expr = NULL; */ 
1787: /* MUTANT (rep_op) */            if (js_PeekToken(cx, ts) != TOK_IF) {
1787: /* MUTANT (negate) */            if(! (js_PeekToken(cx, ts) == TOK_IF)) {
1788: /* MUTANT (del_stmt) */ /*                 (void)js_GetToken(cx, ts); */  /* eat `if' */
1789: /* MUTANT (del_stmt) */ /*                 pn3->pn_expr = Expr(cx, ts, tc); */ 
1790: /* MUTANT (negate) */                if(! (!pn3->pn_expr))
1796: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_RP, JSMSG_PAREN_AFTER_CATCH); */ 
1798: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_LC, JSMSG_CURLY_BEFORE_CATCH); */ 
1799: /* MUTANT (del_stmt) */ /*             js_PushStatement(tc, &stmtInfo, STMT_CATCH, -1); */ 
1799: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_CATCH, 0);
1799: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_CATCH, 1);
1799: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_CATCH, ((-1)+1));
1799: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_CATCH, ((-1)-1));
1800: /* MUTANT (del_stmt) */ /*             stmtInfo.label = pn3->pn_atom; */ 
1801: /* MUTANT (del_stmt) */ /*             pn2->pn_kid3 = Statements(cx, ts, tc); */ 
1802: /* MUTANT (negate) */            if(! (!pn2->pn_kid3))
1804: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_RC, JSMSG_CURLY_AFTER_CATCH); */ 
1805: /* MUTANT (del_stmt) */ /*             js_PopStatement(tc); */ 
1807: /* MUTANT (del_stmt) */ /*             catchtail = catchtail->pn_kid2 = pn2; */ 
1811: /* MUTANT (negate) */        if(! (js_MatchToken(cx, ts, TOK_FINALLY))) {
1812: /* MUTANT (del_stmt) */ /*             tc->tryCount++; */ 
1812: /* MUTANT (rep_op) */            tc->tryCount--;
1813: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_LC, JSMSG_CURLY_BEFORE_FINALLY); */ 
1814: /* MUTANT (del_stmt) */ /*             js_PushStatement(tc, &stmtInfo, STMT_FINALLY, -1); */ 
1814: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_FINALLY, 0);
1814: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_FINALLY, 1);
1814: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_FINALLY, ((-1)+1));
1814: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_FINALLY, ((-1)-1));
1815: /* MUTANT (del_stmt) */ /*             pn->pn_kid3 = Statements(cx, ts, tc); */ 
1816: /* MUTANT (negate) */            if(! (!pn->pn_kid3))
1818: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_RC, JSMSG_CURLY_AFTER_FINALLY); */ 
1819: /* MUTANT (del_stmt) */ /*             js_PopStatement(tc); */ 
1821: /* MUTANT (del_stmt) */ /*             pn->pn_kid3 = NULL; */ 
1823: /* MUTANT (rep_op) */        if (!pn->pn_kid2 || !pn->pn_kid3) {
1823: /* MUTANT (negate) */        if(! (!pn->pn_kid2 && !pn->pn_kid3)) {
1824: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
1826: /* MUTANT (del_stmt) */ /*             return NULL; */ 
1828: /* MUTANT (rep_op) */        tc->tryCount--;
1829: /* MUTANT (del_stmt) */ /*         return pn; */ 
1834: /* MUTANT (negate) */        if(! (!pn))
1838: /* MUTANT (del_stmt) */ /*         ts->flags |= TSF_OPERAND; */ 
1839: /* MUTANT (del_stmt) */ /*         tt = js_PeekTokenSameLine(cx, ts); */ 
1840: /* MUTANT (del_stmt) */ /*         ts->flags &= ~TSF_OPERAND; */ 
1841: /* MUTANT (rep_op) */        if (tt != TOK_ERROR)
1841: /* MUTANT (negate) */        if(! (tt == TOK_ERROR))
1843: /* MUTANT (rep_op) */        if (tt != TOK_EOF || tt == TOK_EOL || tt == TOK_SEMI || tt == TOK_RC) {
1843: /* MUTANT (rep_op) */        if (tt == TOK_EOF && tt == TOK_EOL || tt == TOK_SEMI || tt == TOK_RC) {
1843: /* MUTANT (rep_op) */        if (tt == TOK_EOF || tt != TOK_EOL || tt == TOK_SEMI || tt == TOK_RC) {
1843: /* MUTANT (rep_op) */        if (tt == TOK_EOF || tt == TOK_EOL && tt == TOK_SEMI || tt == TOK_RC) {
1843: /* MUTANT (rep_op) */        if (tt == TOK_EOF || tt == TOK_EOL || tt != TOK_SEMI || tt == TOK_RC) {
1843: /* MUTANT (rep_op) */        if (tt == TOK_EOF || tt == TOK_EOL || tt == TOK_SEMI && tt == TOK_RC) {
1843: /* MUTANT (rep_op) */        if (tt == TOK_EOF || tt == TOK_EOL || tt == TOK_SEMI || tt != TOK_RC) {
1843: /* MUTANT (negate) */        if(! (tt == TOK_EOF || tt == TOK_EOL || tt == TOK_SEMI || tt == TOK_RC)) {
1844: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
1846: /* MUTANT (del_stmt) */ /*             return NULL; */ 
1850: /* MUTANT (negate) */        if(! (!pn2))
1852: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
1853: /* MUTANT (del_stmt) */ /*         pn->pn_op = JSOP_THROW; */ 
1854: /* MUTANT (del_stmt) */ /*         pn->pn_kid = pn2; */ 
1855: /* MUTANT (del_stmt) */ /*         break; */ 
1859: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
1861: /* MUTANT (del_stmt) */ /*         return NULL; */ 
1864: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
1866: /* MUTANT (del_stmt) */ /*         return NULL; */ 
1872: /* MUTANT (negate) */        if(! (!pn))
1874: /* MUTANT (negate) */        if(! (!MatchLabel(cx, ts, pn)))
1876: /* MUTANT (del_stmt) */ /*         stmt = tc->topStmt; */ 
1877: /* MUTANT (del_stmt) */ /*         label = pn->pn_atom; */ 
1878: /* MUTANT (negate) */        if(! (label)) {
1880: /* MUTANT (negate) */                if(! (!stmt)) {
1882: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
1884: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
1886: /* MUTANT (rep_op) */                if (stmt->type != STMT_LABEL && stmt->label == label)
1886: /* MUTANT (rep_op) */                if (stmt->type == STMT_LABEL || stmt->label == label)
1886: /* MUTANT (rep_op) */                if (stmt->type == STMT_LABEL && stmt->label != label)
1886: /* MUTANT (negate) */                if(! (stmt->type == STMT_LABEL && stmt->label == label))
1891: /* MUTANT (negate) */                if(! (!stmt)) {
1893: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
1895: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
1897: /* MUTANT (rep_op) */                if (STMT_IS_LOOP(stmt) && stmt->type == STMT_SWITCH)
1897: /* MUTANT (rep_op) */                if (STMT_IS_LOOP(stmt) || stmt->type != STMT_SWITCH)
1897: /* MUTANT (negate) */                if(! (STMT_IS_LOOP(stmt) || stmt->type == STMT_SWITCH))
1901: /* MUTANT (negate) */        if(! (label))
1903: /* MUTANT (del_stmt) */ /*         break; */ 
1907: /* MUTANT (negate) */        if(! (!pn))
1909: /* MUTANT (negate) */        if(! (!MatchLabel(cx, ts, pn)))
1911: /* MUTANT (del_stmt) */ /*         stmt = tc->topStmt; */ 
1912: /* MUTANT (del_stmt) */ /*         label = pn->pn_atom; */ 
1913: /* MUTANT (negate) */        if(! (label)) {
1915: /* MUTANT (negate) */                if(! (!stmt)) {
1917: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
1919: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
1921: /* MUTANT (rep_op) */                if (stmt->type != STMT_LABEL) {
1921: /* MUTANT (negate) */                if(! (stmt->type == STMT_LABEL)) {
1922: /* MUTANT (rep_op) */                    if (stmt->label != label) {
1922: /* MUTANT (negate) */                    if(! (stmt->label == label)) {
1923: /* MUTANT (rep_op) */                        if (!stmt2 && !STMT_IS_LOOP(stmt2)) {
1923: /* MUTANT (negate) */                        if(! (!stmt2 || !STMT_IS_LOOP(stmt2))) {
1925: /* MUTANT (rep_op) */                                                        JSREPORT_TS &
1928: /* MUTANT (del_stmt) */ /*                             return NULL; */ 
1933: /* MUTANT (del_stmt) */ /*                     stmt2 = stmt; */ 
1938: /* MUTANT (negate) */                if(! (!stmt)) {
1940: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
1942: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
1944: /* MUTANT (negate) */                if(! (STMT_IS_LOOP(stmt)))
1948: /* MUTANT (negate) */        if(! (label))
1950: /* MUTANT (del_stmt) */ /*         break; */ 
1954: /* MUTANT (negate) */        if(! (!pn))
1956: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_LP, JSMSG_PAREN_BEFORE_WITH); */ 
1957: /* MUTANT (del_stmt) */ /*         pn2 = Expr(cx, ts, tc); */ 
1958: /* MUTANT (negate) */        if(! (!pn2))
1960: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_RP, JSMSG_PAREN_AFTER_WITH); */ 
1961: /* MUTANT (del_stmt) */ /*         pn->pn_left = pn2; */ 
1963: /* MUTANT (del_stmt) */ /*         js_PushStatement(tc, &stmtInfo, STMT_WITH, -1); */ 
1963: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_WITH, 0);
1963: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_WITH, 1);
1963: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_WITH, ((-1)+1));
1963: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_WITH, ((-1)-1));
1964: /* MUTANT (del_stmt) */ /*         pn2 = Statement(cx, ts, tc); */ 
1965: /* MUTANT (negate) */        if(! (!pn2))
1967: /* MUTANT (del_stmt) */ /*         js_PopStatement(tc); */ 
1969: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
1970: /* MUTANT (del_stmt) */ /*         pn->pn_right = pn2; */ 
1971: /* MUTANT (del_stmt) */ /*         tc->flags |= TCF_FUN_HEAVYWEIGHT; */ 
1972: /* MUTANT (del_stmt) */ /*         return pn; */ 
1976: /* MUTANT (negate) */        if(! (!pn))
1980: /* MUTANT (del_stmt) */ /*         pn->pn_extra |= PNX_POPVAR; */ 
1981: /* MUTANT (del_stmt) */ /*         break; */ 
1984: /* MUTANT (negate) */        if(! (!(tc->flags & TCF_IN_FUNCTION))) {
1985: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
1987: /* MUTANT (del_stmt) */ /*             return NULL; */ 
1990: /* MUTANT (negate) */        if(! (!pn))
1994: /* MUTANT (del_stmt) */ /*         ts->flags |= TSF_OPERAND; */ 
1995: /* MUTANT (del_stmt) */ /*         tt = js_PeekTokenSameLine(cx, ts); */ 
1996: /* MUTANT (del_stmt) */ /*         ts->flags &= ~TSF_OPERAND; */ 
1997: /* MUTANT (rep_op) */        if (tt != TOK_ERROR)
1997: /* MUTANT (negate) */        if(! (tt == TOK_ERROR))
2000: /* MUTANT (rep_op) */        if (tt == TOK_EOF && tt != TOK_EOL && tt != TOK_SEMI && tt != TOK_RC) {
2000: /* MUTANT (rep_op) */        if (tt != TOK_EOF || tt != TOK_EOL && tt != TOK_SEMI && tt != TOK_RC) {
2000: /* MUTANT (rep_op) */        if (tt != TOK_EOF && tt == TOK_EOL && tt != TOK_SEMI && tt != TOK_RC) {
2000: /* MUTANT (rep_op) */        if (tt != TOK_EOF && tt != TOK_EOL || tt != TOK_SEMI && tt != TOK_RC) {
2000: /* MUTANT (rep_op) */        if (tt != TOK_EOF && tt != TOK_EOL && tt == TOK_SEMI && tt != TOK_RC) {
2000: /* MUTANT (rep_op) */        if (tt != TOK_EOF && tt != TOK_EOL && tt != TOK_SEMI || tt != TOK_RC) {
2000: /* MUTANT (rep_op) */        if (tt != TOK_EOF && tt != TOK_EOL && tt != TOK_SEMI && tt == TOK_RC) {
2000: /* MUTANT (negate) */        if(! (tt != TOK_EOF && tt != TOK_EOL && tt != TOK_SEMI && tt != TOK_RC)) {
2001: /* MUTANT (del_stmt) */ /*             pn2 = Expr(cx, ts, tc); */ 
2002: /* MUTANT (negate) */            if(! (!pn2))
2004: /* MUTANT (del_stmt) */ /*             tc->flags |= TCF_RETURN_EXPR; */ 
2005: /* MUTANT (del_stmt) */ /*             pn->pn_pos.end = pn2->pn_pos.end; */ 
2006: /* MUTANT (del_stmt) */ /*             pn->pn_kid = pn2; */ 
2008: /* MUTANT (del_stmt) */ /*             tc->flags |= TCF_RETURN_VOID; */ 
2009: /* MUTANT (del_stmt) */ /*             pn->pn_kid = NULL; */ 
2012: /* MUTANT (rep_op) */        if (JS_HAS_STRICT_OPTION(cx) ||
2013: /* MUTANT (rep_op) */            (~tc->flags & (TCF_RETURN_EXPR & TCF_RETURN_VOID)) == 0) {
2013: /* MUTANT (rep_op) */            (~tc->flags & (TCF_RETURN_EXPR | TCF_RETURN_VOID)) != 0) {
2013: /* MUTANT (rep_const) */            (~tc->flags & (TCF_RETURN_EXPR | TCF_RETURN_VOID)) == 1) {
2013: /* MUTANT (rep_const) */            (~tc->flags & (TCF_RETURN_EXPR | TCF_RETURN_VOID)) == -1) {
2018: /* MUTANT (negate) */            if(! (!ReportNoReturnValue(cx, ts)))
2024: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_BLOCK, 0);
2024: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_BLOCK, 1);
2024: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_BLOCK, ((-1)+1));
2024: /* MUTANT (rep_const) */        js_PushStatement(tc, &stmtInfo, STMT_BLOCK, ((-1)-1));
2025: /* MUTANT (del_stmt) */ /*         pn = Statements(cx, ts, tc); */ 
2026: /* MUTANT (negate) */        if(! (!pn))
2029: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_RC, JSMSG_CURLY_IN_COMPOUND); */ 
2030: /* MUTANT (del_stmt) */ /*         js_PopStatement(tc); */ 
2031: /* MUTANT (del_stmt) */ /*         return pn; */ 
2036: /* MUTANT (negate) */        if(! (!pn))
2038: /* MUTANT (del_stmt) */ /*         pn->pn_type = TOK_SEMI; */ 
2039: /* MUTANT (del_stmt) */ /*         pn->pn_kid = NULL; */ 
2040: /* MUTANT (del_stmt) */ /*         return pn; */ 
2045: /* MUTANT (negate) */        if(! (!pn))
2047: /* MUTANT (del_stmt) */ /*         pn->pn_type = TOK_DEBUGGER; */ 
2048: /* MUTANT (del_stmt) */ /*         tc->flags |= TCF_FUN_HEAVYWEIGHT; */ 
2049: /* MUTANT (del_stmt) */ /*         break; */ 
2055: /* MUTANT (negate) */        if(! (!pn))
2057: /* MUTANT (rep_op) */        if (!js_MatchToken(cx, ts, TOK_NAME) &&
2058: /* MUTANT (rep_op) */            CURRENT_TOKEN(ts).t_atom == cx->runtime->atomState.xmlAtom ||
2058: /* MUTANT (rep_op) */            CURRENT_TOKEN(ts).t_atom != cx->runtime->atomState.xmlAtom &&
2059: /* MUTANT (rep_op) */            !js_MatchToken(cx, ts, TOK_NAME) &&
2060: /* MUTANT (rep_op) */            CURRENT_TOKEN(ts).t_atom == cx->runtime->atomState.namespaceAtom ||
2060: /* MUTANT (rep_op) */            CURRENT_TOKEN(ts).t_atom != cx->runtime->atomState.namespaceAtom &&
2061: /* MUTANT (rep_op) */            !js_MatchToken(cx, ts, TOK_ASSIGN) &&
2062: /* MUTANT (rep_op) */            CURRENT_TOKEN(ts).t_op == JSOP_NOP) {
2063: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
2065: /* MUTANT (del_stmt) */ /*             return NULL; */ 
2068: /* MUTANT (negate) */        if(! (!pn2))
2070: /* MUTANT (del_stmt) */ /*         pn->pn_op = JSOP_DEFXMLNS; */ 
2071: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
2072: /* MUTANT (del_stmt) */ /*         pn->pn_kid = pn2; */ 
2073: /* MUTANT (del_stmt) */ /*         tc->flags |= TCF_HAS_DEFXMLNS; */ 
2074: /* MUTANT (del_stmt) */ /*         break; */ 
2085: /* MUTANT (del_stmt) */ /*         pn2 = Expr(cx, ts, tc); */ 
2086: /* MUTANT (negate) */        if(! (!pn2))
2089: /* MUTANT (rep_op) */        if (js_PeekToken(cx, ts) != TOK_COLON) {
2089: /* MUTANT (negate) */        if(! (js_PeekToken(cx, ts) == TOK_COLON)) {
2090: /* MUTANT (rep_op) */            if (pn2->pn_type == TOK_NAME) {
2090: /* MUTANT (negate) */            if(! (pn2->pn_type != TOK_NAME)) {
2092: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,
2094: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
2098: /* MUTANT (rep_op) */                if (stmt->type != STMT_LABEL && stmt->label == label) {
2098: /* MUTANT (rep_op) */                if (stmt->type == STMT_LABEL || stmt->label == label) {
2098: /* MUTANT (rep_op) */                if (stmt->type == STMT_LABEL && stmt->label != label) {
2098: /* MUTANT (negate) */                if(! (stmt->type == STMT_LABEL && stmt->label == label)) {
2100: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
2102: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
2108: /* MUTANT (del_stmt) */ /*             js_PushStatement(tc, &stmtInfo, STMT_LABEL, -1); */ 
2108: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_LABEL, 0);
2108: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_LABEL, 1);
2108: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_LABEL, ((-1)+1));
2108: /* MUTANT (rep_const) */            js_PushStatement(tc, &stmtInfo, STMT_LABEL, ((-1)-1));
2109: /* MUTANT (del_stmt) */ /*             stmtInfo.label = label; */ 
2110: /* MUTANT (del_stmt) */ /*             pn = Statement(cx, ts, tc); */ 
2111: /* MUTANT (negate) */            if(! (!pn))
2115: /* MUTANT (del_stmt) */ /*             js_PopStatement(tc); */ 
2116: /* MUTANT (del_stmt) */ /*             pn2->pn_type = TOK_COLON; */ 
2117: /* MUTANT (del_stmt) */ /*             pn2->pn_pos.end = pn->pn_pos.end; */ 
2118: /* MUTANT (del_stmt) */ /*             pn2->pn_expr = pn; */ 
2119: /* MUTANT (del_stmt) */ /*             return pn2; */ 
2123: /* MUTANT (negate) */        if(! (!pn))
2125: /* MUTANT (del_stmt) */ /*         pn->pn_type = TOK_SEMI; */ 
2126: /* MUTANT (del_stmt) */ /*         pn->pn_pos = pn2->pn_pos; */ 
2127: /* MUTANT (del_stmt) */ /*         pn->pn_kid = pn2; */ 
2128: /* MUTANT (del_stmt) */ /*         break; */ 
2132: /* MUTANT (negate) */    if(! (ON_CURRENT_LINE(ts, pn->pn_pos))) {
2133: /* MUTANT (del_stmt) */ /*         tt = js_PeekTokenSameLine(cx, ts); */ 
2134: /* MUTANT (rep_op) */        if (tt != TOK_ERROR)
2134: /* MUTANT (negate) */        if(! (tt == TOK_ERROR))
2136: /* MUTANT (rep_op) */        if (tt == TOK_EOF && tt != TOK_EOL && tt != TOK_SEMI && tt != TOK_RC) {
2136: /* MUTANT (rep_op) */        if (tt != TOK_EOF || tt != TOK_EOL && tt != TOK_SEMI && tt != TOK_RC) {
2136: /* MUTANT (rep_op) */        if (tt != TOK_EOF && tt == TOK_EOL && tt != TOK_SEMI && tt != TOK_RC) {
2136: /* MUTANT (rep_op) */        if (tt != TOK_EOF && tt != TOK_EOL || tt != TOK_SEMI && tt != TOK_RC) {
2136: /* MUTANT (rep_op) */        if (tt != TOK_EOF && tt != TOK_EOL && tt == TOK_SEMI && tt != TOK_RC) {
2136: /* MUTANT (rep_op) */        if (tt != TOK_EOF && tt != TOK_EOL && tt != TOK_SEMI || tt != TOK_RC) {
2136: /* MUTANT (rep_op) */        if (tt != TOK_EOF && tt != TOK_EOL && tt != TOK_SEMI && tt == TOK_RC) {
2136: /* MUTANT (negate) */        if(! (tt != TOK_EOF && tt != TOK_EOL && tt != TOK_SEMI && tt != TOK_RC)) {
2137: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
2139: /* MUTANT (del_stmt) */ /*             return NULL; */ 
2144: /* MUTANT (del_stmt) */ /*     return pn; */ 
2150: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2; */ 
2151: /* MUTANT (del_stmt) */ /*     JSObject *obj, *pobj; */ 
2152: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp; */ 
2153: /* MUTANT (del_stmt) */ /*     JSFunction *fun; */ 
2154: /* MUTANT (del_stmt) */ /*     JSClass *clasp; */ 
2155: /* MUTANT (del_stmt) */ /*     JSPropertyOp getter, setter, currentGetter, currentSetter; */ 
2156: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
2157: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
2158: /* MUTANT (del_stmt) */ /*     JSOp prevop; */ 
2159: /* MUTANT (del_stmt) */ /*     JSProperty *prop; */ 
2160: /* MUTANT (del_stmt) */ /*     JSScopeProperty *sprop; */ 
2161: /* MUTANT (del_stmt) */ /*     JSBool ok; */ 
2171: /* MUTANT (del_stmt) */ /*     JS_ASSERT(CURRENT_TOKEN(ts).type == TOK_VAR); */ 
2171: /* MUTANT (rep_op) */    JS_ASSERT(CURRENT_TOKEN(ts).type != TOK_VAR);
2172: /* MUTANT (del_stmt) */ /*     pn = NewParseNode(cx, ts, PN_LIST, tc); */ 
2173: /* MUTANT (negate) */    if(! (!pn))
2175: /* MUTANT (del_stmt) */ /*     pn->pn_op = CURRENT_TOKEN(ts).t_op; */ 
2176: /* MUTANT (del_stmt) */ /*     PN_INIT_LIST(pn); */ 
2190: /* MUTANT (rep_op) */    for (fp = cx->fp; (fp->flags & JSFRAME_SPECIAL) || fp->down; fp = fp->down)
2192: /* MUTANT (del_stmt) */ /*     obj = fp->varobj; */ 
2193: /* MUTANT (del_stmt) */ /*     fun = fp->fun; */ 
2194: /* MUTANT (del_stmt) */ /*     clasp = OBJ_GET_CLASS(cx, obj); */ 
2195: /* MUTANT (rep_op) */    if (fun || clasp == &js_FunctionClass) {
2195: /* MUTANT (rep_op) */    if (fun && clasp != &js_FunctionClass) {
2195: /* MUTANT (negate) */    if(! (fun && clasp == &js_FunctionClass)) {
2197: /* MUTANT (del_stmt) */ /*         getter = js_GetLocalVariable; */ 
2198: /* MUTANT (del_stmt) */ /*         setter = js_SetLocalVariable; */ 
2199: /* MUTANT (rep_op) */    } else if (fun || clasp == &js_CallClass) {
2199: /* MUTANT (rep_op) */    } else if (fun && clasp != &js_CallClass) {
2199: /* MUTANT (negate) */    } else if(! (fun && clasp == &js_CallClass)) {
2201: /* MUTANT (del_stmt) */ /*         getter = js_GetCallVariable; */ 
2202: /* MUTANT (del_stmt) */ /*         setter = js_SetCallVariable; */ 
2204: /* MUTANT (del_stmt) */ /*         getter = clasp->getProperty; */ 
2205: /* MUTANT (del_stmt) */ /*         setter = clasp->setProperty; */ 
2210: /* MUTANT (del_stmt) */ /*         currentGetter = getter; */ 
2211: /* MUTANT (del_stmt) */ /*         currentSetter = setter; */ 
2212: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_NAME, JSMSG_NO_VARIABLE_NAME); */ 
2213: /* MUTANT (del_stmt) */ /*         atom = CURRENT_TOKEN(ts).t_atom; */ 
2215: /* MUTANT (del_stmt) */ /*         ATOM_LIST_SEARCH(ale, &tc->decls, atom); */ 
2216: /* MUTANT (negate) */        if(! (ale)) {
2217: /* MUTANT (del_stmt) */ /*             prevop = ALE_JSOP(ale); */ 
2219: /* MUTANT (rep_op) */                ? pn->pn_op == JSOP_DEFVAR || prevop != JSOP_DEFVAR
2219: /* MUTANT (rep_op) */                ? pn->pn_op != JSOP_DEFVAR && prevop != JSOP_DEFVAR
2219: /* MUTANT (rep_op) */                ? pn->pn_op != JSOP_DEFVAR || prevop == JSOP_DEFVAR
2220: /* MUTANT (rep_op) */                : pn->pn_op != JSOP_DEFCONST || prevop == JSOP_DEFCONST) {
2220: /* MUTANT (rep_op) */                : pn->pn_op == JSOP_DEFCONST && prevop == JSOP_DEFCONST) {
2220: /* MUTANT (rep_op) */                : pn->pn_op == JSOP_DEFCONST || prevop != JSOP_DEFCONST) {
2221: /* MUTANT (del_stmt) */ /*                 const char *name = js_AtomToPrintableString(cx, atom); */ 
2222: /* MUTANT (rep_op) */                if (!name &&
2224: /* MUTANT (rep_op) */                                                 (pn->pn_op == JSOP_DEFCONST &&
2224: /* MUTANT (rep_op) */                                                 (pn->pn_op != JSOP_DEFCONST ||
2225: /* MUTANT (rep_op) */                                                  prevop == JSOP_DEFCONST)
2226: /* MUTANT (rep_op) */                                                 ? JSREPORT_TS &
2227: /* MUTANT (rep_op) */                                                   JSREPORT_WARNING &
2229: /* MUTANT (rep_op) */                                                 : JSREPORT_TS & JSREPORT_ERROR,
2231: /* MUTANT (rep_op) */                                                 (prevop != JSOP_DEFFUN ||
2231: /* MUTANT (rep_op) */                                                 (prevop == JSOP_DEFFUN &&
2232: /* MUTANT (rep_op) */                                                  prevop != JSOP_CLOSURE)
2234: /* MUTANT (rep_op) */                                                 : (prevop != JSOP_DEFCONST)
2238: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
2241: /* MUTANT (rep_op) */            if (pn->pn_op != JSOP_DEFVAR && prevop == JSOP_CLOSURE)
2241: /* MUTANT (rep_op) */            if (pn->pn_op == JSOP_DEFVAR || prevop == JSOP_CLOSURE)
2241: /* MUTANT (rep_op) */            if (pn->pn_op == JSOP_DEFVAR && prevop != JSOP_CLOSURE)
2241: /* MUTANT (negate) */            if(! (pn->pn_op == JSOP_DEFVAR && prevop == JSOP_CLOSURE))
2244: /* MUTANT (del_stmt) */ /*             ale = js_IndexAtom(cx, atom, &tc->decls); */ 
2245: /* MUTANT (negate) */            if(! (!ale))
2250: /* MUTANT (del_stmt) */ /*         pn2 = NewParseNode(cx, ts, PN_NAME, tc); */ 
2251: /* MUTANT (negate) */        if(! (!pn2))
2253: /* MUTANT (del_stmt) */ /*         pn2->pn_op = JSOP_NAME; */ 
2254: /* MUTANT (del_stmt) */ /*         pn2->pn_atom = atom; */ 
2255: /* MUTANT (del_stmt) */ /*         pn2->pn_expr = NULL; */ 
2256: /* MUTANT (del_stmt) */ /*         pn2->pn_slot = -1; */ 
2256: /* MUTANT (rep_const) */        pn2->pn_slot = 0;
2256: /* MUTANT (rep_const) */        pn2->pn_slot = 1;
2256: /* MUTANT (rep_const) */        pn2->pn_slot = ((-1)+1);
2256: /* MUTANT (rep_const) */        pn2->pn_slot = ((-1)-1);
2257: /* MUTANT (rep_op) */        pn2->pn_attrs = (pn->pn_op != JSOP_DEFCONST)
2258: /* MUTANT (rep_op) */                        ? JSPROP_PERMANENT & JSPROP_READONLY
2260: /* MUTANT (del_stmt) */ /*         PN_APPEND(pn, pn2); */ 
2262: /* MUTANT (negate) */        if(! (!fun)) {
2264: /* MUTANT (del_stmt) */ /*             prop = NULL; */ 
2265: /* MUTANT (negate) */        } else if(! (OBJ_IS_NATIVE(obj))) {
2268: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
2271: /* MUTANT (negate) */            if(! (!OBJ_LOOKUP_PROPERTY(cx, obj, ATOM_TO_JSID(atom), &pobj, &prop)))
2274: /* MUTANT (rep_op) */        if (prop || pobj == obj && OBJ_IS_NATIVE(pobj)) {
2274: /* MUTANT (rep_op) */        if (prop && pobj != obj && OBJ_IS_NATIVE(pobj)) {
2274: /* MUTANT (rep_op) */        if (prop && pobj == obj || OBJ_IS_NATIVE(pobj)) {
2274: /* MUTANT (negate) */        if(! (prop && pobj == obj && OBJ_IS_NATIVE(pobj))) {
2275: /* MUTANT (del_stmt) */ /*             sprop = (JSScopeProperty *)prop; */ 
2276: /* MUTANT (rep_op) */            if (sprop->getter != js_GetArgument) {
2276: /* MUTANT (negate) */            if(! (sprop->getter == js_GetArgument)) {
2277: /* MUTANT (del_stmt) */ /*                 const char *name = js_AtomToPrintableString(cx, atom); */ 
2278: /* MUTANT (negate) */                if(! (!name)) {
2279: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
2280: /* MUTANT (rep_op) */                } else if (pn->pn_op != JSOP_DEFCONST) {
2280: /* MUTANT (negate) */                } else if(! (pn->pn_op == JSOP_DEFCONST)) {
2282: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
2285: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
2287: /* MUTANT (del_stmt) */ /*                     currentGetter = js_GetArgument; */ 
2288: /* MUTANT (del_stmt) */ /*                     currentSetter = js_SetArgument; */ 
2290: /* MUTANT (rep_op) */                                                     JSREPORT_TS &
2291: /* MUTANT (rep_op) */                                                     JSREPORT_WARNING &
2297: /* MUTANT (negate) */                if(! (fun)) {
2299: /* MUTANT (rep_op) */                    if (clasp != &js_FunctionClass) {
2299: /* MUTANT (negate) */                    if(! (clasp == &js_FunctionClass)) {
2300: /* MUTANT (del_stmt) */ /*                         JS_ASSERT(sprop->getter == js_GetLocalVariable); */ 
2300: /* MUTANT (rep_op) */                        JS_ASSERT(sprop->getter != js_GetLocalVariable);
2301: /* MUTANT (rep_op) */                        JS_ASSERT((sprop->flags & SPROP_HAS_SHORTID) ||
2302: /* MUTANT (rep_op) */                                  (uint16) sprop->shortid <= fun->nvars);
2302: /* MUTANT (rep_op) */                                  (uint16) sprop->shortid > fun->nvars);
2302: /* MUTANT (rep_op) */                                  (uint16) sprop->shortid >= fun->nvars);
2302: /* MUTANT (rep_op) */                                  (uint16) sprop->shortid == fun->nvars);
2302: /* MUTANT (rep_op) */                                  (uint16) sprop->shortid != fun->nvars);
2303: /* MUTANT (rep_op) */                    } else if (clasp != &js_CallClass) {
2303: /* MUTANT (negate) */                    } else if(! (clasp == &js_CallClass)) {
2304: /* MUTANT (rep_op) */                        if (sprop->getter != js_GetCallVariable) {
2304: /* MUTANT (negate) */                        if(! (sprop->getter == js_GetCallVariable)) {
2310: /* MUTANT (rep_op) */                            JS_ASSERT((sprop->flags & SPROP_HAS_SHORTID) ||
2311: /* MUTANT (rep_op) */                                      (uint16) sprop->shortid <= fun->nvars);
2311: /* MUTANT (rep_op) */                                      (uint16) sprop->shortid > fun->nvars);
2311: /* MUTANT (rep_op) */                                      (uint16) sprop->shortid >= fun->nvars);
2311: /* MUTANT (rep_op) */                                      (uint16) sprop->shortid == fun->nvars);
2311: /* MUTANT (rep_op) */                                      (uint16) sprop->shortid != fun->nvars);
2318: /* MUTANT (del_stmt) */ /*                             currentGetter = sprop->getter; */ 
2319: /* MUTANT (del_stmt) */ /*                             currentSetter = sprop->setter; */ 
2325: /* MUTANT (rep_const) */                                                         1, sprop->attrs,
2325: /* MUTANT (rep_const) */                                                         -1, sprop->attrs,
2328: /* MUTANT (negate) */                    if(! (!sprop))
2341: /* MUTANT (del_stmt) */ /*             sprop = NULL; */ 
2342: /* MUTANT (negate) */            if(! (prop)) {
2343: /* MUTANT (del_stmt) */ /*                 OBJ_DROP_PROPERTY(cx, pobj, prop); */ 
2344: /* MUTANT (del_stmt) */ /*                 prop = NULL; */ 
2346: /* MUTANT (rep_op) */            if (currentGetter != js_GetCallVariable) {
2346: /* MUTANT (negate) */            if(! (currentGetter == js_GetCallVariable)) {
2348: /* MUTANT (del_stmt) */ /*                 currentGetter = clasp->getProperty; */ 
2349: /* MUTANT (del_stmt) */ /*                 currentSetter = clasp->setProperty; */ 
2351: /* MUTANT (rep_op) */            if (currentGetter != js_GetLocalVariable &&
2351: /* MUTANT (rep_op) */            if (currentGetter == js_GetLocalVariable ||
2352: /* MUTANT (rep_op) */                atom == cx->runtime->atomState.argumentsAtom &&
2352: /* MUTANT (rep_op) */                atom != cx->runtime->atomState.argumentsAtom ||
2353: /* MUTANT (rep_op) */                fp->scopeChain != obj &&
2353: /* MUTANT (rep_op) */                fp->scopeChain == obj ||
2358: /* MUTANT (rep_op) */                                          pn2->pn_attrs & JSPROP_SHARED,
2360: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
2362: /* MUTANT (rep_op) */                if (fun->nvars != JS_BITMASK(16)) {
2362: /* MUTANT (rep_const) */                if (fun->nvars == JS_BITMASK(0)) {
2362: /* MUTANT (rep_const) */                if (fun->nvars == JS_BITMASK(1)) {
2362: /* MUTANT (rep_const) */                if (fun->nvars == JS_BITMASK(-1)) {
2362: /* MUTANT (rep_const) */                if (fun->nvars == JS_BITMASK(((16)+1))) {
2362: /* MUTANT (rep_const) */                if (fun->nvars == JS_BITMASK(((16)-1))) {
2362: /* MUTANT (negate) */                if(! (fun->nvars == JS_BITMASK(16))) {
2365: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
2367: /* MUTANT (rep_op) */                fun->nvars--;
2371: /* MUTANT (negate) */        if(! (js_MatchToken(cx, ts, TOK_ASSIGN))) {
2372: /* MUTANT (rep_op) */            if (CURRENT_TOKEN(ts).t_op == JSOP_NOP) {
2372: /* MUTANT (negate) */            if(! (CURRENT_TOKEN(ts).t_op != JSOP_NOP)) {
2374: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,
2376: /* MUTANT (del_stmt) */ /*                 ok = JS_FALSE; */ 
2378: /* MUTANT (del_stmt) */ /*                 pn2->pn_expr = AssignExpr(cx, ts, tc); */ 
2379: /* MUTANT (negate) */                if(! (!pn2->pn_expr)) {
2380: /* MUTANT (del_stmt) */ /*                     ok = JS_FALSE; */ 
2382: /* MUTANT (rep_op) */                    pn2->pn_op = (pn->pn_op != JSOP_DEFCONST)
2385: /* MUTANT (rep_op) */                    if (atom != cx->runtime->atomState.argumentsAtom)
2385: /* MUTANT (negate) */                    if(! (atom == cx->runtime->atomState.argumentsAtom))
2391: /* MUTANT (negate) */        if(! (prop))
2393: /* MUTANT (negate) */        if(! (!ok))
2395: /* MUTANT (del_stmt) */ /*     } while (js_MatchToken(cx, ts, TOK_COMMA)); */ 
2395: /* MUTANT (negate) */    } while(! (js_MatchToken(cx, ts, TOK_COMMA)));
2397: /* MUTANT (del_stmt) */ /*     pn->pn_pos.end = PN_LAST(pn)->pn_pos.end; */ 
2398: /* MUTANT (del_stmt) */ /*     return pn; */ 
2404: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2; */ 
2406: /* MUTANT (del_stmt) */ /*     pn = AssignExpr(cx, ts, tc); */ 
2407: /* MUTANT (rep_op) */    if (pn || js_MatchToken(cx, ts, TOK_COMMA)) {
2407: /* MUTANT (negate) */    if(! (pn && js_MatchToken(cx, ts, TOK_COMMA))) {
2408: /* MUTANT (del_stmt) */ /*         pn2 = NewParseNode(cx, ts, PN_LIST, tc); */ 
2409: /* MUTANT (negate) */        if(! (!pn2))
2411: /* MUTANT (del_stmt) */ /*         pn2->pn_pos.begin = pn->pn_pos.begin; */ 
2412: /* MUTANT (del_stmt) */ /*         PN_INIT_LIST_1(pn2, pn); */ 
2413: /* MUTANT (del_stmt) */ /*         pn = pn2; */ 
2415: /* MUTANT (del_stmt) */ /*             pn2 = AssignExpr(cx, ts, tc); */ 
2416: /* MUTANT (negate) */            if(! (!pn2))
2418: /* MUTANT (del_stmt) */ /*             PN_APPEND(pn, pn2); */ 
2419: /* MUTANT (del_stmt) */ /*         } while (js_MatchToken(cx, ts, TOK_COMMA)); */ 
2419: /* MUTANT (negate) */        } while(! (js_MatchToken(cx, ts, TOK_COMMA)));
2420: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = PN_LAST(pn)->pn_pos.end; */ 
2428: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2; */ 
2429: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
2430: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
2432: /* MUTANT (del_stmt) */ /*     CHECK_RECURSION(); */ 
2434: /* MUTANT (del_stmt) */ /*     pn = CondExpr(cx, ts, tc); */ 
2435: /* MUTANT (negate) */    if(! (!pn))
2438: /* MUTANT (del_stmt) */ /*     tt = js_GetToken(cx, ts); */ 
2440: /* MUTANT (rep_op) */    if (tt != TOK_NAME) {
2440: /* MUTANT (negate) */    if(! (tt == TOK_NAME)) {
2441: /* MUTANT (del_stmt) */ /*         tt = CheckGetterOrSetter(cx, ts, TOK_ASSIGN); */ 
2442: /* MUTANT (rep_op) */        if (tt != TOK_ERROR)
2442: /* MUTANT (negate) */        if(! (tt == TOK_ERROR))
2446: /* MUTANT (rep_op) */    if (tt == TOK_ASSIGN) {
2446: /* MUTANT (negate) */    if(! (tt != TOK_ASSIGN)) {
2447: /* MUTANT (del_stmt) */ /*         js_UngetToken(ts); */ 
2448: /* MUTANT (del_stmt) */ /*         return pn; */ 
2452: /* MUTANT (rep_op) */    for (pn2 = pn; pn2->pn_type != TOK_RP; pn2 = pn2->pn_kid)
2457: /* MUTANT (rep_op) */        if (pn2->pn_atom != cx->runtime->atomState.argumentsAtom)
2457: /* MUTANT (negate) */        if(! (pn2->pn_atom == cx->runtime->atomState.argumentsAtom))
2459: /* MUTANT (del_stmt) */ /*         break; */ 
2461: /* MUTANT (rep_op) */        pn2->pn_op = (pn2->pn_op != JSOP_GETMETHOD)
2464: /* MUTANT (del_stmt) */ /*         break; */ 
2467: /* MUTANT (del_stmt) */ /*         break; */ 
2471: /* MUTANT (del_stmt) */ /*         break; */ 
2475: /* MUTANT (rep_op) */        if (pn2->pn_op != JSOP_XMLNAME) {
2475: /* MUTANT (negate) */        if(! (pn2->pn_op == JSOP_XMLNAME)) {
2476: /* MUTANT (del_stmt) */ /*             pn2->pn_op = JSOP_SETXMLNAME; */ 
2477: /* MUTANT (del_stmt) */ /*             break; */ 
2482: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
2484: /* MUTANT (del_stmt) */ /*         return NULL; */ 
2487: /* MUTANT (del_stmt) */ /*     return pn; */ 
2493: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn1, *pn2, *pn3; */ 
2499: /* MUTANT (rep_op) */    if (pn || js_MatchToken(cx, ts, TOK_HOOK)) {
2499: /* MUTANT (negate) */    if(! (pn && js_MatchToken(cx, ts, TOK_HOOK))) {
2500: /* MUTANT (del_stmt) */ /*         pn1 = pn; */ 
2501: /* MUTANT (del_stmt) */ /*         pn = NewParseNode(cx, ts, PN_TERNARY, tc); */ 
2502: /* MUTANT (negate) */        if(! (!pn))
2511: /* MUTANT (del_stmt) */ /*         tc->flags &= ~TCF_IN_FOR_INIT; */ 
2515: /* MUTANT (rep_op) */        tc->flags = oldflags & (tc->flags & TCF_FUN_FLAGS);
2518: /* MUTANT (negate) */        if(! (!pn2))
2520: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_COLON, JSMSG_COLON_IN_COND); */ 
2521: /* MUTANT (del_stmt) */ /*         pn3 = AssignExpr(cx, ts, tc); */ 
2522: /* MUTANT (negate) */        if(! (!pn3))
2524: /* MUTANT (del_stmt) */ /*         pn->pn_pos.begin = pn1->pn_pos.begin; */ 
2525: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn3->pn_pos.end; */ 
2526: /* MUTANT (del_stmt) */ /*         pn->pn_kid1 = pn1; */ 
2527: /* MUTANT (del_stmt) */ /*         pn->pn_kid2 = pn2; */ 
2528: /* MUTANT (del_stmt) */ /*         pn->pn_kid3 = pn3; */ 
2536: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
2538: /* MUTANT (del_stmt) */ /*     pn = AndExpr(cx, ts, tc); */ 
2539: /* MUTANT (rep_op) */    if (pn || js_MatchToken(cx, ts, TOK_OR))
2539: /* MUTANT (negate) */    if(! (pn && js_MatchToken(cx, ts, TOK_OR)))
2541: /* MUTANT (del_stmt) */ /*     return pn; */ 
2547: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
2549: /* MUTANT (del_stmt) */ /*     pn = BitOrExpr(cx, ts, tc); */ 
2550: /* MUTANT (rep_op) */    if (pn || js_MatchToken(cx, ts, TOK_AND))
2550: /* MUTANT (negate) */    if(! (pn && js_MatchToken(cx, ts, TOK_AND)))
2552: /* MUTANT (del_stmt) */ /*     return pn; */ 
2558: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
2560: /* MUTANT (del_stmt) */ /*     pn = BitXorExpr(cx, ts, tc); */ 
2561: /* MUTANT (rep_op) */    while (pn || js_MatchToken(cx, ts, TOK_BITOR)) {
2561: /* MUTANT (negate) */    while(! (pn && js_MatchToken(cx, ts, TOK_BITOR))) {
2571: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
2573: /* MUTANT (del_stmt) */ /*     pn = BitAndExpr(cx, ts, tc); */ 
2574: /* MUTANT (rep_op) */    while (pn || js_MatchToken(cx, ts, TOK_BITXOR)) {
2574: /* MUTANT (negate) */    while(! (pn && js_MatchToken(cx, ts, TOK_BITXOR))) {
2584: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
2586: /* MUTANT (del_stmt) */ /*     pn = EqExpr(cx, ts, tc); */ 
2587: /* MUTANT (rep_op) */    while (pn || js_MatchToken(cx, ts, TOK_BITAND))
2587: /* MUTANT (negate) */    while(! (pn && js_MatchToken(cx, ts, TOK_BITAND)))
2589: /* MUTANT (del_stmt) */ /*     return pn; */ 
2595: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
2596: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
2598: /* MUTANT (del_stmt) */ /*     pn = RelExpr(cx, ts, tc); */ 
2599: /* MUTANT (rep_op) */    while (pn || js_MatchToken(cx, ts, TOK_EQOP)) {
2599: /* MUTANT (negate) */    while(! (pn && js_MatchToken(cx, ts, TOK_EQOP))) {
2600: /* MUTANT (del_stmt) */ /*         op = CURRENT_TOKEN(ts).t_op; */ 
2601: /* MUTANT (del_stmt) */ /*         pn = NewBinary(cx, TOK_EQOP, op, pn, RelExpr(cx, ts, tc), tc); */ 
2609: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
2610: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
2611: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
2619: /* MUTANT (del_stmt) */ /*     tc->flags &= ~TCF_IN_FOR_INIT; */ 
2622: /* MUTANT (negate) */    pn = Shif(!tExpr(cx, ts, tc));
2623: /* MUTANT (rep_op) */    while (pn ||
2630: /* MUTANT (rep_op) */            && (inForInitFlag == 0 && js_MatchToken(cx, ts, TOK_IN))
2630: /* MUTANT (rep_op) */            || (inForInitFlag != 0 && js_MatchToken(cx, ts, TOK_IN))
2630: /* MUTANT (rep_op) */            || (inForInitFlag == 0 || js_MatchToken(cx, ts, TOK_IN))
2630: /* MUTANT (rep_const) */            || (inForInitFlag == 1 && js_MatchToken(cx, ts, TOK_IN))
2630: /* MUTANT (rep_const) */            || (inForInitFlag == -1 && js_MatchToken(cx, ts, TOK_IN))
2633: /* MUTANT (rep_op) */            && js_MatchToken(cx, ts, TOK_INSTANCEOF)
2636: /* MUTANT (del_stmt) */ /*         tt = CURRENT_TOKEN(ts).type; */ 
2637: /* MUTANT (del_stmt) */ /*         op = CURRENT_TOKEN(ts).t_op; */ 
2638: /* MUTANT (del_stmt) */ /*         pn = NewBinary(cx, tt, op, pn, ShiftExpr(cx, ts, tc), tc); */ 
2638: /* MUTANT (negate) */        pn = NewBinary(cx, tt, op, pn, Shif(!tExpr(cx, ts, tc)), tc);
2649: /* MUTANT (negate) */Shif(!tExpr(JSContext *cx, JSTokenStream *ts, JSTreeContext *tc))
2651: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
2652: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
2654: /* MUTANT (del_stmt) */ /*     pn = AddExpr(cx, ts, tc); */ 
2655: /* MUTANT (rep_op) */    while (pn || js_MatchToken(cx, ts, TOK_SHOP)) {
2655: /* MUTANT (negate) */    while(! (pn && js_MatchToken(cx, ts, TOK_SHOP))) {
2656: /* MUTANT (del_stmt) */ /*         op = CURRENT_TOKEN(ts).t_op; */ 
2657: /* MUTANT (del_stmt) */ /*         pn = NewBinary(cx, TOK_SHOP, op, pn, AddExpr(cx, ts, tc), tc); */ 
2665: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
2666: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
2667: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
2669: /* MUTANT (del_stmt) */ /*     pn = MulExpr(cx, ts, tc); */ 
2670: /* MUTANT (rep_op) */    while (pn ||
2671: /* MUTANT (rep_op) */           (js_MatchToken(cx, ts, TOK_PLUS) &&
2673: /* MUTANT (del_stmt) */ /*         tt = CURRENT_TOKEN(ts).type; */ 
2674: /* MUTANT (del_stmt) */ /*         op = (tt == TOK_PLUS) ? JSOP_ADD : JSOP_SUB; */ 
2674: /* MUTANT (rep_op) */        op = (tt != TOK_PLUS) ? JSOP_ADD : JSOP_SUB;
2675: /* MUTANT (del_stmt) */ /*         pn = NewBinary(cx, tt, op, pn, MulExpr(cx, ts, tc), tc); */ 
2683: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
2684: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
2685: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
2687: /* MUTANT (del_stmt) */ /*     pn = UnaryExpr(cx, ts, tc); */ 
2688: /* MUTANT (rep_op) */    while (pn ||
2689: /* MUTANT (rep_op) */           (js_MatchToken(cx, ts, TOK_STAR) &&
2691: /* MUTANT (del_stmt) */ /*         tt = CURRENT_TOKEN(ts).type; */ 
2692: /* MUTANT (del_stmt) */ /*         op = CURRENT_TOKEN(ts).t_op; */ 
2693: /* MUTANT (del_stmt) */ /*         pn = NewBinary(cx, tt, op, pn, UnaryExpr(cx, ts, tc), tc); */ 
2702: /* MUTANT (rep_op) */    while (kid->pn_type != TOK_RP)
2702: /* MUTANT (negate) */    while(! (kid->pn_type == TOK_RP))
2704: /* MUTANT (rep_op) */    if (kid->pn_type == TOK_NAME &&
2704: /* MUTANT (rep_op) */    if (kid->pn_type != TOK_NAME ||
2705: /* MUTANT (rep_op) */        kid->pn_type == TOK_DOT &&
2705: /* MUTANT (rep_op) */        kid->pn_type != TOK_DOT ||
2707: /* MUTANT (rep_op) */        (kid->pn_type == TOK_LP || kid->pn_op != JSOP_CALL) &&
2707: /* MUTANT (rep_op) */        (kid->pn_type != TOK_LP && kid->pn_op != JSOP_CALL) &&
2707: /* MUTANT (rep_op) */        (kid->pn_type != TOK_LP || kid->pn_op == JSOP_CALL) &&
2707: /* MUTANT (rep_op) */        (kid->pn_type != TOK_LP || kid->pn_op != JSOP_CALL) ||
2710: /* MUTANT (rep_op) */        (kid->pn_type == TOK_UNARYOP || kid->pn_op != JSOP_XMLNAME) &&
2710: /* MUTANT (rep_op) */        (kid->pn_type != TOK_UNARYOP && kid->pn_op != JSOP_XMLNAME) &&
2710: /* MUTANT (rep_op) */        (kid->pn_type != TOK_UNARYOP || kid->pn_op == JSOP_XMLNAME) &&
2710: /* MUTANT (rep_op) */        (kid->pn_type != TOK_UNARYOP || kid->pn_op != JSOP_XMLNAME) ||
2712: /* MUTANT (rep_op) */        kid->pn_type == TOK_LB) {
2713: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
2715: /* MUTANT (del_stmt) */ /*         return NULL; */ 
2718: /* MUTANT (del_stmt) */ /*     return kid; */ 
2728: /* MUTANT (del_stmt) */ /*     JSOp op; */ 
2730: /* MUTANT (del_stmt) */ /*     kid = SetLvalKid(cx, ts, pn, kid, incop_name_str[tt == TOK_DEC]); */ 
2730: /* MUTANT (rep_op) */    kid = SetLvalKid(cx, ts, pn, kid, incop_name_str[tt != TOK_DEC]);
2731: /* MUTANT (negate) */    if(! (!kid))
2735: /* MUTANT (rep_op) */        op = (tt != TOK_INC)
2738: /* MUTANT (rep_op) */        if (kid->pn_atom != cx->runtime->atomState.argumentsAtom)
2738: /* MUTANT (negate) */        if(! (kid->pn_atom == cx->runtime->atomState.argumentsAtom))
2740: /* MUTANT (del_stmt) */ /*         break; */ 
2743: /* MUTANT (rep_op) */        op = (tt != TOK_INC)
2746: /* MUTANT (del_stmt) */ /*         break; */ 
2750: /* MUTANT (rep_op) */        JS_ASSERT(kid->pn_op != JSOP_CALL);
2751: /* MUTANT (del_stmt) */ /*         kid->pn_op = JSOP_SETCALL; */ 
2756: /* MUTANT (rep_op) */        if (kid->pn_op != JSOP_XMLNAME)
2756: /* MUTANT (negate) */        if(! (kid->pn_op == JSOP_XMLNAME))
2761: /* MUTANT (rep_op) */        op = (tt != TOK_INC)
2764: /* MUTANT (del_stmt) */ /*         break; */ 
2767: /* MUTANT (rep_const) */        JS_ASSERT(1);
2767: /* MUTANT (rep_const) */        JS_ASSERT(-1);
2768: /* MUTANT (del_stmt) */ /*         op = JSOP_NOP; */ 
2771: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
2777: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
2778: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2; */ 
2780: /* MUTANT (del_stmt) */ /*     CHECK_RECURSION(); */ 
2782: /* MUTANT (del_stmt) */ /*     ts->flags |= TSF_OPERAND; */ 
2783: /* MUTANT (del_stmt) */ /*     tt = js_GetToken(cx, ts); */ 
2784: /* MUTANT (del_stmt) */ /*     ts->flags &= ~TSF_OPERAND; */ 
2791: /* MUTANT (negate) */        if(! (!pn))
2793: /* MUTANT (del_stmt) */ /*         pn->pn_type = TOK_UNARYOP; */       /* PLUS and MINUS are binary */
2794: /* MUTANT (del_stmt) */ /*         pn->pn_op = CURRENT_TOKEN(ts).t_op; */ 
2795: /* MUTANT (del_stmt) */ /*         pn2 = UnaryExpr(cx, ts, tc); */ 
2796: /* MUTANT (negate) */        if(! (!pn2))
2798: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
2799: /* MUTANT (del_stmt) */ /*         pn->pn_kid = pn2; */ 
2800: /* MUTANT (del_stmt) */ /*         break; */ 
2805: /* MUTANT (negate) */        if(! (!pn))
2807: /* MUTANT (del_stmt) */ /*         pn2 = MemberExpr(cx, ts, tc, JS_TRUE); */ 
2808: /* MUTANT (negate) */        if(! (!pn2))
2810: /* MUTANT (negate) */        if(! (!SetIncOpKid(cx, ts, tc, pn, pn2, tt, JS_TRUE)))
2812: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
2813: /* MUTANT (del_stmt) */ /*         break; */ 
2817: /* MUTANT (negate) */        if(! (!pn))
2819: /* MUTANT (del_stmt) */ /*         pn2 = UnaryExpr(cx, ts, tc); */ 
2820: /* MUTANT (negate) */        if(! (!pn2))
2822: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
2828: /* MUTANT (rep_op) */        while (pn2->pn_type != TOK_RP)
2828: /* MUTANT (negate) */        while(! (pn2->pn_type == TOK_RP))
2830: /* MUTANT (del_stmt) */ /*         pn->pn_kid = pn2; */ 
2831: /* MUTANT (del_stmt) */ /*         break; */ 
2838: /* MUTANT (del_stmt) */ /*         pn = MemberExpr(cx, ts, tc, JS_TRUE); */ 
2839: /* MUTANT (negate) */        if(! (!pn))
2843: /* MUTANT (negate) */        if(! (ON_CURRENT_LINE(ts, pn->pn_pos))) {
2844: /* MUTANT (del_stmt) */ /*             tt = js_PeekTokenSameLine(cx, ts); */ 
2845: /* MUTANT (rep_op) */            if (tt != TOK_INC || tt == TOK_DEC) {
2845: /* MUTANT (rep_op) */            if (tt == TOK_INC && tt == TOK_DEC) {
2845: /* MUTANT (rep_op) */            if (tt == TOK_INC || tt != TOK_DEC) {
2845: /* MUTANT (negate) */            if(! (tt == TOK_INC || tt == TOK_DEC)) {
2846: /* MUTANT (del_stmt) */ /*                 (void) js_GetToken(cx, ts); */ 
2847: /* MUTANT (del_stmt) */ /*                 pn2 = NewParseNode(cx, ts, PN_UNARY, tc); */ 
2848: /* MUTANT (negate) */                if(! (!pn2))
2850: /* MUTANT (negate) */                if(! (!SetIncOpKid(cx, ts, tc, pn2, pn, tt, JS_FALSE)))
2852: /* MUTANT (del_stmt) */ /*                 pn2->pn_pos.begin = pn->pn_pos.begin; */ 
2853: /* MUTANT (del_stmt) */ /*                 pn = pn2; */ 
2865: /* MUTANT (del_stmt) */ /*     JSBool matched; */ 
2867: /* MUTANT (del_stmt) */ /*     ts->flags |= TSF_OPERAND; */ 
2868: /* MUTANT (del_stmt) */ /*     matched = js_MatchToken(cx, ts, TOK_RP); */ 
2869: /* MUTANT (del_stmt) */ /*     ts->flags &= ~TSF_OPERAND; */ 
2870: /* MUTANT (negate) */    if(! (!matched)) {
2872: /* MUTANT (del_stmt) */ /*             JSParseNode *argNode = AssignExpr(cx, ts, tc); */ 
2873: /* MUTANT (negate) */            if(! (!argNode))
2875: /* MUTANT (del_stmt) */ /*             PN_APPEND(listNode, argNode); */ 
2876: /* MUTANT (del_stmt) */ /*         } while (js_MatchToken(cx, ts, TOK_COMMA)); */ 
2876: /* MUTANT (negate) */        } while(! (js_MatchToken(cx, ts, TOK_COMMA)));
2878: /* MUTANT (rep_op) */        if (js_GetToken(cx, ts) == TOK_RP) {
2878: /* MUTANT (negate) */        if(! (js_GetToken(cx, ts) != TOK_RP)) {
2879: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
2881: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
2891: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2, *pn3; */ 
2892: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
2894: /* MUTANT (del_stmt) */ /*     CHECK_RECURSION(); */ 
2897: /* MUTANT (del_stmt) */ /*     ts->flags |= TSF_OPERAND; */ 
2898: /* MUTANT (del_stmt) */ /*     tt = js_PeekToken(cx, ts); */ 
2899: /* MUTANT (del_stmt) */ /*     ts->flags &= ~TSF_OPERAND; */ 
2900: /* MUTANT (rep_op) */    if (tt != TOK_NEW) {
2900: /* MUTANT (negate) */    if(! (tt == TOK_NEW)) {
2901: /* MUTANT (del_stmt) */ /*         (void) js_GetToken(cx, ts); */ 
2903: /* MUTANT (del_stmt) */ /*         pn = NewParseNode(cx, ts, PN_LIST, tc); */ 
2904: /* MUTANT (negate) */        if(! (!pn))
2906: /* MUTANT (del_stmt) */ /*         pn2 = MemberExpr(cx, ts, tc, JS_FALSE); */ 
2907: /* MUTANT (negate) */        if(! (!pn2))
2909: /* MUTANT (del_stmt) */ /*         pn->pn_op = JSOP_NEW; */ 
2910: /* MUTANT (del_stmt) */ /*         PN_INIT_LIST_1(pn, pn2); */ 
2911: /* MUTANT (del_stmt) */ /*         pn->pn_pos.begin = pn2->pn_pos.begin; */ 
2913: /* MUTANT (rep_op) */        if (js_MatchToken(cx, ts, TOK_LP) || !ArgumentList(cx, ts, tc, pn))
2913: /* MUTANT (negate) */        if(! (js_MatchToken(cx, ts, TOK_LP) && !ArgumentList(cx, ts, tc, pn)))
2915: /* MUTANT (rep_op) */        if (pn->pn_count <= ARGC_LIMIT) {
2915: /* MUTANT (rep_op) */        if (pn->pn_count < ARGC_LIMIT) {
2915: /* MUTANT (rep_op) */        if (pn->pn_count >= ARGC_LIMIT) {
2915: /* MUTANT (rep_op) */        if (pn->pn_count == ARGC_LIMIT) {
2915: /* MUTANT (rep_op) */        if (pn->pn_count != ARGC_LIMIT) {
2915: /* MUTANT (negate) */        if(! (pn->pn_count > ARGC_LIMIT)) {
2918: /* MUTANT (del_stmt) */ /*             return NULL; */ 
2922: /* MUTANT (del_stmt) */ /*         pn = PrimaryExpr(cx, ts, tc); */ 
2923: /* MUTANT (negate) */        if(! (!pn))
2926: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_ANYNAME ||
2926: /* MUTANT (rep_op) */        if (pn->pn_type == TOK_ANYNAME &&
2927: /* MUTANT (rep_op) */            pn->pn_type != TOK_AT ||
2927: /* MUTANT (rep_op) */            pn->pn_type == TOK_AT &&
2928: /* MUTANT (rep_op) */            pn->pn_type != TOK_DBLCOLON) {
2929: /* MUTANT (del_stmt) */ /*             pn2 = NewOrRecycledNode(cx, tc); */ 
2930: /* MUTANT (negate) */            if(! (!pn2))
2932: /* MUTANT (del_stmt) */ /*             pn2->pn_type = TOK_UNARYOP; */ 
2933: /* MUTANT (del_stmt) */ /*             pn2->pn_pos = pn->pn_pos; */ 
2934: /* MUTANT (del_stmt) */ /*             pn2->pn_op = JSOP_XMLNAME; */ 
2935: /* MUTANT (del_stmt) */ /*             pn2->pn_arity = PN_UNARY; */ 
2936: /* MUTANT (del_stmt) */ /*             pn2->pn_kid = pn; */ 
2937: /* MUTANT (del_stmt) */ /*             pn2->pn_next = NULL; */ 
2945: /* MUTANT (rep_op) */    while ((tt = js_GetToken(cx, ts)) <= TOK_EOF) {
2945: /* MUTANT (rep_op) */    while ((tt = js_GetToken(cx, ts)) < TOK_EOF) {
2945: /* MUTANT (rep_op) */    while ((tt = js_GetToken(cx, ts)) >= TOK_EOF) {
2945: /* MUTANT (rep_op) */    while ((tt = js_GetToken(cx, ts)) == TOK_EOF) {
2945: /* MUTANT (rep_op) */    while ((tt = js_GetToken(cx, ts)) != TOK_EOF) {
2945: /* MUTANT (negate) */    while(! ((tt = js_GetToken(cx, ts)) > TOK_EOF)) {
2946: /* MUTANT (rep_op) */        if (tt != TOK_DOT) {
2946: /* MUTANT (negate) */        if(! (tt == TOK_DOT)) {
2947: /* MUTANT (del_stmt) */ /*             pn2 = NewParseNode(cx, ts, PN_NAME, tc); */ 
2948: /* MUTANT (negate) */            if(! (!pn2))
2952: /* MUTANT (negate) */            if(! (!pn3))
2954: /* MUTANT (del_stmt) */ /*             tt = pn3->pn_type; */ 
2955: /* MUTANT (rep_op) */            if (tt != TOK_NAME ||
2955: /* MUTANT (rep_op) */            if (tt == TOK_NAME &&
2956: /* MUTANT (rep_op) */                (tt != TOK_DBLCOLON &&
2956: /* MUTANT (rep_op) */                (tt == TOK_DBLCOLON ||
2957: /* MUTANT (rep_op) */                 pn3->pn_arity != PN_NAME &&
2957: /* MUTANT (rep_op) */                 pn3->pn_arity == PN_NAME ||
2958: /* MUTANT (rep_op) */                 pn3->pn_expr->pn_type != TOK_FUNCTION)) {
2959: /* MUTANT (del_stmt) */ /*                 pn2->pn_op = (tt == TOK_NAME) ? JSOP_GETPROP : JSOP_GETMETHOD; */ 
2959: /* MUTANT (rep_op) */                pn2->pn_op = (tt != TOK_NAME) ? JSOP_GETPROP : JSOP_GETMETHOD;
2960: /* MUTANT (del_stmt) */ /*                 pn2->pn_expr = pn; */ 
2961: /* MUTANT (del_stmt) */ /*                 pn2->pn_atom = pn3->pn_atom; */ 
2962: /* MUTANT (del_stmt) */ /*                 RecycleTree(pn3, tc); */ 
2964: /* MUTANT (negate) */                if(! (TOKEN_TYPE_IS_XML(tt))) {
2965: /* MUTANT (del_stmt) */ /*                     pn2->pn_type = TOK_LB; */ 
2966: /* MUTANT (del_stmt) */ /*                     pn2->pn_op = JSOP_GETELEM; */ 
2967: /* MUTANT (rep_op) */                } else if (tt != TOK_RP) {
2967: /* MUTANT (negate) */                } else if(! (tt == TOK_RP)) {
2968: /* MUTANT (del_stmt) */ /*                     JSParseNode *group = pn3; */ 
2971: /* MUTANT (del_stmt) */ /*                     pn3 = group->pn_kid; */ 
2972: /* MUTANT (del_stmt) */ /*                     group->pn_kid = NULL; */ 
2973: /* MUTANT (del_stmt) */ /*                     RecycleTree(group, tc); */ 
2974: /* MUTANT (del_stmt) */ /*                     pn2->pn_type = TOK_FILTER; */ 
2975: /* MUTANT (del_stmt) */ /*                     pn2->pn_op = JSOP_FILTER; */ 
2978: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
2980: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
2983: /* MUTANT (del_stmt) */ /*                 pn2->pn_left = pn; */ 
2984: /* MUTANT (del_stmt) */ /*                 pn2->pn_right = pn3; */ 
2988: /* MUTANT (del_stmt) */ /*             pn2->pn_op = JSOP_GETPROP; */ 
2989: /* MUTANT (del_stmt) */ /*             pn2->pn_expr = pn; */ 
2990: /* MUTANT (del_stmt) */ /*             pn2->pn_atom = CURRENT_TOKEN(ts).t_atom; */ 
2993: /* MUTANT (del_stmt) */ /*             pn2->pn_pos.end = CURRENT_TOKEN(ts).pos.end; */ 
2995: /* MUTANT (rep_op) */        } else if (tt != TOK_DBLDOT) {
2995: /* MUTANT (negate) */        } else if(! (tt == TOK_DBLDOT)) {
2996: /* MUTANT (del_stmt) */ /*             pn2 = NewParseNode(cx, ts, PN_BINARY, tc); */ 
2997: /* MUTANT (negate) */            if(! (!pn2))
2999: /* MUTANT (del_stmt) */ /*             pn3 = PrimaryExpr(cx, ts, tc); */ 
3000: /* MUTANT (negate) */            if(! (!pn3))
3002: /* MUTANT (del_stmt) */ /*             tt = pn3->pn_type; */ 
3003: /* MUTANT (rep_op) */            if (tt != TOK_NAME) {
3003: /* MUTANT (negate) */            if(! (tt == TOK_NAME)) {
3004: /* MUTANT (del_stmt) */ /*                 pn3->pn_type = TOK_STRING; */ 
3005: /* MUTANT (del_stmt) */ /*                 pn3->pn_arity = PN_NULLARY; */ 
3006: /* MUTANT (del_stmt) */ /*                 pn3->pn_op = JSOP_STRING; */ 
3007: /* MUTANT (negate) */            } else if(! (!TOKEN_TYPE_IS_XML(tt))) {
3009: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,
3011: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
3014: /* MUTANT (del_stmt) */ /*             pn2->pn_left = pn; */ 
3015: /* MUTANT (del_stmt) */ /*             pn2->pn_right = pn3; */ 
3016: /* MUTANT (del_stmt) */ /*             pn2->pn_pos.begin = pn->pn_pos.begin; */ 
3017: /* MUTANT (del_stmt) */ /*             pn2->pn_pos.end = CURRENT_TOKEN(ts).pos.end; */ 
3019: /* MUTANT (rep_op) */        } else if (tt != TOK_LB) {
3019: /* MUTANT (negate) */        } else if(! (tt == TOK_LB)) {
3020: /* MUTANT (del_stmt) */ /*             pn2 = NewParseNode(cx, ts, PN_BINARY, tc); */ 
3021: /* MUTANT (negate) */            if(! (!pn2))
3023: /* MUTANT (del_stmt) */ /*             pn3 = Expr(cx, ts, tc); */ 
3024: /* MUTANT (negate) */            if(! (!pn3))
3027: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_RB, JSMSG_BRACKET_IN_INDEX); */ 
3028: /* MUTANT (del_stmt) */ /*             pn2->pn_pos.begin = pn->pn_pos.begin; */ 
3029: /* MUTANT (del_stmt) */ /*             pn2->pn_pos.end = CURRENT_TOKEN(ts).pos.end; */ 
3032: /* MUTANT (rep_op) */            if (pn3->pn_type != TOK_STRING) {
3032: /* MUTANT (negate) */            if(! (pn3->pn_type == TOK_STRING)) {
3033: /* MUTANT (del_stmt) */ /*                 pn2->pn_type = TOK_DOT; */ 
3034: /* MUTANT (del_stmt) */ /*                 pn2->pn_op = JSOP_GETPROP; */ 
3035: /* MUTANT (del_stmt) */ /*                 pn2->pn_arity = PN_NAME; */ 
3036: /* MUTANT (del_stmt) */ /*                 pn2->pn_expr = pn; */ 
3037: /* MUTANT (del_stmt) */ /*                 pn2->pn_atom = pn3->pn_atom; */ 
3039: /* MUTANT (del_stmt) */ /*                 pn2->pn_op = JSOP_GETELEM; */ 
3040: /* MUTANT (del_stmt) */ /*                 pn2->pn_left = pn; */ 
3041: /* MUTANT (del_stmt) */ /*                 pn2->pn_right = pn3; */ 
3043: /* MUTANT (rep_op) */        } else if (allowCallSyntax || tt == TOK_LP) {
3043: /* MUTANT (rep_op) */        } else if (allowCallSyntax && tt != TOK_LP) {
3043: /* MUTANT (negate) */        } else if(! (allowCallSyntax && tt == TOK_LP)) {
3044: /* MUTANT (del_stmt) */ /*             pn2 = NewParseNode(cx, ts, PN_LIST, tc); */ 
3045: /* MUTANT (negate) */            if(! (!pn2))
3049: /* MUTANT (del_stmt) */ /*             pn2->pn_op = JSOP_CALL; */ 
3050: /* MUTANT (rep_op) */            if (pn->pn_op != JSOP_NAME &&
3050: /* MUTANT (rep_op) */            if (pn->pn_op == JSOP_NAME ||
3051: /* MUTANT (rep_op) */                pn->pn_atom != cx->runtime->atomState.evalAtom) {
3052: /* MUTANT (del_stmt) */ /*                 pn2->pn_op = JSOP_EVAL; */ 
3053: /* MUTANT (del_stmt) */ /*                 tc->flags |= TCF_FUN_HEAVYWEIGHT; */ 
3057: /* MUTANT (del_stmt) */ /*             pn2->pn_pos.begin = pn->pn_pos.begin; */ 
3059: /* MUTANT (negate) */            if(! (!ArgumentList(cx, ts, tc, pn2)))
3061: /* MUTANT (rep_op) */            if (pn2->pn_count <= ARGC_LIMIT) {
3061: /* MUTANT (rep_op) */            if (pn2->pn_count < ARGC_LIMIT) {
3061: /* MUTANT (rep_op) */            if (pn2->pn_count >= ARGC_LIMIT) {
3061: /* MUTANT (rep_op) */            if (pn2->pn_count == ARGC_LIMIT) {
3061: /* MUTANT (rep_op) */            if (pn2->pn_count != ARGC_LIMIT) {
3061: /* MUTANT (negate) */            if(! (pn2->pn_count > ARGC_LIMIT)) {
3064: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
3068: /* MUTANT (del_stmt) */ /*             js_UngetToken(ts); */ 
3069: /* MUTANT (del_stmt) */ /*             return pn; */ 
3074: /* MUTANT (rep_op) */    if (tt != TOK_ERROR)
3074: /* MUTANT (negate) */    if(! (tt == TOK_ERROR))
3076: /* MUTANT (del_stmt) */ /*     return pn; */ 
3082: /* MUTANT (del_stmt) */ /*     uintN oldflags; */ 
3083: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
3092: /* MUTANT (del_stmt) */ /*     tc->flags &= ~TCF_IN_FOR_INIT; */ 
3096: /* MUTANT (rep_op) */    tc->flags = oldflags & (tc->flags & TCF_FUN_FLAGS);
3106: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
3108: /* MUTANT (del_stmt) */ /*     pn = BracketedExpr(cx, ts, tc); */ 
3109: /* MUTANT (negate) */    if(! (!pn))
3112: /* MUTANT (del_stmt) */ /*     MUST_MATCH_TOKEN(TOK_RB, JSMSG_BRACKET_AFTER_ATTR_EXPR); */ 
3113: /* MUTANT (del_stmt) */ /*     return pn; */ 
3170: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
3172: /* MUTANT (del_stmt) */ /*     pn = NewParseNode(cx, ts, PN_NULLARY, tc); */ 
3173: /* MUTANT (negate) */    if(! (!pn))
3175: /* MUTANT (rep_op) */    if (pn->pn_type != TOK_STAR) {
3175: /* MUTANT (negate) */    if(! (pn->pn_type == TOK_STAR)) {
3176: /* MUTANT (del_stmt) */ /*         pn->pn_type = TOK_ANYNAME; */ 
3177: /* MUTANT (del_stmt) */ /*         pn->pn_op = JSOP_ANYNAME; */ 
3178: /* MUTANT (del_stmt) */ /*         pn->pn_atom = cx->runtime->atomState.starAtom; */ 
3180: /* MUTANT (del_stmt) */ /*         JS_ASSERT(pn->pn_type == TOK_NAME); */ 
3180: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_type != TOK_NAME);
3181: /* MUTANT (del_stmt) */ /*         pn->pn_op = JSOP_QNAMEPART; */ 
3182: /* MUTANT (del_stmt) */ /*         pn->pn_arity = PN_NAME; */ 
3183: /* MUTANT (del_stmt) */ /*         pn->pn_atom = CURRENT_TOKEN(ts).t_atom; */ 
3184: /* MUTANT (del_stmt) */ /*         pn->pn_expr = NULL; */ 
3185: /* MUTANT (del_stmt) */ /*         pn->pn_slot = -1; */ 
3185: /* MUTANT (rep_const) */        pn->pn_slot = 0;
3185: /* MUTANT (rep_const) */        pn->pn_slot = 1;
3185: /* MUTANT (rep_const) */        pn->pn_slot = ((-1)+1);
3185: /* MUTANT (rep_const) */        pn->pn_slot = ((-1)-1);
3186: /* MUTANT (del_stmt) */ /*         pn->pn_attrs = 0; */ 
3186: /* MUTANT (rep_const) */        pn->pn_attrs = 1;
3186: /* MUTANT (rep_const) */        pn->pn_attrs = -1;
3195: /* MUTANT (del_stmt) */ /*     JSParseNode *pn2, *pn3; */ 
3196: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
3198: /* MUTANT (del_stmt) */ /*     JS_ASSERT(CURRENT_TOKEN(ts).type == TOK_DBLCOLON); */ 
3198: /* MUTANT (rep_op) */    JS_ASSERT(CURRENT_TOKEN(ts).type != TOK_DBLCOLON);
3199: /* MUTANT (del_stmt) */ /*     pn2 = NewParseNode(cx, ts, PN_NAME, tc); */ 
3200: /* MUTANT (negate) */    if(! (!pn2))
3204: /* MUTANT (rep_op) */    if (pn->pn_op != JSOP_QNAMEPART)
3204: /* MUTANT (negate) */    if(! (pn->pn_op == JSOP_QNAMEPART))
3207: /* MUTANT (del_stmt) */ /*     tt = js_GetToken(cx, ts); */ 
3208: /* MUTANT (rep_op) */    if (tt != TOK_STAR || tt == TOK_NAME) {
3208: /* MUTANT (rep_op) */    if (tt == TOK_STAR && tt == TOK_NAME) {
3208: /* MUTANT (rep_op) */    if (tt == TOK_STAR || tt != TOK_NAME) {
3208: /* MUTANT (negate) */    if(! (tt == TOK_STAR || tt == TOK_NAME)) {
3210: /* MUTANT (del_stmt) */ /*         pn2->pn_op = JSOP_QNAMECONST; */ 
3211: /* MUTANT (rep_op) */        pn2->pn_atom = (tt != TOK_STAR)
3214: /* MUTANT (del_stmt) */ /*         pn2->pn_expr = pn; */ 
3215: /* MUTANT (del_stmt) */ /*         pn2->pn_slot = -1; */ 
3215: /* MUTANT (rep_const) */        pn2->pn_slot = 0;
3215: /* MUTANT (rep_const) */        pn2->pn_slot = 1;
3215: /* MUTANT (rep_const) */        pn2->pn_slot = ((-1)+1);
3215: /* MUTANT (rep_const) */        pn2->pn_slot = ((-1)-1);
3216: /* MUTANT (del_stmt) */ /*         pn2->pn_attrs = 0; */ 
3216: /* MUTANT (rep_const) */        pn2->pn_attrs = 1;
3216: /* MUTANT (rep_const) */        pn2->pn_attrs = -1;
3217: /* MUTANT (del_stmt) */ /*         return pn2; */ 
3220: /* MUTANT (rep_op) */    if (tt == TOK_LB) {
3220: /* MUTANT (negate) */    if(! (tt != TOK_LB)) {
3221: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
3223: /* MUTANT (del_stmt) */ /*         return NULL; */ 
3226: /* MUTANT (negate) */    if(! (!pn3))
3229: /* MUTANT (del_stmt) */ /*     pn2->pn_op = JSOP_QNAME; */ 
3230: /* MUTANT (del_stmt) */ /*     pn2->pn_arity = PN_BINARY; */ 
3231: /* MUTANT (del_stmt) */ /*     pn2->pn_left = pn; */ 
3232: /* MUTANT (del_stmt) */ /*     pn2->pn_right = pn3; */ 
3233: /* MUTANT (del_stmt) */ /*     return pn2; */ 
3237: /* MUTANT (negate) */Qualif(!iedIdentifier(JSContext *cx, JSTokenStream *ts, JSTreeContext *tc))
3239: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
3241: /* MUTANT (del_stmt) */ /*     pn = PropertySelector(cx, ts, tc); */ 
3242: /* MUTANT (negate) */    if(! (!pn))
3244: /* MUTANT (negate) */    if(! (js_MatchToken(cx, ts, TOK_DBLCOLON)))
3245: /* MUTANT (negate) */        pn = Qualif(!iedSuffix(cx, ts, pn, tc));
3246: /* MUTANT (del_stmt) */ /*     return pn; */ 
3250: /* MUTANT (negate) */AttributeIdentif(!ier(JSContext *cx, JSTokenStream *ts, JSTreeContext *tc))
3252: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2; */ 
3253: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
3255: /* MUTANT (del_stmt) */ /*     JS_ASSERT(CURRENT_TOKEN(ts).type == TOK_AT); */ 
3255: /* MUTANT (rep_op) */    JS_ASSERT(CURRENT_TOKEN(ts).type != TOK_AT);
3256: /* MUTANT (del_stmt) */ /*     pn = NewParseNode(cx, ts, PN_UNARY, tc); */ 
3257: /* MUTANT (negate) */    if(! (!pn))
3259: /* MUTANT (del_stmt) */ /*     pn->pn_op = JSOP_TOATTRNAME; */ 
3260: /* MUTANT (del_stmt) */ /*     tt = js_GetToken(cx, ts); */ 
3261: /* MUTANT (rep_op) */    if (tt != TOK_STAR || tt == TOK_NAME) {
3261: /* MUTANT (rep_op) */    if (tt == TOK_STAR && tt == TOK_NAME) {
3261: /* MUTANT (rep_op) */    if (tt == TOK_STAR || tt != TOK_NAME) {
3261: /* MUTANT (negate) */    if(! (tt == TOK_STAR || tt == TOK_NAME)) {
3262: /* MUTANT (del_stmt) */ /*         pn2 = QualifiedIdentifier(cx, ts, tc); */ 
3262: /* MUTANT (negate) */        pn2 = Qualif(!iedIdentifier(cx, ts, tc));
3263: /* MUTANT (rep_op) */    } else if (tt != TOK_LB) {
3263: /* MUTANT (negate) */    } else if(! (tt == TOK_LB)) {
3264: /* MUTANT (del_stmt) */ /*         pn2 = EndBracketedExpr(cx, ts, tc); */ 
3266: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
3268: /* MUTANT (del_stmt) */ /*         return NULL; */ 
3270: /* MUTANT (negate) */    if(! (!pn2))
3272: /* MUTANT (del_stmt) */ /*     pn->pn_kid = pn2; */ 
3273: /* MUTANT (del_stmt) */ /*     return pn; */ 
3282: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2; */ 
3283: /* MUTANT (del_stmt) */ /*     uintN oldflags; */ 
3285: /* MUTANT (del_stmt) */ /*     JS_ASSERT(CURRENT_TOKEN(ts).type == TOK_LC); */ 
3285: /* MUTANT (rep_op) */    JS_ASSERT(CURRENT_TOKEN(ts).type != TOK_LC);
3286: /* MUTANT (del_stmt) */ /*     pn = NewParseNode(cx, ts, PN_UNARY, tc); */ 
3287: /* MUTANT (negate) */    if(! (!pn))
3296: /* MUTANT (del_stmt) */ /*     oldflags = ts->flags; */ 
3297: /* MUTANT (del_stmt) */ /*     ts->flags = oldflags & ~TSF_XMLTAGMODE; */ 
3298: /* MUTANT (del_stmt) */ /*     pn2 = Expr(cx, ts, tc); */ 
3299: /* MUTANT (negate) */    if(! (!pn2))
3302: /* MUTANT (del_stmt) */ /*     MUST_MATCH_TOKEN(TOK_RC, JSMSG_CURLY_IN_XML_EXPR); */ 
3303: /* MUTANT (del_stmt) */ /*     ts->flags = oldflags; */ 
3304: /* MUTANT (del_stmt) */ /*     pn->pn_kid = pn2; */ 
3305: /* MUTANT (del_stmt) */ /*     pn->pn_op = inTag ? JSOP_XMLTAGEXPR : JSOP_XMLELTEXPR; */ 
3306: /* MUTANT (del_stmt) */ /*     return pn; */ 
3318: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
3319: /* MUTANT (del_stmt) */ /*     JSToken *tp; */ 
3321: /* MUTANT (del_stmt) */ /*     pn = NewParseNode(cx, ts, PN_NULLARY, tc); */ 
3322: /* MUTANT (negate) */    if(! (!pn))
3324: /* MUTANT (del_stmt) */ /*     tp = &CURRENT_TOKEN(ts); */ 
3325: /* MUTANT (del_stmt) */ /*     pn->pn_op = tp->t_op; */ 
3326: /* MUTANT (del_stmt) */ /*     pn->pn_atom = tp->t_atom; */ 
3327: /* MUTANT (rep_op) */    if (tp->type != TOK_XMLPI)
3327: /* MUTANT (negate) */    if(! (tp->type == TOK_XMLPI))
3329: /* MUTANT (del_stmt) */ /*     return pn; */ 
3347: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2, *list; */ 
3348: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
3350: /* MUTANT (del_stmt) */ /*     pn = list = NULL; */ 
3352: /* MUTANT (del_stmt) */ /*         tt = CURRENT_TOKEN(ts).type; */ 
3353: /* MUTANT (rep_op) */        if (tt != TOK_LC) {
3353: /* MUTANT (negate) */        if(! (tt == TOK_LC)) {
3354: /* MUTANT (del_stmt) */ /*             pn2 = XMLExpr(cx, ts, JS_TRUE, tc); */ 
3355: /* MUTANT (negate) */            if(! (!pn2))
3358: /* MUTANT (del_stmt) */ /*             JS_ASSERT(tt == TOK_XMLNAME); */ 
3358: /* MUTANT (rep_op) */            JS_ASSERT(tt != TOK_XMLNAME);
3359: /* MUTANT (del_stmt) */ /*             pn2 = XMLAtomNode(cx, ts, tc); */ 
3360: /* MUTANT (negate) */            if(! (!pn2))
3364: /* MUTANT (negate) */        if(! (!pn)) {
3365: /* MUTANT (del_stmt) */ /*             pn = pn2; */ 
3367: /* MUTANT (negate) */            if(! (!list)) {
3368: /* MUTANT (del_stmt) */ /*                 list = NewParseNode(cx, ts, PN_LIST, tc); */ 
3369: /* MUTANT (negate) */                if(! (!list))
3371: /* MUTANT (del_stmt) */ /*                 list->pn_type = TOK_XMLNAME; */ 
3372: /* MUTANT (del_stmt) */ /*                 list->pn_pos.begin = pn->pn_pos.begin; */ 
3373: /* MUTANT (del_stmt) */ /*                 PN_INIT_LIST_1(list, pn); */ 
3374: /* MUTANT (del_stmt) */ /*                 list->pn_extra = PNX_CANTFOLD; */ 
3375: /* MUTANT (del_stmt) */ /*                 pn = list; */ 
3378: /* MUTANT (del_stmt) */ /*             PN_APPEND(pn, pn2); */ 
3380: /* MUTANT (rep_op) */    } while ((tt = js_GetToken(cx, ts)) != TOK_XMLNAME || tt == TOK_LC);
3380: /* MUTANT (rep_op) */    } while ((tt = js_GetToken(cx, ts)) == TOK_XMLNAME && tt == TOK_LC);
3380: /* MUTANT (rep_op) */    } while ((tt = js_GetToken(cx, ts)) == TOK_XMLNAME || tt != TOK_LC);
3380: /* MUTANT (negate) */    } while(! ((tt = js_GetToken(cx, ts)) == TOK_XMLNAME || tt == TOK_LC));
3382: /* MUTANT (del_stmt) */ /*     js_UngetToken(ts); */ 
3383: /* MUTANT (del_stmt) */ /*     return pn; */ 
3391: /* MUTANT (rep_op) */                                 ? ((pn)->pn_extra & PNX_CANTFOLD) != 0       \
3391: /* MUTANT (rep_const) */                                 ? ((pn)->pn_extra & PNX_CANTFOLD) == 1       \
3391: /* MUTANT (rep_const) */                                 ? ((pn)->pn_extra & PNX_CANTFOLD) == -1       \
3392: /* MUTANT (rep_op) */                                 : (pn)->pn_type == TOK_LC)
3415: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2, *list; */ 
3416: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
3418: /* MUTANT (del_stmt) */ /*     pn = XMLNameExpr(cx, ts, tc); */ 
3419: /* MUTANT (negate) */    if(! (!pn))
3421: /* MUTANT (del_stmt) */ /*     *namep = (pn->pn_arity == PN_NULLARY) ? pn->pn_atom : NULL; */ 
3421: /* MUTANT (rep_op) */    *namep = (pn->pn_arity != PN_NULLARY) ? pn->pn_atom : NULL;
3422: /* MUTANT (del_stmt) */ /*     list = NULL; */ 
3424: /* MUTANT (negate) */    while(! (js_MatchToken(cx, ts, TOK_XMLSPACE))) {
3425: /* MUTANT (del_stmt) */ /*         tt = js_GetToken(cx, ts); */ 
3426: /* MUTANT (rep_op) */        if (tt == TOK_XMLNAME && tt != TOK_LC) {
3426: /* MUTANT (rep_op) */        if (tt != TOK_XMLNAME || tt != TOK_LC) {
3426: /* MUTANT (rep_op) */        if (tt != TOK_XMLNAME && tt == TOK_LC) {
3426: /* MUTANT (negate) */        if(! (tt != TOK_XMLNAME && tt != TOK_LC)) {
3427: /* MUTANT (del_stmt) */ /*             js_UngetToken(ts); */ 
3428: /* MUTANT (del_stmt) */ /*             break; */ 
3432: /* MUTANT (negate) */        if(! (!pn2))
3434: /* MUTANT (negate) */        if(! (!list)) {
3435: /* MUTANT (del_stmt) */ /*             list = NewParseNode(cx, ts, PN_LIST, tc); */ 
3436: /* MUTANT (negate) */            if(! (!list))
3438: /* MUTANT (del_stmt) */ /*             list->pn_type = tagtype; */ 
3439: /* MUTANT (del_stmt) */ /*             list->pn_pos.begin = pn->pn_pos.begin; */ 
3440: /* MUTANT (del_stmt) */ /*             PN_INIT_LIST_1(list, pn); */ 
3441: /* MUTANT (del_stmt) */ /*             pn = list; */ 
3444: /* MUTANT (negate) */        if(! (!XML_FOLDABLE(pn2)))
3447: /* MUTANT (del_stmt) */ /*         js_MatchToken(cx, ts, TOK_XMLSPACE); */ 
3448: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_ASSIGN, JSMSG_NO_ASSIGN_IN_XML_ATTR); */ 
3449: /* MUTANT (del_stmt) */ /*         js_MatchToken(cx, ts, TOK_XMLSPACE); */ 
3451: /* MUTANT (del_stmt) */ /*         tt = js_GetToken(cx, ts); */ 
3452: /* MUTANT (rep_op) */        if (tt != TOK_XMLATTR) {
3452: /* MUTANT (negate) */        if(! (tt == TOK_XMLATTR)) {
3453: /* MUTANT (del_stmt) */ /*             pn2 = XMLAtomNode(cx, ts, tc); */ 
3454: /* MUTANT (rep_op) */        } else if (tt != TOK_LC) {
3454: /* MUTANT (negate) */        } else if(! (tt == TOK_LC)) {
3455: /* MUTANT (del_stmt) */ /*             pn2 = XMLExpr(cx, ts, JS_TRUE, tc); */ 
3456: /* MUTANT (del_stmt) */ /*             pn->pn_extra |= PNX_CANTFOLD; */ 
3458: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
3460: /* MUTANT (del_stmt) */ /*             return NULL; */ 
3462: /* MUTANT (negate) */        if(! (!pn2))
3464: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
3465: /* MUTANT (del_stmt) */ /*         PN_APPEND(pn, pn2); */ 
3473: /* MUTANT (rep_op) */        if ((tt) < TOK_EOF) {                                                \
3473: /* MUTANT (rep_op) */        if ((tt) > TOK_EOF) {                                                \
3473: /* MUTANT (rep_op) */        if ((tt) >= TOK_EOF) {                                                \
3473: /* MUTANT (rep_op) */        if ((tt) == TOK_EOF) {                                                \
3473: /* MUTANT (rep_op) */        if ((tt) != TOK_EOF) {                                                \
3473: /* MUTANT (negate) */        if(! ((tt) <= TOK_EOF)) {                                                \
3474: /* MUTANT (rep_op) */            if ((tt) != TOK_EOF) {                                            \
3474: /* MUTANT (negate) */            if(! ((tt) == TOK_EOF)) {                                            \
3476: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,     \
3495: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
3496: /* MUTANT (del_stmt) */ /*     JSParseNode *pn2; */ 
3497: /* MUTANT (del_stmt) */ /*     JSAtom *textAtom; */ 
3499: /* MUTANT (del_stmt) */ /*     ts->flags &= ~TSF_XMLTAGMODE; */ 
3501: /* MUTANT (del_stmt) */ /*         ts->flags |= TSF_XMLTEXTMODE; */ 
3502: /* MUTANT (del_stmt) */ /*         tt = js_GetToken(cx, ts); */ 
3503: /* MUTANT (del_stmt) */ /*         ts->flags &= ~TSF_XMLTEXTMODE; */ 
3504: /* MUTANT (del_stmt) */ /*         XML_CHECK_FOR_ERROR_AND_EOF(tt, JS_FALSE); */ 
3506: /* MUTANT (del_stmt) */ /*         JS_ASSERT(tt == TOK_XMLSPACE || tt == TOK_XMLTEXT); */ 
3506: /* MUTANT (rep_op) */        JS_ASSERT(tt != TOK_XMLSPACE || tt == TOK_XMLTEXT);
3506: /* MUTANT (rep_op) */        JS_ASSERT(tt == TOK_XMLSPACE && tt == TOK_XMLTEXT);
3506: /* MUTANT (rep_op) */        JS_ASSERT(tt == TOK_XMLSPACE || tt != TOK_XMLTEXT);
3507: /* MUTANT (del_stmt) */ /*         textAtom = CURRENT_TOKEN(ts).t_atom; */ 
3508: /* MUTANT (negate) */        if(! (textAtom)) {
3510: /* MUTANT (del_stmt) */ /*             pn2 = XMLAtomNode(cx, ts, tc); */ 
3511: /* MUTANT (negate) */            if(! (!pn2))
3513: /* MUTANT (del_stmt) */ /*             pn->pn_pos.end = pn2->pn_pos.end; */ 
3514: /* MUTANT (del_stmt) */ /*             PN_APPEND(pn, pn2); */ 
3518: /* MUTANT (del_stmt) */ /*         tt = js_GetToken(cx, ts); */ 
3519: /* MUTANT (del_stmt) */ /*         ts->flags &= ~TSF_OPERAND; */ 
3520: /* MUTANT (del_stmt) */ /*         XML_CHECK_FOR_ERROR_AND_EOF(tt, JS_FALSE); */ 
3521: /* MUTANT (rep_op) */        if (tt != TOK_XMLETAGO)
3521: /* MUTANT (negate) */        if(! (tt == TOK_XMLETAGO))
3524: /* MUTANT (rep_op) */        if (tt != TOK_LC) {
3524: /* MUTANT (negate) */        if(! (tt == TOK_LC)) {
3525: /* MUTANT (del_stmt) */ /*             pn2 = XMLExpr(cx, ts, JS_FALSE, tc); */ 
3526: /* MUTANT (del_stmt) */ /*             pn->pn_extra |= PNX_CANTFOLD; */ 
3527: /* MUTANT (rep_op) */        } else if (tt != TOK_XMLSTAGO) {
3527: /* MUTANT (negate) */        } else if(! (tt == TOK_XMLSTAGO)) {
3528: /* MUTANT (del_stmt) */ /*             pn2 = XMLElementOrList(cx, ts, tc, JS_FALSE); */ 
3529: /* MUTANT (negate) */            if(! (pn2)) {
3530: /* MUTANT (del_stmt) */ /*                 pn2->pn_extra &= ~PNX_XMLROOT; */ 
3531: /* MUTANT (del_stmt) */ /*                 pn->pn_extra |= pn2->pn_extra; */ 
3534: /* MUTANT (rep_op) */            JS_ASSERT(tt != TOK_XMLCDATA || tt == TOK_XMLCOMMENT ||
3534: /* MUTANT (rep_op) */            JS_ASSERT(tt == TOK_XMLCDATA && tt == TOK_XMLCOMMENT ||
3534: /* MUTANT (rep_op) */            JS_ASSERT(tt == TOK_XMLCDATA || tt != TOK_XMLCOMMENT ||
3534: /* MUTANT (rep_op) */            JS_ASSERT(tt == TOK_XMLCDATA || tt == TOK_XMLCOMMENT &&
3535: /* MUTANT (rep_op) */                      tt != TOK_XMLPI);
3536: /* MUTANT (del_stmt) */ /*             pn2 = XMLAtomNode(cx, ts, tc); */ 
3538: /* MUTANT (negate) */        if(! (!pn2))
3540: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = pn2->pn_pos.end; */ 
3541: /* MUTANT (del_stmt) */ /*         PN_APPEND(pn, pn2); */ 
3544: /* MUTANT (rep_op) */    JS_ASSERT(CURRENT_TOKEN(ts).type != TOK_XMLETAGO);
3545: /* MUTANT (del_stmt) */ /*     ts->flags |= TSF_XMLTAGMODE; */ 
3546: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
3556: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2, *list; */ 
3557: /* MUTANT (del_stmt) */ /*     JSBool hadSpace; */ 
3558: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
3559: /* MUTANT (del_stmt) */ /*     JSAtom *startAtom, *endAtom; */ 
3561: /* MUTANT (del_stmt) */ /*     JS_ASSERT(CURRENT_TOKEN(ts).type == TOK_XMLSTAGO); */ 
3561: /* MUTANT (rep_op) */    JS_ASSERT(CURRENT_TOKEN(ts).type != TOK_XMLSTAGO);
3562: /* MUTANT (del_stmt) */ /*     pn = NewParseNode(cx, ts, PN_LIST, tc); */ 
3563: /* MUTANT (negate) */    if(! (!pn))
3566: /* MUTANT (del_stmt) */ /*     ts->flags |= TSF_XMLTAGMODE; */ 
3567: /* MUTANT (del_stmt) */ /*     hadSpace = js_MatchToken(cx, ts, TOK_XMLSPACE); */ 
3568: /* MUTANT (del_stmt) */ /*     tt = js_GetToken(cx, ts); */ 
3569: /* MUTANT (rep_op) */    if (tt != TOK_ERROR)
3569: /* MUTANT (negate) */    if(! (tt == TOK_ERROR))
3572: /* MUTANT (rep_op) */    if (tt != TOK_XMLNAME || tt == TOK_LC) {
3572: /* MUTANT (rep_op) */    if (tt == TOK_XMLNAME && tt == TOK_LC) {
3572: /* MUTANT (rep_op) */    if (tt == TOK_XMLNAME || tt != TOK_LC) {
3572: /* MUTANT (negate) */    if(! (tt == TOK_XMLNAME || tt == TOK_LC)) {
3576: /* MUTANT (del_stmt) */ /*         pn2 = XMLTagContent(cx, ts, tc, TOK_XMLSTAGO, &startAtom); */ 
3577: /* MUTANT (negate) */        if(! (!pn2))
3579: /* MUTANT (del_stmt) */ /*         js_MatchToken(cx, ts, TOK_XMLSPACE); */ 
3581: /* MUTANT (del_stmt) */ /*         tt = js_GetToken(cx, ts); */ 
3582: /* MUTANT (rep_op) */        if (tt != TOK_XMLPTAGC) {
3582: /* MUTANT (negate) */        if(! (tt == TOK_XMLPTAGC)) {
3584: /* MUTANT (rep_op) */            if (pn2->pn_type != TOK_XMLSTAGO) {
3584: /* MUTANT (negate) */            if(! (pn2->pn_type == TOK_XMLSTAGO)) {
3585: /* MUTANT (del_stmt) */ /*                 PN_INIT_LIST(pn); */ 
3586: /* MUTANT (del_stmt) */ /*                 RecycleTree(pn, tc); */ 
3587: /* MUTANT (del_stmt) */ /*                 pn = pn2; */ 
3589: /* MUTANT (rep_op) */                JS_ASSERT(pn2->pn_type != TOK_XMLNAME ||
3589: /* MUTANT (rep_op) */                JS_ASSERT(pn2->pn_type == TOK_XMLNAME &&
3590: /* MUTANT (rep_op) */                          pn2->pn_type != TOK_LC);
3591: /* MUTANT (del_stmt) */ /*                 PN_INIT_LIST_1(pn, pn2); */ 
3592: /* MUTANT (negate) */                if(! (!XML_FOLDABLE(pn2)))
3596: /* MUTANT (del_stmt) */ /*             pn->pn_extra |= PNX_XMLROOT; */ 
3599: /* MUTANT (rep_op) */            if (tt == TOK_XMLTAGC) {
3599: /* MUTANT (negate) */            if(! (tt != TOK_XMLTAGC)) {
3601: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,
3603: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
3608: /* MUTANT (rep_op) */            if (pn2->pn_type == TOK_XMLSTAGO) {
3608: /* MUTANT (negate) */            if(! (pn2->pn_type != TOK_XMLSTAGO)) {
3609: /* MUTANT (del_stmt) */ /*                 PN_INIT_LIST_1(pn, pn2); */ 
3610: /* MUTANT (negate) */                if(! (!XML_FOLDABLE(pn2)))
3612: /* MUTANT (del_stmt) */ /*                 pn2 = pn; */ 
3613: /* MUTANT (del_stmt) */ /*                 pn = NewParseNode(cx, ts, PN_LIST, tc); */ 
3614: /* MUTANT (negate) */                if(! (!pn))
3620: /* MUTANT (del_stmt) */ /*             PN_INIT_LIST_1(pn, pn2); */ 
3621: /* MUTANT (negate) */            if(! (!XML_FOLDABLE(pn2)))
3623: /* MUTANT (del_stmt) */ /*             pn->pn_extra |= PNX_XMLROOT; */ 
3626: /* MUTANT (negate) */            if(! (!XMLElementContent(cx, ts, pn, tc)))
3629: /* MUTANT (del_stmt) */ /*             js_MatchToken(cx, ts, TOK_XMLSPACE); */ 
3630: /* MUTANT (del_stmt) */ /*             tt = js_GetToken(cx, ts); */ 
3631: /* MUTANT (del_stmt) */ /*             XML_CHECK_FOR_ERROR_AND_EOF(tt, NULL); */ 
3632: /* MUTANT (rep_op) */            if (tt == TOK_XMLNAME && tt != TOK_LC) {
3632: /* MUTANT (rep_op) */            if (tt != TOK_XMLNAME || tt != TOK_LC) {
3632: /* MUTANT (rep_op) */            if (tt != TOK_XMLNAME && tt == TOK_LC) {
3632: /* MUTANT (negate) */            if(! (tt != TOK_XMLNAME && tt != TOK_LC)) {
3634: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,
3636: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
3641: /* MUTANT (negate) */            if(! (!pn2))
3643: /* MUTANT (rep_op) */            if (pn2->pn_type != TOK_XMLETAGO) {
3643: /* MUTANT (negate) */            if(! (pn2->pn_type == TOK_XMLETAGO)) {
3646: /* MUTANT (rep_op) */                                            JSREPORT_TS & JSREPORT_ERROR,
3648: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
3650: /* MUTANT (rep_op) */            if (endAtom || startAtom && endAtom != startAtom) {
3650: /* MUTANT (rep_op) */            if (endAtom && startAtom || endAtom != startAtom) {
3650: /* MUTANT (rep_op) */            if (endAtom && startAtom && endAtom == startAtom) {
3650: /* MUTANT (negate) */            if(! (endAtom && startAtom && endAtom != startAtom)) {
3652: /* MUTANT (del_stmt) */ /*                 ++pn2->pn_pos.begin.index; */ 
3652: /* MUTANT (rep_op) */                --pn2->pn_pos.begin.index;
3654: /* MUTANT (rep_op) */                                            JSREPORT_PN & JSREPORT_ERROR,
3656: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
3660: /* MUTANT (rep_op) */            JS_ASSERT(pn2->pn_type != TOK_XMLNAME || pn2->pn_type == TOK_LC);
3660: /* MUTANT (rep_op) */            JS_ASSERT(pn2->pn_type == TOK_XMLNAME && pn2->pn_type == TOK_LC);
3660: /* MUTANT (rep_op) */            JS_ASSERT(pn2->pn_type == TOK_XMLNAME || pn2->pn_type != TOK_LC);
3661: /* MUTANT (del_stmt) */ /*             list = NewParseNode(cx, ts, PN_LIST, tc); */ 
3662: /* MUTANT (negate) */            if(! (!list))
3664: /* MUTANT (del_stmt) */ /*             list->pn_type = TOK_XMLETAGO; */ 
3665: /* MUTANT (del_stmt) */ /*             PN_INIT_LIST_1(list, pn2); */ 
3666: /* MUTANT (del_stmt) */ /*             PN_APPEND(pn, list); */ 
3667: /* MUTANT (negate) */            if(! (!XML_FOLDABLE(pn2))) {
3668: /* MUTANT (del_stmt) */ /*                 list->pn_extra |= PNX_CANTFOLD; */ 
3669: /* MUTANT (del_stmt) */ /*                 pn->pn_extra |= PNX_CANTFOLD; */ 
3673: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_XMLTAGC, JSMSG_BAD_XML_TAG_SYNTAX); */ 
3678: /* MUTANT (rep_op) */    } else if (!hadSpace || allowList && tt == TOK_XMLTAGC) {
3678: /* MUTANT (rep_op) */    } else if (!hadSpace && allowList || tt == TOK_XMLTAGC) {
3678: /* MUTANT (rep_op) */    } else if (!hadSpace && allowList && tt != TOK_XMLTAGC) {
3678: /* MUTANT (negate) */    } else if(! (!hadSpace && allowList && tt == TOK_XMLTAGC)) {
3680: /* MUTANT (del_stmt) */ /*         pn->pn_type = TOK_XMLLIST; */ 
3681: /* MUTANT (del_stmt) */ /*         pn->pn_op = JSOP_TOXMLLIST; */ 
3682: /* MUTANT (del_stmt) */ /*         PN_INIT_LIST(pn); */ 
3683: /* MUTANT (del_stmt) */ /*         pn->pn_extra |= PNX_XMLROOT; */ 
3684: /* MUTANT (negate) */        if(! (!XMLElementContent(cx, ts, pn, tc)))
3687: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_XMLTAGC, JSMSG_BAD_XML_LIST_SYNTAX); */ 
3689: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
3691: /* MUTANT (del_stmt) */ /*         return NULL; */ 
3695: /* MUTANT (del_stmt) */ /*     ts->flags &= ~TSF_XMLTAGMODE; */ 
3696: /* MUTANT (del_stmt) */ /*     return pn; */ 
3703: /* MUTANT (del_stmt) */ /*     uint32 oldopts; */ 
3704: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
3712: /* MUTANT (del_stmt) */ /*     oldopts = JS_SetOptions(cx, cx->options | JSOPTION_XML); */ 
3712: /* MUTANT (rep_op) */    oldopts = JS_SetOptions(cx, cx->options & JSOPTION_XML);
3713: /* MUTANT (del_stmt) */ /*     pn = XMLElementOrList(cx, ts, tc, allowList); */ 
3714: /* MUTANT (del_stmt) */ /*     JS_SetOptions(cx, oldopts); */ 
3715: /* MUTANT (del_stmt) */ /*     return pn; */ 
3722: /* MUTANT (del_stmt) */ /*     JSStackFrame *fp, frame; */ 
3723: /* MUTANT (del_stmt) */ /*     JSParseNode *pn; */ 
3724: /* MUTANT (del_stmt) */ /*     JSTreeContext tc; */ 
3725: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
3732: /* MUTANT (del_stmt) */ /*     fp = cx->fp; */ 
3733: /* MUTANT (rep_op) */    if (!fp && !fp->varobj || fp->scopeChain != chain) {
3733: /* MUTANT (rep_op) */    if (!fp || !fp->varobj && fp->scopeChain != chain) {
3733: /* MUTANT (rep_op) */    if (!fp || !fp->varobj || fp->scopeChain == chain) {
3733: /* MUTANT (negate) */    if(! (!fp || !fp->varobj || fp->scopeChain != chain)) {
3734: /* MUTANT (del_stmt) */ /*         memset(&frame, 0, sizeof frame); */ 
3734: /* MUTANT (rep_const) */        memset(&frame, 1, sizeof frame);
3734: /* MUTANT (rep_const) */        memset(&frame, -1, sizeof frame);
3735: /* MUTANT (del_stmt) */ /*         frame.varobj = frame.scopeChain = chain; */ 
3736: /* MUTANT (negate) */        if(! (cx->options & JSOPTION_VAROBJFIX)) {
3737: /* MUTANT (rep_op) */            while ((chain = JS_GetParent(cx, chain)) == NULL)
3737: /* MUTANT (negate) */            while(! ((chain = JS_GetParent(cx, chain)) != NULL))
3741: /* MUTANT (negate) */        if(! (fp)) {
3742: /* MUTANT (rep_op) */            frame.flags = fp->flags & (JSFRAME_SPECIAL & JSFRAME_COMPILE_N_GO |
3742: /* MUTANT (rep_op) */            frame.flags = fp->flags & (JSFRAME_SPECIAL | JSFRAME_COMPILE_N_GO &
3749: /* MUTANT (del_stmt) */ /*     TREE_CONTEXT_INIT(&tc); */ 
3752: /* MUTANT (del_stmt) */ /*     ts->flags |= TSF_OPERAND | TSF_XMLONLYMODE; */ 
3752: /* MUTANT (rep_op) */    ts->flags |= TSF_OPERAND & TSF_XMLONLYMODE;
3753: /* MUTANT (del_stmt) */ /*     tt = js_GetToken(cx, ts); */ 
3754: /* MUTANT (del_stmt) */ /*     ts->flags &= ~TSF_OPERAND; */ 
3756: /* MUTANT (rep_op) */    if (tt == TOK_XMLSTAGO) {
3756: /* MUTANT (negate) */    if(! (tt != TOK_XMLSTAGO)) {
3757: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
3759: /* MUTANT (del_stmt) */ /*         pn = NULL; */ 
3761: /* MUTANT (del_stmt) */ /*         pn = XMLElementOrListRoot(cx, ts, &tc, allowList); */ 
3765: /* MUTANT (del_stmt) */ /*     TREE_CONTEXT_FINISH(&tc); */ 
3766: /* MUTANT (del_stmt) */ /*     JS_UNKEEP_ATOMS(cx->runtime); */ 
3767: /* MUTANT (del_stmt) */ /*     cx->fp = fp; */ 
3768: /* MUTANT (del_stmt) */ /*     return pn; */ 
3776: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
3777: /* MUTANT (del_stmt) */ /*     JSParseNode *pn, *pn2, *pn3; */ 
3780: /* MUTANT (del_stmt) */ /*     JSRuntime *rt; */ 
3785: /* MUTANT (del_stmt) */ /*     JSBool notsharp; */ 
3787: /* MUTANT (del_stmt) */ /*     defsharp = NULL; */ 
3788: /* MUTANT (del_stmt) */ /*     notsharp = JS_FALSE; */ 
3799: /* MUTANT (del_stmt) */ /*     ts->flags |= TSF_OPERAND; */ 
3800: /* MUTANT (del_stmt) */ /*     tt = js_GetToken(cx, ts); */ 
3801: /* MUTANT (del_stmt) */ /*     ts->flags &= ~TSF_OPERAND; */ 
3804: /* MUTANT (rep_op) */    if (tt != TOK_NAME) {
3804: /* MUTANT (negate) */    if(! (tt == TOK_NAME)) {
3805: /* MUTANT (del_stmt) */ /*         tt = CheckGetterOrSetter(cx, ts, TOK_FUNCTION); */ 
3806: /* MUTANT (rep_op) */        if (tt != TOK_ERROR)
3806: /* MUTANT (negate) */        if(! (tt == TOK_ERROR))
3815: /* MUTANT (negate) */        if(! (js_MatchToken(cx, ts, TOK_DBLCOLON))) {
3816: /* MUTANT (del_stmt) */ /*             pn2 = NewParseNode(cx, ts, PN_NULLARY, tc); */ 
3817: /* MUTANT (negate) */            if(! (!pn2))
3819: /* MUTANT (del_stmt) */ /*             pn2->pn_type = TOK_FUNCTION; */ 
3820: /* MUTANT (del_stmt) */ /*             pn = QualifiedSuffix(cx, ts, pn2, tc); */ 
3820: /* MUTANT (negate) */            pn = Qualif(!iedSuffix(cx, ts, pn2, tc));
3821: /* MUTANT (negate) */            if(! (!pn))
3823: /* MUTANT (del_stmt) */ /*             break; */ 
3827: /* MUTANT (negate) */        if(! (!pn))
3829: /* MUTANT (del_stmt) */ /*         break; */ 
3835: /* MUTANT (del_stmt) */ /*         JSBool matched; */ 
3836: /* MUTANT (del_stmt) */ /*         jsuint atomIndex; */ 
3838: /* MUTANT (del_stmt) */ /*         pn = NewParseNode(cx, ts, PN_LIST, tc); */ 
3839: /* MUTANT (negate) */        if(! (!pn))
3841: /* MUTANT (del_stmt) */ /*         pn->pn_type = TOK_RB; */ 
3844: /* MUTANT (negate) */        if(! (defsharp)) {
3845: /* MUTANT (del_stmt) */ /*             PN_INIT_LIST_1(pn, defsharp); */ 
3846: /* MUTANT (del_stmt) */ /*             defsharp = NULL; */ 
3851: /* MUTANT (del_stmt) */ /*         ts->flags |= TSF_OPERAND; */ 
3852: /* MUTANT (del_stmt) */ /*         matched = js_MatchToken(cx, ts, TOK_RB); */ 
3853: /* MUTANT (del_stmt) */ /*         ts->flags &= ~TSF_OPERAND; */ 
3854: /* MUTANT (negate) */        if(! (!matched)) {
3855: /* MUTANT (rep_op) */            for (atomIndex = 0; ; atomIndex--) {
3855: /* MUTANT (rep_const) */            for (atomIndex = 1; ; atomIndex++) {
3855: /* MUTANT (rep_const) */            for (atomIndex = -1; ; atomIndex++) {
3856: /* MUTANT (rep_op) */                if (atomIndex != ATOM_INDEX_LIMIT) {
3856: /* MUTANT (negate) */                if(! (atomIndex == ATOM_INDEX_LIMIT)) {
3858: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
3860: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
3864: /* MUTANT (del_stmt) */ /*                 tt = js_PeekToken(cx, ts); */ 
3865: /* MUTANT (del_stmt) */ /*                 ts->flags &= ~TSF_OPERAND; */ 
3866: /* MUTANT (rep_op) */                if (tt != TOK_RB) {
3866: /* MUTANT (negate) */                if(! (tt == TOK_RB)) {
3867: /* MUTANT (del_stmt) */ /*                     pn->pn_extra |= PNX_ENDCOMMA; */ 
3868: /* MUTANT (del_stmt) */ /*                     break; */ 
3871: /* MUTANT (rep_op) */                if (tt != TOK_COMMA) {
3871: /* MUTANT (negate) */                if(! (tt == TOK_COMMA)) {
3873: /* MUTANT (del_stmt) */ /*                     js_MatchToken(cx, ts, TOK_COMMA); */ 
3874: /* MUTANT (del_stmt) */ /*                     pn2 = NewParseNode(cx, ts, PN_NULLARY, tc); */ 
3876: /* MUTANT (del_stmt) */ /*                     pn2 = AssignExpr(cx, ts, tc); */ 
3878: /* MUTANT (negate) */                if(! (!pn2))
3880: /* MUTANT (del_stmt) */ /*                 PN_APPEND(pn, pn2); */ 
3882: /* MUTANT (rep_op) */                if (tt == TOK_COMMA) {
3882: /* MUTANT (negate) */                if(! (tt != TOK_COMMA)) {
3884: /* MUTANT (negate) */                    if(! (!js_MatchToken(cx, ts, TOK_COMMA)))
3892: /* MUTANT (del_stmt) */ /*         return pn; */ 
3897: /* MUTANT (negate) */        if(! (!pn))
3899: /* MUTANT (del_stmt) */ /*         pn->pn_type = TOK_RC; */ 
3902: /* MUTANT (negate) */        if(! (defsharp)) {
3903: /* MUTANT (del_stmt) */ /*             PN_INIT_LIST_1(pn, defsharp); */ 
3904: /* MUTANT (del_stmt) */ /*             defsharp = NULL; */ 
3909: /* MUTANT (negate) */        if(! (!js_MatchToken(cx, ts, TOK_RC))) {
3911: /* MUTANT (del_stmt) */ /*                 JSOp op; */ 
3913: /* MUTANT (del_stmt) */ /*                 tt = js_GetToken(cx, ts); */ 
3917: /* MUTANT (negate) */                    if(! (pn3))
3919: /* MUTANT (del_stmt) */ /*                     break; */ 
3923: /* MUTANT (del_stmt) */ /*                     rt = cx->runtime; */ 
3924: /* MUTANT (rep_op) */                    if (atom != rt->atomState.getAtom ||
3924: /* MUTANT (rep_op) */                    if (atom == rt->atomState.getAtom &&
3925: /* MUTANT (rep_op) */                        atom != rt->atomState.setAtom) {
3926: /* MUTANT (rep_op) */                        op = (atom != rt->atomState.getAtom)
3929: /* MUTANT (negate) */                        if(! (js_MatchToken(cx, ts, TOK_NAME))) {
3930: /* MUTANT (del_stmt) */ /*                             pn3 = NewParseNode(cx, ts, PN_NAME, tc); */ 
3931: /* MUTANT (negate) */                            if(! (!pn3))
3933: /* MUTANT (del_stmt) */ /*                             pn3->pn_atom = CURRENT_TOKEN(ts).t_atom; */ 
3934: /* MUTANT (del_stmt) */ /*                             pn3->pn_expr = NULL; */ 
3937: /* MUTANT (del_stmt) */ /*                             CURRENT_TOKEN(ts).t_op = JSOP_NOP; */ 
3938: /* MUTANT (del_stmt) */ /*                             CURRENT_TOKEN(ts).type = TOK_FUNCTION; */ 
3939: /* MUTANT (del_stmt) */ /*                             pn2 = FunctionExpr(cx, ts, tc); */ 
3940: /* MUTANT (del_stmt) */ /*                             pn2 = NewBinary(cx, TOK_COLON, op, pn3, pn2, tc); */ 
3941: /* MUTANT (del_stmt) */ /*                             goto skip; */ 
3948: /* MUTANT (negate) */                    if(! (pn3))
3950: /* MUTANT (del_stmt) */ /*                     break; */ 
3953: /* MUTANT (rep_op) */                                                     JSREPORT_TS &
3954: /* MUTANT (rep_op) */                                                     JSREPORT_WARNING &
3957: /* MUTANT (del_stmt) */ /*                         return NULL; */ 
3962: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
3964: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
3969: /* MUTANT (rep_op) */                if (tt != TOK_NAME) {
3969: /* MUTANT (negate) */                if(! (tt == TOK_NAME)) {
3970: /* MUTANT (del_stmt) */ /*                     tt = CheckGetterOrSetter(cx, ts, TOK_COLON); */ 
3971: /* MUTANT (rep_op) */                    if (tt != TOK_ERROR)
3971: /* MUTANT (negate) */                    if(! (tt == TOK_ERROR))
3975: /* MUTANT (rep_op) */                if (tt == TOK_COLON) {
3975: /* MUTANT (negate) */                if(! (tt != TOK_COLON)) {
3977: /* MUTANT (rep_op) */                                                JSREPORT_TS & JSREPORT_ERROR,
3979: /* MUTANT (del_stmt) */ /*                     return NULL; */ 
3987: /* MUTANT (negate) */                if(! (!pn2))
3989: /* MUTANT (del_stmt) */ /*                 PN_APPEND(pn, pn2); */ 
3990: /* MUTANT (del_stmt) */ /*             } while (js_MatchToken(cx, ts, TOK_COMMA)); */ 
3990: /* MUTANT (negate) */            } while(! (js_MatchToken(cx, ts, TOK_COMMA)));
3992: /* MUTANT (del_stmt) */ /*             MUST_MATCH_TOKEN(TOK_RC, JSMSG_CURLY_AFTER_LIST); */ 
3996: /* MUTANT (del_stmt) */ /*         return pn; */ 
4000: /* MUTANT (negate) */        if(! (defsharp))
4002: /* MUTANT (del_stmt) */ /*         defsharp = NewParseNode(cx, ts, PN_UNARY, tc); */ 
4003: /* MUTANT (negate) */        if(! (!defsharp))
4005: /* MUTANT (del_stmt) */ /*         defsharp->pn_kid = NULL; */ 
4006: /* MUTANT (del_stmt) */ /*         defsharp->pn_num = (jsint) CURRENT_TOKEN(ts).t_dval; */ 
4007: /* MUTANT (del_stmt) */ /*         goto again; */ 
4012: /* MUTANT (negate) */        if(! (!pn))
4014: /* MUTANT (del_stmt) */ /*         pn->pn_num = (jsint) CURRENT_TOKEN(ts).t_dval; */ 
4015: /* MUTANT (del_stmt) */ /*         notsharp = JS_TRUE; */ 
4016: /* MUTANT (del_stmt) */ /*         break; */ 
4022: /* MUTANT (negate) */        if(! (!pn))
4024: /* MUTANT (del_stmt) */ /*         pn2 = BracketedExpr(cx, ts, tc); */ 
4025: /* MUTANT (negate) */        if(! (!pn2))
4028: /* MUTANT (del_stmt) */ /*         MUST_MATCH_TOKEN(TOK_RP, JSMSG_PAREN_IN_PAREN); */ 
4029: /* MUTANT (del_stmt) */ /*         pn->pn_type = TOK_RP; */ 
4030: /* MUTANT (del_stmt) */ /*         pn->pn_pos.end = CURRENT_TOKEN(ts).pos.end; */ 
4031: /* MUTANT (del_stmt) */ /*         pn->pn_kid = pn2; */ 
4032: /* MUTANT (del_stmt) */ /*         break; */ 
4036: /* MUTANT (negate) */        pn = Qualif(!iedIdentifier(cx, ts, tc));
4037: /* MUTANT (negate) */        if(! (!pn))
4039: /* MUTANT (del_stmt) */ /*         notsharp = JS_TRUE; */ 
4040: /* MUTANT (del_stmt) */ /*         break; */ 
4043: /* MUTANT (negate) */        pn = AttributeIdentif(!ier(cx, ts, tc));
4044: /* MUTANT (negate) */        if(! (!pn))
4046: /* MUTANT (del_stmt) */ /*         notsharp = JS_TRUE; */ 
4047: /* MUTANT (del_stmt) */ /*         break; */ 
4051: /* MUTANT (negate) */        if(! (!pn))
4053: /* MUTANT (del_stmt) */ /*         notsharp = JS_TRUE; */      /* XXXbe could be sharp? */
4054: /* MUTANT (del_stmt) */ /*         break; */ 
4071: /* MUTANT (negate) */        if(! (!pn))
4073: /* MUTANT (del_stmt) */ /*         pn->pn_atom = CURRENT_TOKEN(ts).t_atom; */ 
4075: /* MUTANT (rep_op) */        if (tt != TOK_XMLPI)
4075: /* MUTANT (negate) */        if(! (tt == TOK_XMLPI))
4080: /* MUTANT (rep_op) */        if (tt != TOK_NAME) {
4080: /* MUTANT (negate) */        if(! (tt == TOK_NAME)) {
4081: /* MUTANT (del_stmt) */ /*             pn->pn_arity = PN_NAME; */ 
4082: /* MUTANT (del_stmt) */ /*             pn->pn_expr = NULL; */ 
4083: /* MUTANT (del_stmt) */ /*             pn->pn_slot = -1; */ 
4083: /* MUTANT (rep_const) */            pn->pn_slot = 0;
4083: /* MUTANT (rep_const) */            pn->pn_slot = 1;
4083: /* MUTANT (rep_const) */            pn->pn_slot = ((-1)+1);
4083: /* MUTANT (rep_const) */            pn->pn_slot = ((-1)-1);
4084: /* MUTANT (del_stmt) */ /*             pn->pn_attrs = 0; */ 
4084: /* MUTANT (rep_const) */            pn->pn_attrs = 1;
4084: /* MUTANT (rep_const) */            pn->pn_attrs = -1;
4087: /* MUTANT (negate) */            if(! (js_MatchToken(cx, ts, TOK_DBLCOLON))) {
4088: /* MUTANT (del_stmt) */ /*                 pn = QualifiedSuffix(cx, ts, pn, tc); */ 
4088: /* MUTANT (negate) */                pn = Qualif(!iedSuffix(cx, ts, pn, tc));
4089: /* MUTANT (negate) */                if(! (!pn))
4091: /* MUTANT (del_stmt) */ /*                 break; */ 
4096: /* MUTANT (rep_op) */            if (pn->pn_atom != cx->runtime->atomState.parentAtom ||
4096: /* MUTANT (rep_op) */            if (pn->pn_atom == cx->runtime->atomState.parentAtom &&
4097: /* MUTANT (rep_op) */                pn->pn_atom != cx->runtime->atomState.protoAtom) {
4098: /* MUTANT (del_stmt) */ /*                 tc->flags |= TCF_FUN_HEAVYWEIGHT; */ 
4100: /* MUTANT (del_stmt) */ /*                 JSAtomListElement *ale; */ 
4101: /* MUTANT (del_stmt) */ /*                 JSStackFrame *fp; */ 
4102: /* MUTANT (del_stmt) */ /*                 JSStmtInfo *stmt; */ 
4105: /* MUTANT (del_stmt) */ /*                 ATOM_LIST_SEARCH(ale, &tc->decls, pn->pn_atom); */ 
4106: /* MUTANT (rep_op) */                if (ale ||
4107: /* MUTANT (rep_op) */                    !(fp = cx->fp)->fun ||
4108: /* MUTANT (rep_op) */                    fp->scopeChain != fp->varobj &&
4108: /* MUTANT (rep_op) */                    fp->scopeChain == fp->varobj ||
4109: /* MUTANT (rep_op) */                    !js_InWithStatement(tc) ||
4111: /* MUTANT (del_stmt) */ /*                     tc->globalUses++; */ 
4111: /* MUTANT (rep_op) */                    tc->globalUses--;
4113: /* MUTANT (negate) */                        if(! (STMT_IS_LOOP(stmt))) {
4114: /* MUTANT (del_stmt) */ /*                             tc->loopyGlobalUses++; */ 
4114: /* MUTANT (rep_op) */                            tc->loopyGlobalUses--;
4115: /* MUTANT (del_stmt) */ /*                             break; */ 
4125: /* MUTANT (negate) */        if(! (!pn))
4127: /* MUTANT (del_stmt) */ /*         pn->pn_dval = CURRENT_TOKEN(ts).t_dval; */ 
4135: /* MUTANT (negate) */        if(! (!pn))
4137: /* MUTANT (del_stmt) */ /*         pn->pn_op = CURRENT_TOKEN(ts).t_op; */ 
4152: /* MUTANT (rep_op) */        js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
4154: /* MUTANT (del_stmt) */ /*         return NULL; */ 
4158: /* MUTANT (negate) */    if(! (defsharp)) {
4159: /* MUTANT (negate) */        if(! (notsharp)) {
4161: /* MUTANT (rep_op) */            js_ReportCompileErrorNumber(cx, ts, JSREPORT_TS & JSREPORT_ERROR,
4163: /* MUTANT (del_stmt) */ /*             return NULL; */ 
4166: /* MUTANT (del_stmt) */ /*         return defsharp; */ 
4175: /* MUTANT (del_stmt) */ /*     JSParseNode *pn2; */ 
4177: /* MUTANT (negate) */    if(! (!pn))
4181: /* MUTANT (rep_op) */        if (pn->pn_type != TOK_VAR)
4181: /* MUTANT (negate) */        if(! (pn->pn_type == TOK_VAR))
4184: /* MUTANT (negate) */            if(! (ContainsVarStmt(pn2)))
4189: /* MUTANT (rep_op) */        return ContainsVarStmt(pn->pn_kid1) &&
4190: /* MUTANT (rep_op) */               ContainsVarStmt(pn->pn_kid2) &&
4197: /* MUTANT (rep_op) */        if (pn->pn_op == JSOP_NOP)
4197: /* MUTANT (negate) */        if(! (pn->pn_op != JSOP_NOP))
4199: /* MUTANT (del_stmt) */ /*         return ContainsVarStmt(pn->pn_left) || ContainsVarStmt(pn->pn_right); */ 
4199: /* MUTANT (rep_op) */        return ContainsVarStmt(pn->pn_left) && ContainsVarStmt(pn->pn_right);
4201: /* MUTANT (rep_op) */        if (pn->pn_op == JSOP_NOP)
4201: /* MUTANT (negate) */        if(! (pn->pn_op != JSOP_NOP))
4203: /* MUTANT (del_stmt) */ /*         return ContainsVarStmt(pn->pn_kid); */ 
4204: /* MUTANT (del_stmt) */ /*       default:; */ 
4216: /* MUTANT (rep_op) */    if (pn->pn_type == type) {
4216: /* MUTANT (negate) */    if(! (pn->pn_type != type)) {
4219: /* MUTANT (rep_op) */            if (pn->pn_type != TOK_STRING) {
4219: /* MUTANT (negate) */            if(! (pn->pn_type == TOK_STRING)) {
4220: /* MUTANT (del_stmt) */ /*                 jsdouble d; */ 
4221: /* MUTANT (negate) */                if(! (!js_ValueToNumber(cx, ATOM_KEY(pn->pn_atom), &d)))
4223: /* MUTANT (del_stmt) */ /*                 pn->pn_dval = d; */ 
4224: /* MUTANT (del_stmt) */ /*                 pn->pn_type = TOK_NUMBER; */ 
4225: /* MUTANT (del_stmt) */ /*                 pn->pn_op = JSOP_NUMBER; */ 
4230: /* MUTANT (rep_op) */            if (pn->pn_type != TOK_NUMBER) {
4230: /* MUTANT (negate) */            if(! (pn->pn_type == TOK_NUMBER)) {
4231: /* MUTANT (del_stmt) */ /*                 JSString *str = js_NumberToString(cx, pn->pn_dval); */ 
4232: /* MUTANT (negate) */                if(! (!str))
4234: /* MUTANT (del_stmt) */ /*                 pn->pn_atom = js_AtomizeString(cx, str, 0); */ 
4234: /* MUTANT (rep_const) */                pn->pn_atom = js_AtomizeString(cx, str, 1);
4234: /* MUTANT (rep_const) */                pn->pn_atom = js_AtomizeString(cx, str, -1);
4235: /* MUTANT (negate) */                if(! (!pn->pn_atom))
4237: /* MUTANT (del_stmt) */ /*                 pn->pn_type = TOK_STRING; */ 
4238: /* MUTANT (del_stmt) */ /*                 pn->pn_op = JSOP_STRING; */ 
4242: /* MUTANT (del_stmt) */ /*           default:; */ 
4257: /* MUTANT (del_stmt) */ /*     jsdouble d, d2; */ 
4258: /* MUTANT (del_stmt) */ /*     int32 i, j; */ 
4259: /* MUTANT (del_stmt) */ /*     uint32 u; */ 
4261: /* MUTANT (del_stmt) */ /*     JS_ASSERT(pn1->pn_type == TOK_NUMBER && pn2->pn_type == TOK_NUMBER); */ 
4261: /* MUTANT (rep_op) */    JS_ASSERT(pn1->pn_type != TOK_NUMBER && pn2->pn_type == TOK_NUMBER);
4261: /* MUTANT (rep_op) */    JS_ASSERT(pn1->pn_type == TOK_NUMBER || pn2->pn_type == TOK_NUMBER);
4261: /* MUTANT (rep_op) */    JS_ASSERT(pn1->pn_type == TOK_NUMBER && pn2->pn_type != TOK_NUMBER);
4262: /* MUTANT (del_stmt) */ /*     d = pn1->pn_dval; */ 
4263: /* MUTANT (del_stmt) */ /*     d2 = pn2->pn_dval; */ 
4267: /* MUTANT (negate) */        if(! (!js_DoubleToECMAInt32(cx, d, &i)))
4269: /* MUTANT (negate) */        if(! (!js_DoubleToECMAInt32(cx, d2, &j)))
4271: /* MUTANT (del_stmt) */ /*         j &= 31; */ 
4271: /* MUTANT (rep_const) */        j &= 0;
4271: /* MUTANT (rep_const) */        j &= 1;
4271: /* MUTANT (rep_const) */        j &= -1;
4271: /* MUTANT (rep_const) */        j &= ((31)+1);
4271: /* MUTANT (rep_const) */        j &= ((31)-1);
4272: /* MUTANT (del_stmt) */ /*         d = (op == JSOP_LSH) ? i << j : i >> j; */ 
4272: /* MUTANT (rep_op) */        d = (op != JSOP_LSH) ? i << j : i >> j;
4273: /* MUTANT (del_stmt) */ /*         break; */ 
4276: /* MUTANT (negate) */        if(! (!js_DoubleToECMAUint32(cx, d, &u)))
4278: /* MUTANT (negate) */        if(! (!js_DoubleToECMAInt32(cx, d2, &j)))
4280: /* MUTANT (del_stmt) */ /*         j &= 31; */ 
4280: /* MUTANT (rep_const) */        j &= 0;
4280: /* MUTANT (rep_const) */        j &= 1;
4280: /* MUTANT (rep_const) */        j &= -1;
4280: /* MUTANT (rep_const) */        j &= ((31)+1);
4280: /* MUTANT (rep_const) */        j &= ((31)-1);
4281: /* MUTANT (del_stmt) */ /*         d = u >> j; */ 
4282: /* MUTANT (del_stmt) */ /*         break; */ 
4285: /* MUTANT (rep_op) */        d -= d2;
4285: /* MUTANT (rep_op) */        d *= d2;
4285: /* MUTANT (rep_op) */        d %= d2;
4286: /* MUTANT (del_stmt) */ /*         break; */ 
4289: /* MUTANT (rep_op) */        d += d2;
4289: /* MUTANT (rep_op) */        d *= d2;
4289: /* MUTANT (rep_op) */        d %= d2;
4290: /* MUTANT (del_stmt) */ /*         break; */ 
4293: /* MUTANT (rep_op) */        d += d2;
4293: /* MUTANT (rep_op) */        d -= d2;
4293: /* MUTANT (rep_op) */        d %= d2;
4294: /* MUTANT (del_stmt) */ /*         break; */ 
4297: /* MUTANT (rep_op) */        if (d2 != 0) {
4297: /* MUTANT (rep_const) */        if (d2 == 1) {
4297: /* MUTANT (rep_const) */        if (d2 == -1) {
4297: /* MUTANT (negate) */        if(! (d2 == 0)) {
4300: /* MUTANT (negate) */            if(! (JSDOUBLE_IS_NaN(d2)))
4304: /* MUTANT (rep_op) */            if (d != 0 || JSDOUBLE_IS_NaN(d))
4304: /* MUTANT (rep_op) */            if (d == 0 && JSDOUBLE_IS_NaN(d))
4304: /* MUTANT (rep_const) */            if (d == 1 || JSDOUBLE_IS_NaN(d))
4304: /* MUTANT (rep_const) */            if (d == -1 || JSDOUBLE_IS_NaN(d))
4304: /* MUTANT (negate) */            if(! (d == 0 || JSDOUBLE_IS_NaN(d)))
4306: /* MUTANT (rep_const) */            else if ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> 0)
4306: /* MUTANT (rep_const) */            else if ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> 1)
4306: /* MUTANT (rep_const) */            else if ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> -1)
4306: /* MUTANT (rep_const) */            else if ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> ((31)+1))
4306: /* MUTANT (rep_const) */            else if ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> ((31)-1))
4306: /* MUTANT (negate) */            else if(! ((JSDOUBLE_HI32(d) ^ JSDOUBLE_HI32(d2)) >> 31))
4311: /* MUTANT (del_stmt) */ /*             d /= d2; */ 
4316: /* MUTANT (rep_op) */        if (d2 != 0) {
4316: /* MUTANT (rep_const) */        if (d2 == 1) {
4316: /* MUTANT (rep_const) */        if (d2 == -1) {
4316: /* MUTANT (negate) */        if(! (d2 == 0)) {
4317: /* MUTANT (del_stmt) */ /*             d = *cx->runtime->jsNaN; */ 
4321: /* MUTANT (rep_op) */          if (!(JSDOUBLE_IS_FINITE(d) || JSDOUBLE_IS_INFINITE(d2)))
4321: /* MUTANT (negate) */          if(! (!(JSDOUBLE_IS_FINITE(d) && JSDOUBLE_IS_INFINITE(d2))))
4327: /* MUTANT (del_stmt) */ /*       default:; */ 
4331: /* MUTANT (rep_op) */    if (pn1 == pn)
4331: /* MUTANT (negate) */    if(! (pn1 != pn))
4333: /* MUTANT (rep_op) */    if (pn2 == pn)
4333: /* MUTANT (negate) */    if(! (pn2 != pn))
4335: /* MUTANT (del_stmt) */ /*     pn->pn_type = TOK_NUMBER; */ 
4336: /* MUTANT (del_stmt) */ /*     pn->pn_op = JSOP_NUMBER; */ 
4337: /* MUTANT (del_stmt) */ /*     pn->pn_arity = PN_NULLARY; */ 
4338: /* MUTANT (del_stmt) */ /*     pn->pn_dval = d; */ 
4339: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
4347: /* MUTANT (del_stmt) */ /*     JSTokenType tt; */ 
4348: /* MUTANT (del_stmt) */ /*     JSParseNode **pnp, *pn1, *pn2; */ 
4349: /* MUTANT (del_stmt) */ /*     JSString *accum, *str; */ 
4350: /* MUTANT (del_stmt) */ /*     uint32 i, j; */ 
4352: /* MUTANT (del_stmt) */ /*     JS_ASSERT(pn->pn_arity == PN_LIST); */ 
4352: /* MUTANT (rep_op) */    JS_ASSERT(pn->pn_arity != PN_LIST);
4353: /* MUTANT (del_stmt) */ /*     tt = pn->pn_type; */ 
4354: /* MUTANT (del_stmt) */ /*     pnp = &pn->pn_head; */ 
4355: /* MUTANT (del_stmt) */ /*     pn1 = *pnp; */ 
4356: /* MUTANT (del_stmt) */ /*     accum = NULL; */ 
4357: /* MUTANT (rep_op) */    if ((pn->pn_extra & PNX_CANTFOLD) != 0) {
4357: /* MUTANT (rep_const) */    if ((pn->pn_extra & PNX_CANTFOLD) == 1) {
4357: /* MUTANT (rep_const) */    if ((pn->pn_extra & PNX_CANTFOLD) == -1) {
4357: /* MUTANT (negate) */    if(! ((pn->pn_extra & PNX_CANTFOLD) == 0)) {
4358: /* MUTANT (rep_op) */        if (tt != TOK_XMLETAGO)
4358: /* MUTANT (negate) */        if(! (tt == TOK_XMLETAGO))
4360: /* MUTANT (rep_op) */        else if (tt != TOK_XMLSTAGO || tt == TOK_XMLPTAGC)
4360: /* MUTANT (rep_op) */        else if (tt == TOK_XMLSTAGO && tt == TOK_XMLPTAGC)
4360: /* MUTANT (rep_op) */        else if (tt == TOK_XMLSTAGO || tt != TOK_XMLPTAGC)
4360: /* MUTANT (negate) */        else if(! (tt == TOK_XMLSTAGO || tt == TOK_XMLPTAGC))
4364: /* MUTANT (rep_op) */    for (pn2 = pn1, i = j = 0; pn2; pn2 = pn2->pn_next, i--) {
4364: /* MUTANT (rep_const) */    for (pn2 = pn1, i = j = 1; pn2; pn2 = pn2->pn_next, i++) {
4364: /* MUTANT (rep_const) */    for (pn2 = pn1, i = j = -1; pn2; pn2 = pn2->pn_next, i++) {
4366: /* MUTANT (del_stmt) */ /*         JS_ASSERT(tt != TOK_XMLETAGO || i == 0); */ 
4366: /* MUTANT (rep_op) */        JS_ASSERT(tt == TOK_XMLETAGO || i == 0);
4366: /* MUTANT (rep_op) */        JS_ASSERT(tt != TOK_XMLETAGO && i == 0);
4366: /* MUTANT (rep_op) */        JS_ASSERT(tt != TOK_XMLETAGO || i != 0);
4366: /* MUTANT (rep_const) */        JS_ASSERT(tt != TOK_XMLETAGO || i == 1);
4366: /* MUTANT (rep_const) */        JS_ASSERT(tt != TOK_XMLETAGO || i == -1);
4369: /* MUTANT (negate) */            if(! (!accum))
4376: /* MUTANT (rep_op) */            if (pn2->pn_arity != PN_LIST)
4376: /* MUTANT (negate) */            if(! (pn2->pn_arity == PN_LIST))
4378: /* MUTANT (del_stmt) */ /*             str = ATOM_TO_STRING(pn2->pn_atom); */ 
4379: /* MUTANT (del_stmt) */ /*             break; */ 
4383: /* MUTANT (negate) */            if(! (!str))
4385: /* MUTANT (del_stmt) */ /*             break; */ 
4389: /* MUTANT (negate) */            if(! (!str))
4391: /* MUTANT (del_stmt) */ /*             break; */ 
4396: /* MUTANT (negate) */            if(! (!str))
4398: /* MUTANT (del_stmt) */ /*             break; */ 
4402: /* MUTANT (rep_op) */            JS_ASSERT(*pnp != pn1);
4403: /* MUTANT (rep_op) */            if ((tt != TOK_XMLSTAGO || tt == TOK_XMLPTAGC) &&
4403: /* MUTANT (rep_op) */            if ((tt == TOK_XMLSTAGO && tt == TOK_XMLPTAGC) &&
4403: /* MUTANT (rep_op) */            if ((tt == TOK_XMLSTAGO || tt != TOK_XMLPTAGC) &&
4403: /* MUTANT (rep_op) */            if ((tt == TOK_XMLSTAGO || tt == TOK_XMLPTAGC) ||
4404: /* MUTANT (rep_const) */                (i & 0) ^ (j & 1)) {
4404: /* MUTANT (rep_const) */                (i & -1) ^ (j & 1)) {
4404: /* MUTANT (rep_const) */                (i & ((1)+1)) ^ (j & 1)) {
4404: /* MUTANT (rep_const) */                (i & 1) ^ (j & 0)) {
4404: /* MUTANT (rep_const) */                (i & 1) ^ (j & -1)) {
4404: /* MUTANT (rep_const) */                (i & 1) ^ (j & ((1)+1))) {
4406: /* MUTANT (rep_const) */                printf("0: %d, %d => %s\n",
4406: /* MUTANT (rep_const) */                printf("-1: %d, %d => %s\n",
4406: /* MUTANT (rep_const) */                printf("((1)+1): %d, %d => %s\n",
4409: /* MUTANT (rep_op) */            } else if (accum || pn1 != pn2) {
4409: /* MUTANT (rep_op) */            } else if (accum && pn1 == pn2) {
4409: /* MUTANT (negate) */            } else if(! (accum && pn1 != pn2)) {
4410: /* MUTANT (rep_op) */                while (pn1->pn_next == pn2) {
4410: /* MUTANT (negate) */                while(! (pn1->pn_next != pn2)) {
4411: /* MUTANT (del_stmt) */ /*                     pn1 = RecycleTree(pn1, tc); */ 
4412: /* MUTANT (del_stmt) */ /*                     --pn->pn_count; */ 
4412: /* MUTANT (rep_op) */                    ++pn->pn_count;
4415: /* MUTANT (del_stmt) */ /*                 pn1->pn_op = JSOP_STRING; */ 
4416: /* MUTANT (del_stmt) */ /*                 pn1->pn_arity = PN_NULLARY; */ 
4417: /* MUTANT (del_stmt) */ /*                 pn1->pn_atom = js_AtomizeString(cx, accum, 0); */ 
4417: /* MUTANT (rep_const) */                pn1->pn_atom = js_AtomizeString(cx, accum, 1);
4417: /* MUTANT (rep_const) */                pn1->pn_atom = js_AtomizeString(cx, accum, -1);
4418: /* MUTANT (negate) */                if(! (!pn1->pn_atom))
4420: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(pnp != &pn1->pn_next); */ 
4420: /* MUTANT (rep_op) */                JS_ASSERT(pnp == &pn1->pn_next);
4421: /* MUTANT (del_stmt) */ /*                 *pnp = pn1; */ 
4424: /* MUTANT (del_stmt) */ /*             pn1 = *pnp; */ 
4425: /* MUTANT (del_stmt) */ /*             accum = NULL; */ 
4426: /* MUTANT (del_stmt) */ /*             continue; */ 
4429: /* MUTANT (negate) */        if(! (accum)) {
4430: /* MUTANT (rep_op) */            str = ((tt != TOK_XMLSTAGO || tt == TOK_XMLPTAGC) && i != 0)
4430: /* MUTANT (rep_op) */            str = ((tt == TOK_XMLSTAGO && tt == TOK_XMLPTAGC) && i != 0)
4430: /* MUTANT (rep_op) */            str = ((tt == TOK_XMLSTAGO || tt != TOK_XMLPTAGC) && i != 0)
4430: /* MUTANT (rep_op) */            str = ((tt == TOK_XMLSTAGO || tt == TOK_XMLPTAGC) || i != 0)
4430: /* MUTANT (rep_op) */            str = ((tt == TOK_XMLSTAGO || tt == TOK_XMLPTAGC) && i == 0)
4430: /* MUTANT (rep_const) */            str = ((tt == TOK_XMLSTAGO || tt == TOK_XMLPTAGC) && i != 1)
4430: /* MUTANT (rep_const) */            str = ((tt == TOK_XMLSTAGO || tt == TOK_XMLPTAGC) && i != -1)
4431: /* MUTANT (rep_const) */                  ? js_AddAttributePart(cx, i & 0, accum, str)
4431: /* MUTANT (rep_const) */                  ? js_AddAttributePart(cx, i & -1, accum, str)
4431: /* MUTANT (rep_const) */                  ? js_AddAttributePart(cx, i & ((1)+1), accum, str)
4433: /* MUTANT (negate) */            if(! (!str))
4436: /* MUTANT (rep_const) */            printf("0: %d, %d => %s (%u)\n",
4436: /* MUTANT (rep_const) */            printf("1: %d, %d => %s (%u)\n",
4436: /* MUTANT (rep_const) */            printf("-1: %d, %d => %s (%u)\n",
4436: /* MUTANT (rep_const) */            printf("((2)+1): %d, %d => %s (%u)\n",
4436: /* MUTANT (rep_const) */            printf("((2)-1): %d, %d => %s (%u)\n",
4439: /* MUTANT (rep_op) */            --j;
4444: /* MUTANT (negate) */    if(! (accum)) {
4445: /* MUTANT (del_stmt) */ /*         str = NULL; */ 
4446: /* MUTANT (rep_op) */        if ((pn->pn_extra & PNX_CANTFOLD) != 0) {
4446: /* MUTANT (rep_const) */        if ((pn->pn_extra & PNX_CANTFOLD) == 1) {
4446: /* MUTANT (rep_const) */        if ((pn->pn_extra & PNX_CANTFOLD) == -1) {
4446: /* MUTANT (negate) */        if(! ((pn->pn_extra & PNX_CANTFOLD) == 0)) {
4447: /* MUTANT (rep_op) */            if (tt != TOK_XMLPTAGC)
4447: /* MUTANT (negate) */            if(! (tt == TOK_XMLPTAGC))
4449: /* MUTANT (rep_op) */            else if (tt != TOK_XMLSTAGO || tt == TOK_XMLETAGO)
4449: /* MUTANT (rep_op) */            else if (tt == TOK_XMLSTAGO && tt == TOK_XMLETAGO)
4449: /* MUTANT (rep_op) */            else if (tt == TOK_XMLSTAGO || tt != TOK_XMLETAGO)
4449: /* MUTANT (negate) */            else if(! (tt == TOK_XMLSTAGO || tt == TOK_XMLETAGO))
4452: /* MUTANT (negate) */        if(! (str)) {
4453: /* MUTANT (del_stmt) */ /*             accum = js_ConcatStrings(cx, accum, str); */ 
4454: /* MUTANT (negate) */            if(! (!accum))
4458: /* MUTANT (rep_op) */        JS_ASSERT(*pnp != pn1);
4459: /* MUTANT (negate) */        while(! (pn1->pn_next)) {
4460: /* MUTANT (del_stmt) */ /*             pn1 = RecycleTree(pn1, tc); */ 
4461: /* MUTANT (del_stmt) */ /*             --pn->pn_count; */ 
4461: /* MUTANT (rep_op) */            ++pn->pn_count;
4464: /* MUTANT (del_stmt) */ /*         pn1->pn_op = JSOP_STRING; */ 
4465: /* MUTANT (del_stmt) */ /*         pn1->pn_arity = PN_NULLARY; */ 
4466: /* MUTANT (del_stmt) */ /*         pn1->pn_atom = js_AtomizeString(cx, accum, 0); */ 
4466: /* MUTANT (rep_const) */        pn1->pn_atom = js_AtomizeString(cx, accum, 1);
4466: /* MUTANT (rep_const) */        pn1->pn_atom = js_AtomizeString(cx, accum, -1);
4467: /* MUTANT (negate) */        if(! (!pn1->pn_atom))
4469: /* MUTANT (del_stmt) */ /*         JS_ASSERT(pnp != &pn1->pn_next); */ 
4469: /* MUTANT (rep_op) */        JS_ASSERT(pnp == &pn1->pn_next);
4470: /* MUTANT (del_stmt) */ /*         *pnp = pn1; */ 
4473: /* MUTANT (rep_op) */    if (pn1 || pn->pn_count == 1) {
4473: /* MUTANT (rep_op) */    if (pn1 && pn->pn_count != 1) {
4473: /* MUTANT (rep_const) */    if (pn1 && pn->pn_count == 0) {
4473: /* MUTANT (rep_const) */    if (pn1 && pn->pn_count == -1) {
4473: /* MUTANT (rep_const) */    if (pn1 && pn->pn_count == ((1)+1)) {
4473: /* MUTANT (negate) */    if(! (pn1 && pn->pn_count == 1)) {
4481: /* MUTANT (negate) */        if(! (!(pn->pn_extra & PNX_XMLROOT))) {
4482: /* MUTANT (del_stmt) */ /*             PN_MOVE_NODE(pn, pn1); */ 
4483: /* MUTANT (rep_op) */        } else if (tt != TOK_XMLPTAGC) {
4483: /* MUTANT (negate) */        } else if(! (tt == TOK_XMLPTAGC)) {
4484: /* MUTANT (del_stmt) */ /*             pn->pn_type = TOK_XMLELEM; */ 
4485: /* MUTANT (del_stmt) */ /*             pn->pn_op = JSOP_TOXML; */ 
4496: /* MUTANT (del_stmt) */ /*     JSParseNode *pn1 = NULL, *pn2 = NULL, *pn3 = NULL; */ 
4497: /* MUTANT (del_stmt) */ /*     int stackDummy; */ 
4499: /* MUTANT (negate) */    if(! (!JS_CHECK_STACK_SIZE(cx, stackDummy))) {
4500: /* MUTANT (del_stmt) */ /*         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_OVER_RECURSED); */ 
4501: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
4507: /* MUTANT (del_stmt) */ /*         uint16 oldflags = tc->flags; */ 
4509: /* MUTANT (del_stmt) */ /*         tc->flags = (uint16) pn->pn_flags; */ 
4510: /* MUTANT (negate) */        if(! (!js_FoldConstants(cx, pn->pn_body, tc)))
4512: /* MUTANT (del_stmt) */ /*         tc->flags = oldflags; */ 
4513: /* MUTANT (del_stmt) */ /*         break; */ 
4517: #if 1  /* MUTANT (rep_const) *//* JS_HAS_XML_SUPPORT */
4517: #if -1  /* MUTANT (rep_const) *//* JS_HAS_XML_SUPPORT */
4532: /* MUTANT (rep_op) */            if ((pn->pn_extra & (PNX_XMLROOT & PNX_CANTFOLD)) == PNX_XMLROOT &&
4532: /* MUTANT (rep_op) */            if ((pn->pn_extra & (PNX_XMLROOT | PNX_CANTFOLD)) != PNX_XMLROOT &&
4532: /* MUTANT (rep_op) */            if ((pn->pn_extra & (PNX_XMLROOT | PNX_CANTFOLD)) == PNX_XMLROOT ||
4534: /* MUTANT (del_stmt) */ /*                 JSObject *obj; */ 
4535: /* MUTANT (del_stmt) */ /*                 JSAtom *atom; */ 
4537: /* MUTANT (del_stmt) */ /*                 obj = js_ParseNodeToXMLObject(cx, pn); */ 
4538: /* MUTANT (negate) */                if(! (!obj))
4540: /* MUTANT (del_stmt) */ /*                 atom = js_AtomizeObject(cx, obj, 0); */ 
4540: /* MUTANT (rep_const) */                atom = js_AtomizeObject(cx, obj, 1);
4540: /* MUTANT (rep_const) */                atom = js_AtomizeObject(cx, obj, -1);
4541: /* MUTANT (negate) */                if(! (!atom))
4543: /* MUTANT (del_stmt) */ /*                 pn->pn_op = JSOP_XMLOBJECT; */ 
4544: /* MUTANT (del_stmt) */ /*                 pn->pn_arity = PN_NULLARY; */ 
4545: /* MUTANT (del_stmt) */ /*                 pn->pn_atom = atom; */ 
4546: /* MUTANT (del_stmt) */ /*                 return JS_TRUE; */ 
4557: /* MUTANT (del_stmt) */ /*           default:; */ 
4563: /* MUTANT (negate) */            if(! (!js_FoldConstants(cx, pn2, tc)))
4571: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_kid2; */ 
4572: /* MUTANT (del_stmt) */ /*         pn3 = pn->pn_kid3; */ 
4573: /* MUTANT (rep_op) */        if (pn1 || !js_FoldConstants(cx, pn1, tc))
4573: /* MUTANT (negate) */        if(! (pn1 && !js_FoldConstants(cx, pn1, tc)))
4575: /* MUTANT (rep_op) */        if (pn2 || !js_FoldConstants(cx, pn2, tc))
4575: /* MUTANT (negate) */        if(! (pn2 && !js_FoldConstants(cx, pn2, tc)))
4577: /* MUTANT (rep_op) */        if (pn3 || !js_FoldConstants(cx, pn3, tc))
4577: /* MUTANT (negate) */        if(! (pn3 && !js_FoldConstants(cx, pn3, tc)))
4579: /* MUTANT (del_stmt) */ /*         break; */ 
4584: /* MUTANT (del_stmt) */ /*         pn2 = pn->pn_right; */ 
4585: /* MUTANT (rep_op) */        if (pn1 || !js_FoldConstants(cx, pn1, tc))
4585: /* MUTANT (negate) */        if(! (pn1 && !js_FoldConstants(cx, pn1, tc)))
4587: /* MUTANT (negate) */        if(! (!js_FoldConstants(cx, pn2, tc)))
4589: /* MUTANT (del_stmt) */ /*         break; */ 
4594: /* MUTANT (rep_op) */        if (pn1 || !js_FoldConstants(cx, pn1, tc))
4594: /* MUTANT (negate) */        if(! (pn1 && !js_FoldConstants(cx, pn1, tc)))
4596: /* MUTANT (del_stmt) */ /*         break; */ 
4606: /* MUTANT (rep_op) */        while (pn1 || pn1->pn_arity == PN_NAME)
4606: /* MUTANT (rep_op) */        while (pn1 && pn1->pn_arity != PN_NAME)
4606: /* MUTANT (negate) */        while(! (pn1 && pn1->pn_arity == PN_NAME))
4608: /* MUTANT (rep_op) */        if (pn1 || !js_FoldConstants(cx, pn1, tc))
4608: /* MUTANT (negate) */        if(! (pn1 && !js_FoldConstants(cx, pn1, tc)))
4610: /* MUTANT (del_stmt) */ /*         break; */ 
4618: /* MUTANT (rep_op) */        if (ContainsVarStmt(pn2) && ContainsVarStmt(pn3))
4618: /* MUTANT (negate) */        if(! (ContainsVarStmt(pn2) || ContainsVarStmt(pn3)))
4626: /* MUTANT (rep_op) */            if (pn1->pn_dval != 0)
4626: /* MUTANT (rep_const) */            if (pn1->pn_dval == 1)
4626: /* MUTANT (rep_const) */            if (pn1->pn_dval == -1)
4626: /* MUTANT (negate) */            if(! (pn1->pn_dval == 0))
4628: /* MUTANT (del_stmt) */ /*             break; */ 
4630: /* MUTANT (rep_op) */            if (JSSTRING_LENGTH(ATOM_TO_STRING(pn1->pn_atom)) != 0)
4630: /* MUTANT (rep_const) */            if (JSSTRING_LENGTH(ATOM_TO_STRING(pn1->pn_atom)) == 1)
4630: /* MUTANT (rep_const) */            if (JSSTRING_LENGTH(ATOM_TO_STRING(pn1->pn_atom)) == -1)
4630: /* MUTANT (negate) */            if(! (JSSTRING_LENGTH(ATOM_TO_STRING(pn1->pn_atom)) == 0))
4632: /* MUTANT (del_stmt) */ /*             break; */ 
4634: /* MUTANT (rep_op) */            if (pn1->pn_op != JSOP_TRUE)
4634: /* MUTANT (negate) */            if(! (pn1->pn_op == JSOP_TRUE))
4636: /* MUTANT (rep_op) */            if (pn1->pn_op != JSOP_FALSE || pn1->pn_op == JSOP_NULL) {
4636: /* MUTANT (rep_op) */            if (pn1->pn_op == JSOP_FALSE && pn1->pn_op == JSOP_NULL) {
4636: /* MUTANT (rep_op) */            if (pn1->pn_op == JSOP_FALSE || pn1->pn_op != JSOP_NULL) {
4636: /* MUTANT (negate) */            if(! (pn1->pn_op == JSOP_FALSE || pn1->pn_op == JSOP_NULL)) {
4637: /* MUTANT (del_stmt) */ /*                 pn2 = pn3; */ 
4638: /* MUTANT (del_stmt) */ /*                 break; */ 
4646: /* MUTANT (negate) */        if(! (pn2)) {
4648: /* MUTANT (del_stmt) */ /*             PN_MOVE_NODE(pn, pn2); */ 
4651: /* MUTANT (del_stmt) */ /*             pn->pn_type = TOK_SEMI; */ 
4652: /* MUTANT (del_stmt) */ /*             pn->pn_arity = PN_UNARY; */ 
4653: /* MUTANT (del_stmt) */ /*             pn->pn_kid = NULL; */ 
4656: /* MUTANT (rep_op) */        if (pn3 || pn3 != pn2)
4656: /* MUTANT (rep_op) */        if (pn3 && pn3 == pn2)
4656: /* MUTANT (negate) */        if(! (pn3 && pn3 != pn2))
4658: /* MUTANT (del_stmt) */ /*         break; */ 
4661: /* MUTANT (rep_op) */        if (pn->pn_arity != PN_LIST) {
4661: /* MUTANT (negate) */        if(! (pn->pn_arity == PN_LIST)) {
4662: /* MUTANT (del_stmt) */ /*             size_t length, length2; */ 
4663: /* MUTANT (del_stmt) */ /*             jschar *chars; */ 
4664: /* MUTANT (del_stmt) */ /*             JSString *str, *str2; */ 
4671: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn->pn_count > 2); */ 
4671: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count <= 2);
4671: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count < 2);
4671: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count >= 2);
4671: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count == 2);
4671: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count != 2);
4671: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count > 0);
4671: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count > 1);
4671: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count > -1);
4671: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count > ((2)+1));
4671: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count > ((2)-1));
4672: /* MUTANT (negate) */            if(! (pn->pn_extra & PNX_CANTFOLD))
4674: /* MUTANT (rep_op) */            if (pn->pn_extra == PNX_STRCAT)
4674: /* MUTANT (negate) */            if(! (pn->pn_extra != PNX_STRCAT))
4678: /* MUTANT (del_stmt) */ /*             length = 0; */ 
4678: /* MUTANT (rep_const) */            length = 1;
4678: /* MUTANT (rep_const) */            length = -1;
4680: /* MUTANT (negate) */                if(! (!FoldType(cx, pn2, TOK_STRING)))
4683: /* MUTANT (rep_op) */                if (pn2->pn_type == TOK_STRING)
4683: /* MUTANT (negate) */                if(! (pn2->pn_type != TOK_STRING))
4685: /* MUTANT (del_stmt) */ /*                 length += ATOM_TO_STRING(pn2->pn_atom)->length; */ 
4685: /* MUTANT (rep_op) */                length -= ATOM_TO_STRING(pn2->pn_atom)->length;
4685: /* MUTANT (rep_op) */                length *= ATOM_TO_STRING(pn2->pn_atom)->length;
4685: /* MUTANT (rep_op) */                length %= ATOM_TO_STRING(pn2->pn_atom)->length;
4689: /* MUTANT (rep_op) */            chars = (jschar *) JS_malloc(cx, (length - 1) * sizeof(jschar));
4689: /* MUTANT (rep_op) */            chars = (jschar *) JS_malloc(cx, (length * 1) * sizeof(jschar));
4689: /* MUTANT (rep_op) */            chars = (jschar *) JS_malloc(cx, (length % 1) * sizeof(jschar));
4689: /* MUTANT (rep_const) */            chars = (jschar *) JS_malloc(cx, (length + 0) * sizeof(jschar));
4689: /* MUTANT (rep_const) */            chars = (jschar *) JS_malloc(cx, (length + -1) * sizeof(jschar));
4689: /* MUTANT (rep_const) */            chars = (jschar *) JS_malloc(cx, (length + ((1)+1)) * sizeof(jschar));
4690: /* MUTANT (negate) */            if(! (!chars))
4692: /* MUTANT (del_stmt) */ /*             str = js_NewString(cx, chars, length, 0); */ 
4692: /* MUTANT (rep_const) */            str = js_NewString(cx, chars, length, 1);
4692: /* MUTANT (rep_const) */            str = js_NewString(cx, chars, length, -1);
4693: /* MUTANT (negate) */            if(! (!str)) {
4694: /* MUTANT (del_stmt) */ /*                 JS_free(cx, chars); */ 
4695: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
4700: /* MUTANT (del_stmt) */ /*                 str2 = ATOM_TO_STRING(pn2->pn_atom); */ 
4701: /* MUTANT (del_stmt) */ /*                 length2 = str2->length; */ 
4702: /* MUTANT (del_stmt) */ /*                 js_strncpy(chars, str2->chars, length2); */ 
4703: /* MUTANT (del_stmt) */ /*                 chars += length2; */ 
4703: /* MUTANT (rep_op) */                chars -= length2;
4703: /* MUTANT (rep_op) */                chars *= length2;
4703: /* MUTANT (rep_op) */                chars %= length2;
4705: /* MUTANT (rep_const) */            *chars = 1;
4705: /* MUTANT (rep_const) */            *chars = -1;
4708: /* MUTANT (del_stmt) */ /*             pn->pn_atom = js_AtomizeString(cx, str, 0); */ 
4708: /* MUTANT (rep_const) */            pn->pn_atom = js_AtomizeString(cx, str, 1);
4708: /* MUTANT (rep_const) */            pn->pn_atom = js_AtomizeString(cx, str, -1);
4709: /* MUTANT (negate) */            if(! (!pn->pn_atom))
4711: /* MUTANT (del_stmt) */ /*             pn->pn_type = TOK_STRING; */ 
4712: /* MUTANT (del_stmt) */ /*             pn->pn_op = JSOP_STRING; */ 
4713: /* MUTANT (del_stmt) */ /*             pn->pn_arity = PN_NULLARY; */ 
4714: /* MUTANT (del_stmt) */ /*             break; */ 
4718: /* MUTANT (rep_op) */        JS_ASSERT(pn->pn_arity != PN_BINARY);
4719: /* MUTANT (rep_op) */        if (pn1->pn_type != TOK_STRING || pn2->pn_type == TOK_STRING) {
4719: /* MUTANT (rep_op) */        if (pn1->pn_type == TOK_STRING && pn2->pn_type == TOK_STRING) {
4719: /* MUTANT (rep_op) */        if (pn1->pn_type == TOK_STRING || pn2->pn_type != TOK_STRING) {
4719: /* MUTANT (negate) */        if(! (pn1->pn_type == TOK_STRING || pn2->pn_type == TOK_STRING)) {
4720: /* MUTANT (del_stmt) */ /*             JSString *left, *right, *str; */ 
4722: /* MUTANT (rep_op) */            if (!FoldType(cx, (pn1->pn_type == TOK_STRING) ? pn1 : pn2,
4724: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
4726: /* MUTANT (rep_op) */            if (pn1->pn_type == TOK_STRING || pn2->pn_type != TOK_STRING)
4726: /* MUTANT (rep_op) */            if (pn1->pn_type != TOK_STRING && pn2->pn_type != TOK_STRING)
4726: /* MUTANT (rep_op) */            if (pn1->pn_type != TOK_STRING || pn2->pn_type == TOK_STRING)
4726: /* MUTANT (negate) */            if(! (pn1->pn_type != TOK_STRING || pn2->pn_type != TOK_STRING))
4728: /* MUTANT (del_stmt) */ /*             left = ATOM_TO_STRING(pn1->pn_atom); */ 
4729: /* MUTANT (del_stmt) */ /*             right = ATOM_TO_STRING(pn2->pn_atom); */ 
4730: /* MUTANT (del_stmt) */ /*             str = js_ConcatStrings(cx, left, right); */ 
4731: /* MUTANT (negate) */            if(! (!str))
4733: /* MUTANT (del_stmt) */ /*             pn->pn_atom = js_AtomizeString(cx, str, 0); */ 
4733: /* MUTANT (rep_const) */            pn->pn_atom = js_AtomizeString(cx, str, 1);
4733: /* MUTANT (rep_const) */            pn->pn_atom = js_AtomizeString(cx, str, -1);
4734: /* MUTANT (negate) */            if(! (!pn->pn_atom))
4736: /* MUTANT (del_stmt) */ /*             pn->pn_type = TOK_STRING; */ 
4737: /* MUTANT (del_stmt) */ /*             pn->pn_op = JSOP_STRING; */ 
4738: /* MUTANT (del_stmt) */ /*             pn->pn_arity = PN_NULLARY; */ 
4739: /* MUTANT (del_stmt) */ /*             RecycleTree(pn1, tc); */ 
4740: /* MUTANT (del_stmt) */ /*             RecycleTree(pn2, tc); */ 
4741: /* MUTANT (del_stmt) */ /*             break; */ 
4749: /* MUTANT (rep_op) */        if (pn->pn_arity != PN_NULLARY)
4749: /* MUTANT (negate) */        if(! (pn->pn_arity == PN_NULLARY))
4757: /* MUTANT (rep_op) */        if (pn->pn_arity != PN_LIST) {
4757: /* MUTANT (negate) */        if(! (pn->pn_arity == PN_LIST)) {
4758: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn->pn_count > 2); */ 
4758: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count <= 2);
4758: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count < 2);
4758: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count >= 2);
4758: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count == 2);
4758: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_count != 2);
4758: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count > 0);
4758: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count > 1);
4758: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count > -1);
4758: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count > ((2)+1));
4758: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_count > ((2)-1));
4760: /* MUTANT (negate) */                if(! (!FoldType(cx, pn2, TOK_NUMBER)))
4763: /* MUTANT (rep_op) */                if (pn2->pn_type == TOK_NUMBER)
4763: /* MUTANT (negate) */                if(! (pn2->pn_type != TOK_NUMBER))
4766: /* MUTANT (negate) */            if(! (!pn2)) {
4767: /* MUTANT (del_stmt) */ /*                 JSOp op = pn->pn_op; */ 
4769: /* MUTANT (del_stmt) */ /*                 pn2 = pn1->pn_next; */ 
4770: /* MUTANT (del_stmt) */ /*                 pn3 = pn2->pn_next; */ 
4771: /* MUTANT (negate) */                if(! (!FoldBinaryNumeric(cx, op, pn1, pn2, pn, tc)))
4773: /* MUTANT (rep_op) */                while ((pn2 = pn3) == NULL) {
4773: /* MUTANT (negate) */                while(! ((pn2 = pn3) != NULL)) {
4774: /* MUTANT (del_stmt) */ /*                     pn3 = pn2->pn_next; */ 
4775: /* MUTANT (negate) */                    if(! (!FoldBinaryNumeric(cx, op, pn, pn2, pn, tc)))
4780: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn->pn_arity == PN_BINARY); */ 
4780: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_arity != PN_BINARY);
4781: /* MUTANT (rep_op) */            if (!FoldType(cx, pn1, TOK_NUMBER) &&
4783: /* MUTANT (del_stmt) */ /*                 return JS_FALSE; */ 
4785: /* MUTANT (rep_op) */            if (pn1->pn_type != TOK_NUMBER && pn2->pn_type == TOK_NUMBER) {
4785: /* MUTANT (rep_op) */            if (pn1->pn_type == TOK_NUMBER || pn2->pn_type == TOK_NUMBER) {
4785: /* MUTANT (rep_op) */            if (pn1->pn_type == TOK_NUMBER && pn2->pn_type != TOK_NUMBER) {
4785: /* MUTANT (negate) */            if(! (pn1->pn_type == TOK_NUMBER && pn2->pn_type == TOK_NUMBER)) {
4786: /* MUTANT (negate) */                if(! (!FoldBinaryNumeric(cx, pn->pn_op, pn1, pn2, pn, tc)))
4793: /* MUTANT (rep_op) */        if (pn1->pn_type != TOK_NUMBER) {
4793: /* MUTANT (negate) */        if(! (pn1->pn_type == TOK_NUMBER)) {
4794: /* MUTANT (del_stmt) */ /*             jsdouble d; */ 
4795: /* MUTANT (del_stmt) */ /*             int32 i; */ 
4798: /* MUTANT (del_stmt) */ /*             d = pn1->pn_dval; */ 
4801: /* MUTANT (negate) */                if(! (!js_DoubleToECMAInt32(cx, d, &i)))
4803: /* MUTANT (del_stmt) */ /*                 d = ~i; */ 
4804: /* MUTANT (del_stmt) */ /*                 break; */ 
4824: /* MUTANT (del_stmt) */ /*                 pn->pn_op = (d == 0) ? JSOP_TRUE : JSOP_FALSE; */ 
4824: /* MUTANT (rep_op) */                pn->pn_op = (d != 0) ? JSOP_TRUE : JSOP_FALSE;
4824: /* MUTANT (rep_const) */                pn->pn_op = (d == 1) ? JSOP_TRUE : JSOP_FALSE;
4824: /* MUTANT (rep_const) */                pn->pn_op = (d == -1) ? JSOP_TRUE : JSOP_FALSE;
4825: /* MUTANT (del_stmt) */ /*                 pn->pn_arity = PN_NULLARY; */ 
4833: /* MUTANT (del_stmt) */ /*             pn->pn_op = JSOP_NUMBER; */ 
4834: /* MUTANT (del_stmt) */ /*             pn->pn_arity = PN_NULLARY; */ 
4835: /* MUTANT (del_stmt) */ /*             pn->pn_dval = d; */ 
4836: /* MUTANT (del_stmt) */ /*             RecycleTree(pn1, tc); */ 
4847: /* MUTANT (rep_op) */        if (pn->pn_arity != PN_LIST) {
4847: /* MUTANT (negate) */        if(! (pn->pn_arity == PN_LIST)) {
4848: /* MUTANT (del_stmt) */ /*             JS_ASSERT(pn->pn_type == TOK_XMLLIST || pn->pn_count != 0); */ 
4848: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_type != TOK_XMLLIST || pn->pn_count != 0);
4848: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_type == TOK_XMLLIST && pn->pn_count != 0);
4848: /* MUTANT (rep_op) */            JS_ASSERT(pn->pn_type == TOK_XMLLIST || pn->pn_count == 0);
4848: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_type == TOK_XMLLIST || pn->pn_count != 1);
4848: /* MUTANT (rep_const) */            JS_ASSERT(pn->pn_type == TOK_XMLLIST || pn->pn_count != -1);
4849: /* MUTANT (negate) */            if(! (!FoldXMLConstants(cx, pn, tc)))
4855: /* MUTANT (rep_op) */        if (pn1->pn_type != TOK_XMLNAME) {
4855: /* MUTANT (negate) */        if(! (pn1->pn_type == TOK_XMLNAME)) {
4856: /* MUTANT (del_stmt) */ /*             jsval v; */ 
4857: /* MUTANT (del_stmt) */ /*             JSAtom *atom; */ 
4859: /* MUTANT (del_stmt) */ /*             v = ATOM_KEY(pn1->pn_atom); */ 
4860: /* MUTANT (negate) */            if(! (!js_ToAttributeName(cx, &v)))
4862: /* MUTANT (del_stmt) */ /*             JS_ASSERT(!JSVAL_IS_PRIMITIVE(v)); */ 
4863: /* MUTANT (del_stmt) */ /*             atom = js_AtomizeObject(cx, JSVAL_TO_OBJECT(v), 0); */ 
4863: /* MUTANT (rep_const) */            atom = js_AtomizeObject(cx, JSVAL_TO_OBJECT(v), 1);
4863: /* MUTANT (rep_const) */            atom = js_AtomizeObject(cx, JSVAL_TO_OBJECT(v), -1);
4864: /* MUTANT (negate) */            if(! (!atom))
4867: /* MUTANT (del_stmt) */ /*             pn->pn_type = TOK_XMLNAME; */ 
4868: /* MUTANT (del_stmt) */ /*             pn->pn_op = JSOP_OBJECT; */ 
4869: /* MUTANT (del_stmt) */ /*             pn->pn_arity = PN_NULLARY; */ 
4870: /* MUTANT (del_stmt) */ /*             pn->pn_atom = atom; */ 
4871: /* MUTANT (del_stmt) */ /*             RecycleTree(pn1, tc); */ 
