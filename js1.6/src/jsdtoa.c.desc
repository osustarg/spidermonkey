207: #define PRIVATE_MEM 0 /* MUTANT (rep_const) */
207: #define PRIVATE_MEM 1 /* MUTANT (rep_const) */
207: #define PRIVATE_MEM -1 /* MUTANT (rep_const) */
207: #define PRIVATE_MEM ((2000)+1) /* MUTANT (rep_const) */
207: #define PRIVATE_MEM ((2000)-1) /* MUTANT (rep_const) */
209: #define PRIVATE_mem ((PRIVATE_MEM+sizeof(double)0)/sizeof(double)) /* MUTANT (rep_const) */
209: #define PRIVATE_mem ((PRIVATE_MEM+sizeof(double)1)/sizeof(double)) /* MUTANT (rep_const) */
209: #define PRIVATE_mem ((PRIVATE_MEM+sizeof(double)((-1)+1))/sizeof(double)) /* MUTANT (rep_const) */
209: #define PRIVATE_mem ((PRIVATE_MEM+sizeof(double)((-1)-1))/sizeof(double)) /* MUTANT (rep_const) */
216: #define DBL_DIG 0 /* MUTANT (rep_const) */
216: #define DBL_DIG 1 /* MUTANT (rep_const) */
216: #define DBL_DIG -1 /* MUTANT (rep_const) */
216: #define DBL_DIG ((15)+1) /* MUTANT (rep_const) */
216: #define DBL_DIG ((15)-1) /* MUTANT (rep_const) */
217: #define DBL_MAX_10_EXP 0 /* MUTANT (rep_const) */
217: #define DBL_MAX_10_EXP 1 /* MUTANT (rep_const) */
217: #define DBL_MAX_10_EXP -1 /* MUTANT (rep_const) */
217: #define DBL_MAX_10_EXP ((308)+1) /* MUTANT (rep_const) */
217: #define DBL_MAX_10_EXP ((308)-1) /* MUTANT (rep_const) */
218: #define DBL_MAX_EXP 0 /* MUTANT (rep_const) */
218: #define DBL_MAX_EXP 1 /* MUTANT (rep_const) */
218: #define DBL_MAX_EXP -1 /* MUTANT (rep_const) */
218: #define DBL_MAX_EXP ((1024)+1) /* MUTANT (rep_const) */
218: #define DBL_MAX_EXP ((1024)-1) /* MUTANT (rep_const) */
219: #define FLT_RADIX 0 /* MUTANT (rep_const) */
219: #define FLT_RADIX 1 /* MUTANT (rep_const) */
219: #define FLT_RADIX -1 /* MUTANT (rep_const) */
219: #define FLT_RADIX ((2)+1) /* MUTANT (rep_const) */
219: #define FLT_RADIX ((2)-1) /* MUTANT (rep_const) */
220: #define FLT_ROUNDS 0 /* MUTANT (rep_const) */
220: #define FLT_ROUNDS -1 /* MUTANT (rep_const) */
220: #define FLT_ROUNDS ((1)+1) /* MUTANT (rep_const) */
221: #define DBL_MAX 1.0e+308 /* MUTANT (rep_const) */
221: #define DBL_MAX 1.1e+308 /* MUTANT (rep_const) */
221: #define DBL_MAX 1.-1e+308 /* MUTANT (rep_const) */
221: #define DBL_MAX 1.((7976931348623157)+1)e+308 /* MUTANT (rep_const) */
221: #define DBL_MAX 1.((7976931348623157)-1)e+308 /* MUTANT (rep_const) */
221: #define DBL_MAX 1.7976931348623157e+0 /* MUTANT (rep_const) */
221: #define DBL_MAX 1.7976931348623157e+1 /* MUTANT (rep_const) */
221: #define DBL_MAX 1.7976931348623157e+-1 /* MUTANT (rep_const) */
221: #define DBL_MAX 1.7976931348623157e+((308)+1) /* MUTANT (rep_const) */
221: #define DBL_MAX 1.7976931348623157e+((308)-1) /* MUTANT (rep_const) */
226: #define LONG_MAX 0 /* MUTANT (rep_const) */
226: #define LONG_MAX 1 /* MUTANT (rep_const) */
226: #define LONG_MAX -1 /* MUTANT (rep_const) */
226: #define LONG_MAX ((2147483647)+1) /* MUTANT (rep_const) */
226: #define LONG_MAX ((2147483647)-1) /* MUTANT (rep_const) */
241: #if defined(IEEE_8087) + defined(IEEE_MC68k) != 0 /* MUTANT (rep_const) */
241: #if defined(IEEE_8087) + defined(IEEE_MC68k) != -1 /* MUTANT (rep_const) */
241: #if defined(IEEE_8087) + defined(IEEE_MC68k) != ((1)+1) /* MUTANT (rep_const) */
250: #define Storeinc(a,b,c) (*(a)++ = (b) << 0 | (c) & 0xffff) /* MUTANT (rep_const) */
250: #define Storeinc(a,b,c) (*(a)++ = (b) << 1 | (c) & 0xffff) /* MUTANT (rep_const) */
250: #define Storeinc(a,b,c) (*(a)++ = (b) << -1 | (c) & 0xffff) /* MUTANT (rep_const) */
250: #define Storeinc(a,b,c) (*(a)++ = (b) << ((16)+1) | (c) & 0xffff) /* MUTANT (rep_const) */
250: #define Storeinc(a,b,c) (*(a)++ = (b) << ((16)-1) | (c) & 0xffff) /* MUTANT (rep_const) */
250: #define Storeinc(a,b,c) (*(a)++ = (b) << 16 | (c) & 1xffff) /* MUTANT (rep_const) */
250: #define Storeinc(a,b,c) (*(a)++ = (b) << 16 | (c) & -1xffff) /* MUTANT (rep_const) */
258: #define Exp_shift  0 /* MUTANT (rep_const) */
258: #define Exp_shift  1 /* MUTANT (rep_const) */
258: #define Exp_shift  -1 /* MUTANT (rep_const) */
258: #define Exp_shift  ((20)+1) /* MUTANT (rep_const) */
258: #define Exp_shift  ((20)-1) /* MUTANT (rep_const) */
259: #define Exp_shift1 0 /* MUTANT (rep_const) */
259: #define Exp_shift1 1 /* MUTANT (rep_const) */
259: #define Exp_shift1 -1 /* MUTANT (rep_const) */
259: #define Exp_shift1 ((20)+1) /* MUTANT (rep_const) */
259: #define Exp_shift1 ((20)-1) /* MUTANT (rep_const) */
260: #define Exp_msk1    1x100000 /* MUTANT (rep_const) */
260: #define Exp_msk1    -1x100000 /* MUTANT (rep_const) */
261: #define Exp_msk11   1x100000 /* MUTANT (rep_const) */
261: #define Exp_msk11   -1x100000 /* MUTANT (rep_const) */
262: #define Exp_mask  1x7ff00000 /* MUTANT (rep_const) */
262: #define Exp_mask  -1x7ff00000 /* MUTANT (rep_const) */
263: #define P 0 /* MUTANT (rep_const) */
263: #define P 1 /* MUTANT (rep_const) */
263: #define P -1 /* MUTANT (rep_const) */
263: #define P ((53)+1) /* MUTANT (rep_const) */
263: #define P ((53)-1) /* MUTANT (rep_const) */
264: #define Bias 0 /* MUTANT (rep_const) */
264: #define Bias 1 /* MUTANT (rep_const) */
264: #define Bias -1 /* MUTANT (rep_const) */
264: #define Bias ((1023)+1) /* MUTANT (rep_const) */
264: #define Bias ((1023)-1) /* MUTANT (rep_const) */
265: #define Emin (0) /* MUTANT (rep_const) */
265: #define Emin (1) /* MUTANT (rep_const) */
265: #define Emin (-1) /* MUTANT (rep_const) */
265: #define Emin (((-1022)+1)) /* MUTANT (rep_const) */
265: #define Emin (((-1022)-1)) /* MUTANT (rep_const) */
266: #define Exp_1  1x3ff00000 /* MUTANT (rep_const) */
266: #define Exp_1  -1x3ff00000 /* MUTANT (rep_const) */
267: #define Exp_11 1x3ff00000 /* MUTANT (rep_const) */
267: #define Exp_11 -1x3ff00000 /* MUTANT (rep_const) */
268: #define Ebits 0 /* MUTANT (rep_const) */
268: #define Ebits 1 /* MUTANT (rep_const) */
268: #define Ebits -1 /* MUTANT (rep_const) */
268: #define Ebits ((11)+1) /* MUTANT (rep_const) */
268: #define Ebits ((11)-1) /* MUTANT (rep_const) */
269: #define Frac_mask  1xfffff /* MUTANT (rep_const) */
269: #define Frac_mask  -1xfffff /* MUTANT (rep_const) */
270: #define Frac_mask1 1xfffff /* MUTANT (rep_const) */
270: #define Frac_mask1 -1xfffff /* MUTANT (rep_const) */
271: #define Ten_pmax 0 /* MUTANT (rep_const) */
271: #define Ten_pmax 1 /* MUTANT (rep_const) */
271: #define Ten_pmax -1 /* MUTANT (rep_const) */
271: #define Ten_pmax ((22)+1) /* MUTANT (rep_const) */
271: #define Ten_pmax ((22)-1) /* MUTANT (rep_const) */
272: #define Bletch 1x10 /* MUTANT (rep_const) */
272: #define Bletch -1x10 /* MUTANT (rep_const) */
273: #define Bndry_mask  1xfffff /* MUTANT (rep_const) */
273: #define Bndry_mask  -1xfffff /* MUTANT (rep_const) */
274: #define Bndry_mask1 1xfffff /* MUTANT (rep_const) */
274: #define Bndry_mask1 -1xfffff /* MUTANT (rep_const) */
275: #define LSB 0 /* MUTANT (rep_const) */
275: #define LSB -1 /* MUTANT (rep_const) */
275: #define LSB ((1)+1) /* MUTANT (rep_const) */
276: #define Sign_bit 1x80000000 /* MUTANT (rep_const) */
276: #define Sign_bit -1x80000000 /* MUTANT (rep_const) */
277: #define Log2P 0 /* MUTANT (rep_const) */
277: #define Log2P -1 /* MUTANT (rep_const) */
277: #define Log2P ((1)+1) /* MUTANT (rep_const) */
278: #define Tiny0 1 /* MUTANT (rep_const) */
278: #define Tiny0 -1 /* MUTANT (rep_const) */
279: #define Tiny1 0 /* MUTANT (rep_const) */
279: #define Tiny1 -1 /* MUTANT (rep_const) */
279: #define Tiny1 ((1)+1) /* MUTANT (rep_const) */
280: #define Quick_max 0 /* MUTANT (rep_const) */
280: #define Quick_max 1 /* MUTANT (rep_const) */
280: #define Quick_max -1 /* MUTANT (rep_const) */
280: #define Quick_max ((14)+1) /* MUTANT (rep_const) */
280: #define Quick_max ((14)-1) /* MUTANT (rep_const) */
281: #define Int_max 0 /* MUTANT (rep_const) */
281: #define Int_max 1 /* MUTANT (rep_const) */
281: #define Int_max -1 /* MUTANT (rep_const) */
281: #define Int_max ((14)+1) /* MUTANT (rep_const) */
281: #define Int_max ((14)-1) /* MUTANT (rep_const) */
282: #define Infinite(x) (word0(x) == 1x7ff00000)  /* MUTANT (rep_const) *//* sufficient test for here */
282: #define Infinite(x) (word0(x) == -1x7ff00000)  /* MUTANT (rep_const) *//* sufficient test for here */
298: #define Big0 (Frac_mask1 | Exp_msk1*(DBL_MAX_EXP+Bias-0)) /* MUTANT (rep_const) */
298: #define Big0 (Frac_mask1 | Exp_msk1*(DBL_MAX_EXP+Bias--1)) /* MUTANT (rep_const) */
298: #define Big0 (Frac_mask1 | Exp_msk1*(DBL_MAX_EXP+Bias-((1)+1))) /* MUTANT (rep_const) */
299: #define Big1 1xffffffff /* MUTANT (rep_const) */
299: #define Big1 -1xffffffff /* MUTANT (rep_const) */
317: /* MUTANT (negate) */        if(! (!initialized))                                                     \
328: #define Kmax 0 /* MUTANT (rep_const) */
328: #define Kmax 1 /* MUTANT (rep_const) */
328: #define Kmax -1 /* MUTANT (rep_const) */
328: #define Kmax ((15)+1) /* MUTANT (rep_const) */
328: #define Kmax ((15)-1) /* MUTANT (rep_const) */
331: /* MUTANT (del_stmt) */ /*     struct Bigint *next; */   /* Free list link */
332: /* MUTANT (del_stmt) */ /*     int32 k; */               /* lg2(maxwds) */
333: /* MUTANT (del_stmt) */ /*     int32 maxwds; */          /* Number of words allocated for x */
334: /* MUTANT (del_stmt) */ /*     int32 sign; */            /* Zero if positive, 1 if negative.  Ignored by most Bigint routines! */
335: /* MUTANT (del_stmt) */ /*     int32 wds; */             /* Actual number of words.  If value is nonzero, the most significant word must be nonzero. */
336: /* MUTANT (del_stmt) */ /*     ULong x[1]; */            /* wds words of number in little endian order */
336: /* MUTANT (rep_const) */    ULong x[0];           /* wds words of number in little endian order */
336: /* MUTANT (rep_const) */    ULong x[-1];           /* wds words of number in little endian order */
336: /* MUTANT (rep_const) */    ULong x[((1)+1)];           /* wds words of number in little endian order */
337: /* MUTANT (del_stmt) */ /* }; */ 
346: /* MUTANT (del_stmt) */ /* static int desiredFailure; */               /* which allocation should fail? */
357: /* MUTANT (del_stmt) */ /*     allocationNum = 0; */ 
357: /* MUTANT (rep_const) */    allocationNum = 1;
357: /* MUTANT (rep_const) */    allocationNum = -1;
358: /* MUTANT (del_stmt) */ /*     desiredFailure = newFailure; */ 
370: /* MUTANT (del_stmt) */ /*     return allocationNum; */ 
387: /* MUTANT (del_stmt) */ /* static Bigint *freelist[Kmax+1]; */ 
387: /* MUTANT (rep_op) */static Bigint *freelist[Kmax-1];
387: /* MUTANT (rep_op) */static Bigint *freelist[Kmax*1];
387: /* MUTANT (rep_op) */static Bigint *freelist[Kmax%1];
387: /* MUTANT (rep_const) */static Bigint *freelist[Kmax+0];
387: /* MUTANT (rep_const) */static Bigint *freelist[Kmax+-1];
387: /* MUTANT (rep_const) */static Bigint *freelist[Kmax+((1)+1)];
395: /* MUTANT (del_stmt) */ /*     int32 x; */ 
396: /* MUTANT (del_stmt) */ /*     Bigint *rv; */ 
402: /* MUTANT (rep_op) */    if (--allocationNum == desiredFailure) {
402: /* MUTANT (rep_op) */    if (++allocationNum != desiredFailure) {
402: /* MUTANT (negate) */    if(! (++allocationNum == desiredFailure)) {
403: /* MUTANT (del_stmt) */ /*         printf("Forced Failing Allocation number %d\n", allocationNum); */ 
404: /* MUTANT (del_stmt) */ /*         return NULL; */ 
408: /* MUTANT (rep_op) */    if ((rv = freelist[k]) == NULL)
408: /* MUTANT (negate) */    if(! ((rv = freelist[k]) != NULL))
410: /* MUTANT (rep_op) */    if (rv != NULL) {
410: /* MUTANT (negate) */    if(! (rv == NULL)) {
411: /* MUTANT (del_stmt) */ /*         x = 1 << k; */ 
411: /* MUTANT (rep_const) */        x = 0 << k;
411: /* MUTANT (rep_const) */        x = -1 << k;
411: /* MUTANT (rep_const) */        x = ((1)+1) << k;
413: /* MUTANT (rep_op) */        rv = (Bigint *)MALLOC(sizeof(Bigint) - (x-1)*sizeof(ULong));
413: /* MUTANT (rep_op) */        rv = (Bigint *)MALLOC(sizeof(Bigint) * (x-1)*sizeof(ULong));
413: /* MUTANT (rep_op) */        rv = (Bigint *)MALLOC(sizeof(Bigint) % (x-1)*sizeof(ULong));
413: /* MUTANT (rep_const) */        rv = (Bigint *)MALLOC(sizeof(Bigint) + (x-0)*sizeof(ULong));
413: /* MUTANT (rep_const) */        rv = (Bigint *)MALLOC(sizeof(Bigint) + (x--1)*sizeof(ULong));
413: /* MUTANT (rep_const) */        rv = (Bigint *)MALLOC(sizeof(Bigint) + (x-((1)+1))*sizeof(ULong));
415: /* MUTANT (rep_op) */        len = (sizeof(Bigint) - (x-1)*sizeof(ULong) + sizeof(double) - 1)
415: /* MUTANT (rep_op) */        len = (sizeof(Bigint) * (x-1)*sizeof(ULong) + sizeof(double) - 1)
415: /* MUTANT (rep_op) */        len = (sizeof(Bigint) % (x-1)*sizeof(ULong) + sizeof(double) - 1)
415: /* MUTANT (rep_op) */        len = (sizeof(Bigint) + (x-1)*sizeof(ULong) - sizeof(double) - 1)
415: /* MUTANT (rep_op) */        len = (sizeof(Bigint) + (x-1)*sizeof(ULong) * sizeof(double) - 1)
415: /* MUTANT (rep_op) */        len = (sizeof(Bigint) + (x-1)*sizeof(ULong) % sizeof(double) - 1)
415: /* MUTANT (rep_const) */        len = (sizeof(Bigint) + (x-0)*sizeof(ULong) + sizeof(double) - 1)
415: /* MUTANT (rep_const) */        len = (sizeof(Bigint) + (x--1)*sizeof(ULong) + sizeof(double) - 1)
415: /* MUTANT (rep_const) */        len = (sizeof(Bigint) + (x-((1)+1))*sizeof(ULong) + sizeof(double) - 1)
415: /* MUTANT (rep_const) */        len = (sizeof(Bigint) + (x-1)*sizeof(ULong) + sizeof(double) - 0)
415: /* MUTANT (rep_const) */        len = (sizeof(Bigint) + (x-1)*sizeof(ULong) + sizeof(double) - -1)
415: /* MUTANT (rep_const) */        len = (sizeof(Bigint) + (x-1)*sizeof(ULong) + sizeof(double) - ((1)+1))
417: /* MUTANT (rep_op) */        if (pmem_next - private_mem - len <= PRIVATE_mem) {
417: /* MUTANT (rep_op) */        if (pmem_next - private_mem * len <= PRIVATE_mem) {
417: /* MUTANT (rep_op) */        if (pmem_next - private_mem % len <= PRIVATE_mem) {
417: /* MUTANT (rep_op) */        if (pmem_next - private_mem + len < PRIVATE_mem) {
417: /* MUTANT (rep_op) */        if (pmem_next - private_mem + len > PRIVATE_mem) {
417: /* MUTANT (rep_op) */        if (pmem_next - private_mem + len >= PRIVATE_mem) {
417: /* MUTANT (rep_op) */        if (pmem_next - private_mem + len == PRIVATE_mem) {
417: /* MUTANT (rep_op) */        if (pmem_next - private_mem + len != PRIVATE_mem) {
417: /* MUTANT (negate) */        if(! (pmem_next - private_mem + len <= PRIVATE_mem)) {
418: /* MUTANT (del_stmt) */ /*             rv = (Bigint*)pmem_next; */ 
419: /* MUTANT (del_stmt) */ /*             pmem_next += len; */ 
419: /* MUTANT (rep_op) */            pmem_next -= len;
419: /* MUTANT (rep_op) */            pmem_next *= len;
419: /* MUTANT (rep_op) */            pmem_next %= len;
424: /* MUTANT (negate) */        if(! (!rv))
426: /* MUTANT (del_stmt) */ /*         rv->k = k; */ 
427: /* MUTANT (del_stmt) */ /*         rv->maxwds = x; */ 
429: /* MUTANT (rep_const) */    rv->sign = rv->wds = 1;
429: /* MUTANT (rep_const) */    rv->sign = rv->wds = -1;
430: /* MUTANT (del_stmt) */ /*     return rv; */ 
435: /* MUTANT (negate) */    if(! (v)) {
436: /* MUTANT (del_stmt) */ /*         v->next = freelist[v->k]; */ 
437: /* MUTANT (del_stmt) */ /*         freelist[v->k] = v; */ 
442: /* MUTANT (rep_op) */                          y->wds*sizeof(Long) - 2*sizeof(int32))
442: /* MUTANT (rep_op) */                          y->wds*sizeof(Long) * 2*sizeof(int32))
442: /* MUTANT (rep_op) */                          y->wds*sizeof(Long) % 2*sizeof(int32))
442: /* MUTANT (rep_const) */                          y->wds*sizeof(Long) + 0*sizeof(int32))
442: /* MUTANT (rep_const) */                          y->wds*sizeof(Long) + 1*sizeof(int32))
442: /* MUTANT (rep_const) */                          y->wds*sizeof(Long) + -1*sizeof(int32))
442: /* MUTANT (rep_const) */                          y->wds*sizeof(Long) + ((2)+1)*sizeof(int32))
442: /* MUTANT (rep_const) */                          y->wds*sizeof(Long) + ((2)-1)*sizeof(int32))
449: /* MUTANT (del_stmt) */ /*     int32 i, wds; */ 
452: /* MUTANT (del_stmt) */ /*     ULLong carry, y; */ 
455: /* MUTANT (del_stmt) */ /*     ULong xi, z; */ 
460: /* MUTANT (rep_op) */    if (--allocationNum == desiredFailure) {
460: /* MUTANT (rep_op) */    if (++allocationNum != desiredFailure) {
460: /* MUTANT (negate) */    if(! (++allocationNum == desiredFailure)) {
464: /* MUTANT (del_stmt) */ /*         printf("Forced Failing Allocation number %d\n", allocationNum); */ 
465: /* MUTANT (del_stmt) */ /*         Bfree(b); */ 
466: /* MUTANT (del_stmt) */ /*         return NULL; */ 
471: /* MUTANT (del_stmt) */ /*     x = b->x; */ 
472: /* MUTANT (del_stmt) */ /*     i = 0; */ 
472: /* MUTANT (rep_const) */    i = 1;
472: /* MUTANT (rep_const) */    i = -1;
473: /* MUTANT (del_stmt) */ /*     carry = a; */ 
476: /* MUTANT (rep_op) */        y = *x * (ULLong)m - carry;
476: /* MUTANT (rep_op) */        y = *x * (ULLong)m * carry;
476: /* MUTANT (rep_op) */        y = *x * (ULLong)m % carry;
477: /* MUTANT (del_stmt) */ /*         carry = y >> 32; */ 
477: /* MUTANT (rep_const) */        carry = y >> 0;
477: /* MUTANT (rep_const) */        carry = y >> 1;
477: /* MUTANT (rep_const) */        carry = y >> -1;
477: /* MUTANT (rep_const) */        carry = y >> ((32)+1);
477: /* MUTANT (rep_const) */        carry = y >> ((32)-1);
478: /* MUTANT (del_stmt) */ /*         *x++ = (ULong)(y & 0xffffffffUL); */ 
478: /* MUTANT (rep_op) */        *x-- = (ULong)(y & 0xffffffffUL);
478: /* MUTANT (rep_const) */        *x++ = (ULong)(y & 1xffffffffUL);
478: /* MUTANT (rep_const) */        *x++ = (ULong)(y & -1xffffffffUL);
481: /* MUTANT (del_stmt) */ /*         y = (xi & 0xffff) * m + carry; */ 
481: /* MUTANT (rep_op) */        y = (xi & 0xffff) * m - carry;
481: /* MUTANT (rep_op) */        y = (xi & 0xffff) * m * carry;
481: /* MUTANT (rep_op) */        y = (xi & 0xffff) * m % carry;
481: /* MUTANT (rep_const) */        y = (xi & 1xffff) * m + carry;
481: /* MUTANT (rep_const) */        y = (xi & -1xffff) * m + carry;
482: /* MUTANT (del_stmt) */ /*         z = (xi >> 16) * m + (y >> 16); */ 
482: /* MUTANT (rep_op) */        z = (xi >> 16) * m - (y >> 16);
482: /* MUTANT (rep_op) */        z = (xi >> 16) * m * (y >> 16);
482: /* MUTANT (rep_op) */        z = (xi >> 16) * m % (y >> 16);
482: /* MUTANT (rep_const) */        z = (xi >> 0) * m + (y >> 16);
482: /* MUTANT (rep_const) */        z = (xi >> 1) * m + (y >> 16);
482: /* MUTANT (rep_const) */        z = (xi >> -1) * m + (y >> 16);
482: /* MUTANT (rep_const) */        z = (xi >> ((16)+1)) * m + (y >> 16);
482: /* MUTANT (rep_const) */        z = (xi >> ((16)-1)) * m + (y >> 16);
482: /* MUTANT (rep_const) */        z = (xi >> 16) * m + (y >> 0);
482: /* MUTANT (rep_const) */        z = (xi >> 16) * m + (y >> 1);
482: /* MUTANT (rep_const) */        z = (xi >> 16) * m + (y >> -1);
482: /* MUTANT (rep_const) */        z = (xi >> 16) * m + (y >> ((16)+1));
482: /* MUTANT (rep_const) */        z = (xi >> 16) * m + (y >> ((16)-1));
483: /* MUTANT (del_stmt) */ /*         carry = z >> 16; */ 
483: /* MUTANT (rep_const) */        carry = z >> 0;
483: /* MUTANT (rep_const) */        carry = z >> 1;
483: /* MUTANT (rep_const) */        carry = z >> -1;
483: /* MUTANT (rep_const) */        carry = z >> ((16)+1);
483: /* MUTANT (rep_const) */        carry = z >> ((16)-1);
484: /* MUTANT (del_stmt) */ /*         *x++ = (z << 16) + (y & 0xffff); */ 
484: /* MUTANT (rep_op) */        *x-- = (z << 16) + (y & 0xffff);
484: /* MUTANT (rep_op) */        *x++ = (z << 16) - (y & 0xffff);
484: /* MUTANT (rep_op) */        *x++ = (z << 16) * (y & 0xffff);
484: /* MUTANT (rep_op) */        *x++ = (z << 16) % (y & 0xffff);
484: /* MUTANT (rep_const) */        *x++ = (z << 0) + (y & 0xffff);
484: /* MUTANT (rep_const) */        *x++ = (z << 1) + (y & 0xffff);
484: /* MUTANT (rep_const) */        *x++ = (z << -1) + (y & 0xffff);
484: /* MUTANT (rep_const) */        *x++ = (z << ((16)+1)) + (y & 0xffff);
484: /* MUTANT (rep_const) */        *x++ = (z << ((16)-1)) + (y & 0xffff);
484: /* MUTANT (rep_const) */        *x++ = (z << 16) + (y & 1xffff);
484: /* MUTANT (rep_const) */        *x++ = (z << 16) + (y & -1xffff);
487: /* MUTANT (rep_op) */    while(--i < wds);
487: /* MUTANT (rep_op) */    while(++i <= wds);
487: /* MUTANT (rep_op) */    while(++i > wds);
487: /* MUTANT (rep_op) */    while(++i >= wds);
487: /* MUTANT (rep_op) */    while(++i == wds);
487: /* MUTANT (rep_op) */    while(++i != wds);
487: /* MUTANT (negate) */    while(!(++i < wds));
488: /* MUTANT (negate) */    if(! (carry)) {
489: /* MUTANT (rep_op) */        if (wds <= b->maxwds) {
489: /* MUTANT (rep_op) */        if (wds < b->maxwds) {
489: /* MUTANT (rep_op) */        if (wds > b->maxwds) {
489: /* MUTANT (rep_op) */        if (wds == b->maxwds) {
489: /* MUTANT (rep_op) */        if (wds != b->maxwds) {
489: /* MUTANT (negate) */        if(! (wds >= b->maxwds)) {
490: /* MUTANT (del_stmt) */ /*             b1 = Balloc(b->k+1); */ 
490: /* MUTANT (rep_op) */            b1 = Balloc(b->k-1);
490: /* MUTANT (rep_op) */            b1 = Balloc(b->k*1);
490: /* MUTANT (rep_op) */            b1 = Balloc(b->k%1);
490: /* MUTANT (rep_const) */            b1 = Balloc(b->k+0);
490: /* MUTANT (rep_const) */            b1 = Balloc(b->k+-1);
490: /* MUTANT (rep_const) */            b1 = Balloc(b->k+((1)+1));
491: /* MUTANT (negate) */            if(! (!b1)) {
492: /* MUTANT (del_stmt) */ /*                 Bfree(b); */ 
493: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
496: /* MUTANT (del_stmt) */ /*             Bfree(b); */ 
497: /* MUTANT (del_stmt) */ /*             b = b1; */ 
499: /* MUTANT (rep_op) */        b->x[wds--] = (ULong)carry;
500: /* MUTANT (del_stmt) */ /*         b->wds = wds; */ 
507: /* MUTANT (del_stmt) */ /*     Bigint *b; */ 
508: /* MUTANT (del_stmt) */ /*     int32 i, k; */ 
509: /* MUTANT (del_stmt) */ /*     Long x, y; */ 
511: /* MUTANT (del_stmt) */ /*     x = (nd + 8) / 9; */ 
511: /* MUTANT (rep_op) */    x = (nd - 8) / 9;
511: /* MUTANT (rep_op) */    x = (nd * 8) / 9;
511: /* MUTANT (rep_op) */    x = (nd % 8) / 9;
511: /* MUTANT (rep_const) */    x = (nd + 0) / 9;
511: /* MUTANT (rep_const) */    x = (nd + 1) / 9;
511: /* MUTANT (rep_const) */    x = (nd + -1) / 9;
511: /* MUTANT (rep_const) */    x = (nd + ((8)+1)) / 9;
511: /* MUTANT (rep_const) */    x = (nd + ((8)-1)) / 9;
511: /* MUTANT (rep_const) */    x = (nd + 8) / 0;
511: /* MUTANT (rep_const) */    x = (nd + 8) / 1;
511: /* MUTANT (rep_const) */    x = (nd + 8) / -1;
511: /* MUTANT (rep_const) */    x = (nd + 8) / ((9)+1);
511: /* MUTANT (rep_const) */    x = (nd + 8) / ((9)-1);
512: /* MUTANT (del_stmt) */ /*     for(k = 0, y = 1; x > y; y <<= 1, k++) ; */ 
512: /* MUTANT (rep_op) */    for(k = 0, y = 1; x <= y; y <<= 1, k++) ;
512: /* MUTANT (rep_op) */    for(k = 0, y = 1; x < y; y <<= 1, k++) ;
512: /* MUTANT (rep_op) */    for(k = 0, y = 1; x >= y; y <<= 1, k++) ;
512: /* MUTANT (rep_op) */    for(k = 0, y = 1; x == y; y <<= 1, k++) ;
512: /* MUTANT (rep_op) */    for(k = 0, y = 1; x != y; y <<= 1, k++) ;
512: /* MUTANT (rep_op) */    for(k = 0, y = 1; x > y; y <<= 1, k--) ;
512: /* MUTANT (rep_const) */    for(k = 1, y = 1; x > y; y <<= 1, k++) ;
512: /* MUTANT (rep_const) */    for(k = -1, y = 1; x > y; y <<= 1, k++) ;
512: /* MUTANT (rep_const) */    for(k = 0, y = 0; x > y; y <<= 1, k++) ;
512: /* MUTANT (rep_const) */    for(k = 0, y = -1; x > y; y <<= 1, k++) ;
512: /* MUTANT (rep_const) */    for(k = 0, y = ((1)+1); x > y; y <<= 1, k++) ;
512: /* MUTANT (rep_const) */    for(k = 0, y = 1; x > y; y <<= 0, k++) ;
512: /* MUTANT (rep_const) */    for(k = 0, y = 1; x > y; y <<= -1, k++) ;
512: /* MUTANT (rep_const) */    for(k = 0, y = 1; x > y; y <<= ((1)+1), k++) ;
513: /* MUTANT (del_stmt) */ /*     b = Balloc(k); */ 
514: /* MUTANT (negate) */    if(! (!b))
516: /* MUTANT (del_stmt) */ /*     b->x[0] = y9; */ 
516: /* MUTANT (rep_const) */    b->x[1] = y9;
516: /* MUTANT (rep_const) */    b->x[-1] = y9;
517: /* MUTANT (del_stmt) */ /*     b->wds = 1; */ 
517: /* MUTANT (rep_const) */    b->wds = 0;
517: /* MUTANT (rep_const) */    b->wds = -1;
517: /* MUTANT (rep_const) */    b->wds = ((1)+1);
519: /* MUTANT (del_stmt) */ /*     i = 9; */ 
519: /* MUTANT (rep_const) */    i = 0;
519: /* MUTANT (rep_const) */    i = 1;
519: /* MUTANT (rep_const) */    i = -1;
519: /* MUTANT (rep_const) */    i = ((9)+1);
519: /* MUTANT (rep_const) */    i = ((9)-1);
520: /* MUTANT (rep_op) */    if (9 <= nd0) {
520: /* MUTANT (rep_op) */    if (9 > nd0) {
520: /* MUTANT (rep_op) */    if (9 >= nd0) {
520: /* MUTANT (rep_op) */    if (9 == nd0) {
520: /* MUTANT (rep_op) */    if (9 != nd0) {
520: /* MUTANT (rep_const) */    if (0 < nd0) {
520: /* MUTANT (rep_const) */    if (1 < nd0) {
520: /* MUTANT (rep_const) */    if (-1 < nd0) {
520: /* MUTANT (rep_const) */    if (((9)+1) < nd0) {
520: /* MUTANT (rep_const) */    if (((9)-1) < nd0) {
520: /* MUTANT (negate) */    if(! (9 < nd0)) {
521: /* MUTANT (del_stmt) */ /*         s += 9; */ 
521: /* MUTANT (rep_op) */        s -= 9;
521: /* MUTANT (rep_op) */        s *= 9;
521: /* MUTANT (rep_op) */        s %= 9;
521: /* MUTANT (rep_const) */        s += 0;
521: /* MUTANT (rep_const) */        s += 1;
521: /* MUTANT (rep_const) */        s += -1;
521: /* MUTANT (rep_const) */        s += ((9)+1);
521: /* MUTANT (rep_const) */        s += ((9)-1);
523: /* MUTANT (del_stmt) */ /*             b = multadd(b, 10, *s++ - '0'); */ 
523: /* MUTANT (rep_op) */            b = multadd(b, 10, *s-- - '0');
523: /* MUTANT (rep_const) */            b = multadd(b, 0, *s++ - '0');
523: /* MUTANT (rep_const) */            b = multadd(b, 1, *s++ - '0');
523: /* MUTANT (rep_const) */            b = multadd(b, -1, *s++ - '0');
523: /* MUTANT (rep_const) */            b = multadd(b, ((10)+1), *s++ - '0');
523: /* MUTANT (rep_const) */            b = multadd(b, ((10)-1), *s++ - '0');
523: /* MUTANT (rep_const) */            b = multadd(b, 10, *s++ - '1');
523: /* MUTANT (rep_const) */            b = multadd(b, 10, *s++ - '-1');
524: /* MUTANT (negate) */            if(! (!b))
526: /* MUTANT (del_stmt) */ /*         } while(++i < nd0); */ 
526: /* MUTANT (rep_op) */        } while(--i < nd0);
526: /* MUTANT (rep_op) */        } while(++i <= nd0);
526: /* MUTANT (rep_op) */        } while(++i > nd0);
526: /* MUTANT (rep_op) */        } while(++i >= nd0);
526: /* MUTANT (rep_op) */        } while(++i == nd0);
526: /* MUTANT (rep_op) */        } while(++i != nd0);
526: /* MUTANT (negate) */        } while(!(++i < nd0));
527: /* MUTANT (del_stmt) */ /*         s++; */ 
527: /* MUTANT (rep_op) */        s--;
530: /* MUTANT (rep_op) */        s -= 10;
530: /* MUTANT (rep_op) */        s *= 10;
530: /* MUTANT (rep_op) */        s %= 10;
530: /* MUTANT (rep_const) */        s += 0;
530: /* MUTANT (rep_const) */        s += 1;
530: /* MUTANT (rep_const) */        s += -1;
530: /* MUTANT (rep_const) */        s += ((10)+1);
530: /* MUTANT (rep_const) */        s += ((10)-1);
531: /* MUTANT (rep_op) */    for(; i <= nd; i++) {
531: /* MUTANT (rep_op) */    for(; i > nd; i++) {
531: /* MUTANT (rep_op) */    for(; i >= nd; i++) {
531: /* MUTANT (rep_op) */    for(; i == nd; i++) {
531: /* MUTANT (rep_op) */    for(; i != nd; i++) {
531: /* MUTANT (rep_op) */    for(; i < nd; i--) {
532: /* MUTANT (del_stmt) */ /*         b = multadd(b, 10, *s++ - '0'); */ 
532: /* MUTANT (rep_op) */        b = multadd(b, 10, *s-- - '0');
532: /* MUTANT (rep_const) */        b = multadd(b, 0, *s++ - '0');
532: /* MUTANT (rep_const) */        b = multadd(b, 1, *s++ - '0');
532: /* MUTANT (rep_const) */        b = multadd(b, -1, *s++ - '0');
532: /* MUTANT (rep_const) */        b = multadd(b, ((10)+1), *s++ - '0');
532: /* MUTANT (rep_const) */        b = multadd(b, ((10)-1), *s++ - '0');
532: /* MUTANT (rep_const) */        b = multadd(b, 10, *s++ - '1');
532: /* MUTANT (rep_const) */        b = multadd(b, 10, *s++ - '-1');
533: /* MUTANT (negate) */        if(! (!b))
543: /* MUTANT (del_stmt) */ /*     register int32 k = 0; */ 
543: /* MUTANT (rep_const) */    register int32 k = 1;
543: /* MUTANT (rep_const) */    register int32 k = -1;
545: /* MUTANT (rep_const) */    if (!(x & 1xffff0000)) {
545: /* MUTANT (rep_const) */    if (!(x & -1xffff0000)) {
545: /* MUTANT (negate) */    if(! (!(x & 0xffff0000))) {
546: /* MUTANT (del_stmt) */ /*         k = 16; */ 
546: /* MUTANT (rep_const) */        k = 0;
546: /* MUTANT (rep_const) */        k = 1;
546: /* MUTANT (rep_const) */        k = -1;
546: /* MUTANT (rep_const) */        k = ((16)+1);
546: /* MUTANT (rep_const) */        k = ((16)-1);
547: /* MUTANT (del_stmt) */ /*         x <<= 16; */ 
547: /* MUTANT (rep_const) */        x <<= 0;
547: /* MUTANT (rep_const) */        x <<= 1;
547: /* MUTANT (rep_const) */        x <<= -1;
547: /* MUTANT (rep_const) */        x <<= ((16)+1);
547: /* MUTANT (rep_const) */        x <<= ((16)-1);
549: /* MUTANT (rep_const) */    if (!(x & 1xff000000)) {
549: /* MUTANT (rep_const) */    if (!(x & -1xff000000)) {
549: /* MUTANT (negate) */    if(! (!(x & 0xff000000))) {
550: /* MUTANT (del_stmt) */ /*         k += 8; */ 
550: /* MUTANT (rep_op) */        k -= 8;
550: /* MUTANT (rep_op) */        k *= 8;
550: /* MUTANT (rep_op) */        k %= 8;
550: /* MUTANT (rep_const) */        k += 0;
550: /* MUTANT (rep_const) */        k += 1;
550: /* MUTANT (rep_const) */        k += -1;
550: /* MUTANT (rep_const) */        k += ((8)+1);
550: /* MUTANT (rep_const) */        k += ((8)-1);
551: /* MUTANT (del_stmt) */ /*         x <<= 8; */ 
551: /* MUTANT (rep_const) */        x <<= 0;
551: /* MUTANT (rep_const) */        x <<= 1;
551: /* MUTANT (rep_const) */        x <<= -1;
551: /* MUTANT (rep_const) */        x <<= ((8)+1);
551: /* MUTANT (rep_const) */        x <<= ((8)-1);
553: /* MUTANT (rep_const) */    if (!(x & 1xf0000000)) {
553: /* MUTANT (rep_const) */    if (!(x & -1xf0000000)) {
553: /* MUTANT (negate) */    if(! (!(x & 0xf0000000))) {
554: /* MUTANT (del_stmt) */ /*         k += 4; */ 
554: /* MUTANT (rep_op) */        k -= 4;
554: /* MUTANT (rep_op) */        k *= 4;
554: /* MUTANT (rep_op) */        k %= 4;
554: /* MUTANT (rep_const) */        k += 0;
554: /* MUTANT (rep_const) */        k += 1;
554: /* MUTANT (rep_const) */        k += -1;
554: /* MUTANT (rep_const) */        k += ((4)+1);
554: /* MUTANT (rep_const) */        k += ((4)-1);
555: /* MUTANT (del_stmt) */ /*         x <<= 4; */ 
555: /* MUTANT (rep_const) */        x <<= 0;
555: /* MUTANT (rep_const) */        x <<= 1;
555: /* MUTANT (rep_const) */        x <<= -1;
555: /* MUTANT (rep_const) */        x <<= ((4)+1);
555: /* MUTANT (rep_const) */        x <<= ((4)-1);
557: /* MUTANT (rep_const) */    if (!(x & 1xc0000000)) {
557: /* MUTANT (rep_const) */    if (!(x & -1xc0000000)) {
557: /* MUTANT (negate) */    if(! (!(x & 0xc0000000))) {
558: /* MUTANT (del_stmt) */ /*         k += 2; */ 
558: /* MUTANT (rep_op) */        k -= 2;
558: /* MUTANT (rep_op) */        k *= 2;
558: /* MUTANT (rep_op) */        k %= 2;
558: /* MUTANT (rep_const) */        k += 0;
558: /* MUTANT (rep_const) */        k += 1;
558: /* MUTANT (rep_const) */        k += -1;
558: /* MUTANT (rep_const) */        k += ((2)+1);
558: /* MUTANT (rep_const) */        k += ((2)-1);
559: /* MUTANT (del_stmt) */ /*         x <<= 2; */ 
559: /* MUTANT (rep_const) */        x <<= 0;
559: /* MUTANT (rep_const) */        x <<= 1;
559: /* MUTANT (rep_const) */        x <<= -1;
559: /* MUTANT (rep_const) */        x <<= ((2)+1);
559: /* MUTANT (rep_const) */        x <<= ((2)-1);
561: /* MUTANT (rep_const) */    if (!(x & 1x80000000)) {
561: /* MUTANT (rep_const) */    if (!(x & -1x80000000)) {
561: /* MUTANT (negate) */    if(! (!(x & 0x80000000))) {
562: /* MUTANT (del_stmt) */ /*         k++; */ 
562: /* MUTANT (rep_op) */        k--;
563: /* MUTANT (rep_const) */        if (!(x & 1x40000000))
563: /* MUTANT (rep_const) */        if (!(x & -1x40000000))
563: /* MUTANT (negate) */        if(! (!(x & 0x40000000)))
564: /* MUTANT (rep_const) */            return 0;
564: /* MUTANT (rep_const) */            return 1;
564: /* MUTANT (rep_const) */            return -1;
564: /* MUTANT (rep_const) */            return ((32)+1);
564: /* MUTANT (rep_const) */            return ((32)-1);
575: /* MUTANT (del_stmt) */ /*     register int32 k; */ 
576: /* MUTANT (del_stmt) */ /*     register ULong x = *y; */ 
578: /* MUTANT (rep_const) */    if (x & 0) {
578: /* MUTANT (rep_const) */    if (x & 1) {
578: /* MUTANT (rep_const) */    if (x & -1) {
578: /* MUTANT (rep_const) */    if (x & ((7)+1)) {
578: /* MUTANT (rep_const) */    if (x & ((7)-1)) {
578: /* MUTANT (negate) */    if(! (x & 7)) {
579: /* MUTANT (rep_const) */        if (x & 0)
579: /* MUTANT (rep_const) */        if (x & -1)
579: /* MUTANT (rep_const) */        if (x & ((1)+1))
579: /* MUTANT (negate) */        if(! (x & 1))
580: /* MUTANT (rep_const) */            return 1;
580: /* MUTANT (rep_const) */            return -1;
581: /* MUTANT (rep_const) */        if (x & 0) {
581: /* MUTANT (rep_const) */        if (x & 1) {
581: /* MUTANT (rep_const) */        if (x & -1) {
581: /* MUTANT (rep_const) */        if (x & ((2)+1)) {
581: /* MUTANT (rep_const) */        if (x & ((2)-1)) {
581: /* MUTANT (negate) */        if(! (x & 2)) {
582: /* MUTANT (del_stmt) */ /*             *y = x >> 1; */ 
582: /* MUTANT (rep_const) */            *y = x >> 0;
582: /* MUTANT (rep_const) */            *y = x >> -1;
582: /* MUTANT (rep_const) */            *y = x >> ((1)+1);
583: /* MUTANT (del_stmt) */ /*             return 1; */ 
583: /* MUTANT (rep_const) */            return 0;
583: /* MUTANT (rep_const) */            return -1;
583: /* MUTANT (rep_const) */            return ((1)+1);
585: /* MUTANT (rep_const) */        *y = x >> 0;
585: /* MUTANT (rep_const) */        *y = x >> 1;
585: /* MUTANT (rep_const) */        *y = x >> -1;
585: /* MUTANT (rep_const) */        *y = x >> ((2)+1);
585: /* MUTANT (rep_const) */        *y = x >> ((2)-1);
586: /* MUTANT (del_stmt) */ /*         return 2; */ 
586: /* MUTANT (rep_const) */        return 0;
586: /* MUTANT (rep_const) */        return 1;
586: /* MUTANT (rep_const) */        return -1;
586: /* MUTANT (rep_const) */        return ((2)+1);
586: /* MUTANT (rep_const) */        return ((2)-1);
588: /* MUTANT (rep_const) */    k = 1;
588: /* MUTANT (rep_const) */    k = -1;
589: /* MUTANT (rep_const) */    if (!(x & 1xffff)) {
589: /* MUTANT (rep_const) */    if (!(x & -1xffff)) {
589: /* MUTANT (negate) */    if(! (!(x & 0xffff))) {
590: /* MUTANT (del_stmt) */ /*         k = 16; */ 
590: /* MUTANT (rep_const) */        k = 0;
590: /* MUTANT (rep_const) */        k = 1;
590: /* MUTANT (rep_const) */        k = -1;
590: /* MUTANT (rep_const) */        k = ((16)+1);
590: /* MUTANT (rep_const) */        k = ((16)-1);
591: /* MUTANT (del_stmt) */ /*         x >>= 16; */ 
591: /* MUTANT (rep_const) */        x >>= 0;
591: /* MUTANT (rep_const) */        x >>= 1;
591: /* MUTANT (rep_const) */        x >>= -1;
591: /* MUTANT (rep_const) */        x >>= ((16)+1);
591: /* MUTANT (rep_const) */        x >>= ((16)-1);
593: /* MUTANT (rep_const) */    if (!(x & 1xff)) {
593: /* MUTANT (rep_const) */    if (!(x & -1xff)) {
593: /* MUTANT (negate) */    if(! (!(x & 0xff))) {
594: /* MUTANT (del_stmt) */ /*         k += 8; */ 
594: /* MUTANT (rep_op) */        k -= 8;
594: /* MUTANT (rep_op) */        k *= 8;
594: /* MUTANT (rep_op) */        k %= 8;
594: /* MUTANT (rep_const) */        k += 0;
594: /* MUTANT (rep_const) */        k += 1;
594: /* MUTANT (rep_const) */        k += -1;
594: /* MUTANT (rep_const) */        k += ((8)+1);
594: /* MUTANT (rep_const) */        k += ((8)-1);
595: /* MUTANT (del_stmt) */ /*         x >>= 8; */ 
595: /* MUTANT (rep_const) */        x >>= 0;
595: /* MUTANT (rep_const) */        x >>= 1;
595: /* MUTANT (rep_const) */        x >>= -1;
595: /* MUTANT (rep_const) */        x >>= ((8)+1);
595: /* MUTANT (rep_const) */        x >>= ((8)-1);
597: /* MUTANT (rep_const) */    if (!(x & 1xf)) {
597: /* MUTANT (rep_const) */    if (!(x & -1xf)) {
597: /* MUTANT (negate) */    if(! (!(x & 0xf))) {
598: /* MUTANT (del_stmt) */ /*         k += 4; */ 
598: /* MUTANT (rep_op) */        k -= 4;
598: /* MUTANT (rep_op) */        k *= 4;
598: /* MUTANT (rep_op) */        k %= 4;
598: /* MUTANT (rep_const) */        k += 0;
598: /* MUTANT (rep_const) */        k += 1;
598: /* MUTANT (rep_const) */        k += -1;
598: /* MUTANT (rep_const) */        k += ((4)+1);
598: /* MUTANT (rep_const) */        k += ((4)-1);
599: /* MUTANT (del_stmt) */ /*         x >>= 4; */ 
599: /* MUTANT (rep_const) */        x >>= 0;
599: /* MUTANT (rep_const) */        x >>= 1;
599: /* MUTANT (rep_const) */        x >>= -1;
599: /* MUTANT (rep_const) */        x >>= ((4)+1);
599: /* MUTANT (rep_const) */        x >>= ((4)-1);
601: /* MUTANT (rep_const) */    if (!(x & 1x3)) {
601: /* MUTANT (rep_const) */    if (!(x & -1x3)) {
601: /* MUTANT (negate) */    if(! (!(x & 0x3))) {
602: /* MUTANT (del_stmt) */ /*         k += 2; */ 
602: /* MUTANT (rep_op) */        k -= 2;
602: /* MUTANT (rep_op) */        k *= 2;
602: /* MUTANT (rep_op) */        k %= 2;
602: /* MUTANT (rep_const) */        k += 0;
602: /* MUTANT (rep_const) */        k += 1;
602: /* MUTANT (rep_const) */        k += -1;
602: /* MUTANT (rep_const) */        k += ((2)+1);
602: /* MUTANT (rep_const) */        k += ((2)-1);
603: /* MUTANT (del_stmt) */ /*         x >>= 2; */ 
603: /* MUTANT (rep_const) */        x >>= 0;
603: /* MUTANT (rep_const) */        x >>= 1;
603: /* MUTANT (rep_const) */        x >>= -1;
603: /* MUTANT (rep_const) */        x >>= ((2)+1);
603: /* MUTANT (rep_const) */        x >>= ((2)-1);
605: /* MUTANT (rep_const) */    if (!(x & 0)) {
605: /* MUTANT (rep_const) */    if (!(x & -1)) {
605: /* MUTANT (rep_const) */    if (!(x & ((1)+1))) {
605: /* MUTANT (negate) */    if(! (!(x & 1))) {
606: /* MUTANT (del_stmt) */ /*         k++; */ 
606: /* MUTANT (rep_op) */        k--;
607: /* MUTANT (del_stmt) */ /*         x >>= 1; */ 
607: /* MUTANT (rep_const) */        x >>= 0;
607: /* MUTANT (rep_const) */        x >>= -1;
607: /* MUTANT (rep_const) */        x >>= ((1)+1);
608: /* MUTANT (rep_const) */        if (!x & 0)
608: /* MUTANT (rep_const) */        if (!x & -1)
608: /* MUTANT (rep_const) */        if (!x & ((1)+1))
608: /* MUTANT (negate) */        if(! (!x & 1))
609: /* MUTANT (rep_const) */            return 0;
609: /* MUTANT (rep_const) */            return 1;
609: /* MUTANT (rep_const) */            return -1;
609: /* MUTANT (rep_const) */            return ((32)+1);
609: /* MUTANT (rep_const) */            return ((32)-1);
612: /* MUTANT (del_stmt) */ /*     return k; */ 
618: /* MUTANT (del_stmt) */ /*     Bigint *b; */ 
620: /* MUTANT (del_stmt) */ /*     b = Balloc(1); */ 
620: /* MUTANT (rep_const) */    b = Balloc(0);
620: /* MUTANT (rep_const) */    b = Balloc(-1);
620: /* MUTANT (rep_const) */    b = Balloc(((1)+1));
621: /* MUTANT (negate) */    if(! (!b))
623: /* MUTANT (del_stmt) */ /*     b->x[0] = i; */ 
623: /* MUTANT (rep_const) */    b->x[1] = i;
623: /* MUTANT (rep_const) */    b->x[-1] = i;
624: /* MUTANT (del_stmt) */ /*     b->wds = 1; */ 
624: /* MUTANT (rep_const) */    b->wds = 0;
624: /* MUTANT (rep_const) */    b->wds = -1;
624: /* MUTANT (rep_const) */    b->wds = ((1)+1);
625: /* MUTANT (del_stmt) */ /*     return b; */ 
631: /* MUTANT (del_stmt) */ /*     CONST Bigint *t; */ 
632: /* MUTANT (del_stmt) */ /*     Bigint *c; */ 
633: /* MUTANT (del_stmt) */ /*     int32 k, wa, wb, wc; */ 
634: /* MUTANT (del_stmt) */ /*     ULong y; */ 
635: /* MUTANT (del_stmt) */ /*     ULong *xc, *xc0, *xce; */ 
636: /* MUTANT (del_stmt) */ /*     CONST ULong *x, *xa, *xae, *xb, *xbe; */ 
641: /* MUTANT (del_stmt) */ /*     ULong z2; */ 
644: /* MUTANT (rep_op) */    if (a->wds <= b->wds) {
644: /* MUTANT (rep_op) */    if (a->wds > b->wds) {
644: /* MUTANT (rep_op) */    if (a->wds >= b->wds) {
644: /* MUTANT (rep_op) */    if (a->wds == b->wds) {
644: /* MUTANT (rep_op) */    if (a->wds != b->wds) {
644: /* MUTANT (negate) */    if(! (a->wds < b->wds)) {
645: /* MUTANT (del_stmt) */ /*         t = a; */ 
646: /* MUTANT (del_stmt) */ /*         a = b; */ 
647: /* MUTANT (del_stmt) */ /*         b = t; */ 
650: /* MUTANT (del_stmt) */ /*     wa = a->wds; */ 
651: /* MUTANT (del_stmt) */ /*     wb = b->wds; */ 
652: /* MUTANT (del_stmt) */ /*     wc = wa + wb; */ 
652: /* MUTANT (rep_op) */    wc = wa - wb;
652: /* MUTANT (rep_op) */    wc = wa * wb;
652: /* MUTANT (rep_op) */    wc = wa % wb;
653: /* MUTANT (rep_op) */    if (wc <= a->maxwds)
653: /* MUTANT (rep_op) */    if (wc < a->maxwds)
653: /* MUTANT (rep_op) */    if (wc >= a->maxwds)
653: /* MUTANT (rep_op) */    if (wc == a->maxwds)
653: /* MUTANT (rep_op) */    if (wc != a->maxwds)
653: /* MUTANT (negate) */    if(! (wc > a->maxwds))
654: /* MUTANT (rep_op) */        k--;
655: /* MUTANT (del_stmt) */ /*     c = Balloc(k); */ 
656: /* MUTANT (negate) */    if(! (!c))
658: /* MUTANT (rep_op) */    for(xc = c->x, xce = xc - wc; xc < xce; xc++)
658: /* MUTANT (rep_op) */    for(xc = c->x, xce = xc * wc; xc < xce; xc++)
658: /* MUTANT (rep_op) */    for(xc = c->x, xce = xc % wc; xc < xce; xc++)
658: /* MUTANT (rep_op) */    for(xc = c->x, xce = xc + wc; xc <= xce; xc++)
658: /* MUTANT (rep_op) */    for(xc = c->x, xce = xc + wc; xc > xce; xc++)
658: /* MUTANT (rep_op) */    for(xc = c->x, xce = xc + wc; xc >= xce; xc++)
658: /* MUTANT (rep_op) */    for(xc = c->x, xce = xc + wc; xc == xce; xc++)
658: /* MUTANT (rep_op) */    for(xc = c->x, xce = xc + wc; xc != xce; xc++)
658: /* MUTANT (rep_op) */    for(xc = c->x, xce = xc + wc; xc < xce; xc--)
659: /* MUTANT (rep_const) */        *xc = 1;
659: /* MUTANT (rep_const) */        *xc = -1;
660: /* MUTANT (del_stmt) */ /*     xa = a->x; */ 
661: /* MUTANT (del_stmt) */ /*     xae = xa + wa; */ 
661: /* MUTANT (rep_op) */    xae = xa - wa;
661: /* MUTANT (rep_op) */    xae = xa * wa;
661: /* MUTANT (rep_op) */    xae = xa % wa;
662: /* MUTANT (del_stmt) */ /*     xb = b->x; */ 
663: /* MUTANT (del_stmt) */ /*     xbe = xb + wb; */ 
663: /* MUTANT (rep_op) */    xbe = xb - wb;
663: /* MUTANT (rep_op) */    xbe = xb * wb;
663: /* MUTANT (rep_op) */    xbe = xb % wb;
664: /* MUTANT (del_stmt) */ /*     xc0 = c->x; */ 
666: /* MUTANT (rep_op) */    for(; xb <= xbe; xc0++) {
666: /* MUTANT (rep_op) */    for(; xb > xbe; xc0++) {
666: /* MUTANT (rep_op) */    for(; xb >= xbe; xc0++) {
666: /* MUTANT (rep_op) */    for(; xb == xbe; xc0++) {
666: /* MUTANT (rep_op) */    for(; xb != xbe; xc0++) {
666: /* MUTANT (rep_op) */    for(; xb < xbe; xc0--) {
667: /* MUTANT (rep_op) */        if ((y = *xb--) != 0) {
667: /* MUTANT (rep_op) */        if ((y = *xb++) == 0) {
667: /* MUTANT (rep_const) */        if ((y = *xb++) != 1) {
667: /* MUTANT (rep_const) */        if ((y = *xb++) != -1) {
667: /* MUTANT (negate) */        if(! ((y = *xb++) != 0)) {
668: /* MUTANT (del_stmt) */ /*             x = xa; */ 
669: /* MUTANT (del_stmt) */ /*             xc = xc0; */ 
670: /* MUTANT (del_stmt) */ /*             carry = 0; */ 
670: /* MUTANT (rep_const) */            carry = 1;
670: /* MUTANT (rep_const) */            carry = -1;
672: /* MUTANT (del_stmt) */ /*                 z = *x++ * (ULLong)y + *xc + carry; */ 
672: /* MUTANT (rep_op) */                z = *x-- * (ULLong)y + *xc + carry;
672: /* MUTANT (rep_op) */                z = *x++ * (ULLong)y - *xc + carry;
672: /* MUTANT (rep_op) */                z = *x++ * (ULLong)y * *xc + carry;
672: /* MUTANT (rep_op) */                z = *x++ * (ULLong)y % *xc + carry;
672: /* MUTANT (rep_op) */                z = *x++ * (ULLong)y + *xc - carry;
672: /* MUTANT (rep_op) */                z = *x++ * (ULLong)y + *xc * carry;
672: /* MUTANT (rep_op) */                z = *x++ * (ULLong)y + *xc % carry;
673: /* MUTANT (del_stmt) */ /*                 carry = z >> 32; */ 
673: /* MUTANT (rep_const) */                carry = z >> 0;
673: /* MUTANT (rep_const) */                carry = z >> 1;
673: /* MUTANT (rep_const) */                carry = z >> -1;
673: /* MUTANT (rep_const) */                carry = z >> ((32)+1);
673: /* MUTANT (rep_const) */                carry = z >> ((32)-1);
674: /* MUTANT (del_stmt) */ /*                 *xc++ = (ULong)(z & 0xffffffffUL); */ 
674: /* MUTANT (rep_op) */                *xc-- = (ULong)(z & 0xffffffffUL);
674: /* MUTANT (rep_const) */                *xc++ = (ULong)(z & 1xffffffffUL);
674: /* MUTANT (rep_const) */                *xc++ = (ULong)(z & -1xffffffffUL);
676: /* MUTANT (rep_op) */                while(x <= xae);
676: /* MUTANT (rep_op) */                while(x > xae);
676: /* MUTANT (rep_op) */                while(x >= xae);
676: /* MUTANT (rep_op) */                while(x == xae);
676: /* MUTANT (rep_op) */                while(x != xae);
676: /* MUTANT (negate) */                while(!(x < xae));
677: /* MUTANT (del_stmt) */ /*             *xc = (ULong)carry; */ 
681: /* MUTANT (rep_op) */    for(; xb <= xbe; xb++, xc0++) {
681: /* MUTANT (rep_op) */    for(; xb > xbe; xb++, xc0++) {
681: /* MUTANT (rep_op) */    for(; xb >= xbe; xb++, xc0++) {
681: /* MUTANT (rep_op) */    for(; xb == xbe; xb++, xc0++) {
681: /* MUTANT (rep_op) */    for(; xb != xbe; xb++, xc0++) {
681: /* MUTANT (rep_op) */    for(; xb < xbe; xb--, xc0++) {
681: /* MUTANT (rep_op) */    for(; xb < xbe; xb++, xc0--) {
682: /* MUTANT (rep_op) */        if ((y = *xb & 0xffff) == 0) {
682: /* MUTANT (rep_const) */        if ((y = *xb & 1xffff) != 0) {
682: /* MUTANT (rep_const) */        if ((y = *xb & -1xffff) != 0) {
682: /* MUTANT (rep_const) */        if ((y = *xb & 0xffff) != 1) {
682: /* MUTANT (rep_const) */        if ((y = *xb & 0xffff) != -1) {
682: /* MUTANT (negate) */        if(! ((y = *xb & 0xffff) != 0)) {
683: /* MUTANT (del_stmt) */ /*             x = xa; */ 
684: /* MUTANT (del_stmt) */ /*             xc = xc0; */ 
685: /* MUTANT (del_stmt) */ /*             carry = 0; */ 
685: /* MUTANT (rep_const) */            carry = 1;
685: /* MUTANT (rep_const) */            carry = -1;
687: /* MUTANT (del_stmt) */ /*                 z = (*x & 0xffff) * y + (*xc & 0xffff) + carry; */ 
687: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y - (*xc & 0xffff) + carry;
687: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y * (*xc & 0xffff) + carry;
687: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y % (*xc & 0xffff) + carry;
687: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y + (*xc & 0xffff) - carry;
687: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y + (*xc & 0xffff) * carry;
687: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y + (*xc & 0xffff) % carry;
687: /* MUTANT (rep_const) */                z = (*x & 1xffff) * y + (*xc & 0xffff) + carry;
687: /* MUTANT (rep_const) */                z = (*x & -1xffff) * y + (*xc & 0xffff) + carry;
687: /* MUTANT (rep_const) */                z = (*x & 0xffff) * y + (*xc & 1xffff) + carry;
687: /* MUTANT (rep_const) */                z = (*x & 0xffff) * y + (*xc & -1xffff) + carry;
688: /* MUTANT (del_stmt) */ /*                 carry = z >> 16; */ 
688: /* MUTANT (rep_const) */                carry = z >> 0;
688: /* MUTANT (rep_const) */                carry = z >> 1;
688: /* MUTANT (rep_const) */                carry = z >> -1;
688: /* MUTANT (rep_const) */                carry = z >> ((16)+1);
688: /* MUTANT (rep_const) */                carry = z >> ((16)-1);
689: /* MUTANT (del_stmt) */ /*                 z2 = (*x++ >> 16) * y + (*xc >> 16) + carry; */ 
689: /* MUTANT (rep_op) */                z2 = (*x-- >> 16) * y + (*xc >> 16) + carry;
689: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y - (*xc >> 16) + carry;
689: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y * (*xc >> 16) + carry;
689: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y % (*xc >> 16) + carry;
689: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y + (*xc >> 16) - carry;
689: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y + (*xc >> 16) * carry;
689: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y + (*xc >> 16) % carry;
689: /* MUTANT (rep_const) */                z2 = (*x++ >> 0) * y + (*xc >> 16) + carry;
689: /* MUTANT (rep_const) */                z2 = (*x++ >> 1) * y + (*xc >> 16) + carry;
689: /* MUTANT (rep_const) */                z2 = (*x++ >> -1) * y + (*xc >> 16) + carry;
689: /* MUTANT (rep_const) */                z2 = (*x++ >> ((16)+1)) * y + (*xc >> 16) + carry;
689: /* MUTANT (rep_const) */                z2 = (*x++ >> ((16)-1)) * y + (*xc >> 16) + carry;
689: /* MUTANT (rep_const) */                z2 = (*x++ >> 16) * y + (*xc >> 0) + carry;
689: /* MUTANT (rep_const) */                z2 = (*x++ >> 16) * y + (*xc >> 1) + carry;
689: /* MUTANT (rep_const) */                z2 = (*x++ >> 16) * y + (*xc >> -1) + carry;
689: /* MUTANT (rep_const) */                z2 = (*x++ >> 16) * y + (*xc >> ((16)+1)) + carry;
689: /* MUTANT (rep_const) */                z2 = (*x++ >> 16) * y + (*xc >> ((16)-1)) + carry;
690: /* MUTANT (del_stmt) */ /*                 carry = z2 >> 16; */ 
690: /* MUTANT (rep_const) */                carry = z2 >> 0;
690: /* MUTANT (rep_const) */                carry = z2 >> 1;
690: /* MUTANT (rep_const) */                carry = z2 >> -1;
690: /* MUTANT (rep_const) */                carry = z2 >> ((16)+1);
690: /* MUTANT (rep_const) */                carry = z2 >> ((16)-1);
691: /* MUTANT (del_stmt) */ /*                 Storeinc(xc, z2, z); */ 
693: /* MUTANT (rep_op) */            while(x <= xae);
693: /* MUTANT (rep_op) */            while(x > xae);
693: /* MUTANT (rep_op) */            while(x >= xae);
693: /* MUTANT (rep_op) */            while(x == xae);
693: /* MUTANT (rep_op) */            while(x != xae);
693: /* MUTANT (negate) */            while(!(x < xae));
694: /* MUTANT (del_stmt) */ /*             *xc = carry; */ 
696: /* MUTANT (rep_op) */        if ((y = *xb >> 16) == 0) {
696: /* MUTANT (rep_const) */        if ((y = *xb >> 0) != 0) {
696: /* MUTANT (rep_const) */        if ((y = *xb >> 1) != 0) {
696: /* MUTANT (rep_const) */        if ((y = *xb >> -1) != 0) {
696: /* MUTANT (rep_const) */        if ((y = *xb >> ((16)+1)) != 0) {
696: /* MUTANT (rep_const) */        if ((y = *xb >> ((16)-1)) != 0) {
696: /* MUTANT (rep_const) */        if ((y = *xb >> 16) != 1) {
696: /* MUTANT (rep_const) */        if ((y = *xb >> 16) != -1) {
696: /* MUTANT (negate) */        if(! ((y = *xb >> 16) != 0)) {
697: /* MUTANT (del_stmt) */ /*             x = xa; */ 
698: /* MUTANT (del_stmt) */ /*             xc = xc0; */ 
699: /* MUTANT (del_stmt) */ /*             carry = 0; */ 
699: /* MUTANT (rep_const) */            carry = 1;
699: /* MUTANT (rep_const) */            carry = -1;
700: /* MUTANT (del_stmt) */ /*             z2 = *xc; */ 
702: /* MUTANT (del_stmt) */ /*                 z = (*x & 0xffff) * y + (*xc >> 16) + carry; */ 
702: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y - (*xc >> 16) + carry;
702: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y * (*xc >> 16) + carry;
702: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y % (*xc >> 16) + carry;
702: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y + (*xc >> 16) - carry;
702: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y + (*xc >> 16) * carry;
702: /* MUTANT (rep_op) */                z = (*x & 0xffff) * y + (*xc >> 16) % carry;
702: /* MUTANT (rep_const) */                z = (*x & 1xffff) * y + (*xc >> 16) + carry;
702: /* MUTANT (rep_const) */                z = (*x & -1xffff) * y + (*xc >> 16) + carry;
702: /* MUTANT (rep_const) */                z = (*x & 0xffff) * y + (*xc >> 0) + carry;
702: /* MUTANT (rep_const) */                z = (*x & 0xffff) * y + (*xc >> 1) + carry;
702: /* MUTANT (rep_const) */                z = (*x & 0xffff) * y + (*xc >> -1) + carry;
702: /* MUTANT (rep_const) */                z = (*x & 0xffff) * y + (*xc >> ((16)+1)) + carry;
702: /* MUTANT (rep_const) */                z = (*x & 0xffff) * y + (*xc >> ((16)-1)) + carry;
703: /* MUTANT (del_stmt) */ /*                 carry = z >> 16; */ 
703: /* MUTANT (rep_const) */                carry = z >> 0;
703: /* MUTANT (rep_const) */                carry = z >> 1;
703: /* MUTANT (rep_const) */                carry = z >> -1;
703: /* MUTANT (rep_const) */                carry = z >> ((16)+1);
703: /* MUTANT (rep_const) */                carry = z >> ((16)-1);
704: /* MUTANT (del_stmt) */ /*                 Storeinc(xc, z, z2); */ 
705: /* MUTANT (del_stmt) */ /*                 z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry; */ 
705: /* MUTANT (rep_op) */                z2 = (*x-- >> 16) * y + (*xc & 0xffff) + carry;
705: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y - (*xc & 0xffff) + carry;
705: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y * (*xc & 0xffff) + carry;
705: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y % (*xc & 0xffff) + carry;
705: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y + (*xc & 0xffff) - carry;
705: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y + (*xc & 0xffff) * carry;
705: /* MUTANT (rep_op) */                z2 = (*x++ >> 16) * y + (*xc & 0xffff) % carry;
705: /* MUTANT (rep_const) */                z2 = (*x++ >> 0) * y + (*xc & 0xffff) + carry;
705: /* MUTANT (rep_const) */                z2 = (*x++ >> 1) * y + (*xc & 0xffff) + carry;
705: /* MUTANT (rep_const) */                z2 = (*x++ >> -1) * y + (*xc & 0xffff) + carry;
705: /* MUTANT (rep_const) */                z2 = (*x++ >> ((16)+1)) * y + (*xc & 0xffff) + carry;
705: /* MUTANT (rep_const) */                z2 = (*x++ >> ((16)-1)) * y + (*xc & 0xffff) + carry;
705: /* MUTANT (rep_const) */                z2 = (*x++ >> 16) * y + (*xc & 1xffff) + carry;
705: /* MUTANT (rep_const) */                z2 = (*x++ >> 16) * y + (*xc & -1xffff) + carry;
706: /* MUTANT (del_stmt) */ /*                 carry = z2 >> 16; */ 
706: /* MUTANT (rep_const) */                carry = z2 >> 0;
706: /* MUTANT (rep_const) */                carry = z2 >> 1;
706: /* MUTANT (rep_const) */                carry = z2 >> -1;
706: /* MUTANT (rep_const) */                carry = z2 >> ((16)+1);
706: /* MUTANT (rep_const) */                carry = z2 >> ((16)-1);
708: /* MUTANT (rep_op) */            while(x <= xae);
708: /* MUTANT (rep_op) */            while(x > xae);
708: /* MUTANT (rep_op) */            while(x >= xae);
708: /* MUTANT (rep_op) */            while(x == xae);
708: /* MUTANT (rep_op) */            while(x != xae);
708: /* MUTANT (negate) */            while(!(x < xae));
709: /* MUTANT (del_stmt) */ /*             *xc = z2; */ 
713: /* MUTANT (rep_op) */    for(xc0 = c->x, xc = xc0 - wc; wc > 0 && !*--xc; --wc) ;
713: /* MUTANT (rep_op) */    for(xc0 = c->x, xc = xc0 * wc; wc > 0 && !*--xc; --wc) ;
713: /* MUTANT (rep_op) */    for(xc0 = c->x, xc = xc0 % wc; wc > 0 && !*--xc; --wc) ;
713: /* MUTANT (rep_op) */    for(xc0 = c->x, xc = xc0 + wc; wc <= 0 && !*--xc; --wc) ;
713: /* MUTANT (rep_op) */    for(xc0 = c->x, xc = xc0 + wc; wc < 0 && !*--xc; --wc) ;
713: /* MUTANT (rep_op) */    for(xc0 = c->x, xc = xc0 + wc; wc >= 0 && !*--xc; --wc) ;
713: /* MUTANT (rep_op) */    for(xc0 = c->x, xc = xc0 + wc; wc == 0 && !*--xc; --wc) ;
713: /* MUTANT (rep_op) */    for(xc0 = c->x, xc = xc0 + wc; wc != 0 && !*--xc; --wc) ;
713: /* MUTANT (rep_op) */    for(xc0 = c->x, xc = xc0 + wc; wc > 0 || !*--xc; --wc) ;
713: /* MUTANT (rep_op) */    for(xc0 = c->x, xc = xc0 + wc; wc > 0 && !*--xc; ++wc) ;
713: /* MUTANT (rep_const) */    for(xc0 = c->x, xc = xc0 + wc; wc > 1 && !*--xc; --wc) ;
713: /* MUTANT (rep_const) */    for(xc0 = c->x, xc = xc0 + wc; wc > -1 && !*--xc; --wc) ;
714: /* MUTANT (del_stmt) */ /*     c->wds = wc; */ 
715: /* MUTANT (del_stmt) */ /*     return c; */ 
738: /* MUTANT (del_stmt) */ /*     Bigint *b1, *p5, *p51; */ 
739: /* MUTANT (del_stmt) */ /*     int32 i; */ 
740: /* MUTANT (del_stmt) */ /*     static CONST int32 p05[3] = { 5, 25, 125 }; */ 
740: /* MUTANT (rep_const) */    static CONST int32 p05[0] = { 5, 25, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[1] = { 5, 25, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[-1] = { 5, 25, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[((3)+1)] = { 5, 25, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[((3)-1)] = { 5, 25, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 0, 25, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 1, 25, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { -1, 25, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { ((5)+1), 25, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { ((5)-1), 25, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 5, 0, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 5, 1, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 5, -1, 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 5, ((25)+1), 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 5, ((25)-1), 125 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 5, 25, 0 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 5, 25, 1 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 5, 25, -1 };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 5, 25, ((125)+1) };
740: /* MUTANT (rep_const) */    static CONST int32 p05[3] = { 5, 25, ((125)-1) };
742: /* MUTANT (rep_op) */    if ((i = k & 3) == 0) {
742: /* MUTANT (rep_const) */    if ((i = k & 0) != 0) {
742: /* MUTANT (rep_const) */    if ((i = k & 1) != 0) {
742: /* MUTANT (rep_const) */    if ((i = k & -1) != 0) {
742: /* MUTANT (rep_const) */    if ((i = k & ((3)+1)) != 0) {
742: /* MUTANT (rep_const) */    if ((i = k & ((3)-1)) != 0) {
742: /* MUTANT (rep_const) */    if ((i = k & 3) != 1) {
742: /* MUTANT (rep_const) */    if ((i = k & 3) != -1) {
742: /* MUTANT (negate) */    if(! ((i = k & 3) != 0)) {
743: /* MUTANT (del_stmt) */ /*         b = multadd(b, p05[i-1], 0); */ 
743: /* MUTANT (rep_const) */        b = multadd(b, p05[i-0], 0);
743: /* MUTANT (rep_const) */        b = multadd(b, p05[i--1], 0);
743: /* MUTANT (rep_const) */        b = multadd(b, p05[i-((1)+1)], 0);
743: /* MUTANT (rep_const) */        b = multadd(b, p05[i-1], 1);
743: /* MUTANT (rep_const) */        b = multadd(b, p05[i-1], -1);
744: /* MUTANT (negate) */        if(! (!b))
748: /* MUTANT (rep_const) */    if (!(k >>= 0))
748: /* MUTANT (rep_const) */    if (!(k >>= 1))
748: /* MUTANT (rep_const) */    if (!(k >>= -1))
748: /* MUTANT (rep_const) */    if (!(k >>= ((2)+1)))
748: /* MUTANT (rep_const) */    if (!(k >>= ((2)-1)))
748: /* MUTANT (negate) */    if(! (!(k >>= 2)))
750: /* MUTANT (negate) */    if(! (!(p5 = p5s))) {
757: /* MUTANT (del_stmt) */ /*         p5 = i2b(625); */ 
757: /* MUTANT (rep_const) */        p5 = i2b(0);
757: /* MUTANT (rep_const) */        p5 = i2b(1);
757: /* MUTANT (rep_const) */        p5 = i2b(-1);
757: /* MUTANT (rep_const) */        p5 = i2b(((625)+1));
757: /* MUTANT (rep_const) */        p5 = i2b(((625)-1));
758: /* MUTANT (negate) */        if(! (!p5)) {
759: /* MUTANT (del_stmt) */ /*             Bfree(b); */ 
760: /* MUTANT (del_stmt) */ /*             return NULL; */ 
764: /* MUTANT (negate) */        if(! (!p5s)) {
766: /* MUTANT (del_stmt) */ /*             p5s = p5; */ 
767: /* MUTANT (del_stmt) */ /*             p5->next = 0; */ 
767: /* MUTANT (rep_const) */            p5->next = 1;
767: /* MUTANT (rep_const) */            p5->next = -1;
770: /* MUTANT (del_stmt) */ /*             wasted_effort = p5; */ 
771: /* MUTANT (del_stmt) */ /*             p5 = p5s; */ 
774: /* MUTANT (negate) */        if(! (wasted_effort)) {
775: /* MUTANT (del_stmt) */ /*             Bfree(wasted_effort); */ 
779: /* MUTANT (rep_const) */        p5 = p5s = i2b(0);
779: /* MUTANT (rep_const) */        p5 = p5s = i2b(1);
779: /* MUTANT (rep_const) */        p5 = p5s = i2b(-1);
779: /* MUTANT (rep_const) */        p5 = p5s = i2b(((625)+1));
779: /* MUTANT (rep_const) */        p5 = p5s = i2b(((625)-1));
780: /* MUTANT (negate) */        if(! (!p5)) {
781: /* MUTANT (del_stmt) */ /*             Bfree(b); */ 
782: /* MUTANT (del_stmt) */ /*             return NULL; */ 
784: /* MUTANT (rep_const) */        p5->next = 1;
784: /* MUTANT (rep_const) */        p5->next = -1;
788: /* MUTANT (rep_const) */        if (k & 0) {
788: /* MUTANT (rep_const) */        if (k & -1) {
788: /* MUTANT (rep_const) */        if (k & ((1)+1)) {
788: /* MUTANT (negate) */        if(! (k & 1)) {
789: /* MUTANT (del_stmt) */ /*             b1 = mult(b, p5); */ 
790: /* MUTANT (del_stmt) */ /*             Bfree(b); */ 
791: /* MUTANT (negate) */            if(! (!b1))
793: /* MUTANT (del_stmt) */ /*             b = b1; */ 
795: /* MUTANT (rep_const) */        if (!(k >>= 0))
795: /* MUTANT (rep_const) */        if (!(k >>= -1))
795: /* MUTANT (rep_const) */        if (!(k >>= ((1)+1)))
795: /* MUTANT (negate) */        if(! (!(k >>= 1)))
797: /* MUTANT (negate) */        if(! (!(p51 = p5->next))) {
800: /* MUTANT (del_stmt) */ /*             p51 = mult(p5, p5); */ 
801: /* MUTANT (negate) */            if(! (!p51)) {
802: /* MUTANT (del_stmt) */ /*                 Bfree(b); */ 
803: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
806: /* MUTANT (negate) */            if(! (!p5->next)) {
807: /* MUTANT (del_stmt) */ /*                 p5->next = p51; */ 
808: /* MUTANT (del_stmt) */ /*                 p51->next = 0; */ 
808: /* MUTANT (rep_const) */                p51->next = 1;
808: /* MUTANT (rep_const) */                p51->next = -1;
810: /* MUTANT (del_stmt) */ /*                 wasted_effort = p51; */ 
811: /* MUTANT (del_stmt) */ /*                 p51 = p5->next; */ 
814: /* MUTANT (negate) */            if(! (wasted_effort)) {
815: /* MUTANT (del_stmt) */ /*                 Bfree(wasted_effort); */ 
819: /* MUTANT (negate) */            if(! (!p51)) {
820: /* MUTANT (del_stmt) */ /*                 Bfree(b); */ 
821: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
823: /* MUTANT (rep_const) */            p51->next = 1;
823: /* MUTANT (rep_const) */            p51->next = -1;
824: /* MUTANT (del_stmt) */ /*             p5->next = p51; */ 
834: /* MUTANT (negate) */static Bigint *lshif(!t(Bigint *b, int32 k))
836: /* MUTANT (del_stmt) */ /*     int32 i, k1, n, n1; */ 
837: /* MUTANT (del_stmt) */ /*     Bigint *b1; */ 
838: /* MUTANT (del_stmt) */ /*     ULong *x, *x1, *xe, z; */ 
840: /* MUTANT (del_stmt) */ /*     n = k >> 5; */ 
840: /* MUTANT (rep_const) */    n = k >> 0;
840: /* MUTANT (rep_const) */    n = k >> 1;
840: /* MUTANT (rep_const) */    n = k >> -1;
840: /* MUTANT (rep_const) */    n = k >> ((5)+1);
840: /* MUTANT (rep_const) */    n = k >> ((5)-1);
841: /* MUTANT (del_stmt) */ /*     k1 = b->k; */ 
842: /* MUTANT (del_stmt) */ /*     n1 = n + b->wds + 1; */ 
842: /* MUTANT (rep_op) */    n1 = n - b->wds + 1;
842: /* MUTANT (rep_op) */    n1 = n * b->wds + 1;
842: /* MUTANT (rep_op) */    n1 = n % b->wds + 1;
842: /* MUTANT (rep_op) */    n1 = n + b->wds - 1;
842: /* MUTANT (rep_op) */    n1 = n + b->wds * 1;
842: /* MUTANT (rep_op) */    n1 = n + b->wds % 1;
842: /* MUTANT (rep_const) */    n1 = n + b->wds + 0;
842: /* MUTANT (rep_const) */    n1 = n + b->wds + -1;
842: /* MUTANT (rep_const) */    n1 = n + b->wds + ((1)+1);
843: /* MUTANT (rep_op) */    for(i = b->maxwds; n1 <= i; i <<= 1)
843: /* MUTANT (rep_op) */    for(i = b->maxwds; n1 < i; i <<= 1)
843: /* MUTANT (rep_op) */    for(i = b->maxwds; n1 >= i; i <<= 1)
843: /* MUTANT (rep_op) */    for(i = b->maxwds; n1 == i; i <<= 1)
843: /* MUTANT (rep_op) */    for(i = b->maxwds; n1 != i; i <<= 1)
843: /* MUTANT (rep_const) */    for(i = b->maxwds; n1 > i; i <<= 0)
843: /* MUTANT (rep_const) */    for(i = b->maxwds; n1 > i; i <<= -1)
843: /* MUTANT (rep_const) */    for(i = b->maxwds; n1 > i; i <<= ((1)+1))
844: /* MUTANT (rep_op) */        k1--;
845: /* MUTANT (del_stmt) */ /*     b1 = Balloc(k1); */ 
846: /* MUTANT (negate) */    if(! (!b1))
848: /* MUTANT (del_stmt) */ /*     x1 = b1->x; */ 
849: /* MUTANT (rep_op) */    for(i = 0; i <= n; i++)
849: /* MUTANT (rep_op) */    for(i = 0; i > n; i++)
849: /* MUTANT (rep_op) */    for(i = 0; i >= n; i++)
849: /* MUTANT (rep_op) */    for(i = 0; i == n; i++)
849: /* MUTANT (rep_op) */    for(i = 0; i != n; i++)
849: /* MUTANT (rep_op) */    for(i = 0; i < n; i--)
849: /* MUTANT (rep_const) */    for(i = 1; i < n; i++)
849: /* MUTANT (rep_const) */    for(i = -1; i < n; i++)
850: /* MUTANT (rep_op) */        *x1-- = 0;
850: /* MUTANT (rep_const) */        *x1++ = 1;
850: /* MUTANT (rep_const) */        *x1++ = -1;
851: /* MUTANT (del_stmt) */ /*     x = b->x; */ 
852: /* MUTANT (del_stmt) */ /*     xe = x + b->wds; */ 
852: /* MUTANT (rep_op) */    xe = x - b->wds;
852: /* MUTANT (rep_op) */    xe = x * b->wds;
852: /* MUTANT (rep_op) */    xe = x % b->wds;
853: /* MUTANT (rep_const) */    if (k &= 1x1f) {
853: /* MUTANT (rep_const) */    if (k &= -1x1f) {
853: /* MUTANT (negate) */    if(! (k &= 0x1f)) {
854: /* MUTANT (del_stmt) */ /*         k1 = 32 - k; */ 
854: /* MUTANT (rep_const) */        k1 = 0 - k;
854: /* MUTANT (rep_const) */        k1 = 1 - k;
854: /* MUTANT (rep_const) */        k1 = -1 - k;
854: /* MUTANT (rep_const) */        k1 = ((32)+1) - k;
854: /* MUTANT (rep_const) */        k1 = ((32)-1) - k;
855: /* MUTANT (del_stmt) */ /*         z = 0; */ 
855: /* MUTANT (rep_const) */        z = 1;
855: /* MUTANT (rep_const) */        z = -1;
857: /* MUTANT (del_stmt) */ /*             *x1++ = *x << k | z; */ 
857: /* MUTANT (rep_op) */            *x1-- = *x << k | z;
857: /* MUTANT (rep_op) */            *x1++ = *x << k & z;
858: /* MUTANT (del_stmt) */ /*             z = *x++ >> k1; */ 
858: /* MUTANT (rep_op) */            z = *x-- >> k1;
860: /* MUTANT (rep_op) */        while(x <= xe);
860: /* MUTANT (rep_op) */        while(x > xe);
860: /* MUTANT (rep_op) */        while(x >= xe);
860: /* MUTANT (rep_op) */        while(x == xe);
860: /* MUTANT (rep_op) */        while(x != xe);
860: /* MUTANT (negate) */        while(!(x < xe));
861: /* MUTANT (rep_op) */        if ((*x1 = z) == 0)
861: /* MUTANT (rep_const) */        if ((*x1 = z) != 1)
861: /* MUTANT (rep_const) */        if ((*x1 = z) != -1)
861: /* MUTANT (negate) */        if(! ((*x1 = z) != 0))
862: /* MUTANT (rep_op) */            --n1;
865: /* MUTANT (rep_op) */        *x1-- = *x++;
865: /* MUTANT (rep_op) */        *x1++ = *x--;
866: /* MUTANT (del_stmt) */ /*          while(x < xe); */ 
866: /* MUTANT (rep_op) */         while(x <= xe);
866: /* MUTANT (rep_op) */         while(x > xe);
866: /* MUTANT (rep_op) */         while(x >= xe);
866: /* MUTANT (rep_op) */         while(x == xe);
866: /* MUTANT (rep_op) */         while(x != xe);
866: /* MUTANT (negate) */         while(!(x < xe));
867: /* MUTANT (del_stmt) */ /*     b1->wds = n1 - 1; */ 
867: /* MUTANT (rep_const) */    b1->wds = n1 - 0;
867: /* MUTANT (rep_const) */    b1->wds = n1 - -1;
867: /* MUTANT (rep_const) */    b1->wds = n1 - ((1)+1);
870: /* MUTANT (del_stmt) */ /*     return b1; */ 
876: /* MUTANT (del_stmt) */ /*     ULong *xa, *xa0, *xb, *xb0; */ 
877: /* MUTANT (del_stmt) */ /*     int32 i, j; */ 
879: /* MUTANT (del_stmt) */ /*     i = a->wds; */ 
880: /* MUTANT (del_stmt) */ /*     j = b->wds; */ 
882: /* MUTANT (rep_op) */    if (i <= 1 && !a->x[i-1])
882: /* MUTANT (rep_op) */    if (i < 1 && !a->x[i-1])
882: /* MUTANT (rep_op) */    if (i >= 1 && !a->x[i-1])
882: /* MUTANT (rep_op) */    if (i == 1 && !a->x[i-1])
882: /* MUTANT (rep_op) */    if (i != 1 && !a->x[i-1])
882: /* MUTANT (rep_op) */    if (i > 1 || !a->x[i-1])
882: /* MUTANT (rep_const) */    if (i > 0 && !a->x[i-1])
882: /* MUTANT (rep_const) */    if (i > -1 && !a->x[i-1])
882: /* MUTANT (rep_const) */    if (i > ((1)+1) && !a->x[i-1])
882: /* MUTANT (rep_const) */    if (i > 1 && !a->x[i-0])
882: /* MUTANT (rep_const) */    if (i > 1 && !a->x[i--1])
882: /* MUTANT (rep_const) */    if (i > 1 && !a->x[i-((1)+1)])
882: /* MUTANT (negate) */    if(! (i > 1 && !a->x[i-1]))
883: /* MUTANT (rep_const) */        Bug("cmp called with a->x[a->wds-0] == 0");
883: /* MUTANT (rep_const) */        Bug("cmp called with a->x[a->wds--1] == 0");
883: /* MUTANT (rep_const) */        Bug("cmp called with a->x[a->wds-((1)+1)] == 0");
883: /* MUTANT (rep_const) */        Bug("cmp called with a->x[a->wds-1] == 1");
883: /* MUTANT (rep_const) */        Bug("cmp called with a->x[a->wds-1] == -1");
884: /* MUTANT (rep_op) */    if (j <= 1 && !b->x[j-1])
884: /* MUTANT (rep_op) */    if (j < 1 && !b->x[j-1])
884: /* MUTANT (rep_op) */    if (j >= 1 && !b->x[j-1])
884: /* MUTANT (rep_op) */    if (j == 1 && !b->x[j-1])
884: /* MUTANT (rep_op) */    if (j != 1 && !b->x[j-1])
884: /* MUTANT (rep_op) */    if (j > 1 || !b->x[j-1])
884: /* MUTANT (rep_const) */    if (j > 0 && !b->x[j-1])
884: /* MUTANT (rep_const) */    if (j > -1 && !b->x[j-1])
884: /* MUTANT (rep_const) */    if (j > ((1)+1) && !b->x[j-1])
884: /* MUTANT (rep_const) */    if (j > 1 && !b->x[j-0])
884: /* MUTANT (rep_const) */    if (j > 1 && !b->x[j--1])
884: /* MUTANT (rep_const) */    if (j > 1 && !b->x[j-((1)+1)])
884: /* MUTANT (negate) */    if(! (j > 1 && !b->x[j-1]))
885: /* MUTANT (rep_const) */        Bug("cmp called with b->x[b->wds-0] == 0");
885: /* MUTANT (rep_const) */        Bug("cmp called with b->x[b->wds--1] == 0");
885: /* MUTANT (rep_const) */        Bug("cmp called with b->x[b->wds-((1)+1)] == 0");
885: /* MUTANT (rep_const) */        Bug("cmp called with b->x[b->wds-1] == 1");
885: /* MUTANT (rep_const) */        Bug("cmp called with b->x[b->wds-1] == -1");
887: /* MUTANT (rep_op) */    if (i += j)
887: /* MUTANT (rep_op) */    if (i *= j)
887: /* MUTANT (rep_op) */    if (i %= j)
887: /* MUTANT (negate) */    if(! (i -= j))
889: /* MUTANT (del_stmt) */ /*     xa0 = a->x; */ 
890: /* MUTANT (del_stmt) */ /*     xa = xa0 + j; */ 
890: /* MUTANT (rep_op) */    xa = xa0 - j;
890: /* MUTANT (rep_op) */    xa = xa0 * j;
890: /* MUTANT (rep_op) */    xa = xa0 % j;
891: /* MUTANT (del_stmt) */ /*     xb0 = b->x; */ 
892: /* MUTANT (del_stmt) */ /*     xb = xb0 + j; */ 
892: /* MUTANT (rep_op) */    xb = xb0 - j;
892: /* MUTANT (rep_op) */    xb = xb0 * j;
892: /* MUTANT (rep_op) */    xb = xb0 % j;
894: /* MUTANT (rep_op) */        if (*--xa == *--xb)
894: /* MUTANT (negate) */        if(! (*--xa != *--xb))
895: /* MUTANT (rep_op) */            return *xa <= *xb ? -1 : 1;
895: /* MUTANT (rep_op) */            return *xa > *xb ? -1 : 1;
895: /* MUTANT (rep_op) */            return *xa >= *xb ? -1 : 1;
895: /* MUTANT (rep_op) */            return *xa == *xb ? -1 : 1;
895: /* MUTANT (rep_op) */            return *xa != *xb ? -1 : 1;
895: /* MUTANT (rep_const) */            return *xa < *xb ? 0 : 1;
895: /* MUTANT (rep_const) */            return *xa < *xb ? 1 : 1;
895: /* MUTANT (rep_const) */            return *xa < *xb ? ((-1)+1) : 1;
895: /* MUTANT (rep_const) */            return *xa < *xb ? ((-1)-1) : 1;
895: /* MUTANT (rep_const) */            return *xa < *xb ? -1 : 0;
895: /* MUTANT (rep_const) */            return *xa < *xb ? -1 : -1;
895: /* MUTANT (rep_const) */            return *xa < *xb ? -1 : ((1)+1);
896: /* MUTANT (rep_op) */        if (xa < xa0)
896: /* MUTANT (rep_op) */        if (xa > xa0)
896: /* MUTANT (rep_op) */        if (xa >= xa0)
896: /* MUTANT (rep_op) */        if (xa == xa0)
896: /* MUTANT (rep_op) */        if (xa != xa0)
896: /* MUTANT (negate) */        if(! (xa <= xa0))
899: /* MUTANT (rep_const) */    return 1;
899: /* MUTANT (rep_const) */    return -1;
902: /* MUTANT (negate) */static Bigint *dif(!f(Bigint *a, Bigint *b))
904: /* MUTANT (del_stmt) */ /*     Bigint *c; */ 
905: /* MUTANT (del_stmt) */ /*     int32 i, wa, wb; */ 
906: /* MUTANT (del_stmt) */ /*     ULong *xa, *xae, *xb, *xbe, *xc; */ 
911: /* MUTANT (del_stmt) */ /*     ULong z; */ 
915: /* MUTANT (negate) */    if(! (!i)) {
916: /* MUTANT (del_stmt) */ /*         c = Balloc(0); */ 
916: /* MUTANT (rep_const) */        c = Balloc(1);
916: /* MUTANT (rep_const) */        c = Balloc(-1);
917: /* MUTANT (negate) */        if(! (!c))
919: /* MUTANT (del_stmt) */ /*         c->wds = 1; */ 
919: /* MUTANT (rep_const) */        c->wds = 0;
919: /* MUTANT (rep_const) */        c->wds = -1;
919: /* MUTANT (rep_const) */        c->wds = ((1)+1);
920: /* MUTANT (del_stmt) */ /*         c->x[0] = 0; */ 
920: /* MUTANT (rep_const) */        c->x[1] = 0;
920: /* MUTANT (rep_const) */        c->x[-1] = 0;
920: /* MUTANT (rep_const) */        c->x[0] = 1;
920: /* MUTANT (rep_const) */        c->x[0] = -1;
921: /* MUTANT (del_stmt) */ /*         return c; */ 
923: /* MUTANT (rep_op) */    if (i <= 0) {
923: /* MUTANT (rep_op) */    if (i > 0) {
923: /* MUTANT (rep_op) */    if (i >= 0) {
923: /* MUTANT (rep_op) */    if (i == 0) {
923: /* MUTANT (rep_op) */    if (i != 0) {
923: /* MUTANT (rep_const) */    if (i < 1) {
923: /* MUTANT (rep_const) */    if (i < -1) {
923: /* MUTANT (negate) */    if(! (i < 0)) {
924: /* MUTANT (del_stmt) */ /*         c = a; */ 
925: /* MUTANT (del_stmt) */ /*         a = b; */ 
926: /* MUTANT (del_stmt) */ /*         b = c; */ 
927: /* MUTANT (del_stmt) */ /*         i = 1; */ 
927: /* MUTANT (rep_const) */        i = 0;
927: /* MUTANT (rep_const) */        i = -1;
927: /* MUTANT (rep_const) */        i = ((1)+1);
930: /* MUTANT (rep_const) */        i = 1;
930: /* MUTANT (rep_const) */        i = -1;
931: /* MUTANT (del_stmt) */ /*     c = Balloc(a->k); */ 
932: /* MUTANT (negate) */    if(! (!c))
934: /* MUTANT (del_stmt) */ /*     c->sign = i; */ 
935: /* MUTANT (del_stmt) */ /*     wa = a->wds; */ 
936: /* MUTANT (del_stmt) */ /*     xa = a->x; */ 
937: /* MUTANT (del_stmt) */ /*     xae = xa + wa; */ 
937: /* MUTANT (rep_op) */    xae = xa - wa;
937: /* MUTANT (rep_op) */    xae = xa * wa;
937: /* MUTANT (rep_op) */    xae = xa % wa;
938: /* MUTANT (del_stmt) */ /*     wb = b->wds; */ 
939: /* MUTANT (del_stmt) */ /*     xb = b->x; */ 
940: /* MUTANT (del_stmt) */ /*     xbe = xb + wb; */ 
940: /* MUTANT (rep_op) */    xbe = xb - wb;
940: /* MUTANT (rep_op) */    xbe = xb * wb;
940: /* MUTANT (rep_op) */    xbe = xb % wb;
941: /* MUTANT (del_stmt) */ /*     xc = c->x; */ 
942: /* MUTANT (del_stmt) */ /*     borrow = 0; */ 
942: /* MUTANT (rep_const) */    borrow = 1;
942: /* MUTANT (rep_const) */    borrow = -1;
945: /* MUTANT (del_stmt) */ /*         y = (ULLong)*xa++ - *xb++ - borrow; */ 
945: /* MUTANT (rep_op) */        y = (ULLong)*xa-- - *xb++ - borrow;
945: /* MUTANT (rep_op) */        y = (ULLong)*xa++ - *xb-- - borrow;
946: /* MUTANT (del_stmt) */ /*         borrow = y >> 32 & 1UL; */ 
946: /* MUTANT (rep_const) */        borrow = y >> 0 & 1UL;
946: /* MUTANT (rep_const) */        borrow = y >> 1 & 1UL;
946: /* MUTANT (rep_const) */        borrow = y >> -1 & 1UL;
946: /* MUTANT (rep_const) */        borrow = y >> ((32)+1) & 1UL;
946: /* MUTANT (rep_const) */        borrow = y >> ((32)-1) & 1UL;
946: /* MUTANT (rep_const) */        borrow = y >> 32 & 0UL;
946: /* MUTANT (rep_const) */        borrow = y >> 32 & -1UL;
946: /* MUTANT (rep_const) */        borrow = y >> 32 & ((1)+1)UL;
947: /* MUTANT (del_stmt) */ /*         *xc++ = (ULong)(y & 0xffffffffUL); */ 
947: /* MUTANT (rep_op) */        *xc-- = (ULong)(y & 0xffffffffUL);
947: /* MUTANT (rep_const) */        *xc++ = (ULong)(y & 1xffffffffUL);
947: /* MUTANT (rep_const) */        *xc++ = (ULong)(y & -1xffffffffUL);
949: /* MUTANT (rep_op) */        while(xb <= xbe);
949: /* MUTANT (rep_op) */        while(xb > xbe);
949: /* MUTANT (rep_op) */        while(xb >= xbe);
949: /* MUTANT (rep_op) */        while(xb == xbe);
949: /* MUTANT (rep_op) */        while(xb != xbe);
949: /* MUTANT (negate) */        while(!(xb < xbe));
950: /* MUTANT (rep_op) */    while(xa <= xae) {
950: /* MUTANT (rep_op) */    while(xa > xae) {
950: /* MUTANT (rep_op) */    while(xa >= xae) {
950: /* MUTANT (rep_op) */    while(xa == xae) {
950: /* MUTANT (rep_op) */    while(xa != xae) {
950: /* MUTANT (negate) */    while(!(xa < xae)) {
951: /* MUTANT (del_stmt) */ /*         y = *xa++ - borrow; */ 
951: /* MUTANT (rep_op) */        y = *xa-- - borrow;
952: /* MUTANT (del_stmt) */ /*         borrow = y >> 32 & 1UL; */ 
952: /* MUTANT (rep_const) */        borrow = y >> 0 & 1UL;
952: /* MUTANT (rep_const) */        borrow = y >> 1 & 1UL;
952: /* MUTANT (rep_const) */        borrow = y >> -1 & 1UL;
952: /* MUTANT (rep_const) */        borrow = y >> ((32)+1) & 1UL;
952: /* MUTANT (rep_const) */        borrow = y >> ((32)-1) & 1UL;
952: /* MUTANT (rep_const) */        borrow = y >> 32 & 0UL;
952: /* MUTANT (rep_const) */        borrow = y >> 32 & -1UL;
952: /* MUTANT (rep_const) */        borrow = y >> 32 & ((1)+1)UL;
953: /* MUTANT (del_stmt) */ /*         *xc++ = (ULong)(y & 0xffffffffUL); */ 
953: /* MUTANT (rep_op) */        *xc-- = (ULong)(y & 0xffffffffUL);
953: /* MUTANT (rep_const) */        *xc++ = (ULong)(y & 1xffffffffUL);
953: /* MUTANT (rep_const) */        *xc++ = (ULong)(y & -1xffffffffUL);
957: /* MUTANT (del_stmt) */ /*         y = (*xa & 0xffff) - (*xb & 0xffff) - borrow; */ 
957: /* MUTANT (rep_const) */        y = (*xa & 1xffff) - (*xb & 0xffff) - borrow;
957: /* MUTANT (rep_const) */        y = (*xa & -1xffff) - (*xb & 0xffff) - borrow;
957: /* MUTANT (rep_const) */        y = (*xa & 0xffff) - (*xb & 1xffff) - borrow;
957: /* MUTANT (rep_const) */        y = (*xa & 0xffff) - (*xb & -1xffff) - borrow;
958: /* MUTANT (del_stmt) */ /*         borrow = (y & 0x10000) >> 16; */ 
958: /* MUTANT (rep_const) */        borrow = (y & 1x10000) >> 16;
958: /* MUTANT (rep_const) */        borrow = (y & -1x10000) >> 16;
958: /* MUTANT (rep_const) */        borrow = (y & 0x10000) >> 0;
958: /* MUTANT (rep_const) */        borrow = (y & 0x10000) >> 1;
958: /* MUTANT (rep_const) */        borrow = (y & 0x10000) >> -1;
958: /* MUTANT (rep_const) */        borrow = (y & 0x10000) >> ((16)+1);
958: /* MUTANT (rep_const) */        borrow = (y & 0x10000) >> ((16)-1);
959: /* MUTANT (del_stmt) */ /*         z = (*xa++ >> 16) - (*xb++ >> 16) - borrow; */ 
959: /* MUTANT (rep_op) */        z = (*xa-- >> 16) - (*xb++ >> 16) - borrow;
959: /* MUTANT (rep_op) */        z = (*xa++ >> 16) - (*xb-- >> 16) - borrow;
959: /* MUTANT (rep_const) */        z = (*xa++ >> 0) - (*xb++ >> 16) - borrow;
959: /* MUTANT (rep_const) */        z = (*xa++ >> 1) - (*xb++ >> 16) - borrow;
959: /* MUTANT (rep_const) */        z = (*xa++ >> -1) - (*xb++ >> 16) - borrow;
959: /* MUTANT (rep_const) */        z = (*xa++ >> ((16)+1)) - (*xb++ >> 16) - borrow;
959: /* MUTANT (rep_const) */        z = (*xa++ >> ((16)-1)) - (*xb++ >> 16) - borrow;
959: /* MUTANT (rep_const) */        z = (*xa++ >> 16) - (*xb++ >> 0) - borrow;
959: /* MUTANT (rep_const) */        z = (*xa++ >> 16) - (*xb++ >> 1) - borrow;
959: /* MUTANT (rep_const) */        z = (*xa++ >> 16) - (*xb++ >> -1) - borrow;
959: /* MUTANT (rep_const) */        z = (*xa++ >> 16) - (*xb++ >> ((16)+1)) - borrow;
959: /* MUTANT (rep_const) */        z = (*xa++ >> 16) - (*xb++ >> ((16)-1)) - borrow;
960: /* MUTANT (del_stmt) */ /*         borrow = (z & 0x10000) >> 16; */ 
960: /* MUTANT (rep_const) */        borrow = (z & 1x10000) >> 16;
960: /* MUTANT (rep_const) */        borrow = (z & -1x10000) >> 16;
960: /* MUTANT (rep_const) */        borrow = (z & 0x10000) >> 0;
960: /* MUTANT (rep_const) */        borrow = (z & 0x10000) >> 1;
960: /* MUTANT (rep_const) */        borrow = (z & 0x10000) >> -1;
960: /* MUTANT (rep_const) */        borrow = (z & 0x10000) >> ((16)+1);
960: /* MUTANT (rep_const) */        borrow = (z & 0x10000) >> ((16)-1);
961: /* MUTANT (del_stmt) */ /*         Storeinc(xc, z, y); */ 
963: /* MUTANT (rep_op) */        while(xb <= xbe);
963: /* MUTANT (rep_op) */        while(xb > xbe);
963: /* MUTANT (rep_op) */        while(xb >= xbe);
963: /* MUTANT (rep_op) */        while(xb == xbe);
963: /* MUTANT (rep_op) */        while(xb != xbe);
963: /* MUTANT (negate) */        while(!(xb < xbe));
964: /* MUTANT (rep_op) */    while(xa <= xae) {
964: /* MUTANT (rep_op) */    while(xa > xae) {
964: /* MUTANT (rep_op) */    while(xa >= xae) {
964: /* MUTANT (rep_op) */    while(xa == xae) {
964: /* MUTANT (rep_op) */    while(xa != xae) {
964: /* MUTANT (negate) */    while(!(xa < xae)) {
965: /* MUTANT (del_stmt) */ /*         y = (*xa & 0xffff) - borrow; */ 
965: /* MUTANT (rep_const) */        y = (*xa & 1xffff) - borrow;
965: /* MUTANT (rep_const) */        y = (*xa & -1xffff) - borrow;
966: /* MUTANT (del_stmt) */ /*         borrow = (y & 0x10000) >> 16; */ 
966: /* MUTANT (rep_const) */        borrow = (y & 1x10000) >> 16;
966: /* MUTANT (rep_const) */        borrow = (y & -1x10000) >> 16;
966: /* MUTANT (rep_const) */        borrow = (y & 0x10000) >> 0;
966: /* MUTANT (rep_const) */        borrow = (y & 0x10000) >> 1;
966: /* MUTANT (rep_const) */        borrow = (y & 0x10000) >> -1;
966: /* MUTANT (rep_const) */        borrow = (y & 0x10000) >> ((16)+1);
966: /* MUTANT (rep_const) */        borrow = (y & 0x10000) >> ((16)-1);
967: /* MUTANT (del_stmt) */ /*         z = (*xa++ >> 16) - borrow; */ 
967: /* MUTANT (rep_op) */        z = (*xa-- >> 16) - borrow;
967: /* MUTANT (rep_const) */        z = (*xa++ >> 0) - borrow;
967: /* MUTANT (rep_const) */        z = (*xa++ >> 1) - borrow;
967: /* MUTANT (rep_const) */        z = (*xa++ >> -1) - borrow;
967: /* MUTANT (rep_const) */        z = (*xa++ >> ((16)+1)) - borrow;
967: /* MUTANT (rep_const) */        z = (*xa++ >> ((16)-1)) - borrow;
968: /* MUTANT (del_stmt) */ /*         borrow = (z & 0x10000) >> 16; */ 
968: /* MUTANT (rep_const) */        borrow = (z & 1x10000) >> 16;
968: /* MUTANT (rep_const) */        borrow = (z & -1x10000) >> 16;
968: /* MUTANT (rep_const) */        borrow = (z & 0x10000) >> 0;
968: /* MUTANT (rep_const) */        borrow = (z & 0x10000) >> 1;
968: /* MUTANT (rep_const) */        borrow = (z & 0x10000) >> -1;
968: /* MUTANT (rep_const) */        borrow = (z & 0x10000) >> ((16)+1);
968: /* MUTANT (rep_const) */        borrow = (z & 0x10000) >> ((16)-1);
969: /* MUTANT (del_stmt) */ /*         Storeinc(xc, z, y); */ 
972: /* MUTANT (negate) */    while(!(!*--xc))
973: /* MUTANT (rep_op) */        wa++;
974: /* MUTANT (del_stmt) */ /*     c->wds = wa; */ 
975: /* MUTANT (del_stmt) */ /*     return c; */ 
981: /* MUTANT (del_stmt) */ /*     register Long L; */ 
982: /* MUTANT (del_stmt) */ /*     double a = 0; */ 
982: /* MUTANT (rep_const) */    double a = 1;
982: /* MUTANT (rep_const) */    double a = -1;
984: /* MUTANT (del_stmt) */ /*     L = (word0(x) & Exp_mask) - (P-1)*Exp_msk1; */ 
984: /* MUTANT (rep_const) */    L = (word0(x) & Exp_mask) - (P-0)*Exp_msk1;
984: /* MUTANT (rep_const) */    L = (word0(x) & Exp_mask) - (P--1)*Exp_msk1;
984: /* MUTANT (rep_const) */    L = (word0(x) & Exp_mask) - (P-((1)+1))*Exp_msk1;
986: /* MUTANT (rep_op) */    if (L <= 0) {
986: /* MUTANT (rep_op) */    if (L < 0) {
986: /* MUTANT (rep_op) */    if (L >= 0) {
986: /* MUTANT (rep_op) */    if (L == 0) {
986: /* MUTANT (rep_op) */    if (L != 0) {
986: /* MUTANT (rep_const) */    if (L > 1) {
986: /* MUTANT (rep_const) */    if (L > -1) {
986: /* MUTANT (negate) */    if(! (L > 0)) {
989: /* MUTANT (del_stmt) */ /*         set_word1(a, 0); */ 
989: /* MUTANT (rep_const) */        set_word1(a, 1);
989: /* MUTANT (rep_const) */        set_word1(a, -1);
993: /* MUTANT (del_stmt) */ /*         L = -L >> Exp_shift; */ 
994: /* MUTANT (rep_op) */        if (L <= Exp_shift) {
994: /* MUTANT (rep_op) */        if (L > Exp_shift) {
994: /* MUTANT (rep_op) */        if (L >= Exp_shift) {
994: /* MUTANT (rep_op) */        if (L == Exp_shift) {
994: /* MUTANT (rep_op) */        if (L != Exp_shift) {
994: /* MUTANT (negate) */        if(! (L < Exp_shift)) {
995: /* MUTANT (del_stmt) */ /*             set_word0(a, 0x80000 >> L); */ 
995: /* MUTANT (rep_const) */            set_word0(a, 1x80000 >> L);
995: /* MUTANT (rep_const) */            set_word0(a, -1x80000 >> L);
996: /* MUTANT (del_stmt) */ /*             set_word1(a, 0); */ 
996: /* MUTANT (rep_const) */            set_word1(a, 1);
996: /* MUTANT (rep_const) */            set_word1(a, -1);
999: /* MUTANT (del_stmt) */ /*             set_word0(a, 0); */ 
999: /* MUTANT (rep_const) */            set_word0(a, 1);
999: /* MUTANT (rep_const) */            set_word0(a, -1);
1000: /* MUTANT (del_stmt) */ /*             L -= Exp_shift; */ 
1000: /* MUTANT (rep_op) */            L += Exp_shift;
1000: /* MUTANT (rep_op) */            L *= Exp_shift;
1000: /* MUTANT (rep_op) */            L %= Exp_shift;
1001: /* MUTANT (del_stmt) */ /*             set_word1(a, L >= 31 ? 1 : 1 << (31 - L)); */ 
1001: /* MUTANT (rep_op) */            set_word1(a, L <= 31 ? 1 : 1 << (31 - L));
1001: /* MUTANT (rep_op) */            set_word1(a, L < 31 ? 1 : 1 << (31 - L));
1001: /* MUTANT (rep_op) */            set_word1(a, L > 31 ? 1 : 1 << (31 - L));
1001: /* MUTANT (rep_op) */            set_word1(a, L == 31 ? 1 : 1 << (31 - L));
1001: /* MUTANT (rep_op) */            set_word1(a, L != 31 ? 1 : 1 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 0 ? 1 : 1 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 1 ? 1 : 1 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= -1 ? 1 : 1 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= ((31)+1) ? 1 : 1 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= ((31)-1) ? 1 : 1 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? 0 : 1 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? -1 : 1 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? ((1)+1) : 1 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? 1 : 0 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? 1 : -1 << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? 1 : ((1)+1) << (31 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? 1 : 1 << (0 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? 1 : 1 << (1 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? 1 : 1 << (-1 - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? 1 : 1 << (((31)+1) - L));
1001: /* MUTANT (rep_const) */            set_word1(a, L >= 31 ? 1 : 1 << (((31)-1) - L));
1011: /* MUTANT (del_stmt) */ /*     ULong *xa, *xa0, w, y, z; */ 
1012: /* MUTANT (del_stmt) */ /*     int32 k; */ 
1013: /* MUTANT (del_stmt) */ /*     double d = 0; */ 
1013: /* MUTANT (rep_const) */    double d = 1;
1013: /* MUTANT (rep_const) */    double d = -1;
1020: /* MUTANT (del_stmt) */ /*     xa = xa0 + a->wds; */ 
1020: /* MUTANT (rep_op) */    xa = xa0 - a->wds;
1020: /* MUTANT (rep_op) */    xa = xa0 * a->wds;
1020: /* MUTANT (rep_op) */    xa = xa0 % a->wds;
1021: /* MUTANT (del_stmt) */ /*     y = *--xa; */ 
1023: /* MUTANT (negate) */    if(! (!y)) Bug("zero y in b2d");
1026: /* MUTANT (del_stmt) */ /*     *e = 32 - k; */ 
1026: /* MUTANT (rep_const) */    *e = 0 - k;
1026: /* MUTANT (rep_const) */    *e = 1 - k;
1026: /* MUTANT (rep_const) */    *e = -1 - k;
1026: /* MUTANT (rep_const) */    *e = ((32)+1) - k;
1026: /* MUTANT (rep_const) */    *e = ((32)-1) - k;
1027: /* MUTANT (rep_op) */    if (k <= Ebits) {
1027: /* MUTANT (rep_op) */    if (k > Ebits) {
1027: /* MUTANT (rep_op) */    if (k >= Ebits) {
1027: /* MUTANT (rep_op) */    if (k == Ebits) {
1027: /* MUTANT (rep_op) */    if (k != Ebits) {
1027: /* MUTANT (negate) */    if(! (k < Ebits)) {
1028: /* MUTANT (del_stmt) */ /*         set_d0(Exp_1 | y >> (Ebits - k)); */ 
1028: /* MUTANT (rep_op) */        set_d0(Exp_1 & y >> (Ebits - k));
1029: /* MUTANT (del_stmt) */ /*         w = xa > xa0 ? *--xa : 0; */ 
1029: /* MUTANT (rep_op) */        w = xa <= xa0 ? *--xa : 0;
1029: /* MUTANT (rep_op) */        w = xa < xa0 ? *--xa : 0;
1029: /* MUTANT (rep_op) */        w = xa >= xa0 ? *--xa : 0;
1029: /* MUTANT (rep_op) */        w = xa == xa0 ? *--xa : 0;
1029: /* MUTANT (rep_op) */        w = xa != xa0 ? *--xa : 0;
1029: /* MUTANT (rep_const) */        w = xa > xa0 ? *--xa : 1;
1029: /* MUTANT (rep_const) */        w = xa > xa0 ? *--xa : -1;
1030: /* MUTANT (del_stmt) */ /*         set_d1(y << (32-Ebits + k) | w >> (Ebits - k)); */ 
1030: /* MUTANT (rep_op) */        set_d1(y << (32-Ebits - k) | w >> (Ebits - k));
1030: /* MUTANT (rep_op) */        set_d1(y << (32-Ebits * k) | w >> (Ebits - k));
1030: /* MUTANT (rep_op) */        set_d1(y << (32-Ebits % k) | w >> (Ebits - k));
1030: /* MUTANT (rep_op) */        set_d1(y << (32-Ebits + k) & w >> (Ebits - k));
1030: /* MUTANT (rep_const) */        set_d1(y << (0-Ebits + k) | w >> (Ebits - k));
1030: /* MUTANT (rep_const) */        set_d1(y << (1-Ebits + k) | w >> (Ebits - k));
1030: /* MUTANT (rep_const) */        set_d1(y << (-1-Ebits + k) | w >> (Ebits - k));
1030: /* MUTANT (rep_const) */        set_d1(y << (((32)+1)-Ebits + k) | w >> (Ebits - k));
1030: /* MUTANT (rep_const) */        set_d1(y << (((32)-1)-Ebits + k) | w >> (Ebits - k));
1031: /* MUTANT (del_stmt) */ /*         goto ret_d; */ 
1033: /* MUTANT (rep_op) */    z = xa <= xa0 ? *--xa : 0;
1033: /* MUTANT (rep_op) */    z = xa < xa0 ? *--xa : 0;
1033: /* MUTANT (rep_op) */    z = xa >= xa0 ? *--xa : 0;
1033: /* MUTANT (rep_op) */    z = xa == xa0 ? *--xa : 0;
1033: /* MUTANT (rep_op) */    z = xa != xa0 ? *--xa : 0;
1033: /* MUTANT (rep_const) */    z = xa > xa0 ? *--xa : 1;
1033: /* MUTANT (rep_const) */    z = xa > xa0 ? *--xa : -1;
1034: /* MUTANT (rep_op) */    if (k += Ebits) {
1034: /* MUTANT (rep_op) */    if (k *= Ebits) {
1034: /* MUTANT (rep_op) */    if (k %= Ebits) {
1034: /* MUTANT (negate) */    if(! (k -= Ebits)) {
1035: /* MUTANT (del_stmt) */ /*         set_d0(Exp_1 | y << k | z >> (32 - k)); */ 
1035: /* MUTANT (rep_op) */        set_d0(Exp_1 & y << k | z >> (32 - k));
1035: /* MUTANT (rep_op) */        set_d0(Exp_1 | y << k & z >> (32 - k));
1035: /* MUTANT (rep_const) */        set_d0(Exp_1 | y << k | z >> (0 - k));
1035: /* MUTANT (rep_const) */        set_d0(Exp_1 | y << k | z >> (1 - k));
1035: /* MUTANT (rep_const) */        set_d0(Exp_1 | y << k | z >> (-1 - k));
1035: /* MUTANT (rep_const) */        set_d0(Exp_1 | y << k | z >> (((32)+1) - k));
1035: /* MUTANT (rep_const) */        set_d0(Exp_1 | y << k | z >> (((32)-1) - k));
1036: /* MUTANT (del_stmt) */ /*         y = xa > xa0 ? *--xa : 0; */ 
1036: /* MUTANT (rep_op) */        y = xa <= xa0 ? *--xa : 0;
1036: /* MUTANT (rep_op) */        y = xa < xa0 ? *--xa : 0;
1036: /* MUTANT (rep_op) */        y = xa >= xa0 ? *--xa : 0;
1036: /* MUTANT (rep_op) */        y = xa == xa0 ? *--xa : 0;
1036: /* MUTANT (rep_op) */        y = xa != xa0 ? *--xa : 0;
1036: /* MUTANT (rep_const) */        y = xa > xa0 ? *--xa : 1;
1036: /* MUTANT (rep_const) */        y = xa > xa0 ? *--xa : -1;
1037: /* MUTANT (del_stmt) */ /*         set_d1(z << k | y >> (32 - k)); */ 
1037: /* MUTANT (rep_op) */        set_d1(z << k & y >> (32 - k));
1037: /* MUTANT (rep_const) */        set_d1(z << k | y >> (0 - k));
1037: /* MUTANT (rep_const) */        set_d1(z << k | y >> (1 - k));
1037: /* MUTANT (rep_const) */        set_d1(z << k | y >> (-1 - k));
1037: /* MUTANT (rep_const) */        set_d1(z << k | y >> (((32)+1) - k));
1037: /* MUTANT (rep_const) */        set_d1(z << k | y >> (((32)-1) - k));
1040: /* MUTANT (del_stmt) */ /*         set_d0(Exp_1 | y); */ 
1040: /* MUTANT (rep_op) */        set_d0(Exp_1 & y);
1041: /* MUTANT (del_stmt) */ /*         set_d1(z); */ 
1057: /* MUTANT (del_stmt) */ /*     Bigint *b; */ 
1058: /* MUTANT (del_stmt) */ /*     int32 de, i, k; */ 
1059: /* MUTANT (del_stmt) */ /*     ULong *x, y, z; */ 
1065: /* MUTANT (rep_const) */    b = Balloc(0);
1065: /* MUTANT (rep_const) */    b = Balloc(-1);
1065: /* MUTANT (rep_const) */    b = Balloc(((1)+1));
1066: /* MUTANT (negate) */    if(! (!b))
1068: /* MUTANT (del_stmt) */ /*     x = b->x; */ 
1070: /* MUTANT (del_stmt) */ /*     z = d0 & Frac_mask; */ 
1071: /* MUTANT (del_stmt) */ /*     set_d0(d0 & 0x7fffffff); */   /* clear sign bit, which we ignore */
1071: /* MUTANT (rep_const) */    set_d0(d0 & 1x7fffffff);  /* clear sign bit, which we ignore */
1071: /* MUTANT (rep_const) */    set_d0(d0 & -1x7fffffff);  /* clear sign bit, which we ignore */
1074: /* MUTANT (del_stmt) */ /*     z |= Exp_msk11; */ 
1076: /* MUTANT (rep_op) */    if ((de = (int32)(d0 >> Exp_shift)) == 0)
1076: /* MUTANT (rep_const) */    if ((de = (int32)(d0 >> Exp_shift)) != 1)
1076: /* MUTANT (rep_const) */    if ((de = (int32)(d0 >> Exp_shift)) != -1)
1076: /* MUTANT (negate) */    if(! ((de = (int32)(d0 >> Exp_shift)) != 0))
1079: /* MUTANT (rep_op) */    if ((y = d1) == 0) {
1079: /* MUTANT (rep_const) */    if ((y = d1) != 1) {
1079: /* MUTANT (rep_const) */    if ((y = d1) != -1) {
1079: /* MUTANT (negate) */    if(! ((y = d1) != 0)) {
1080: /* MUTANT (rep_op) */        if ((k = lo0bits(&y)) == 0) {
1080: /* MUTANT (rep_const) */        if ((k = lo0bits(&y)) != 1) {
1080: /* MUTANT (rep_const) */        if ((k = lo0bits(&y)) != -1) {
1080: /* MUTANT (negate) */        if(! ((k = lo0bits(&y)) != 0)) {
1081: /* MUTANT (del_stmt) */ /*             x[0] = y | z << (32 - k); */ 
1081: /* MUTANT (rep_op) */            x[0] = y & z << (32 - k);
1081: /* MUTANT (rep_const) */            x[1] = y | z << (32 - k);
1081: /* MUTANT (rep_const) */            x[-1] = y | z << (32 - k);
1081: /* MUTANT (rep_const) */            x[0] = y | z << (0 - k);
1081: /* MUTANT (rep_const) */            x[0] = y | z << (1 - k);
1081: /* MUTANT (rep_const) */            x[0] = y | z << (-1 - k);
1081: /* MUTANT (rep_const) */            x[0] = y | z << (((32)+1) - k);
1081: /* MUTANT (rep_const) */            x[0] = y | z << (((32)-1) - k);
1082: /* MUTANT (del_stmt) */ /*             z >>= k; */ 
1085: /* MUTANT (rep_const) */            x[1] = y;
1085: /* MUTANT (rep_const) */            x[-1] = y;
1086: /* MUTANT (del_stmt) */ /*         i = b->wds = (x[1] = z) ? 2 : 1; */ 
1086: /* MUTANT (rep_const) */        i = b->wds = (x[0] = z) ? 2 : 1;
1086: /* MUTANT (rep_const) */        i = b->wds = (x[-1] = z) ? 2 : 1;
1086: /* MUTANT (rep_const) */        i = b->wds = (x[((1)+1)] = z) ? 2 : 1;
1086: /* MUTANT (rep_const) */        i = b->wds = (x[1] = z) ? 0 : 1;
1086: /* MUTANT (rep_const) */        i = b->wds = (x[1] = z) ? 1 : 1;
1086: /* MUTANT (rep_const) */        i = b->wds = (x[1] = z) ? -1 : 1;
1086: /* MUTANT (rep_const) */        i = b->wds = (x[1] = z) ? ((2)+1) : 1;
1086: /* MUTANT (rep_const) */        i = b->wds = (x[1] = z) ? ((2)-1) : 1;
1086: /* MUTANT (rep_const) */        i = b->wds = (x[1] = z) ? 2 : 0;
1086: /* MUTANT (rep_const) */        i = b->wds = (x[1] = z) ? 2 : -1;
1086: /* MUTANT (rep_const) */        i = b->wds = (x[1] = z) ? 2 : ((1)+1);
1089: /* MUTANT (del_stmt) */ /*         JS_ASSERT(z); */ 
1090: /* MUTANT (del_stmt) */ /*         k = lo0bits(&z); */ 
1091: /* MUTANT (del_stmt) */ /*         x[0] = z; */ 
1091: /* MUTANT (rep_const) */        x[1] = z;
1091: /* MUTANT (rep_const) */        x[-1] = z;
1092: /* MUTANT (del_stmt) */ /*         i = b->wds = 1; */ 
1092: /* MUTANT (rep_const) */        i = b->wds = 0;
1092: /* MUTANT (rep_const) */        i = b->wds = -1;
1092: /* MUTANT (rep_const) */        i = b->wds = ((1)+1);
1093: /* MUTANT (del_stmt) */ /*         k += 32; */ 
1093: /* MUTANT (rep_op) */        k -= 32;
1093: /* MUTANT (rep_op) */        k *= 32;
1093: /* MUTANT (rep_op) */        k %= 32;
1093: /* MUTANT (rep_const) */        k += 0;
1093: /* MUTANT (rep_const) */        k += 1;
1093: /* MUTANT (rep_const) */        k += -1;
1093: /* MUTANT (rep_const) */        k += ((32)+1);
1093: /* MUTANT (rep_const) */        k += ((32)-1);
1096: /* MUTANT (negate) */    if(! (de)) {
1098: /* MUTANT (rep_op) */        *e = de - Bias - (P-1) - k;
1098: /* MUTANT (rep_op) */        *e = de - Bias - (P-1) * k;
1098: /* MUTANT (rep_op) */        *e = de - Bias - (P-1) % k;
1098: /* MUTANT (rep_const) */        *e = de - Bias - (P-0) + k;
1098: /* MUTANT (rep_const) */        *e = de - Bias - (P--1) + k;
1098: /* MUTANT (rep_const) */        *e = de - Bias - (P-((1)+1)) + k;
1099: /* MUTANT (del_stmt) */ /*         *bits = P - k; */ 
1103: /* MUTANT (del_stmt) */ /*         *e = de - Bias - (P-1) + 1 + k; */ 
1103: /* MUTANT (rep_op) */        *e = de - Bias - (P-1) - 1 + k;
1103: /* MUTANT (rep_op) */        *e = de - Bias - (P-1) * 1 + k;
1103: /* MUTANT (rep_op) */        *e = de - Bias - (P-1) % 1 + k;
1103: /* MUTANT (rep_op) */        *e = de - Bias - (P-1) + 1 - k;
1103: /* MUTANT (rep_op) */        *e = de - Bias - (P-1) + 1 * k;
1103: /* MUTANT (rep_op) */        *e = de - Bias - (P-1) + 1 % k;
1103: /* MUTANT (rep_const) */        *e = de - Bias - (P-0) + 1 + k;
1103: /* MUTANT (rep_const) */        *e = de - Bias - (P--1) + 1 + k;
1103: /* MUTANT (rep_const) */        *e = de - Bias - (P-((1)+1)) + 1 + k;
1103: /* MUTANT (rep_const) */        *e = de - Bias - (P-1) + 0 + k;
1103: /* MUTANT (rep_const) */        *e = de - Bias - (P-1) + -1 + k;
1103: /* MUTANT (rep_const) */        *e = de - Bias - (P-1) + ((1)+1) + k;
1104: /* MUTANT (del_stmt) */ /*         *bits = 32*i - hi0bits(x[i-1]); */ 
1104: /* MUTANT (rep_const) */        *bits = 0*i - hi0bits(x[i-1]);
1104: /* MUTANT (rep_const) */        *bits = 1*i - hi0bits(x[i-1]);
1104: /* MUTANT (rep_const) */        *bits = -1*i - hi0bits(x[i-1]);
1104: /* MUTANT (rep_const) */        *bits = ((32)+1)*i - hi0bits(x[i-1]);
1104: /* MUTANT (rep_const) */        *bits = ((32)-1)*i - hi0bits(x[i-1]);
1104: /* MUTANT (rep_const) */        *bits = 32*i - hi0bits(x[i-0]);
1104: /* MUTANT (rep_const) */        *bits = 32*i - hi0bits(x[i--1]);
1104: /* MUTANT (rep_const) */        *bits = 32*i - hi0bits(x[i-((1)+1)]);
1117: /* MUTANT (del_stmt) */ /*     double da, db; */ 
1118: /* MUTANT (del_stmt) */ /*     int32 k, ka, kb; */ 
1120: /* MUTANT (del_stmt) */ /*     da = b2d(a, &ka); */ 
1121: /* MUTANT (del_stmt) */ /*     db = b2d(b, &kb); */ 
1122: /* MUTANT (del_stmt) */ /*     k = ka - kb + 32*(a->wds - b->wds); */ 
1122: /* MUTANT (rep_op) */    k = ka - kb - 32*(a->wds - b->wds);
1122: /* MUTANT (rep_op) */    k = ka - kb * 32*(a->wds - b->wds);
1122: /* MUTANT (rep_op) */    k = ka - kb % 32*(a->wds - b->wds);
1122: /* MUTANT (rep_const) */    k = ka - kb + 0*(a->wds - b->wds);
1122: /* MUTANT (rep_const) */    k = ka - kb + 1*(a->wds - b->wds);
1122: /* MUTANT (rep_const) */    k = ka - kb + -1*(a->wds - b->wds);
1122: /* MUTANT (rep_const) */    k = ka - kb + ((32)+1)*(a->wds - b->wds);
1122: /* MUTANT (rep_const) */    k = ka - kb + ((32)-1)*(a->wds - b->wds);
1123: /* MUTANT (rep_op) */    if (k <= 0)
1123: /* MUTANT (rep_op) */    if (k < 0)
1123: /* MUTANT (rep_op) */    if (k >= 0)
1123: /* MUTANT (rep_op) */    if (k == 0)
1123: /* MUTANT (rep_op) */    if (k != 0)
1123: /* MUTANT (rep_const) */    if (k > 1)
1123: /* MUTANT (rep_const) */    if (k > -1)
1123: /* MUTANT (negate) */    if(! (k > 0))
1124: /* MUTANT (rep_op) */        set_word0(da, word0(da) - k*Exp_msk1);
1124: /* MUTANT (rep_op) */        set_word0(da, word0(da) * k*Exp_msk1);
1124: /* MUTANT (rep_op) */        set_word0(da, word0(da) % k*Exp_msk1);
1126: /* MUTANT (del_stmt) */ /*         k = -k; */ 
1127: /* MUTANT (del_stmt) */ /*         set_word0(db, word0(db) + k*Exp_msk1); */ 
1127: /* MUTANT (rep_op) */        set_word0(db, word0(db) - k*Exp_msk1);
1127: /* MUTANT (rep_op) */        set_word0(db, word0(db) * k*Exp_msk1);
1127: /* MUTANT (rep_op) */        set_word0(db, word0(db) % k*Exp_msk1);
1134: /* MUTANT (rep_const) */    0e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    -1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    ((1)+1)e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 0e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, -1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, ((1)+1)e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 0e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, -1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, ((1)+1)e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 0e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, -1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, ((1)+1)e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 0e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, -1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, ((1)+1)e4, 1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 0e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, -1e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, ((1)+1)e5, 1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 0e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, -1e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, ((1)+1)e6, 1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 0e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, -1e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, ((1)+1)e7, 1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 0e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, -1e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, ((1)+1)e8, 1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 0e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, -1e9,
1134: /* MUTANT (rep_const) */    1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, ((1)+1)e9,
1135: /* MUTANT (rep_const) */    0e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    -1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    ((1)+1)e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 0e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, -1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, ((1)+1)e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 0e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, -1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, ((1)+1)e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 0e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, -1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, ((1)+1)e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 0e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, -1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, ((1)+1)e14, 1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 0e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, -1e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, ((1)+1)e15, 1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 0e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, -1e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, ((1)+1)e16, 1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 0e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, -1e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, ((1)+1)e17, 1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 0e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, -1e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, ((1)+1)e18, 1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 0e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, -1e19,
1135: /* MUTANT (rep_const) */    1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, ((1)+1)e19,
1136: /* MUTANT (rep_const) */    0e20, 1e21, 1e22
1136: /* MUTANT (rep_const) */    -1e20, 1e21, 1e22
1136: /* MUTANT (rep_const) */    ((1)+1)e20, 1e21, 1e22
1136: /* MUTANT (rep_const) */    1e20, 0e21, 1e22
1136: /* MUTANT (rep_const) */    1e20, -1e21, 1e22
1136: /* MUTANT (rep_const) */    1e20, ((1)+1)e21, 1e22
1136: /* MUTANT (rep_const) */    1e20, 1e21, 0e22
1136: /* MUTANT (rep_const) */    1e20, 1e21, -1e22
1136: /* MUTANT (rep_const) */    1e20, 1e21, ((1)+1)e22
1139: /* MUTANT (del_stmt) */ /* static CONST double bigtens[] = { 1e16, 1e32, 1e64, 1e128, 1e256 }; */ 
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 0e16, 1e32, 1e64, 1e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { -1e16, 1e32, 1e64, 1e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { ((1)+1)e16, 1e32, 1e64, 1e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, 0e32, 1e64, 1e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, -1e32, 1e64, 1e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, ((1)+1)e32, 1e64, 1e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, 1e32, 0e64, 1e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, 1e32, -1e64, 1e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, 1e32, ((1)+1)e64, 1e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, 1e32, 1e64, 0e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, 1e32, 1e64, -1e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, 1e32, 1e64, ((1)+1)e128, 1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, 1e32, 1e64, 1e128, 0e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, 1e32, 1e64, 1e128, -1e256 };
1139: /* MUTANT (rep_const) */static CONST double bigtens[] = { 1e16, 1e32, 1e64, 1e128, ((1)+1)e256 };
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 0e-16, 1e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { -1e-16, 1e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { ((1)+1)e-16, 1e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-0, 1e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-1, 1e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e--1, 1e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-((16)+1), 1e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-((16)-1), 1e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 0e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, -1e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, ((1)+1)e-32, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-0, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-1, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e--1, 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-((32)+1), 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-((32)-1), 1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 0e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, -1e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, ((1)+1)e-64, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-0, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-1, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e--1, 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-((64)+1), 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-((64)-1), 1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-64, 0e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-64, -1e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-64, ((1)+1)e-128,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-64, 1e-0,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-64, 1e-1,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-64, 1e--1,
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-64, 1e-((128)+1),
1140: /* MUTANT (rep_const) */static CONST double tinytens[] = { 1e-16, 1e-32, 1e-64, 1e-((128)-1),
1142: /* MUTANT (rep_const) */        9007199254740992.e-0
1142: /* MUTANT (rep_const) */        9007199254740992.e-1
1142: /* MUTANT (rep_const) */        9007199254740992.e--1
1142: /* MUTANT (rep_const) */        9007199254740992.e-((256)+1)
1142: /* MUTANT (rep_const) */        9007199254740992.e-((256)-1)
1144: /* MUTANT (rep_const) */        0e-256
1144: /* MUTANT (rep_const) */        -1e-256
1144: /* MUTANT (rep_const) */        ((1)+1)e-256
1144: /* MUTANT (rep_const) */        1e-0
1144: /* MUTANT (rep_const) */        1e-1
1144: /* MUTANT (rep_const) */        1e--1
1144: /* MUTANT (rep_const) */        1e-((256)+1)
1144: /* MUTANT (rep_const) */        1e-((256)-1)
1149: #define Scale_Bit 1x10 /* MUTANT (rep_const) */
1149: #define Scale_Bit -1x10 /* MUTANT (rep_const) */
1150: #define n_bigtens 0 /* MUTANT (rep_const) */
1150: #define n_bigtens 1 /* MUTANT (rep_const) */
1150: #define n_bigtens -1 /* MUTANT (rep_const) */
1150: #define n_bigtens ((5)+1) /* MUTANT (rep_const) */
1150: #define n_bigtens ((5)-1) /* MUTANT (rep_const) */
1156: #define NAN_WORD0 1x7ff80000 /* MUTANT (rep_const) */
1156: #define NAN_WORD0 -1x7ff80000 /* MUTANT (rep_const) */
1160: #define NAN_WORD1 1 /* MUTANT (rep_const) */
1160: #define NAN_WORD1 -1 /* MUTANT (rep_const) */
1165: /* MUTANT (del_stmt) */ /*     int c, d; */ 
1166: /* MUTANT (del_stmt) */ /*     CONST char *s = *sp; */ 
1168: /* MUTANT (rep_op) */    while(d = *t--) {
1168: /* MUTANT (negate) */    while(!(d = *t++)) {
1169: /* MUTANT (rep_op) */        if ((c = *++s) <= 'A' && c <= 'Z')
1169: /* MUTANT (rep_op) */        if ((c = *++s) < 'A' && c <= 'Z')
1169: /* MUTANT (rep_op) */        if ((c = *++s) > 'A' && c <= 'Z')
1169: /* MUTANT (rep_op) */        if ((c = *++s) == 'A' && c <= 'Z')
1169: /* MUTANT (rep_op) */        if ((c = *++s) != 'A' && c <= 'Z')
1169: /* MUTANT (rep_op) */        if ((c = *++s) >= 'A' || c <= 'Z')
1169: /* MUTANT (rep_op) */        if ((c = *++s) >= 'A' && c < 'Z')
1169: /* MUTANT (rep_op) */        if ((c = *++s) >= 'A' && c > 'Z')
1169: /* MUTANT (rep_op) */        if ((c = *++s) >= 'A' && c >= 'Z')
1169: /* MUTANT (rep_op) */        if ((c = *++s) >= 'A' && c == 'Z')
1169: /* MUTANT (rep_op) */        if ((c = *++s) >= 'A' && c != 'Z')
1169: /* MUTANT (negate) */        if(! ((c = *++s) >= 'A' && c <= 'Z'))
1170: /* MUTANT (rep_op) */            c -= 'a' - 'A';
1170: /* MUTANT (rep_op) */            c *= 'a' - 'A';
1170: /* MUTANT (rep_op) */            c %= 'a' - 'A';
1171: /* MUTANT (rep_op) */        if (c == d)
1171: /* MUTANT (negate) */        if(! (c != d))
1172: /* MUTANT (rep_const) */            return 1;
1172: /* MUTANT (rep_const) */            return -1;
1174: /* MUTANT (rep_op) */    *sp = s - 1;
1174: /* MUTANT (rep_op) */    *sp = s * 1;
1174: /* MUTANT (rep_op) */    *sp = s % 1;
1174: /* MUTANT (rep_const) */    *sp = s + 0;
1174: /* MUTANT (rep_const) */    *sp = s + -1;
1174: /* MUTANT (rep_const) */    *sp = s + ((1)+1);
1175: /* MUTANT (del_stmt) */ /*     return 1; */ 
1175: /* MUTANT (rep_const) */    return 0;
1175: /* MUTANT (rep_const) */    return -1;
1175: /* MUTANT (rep_const) */    return ((1)+1);
1186: /* MUTANT (del_stmt) */ /*     freelist_lock = PR_NewLock(); */ 
1187: /* MUTANT (del_stmt) */ /*         p5s_lock = PR_NewLock(); */ 
1188: /* MUTANT (del_stmt) */ /*     initialized = JS_TRUE; */ 
1194: /* MUTANT (del_stmt) */ /*     int count; */ 
1195: /* MUTANT (del_stmt) */ /*     Bigint *temp; */ 
1198: /* MUTANT (rep_op) */    if (initialized != JS_TRUE) {
1198: /* MUTANT (negate) */    if(! (initialized == JS_TRUE)) {
1199: /* MUTANT (del_stmt) */ /*         PR_DestroyLock(freelist_lock); */ 
1200: /* MUTANT (del_stmt) */ /*         PR_DestroyLock(p5s_lock); */ 
1201: /* MUTANT (del_stmt) */ /*         initialized = JS_FALSE; */ 
1208: /* MUTANT (rep_op) */    for (count = 0; count < Kmax; count++) {
1208: /* MUTANT (rep_op) */    for (count = 0; count > Kmax; count++) {
1208: /* MUTANT (rep_op) */    for (count = 0; count >= Kmax; count++) {
1208: /* MUTANT (rep_op) */    for (count = 0; count == Kmax; count++) {
1208: /* MUTANT (rep_op) */    for (count = 0; count != Kmax; count++) {
1208: /* MUTANT (rep_op) */    for (count = 0; count <= Kmax; count--) {
1208: /* MUTANT (rep_const) */    for (count = 1; count <= Kmax; count++) {
1208: /* MUTANT (rep_const) */    for (count = -1; count <= Kmax; count++) {
1209: /* MUTANT (del_stmt) */ /*         Bigint **listp = &freelist[count]; */ 
1210: /* MUTANT (rep_op) */        while ((temp = *listp) == NULL) {
1210: /* MUTANT (negate) */        while(! ((temp = *listp) != NULL)) {
1211: /* MUTANT (del_stmt) */ /*             *listp = temp->next; */ 
1212: /* MUTANT (del_stmt) */ /*             free(temp); */ 
1218: /* MUTANT (negate) */    while(! (p5s)) {
1219: /* MUTANT (del_stmt) */ /*         temp = p5s; */ 
1220: /* MUTANT (del_stmt) */ /*         p5s = p5s->next; */ 
1221: /* MUTANT (del_stmt) */ /*         free(temp); */ 
1230: /* MUTANT (del_stmt) */ /*     int32 scale; */ 
1233: /* MUTANT (del_stmt) */ /*     CONST char *s, *s0, *s1; */ 
1234: /* MUTANT (del_stmt) */ /*     double aadj, aadj1, adj, rv, rv0; */ 
1235: /* MUTANT (del_stmt) */ /*     Long L; */ 
1236: /* MUTANT (del_stmt) */ /*     ULong y, z; */ 
1237: /* MUTANT (del_stmt) */ /*     Bigint *bb, *bb1, *bd, *bd0, *bs, *delta; */ 
1239: /* MUTANT (del_stmt) */ /*     *err = 0; */ 
1239: /* MUTANT (rep_const) */    *err = 1;
1239: /* MUTANT (rep_const) */    *err = -1;
1241: /* MUTANT (del_stmt) */ /*     bb = bd = bs = delta = NULL; */ 
1242: /* MUTANT (del_stmt) */ /*     sign = nz0 = nz = 0; */ 
1242: /* MUTANT (rep_const) */    sign = nz0 = nz = 1;
1242: /* MUTANT (rep_const) */    sign = nz0 = nz = -1;
1243: /* MUTANT (del_stmt) */ /*     rv = 0.; */ 
1246: /* MUTANT (del_stmt) */ /*     ACQUIRE_DTOA_LOCK(); */ 
1248: /* MUTANT (rep_op) */    for(s = s00;;s--) switch(*s) {
1250: /* MUTANT (rep_const) */        sign = 0;
1250: /* MUTANT (rep_const) */        sign = -1;
1250: /* MUTANT (rep_const) */        sign = ((1)+1);
1252: /* MUTANT (rep_op) */    case '-':
1252: /* MUTANT (rep_op) */    case '*':
1252: /* MUTANT (rep_op) */    case '%':
1253: /* MUTANT (negate) */        if(! (*++s))
1256: /* MUTANT (rep_const) */    case 1:
1256: /* MUTANT (rep_const) */    case -1:
1258: /* MUTANT (del_stmt) */ /*         goto ret; */ 
1271: /* MUTANT (rep_op) */    if (*s != '0') {
1271: /* MUTANT (rep_const) */    if (*s == '1') {
1271: /* MUTANT (rep_const) */    if (*s == '-1') {
1271: /* MUTANT (negate) */    if(! (*s == '0')) {
1272: /* MUTANT (del_stmt) */ /*         nz0 = 1; */ 
1272: /* MUTANT (rep_const) */        nz0 = 0;
1272: /* MUTANT (rep_const) */        nz0 = -1;
1272: /* MUTANT (rep_const) */        nz0 = ((1)+1);
1273: /* MUTANT (del_stmt) */ /*         while(*++s == '0') ; */ 
1273: /* MUTANT (rep_op) */        while(*++s != '0') ;
1273: /* MUTANT (rep_const) */        while(*++s == '1') ;
1273: /* MUTANT (rep_const) */        while(*++s == '-1') ;
1273: /* MUTANT (negate) */        while(!(*++s == '0')) ;
1274: /* MUTANT (negate) */        if(! (!*s))
1278: /* MUTANT (del_stmt) */ /*     y = z = 0; */ 
1278: /* MUTANT (rep_const) */    y = z = 1;
1278: /* MUTANT (rep_const) */    y = z = -1;
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) <= '0' && c <= '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) < '0' && c <= '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) > '0' && c <= '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) == '0' && c <= '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) != '0' && c <= '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) >= '0' || c <= '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) >= '0' && c < '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) >= '0' && c > '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) >= '0' && c >= '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) >= '0' && c == '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) >= '0' && c != '9'; nd++, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) >= '0' && c <= '9'; nd--, s++)
1279: /* MUTANT (rep_op) */    for(nd = nf = 0; (c = *s) >= '0' && c <= '9'; nd++, s--)
1279: /* MUTANT (rep_const) */    for(nd = nf = 1; (c = *s) >= '0' && c <= '9'; nd++, s++)
1279: /* MUTANT (rep_const) */    for(nd = nf = -1; (c = *s) >= '0' && c <= '9'; nd++, s++)
1279: /* MUTANT (rep_const) */    for(nd = nf = 0; (c = *s) >= '1' && c <= '9'; nd++, s++)
1279: /* MUTANT (rep_const) */    for(nd = nf = 0; (c = *s) >= '-1' && c <= '9'; nd++, s++)
1279: /* MUTANT (rep_const) */    for(nd = nf = 0; (c = *s) >= '0' && c <= '0'; nd++, s++)
1279: /* MUTANT (rep_const) */    for(nd = nf = 0; (c = *s) >= '0' && c <= '1'; nd++, s++)
1279: /* MUTANT (rep_const) */    for(nd = nf = 0; (c = *s) >= '0' && c <= '-1'; nd++, s++)
1279: /* MUTANT (rep_const) */    for(nd = nf = 0; (c = *s) >= '0' && c <= '((9)+1)'; nd++, s++)
1279: /* MUTANT (rep_const) */    for(nd = nf = 0; (c = *s) >= '0' && c <= '((9)-1)'; nd++, s++)
1280: /* MUTANT (rep_op) */        if (nd <= 9)
1280: /* MUTANT (rep_op) */        if (nd > 9)
1280: /* MUTANT (rep_op) */        if (nd >= 9)
1280: /* MUTANT (rep_op) */        if (nd == 9)
1280: /* MUTANT (rep_op) */        if (nd != 9)
1280: /* MUTANT (rep_const) */        if (nd < 0)
1280: /* MUTANT (rep_const) */        if (nd < 1)
1280: /* MUTANT (rep_const) */        if (nd < -1)
1280: /* MUTANT (rep_const) */        if (nd < ((9)+1))
1280: /* MUTANT (rep_const) */        if (nd < ((9)-1))
1280: /* MUTANT (negate) */        if(! (nd < 9))
1281: /* MUTANT (rep_op) */            y = 10*y - c - '0';
1281: /* MUTANT (rep_op) */            y = 10*y * c - '0';
1281: /* MUTANT (rep_op) */            y = 10*y % c - '0';
1281: /* MUTANT (rep_const) */            y = 0*y + c - '0';
1281: /* MUTANT (rep_const) */            y = 1*y + c - '0';
1281: /* MUTANT (rep_const) */            y = -1*y + c - '0';
1281: /* MUTANT (rep_const) */            y = ((10)+1)*y + c - '0';
1281: /* MUTANT (rep_const) */            y = ((10)-1)*y + c - '0';
1281: /* MUTANT (rep_const) */            y = 10*y + c - '1';
1281: /* MUTANT (rep_const) */            y = 10*y + c - '-1';
1282: /* MUTANT (rep_op) */        else if (nd <= 16)
1282: /* MUTANT (rep_op) */        else if (nd > 16)
1282: /* MUTANT (rep_op) */        else if (nd >= 16)
1282: /* MUTANT (rep_op) */        else if (nd == 16)
1282: /* MUTANT (rep_op) */        else if (nd != 16)
1282: /* MUTANT (rep_const) */        else if (nd < 0)
1282: /* MUTANT (rep_const) */        else if (nd < 1)
1282: /* MUTANT (rep_const) */        else if (nd < -1)
1282: /* MUTANT (rep_const) */        else if (nd < ((16)+1))
1282: /* MUTANT (rep_const) */        else if (nd < ((16)-1))
1282: /* MUTANT (negate) */        else if(! (nd < 16))
1283: /* MUTANT (rep_op) */            z = 10*z - c - '0';
1283: /* MUTANT (rep_op) */            z = 10*z * c - '0';
1283: /* MUTANT (rep_op) */            z = 10*z % c - '0';
1283: /* MUTANT (rep_const) */            z = 0*z + c - '0';
1283: /* MUTANT (rep_const) */            z = 1*z + c - '0';
1283: /* MUTANT (rep_const) */            z = -1*z + c - '0';
1283: /* MUTANT (rep_const) */            z = ((10)+1)*z + c - '0';
1283: /* MUTANT (rep_const) */            z = ((10)-1)*z + c - '0';
1283: /* MUTANT (rep_const) */            z = 10*z + c - '1';
1283: /* MUTANT (rep_const) */            z = 10*z + c - '-1';
1284: /* MUTANT (del_stmt) */ /*     nd0 = nd; */ 
1285: /* MUTANT (rep_op) */    if (c != '.') {
1285: /* MUTANT (negate) */    if(! (c == '.')) {
1286: /* MUTANT (del_stmt) */ /*         c = *++s; */ 
1287: /* MUTANT (negate) */        if(! (!nd)) {
1288: /* MUTANT (rep_op) */            for(; c != '0'; c = *++s)
1288: /* MUTANT (rep_const) */            for(; c == '1'; c = *++s)
1288: /* MUTANT (rep_const) */            for(; c == '-1'; c = *++s)
1289: /* MUTANT (rep_op) */                nz--;
1290: /* MUTANT (rep_op) */            if (c <= '0' && c <= '9') {
1290: /* MUTANT (rep_op) */            if (c < '0' && c <= '9') {
1290: /* MUTANT (rep_op) */            if (c >= '0' && c <= '9') {
1290: /* MUTANT (rep_op) */            if (c == '0' && c <= '9') {
1290: /* MUTANT (rep_op) */            if (c != '0' && c <= '9') {
1290: /* MUTANT (rep_op) */            if (c > '0' || c <= '9') {
1290: /* MUTANT (rep_op) */            if (c > '0' && c < '9') {
1290: /* MUTANT (rep_op) */            if (c > '0' && c > '9') {
1290: /* MUTANT (rep_op) */            if (c > '0' && c >= '9') {
1290: /* MUTANT (rep_op) */            if (c > '0' && c == '9') {
1290: /* MUTANT (rep_op) */            if (c > '0' && c != '9') {
1290: /* MUTANT (rep_const) */            if (c > '1' && c <= '9') {
1290: /* MUTANT (rep_const) */            if (c > '-1' && c <= '9') {
1290: /* MUTANT (rep_const) */            if (c > '0' && c <= '0') {
1290: /* MUTANT (rep_const) */            if (c > '0' && c <= '1') {
1290: /* MUTANT (rep_const) */            if (c > '0' && c <= '-1') {
1290: /* MUTANT (rep_const) */            if (c > '0' && c <= '((9)+1)') {
1290: /* MUTANT (rep_const) */            if (c > '0' && c <= '((9)-1)') {
1290: /* MUTANT (negate) */            if(! (c > '0' && c <= '9')) {
1291: /* MUTANT (del_stmt) */ /*                 s0 = s; */ 
1292: /* MUTANT (del_stmt) */ /*                 nf += nz; */ 
1292: /* MUTANT (rep_op) */                nf -= nz;
1292: /* MUTANT (rep_op) */                nf *= nz;
1292: /* MUTANT (rep_op) */                nf %= nz;
1293: /* MUTANT (del_stmt) */ /*                 nz = 0; */ 
1293: /* MUTANT (rep_const) */                nz = 1;
1293: /* MUTANT (rep_const) */                nz = -1;
1294: /* MUTANT (del_stmt) */ /*                 goto have_dig; */ 
1298: /* MUTANT (rep_op) */        for(; c <= '0' && c <= '9'; c = *++s) {
1298: /* MUTANT (rep_op) */        for(; c < '0' && c <= '9'; c = *++s) {
1298: /* MUTANT (rep_op) */        for(; c > '0' && c <= '9'; c = *++s) {
1298: /* MUTANT (rep_op) */        for(; c == '0' && c <= '9'; c = *++s) {
1298: /* MUTANT (rep_op) */        for(; c != '0' && c <= '9'; c = *++s) {
1298: /* MUTANT (rep_op) */        for(; c >= '0' || c <= '9'; c = *++s) {
1298: /* MUTANT (rep_op) */        for(; c >= '0' && c < '9'; c = *++s) {
1298: /* MUTANT (rep_op) */        for(; c >= '0' && c > '9'; c = *++s) {
1298: /* MUTANT (rep_op) */        for(; c >= '0' && c >= '9'; c = *++s) {
1298: /* MUTANT (rep_op) */        for(; c >= '0' && c == '9'; c = *++s) {
1298: /* MUTANT (rep_op) */        for(; c >= '0' && c != '9'; c = *++s) {
1298: /* MUTANT (rep_const) */        for(; c >= '1' && c <= '9'; c = *++s) {
1298: /* MUTANT (rep_const) */        for(; c >= '-1' && c <= '9'; c = *++s) {
1298: /* MUTANT (rep_const) */        for(; c >= '0' && c <= '0'; c = *++s) {
1298: /* MUTANT (rep_const) */        for(; c >= '0' && c <= '1'; c = *++s) {
1298: /* MUTANT (rep_const) */        for(; c >= '0' && c <= '-1'; c = *++s) {
1298: /* MUTANT (rep_const) */        for(; c >= '0' && c <= '((9)+1)'; c = *++s) {
1298: /* MUTANT (rep_const) */        for(; c >= '0' && c <= '((9)-1)'; c = *++s) {
1300: /* MUTANT (rep_op) */            nz--;
1301: /* MUTANT (rep_op) */            if (c += '0') {
1301: /* MUTANT (rep_op) */            if (c *= '0') {
1301: /* MUTANT (rep_op) */            if (c %= '0') {
1301: /* MUTANT (rep_const) */            if (c -= '1') {
1301: /* MUTANT (rep_const) */            if (c -= '-1') {
1301: /* MUTANT (negate) */            if(! (c -= '0')) {
1302: /* MUTANT (del_stmt) */ /*                 nf += nz; */ 
1302: /* MUTANT (rep_op) */                nf -= nz;
1302: /* MUTANT (rep_op) */                nf *= nz;
1302: /* MUTANT (rep_op) */                nf %= nz;
1303: /* MUTANT (rep_op) */                for(i = 1; i <= nz; i++)
1303: /* MUTANT (rep_op) */                for(i = 1; i > nz; i++)
1303: /* MUTANT (rep_op) */                for(i = 1; i >= nz; i++)
1303: /* MUTANT (rep_op) */                for(i = 1; i == nz; i++)
1303: /* MUTANT (rep_op) */                for(i = 1; i != nz; i++)
1303: /* MUTANT (rep_op) */                for(i = 1; i < nz; i--)
1303: /* MUTANT (rep_const) */                for(i = 0; i < nz; i++)
1303: /* MUTANT (rep_const) */                for(i = -1; i < nz; i++)
1303: /* MUTANT (rep_const) */                for(i = ((1)+1); i < nz; i++)
1304: /* MUTANT (rep_op) */                    if (nd-- < 9)
1304: /* MUTANT (rep_op) */                    if (nd++ <= 9)
1304: /* MUTANT (rep_op) */                    if (nd++ > 9)
1304: /* MUTANT (rep_op) */                    if (nd++ >= 9)
1304: /* MUTANT (rep_op) */                    if (nd++ == 9)
1304: /* MUTANT (rep_op) */                    if (nd++ != 9)
1304: /* MUTANT (rep_const) */                    if (nd++ < 0)
1304: /* MUTANT (rep_const) */                    if (nd++ < 1)
1304: /* MUTANT (rep_const) */                    if (nd++ < -1)
1304: /* MUTANT (rep_const) */                    if (nd++ < ((9)+1))
1304: /* MUTANT (rep_const) */                    if (nd++ < ((9)-1))
1304: /* MUTANT (negate) */                    if(! (nd++ < 9))
1305: /* MUTANT (rep_op) */                        y += 10;
1305: /* MUTANT (rep_op) */                        y -= 10;
1305: /* MUTANT (rep_op) */                        y %= 10;
1305: /* MUTANT (rep_const) */                        y *= 0;
1305: /* MUTANT (rep_const) */                        y *= 1;
1305: /* MUTANT (rep_const) */                        y *= -1;
1305: /* MUTANT (rep_const) */                        y *= ((10)+1);
1305: /* MUTANT (rep_const) */                        y *= ((10)-1);
1306: /* MUTANT (rep_op) */                    else if (nd < DBL_DIG + 1)
1306: /* MUTANT (rep_op) */                    else if (nd > DBL_DIG + 1)
1306: /* MUTANT (rep_op) */                    else if (nd >= DBL_DIG + 1)
1306: /* MUTANT (rep_op) */                    else if (nd == DBL_DIG + 1)
1306: /* MUTANT (rep_op) */                    else if (nd != DBL_DIG + 1)
1306: /* MUTANT (rep_op) */                    else if (nd <= DBL_DIG - 1)
1306: /* MUTANT (rep_op) */                    else if (nd <= DBL_DIG * 1)
1306: /* MUTANT (rep_op) */                    else if (nd <= DBL_DIG % 1)
1306: /* MUTANT (rep_const) */                    else if (nd <= DBL_DIG + 0)
1306: /* MUTANT (rep_const) */                    else if (nd <= DBL_DIG + -1)
1306: /* MUTANT (rep_const) */                    else if (nd <= DBL_DIG + ((1)+1))
1306: /* MUTANT (negate) */                    else if(! (nd <= DBL_DIG + 1))
1307: /* MUTANT (rep_op) */                        z += 10;
1307: /* MUTANT (rep_op) */                        z -= 10;
1307: /* MUTANT (rep_op) */                        z %= 10;
1307: /* MUTANT (rep_const) */                        z *= 0;
1307: /* MUTANT (rep_const) */                        z *= 1;
1307: /* MUTANT (rep_const) */                        z *= -1;
1307: /* MUTANT (rep_const) */                        z *= ((10)+1);
1307: /* MUTANT (rep_const) */                        z *= ((10)-1);
1308: /* MUTANT (rep_op) */                if (nd-- < 9)
1308: /* MUTANT (rep_op) */                if (nd++ <= 9)
1308: /* MUTANT (rep_op) */                if (nd++ > 9)
1308: /* MUTANT (rep_op) */                if (nd++ >= 9)
1308: /* MUTANT (rep_op) */                if (nd++ == 9)
1308: /* MUTANT (rep_op) */                if (nd++ != 9)
1308: /* MUTANT (rep_const) */                if (nd++ < 0)
1308: /* MUTANT (rep_const) */                if (nd++ < 1)
1308: /* MUTANT (rep_const) */                if (nd++ < -1)
1308: /* MUTANT (rep_const) */                if (nd++ < ((9)+1))
1308: /* MUTANT (rep_const) */                if (nd++ < ((9)-1))
1308: /* MUTANT (negate) */                if(! (nd++ < 9))
1309: /* MUTANT (rep_op) */                    y = 10*y - c;
1309: /* MUTANT (rep_op) */                    y = 10*y * c;
1309: /* MUTANT (rep_op) */                    y = 10*y % c;
1309: /* MUTANT (rep_const) */                    y = 0*y + c;
1309: /* MUTANT (rep_const) */                    y = 1*y + c;
1309: /* MUTANT (rep_const) */                    y = -1*y + c;
1309: /* MUTANT (rep_const) */                    y = ((10)+1)*y + c;
1309: /* MUTANT (rep_const) */                    y = ((10)-1)*y + c;
1310: /* MUTANT (rep_op) */                else if (nd < DBL_DIG + 1)
1310: /* MUTANT (rep_op) */                else if (nd > DBL_DIG + 1)
1310: /* MUTANT (rep_op) */                else if (nd >= DBL_DIG + 1)
1310: /* MUTANT (rep_op) */                else if (nd == DBL_DIG + 1)
1310: /* MUTANT (rep_op) */                else if (nd != DBL_DIG + 1)
1310: /* MUTANT (rep_op) */                else if (nd <= DBL_DIG - 1)
1310: /* MUTANT (rep_op) */                else if (nd <= DBL_DIG * 1)
1310: /* MUTANT (rep_op) */                else if (nd <= DBL_DIG % 1)
1310: /* MUTANT (rep_const) */                else if (nd <= DBL_DIG + 0)
1310: /* MUTANT (rep_const) */                else if (nd <= DBL_DIG + -1)
1310: /* MUTANT (rep_const) */                else if (nd <= DBL_DIG + ((1)+1))
1310: /* MUTANT (negate) */                else if(! (nd <= DBL_DIG + 1))
1311: /* MUTANT (rep_op) */                    z = 10*z - c;
1311: /* MUTANT (rep_op) */                    z = 10*z * c;
1311: /* MUTANT (rep_op) */                    z = 10*z % c;
1311: /* MUTANT (rep_const) */                    z = 0*z + c;
1311: /* MUTANT (rep_const) */                    z = 1*z + c;
1311: /* MUTANT (rep_const) */                    z = -1*z + c;
1311: /* MUTANT (rep_const) */                    z = ((10)+1)*z + c;
1311: /* MUTANT (rep_const) */                    z = ((10)-1)*z + c;
1312: /* MUTANT (del_stmt) */ /*                 nz = 0; */ 
1312: /* MUTANT (rep_const) */                nz = 1;
1312: /* MUTANT (rep_const) */                nz = -1;
1317: /* MUTANT (rep_const) */    e = 1;
1317: /* MUTANT (rep_const) */    e = -1;
1318: /* MUTANT (rep_op) */    if (c != 'e' || c == 'E') {
1318: /* MUTANT (rep_op) */    if (c == 'e' && c == 'E') {
1318: /* MUTANT (rep_op) */    if (c == 'e' || c != 'E') {
1318: /* MUTANT (negate) */    if(! (c == 'e' || c == 'E')) {
1319: /* MUTANT (rep_op) */        if (!nd || !nz && !nz0) {
1319: /* MUTANT (rep_op) */        if (!nd && !nz || !nz0) {
1319: /* MUTANT (negate) */        if(! (!nd && !nz && !nz0)) {
1320: /* MUTANT (del_stmt) */ /*             s = s00; */ 
1321: /* MUTANT (del_stmt) */ /*             goto ret; */ 
1324: /* MUTANT (del_stmt) */ /*         esign = 0; */ 
1324: /* MUTANT (rep_const) */        esign = 1;
1324: /* MUTANT (rep_const) */        esign = -1;
1327: /* MUTANT (rep_const) */            esign = 0;
1327: /* MUTANT (rep_const) */            esign = -1;
1327: /* MUTANT (rep_const) */            esign = ((1)+1);
1328: /* MUTANT (rep_op) */        case '-':
1328: /* MUTANT (rep_op) */        case '*':
1328: /* MUTANT (rep_op) */        case '%':
1331: /* MUTANT (rep_op) */        if (c <= '0' && c <= '9') {
1331: /* MUTANT (rep_op) */        if (c < '0' && c <= '9') {
1331: /* MUTANT (rep_op) */        if (c > '0' && c <= '9') {
1331: /* MUTANT (rep_op) */        if (c == '0' && c <= '9') {
1331: /* MUTANT (rep_op) */        if (c != '0' && c <= '9') {
1331: /* MUTANT (rep_op) */        if (c >= '0' || c <= '9') {
1331: /* MUTANT (rep_op) */        if (c >= '0' && c < '9') {
1331: /* MUTANT (rep_op) */        if (c >= '0' && c > '9') {
1331: /* MUTANT (rep_op) */        if (c >= '0' && c >= '9') {
1331: /* MUTANT (rep_op) */        if (c >= '0' && c == '9') {
1331: /* MUTANT (rep_op) */        if (c >= '0' && c != '9') {
1331: /* MUTANT (rep_const) */        if (c >= '1' && c <= '9') {
1331: /* MUTANT (rep_const) */        if (c >= '-1' && c <= '9') {
1331: /* MUTANT (rep_const) */        if (c >= '0' && c <= '0') {
1331: /* MUTANT (rep_const) */        if (c >= '0' && c <= '1') {
1331: /* MUTANT (rep_const) */        if (c >= '0' && c <= '-1') {
1331: /* MUTANT (rep_const) */        if (c >= '0' && c <= '((9)+1)') {
1331: /* MUTANT (rep_const) */        if (c >= '0' && c <= '((9)-1)') {
1331: /* MUTANT (negate) */        if(! (c >= '0' && c <= '9')) {
1332: /* MUTANT (rep_op) */            while(c != '0')
1332: /* MUTANT (rep_const) */            while(c == '1')
1332: /* MUTANT (rep_const) */            while(c == '-1')
1332: /* MUTANT (negate) */            while(!(c == '0'))
1334: /* MUTANT (rep_op) */            if (c <= '0' && c <= '9') {
1334: /* MUTANT (rep_op) */            if (c < '0' && c <= '9') {
1334: /* MUTANT (rep_op) */            if (c >= '0' && c <= '9') {
1334: /* MUTANT (rep_op) */            if (c == '0' && c <= '9') {
1334: /* MUTANT (rep_op) */            if (c != '0' && c <= '9') {
1334: /* MUTANT (rep_op) */            if (c > '0' || c <= '9') {
1334: /* MUTANT (rep_op) */            if (c > '0' && c < '9') {
1334: /* MUTANT (rep_op) */            if (c > '0' && c > '9') {
1334: /* MUTANT (rep_op) */            if (c > '0' && c >= '9') {
1334: /* MUTANT (rep_op) */            if (c > '0' && c == '9') {
1334: /* MUTANT (rep_op) */            if (c > '0' && c != '9') {
1334: /* MUTANT (rep_const) */            if (c > '1' && c <= '9') {
1334: /* MUTANT (rep_const) */            if (c > '-1' && c <= '9') {
1334: /* MUTANT (rep_const) */            if (c > '0' && c <= '0') {
1334: /* MUTANT (rep_const) */            if (c > '0' && c <= '1') {
1334: /* MUTANT (rep_const) */            if (c > '0' && c <= '-1') {
1334: /* MUTANT (rep_const) */            if (c > '0' && c <= '((9)+1)') {
1334: /* MUTANT (rep_const) */            if (c > '0' && c <= '((9)-1)') {
1334: /* MUTANT (negate) */            if(! (c > '0' && c <= '9')) {
1335: /* MUTANT (del_stmt) */ /*                 L = c - '0'; */ 
1335: /* MUTANT (rep_const) */                L = c - '1';
1335: /* MUTANT (rep_const) */                L = c - '-1';
1336: /* MUTANT (del_stmt) */ /*                 s1 = s; */ 
1337: /* MUTANT (rep_op) */                while((c = *++s) <= '0' && c <= '9')
1337: /* MUTANT (rep_op) */                while((c = *++s) < '0' && c <= '9')
1337: /* MUTANT (rep_op) */                while((c = *++s) > '0' && c <= '9')
1337: /* MUTANT (rep_op) */                while((c = *++s) == '0' && c <= '9')
1337: /* MUTANT (rep_op) */                while((c = *++s) != '0' && c <= '9')
1337: /* MUTANT (rep_op) */                while((c = *++s) >= '0' || c <= '9')
1337: /* MUTANT (rep_op) */                while((c = *++s) >= '0' && c < '9')
1337: /* MUTANT (rep_op) */                while((c = *++s) >= '0' && c > '9')
1337: /* MUTANT (rep_op) */                while((c = *++s) >= '0' && c >= '9')
1337: /* MUTANT (rep_op) */                while((c = *++s) >= '0' && c == '9')
1337: /* MUTANT (rep_op) */                while((c = *++s) >= '0' && c != '9')
1337: /* MUTANT (rep_const) */                while((c = *++s) >= '1' && c <= '9')
1337: /* MUTANT (rep_const) */                while((c = *++s) >= '-1' && c <= '9')
1337: /* MUTANT (rep_const) */                while((c = *++s) >= '0' && c <= '0')
1337: /* MUTANT (rep_const) */                while((c = *++s) >= '0' && c <= '1')
1337: /* MUTANT (rep_const) */                while((c = *++s) >= '0' && c <= '-1')
1337: /* MUTANT (rep_const) */                while((c = *++s) >= '0' && c <= '((9)+1)')
1337: /* MUTANT (rep_const) */                while((c = *++s) >= '0' && c <= '((9)-1)')
1337: /* MUTANT (negate) */                while(!((c = *++s) >= '0' && c <= '9'))
1338: /* MUTANT (rep_op) */                    L = 10*L - c - '0';
1338: /* MUTANT (rep_op) */                    L = 10*L * c - '0';
1338: /* MUTANT (rep_op) */                    L = 10*L % c - '0';
1338: /* MUTANT (rep_const) */                    L = 0*L + c - '0';
1338: /* MUTANT (rep_const) */                    L = 1*L + c - '0';
1338: /* MUTANT (rep_const) */                    L = -1*L + c - '0';
1338: /* MUTANT (rep_const) */                    L = ((10)+1)*L + c - '0';
1338: /* MUTANT (rep_const) */                    L = ((10)-1)*L + c - '0';
1338: /* MUTANT (rep_const) */                    L = 10*L + c - '1';
1338: /* MUTANT (rep_const) */                    L = 10*L + c - '-1';
1339: /* MUTANT (rep_op) */                if (s - s1 <= 8 || L > 19999)
1339: /* MUTANT (rep_op) */                if (s - s1 < 8 || L > 19999)
1339: /* MUTANT (rep_op) */                if (s - s1 >= 8 || L > 19999)
1339: /* MUTANT (rep_op) */                if (s - s1 == 8 || L > 19999)
1339: /* MUTANT (rep_op) */                if (s - s1 != 8 || L > 19999)
1339: /* MUTANT (rep_op) */                if (s - s1 > 8 && L > 19999)
1339: /* MUTANT (rep_op) */                if (s - s1 > 8 || L <= 19999)
1339: /* MUTANT (rep_op) */                if (s - s1 > 8 || L < 19999)
1339: /* MUTANT (rep_op) */                if (s - s1 > 8 || L >= 19999)
1339: /* MUTANT (rep_op) */                if (s - s1 > 8 || L == 19999)
1339: /* MUTANT (rep_op) */                if (s - s1 > 8 || L != 19999)
1339: /* MUTANT (rep_const) */                if (s - s1 > 0 || L > 19999)
1339: /* MUTANT (rep_const) */                if (s - s1 > 1 || L > 19999)
1339: /* MUTANT (rep_const) */                if (s - s1 > -1 || L > 19999)
1339: /* MUTANT (rep_const) */                if (s - s1 > ((8)+1) || L > 19999)
1339: /* MUTANT (rep_const) */                if (s - s1 > ((8)-1) || L > 19999)
1339: /* MUTANT (rep_const) */                if (s - s1 > 8 || L > 0)
1339: /* MUTANT (rep_const) */                if (s - s1 > 8 || L > 1)
1339: /* MUTANT (rep_const) */                if (s - s1 > 8 || L > -1)
1339: /* MUTANT (rep_const) */                if (s - s1 > 8 || L > ((19999)+1))
1339: /* MUTANT (rep_const) */                if (s - s1 > 8 || L > ((19999)-1))
1339: /* MUTANT (negate) */                if(! (s - s1 > 8 || L > 19999))
1343: /* MUTANT (rep_const) */                    e = 0; /* safe for 16 bit ints */
1343: /* MUTANT (rep_const) */                    e = 1; /* safe for 16 bit ints */
1343: /* MUTANT (rep_const) */                    e = -1; /* safe for 16 bit ints */
1343: /* MUTANT (rep_const) */                    e = ((19999)+1); /* safe for 16 bit ints */
1343: /* MUTANT (rep_const) */                    e = ((19999)-1); /* safe for 16 bit ints */
1346: /* MUTANT (negate) */                if(! (esign))
1350: /* MUTANT (rep_const) */                e = 1;
1350: /* MUTANT (rep_const) */                e = -1;
1355: /* MUTANT (negate) */    if(! (!nd)) {
1356: /* MUTANT (rep_op) */        if (!nz || !nz0) {
1356: /* MUTANT (negate) */        if(! (!nz && !nz0)) {
1362: /* MUTANT (negate) */                if(! (match(&s,"nfinity"))) {
1363: /* MUTANT (del_stmt) */ /*                     word0(rv) = 0x7ff00000; */ 
1363: /* MUTANT (rep_const) */                    word0(rv) = 1x7ff00000;
1363: /* MUTANT (rep_const) */                    word0(rv) = -1x7ff00000;
1364: /* MUTANT (del_stmt) */ /*                     word1(rv) = 0; */ 
1364: /* MUTANT (rep_const) */                    word1(rv) = 1;
1364: /* MUTANT (rep_const) */                    word1(rv) = -1;
1365: /* MUTANT (del_stmt) */ /*                     goto ret; */ 
1370: /* MUTANT (negate) */                if(! (match(&s, "an"))) {
1371: /* MUTANT (del_stmt) */ /*                     word0(rv) = NAN_WORD0; */ 
1372: /* MUTANT (del_stmt) */ /*                     word1(rv) = NAN_WORD1; */ 
1373: /* MUTANT (del_stmt) */ /*                     goto ret; */ 
1381: /* MUTANT (rep_op) */    e1 = e += nf;
1381: /* MUTANT (rep_op) */    e1 = e *= nf;
1381: /* MUTANT (rep_op) */    e1 = e %= nf;
1388: /* MUTANT (negate) */    if(! (!nd0))
1390: /* MUTANT (del_stmt) */ /*     k = nd < DBL_DIG + 1 ? nd : DBL_DIG + 1; */ 
1390: /* MUTANT (rep_op) */    k = nd <= DBL_DIG + 1 ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_op) */    k = nd > DBL_DIG + 1 ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_op) */    k = nd >= DBL_DIG + 1 ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_op) */    k = nd == DBL_DIG + 1 ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_op) */    k = nd != DBL_DIG + 1 ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_op) */    k = nd < DBL_DIG - 1 ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_op) */    k = nd < DBL_DIG * 1 ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_op) */    k = nd < DBL_DIG % 1 ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_op) */    k = nd < DBL_DIG + 1 ? nd : DBL_DIG - 1;
1390: /* MUTANT (rep_op) */    k = nd < DBL_DIG + 1 ? nd : DBL_DIG * 1;
1390: /* MUTANT (rep_op) */    k = nd < DBL_DIG + 1 ? nd : DBL_DIG % 1;
1390: /* MUTANT (rep_const) */    k = nd < DBL_DIG + 0 ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_const) */    k = nd < DBL_DIG + -1 ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_const) */    k = nd < DBL_DIG + ((1)+1) ? nd : DBL_DIG + 1;
1390: /* MUTANT (rep_const) */    k = nd < DBL_DIG + 1 ? nd : DBL_DIG + 0;
1390: /* MUTANT (rep_const) */    k = nd < DBL_DIG + 1 ? nd : DBL_DIG + -1;
1390: /* MUTANT (rep_const) */    k = nd < DBL_DIG + 1 ? nd : DBL_DIG + ((1)+1);
1391: /* MUTANT (del_stmt) */ /*     rv = y; */ 
1392: /* MUTANT (rep_op) */    if (k <= 9)
1392: /* MUTANT (rep_op) */    if (k < 9)
1392: /* MUTANT (rep_op) */    if (k >= 9)
1392: /* MUTANT (rep_op) */    if (k == 9)
1392: /* MUTANT (rep_op) */    if (k != 9)
1392: /* MUTANT (rep_const) */    if (k > 0)
1392: /* MUTANT (rep_const) */    if (k > 1)
1392: /* MUTANT (rep_const) */    if (k > -1)
1392: /* MUTANT (rep_const) */    if (k > ((9)+1))
1392: /* MUTANT (rep_const) */    if (k > ((9)-1))
1392: /* MUTANT (negate) */    if(! (k > 9))
1393: /* MUTANT (rep_op) */        rv = tens[k - 9] * rv - z;
1393: /* MUTANT (rep_op) */        rv = tens[k - 9] * rv * z;
1393: /* MUTANT (rep_op) */        rv = tens[k - 9] * rv % z;
1393: /* MUTANT (rep_const) */        rv = tens[k - 0] * rv + z;
1393: /* MUTANT (rep_const) */        rv = tens[k - 1] * rv + z;
1393: /* MUTANT (rep_const) */        rv = tens[k - -1] * rv + z;
1393: /* MUTANT (rep_const) */        rv = tens[k - ((9)+1)] * rv + z;
1393: /* MUTANT (rep_const) */        rv = tens[k - ((9)-1)] * rv + z;
1394: /* MUTANT (del_stmt) */ /*     bd0 = 0; */ 
1394: /* MUTANT (rep_const) */    bd0 = 1;
1394: /* MUTANT (rep_const) */    bd0 = -1;
1395: /* MUTANT (rep_op) */    if (nd < DBL_DIG
1395: /* MUTANT (rep_op) */    if (nd > DBL_DIG
1395: /* MUTANT (rep_op) */    if (nd >= DBL_DIG
1395: /* MUTANT (rep_op) */    if (nd == DBL_DIG
1395: /* MUTANT (rep_op) */    if (nd != DBL_DIG
1397: /* MUTANT (rep_op) */        || FLT_ROUNDS == 1
1397: /* MUTANT (rep_op) */        && FLT_ROUNDS != 1
1397: /* MUTANT (rep_const) */        && FLT_ROUNDS == 0
1397: /* MUTANT (rep_const) */        && FLT_ROUNDS == -1
1397: /* MUTANT (rep_const) */        && FLT_ROUNDS == ((1)+1)
1400: /* MUTANT (negate) */        if(! (!e))
1402: /* MUTANT (rep_op) */        if (e <= 0) {
1402: /* MUTANT (rep_op) */        if (e < 0) {
1402: /* MUTANT (rep_op) */        if (e >= 0) {
1402: /* MUTANT (rep_op) */        if (e == 0) {
1402: /* MUTANT (rep_op) */        if (e != 0) {
1402: /* MUTANT (rep_const) */        if (e > 1) {
1402: /* MUTANT (rep_const) */        if (e > -1) {
1402: /* MUTANT (negate) */        if(! (e > 0)) {
1403: /* MUTANT (rep_op) */            if (e < Ten_pmax) {
1403: /* MUTANT (rep_op) */            if (e > Ten_pmax) {
1403: /* MUTANT (rep_op) */            if (e >= Ten_pmax) {
1403: /* MUTANT (rep_op) */            if (e == Ten_pmax) {
1403: /* MUTANT (rep_op) */            if (e != Ten_pmax) {
1403: /* MUTANT (negate) */            if(! (e <= Ten_pmax)) {
1405: /* MUTANT (del_stmt) */ /*                 goto ret; */ 
1408: /* MUTANT (rep_op) */            if (e < Ten_pmax + i) {
1408: /* MUTANT (rep_op) */            if (e > Ten_pmax + i) {
1408: /* MUTANT (rep_op) */            if (e >= Ten_pmax + i) {
1408: /* MUTANT (rep_op) */            if (e == Ten_pmax + i) {
1408: /* MUTANT (rep_op) */            if (e != Ten_pmax + i) {
1408: /* MUTANT (rep_op) */            if (e <= Ten_pmax - i) {
1408: /* MUTANT (rep_op) */            if (e <= Ten_pmax * i) {
1408: /* MUTANT (rep_op) */            if (e <= Ten_pmax % i) {
1408: /* MUTANT (negate) */            if(! (e <= Ten_pmax + i)) {
1412: /* MUTANT (del_stmt) */ /*                 e -= i; */ 
1412: /* MUTANT (rep_op) */                e += i;
1412: /* MUTANT (rep_op) */                e *= i;
1412: /* MUTANT (rep_op) */                e %= i;
1413: /* MUTANT (del_stmt) */ /*                 rv *= tens[i]; */ 
1413: /* MUTANT (rep_op) */                rv += tens[i];
1413: /* MUTANT (rep_op) */                rv -= tens[i];
1413: /* MUTANT (rep_op) */                rv %= tens[i];
1415: /* MUTANT (del_stmt) */ /*                 goto ret; */ 
1419: /* MUTANT (rep_op) */        else if (e <= -Ten_pmax) {
1419: /* MUTANT (rep_op) */        else if (e < -Ten_pmax) {
1419: /* MUTANT (rep_op) */        else if (e > -Ten_pmax) {
1419: /* MUTANT (rep_op) */        else if (e == -Ten_pmax) {
1419: /* MUTANT (rep_op) */        else if (e != -Ten_pmax) {
1419: /* MUTANT (negate) */        else if(! (e >= -Ten_pmax)) {
1421: /* MUTANT (del_stmt) */ /*             goto ret; */ 
1425: /* MUTANT (rep_op) */    e1 -= nd - k;
1425: /* MUTANT (rep_op) */    e1 *= nd - k;
1425: /* MUTANT (rep_op) */    e1 %= nd - k;
1427: /* MUTANT (del_stmt) */ /*     scale = 0; */ 
1427: /* MUTANT (rep_const) */    scale = 1;
1427: /* MUTANT (rep_const) */    scale = -1;
1431: /* MUTANT (rep_op) */    if (e1 <= 0) {
1431: /* MUTANT (rep_op) */    if (e1 < 0) {
1431: /* MUTANT (rep_op) */    if (e1 >= 0) {
1431: /* MUTANT (rep_op) */    if (e1 == 0) {
1431: /* MUTANT (rep_op) */    if (e1 != 0) {
1431: /* MUTANT (rep_const) */    if (e1 > 1) {
1431: /* MUTANT (rep_const) */    if (e1 > -1) {
1431: /* MUTANT (negate) */    if(! (e1 > 0)) {
1432: /* MUTANT (rep_op) */        if ((i = e1 & 15) == 0)
1432: /* MUTANT (rep_const) */        if ((i = e1 & 0) != 0)
1432: /* MUTANT (rep_const) */        if ((i = e1 & 1) != 0)
1432: /* MUTANT (rep_const) */        if ((i = e1 & -1) != 0)
1432: /* MUTANT (rep_const) */        if ((i = e1 & ((15)+1)) != 0)
1432: /* MUTANT (rep_const) */        if ((i = e1 & ((15)-1)) != 0)
1432: /* MUTANT (rep_const) */        if ((i = e1 & 15) != 1)
1432: /* MUTANT (rep_const) */        if ((i = e1 & 15) != -1)
1432: /* MUTANT (negate) */        if(! ((i = e1 & 15) != 0))
1433: /* MUTANT (rep_op) */            rv += tens[i];
1433: /* MUTANT (rep_op) */            rv -= tens[i];
1433: /* MUTANT (rep_op) */            rv %= tens[i];
1434: /* MUTANT (rep_const) */        if (e1 &= ~0) {
1434: /* MUTANT (rep_const) */        if (e1 &= ~1) {
1434: /* MUTANT (rep_const) */        if (e1 &= ~-1) {
1434: /* MUTANT (rep_const) */        if (e1 &= ~((15)+1)) {
1434: /* MUTANT (rep_const) */        if (e1 &= ~((15)-1)) {
1434: /* MUTANT (negate) */        if(! (e1 &= ~15)) {
1435: /* MUTANT (rep_op) */            if (e1 <= DBL_MAX_10_EXP) {
1435: /* MUTANT (rep_op) */            if (e1 < DBL_MAX_10_EXP) {
1435: /* MUTANT (rep_op) */            if (e1 >= DBL_MAX_10_EXP) {
1435: /* MUTANT (rep_op) */            if (e1 == DBL_MAX_10_EXP) {
1435: /* MUTANT (rep_op) */            if (e1 != DBL_MAX_10_EXP) {
1435: /* MUTANT (negate) */            if(! (e1 > DBL_MAX_10_EXP)) {
1443: /* MUTANT (del_stmt) */ /*                 word1(rv) = 0; */ 
1443: /* MUTANT (rep_const) */                word1(rv) = 1;
1443: /* MUTANT (rep_const) */                word1(rv) = -1;
1445: /* MUTANT (negate) */                if(! (bd0))
1447: /* MUTANT (del_stmt) */ /*                 goto ret; */ 
1449: /* MUTANT (rep_const) */            e1 >>= 0;
1449: /* MUTANT (rep_const) */            e1 >>= 1;
1449: /* MUTANT (rep_const) */            e1 >>= -1;
1449: /* MUTANT (rep_const) */            e1 >>= ((4)+1);
1449: /* MUTANT (rep_const) */            e1 >>= ((4)-1);
1450: /* MUTANT (rep_op) */            for(j = 0; e1 <= 1; j++, e1 >>= 1)
1450: /* MUTANT (rep_op) */            for(j = 0; e1 < 1; j++, e1 >>= 1)
1450: /* MUTANT (rep_op) */            for(j = 0; e1 >= 1; j++, e1 >>= 1)
1450: /* MUTANT (rep_op) */            for(j = 0; e1 == 1; j++, e1 >>= 1)
1450: /* MUTANT (rep_op) */            for(j = 0; e1 != 1; j++, e1 >>= 1)
1450: /* MUTANT (rep_op) */            for(j = 0; e1 > 1; j--, e1 >>= 1)
1450: /* MUTANT (rep_const) */            for(j = 1; e1 > 1; j++, e1 >>= 1)
1450: /* MUTANT (rep_const) */            for(j = -1; e1 > 1; j++, e1 >>= 1)
1450: /* MUTANT (rep_const) */            for(j = 0; e1 > 0; j++, e1 >>= 1)
1450: /* MUTANT (rep_const) */            for(j = 0; e1 > -1; j++, e1 >>= 1)
1450: /* MUTANT (rep_const) */            for(j = 0; e1 > ((1)+1); j++, e1 >>= 1)
1450: /* MUTANT (rep_const) */            for(j = 0; e1 > 1; j++, e1 >>= 0)
1450: /* MUTANT (rep_const) */            for(j = 0; e1 > 1; j++, e1 >>= -1)
1450: /* MUTANT (rep_const) */            for(j = 0; e1 > 1; j++, e1 >>= ((1)+1))
1451: /* MUTANT (rep_const) */                if (e1 & 0)
1451: /* MUTANT (rep_const) */                if (e1 & -1)
1451: /* MUTANT (rep_const) */                if (e1 & ((1)+1))
1451: /* MUTANT (negate) */                if(! (e1 & 1))
1452: /* MUTANT (rep_op) */                    rv += bigtens[j];
1452: /* MUTANT (rep_op) */                    rv -= bigtens[j];
1452: /* MUTANT (rep_op) */                    rv %= bigtens[j];
1454: /* MUTANT (del_stmt) */ /*             set_word0(rv, word0(rv) - P*Exp_msk1); */ 
1455: /* MUTANT (del_stmt) */ /*             rv *= bigtens[j]; */ 
1455: /* MUTANT (rep_op) */            rv += bigtens[j];
1455: /* MUTANT (rep_op) */            rv -= bigtens[j];
1455: /* MUTANT (rep_op) */            rv %= bigtens[j];
1456: /* MUTANT (rep_op) */            if ((z = word0(rv) & Exp_mask) <= Exp_msk1*(DBL_MAX_EXP+Bias-P))
1456: /* MUTANT (rep_op) */            if ((z = word0(rv) & Exp_mask) < Exp_msk1*(DBL_MAX_EXP+Bias-P))
1456: /* MUTANT (rep_op) */            if ((z = word0(rv) & Exp_mask) >= Exp_msk1*(DBL_MAX_EXP+Bias-P))
1456: /* MUTANT (rep_op) */            if ((z = word0(rv) & Exp_mask) == Exp_msk1*(DBL_MAX_EXP+Bias-P))
1456: /* MUTANT (rep_op) */            if ((z = word0(rv) & Exp_mask) != Exp_msk1*(DBL_MAX_EXP+Bias-P))
1456: /* MUTANT (rep_op) */            if ((z = word0(rv) & Exp_mask) > Exp_msk1*(DBL_MAX_EXP-Bias-P))
1456: /* MUTANT (rep_op) */            if ((z = word0(rv) & Exp_mask) > Exp_msk1*(DBL_MAX_EXP*Bias-P))
1456: /* MUTANT (rep_op) */            if ((z = word0(rv) & Exp_mask) > Exp_msk1*(DBL_MAX_EXP%Bias-P))
1456: /* MUTANT (negate) */            if(! ((z = word0(rv) & Exp_mask) > Exp_msk1*(DBL_MAX_EXP+Bias-P)))
1458: /* MUTANT (rep_op) */            if (z <= Exp_msk1*(DBL_MAX_EXP+Bias-1-P)) {
1458: /* MUTANT (rep_op) */            if (z < Exp_msk1*(DBL_MAX_EXP+Bias-1-P)) {
1458: /* MUTANT (rep_op) */            if (z >= Exp_msk1*(DBL_MAX_EXP+Bias-1-P)) {
1458: /* MUTANT (rep_op) */            if (z == Exp_msk1*(DBL_MAX_EXP+Bias-1-P)) {
1458: /* MUTANT (rep_op) */            if (z != Exp_msk1*(DBL_MAX_EXP+Bias-1-P)) {
1458: /* MUTANT (rep_op) */            if (z > Exp_msk1*(DBL_MAX_EXP-Bias-1-P)) {
1458: /* MUTANT (rep_op) */            if (z > Exp_msk1*(DBL_MAX_EXP*Bias-1-P)) {
1458: /* MUTANT (rep_op) */            if (z > Exp_msk1*(DBL_MAX_EXP%Bias-1-P)) {
1458: /* MUTANT (rep_const) */            if (z > Exp_msk1*(DBL_MAX_EXP+Bias-0-P)) {
1458: /* MUTANT (rep_const) */            if (z > Exp_msk1*(DBL_MAX_EXP+Bias--1-P)) {
1458: /* MUTANT (rep_const) */            if (z > Exp_msk1*(DBL_MAX_EXP+Bias-((1)+1)-P)) {
1458: /* MUTANT (negate) */            if(! (z > Exp_msk1*(DBL_MAX_EXP+Bias-1-P))) {
1461: /* MUTANT (del_stmt) */ /*                 set_word0(rv, Big0); */ 
1462: /* MUTANT (del_stmt) */ /*                 set_word1(rv, Big1); */ 
1465: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) - P*Exp_msk1);
1465: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) * P*Exp_msk1);
1465: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) % P*Exp_msk1);
1468: /* MUTANT (rep_op) */    else if (e1 <= 0) {
1468: /* MUTANT (rep_op) */    else if (e1 > 0) {
1468: /* MUTANT (rep_op) */    else if (e1 >= 0) {
1468: /* MUTANT (rep_op) */    else if (e1 == 0) {
1468: /* MUTANT (rep_op) */    else if (e1 != 0) {
1468: /* MUTANT (rep_const) */    else if (e1 < 1) {
1468: /* MUTANT (rep_const) */    else if (e1 < -1) {
1468: /* MUTANT (negate) */    else if(! (e1 < 0)) {
1469: /* MUTANT (del_stmt) */ /*         e1 = -e1; */ 
1470: /* MUTANT (rep_op) */        if ((i = e1 & 15) == 0)
1470: /* MUTANT (rep_const) */        if ((i = e1 & 0) != 0)
1470: /* MUTANT (rep_const) */        if ((i = e1 & 1) != 0)
1470: /* MUTANT (rep_const) */        if ((i = e1 & -1) != 0)
1470: /* MUTANT (rep_const) */        if ((i = e1 & ((15)+1)) != 0)
1470: /* MUTANT (rep_const) */        if ((i = e1 & ((15)-1)) != 0)
1470: /* MUTANT (rep_const) */        if ((i = e1 & 15) != 1)
1470: /* MUTANT (rep_const) */        if ((i = e1 & 15) != -1)
1470: /* MUTANT (negate) */        if(! ((i = e1 & 15) != 0))
1472: /* MUTANT (rep_const) */        if (e1 &= ~0) {
1472: /* MUTANT (rep_const) */        if (e1 &= ~1) {
1472: /* MUTANT (rep_const) */        if (e1 &= ~-1) {
1472: /* MUTANT (rep_const) */        if (e1 &= ~((15)+1)) {
1472: /* MUTANT (rep_const) */        if (e1 &= ~((15)-1)) {
1472: /* MUTANT (negate) */        if(! (e1 &= ~15)) {
1473: /* MUTANT (del_stmt) */ /*             e1 >>= 4; */ 
1473: /* MUTANT (rep_const) */            e1 >>= 0;
1473: /* MUTANT (rep_const) */            e1 >>= 1;
1473: /* MUTANT (rep_const) */            e1 >>= -1;
1473: /* MUTANT (rep_const) */            e1 >>= ((4)+1);
1473: /* MUTANT (rep_const) */            e1 >>= ((4)-1);
1474: /* MUTANT (rep_op) */            if (e1 <= 1 << n_bigtens)
1474: /* MUTANT (rep_op) */            if (e1 < 1 << n_bigtens)
1474: /* MUTANT (rep_op) */            if (e1 > 1 << n_bigtens)
1474: /* MUTANT (rep_op) */            if (e1 == 1 << n_bigtens)
1474: /* MUTANT (rep_op) */            if (e1 != 1 << n_bigtens)
1474: /* MUTANT (rep_const) */            if (e1 >= 0 << n_bigtens)
1474: /* MUTANT (rep_const) */            if (e1 >= -1 << n_bigtens)
1474: /* MUTANT (rep_const) */            if (e1 >= ((1)+1) << n_bigtens)
1474: /* MUTANT (negate) */            if(! (e1 >= 1 << n_bigtens))
1477: /* MUTANT (negate) */            if(! (e1 & Scale_Bit))
1479: /* MUTANT (rep_op) */            for(j = 0; e1 <= 0; j++, e1 >>= 1)
1479: /* MUTANT (rep_op) */            for(j = 0; e1 < 0; j++, e1 >>= 1)
1479: /* MUTANT (rep_op) */            for(j = 0; e1 >= 0; j++, e1 >>= 1)
1479: /* MUTANT (rep_op) */            for(j = 0; e1 == 0; j++, e1 >>= 1)
1479: /* MUTANT (rep_op) */            for(j = 0; e1 != 0; j++, e1 >>= 1)
1479: /* MUTANT (rep_op) */            for(j = 0; e1 > 0; j--, e1 >>= 1)
1479: /* MUTANT (rep_const) */            for(j = 1; e1 > 0; j++, e1 >>= 1)
1479: /* MUTANT (rep_const) */            for(j = -1; e1 > 0; j++, e1 >>= 1)
1479: /* MUTANT (rep_const) */            for(j = 0; e1 > 1; j++, e1 >>= 1)
1479: /* MUTANT (rep_const) */            for(j = 0; e1 > -1; j++, e1 >>= 1)
1479: /* MUTANT (rep_const) */            for(j = 0; e1 > 0; j++, e1 >>= 0)
1479: /* MUTANT (rep_const) */            for(j = 0; e1 > 0; j++, e1 >>= -1)
1479: /* MUTANT (rep_const) */            for(j = 0; e1 > 0; j++, e1 >>= ((1)+1))
1480: /* MUTANT (rep_const) */                if (e1 & 0)
1480: /* MUTANT (rep_const) */                if (e1 & -1)
1480: /* MUTANT (rep_const) */                if (e1 & ((1)+1))
1480: /* MUTANT (negate) */                if(! (e1 & 1))
1481: /* MUTANT (rep_op) */                    rv += tinytens[j];
1481: /* MUTANT (rep_op) */                    rv -= tinytens[j];
1481: /* MUTANT (rep_op) */                    rv %= tinytens[j];
1482: /* MUTANT (rep_op) */            if (scale || (j = P + 1 - ((word0(rv) & Exp_mask)
1482: /* MUTANT (rep_op) */            if (scale && (j = P - 1 - ((word0(rv) & Exp_mask)
1482: /* MUTANT (rep_op) */            if (scale && (j = P * 1 - ((word0(rv) & Exp_mask)
1482: /* MUTANT (rep_op) */            if (scale && (j = P % 1 - ((word0(rv) & Exp_mask)
1482: /* MUTANT (rep_const) */            if (scale && (j = P + 0 - ((word0(rv) & Exp_mask)
1482: /* MUTANT (rep_const) */            if (scale && (j = P + -1 - ((word0(rv) & Exp_mask)
1482: /* MUTANT (rep_const) */            if (scale && (j = P + ((1)+1) - ((word0(rv) & Exp_mask)
1483: /* MUTANT (rep_op) */                        >> Exp_shift)) <= 0) {
1483: /* MUTANT (rep_op) */                        >> Exp_shift)) < 0) {
1483: /* MUTANT (rep_op) */                        >> Exp_shift)) >= 0) {
1483: /* MUTANT (rep_op) */                        >> Exp_shift)) == 0) {
1483: /* MUTANT (rep_op) */                        >> Exp_shift)) != 0) {
1483: /* MUTANT (rep_const) */                        >> Exp_shift)) > 1) {
1483: /* MUTANT (rep_const) */                        >> Exp_shift)) > -1) {
1485: /* MUTANT (rep_op) */                if (j <= 32) {
1485: /* MUTANT (rep_op) */                if (j < 32) {
1485: /* MUTANT (rep_op) */                if (j > 32) {
1485: /* MUTANT (rep_op) */                if (j == 32) {
1485: /* MUTANT (rep_op) */                if (j != 32) {
1485: /* MUTANT (rep_const) */                if (j >= 0) {
1485: /* MUTANT (rep_const) */                if (j >= 1) {
1485: /* MUTANT (rep_const) */                if (j >= -1) {
1485: /* MUTANT (rep_const) */                if (j >= ((32)+1)) {
1485: /* MUTANT (rep_const) */                if (j >= ((32)-1)) {
1485: /* MUTANT (negate) */                if(! (j >= 32)) {
1486: /* MUTANT (del_stmt) */ /*                     set_word1(rv, 0); */ 
1486: /* MUTANT (rep_const) */                    set_word1(rv, 1);
1486: /* MUTANT (rep_const) */                    set_word1(rv, -1);
1487: /* MUTANT (del_stmt) */ /*                     set_word0(rv, word0(rv) & (0xffffffff << (j-32))); */ 
1487: /* MUTANT (rep_const) */                    set_word0(rv, word0(rv) & (1xffffffff << (j-32)));
1487: /* MUTANT (rep_const) */                    set_word0(rv, word0(rv) & (-1xffffffff << (j-32)));
1487: /* MUTANT (rep_const) */                    set_word0(rv, word0(rv) & (0xffffffff << (j-0)));
1487: /* MUTANT (rep_const) */                    set_word0(rv, word0(rv) & (0xffffffff << (j-1)));
1487: /* MUTANT (rep_const) */                    set_word0(rv, word0(rv) & (0xffffffff << (j--1)));
1487: /* MUTANT (rep_const) */                    set_word0(rv, word0(rv) & (0xffffffff << (j-((32)+1))));
1487: /* MUTANT (rep_const) */                    set_word0(rv, word0(rv) & (0xffffffff << (j-((32)-1))));
1488: /* MUTANT (negate) */                    if(! (!word0(rv)))
1489: /* MUTANT (rep_const) */                        set_word0(rv, 0);
1489: /* MUTANT (rep_const) */                        set_word0(rv, -1);
1489: /* MUTANT (rep_const) */                        set_word0(rv, ((1)+1));
1492: /* MUTANT (rep_const) */                    set_word1(rv, word1(rv) & (1xffffffff << j));
1492: /* MUTANT (rep_const) */                    set_word1(rv, word1(rv) & (-1xffffffff << j));
1495: /* MUTANT (rep_op) */            for(j = 0; e1 <= 1; j++, e1 >>= 1)
1495: /* MUTANT (rep_op) */            for(j = 0; e1 < 1; j++, e1 >>= 1)
1495: /* MUTANT (rep_op) */            for(j = 0; e1 >= 1; j++, e1 >>= 1)
1495: /* MUTANT (rep_op) */            for(j = 0; e1 == 1; j++, e1 >>= 1)
1495: /* MUTANT (rep_op) */            for(j = 0; e1 != 1; j++, e1 >>= 1)
1495: /* MUTANT (rep_op) */            for(j = 0; e1 > 1; j--, e1 >>= 1)
1495: /* MUTANT (rep_const) */            for(j = 1; e1 > 1; j++, e1 >>= 1)
1495: /* MUTANT (rep_const) */            for(j = -1; e1 > 1; j++, e1 >>= 1)
1495: /* MUTANT (rep_const) */            for(j = 0; e1 > 0; j++, e1 >>= 1)
1495: /* MUTANT (rep_const) */            for(j = 0; e1 > -1; j++, e1 >>= 1)
1495: /* MUTANT (rep_const) */            for(j = 0; e1 > ((1)+1); j++, e1 >>= 1)
1495: /* MUTANT (rep_const) */            for(j = 0; e1 > 1; j++, e1 >>= 0)
1495: /* MUTANT (rep_const) */            for(j = 0; e1 > 1; j++, e1 >>= -1)
1495: /* MUTANT (rep_const) */            for(j = 0; e1 > 1; j++, e1 >>= ((1)+1))
1496: /* MUTANT (rep_const) */                if (e1 & 0)
1496: /* MUTANT (rep_const) */                if (e1 & -1)
1496: /* MUTANT (rep_const) */                if (e1 & ((1)+1))
1496: /* MUTANT (negate) */                if(! (e1 & 1))
1497: /* MUTANT (rep_op) */                    rv += tinytens[j];
1497: /* MUTANT (rep_op) */                    rv -= tinytens[j];
1497: /* MUTANT (rep_op) */                    rv %= tinytens[j];
1499: /* MUTANT (del_stmt) */ /*             rv0 = rv; */ 
1500: /* MUTANT (del_stmt) */ /*             rv *= tinytens[j]; */ 
1500: /* MUTANT (rep_op) */            rv += tinytens[j];
1500: /* MUTANT (rep_op) */            rv -= tinytens[j];
1500: /* MUTANT (rep_op) */            rv %= tinytens[j];
1501: /* MUTANT (negate) */            if(! (!rv)) {
1502: /* MUTANT (del_stmt) */ /*                 rv = 2.*rv0; */ 
1503: /* MUTANT (del_stmt) */ /*                 rv *= tinytens[j]; */ 
1503: /* MUTANT (rep_op) */                rv += tinytens[j];
1503: /* MUTANT (rep_op) */                rv -= tinytens[j];
1503: /* MUTANT (rep_op) */                rv %= tinytens[j];
1505: /* MUTANT (negate) */                if(! (!rv)) {
1508: /* MUTANT (del_stmt) */ /*                     *err = JS_DTOA_ERANGE; */ 
1509: /* MUTANT (negate) */                    if(! (bd0))
1511: /* MUTANT (del_stmt) */ /*                     goto ret; */ 
1515: /* MUTANT (del_stmt) */ /*                 set_word1(rv, Tiny1); */ 
1529: /* MUTANT (negate) */    if(! (!bd0))
1533: /* MUTANT (del_stmt) */ /*         bd = Balloc(bd0->k); */ 
1534: /* MUTANT (negate) */        if(! (!bd))
1536: /* MUTANT (del_stmt) */ /*         Bcopy(bd, bd0); */ 
1537: /* MUTANT (del_stmt) */ /*         bb = d2b(rv, &bbe, &bbbits); */     /* rv = bb * 2^bbe */
1538: /* MUTANT (negate) */        if(! (!bb))
1540: /* MUTANT (del_stmt) */ /*         bs = i2b(1); */ 
1540: /* MUTANT (rep_const) */        bs = i2b(0);
1540: /* MUTANT (rep_const) */        bs = i2b(-1);
1540: /* MUTANT (rep_const) */        bs = i2b(((1)+1));
1541: /* MUTANT (negate) */        if(! (!bs))
1544: /* MUTANT (rep_op) */        if (e <= 0) {
1544: /* MUTANT (rep_op) */        if (e < 0) {
1544: /* MUTANT (rep_op) */        if (e > 0) {
1544: /* MUTANT (rep_op) */        if (e == 0) {
1544: /* MUTANT (rep_op) */        if (e != 0) {
1544: /* MUTANT (rep_const) */        if (e >= 1) {
1544: /* MUTANT (rep_const) */        if (e >= -1) {
1544: /* MUTANT (negate) */        if(! (e >= 0)) {
1545: /* MUTANT (del_stmt) */ /*             bb2 = bb5 = 0; */ 
1545: /* MUTANT (rep_const) */            bb2 = bb5 = 1;
1545: /* MUTANT (rep_const) */            bb2 = bb5 = -1;
1546: /* MUTANT (del_stmt) */ /*             bd2 = bd5 = e; */ 
1549: /* MUTANT (del_stmt) */ /*             bb2 = bb5 = -e; */ 
1550: /* MUTANT (del_stmt) */ /*             bd2 = bd5 = 0; */ 
1550: /* MUTANT (rep_const) */            bd2 = bd5 = 1;
1550: /* MUTANT (rep_const) */            bd2 = bd5 = -1;
1552: /* MUTANT (rep_op) */        if (bbe <= 0)
1552: /* MUTANT (rep_op) */        if (bbe < 0)
1552: /* MUTANT (rep_op) */        if (bbe > 0)
1552: /* MUTANT (rep_op) */        if (bbe == 0)
1552: /* MUTANT (rep_op) */        if (bbe != 0)
1552: /* MUTANT (rep_const) */        if (bbe >= 1)
1552: /* MUTANT (rep_const) */        if (bbe >= -1)
1552: /* MUTANT (negate) */        if(! (bbe >= 0))
1553: /* MUTANT (rep_op) */            bb2 -= bbe;
1553: /* MUTANT (rep_op) */            bb2 *= bbe;
1553: /* MUTANT (rep_op) */            bb2 %= bbe;
1555: /* MUTANT (rep_op) */            bd2 += bbe;
1555: /* MUTANT (rep_op) */            bd2 *= bbe;
1555: /* MUTANT (rep_op) */            bd2 %= bbe;
1556: /* MUTANT (del_stmt) */ /*         bs2 = bb2; */ 
1558: /* MUTANT (rep_op) */        j = P - 1 - bbbits;
1558: /* MUTANT (rep_op) */        j = P * 1 - bbbits;
1558: /* MUTANT (rep_op) */        j = P % 1 - bbbits;
1558: /* MUTANT (rep_const) */        j = P + 0 - bbbits;
1558: /* MUTANT (rep_const) */        j = P + -1 - bbbits;
1558: /* MUTANT (rep_const) */        j = P + ((1)+1) - bbbits;
1565: /* MUTANT (rep_op) */        i = j - bbbits - 1; /* logb(rv) */
1565: /* MUTANT (rep_op) */        i = j * bbbits - 1; /* logb(rv) */
1565: /* MUTANT (rep_op) */        i = j % bbbits - 1; /* logb(rv) */
1565: /* MUTANT (rep_const) */        i = j + bbbits - 0; /* logb(rv) */
1565: /* MUTANT (rep_const) */        i = j + bbbits - -1; /* logb(rv) */
1565: /* MUTANT (rep_const) */        i = j + bbbits - ((1)+1); /* logb(rv) */
1566: /* MUTANT (rep_op) */        if (i <= Emin)   /* denormal */
1566: /* MUTANT (rep_op) */        if (i > Emin)   /* denormal */
1566: /* MUTANT (rep_op) */        if (i >= Emin)   /* denormal */
1566: /* MUTANT (rep_op) */        if (i == Emin)   /* denormal */
1566: /* MUTANT (rep_op) */        if (i != Emin)   /* denormal */
1566: /* MUTANT (negate) */        if(! (i < Emin))   /* denormal */
1567: /* MUTANT (rep_op) */            j -= P - Emin;
1567: /* MUTANT (rep_op) */            j *= P - Emin;
1567: /* MUTANT (rep_op) */            j %= P - Emin;
1569: /* MUTANT (rep_op) */            j = P - 1 - bbbits;
1569: /* MUTANT (rep_op) */            j = P * 1 - bbbits;
1569: /* MUTANT (rep_op) */            j = P % 1 - bbbits;
1569: /* MUTANT (rep_const) */            j = P + 0 - bbbits;
1569: /* MUTANT (rep_const) */            j = P + -1 - bbbits;
1569: /* MUTANT (rep_const) */            j = P + ((1)+1) - bbbits;
1571: /* MUTANT (rep_op) */        bb2 -= j;
1571: /* MUTANT (rep_op) */        bb2 *= j;
1571: /* MUTANT (rep_op) */        bb2 %= j;
1572: /* MUTANT (del_stmt) */ /*         bd2 += j; */ 
1572: /* MUTANT (rep_op) */        bd2 -= j;
1572: /* MUTANT (rep_op) */        bd2 *= j;
1572: /* MUTANT (rep_op) */        bd2 %= j;
1574: /* MUTANT (rep_op) */        bd2 -= scale;
1574: /* MUTANT (rep_op) */        bd2 *= scale;
1574: /* MUTANT (rep_op) */        bd2 %= scale;
1576: /* MUTANT (rep_op) */        i = bb2 <= bd2 ? bb2 : bd2;
1576: /* MUTANT (rep_op) */        i = bb2 > bd2 ? bb2 : bd2;
1576: /* MUTANT (rep_op) */        i = bb2 >= bd2 ? bb2 : bd2;
1576: /* MUTANT (rep_op) */        i = bb2 == bd2 ? bb2 : bd2;
1576: /* MUTANT (rep_op) */        i = bb2 != bd2 ? bb2 : bd2;
1577: /* MUTANT (rep_op) */        if (i <= bs2)
1577: /* MUTANT (rep_op) */        if (i < bs2)
1577: /* MUTANT (rep_op) */        if (i >= bs2)
1577: /* MUTANT (rep_op) */        if (i == bs2)
1577: /* MUTANT (rep_op) */        if (i != bs2)
1577: /* MUTANT (negate) */        if(! (i > bs2))
1579: /* MUTANT (rep_op) */        if (i <= 0) {
1579: /* MUTANT (rep_op) */        if (i < 0) {
1579: /* MUTANT (rep_op) */        if (i >= 0) {
1579: /* MUTANT (rep_op) */        if (i == 0) {
1579: /* MUTANT (rep_op) */        if (i != 0) {
1579: /* MUTANT (rep_const) */        if (i > 1) {
1579: /* MUTANT (rep_const) */        if (i > -1) {
1579: /* MUTANT (negate) */        if(! (i > 0)) {
1580: /* MUTANT (del_stmt) */ /*             bb2 -= i; */ 
1580: /* MUTANT (rep_op) */            bb2 += i;
1580: /* MUTANT (rep_op) */            bb2 *= i;
1580: /* MUTANT (rep_op) */            bb2 %= i;
1581: /* MUTANT (del_stmt) */ /*             bd2 -= i; */ 
1581: /* MUTANT (rep_op) */            bd2 += i;
1581: /* MUTANT (rep_op) */            bd2 *= i;
1581: /* MUTANT (rep_op) */            bd2 %= i;
1582: /* MUTANT (del_stmt) */ /*             bs2 -= i; */ 
1582: /* MUTANT (rep_op) */            bs2 += i;
1582: /* MUTANT (rep_op) */            bs2 *= i;
1582: /* MUTANT (rep_op) */            bs2 %= i;
1584: /* MUTANT (rep_op) */        if (bb5 <= 0) {
1584: /* MUTANT (rep_op) */        if (bb5 < 0) {
1584: /* MUTANT (rep_op) */        if (bb5 >= 0) {
1584: /* MUTANT (rep_op) */        if (bb5 == 0) {
1584: /* MUTANT (rep_op) */        if (bb5 != 0) {
1584: /* MUTANT (rep_const) */        if (bb5 > 1) {
1584: /* MUTANT (rep_const) */        if (bb5 > -1) {
1584: /* MUTANT (negate) */        if(! (bb5 > 0)) {
1585: /* MUTANT (del_stmt) */ /*             bs = pow5mult(bs, bb5); */ 
1586: /* MUTANT (negate) */            if(! (!bs))
1588: /* MUTANT (del_stmt) */ /*             bb1 = mult(bs, bb); */ 
1589: /* MUTANT (negate) */            if(! (!bb1))
1591: /* MUTANT (del_stmt) */ /*             Bfree(bb); */ 
1592: /* MUTANT (del_stmt) */ /*             bb = bb1; */ 
1594: /* MUTANT (rep_op) */        if (bb2 <= 0) {
1594: /* MUTANT (rep_op) */        if (bb2 < 0) {
1594: /* MUTANT (rep_op) */        if (bb2 >= 0) {
1594: /* MUTANT (rep_op) */        if (bb2 == 0) {
1594: /* MUTANT (rep_op) */        if (bb2 != 0) {
1594: /* MUTANT (rep_const) */        if (bb2 > 1) {
1594: /* MUTANT (rep_const) */        if (bb2 > -1) {
1594: /* MUTANT (negate) */        if(! (bb2 > 0)) {
1595: /* MUTANT (del_stmt) */ /*             bb = lshift(bb, bb2); */ 
1595: /* MUTANT (negate) */            bb = lshif(!t(bb, bb2));
1596: /* MUTANT (negate) */            if(! (!bb))
1599: /* MUTANT (rep_op) */        if (bd5 <= 0) {
1599: /* MUTANT (rep_op) */        if (bd5 < 0) {
1599: /* MUTANT (rep_op) */        if (bd5 >= 0) {
1599: /* MUTANT (rep_op) */        if (bd5 == 0) {
1599: /* MUTANT (rep_op) */        if (bd5 != 0) {
1599: /* MUTANT (rep_const) */        if (bd5 > 1) {
1599: /* MUTANT (rep_const) */        if (bd5 > -1) {
1599: /* MUTANT (negate) */        if(! (bd5 > 0)) {
1600: /* MUTANT (del_stmt) */ /*             bd = pow5mult(bd, bd5); */ 
1601: /* MUTANT (negate) */            if(! (!bd))
1604: /* MUTANT (rep_op) */        if (bd2 <= 0) {
1604: /* MUTANT (rep_op) */        if (bd2 < 0) {
1604: /* MUTANT (rep_op) */        if (bd2 >= 0) {
1604: /* MUTANT (rep_op) */        if (bd2 == 0) {
1604: /* MUTANT (rep_op) */        if (bd2 != 0) {
1604: /* MUTANT (rep_const) */        if (bd2 > 1) {
1604: /* MUTANT (rep_const) */        if (bd2 > -1) {
1604: /* MUTANT (negate) */        if(! (bd2 > 0)) {
1605: /* MUTANT (del_stmt) */ /*             bd = lshift(bd, bd2); */ 
1605: /* MUTANT (negate) */            bd = lshif(!t(bd, bd2));
1606: /* MUTANT (negate) */            if(! (!bd))
1609: /* MUTANT (rep_op) */        if (bs2 <= 0) {
1609: /* MUTANT (rep_op) */        if (bs2 < 0) {
1609: /* MUTANT (rep_op) */        if (bs2 >= 0) {
1609: /* MUTANT (rep_op) */        if (bs2 == 0) {
1609: /* MUTANT (rep_op) */        if (bs2 != 0) {
1609: /* MUTANT (rep_const) */        if (bs2 > 1) {
1609: /* MUTANT (rep_const) */        if (bs2 > -1) {
1609: /* MUTANT (negate) */        if(! (bs2 > 0)) {
1610: /* MUTANT (del_stmt) */ /*             bs = lshift(bs, bs2); */ 
1610: /* MUTANT (negate) */            bs = lshif(!t(bs, bs2));
1611: /* MUTANT (negate) */            if(! (!bs))
1614: /* MUTANT (negate) */        delta = dif(!f(bb, bd));
1615: /* MUTANT (negate) */        if(! (!delta))
1617: /* MUTANT (del_stmt) */ /*         dsign = delta->sign; */ 
1618: /* MUTANT (del_stmt) */ /*         delta->sign = 0; */ 
1618: /* MUTANT (rep_const) */        delta->sign = 1;
1618: /* MUTANT (rep_const) */        delta->sign = -1;
1619: /* MUTANT (del_stmt) */ /*         i = cmp(delta, bs); */ 
1620: /* MUTANT (rep_op) */        if (i <= 0) {
1620: /* MUTANT (rep_op) */        if (i > 0) {
1620: /* MUTANT (rep_op) */        if (i >= 0) {
1620: /* MUTANT (rep_op) */        if (i == 0) {
1620: /* MUTANT (rep_op) */        if (i != 0) {
1620: /* MUTANT (rep_const) */        if (i < 1) {
1620: /* MUTANT (rep_const) */        if (i < -1) {
1620: /* MUTANT (negate) */        if(! (i < 0)) {
1624: /* MUTANT (rep_op) */            if (dsign && word1(rv) || word0(rv) & Bndry_mask
1624: /* MUTANT (rep_op) */            if (dsign || word1(rv) && word0(rv) & Bndry_mask
1626: /* MUTANT (rep_op) */             && (word0(rv) & Exp_mask) <= Exp_msk1 + P*Exp_msk1
1626: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) < Exp_msk1 + P*Exp_msk1
1626: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) > Exp_msk1 + P*Exp_msk1
1626: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) >= Exp_msk1 + P*Exp_msk1
1626: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) == Exp_msk1 + P*Exp_msk1
1626: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) != Exp_msk1 + P*Exp_msk1
1626: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) <= Exp_msk1 - P*Exp_msk1
1626: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) <= Exp_msk1 * P*Exp_msk1
1626: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) <= Exp_msk1 % P*Exp_msk1
1628: /* MUTANT (rep_op) */             && (word0(rv) & Exp_mask) <= Exp_msk1
1628: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) < Exp_msk1
1628: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) > Exp_msk1
1628: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) >= Exp_msk1
1628: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) == Exp_msk1
1628: /* MUTANT (rep_op) */             || (word0(rv) & Exp_mask) != Exp_msk1
1632: /* MUTANT (rep_op) */                if (!delta->x[0] || delta->wds == 1)
1632: /* MUTANT (rep_op) */                if (!delta->x[0] && delta->wds != 1)
1632: /* MUTANT (rep_const) */                if (!delta->x[1] && delta->wds == 1)
1632: /* MUTANT (rep_const) */                if (!delta->x[-1] && delta->wds == 1)
1632: /* MUTANT (rep_const) */                if (!delta->x[0] && delta->wds == 0)
1632: /* MUTANT (rep_const) */                if (!delta->x[0] && delta->wds == -1)
1632: /* MUTANT (rep_const) */                if (!delta->x[0] && delta->wds == ((1)+1))
1632: /* MUTANT (negate) */                if(! (!delta->x[0] && delta->wds == 1))
1633: /* MUTANT (rep_const) */                    dsign = 0;
1633: /* MUTANT (rep_const) */                    dsign = 1;
1633: /* MUTANT (rep_const) */                    dsign = -1;
1633: /* MUTANT (rep_const) */                    dsign = ((2)+1);
1633: /* MUTANT (rep_const) */                    dsign = ((2)-1);
1637: /* MUTANT (negate) */            delta = lshif(!t(delta,Log2P));
1638: /* MUTANT (negate) */            if(! (!delta))
1640: /* MUTANT (rep_op) */            if (cmp(delta, bs) <= 0)
1640: /* MUTANT (rep_op) */            if (cmp(delta, bs) < 0)
1640: /* MUTANT (rep_op) */            if (cmp(delta, bs) >= 0)
1640: /* MUTANT (rep_op) */            if (cmp(delta, bs) == 0)
1640: /* MUTANT (rep_op) */            if (cmp(delta, bs) != 0)
1640: /* MUTANT (rep_const) */            if (cmp(delta, bs) > 1)
1640: /* MUTANT (rep_const) */            if (cmp(delta, bs) > -1)
1640: /* MUTANT (negate) */            if(! (cmp(delta, bs) > 0))
1642: /* MUTANT (del_stmt) */ /*             break; */ 
1644: /* MUTANT (rep_op) */        if (i != 0) {
1644: /* MUTANT (rep_const) */        if (i == 1) {
1644: /* MUTANT (rep_const) */        if (i == -1) {
1644: /* MUTANT (negate) */        if(! (i == 0)) {
1646: /* MUTANT (negate) */            if(! (dsign)) {
1647: /* MUTANT (rep_op) */                if ((word0(rv) & Bndry_mask1) != Bndry_mask1
1648: /* MUTANT (rep_op) */                    ||  word1(rv) == 0xffffffff) {
1648: /* MUTANT (rep_op) */                    &&  word1(rv) != 0xffffffff) {
1648: /* MUTANT (rep_const) */                    &&  word1(rv) == 1xffffffff) {
1648: /* MUTANT (rep_const) */                    &&  word1(rv) == -1xffffffff) {
1650: /* MUTANT (del_stmt) */ /*                     set_word0(rv, (word0(rv) & Exp_mask) + Exp_msk1); */ 
1650: /* MUTANT (rep_op) */                    set_word0(rv, (word0(rv) & Exp_mask) - Exp_msk1);
1650: /* MUTANT (rep_op) */                    set_word0(rv, (word0(rv) & Exp_mask) * Exp_msk1);
1650: /* MUTANT (rep_op) */                    set_word0(rv, (word0(rv) & Exp_mask) % Exp_msk1);
1651: /* MUTANT (del_stmt) */ /*                     set_word1(rv, 0); */ 
1651: /* MUTANT (rep_const) */                    set_word1(rv, 1);
1651: /* MUTANT (rep_const) */                    set_word1(rv, -1);
1653: /* MUTANT (rep_const) */                    dsign = 1;
1653: /* MUTANT (rep_const) */                    dsign = -1;
1658: /* MUTANT (rep_op) */            else if (!(word0(rv) & Bndry_mask) || !word1(rv)) {
1658: /* MUTANT (negate) */            else if(! (!(word0(rv) & Bndry_mask) && !word1(rv))) {
1660: /* MUTANT (rep_const) */                dsign = 0;
1660: /* MUTANT (rep_const) */                dsign = 1;
1660: /* MUTANT (rep_const) */                dsign = -1;
1660: /* MUTANT (rep_const) */                dsign = ((2)+1);
1660: /* MUTANT (rep_const) */                dsign = ((2)-1);
1666: /* MUTANT (rep_op) */                if (L < Exp_msk1)
1666: /* MUTANT (rep_op) */                if (L > Exp_msk1)
1666: /* MUTANT (rep_op) */                if (L >= Exp_msk1)
1666: /* MUTANT (rep_op) */                if (L == Exp_msk1)
1666: /* MUTANT (rep_op) */                if (L != Exp_msk1)
1666: /* MUTANT (negate) */                if(! (L <= Exp_msk1))
1668: /* MUTANT (del_stmt) */ /*                 L -= Exp_msk1; */ 
1668: /* MUTANT (rep_op) */                L += Exp_msk1;
1668: /* MUTANT (rep_op) */                L *= Exp_msk1;
1668: /* MUTANT (rep_op) */                L %= Exp_msk1;
1672: /* MUTANT (rep_op) */                set_word0(rv, L & Bndry_mask1);
1673: /* MUTANT (del_stmt) */ /*                 set_word1(rv, 0xffffffff); */ 
1673: /* MUTANT (rep_const) */                set_word1(rv, 1xffffffff);
1673: /* MUTANT (rep_const) */                set_word1(rv, -1xffffffff);
1674: /* MUTANT (del_stmt) */ /*                 break; */ 
1677: /* MUTANT (negate) */            if(! (!(word1(rv) & LSB)))
1680: /* MUTANT (negate) */            if(! (dsign))
1681: /* MUTANT (rep_op) */                rv -= ulp(rv);
1681: /* MUTANT (rep_op) */                rv *= ulp(rv);
1681: /* MUTANT (rep_op) */                rv %= ulp(rv);
1684: /* MUTANT (del_stmt) */ /*                 rv -= ulp(rv); */ 
1684: /* MUTANT (rep_op) */                rv += ulp(rv);
1684: /* MUTANT (rep_op) */                rv *= ulp(rv);
1684: /* MUTANT (rep_op) */                rv %= ulp(rv);
1686: /* MUTANT (negate) */                if(! (!rv))
1691: /* MUTANT (rep_const) */            dsign = 0 - dsign;
1691: /* MUTANT (rep_const) */            dsign = -1 - dsign;
1691: /* MUTANT (rep_const) */            dsign = ((1)+1) - dsign;
1696: /* MUTANT (rep_op) */        if ((aadj = ratio(delta, bs)) < 2.) {
1696: /* MUTANT (rep_op) */        if ((aadj = ratio(delta, bs)) > 2.) {
1696: /* MUTANT (rep_op) */        if ((aadj = ratio(delta, bs)) >= 2.) {
1696: /* MUTANT (rep_op) */        if ((aadj = ratio(delta, bs)) == 2.) {
1696: /* MUTANT (rep_op) */        if ((aadj = ratio(delta, bs)) != 2.) {
1696: /* MUTANT (negate) */        if(! ((aadj = ratio(delta, bs)) <= 2.)) {
1697: /* MUTANT (negate) */            if(! (dsign))
1699: /* MUTANT (rep_op) */            else if (word1(rv) && word0(rv) & Bndry_mask) {
1699: /* MUTANT (negate) */            else if(! (word1(rv) || word0(rv) & Bndry_mask)) {
1701: /* MUTANT (rep_op) */                if (word1(rv) != Tiny1 && !word0(rv))
1701: /* MUTANT (rep_op) */                if (word1(rv) == Tiny1 || !word0(rv))
1701: /* MUTANT (negate) */                if(! (word1(rv) == Tiny1 && !word0(rv)))
1705: /* MUTANT (del_stmt) */ /*                 aadj1 = -1.; */ 
1711: /* MUTANT (rep_op) */                if (aadj <= 2./FLT_RADIX)
1711: /* MUTANT (rep_op) */                if (aadj > 2./FLT_RADIX)
1711: /* MUTANT (rep_op) */                if (aadj >= 2./FLT_RADIX)
1711: /* MUTANT (rep_op) */                if (aadj == 2./FLT_RADIX)
1711: /* MUTANT (rep_op) */                if (aadj != 2./FLT_RADIX)
1711: /* MUTANT (negate) */                if(! (aadj < 2./FLT_RADIX))
1714: /* MUTANT (rep_op) */                    aadj += 0.5;
1714: /* MUTANT (rep_op) */                    aadj -= 0.5;
1714: /* MUTANT (rep_op) */                    aadj %= 0.5;
1714: /* MUTANT (rep_const) */                    aadj *= 0.0;
1714: /* MUTANT (rep_const) */                    aadj *= 0.1;
1714: /* MUTANT (rep_const) */                    aadj *= 0.-1;
1714: /* MUTANT (rep_const) */                    aadj *= 0.((5)+1);
1714: /* MUTANT (rep_const) */                    aadj *= 0.((5)-1);
1715: /* MUTANT (del_stmt) */ /*                 aadj1 = -aadj; */ 
1719: /* MUTANT (del_stmt) */ /*             aadj *= 0.5; */ 
1719: /* MUTANT (rep_op) */            aadj += 0.5;
1719: /* MUTANT (rep_op) */            aadj -= 0.5;
1719: /* MUTANT (rep_op) */            aadj %= 0.5;
1719: /* MUTANT (rep_const) */            aadj *= 0.0;
1719: /* MUTANT (rep_const) */            aadj *= 0.1;
1719: /* MUTANT (rep_const) */            aadj *= 0.-1;
1719: /* MUTANT (rep_const) */            aadj *= 0.((5)+1);
1719: /* MUTANT (rep_const) */            aadj *= 0.((5)-1);
1720: /* MUTANT (del_stmt) */ /*             aadj1 = dsign ? aadj : -aadj; */ 
1723: /* MUTANT (rep_const) */            case 0: /* towards +infinity */
1723: /* MUTANT (rep_const) */            case 1: /* towards +infinity */
1723: /* MUTANT (rep_const) */            case -1: /* towards +infinity */
1723: /* MUTANT (rep_const) */            case ((2)+1): /* towards +infinity */
1723: /* MUTANT (rep_const) */            case ((2)-1): /* towards +infinity */
1724: /* MUTANT (rep_op) */                aadj1 += 0.5;
1724: /* MUTANT (rep_op) */                aadj1 *= 0.5;
1724: /* MUTANT (rep_op) */                aadj1 %= 0.5;
1724: /* MUTANT (rep_const) */                aadj1 -= 0.0;
1724: /* MUTANT (rep_const) */                aadj1 -= 0.1;
1724: /* MUTANT (rep_const) */                aadj1 -= 0.-1;
1724: /* MUTANT (rep_const) */                aadj1 -= 0.((5)+1);
1724: /* MUTANT (rep_const) */                aadj1 -= 0.((5)-1);
1725: /* MUTANT (del_stmt) */ /*                 break; */ 
1726: /* MUTANT (rep_const) */            case 1: /* towards 0 */
1726: /* MUTANT (rep_const) */            case -1: /* towards 0 */
1727: /* MUTANT (rep_const) */            case 0: /* towards -infinity */
1727: /* MUTANT (rep_const) */            case 1: /* towards -infinity */
1727: /* MUTANT (rep_const) */            case -1: /* towards -infinity */
1727: /* MUTANT (rep_const) */            case ((3)+1): /* towards -infinity */
1727: /* MUTANT (rep_const) */            case ((3)-1): /* towards -infinity */
1728: /* MUTANT (rep_op) */                aadj1 -= 0.5;
1728: /* MUTANT (rep_op) */                aadj1 *= 0.5;
1728: /* MUTANT (rep_op) */                aadj1 %= 0.5;
1728: /* MUTANT (rep_const) */                aadj1 += 0.0;
1728: /* MUTANT (rep_const) */                aadj1 += 0.1;
1728: /* MUTANT (rep_const) */                aadj1 += 0.-1;
1728: /* MUTANT (rep_const) */                aadj1 += 0.((5)+1);
1728: /* MUTANT (rep_const) */                aadj1 += 0.((5)-1);
1731: /* MUTANT (rep_op) */            if (FLT_ROUNDS != 0)
1731: /* MUTANT (rep_const) */            if (FLT_ROUNDS == 1)
1731: /* MUTANT (rep_const) */            if (FLT_ROUNDS == -1)
1731: /* MUTANT (negate) */            if(! (FLT_ROUNDS == 0))
1732: /* MUTANT (rep_op) */                aadj1 -= 0.5;
1732: /* MUTANT (rep_op) */                aadj1 *= 0.5;
1732: /* MUTANT (rep_op) */                aadj1 %= 0.5;
1732: /* MUTANT (rep_const) */                aadj1 += 0.0;
1732: /* MUTANT (rep_const) */                aadj1 += 0.1;
1732: /* MUTANT (rep_const) */                aadj1 += 0.-1;
1732: /* MUTANT (rep_const) */                aadj1 += 0.((5)+1);
1732: /* MUTANT (rep_const) */                aadj1 += 0.((5)-1);
1739: /* MUTANT (rep_op) */        if (y != Exp_msk1*(DBL_MAX_EXP+Bias-1)) {
1739: /* MUTANT (rep_op) */        if (y == Exp_msk1*(DBL_MAX_EXP-Bias-1)) {
1739: /* MUTANT (rep_op) */        if (y == Exp_msk1*(DBL_MAX_EXP*Bias-1)) {
1739: /* MUTANT (rep_op) */        if (y == Exp_msk1*(DBL_MAX_EXP%Bias-1)) {
1739: /* MUTANT (rep_const) */        if (y == Exp_msk1*(DBL_MAX_EXP+Bias-0)) {
1739: /* MUTANT (rep_const) */        if (y == Exp_msk1*(DBL_MAX_EXP+Bias--1)) {
1739: /* MUTANT (rep_const) */        if (y == Exp_msk1*(DBL_MAX_EXP+Bias-((1)+1))) {
1739: /* MUTANT (negate) */        if(! (y == Exp_msk1*(DBL_MAX_EXP+Bias-1))) {
1740: /* MUTANT (del_stmt) */ /*             rv0 = rv; */ 
1741: /* MUTANT (del_stmt) */ /*             set_word0(rv, word0(rv) - P*Exp_msk1); */ 
1742: /* MUTANT (del_stmt) */ /*             adj = aadj1 * ulp(rv); */ 
1743: /* MUTANT (del_stmt) */ /*             rv += adj; */ 
1743: /* MUTANT (rep_op) */            rv -= adj;
1743: /* MUTANT (rep_op) */            rv *= adj;
1743: /* MUTANT (rep_op) */            rv %= adj;
1744: /* MUTANT (rep_op) */            if ((word0(rv) & Exp_mask) <=
1744: /* MUTANT (rep_op) */            if ((word0(rv) & Exp_mask) <
1744: /* MUTANT (rep_op) */            if ((word0(rv) & Exp_mask) >
1744: /* MUTANT (rep_op) */            if ((word0(rv) & Exp_mask) ==
1744: /* MUTANT (rep_op) */            if ((word0(rv) & Exp_mask) !=
1745: /* MUTANT (rep_op) */                Exp_msk1*(DBL_MAX_EXP-Bias-P)) {
1745: /* MUTANT (rep_op) */                Exp_msk1*(DBL_MAX_EXP*Bias-P)) {
1745: /* MUTANT (rep_op) */                Exp_msk1*(DBL_MAX_EXP%Bias-P)) {
1746: /* MUTANT (rep_op) */                if (word0(rv0) != Big0 && word1(rv0) == Big1)
1746: /* MUTANT (rep_op) */                if (word0(rv0) == Big0 || word1(rv0) == Big1)
1746: /* MUTANT (rep_op) */                if (word0(rv0) == Big0 && word1(rv0) != Big1)
1746: /* MUTANT (negate) */                if(! (word0(rv0) == Big0 && word1(rv0) == Big1))
1748: /* MUTANT (del_stmt) */ /*                 set_word0(rv, Big0); */ 
1749: /* MUTANT (del_stmt) */ /*                 set_word1(rv, Big1); */ 
1750: /* MUTANT (del_stmt) */ /*                 goto cont; */ 
1753: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) - P*Exp_msk1);
1753: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) * P*Exp_msk1);
1753: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) % P*Exp_msk1);
1757: /* MUTANT (rep_op) */            if ((word0(rv) & Exp_mask) < P*Exp_msk1) {
1757: /* MUTANT (rep_op) */            if ((word0(rv) & Exp_mask) > P*Exp_msk1) {
1757: /* MUTANT (rep_op) */            if ((word0(rv) & Exp_mask) >= P*Exp_msk1) {
1757: /* MUTANT (rep_op) */            if ((word0(rv) & Exp_mask) == P*Exp_msk1) {
1757: /* MUTANT (rep_op) */            if ((word0(rv) & Exp_mask) != P*Exp_msk1) {
1757: /* MUTANT (negate) */            if(! ((word0(rv) & Exp_mask) <= P*Exp_msk1)) {
1758: /* MUTANT (del_stmt) */ /*                 rv0 = rv; */ 
1759: /* MUTANT (del_stmt) */ /*                 set_word0(rv, word0(rv) + P*Exp_msk1); */ 
1759: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) - P*Exp_msk1);
1759: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) * P*Exp_msk1);
1759: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) % P*Exp_msk1);
1760: /* MUTANT (del_stmt) */ /*                 adj = aadj1 * ulp(rv); */ 
1761: /* MUTANT (del_stmt) */ /*                 rv += adj; */ 
1761: /* MUTANT (rep_op) */                rv -= adj;
1761: /* MUTANT (rep_op) */                rv *= adj;
1761: /* MUTANT (rep_op) */                rv %= adj;
1762: /* MUTANT (rep_op) */                    if ((word0(rv) & Exp_mask) < P*Exp_msk1)
1762: /* MUTANT (rep_op) */                    if ((word0(rv) & Exp_mask) > P*Exp_msk1)
1762: /* MUTANT (rep_op) */                    if ((word0(rv) & Exp_mask) >= P*Exp_msk1)
1762: /* MUTANT (rep_op) */                    if ((word0(rv) & Exp_mask) == P*Exp_msk1)
1762: /* MUTANT (rep_op) */                    if ((word0(rv) & Exp_mask) != P*Exp_msk1)
1762: /* MUTANT (negate) */                    if(! ((word0(rv) & Exp_mask) <= P*Exp_msk1))
1764: /* MUTANT (rep_op) */                            if (word0(rv0) != Tiny0
1765: /* MUTANT (rep_op) */                                || word1(rv0) == Tiny1)
1765: /* MUTANT (rep_op) */                                && word1(rv0) != Tiny1)
1767: /* MUTANT (del_stmt) */ /*                             set_word0(rv, Tiny0); */ 
1768: /* MUTANT (del_stmt) */ /*                             set_word1(rv, Tiny1); */ 
1769: /* MUTANT (del_stmt) */ /*                             goto cont; */ 
1775: /* MUTANT (del_stmt) */ /*                 adj = aadj1 * ulp(rv); */ 
1776: /* MUTANT (del_stmt) */ /*                 rv += adj; */ 
1776: /* MUTANT (rep_op) */                rv -= adj;
1776: /* MUTANT (rep_op) */                rv *= adj;
1776: /* MUTANT (rep_op) */                rv %= adj;
1787: /* MUTANT (rep_op) */            if (y < P*Exp_msk1 && aadj > 1.)
1787: /* MUTANT (rep_op) */            if (y > P*Exp_msk1 && aadj > 1.)
1787: /* MUTANT (rep_op) */            if (y >= P*Exp_msk1 && aadj > 1.)
1787: /* MUTANT (rep_op) */            if (y == P*Exp_msk1 && aadj > 1.)
1787: /* MUTANT (rep_op) */            if (y != P*Exp_msk1 && aadj > 1.)
1787: /* MUTANT (rep_op) */            if (y <= P*Exp_msk1 || aadj > 1.)
1787: /* MUTANT (rep_op) */            if (y <= P*Exp_msk1 && aadj <= 1.)
1787: /* MUTANT (rep_op) */            if (y <= P*Exp_msk1 && aadj < 1.)
1787: /* MUTANT (rep_op) */            if (y <= P*Exp_msk1 && aadj >= 1.)
1787: /* MUTANT (rep_op) */            if (y <= P*Exp_msk1 && aadj == 1.)
1787: /* MUTANT (rep_op) */            if (y <= P*Exp_msk1 && aadj != 1.)
1787: /* MUTANT (negate) */            if(! (y <= P*Exp_msk1 && aadj > 1.))
1789: /* MUTANT (rep_op) */            if (y < (P-1)*Exp_msk1 && aadj > 1.)
1789: /* MUTANT (rep_op) */            if (y > (P-1)*Exp_msk1 && aadj > 1.)
1789: /* MUTANT (rep_op) */            if (y >= (P-1)*Exp_msk1 && aadj > 1.)
1789: /* MUTANT (rep_op) */            if (y == (P-1)*Exp_msk1 && aadj > 1.)
1789: /* MUTANT (rep_op) */            if (y != (P-1)*Exp_msk1 && aadj > 1.)
1789: /* MUTANT (rep_op) */            if (y <= (P-1)*Exp_msk1 || aadj > 1.)
1789: /* MUTANT (rep_op) */            if (y <= (P-1)*Exp_msk1 && aadj <= 1.)
1789: /* MUTANT (rep_op) */            if (y <= (P-1)*Exp_msk1 && aadj < 1.)
1789: /* MUTANT (rep_op) */            if (y <= (P-1)*Exp_msk1 && aadj >= 1.)
1789: /* MUTANT (rep_op) */            if (y <= (P-1)*Exp_msk1 && aadj == 1.)
1789: /* MUTANT (rep_op) */            if (y <= (P-1)*Exp_msk1 && aadj != 1.)
1789: /* MUTANT (rep_const) */            if (y <= (P-0)*Exp_msk1 && aadj > 1.)
1789: /* MUTANT (rep_const) */            if (y <= (P--1)*Exp_msk1 && aadj > 1.)
1789: /* MUTANT (rep_const) */            if (y <= (P-((1)+1))*Exp_msk1 && aadj > 1.)
1789: /* MUTANT (negate) */            if(! (y <= (P-1)*Exp_msk1 && aadj > 1.))
1792: /* MUTANT (del_stmt) */ /*                 aadj1 = (double)(int32)(aadj + 0.5); */ 
1792: /* MUTANT (rep_op) */                aadj1 = (double)(int32)(aadj - 0.5);
1792: /* MUTANT (rep_op) */                aadj1 = (double)(int32)(aadj * 0.5);
1792: /* MUTANT (rep_op) */                aadj1 = (double)(int32)(aadj % 0.5);
1792: /* MUTANT (rep_const) */                aadj1 = (double)(int32)(aadj + 0.0);
1792: /* MUTANT (rep_const) */                aadj1 = (double)(int32)(aadj + 0.1);
1792: /* MUTANT (rep_const) */                aadj1 = (double)(int32)(aadj + 0.-1);
1792: /* MUTANT (rep_const) */                aadj1 = (double)(int32)(aadj + 0.((5)+1));
1792: /* MUTANT (rep_const) */                aadj1 = (double)(int32)(aadj + 0.((5)-1));
1793: /* MUTANT (negate) */                if(! (!dsign))
1797: /* MUTANT (rep_op) */            if (scale || y <= P*Exp_msk1)
1797: /* MUTANT (rep_op) */            if (scale && y < P*Exp_msk1)
1797: /* MUTANT (rep_op) */            if (scale && y > P*Exp_msk1)
1797: /* MUTANT (rep_op) */            if (scale && y >= P*Exp_msk1)
1797: /* MUTANT (rep_op) */            if (scale && y == P*Exp_msk1)
1797: /* MUTANT (rep_op) */            if (scale && y != P*Exp_msk1)
1797: /* MUTANT (negate) */            if(! (scale && y <= P*Exp_msk1))
1798: /* MUTANT (rep_op) */                set_word0(aadj1, word0(aadj1) - (P+1)*Exp_msk1 - y);
1798: /* MUTANT (rep_op) */                set_word0(aadj1, word0(aadj1) * (P+1)*Exp_msk1 - y);
1798: /* MUTANT (rep_op) */                set_word0(aadj1, word0(aadj1) % (P+1)*Exp_msk1 - y);
1798: /* MUTANT (rep_op) */                set_word0(aadj1, word0(aadj1) + (P-1)*Exp_msk1 - y);
1798: /* MUTANT (rep_op) */                set_word0(aadj1, word0(aadj1) + (P*1)*Exp_msk1 - y);
1798: /* MUTANT (rep_op) */                set_word0(aadj1, word0(aadj1) + (P%1)*Exp_msk1 - y);
1798: /* MUTANT (rep_const) */                set_word0(aadj1, word0(aadj1) + (P+0)*Exp_msk1 - y);
1798: /* MUTANT (rep_const) */                set_word0(aadj1, word0(aadj1) + (P+-1)*Exp_msk1 - y);
1798: /* MUTANT (rep_const) */                set_word0(aadj1, word0(aadj1) + (P+((1)+1))*Exp_msk1 - y);
1801: /* MUTANT (del_stmt) */ /*             rv += adj; */ 
1801: /* MUTANT (rep_op) */            rv -= adj;
1801: /* MUTANT (rep_op) */            rv *= adj;
1801: /* MUTANT (rep_op) */            rv %= adj;
1806: /* MUTANT (negate) */        if(! (!scale))
1808: /* MUTANT (rep_op) */        if (y != z) {
1808: /* MUTANT (negate) */        if(! (y == z)) {
1810: /* MUTANT (del_stmt) */ /*             L = (Long)aadj; */ 
1811: /* MUTANT (del_stmt) */ /*             aadj -= L; */ 
1811: /* MUTANT (rep_op) */            aadj += L;
1811: /* MUTANT (rep_op) */            aadj *= L;
1811: /* MUTANT (rep_op) */            aadj %= L;
1813: /* MUTANT (rep_op) */            if (dsign && word1(rv) || word0(rv) & Bndry_mask) {
1813: /* MUTANT (rep_op) */            if (dsign || word1(rv) && word0(rv) & Bndry_mask) {
1813: /* MUTANT (negate) */            if(! (dsign || word1(rv) || word0(rv) & Bndry_mask)) {
1814: /* MUTANT (rep_op) */                if (aadj <= .4999999 || aadj > .5000001)
1814: /* MUTANT (rep_op) */                if (aadj > .4999999 || aadj > .5000001)
1814: /* MUTANT (rep_op) */                if (aadj >= .4999999 || aadj > .5000001)
1814: /* MUTANT (rep_op) */                if (aadj == .4999999 || aadj > .5000001)
1814: /* MUTANT (rep_op) */                if (aadj != .4999999 || aadj > .5000001)
1814: /* MUTANT (rep_op) */                if (aadj < .4999999 && aadj > .5000001)
1814: /* MUTANT (rep_op) */                if (aadj < .4999999 || aadj <= .5000001)
1814: /* MUTANT (rep_op) */                if (aadj < .4999999 || aadj < .5000001)
1814: /* MUTANT (rep_op) */                if (aadj < .4999999 || aadj >= .5000001)
1814: /* MUTANT (rep_op) */                if (aadj < .4999999 || aadj == .5000001)
1814: /* MUTANT (rep_op) */                if (aadj < .4999999 || aadj != .5000001)
1814: /* MUTANT (rep_const) */                if (aadj < .0 || aadj > .5000001)
1814: /* MUTANT (rep_const) */                if (aadj < .1 || aadj > .5000001)
1814: /* MUTANT (rep_const) */                if (aadj < .-1 || aadj > .5000001)
1814: /* MUTANT (rep_const) */                if (aadj < .((4999999)+1) || aadj > .5000001)
1814: /* MUTANT (rep_const) */                if (aadj < .((4999999)-1) || aadj > .5000001)
1814: /* MUTANT (rep_const) */                if (aadj < .4999999 || aadj > .0)
1814: /* MUTANT (rep_const) */                if (aadj < .4999999 || aadj > .1)
1814: /* MUTANT (rep_const) */                if (aadj < .4999999 || aadj > .-1)
1814: /* MUTANT (rep_const) */                if (aadj < .4999999 || aadj > .((5000001)+1))
1814: /* MUTANT (rep_const) */                if (aadj < .4999999 || aadj > .((5000001)-1))
1814: /* MUTANT (negate) */                if(! (aadj < .4999999 || aadj > .5000001))
1817: /* MUTANT (rep_op) */            else if (aadj <= .4999999/FLT_RADIX)
1817: /* MUTANT (rep_op) */            else if (aadj > .4999999/FLT_RADIX)
1817: /* MUTANT (rep_op) */            else if (aadj >= .4999999/FLT_RADIX)
1817: /* MUTANT (rep_op) */            else if (aadj == .4999999/FLT_RADIX)
1817: /* MUTANT (rep_op) */            else if (aadj != .4999999/FLT_RADIX)
1817: /* MUTANT (rep_const) */            else if (aadj < .0/FLT_RADIX)
1817: /* MUTANT (rep_const) */            else if (aadj < .1/FLT_RADIX)
1817: /* MUTANT (rep_const) */            else if (aadj < .-1/FLT_RADIX)
1817: /* MUTANT (rep_const) */            else if (aadj < .((4999999)+1)/FLT_RADIX)
1817: /* MUTANT (rep_const) */            else if (aadj < .((4999999)-1)/FLT_RADIX)
1817: /* MUTANT (negate) */            else if(! (aadj < .4999999/FLT_RADIX))
1822: /* MUTANT (del_stmt) */ /*         Bfree(bd); */ 
1823: /* MUTANT (del_stmt) */ /*         Bfree(bs); */ 
1824: /* MUTANT (del_stmt) */ /*         Bfree(delta); */ 
1825: /* MUTANT (del_stmt) */ /*         bb = bd = bs = delta = NULL; */ 
1828: /* MUTANT (negate) */    if(! (scale)) {
1829: /* MUTANT (del_stmt) */ /*         set_word0(rv0, Exp_1 - P*Exp_msk1); */ 
1830: /* MUTANT (del_stmt) */ /*         set_word1(rv0, 0); */ 
1830: /* MUTANT (rep_const) */        set_word1(rv0, 1);
1830: /* MUTANT (rep_const) */        set_word1(rv0, -1);
1831: /* MUTANT (rep_op) */        if ((word0(rv) & Exp_mask) < P*Exp_msk1
1831: /* MUTANT (rep_op) */        if ((word0(rv) & Exp_mask) > P*Exp_msk1
1831: /* MUTANT (rep_op) */        if ((word0(rv) & Exp_mask) >= P*Exp_msk1
1831: /* MUTANT (rep_op) */        if ((word0(rv) & Exp_mask) == P*Exp_msk1
1831: /* MUTANT (rep_op) */        if ((word0(rv) & Exp_mask) != P*Exp_msk1
1832: /* MUTANT (rep_op) */              || word1(rv) & 1
1832: /* MUTANT (rep_const) */              && word1(rv) & 0
1832: /* MUTANT (rep_const) */              && word1(rv) & -1
1832: /* MUTANT (rep_const) */              && word1(rv) & ((1)+1)
1833: /* MUTANT (rep_op) */              || dsign != 2) {
1833: /* MUTANT (rep_op) */              && dsign == 2) {
1833: /* MUTANT (rep_const) */              && dsign != 0) {
1833: /* MUTANT (rep_const) */              && dsign != 1) {
1833: /* MUTANT (rep_const) */              && dsign != -1) {
1833: /* MUTANT (rep_const) */              && dsign != ((2)+1)) {
1833: /* MUTANT (rep_const) */              && dsign != ((2)-1)) {
1834: /* MUTANT (negate) */            if(! (dsign)) {
1838: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) - P*Exp_msk1);
1838: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) * P*Exp_msk1);
1838: /* MUTANT (rep_op) */                set_word0(rv, word0(rv) % P*Exp_msk1);
1839: /* MUTANT (del_stmt) */ /*                 set_word0(rv0, Exp_1 - 2*P*Exp_msk1); */ 
1839: /* MUTANT (rep_const) */                set_word0(rv0, Exp_1 - 0*P*Exp_msk1);
1839: /* MUTANT (rep_const) */                set_word0(rv0, Exp_1 - 1*P*Exp_msk1);
1839: /* MUTANT (rep_const) */                set_word0(rv0, Exp_1 - -1*P*Exp_msk1);
1839: /* MUTANT (rep_const) */                set_word0(rv0, Exp_1 - ((2)+1)*P*Exp_msk1);
1839: /* MUTANT (rep_const) */                set_word0(rv0, Exp_1 - ((2)-1)*P*Exp_msk1);
1841: /* MUTANT (rep_op) */                rv -= ulp(rv);
1841: /* MUTANT (rep_op) */                rv *= ulp(rv);
1841: /* MUTANT (rep_op) */                rv %= ulp(rv);
1844: /* MUTANT (rep_const) */                set_word1(rv, word1(rv) & ~0);
1844: /* MUTANT (rep_const) */                set_word1(rv, word1(rv) & ~-1);
1844: /* MUTANT (rep_const) */                set_word1(rv, word1(rv) & ~((1)+1));
1846: /* MUTANT (rep_op) */        rv += rv0;
1846: /* MUTANT (rep_op) */        rv -= rv0;
1846: /* MUTANT (rep_op) */        rv %= rv0;
1851: /* MUTANT (del_stmt) */ /*     Bfree(bd); */ 
1852: /* MUTANT (del_stmt) */ /*     Bfree(bs); */ 
1853: /* MUTANT (del_stmt) */ /*     Bfree(bd0); */ 
1854: /* MUTANT (del_stmt) */ /*     Bfree(delta); */ 
1857: /* MUTANT (negate) */    if(! (se))
1859: /* MUTANT (del_stmt) */ /*     return sign ? -rv : rv; */ 
1863: /* MUTANT (del_stmt) */ /*     Bfree(bd); */ 
1864: /* MUTANT (del_stmt) */ /*     Bfree(bs); */ 
1865: /* MUTANT (del_stmt) */ /*     Bfree(bd0); */ 
1866: /* MUTANT (del_stmt) */ /*     Bfree(delta); */ 
1867: /* MUTANT (del_stmt) */ /*     *err = JS_DTOA_ENOMEM; */ 
1868: /* MUTANT (del_stmt) */ /*     return 0; */ 
1868: /* MUTANT (rep_const) */    return 1;
1868: /* MUTANT (rep_const) */    return -1;
1875: /* MUTANT (del_stmt) */ /*     ULong mask; */ 
1876: /* MUTANT (del_stmt) */ /*     ULong result; */ 
1877: /* MUTANT (del_stmt) */ /*     ULong *bx, *bxe; */ 
1878: /* MUTANT (del_stmt) */ /*     int32 w; */ 
1879: /* MUTANT (del_stmt) */ /*     int32 n = k >> 5; */ 
1879: /* MUTANT (rep_const) */    int32 n = k >> 0;
1879: /* MUTANT (rep_const) */    int32 n = k >> 1;
1879: /* MUTANT (rep_const) */    int32 n = k >> -1;
1879: /* MUTANT (rep_const) */    int32 n = k >> ((5)+1);
1879: /* MUTANT (rep_const) */    int32 n = k >> ((5)-1);
1880: /* MUTANT (del_stmt) */ /*     k &= 0x1F; */ 
1880: /* MUTANT (rep_const) */    k &= 1x1F;
1880: /* MUTANT (rep_const) */    k &= -1x1F;
1881: /* MUTANT (del_stmt) */ /*     mask = (1<<k) - 1; */ 
1881: /* MUTANT (rep_const) */    mask = (0<<k) - 1;
1881: /* MUTANT (rep_const) */    mask = (-1<<k) - 1;
1881: /* MUTANT (rep_const) */    mask = (((1)+1)<<k) - 1;
1881: /* MUTANT (rep_const) */    mask = (1<<k) - 0;
1881: /* MUTANT (rep_const) */    mask = (1<<k) - -1;
1881: /* MUTANT (rep_const) */    mask = (1<<k) - ((1)+1);
1883: /* MUTANT (del_stmt) */ /*     w = b->wds - n; */ 
1884: /* MUTANT (rep_op) */    if (w < 0)
1884: /* MUTANT (rep_op) */    if (w > 0)
1884: /* MUTANT (rep_op) */    if (w >= 0)
1884: /* MUTANT (rep_op) */    if (w == 0)
1884: /* MUTANT (rep_op) */    if (w != 0)
1884: /* MUTANT (rep_const) */    if (w <= 1)
1884: /* MUTANT (rep_const) */    if (w <= -1)
1884: /* MUTANT (negate) */    if(! (w <= 0))
1885: /* MUTANT (rep_const) */        return 1;
1885: /* MUTANT (rep_const) */        return -1;
1886: /* MUTANT (del_stmt) */ /*     JS_ASSERT(w <= 2); */ 
1886: /* MUTANT (rep_op) */    JS_ASSERT(w < 2);
1886: /* MUTANT (rep_op) */    JS_ASSERT(w > 2);
1886: /* MUTANT (rep_op) */    JS_ASSERT(w >= 2);
1886: /* MUTANT (rep_op) */    JS_ASSERT(w == 2);
1886: /* MUTANT (rep_op) */    JS_ASSERT(w != 2);
1886: /* MUTANT (rep_const) */    JS_ASSERT(w <= 0);
1886: /* MUTANT (rep_const) */    JS_ASSERT(w <= 1);
1886: /* MUTANT (rep_const) */    JS_ASSERT(w <= -1);
1886: /* MUTANT (rep_const) */    JS_ASSERT(w <= ((2)+1));
1886: /* MUTANT (rep_const) */    JS_ASSERT(w <= ((2)-1));
1887: /* MUTANT (del_stmt) */ /*     bx = b->x; */ 
1888: /* MUTANT (del_stmt) */ /*     bxe = bx + n; */ 
1888: /* MUTANT (rep_op) */    bxe = bx - n;
1888: /* MUTANT (rep_op) */    bxe = bx * n;
1888: /* MUTANT (rep_op) */    bxe = bx % n;
1889: /* MUTANT (del_stmt) */ /*     result = *bxe >> k; */ 
1890: /* MUTANT (del_stmt) */ /*     *bxe &= mask; */ 
1891: /* MUTANT (rep_op) */    if (w != 2) {
1891: /* MUTANT (rep_const) */    if (w == 0) {
1891: /* MUTANT (rep_const) */    if (w == 1) {
1891: /* MUTANT (rep_const) */    if (w == -1) {
1891: /* MUTANT (rep_const) */    if (w == ((2)+1)) {
1891: /* MUTANT (rep_const) */    if (w == ((2)-1)) {
1891: /* MUTANT (negate) */    if(! (w == 2)) {
1892: /* MUTANT (del_stmt) */ /*         JS_ASSERT(!(bxe[1] & ~mask)); */ 
1892: /* MUTANT (rep_const) */        JS_ASSERT(!(bxe[0] & ~mask));
1892: /* MUTANT (rep_const) */        JS_ASSERT(!(bxe[-1] & ~mask));
1892: /* MUTANT (rep_const) */        JS_ASSERT(!(bxe[((1)+1)] & ~mask));
1893: /* MUTANT (negate) */        if(! (k))
1894: /* MUTANT (rep_const) */            result |= bxe[0] << (32 - k);
1894: /* MUTANT (rep_const) */            result |= bxe[-1] << (32 - k);
1894: /* MUTANT (rep_const) */            result |= bxe[((1)+1)] << (32 - k);
1894: /* MUTANT (rep_const) */            result |= bxe[1] << (0 - k);
1894: /* MUTANT (rep_const) */            result |= bxe[1] << (1 - k);
1894: /* MUTANT (rep_const) */            result |= bxe[1] << (-1 - k);
1894: /* MUTANT (rep_const) */            result |= bxe[1] << (((32)+1) - k);
1894: /* MUTANT (rep_const) */            result |= bxe[1] << (((32)-1) - k);
1896: /* MUTANT (rep_op) */    n--;
1897: /* MUTANT (rep_op) */    while (!*bxe || bxe != bx) {
1897: /* MUTANT (rep_op) */    while (!*bxe && bxe == bx) {
1897: /* MUTANT (negate) */    while(! (!*bxe && bxe != bx)) {
1898: /* MUTANT (del_stmt) */ /*         n--; */ 
1898: /* MUTANT (rep_op) */        n++;
1899: /* MUTANT (del_stmt) */ /*         bxe--; */ 
1899: /* MUTANT (rep_op) */        bxe++;
1902: /* MUTANT (del_stmt) */ /*     return result; */ 
1910: /* MUTANT (del_stmt) */ /*     int32 n; */ 
1911: /* MUTANT (del_stmt) */ /*     ULong *bx, *bxe, q, *sx, *sxe; */ 
1916: /* MUTANT (del_stmt) */ /*     ULong si, z, zs; */ 
1920: /* MUTANT (del_stmt) */ /*     JS_ASSERT(b->wds <= n); */ 
1920: /* MUTANT (rep_op) */    JS_ASSERT(b->wds < n);
1920: /* MUTANT (rep_op) */    JS_ASSERT(b->wds > n);
1920: /* MUTANT (rep_op) */    JS_ASSERT(b->wds >= n);
1920: /* MUTANT (rep_op) */    JS_ASSERT(b->wds == n);
1920: /* MUTANT (rep_op) */    JS_ASSERT(b->wds != n);
1921: /* MUTANT (rep_op) */    if (b->wds <= n)
1921: /* MUTANT (rep_op) */    if (b->wds > n)
1921: /* MUTANT (rep_op) */    if (b->wds >= n)
1921: /* MUTANT (rep_op) */    if (b->wds == n)
1921: /* MUTANT (rep_op) */    if (b->wds != n)
1921: /* MUTANT (negate) */    if(! (b->wds < n))
1922: /* MUTANT (rep_const) */        return 1;
1922: /* MUTANT (rep_const) */        return -1;
1923: /* MUTANT (del_stmt) */ /*     sx = S->x; */ 
1924: /* MUTANT (del_stmt) */ /*     sxe = sx + --n; */ 
1924: /* MUTANT (rep_op) */    sxe = sx - --n;
1924: /* MUTANT (rep_op) */    sxe = sx * --n;
1924: /* MUTANT (rep_op) */    sxe = sx % --n;
1924: /* MUTANT (rep_op) */    sxe = sx + ++n;
1925: /* MUTANT (del_stmt) */ /*     bx = b->x; */ 
1926: /* MUTANT (del_stmt) */ /*     bxe = bx + n; */ 
1926: /* MUTANT (rep_op) */    bxe = bx - n;
1926: /* MUTANT (rep_op) */    bxe = bx * n;
1926: /* MUTANT (rep_op) */    bxe = bx % n;
1927: /* MUTANT (del_stmt) */ /*     JS_ASSERT(*sxe <= 0x7FFFFFFF); */ 
1927: /* MUTANT (rep_op) */    JS_ASSERT(*sxe < 0x7FFFFFFF);
1927: /* MUTANT (rep_op) */    JS_ASSERT(*sxe > 0x7FFFFFFF);
1927: /* MUTANT (rep_op) */    JS_ASSERT(*sxe >= 0x7FFFFFFF);
1927: /* MUTANT (rep_op) */    JS_ASSERT(*sxe == 0x7FFFFFFF);
1927: /* MUTANT (rep_op) */    JS_ASSERT(*sxe != 0x7FFFFFFF);
1927: /* MUTANT (rep_const) */    JS_ASSERT(*sxe <= 1x7FFFFFFF);
1927: /* MUTANT (rep_const) */    JS_ASSERT(*sxe <= -1x7FFFFFFF);
1928: /* MUTANT (del_stmt) */ /*     q = *bxe / (*sxe + 1); */   /* ensure q <= true quotient */
1928: /* MUTANT (rep_op) */    q = *bxe / (*sxe - 1);  /* ensure q <= true quotient */
1928: /* MUTANT (rep_op) */    q = *bxe / (*sxe * 1);  /* ensure q <= true quotient */
1928: /* MUTANT (rep_op) */    q = *bxe / (*sxe % 1);  /* ensure q <= true quotient */
1928: /* MUTANT (rep_const) */    q = *bxe / (*sxe + 0);  /* ensure q <= true quotient */
1928: /* MUTANT (rep_const) */    q = *bxe / (*sxe + -1);  /* ensure q <= true quotient */
1928: /* MUTANT (rep_const) */    q = *bxe / (*sxe + ((1)+1));  /* ensure q <= true quotient */
1929: /* MUTANT (del_stmt) */ /*     JS_ASSERT(q < 36); */ 
1929: /* MUTANT (rep_op) */    JS_ASSERT(q <= 36);
1929: /* MUTANT (rep_op) */    JS_ASSERT(q > 36);
1929: /* MUTANT (rep_op) */    JS_ASSERT(q >= 36);
1929: /* MUTANT (rep_op) */    JS_ASSERT(q == 36);
1929: /* MUTANT (rep_op) */    JS_ASSERT(q != 36);
1929: /* MUTANT (rep_const) */    JS_ASSERT(q < 0);
1929: /* MUTANT (rep_const) */    JS_ASSERT(q < 1);
1929: /* MUTANT (rep_const) */    JS_ASSERT(q < -1);
1929: /* MUTANT (rep_const) */    JS_ASSERT(q < ((36)+1));
1929: /* MUTANT (rep_const) */    JS_ASSERT(q < ((36)-1));
1930: /* MUTANT (negate) */    if(! (q)) {
1931: /* MUTANT (del_stmt) */ /*         borrow = 0; */ 
1931: /* MUTANT (rep_const) */        borrow = 1;
1931: /* MUTANT (rep_const) */        borrow = -1;
1932: /* MUTANT (del_stmt) */ /*         carry = 0; */ 
1932: /* MUTANT (rep_const) */        carry = 1;
1932: /* MUTANT (rep_const) */        carry = -1;
1935: /* MUTANT (rep_op) */            ys = *sx-- * (ULLong)q + carry;
1935: /* MUTANT (rep_op) */            ys = *sx++ * (ULLong)q - carry;
1935: /* MUTANT (rep_op) */            ys = *sx++ * (ULLong)q * carry;
1935: /* MUTANT (rep_op) */            ys = *sx++ * (ULLong)q % carry;
1936: /* MUTANT (del_stmt) */ /*             carry = ys >> 32; */ 
1936: /* MUTANT (rep_const) */            carry = ys >> 0;
1936: /* MUTANT (rep_const) */            carry = ys >> 1;
1936: /* MUTANT (rep_const) */            carry = ys >> -1;
1936: /* MUTANT (rep_const) */            carry = ys >> ((32)+1);
1936: /* MUTANT (rep_const) */            carry = ys >> ((32)-1);
1937: /* MUTANT (del_stmt) */ /*             y = *bx - (ys & 0xffffffffUL) - borrow; */ 
1937: /* MUTANT (rep_const) */            y = *bx - (ys & 1xffffffffUL) - borrow;
1937: /* MUTANT (rep_const) */            y = *bx - (ys & -1xffffffffUL) - borrow;
1938: /* MUTANT (del_stmt) */ /*             borrow = y >> 32 & 1UL; */ 
1938: /* MUTANT (rep_const) */            borrow = y >> 0 & 1UL;
1938: /* MUTANT (rep_const) */            borrow = y >> 1 & 1UL;
1938: /* MUTANT (rep_const) */            borrow = y >> -1 & 1UL;
1938: /* MUTANT (rep_const) */            borrow = y >> ((32)+1) & 1UL;
1938: /* MUTANT (rep_const) */            borrow = y >> ((32)-1) & 1UL;
1938: /* MUTANT (rep_const) */            borrow = y >> 32 & 0UL;
1938: /* MUTANT (rep_const) */            borrow = y >> 32 & -1UL;
1938: /* MUTANT (rep_const) */            borrow = y >> 32 & ((1)+1)UL;
1939: /* MUTANT (del_stmt) */ /*             *bx++ = (ULong)(y & 0xffffffffUL); */ 
1939: /* MUTANT (rep_op) */            *bx-- = (ULong)(y & 0xffffffffUL);
1939: /* MUTANT (rep_const) */            *bx++ = (ULong)(y & 1xffffffffUL);
1939: /* MUTANT (rep_const) */            *bx++ = (ULong)(y & -1xffffffffUL);
1941: /* MUTANT (rep_op) */            si = *sx--;
1942: /* MUTANT (del_stmt) */ /*             ys = (si & 0xffff) * q + carry; */ 
1942: /* MUTANT (rep_op) */            ys = (si & 0xffff) * q - carry;
1942: /* MUTANT (rep_op) */            ys = (si & 0xffff) * q * carry;
1942: /* MUTANT (rep_op) */            ys = (si & 0xffff) * q % carry;
1942: /* MUTANT (rep_const) */            ys = (si & 1xffff) * q + carry;
1942: /* MUTANT (rep_const) */            ys = (si & -1xffff) * q + carry;
1943: /* MUTANT (del_stmt) */ /*             zs = (si >> 16) * q + (ys >> 16); */ 
1943: /* MUTANT (rep_op) */            zs = (si >> 16) * q - (ys >> 16);
1943: /* MUTANT (rep_op) */            zs = (si >> 16) * q * (ys >> 16);
1943: /* MUTANT (rep_op) */            zs = (si >> 16) * q % (ys >> 16);
1943: /* MUTANT (rep_const) */            zs = (si >> 0) * q + (ys >> 16);
1943: /* MUTANT (rep_const) */            zs = (si >> 1) * q + (ys >> 16);
1943: /* MUTANT (rep_const) */            zs = (si >> -1) * q + (ys >> 16);
1943: /* MUTANT (rep_const) */            zs = (si >> ((16)+1)) * q + (ys >> 16);
1943: /* MUTANT (rep_const) */            zs = (si >> ((16)-1)) * q + (ys >> 16);
1943: /* MUTANT (rep_const) */            zs = (si >> 16) * q + (ys >> 0);
1943: /* MUTANT (rep_const) */            zs = (si >> 16) * q + (ys >> 1);
1943: /* MUTANT (rep_const) */            zs = (si >> 16) * q + (ys >> -1);
1943: /* MUTANT (rep_const) */            zs = (si >> 16) * q + (ys >> ((16)+1));
1943: /* MUTANT (rep_const) */            zs = (si >> 16) * q + (ys >> ((16)-1));
1944: /* MUTANT (del_stmt) */ /*             carry = zs >> 16; */ 
1944: /* MUTANT (rep_const) */            carry = zs >> 0;
1944: /* MUTANT (rep_const) */            carry = zs >> 1;
1944: /* MUTANT (rep_const) */            carry = zs >> -1;
1944: /* MUTANT (rep_const) */            carry = zs >> ((16)+1);
1944: /* MUTANT (rep_const) */            carry = zs >> ((16)-1);
1945: /* MUTANT (del_stmt) */ /*             y = (*bx & 0xffff) - (ys & 0xffff) - borrow; */ 
1945: /* MUTANT (rep_const) */            y = (*bx & 1xffff) - (ys & 0xffff) - borrow;
1945: /* MUTANT (rep_const) */            y = (*bx & -1xffff) - (ys & 0xffff) - borrow;
1945: /* MUTANT (rep_const) */            y = (*bx & 0xffff) - (ys & 1xffff) - borrow;
1945: /* MUTANT (rep_const) */            y = (*bx & 0xffff) - (ys & -1xffff) - borrow;
1946: /* MUTANT (del_stmt) */ /*             borrow = (y & 0x10000) >> 16; */ 
1946: /* MUTANT (rep_const) */            borrow = (y & 1x10000) >> 16;
1946: /* MUTANT (rep_const) */            borrow = (y & -1x10000) >> 16;
1946: /* MUTANT (rep_const) */            borrow = (y & 0x10000) >> 0;
1946: /* MUTANT (rep_const) */            borrow = (y & 0x10000) >> 1;
1946: /* MUTANT (rep_const) */            borrow = (y & 0x10000) >> -1;
1946: /* MUTANT (rep_const) */            borrow = (y & 0x10000) >> ((16)+1);
1946: /* MUTANT (rep_const) */            borrow = (y & 0x10000) >> ((16)-1);
1947: /* MUTANT (del_stmt) */ /*             z = (*bx >> 16) - (zs & 0xffff) - borrow; */ 
1947: /* MUTANT (rep_const) */            z = (*bx >> 0) - (zs & 0xffff) - borrow;
1947: /* MUTANT (rep_const) */            z = (*bx >> 1) - (zs & 0xffff) - borrow;
1947: /* MUTANT (rep_const) */            z = (*bx >> -1) - (zs & 0xffff) - borrow;
1947: /* MUTANT (rep_const) */            z = (*bx >> ((16)+1)) - (zs & 0xffff) - borrow;
1947: /* MUTANT (rep_const) */            z = (*bx >> ((16)-1)) - (zs & 0xffff) - borrow;
1947: /* MUTANT (rep_const) */            z = (*bx >> 16) - (zs & 1xffff) - borrow;
1947: /* MUTANT (rep_const) */            z = (*bx >> 16) - (zs & -1xffff) - borrow;
1948: /* MUTANT (del_stmt) */ /*             borrow = (z & 0x10000) >> 16; */ 
1948: /* MUTANT (rep_const) */            borrow = (z & 1x10000) >> 16;
1948: /* MUTANT (rep_const) */            borrow = (z & -1x10000) >> 16;
1948: /* MUTANT (rep_const) */            borrow = (z & 0x10000) >> 0;
1948: /* MUTANT (rep_const) */            borrow = (z & 0x10000) >> 1;
1948: /* MUTANT (rep_const) */            borrow = (z & 0x10000) >> -1;
1948: /* MUTANT (rep_const) */            borrow = (z & 0x10000) >> ((16)+1);
1948: /* MUTANT (rep_const) */            borrow = (z & 0x10000) >> ((16)-1);
1949: /* MUTANT (del_stmt) */ /*             Storeinc(bx, z, y); */ 
1952: /* MUTANT (rep_op) */        while(sx < sxe);
1952: /* MUTANT (rep_op) */        while(sx > sxe);
1952: /* MUTANT (rep_op) */        while(sx >= sxe);
1952: /* MUTANT (rep_op) */        while(sx == sxe);
1952: /* MUTANT (rep_op) */        while(sx != sxe);
1952: /* MUTANT (negate) */        while(!(sx <= sxe));
1953: /* MUTANT (negate) */        if(! (!*bxe)) {
1954: /* MUTANT (del_stmt) */ /*             bx = b->x; */ 
1955: /* MUTANT (rep_op) */            while(++bxe > bx && !*bxe)
1955: /* MUTANT (rep_op) */            while(--bxe <= bx && !*bxe)
1955: /* MUTANT (rep_op) */            while(--bxe < bx && !*bxe)
1955: /* MUTANT (rep_op) */            while(--bxe >= bx && !*bxe)
1955: /* MUTANT (rep_op) */            while(--bxe == bx && !*bxe)
1955: /* MUTANT (rep_op) */            while(--bxe != bx && !*bxe)
1955: /* MUTANT (rep_op) */            while(--bxe > bx || !*bxe)
1955: /* MUTANT (negate) */            while(!(--bxe > bx && !*bxe))
1956: /* MUTANT (rep_op) */                ++n;
1957: /* MUTANT (del_stmt) */ /*             b->wds = n; */ 
1960: /* MUTANT (rep_op) */    if (cmp(b, S) <= 0) {
1960: /* MUTANT (rep_op) */    if (cmp(b, S) < 0) {
1960: /* MUTANT (rep_op) */    if (cmp(b, S) > 0) {
1960: /* MUTANT (rep_op) */    if (cmp(b, S) == 0) {
1960: /* MUTANT (rep_op) */    if (cmp(b, S) != 0) {
1960: /* MUTANT (rep_const) */    if (cmp(b, S) >= 1) {
1960: /* MUTANT (rep_const) */    if (cmp(b, S) >= -1) {
1960: /* MUTANT (negate) */    if(! (cmp(b, S) >= 0)) {
1961: /* MUTANT (del_stmt) */ /*         q++; */ 
1961: /* MUTANT (rep_op) */        q--;
1962: /* MUTANT (del_stmt) */ /*         borrow = 0; */ 
1962: /* MUTANT (rep_const) */        borrow = 1;
1962: /* MUTANT (rep_const) */        borrow = -1;
1963: /* MUTANT (del_stmt) */ /*         carry = 0; */ 
1963: /* MUTANT (rep_const) */        carry = 1;
1963: /* MUTANT (rep_const) */        carry = -1;
1964: /* MUTANT (del_stmt) */ /*         bx = b->x; */ 
1965: /* MUTANT (del_stmt) */ /*         sx = S->x; */ 
1968: /* MUTANT (rep_op) */            ys = *sx-- + carry;
1968: /* MUTANT (rep_op) */            ys = *sx++ - carry;
1968: /* MUTANT (rep_op) */            ys = *sx++ * carry;
1968: /* MUTANT (rep_op) */            ys = *sx++ % carry;
1969: /* MUTANT (del_stmt) */ /*             carry = ys >> 32; */ 
1969: /* MUTANT (rep_const) */            carry = ys >> 0;
1969: /* MUTANT (rep_const) */            carry = ys >> 1;
1969: /* MUTANT (rep_const) */            carry = ys >> -1;
1969: /* MUTANT (rep_const) */            carry = ys >> ((32)+1);
1969: /* MUTANT (rep_const) */            carry = ys >> ((32)-1);
1970: /* MUTANT (del_stmt) */ /*             y = *bx - (ys & 0xffffffffUL) - borrow; */ 
1970: /* MUTANT (rep_const) */            y = *bx - (ys & 1xffffffffUL) - borrow;
1970: /* MUTANT (rep_const) */            y = *bx - (ys & -1xffffffffUL) - borrow;
1971: /* MUTANT (del_stmt) */ /*             borrow = y >> 32 & 1UL; */ 
1971: /* MUTANT (rep_const) */            borrow = y >> 0 & 1UL;
1971: /* MUTANT (rep_const) */            borrow = y >> 1 & 1UL;
1971: /* MUTANT (rep_const) */            borrow = y >> -1 & 1UL;
1971: /* MUTANT (rep_const) */            borrow = y >> ((32)+1) & 1UL;
1971: /* MUTANT (rep_const) */            borrow = y >> ((32)-1) & 1UL;
1971: /* MUTANT (rep_const) */            borrow = y >> 32 & 0UL;
1971: /* MUTANT (rep_const) */            borrow = y >> 32 & -1UL;
1971: /* MUTANT (rep_const) */            borrow = y >> 32 & ((1)+1)UL;
1972: /* MUTANT (del_stmt) */ /*             *bx++ = (ULong)(y & 0xffffffffUL); */ 
1972: /* MUTANT (rep_op) */            *bx-- = (ULong)(y & 0xffffffffUL);
1972: /* MUTANT (rep_const) */            *bx++ = (ULong)(y & 1xffffffffUL);
1972: /* MUTANT (rep_const) */            *bx++ = (ULong)(y & -1xffffffffUL);
1974: /* MUTANT (rep_op) */            si = *sx--;
1975: /* MUTANT (del_stmt) */ /*             ys = (si & 0xffff) + carry; */ 
1975: /* MUTANT (rep_op) */            ys = (si & 0xffff) - carry;
1975: /* MUTANT (rep_op) */            ys = (si & 0xffff) * carry;
1975: /* MUTANT (rep_op) */            ys = (si & 0xffff) % carry;
1975: /* MUTANT (rep_const) */            ys = (si & 1xffff) + carry;
1975: /* MUTANT (rep_const) */            ys = (si & -1xffff) + carry;
1976: /* MUTANT (del_stmt) */ /*             zs = (si >> 16) + (ys >> 16); */ 
1976: /* MUTANT (rep_op) */            zs = (si >> 16) - (ys >> 16);
1976: /* MUTANT (rep_op) */            zs = (si >> 16) * (ys >> 16);
1976: /* MUTANT (rep_op) */            zs = (si >> 16) % (ys >> 16);
1976: /* MUTANT (rep_const) */            zs = (si >> 0) + (ys >> 16);
1976: /* MUTANT (rep_const) */            zs = (si >> 1) + (ys >> 16);
1976: /* MUTANT (rep_const) */            zs = (si >> -1) + (ys >> 16);
1976: /* MUTANT (rep_const) */            zs = (si >> ((16)+1)) + (ys >> 16);
1976: /* MUTANT (rep_const) */            zs = (si >> ((16)-1)) + (ys >> 16);
1976: /* MUTANT (rep_const) */            zs = (si >> 16) + (ys >> 0);
1976: /* MUTANT (rep_const) */            zs = (si >> 16) + (ys >> 1);
1976: /* MUTANT (rep_const) */            zs = (si >> 16) + (ys >> -1);
1976: /* MUTANT (rep_const) */            zs = (si >> 16) + (ys >> ((16)+1));
1976: /* MUTANT (rep_const) */            zs = (si >> 16) + (ys >> ((16)-1));
1977: /* MUTANT (del_stmt) */ /*             carry = zs >> 16; */ 
1977: /* MUTANT (rep_const) */            carry = zs >> 0;
1977: /* MUTANT (rep_const) */            carry = zs >> 1;
1977: /* MUTANT (rep_const) */            carry = zs >> -1;
1977: /* MUTANT (rep_const) */            carry = zs >> ((16)+1);
1977: /* MUTANT (rep_const) */            carry = zs >> ((16)-1);
1978: /* MUTANT (del_stmt) */ /*             y = (*bx & 0xffff) - (ys & 0xffff) - borrow; */ 
1978: /* MUTANT (rep_const) */            y = (*bx & 1xffff) - (ys & 0xffff) - borrow;
1978: /* MUTANT (rep_const) */            y = (*bx & -1xffff) - (ys & 0xffff) - borrow;
1978: /* MUTANT (rep_const) */            y = (*bx & 0xffff) - (ys & 1xffff) - borrow;
1978: /* MUTANT (rep_const) */            y = (*bx & 0xffff) - (ys & -1xffff) - borrow;
1979: /* MUTANT (del_stmt) */ /*             borrow = (y & 0x10000) >> 16; */ 
1979: /* MUTANT (rep_const) */            borrow = (y & 1x10000) >> 16;
1979: /* MUTANT (rep_const) */            borrow = (y & -1x10000) >> 16;
1979: /* MUTANT (rep_const) */            borrow = (y & 0x10000) >> 0;
1979: /* MUTANT (rep_const) */            borrow = (y & 0x10000) >> 1;
1979: /* MUTANT (rep_const) */            borrow = (y & 0x10000) >> -1;
1979: /* MUTANT (rep_const) */            borrow = (y & 0x10000) >> ((16)+1);
1979: /* MUTANT (rep_const) */            borrow = (y & 0x10000) >> ((16)-1);
1980: /* MUTANT (del_stmt) */ /*             z = (*bx >> 16) - (zs & 0xffff) - borrow; */ 
1980: /* MUTANT (rep_const) */            z = (*bx >> 0) - (zs & 0xffff) - borrow;
1980: /* MUTANT (rep_const) */            z = (*bx >> 1) - (zs & 0xffff) - borrow;
1980: /* MUTANT (rep_const) */            z = (*bx >> -1) - (zs & 0xffff) - borrow;
1980: /* MUTANT (rep_const) */            z = (*bx >> ((16)+1)) - (zs & 0xffff) - borrow;
1980: /* MUTANT (rep_const) */            z = (*bx >> ((16)-1)) - (zs & 0xffff) - borrow;
1980: /* MUTANT (rep_const) */            z = (*bx >> 16) - (zs & 1xffff) - borrow;
1980: /* MUTANT (rep_const) */            z = (*bx >> 16) - (zs & -1xffff) - borrow;
1981: /* MUTANT (del_stmt) */ /*             borrow = (z & 0x10000) >> 16; */ 
1981: /* MUTANT (rep_const) */            borrow = (z & 1x10000) >> 16;
1981: /* MUTANT (rep_const) */            borrow = (z & -1x10000) >> 16;
1981: /* MUTANT (rep_const) */            borrow = (z & 0x10000) >> 0;
1981: /* MUTANT (rep_const) */            borrow = (z & 0x10000) >> 1;
1981: /* MUTANT (rep_const) */            borrow = (z & 0x10000) >> -1;
1981: /* MUTANT (rep_const) */            borrow = (z & 0x10000) >> ((16)+1);
1981: /* MUTANT (rep_const) */            borrow = (z & 0x10000) >> ((16)-1);
1982: /* MUTANT (del_stmt) */ /*             Storeinc(bx, z, y); */ 
1984: /* MUTANT (rep_op) */        } while(sx < sxe);
1984: /* MUTANT (rep_op) */        } while(sx > sxe);
1984: /* MUTANT (rep_op) */        } while(sx >= sxe);
1984: /* MUTANT (rep_op) */        } while(sx == sxe);
1984: /* MUTANT (rep_op) */        } while(sx != sxe);
1984: /* MUTANT (negate) */        } while(!(sx <= sxe));
1985: /* MUTANT (del_stmt) */ /*         bx = b->x; */ 
1986: /* MUTANT (del_stmt) */ /*         bxe = bx + n; */ 
1986: /* MUTANT (rep_op) */        bxe = bx - n;
1986: /* MUTANT (rep_op) */        bxe = bx * n;
1986: /* MUTANT (rep_op) */        bxe = bx % n;
1987: /* MUTANT (negate) */        if(! (!*bxe)) {
1988: /* MUTANT (rep_op) */            while(++bxe > bx && !*bxe)
1988: /* MUTANT (rep_op) */            while(--bxe <= bx && !*bxe)
1988: /* MUTANT (rep_op) */            while(--bxe < bx && !*bxe)
1988: /* MUTANT (rep_op) */            while(--bxe >= bx && !*bxe)
1988: /* MUTANT (rep_op) */            while(--bxe == bx && !*bxe)
1988: /* MUTANT (rep_op) */            while(--bxe != bx && !*bxe)
1988: /* MUTANT (rep_op) */            while(--bxe > bx || !*bxe)
1988: /* MUTANT (negate) */            while(!(--bxe > bx && !*bxe))
1989: /* MUTANT (rep_op) */                ++n;
1990: /* MUTANT (del_stmt) */ /*             b->wds = n; */ 
2078: /* MUTANT (del_stmt) */ /*     Long L; */ 
2081: /* MUTANT (del_stmt) */ /*     ULong x; */ 
2084: /* MUTANT (del_stmt) */ /*     double d2, ds, eps; */ 
2085: /* MUTANT (del_stmt) */ /*     char *s; */ 
2087: /* MUTANT (negate) */    if(! (word0(d) & Sign_bit)) {
2089: /* MUTANT (del_stmt) */ /*         *sign = 1; */ 
2089: /* MUTANT (rep_const) */        *sign = 0;
2089: /* MUTANT (rep_const) */        *sign = -1;
2089: /* MUTANT (rep_const) */        *sign = ((1)+1);
2090: /* MUTANT (del_stmt) */ /*         set_word0(d, word0(d) & ~Sign_bit); */   /* clear sign bit */
2093: /* MUTANT (rep_const) */        *sign = 1;
2093: /* MUTANT (rep_const) */        *sign = -1;
2095: /* MUTANT (rep_op) */    if ((word0(d) & Exp_mask) != Exp_mask) {
2095: /* MUTANT (negate) */    if(! ((word0(d) & Exp_mask) == Exp_mask)) {
2097: /* MUTANT (del_stmt) */ /*         *decpt = 9999; */ 
2097: /* MUTANT (rep_const) */        *decpt = 0;
2097: /* MUTANT (rep_const) */        *decpt = 1;
2097: /* MUTANT (rep_const) */        *decpt = -1;
2097: /* MUTANT (rep_const) */        *decpt = ((9999)+1);
2097: /* MUTANT (rep_const) */        *decpt = ((9999)-1);
2098: /* MUTANT (del_stmt) */ /*         s = !word1(d) && !(word0(d) & Frac_mask) ? "Infinity" : "NaN"; */ 
2098: /* MUTANT (rep_op) */        s = !word1(d) || !(word0(d) & Frac_mask) ? "Infinity" : "NaN";
2099: /* MUTANT (rep_op) */        if ((s[0] != 'I' && bufsize < 9) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' || bufsize < 9) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize <= 9) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize > 9) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize >= 9) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize == 9) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize != 9) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize < 9) && (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] != 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' || bufsize < 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize <= 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize > 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize >= 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize == 4)) {
2099: /* MUTANT (rep_op) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize != 4)) {
2099: /* MUTANT (rep_const) */        if ((s[1] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_const) */        if ((s[-1] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < 0) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < 1) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < -1) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < ((9)+1)) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < ((9)-1)) || (s[0] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < 9) || (s[1] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < 9) || (s[-1] == 'N' && bufsize < 4)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize < 0)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize < 1)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize < -1)) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize < ((4)+1))) {
2099: /* MUTANT (rep_const) */        if ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize < ((4)-1))) {
2099: /* MUTANT (negate) */        if(! ((s[0] == 'I' && bufsize < 9) || (s[0] == 'N' && bufsize < 4))) {
2100: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JS_FALSE); */ 
2102: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
2105: /* MUTANT (negate) */        if(! (rve)) {
2106: /* MUTANT (del_stmt) */ /*             *rve = buf[3] ? buf + 8 : buf + 3; */ 
2106: /* MUTANT (rep_op) */            *rve = buf[3] ? buf - 8 : buf + 3;
2106: /* MUTANT (rep_op) */            *rve = buf[3] ? buf * 8 : buf + 3;
2106: /* MUTANT (rep_op) */            *rve = buf[3] ? buf % 8 : buf + 3;
2106: /* MUTANT (rep_op) */            *rve = buf[3] ? buf + 8 : buf - 3;
2106: /* MUTANT (rep_op) */            *rve = buf[3] ? buf + 8 : buf * 3;
2106: /* MUTANT (rep_op) */            *rve = buf[3] ? buf + 8 : buf % 3;
2106: /* MUTANT (rep_const) */            *rve = buf[0] ? buf + 8 : buf + 3;
2106: /* MUTANT (rep_const) */            *rve = buf[1] ? buf + 8 : buf + 3;
2106: /* MUTANT (rep_const) */            *rve = buf[-1] ? buf + 8 : buf + 3;
2106: /* MUTANT (rep_const) */            *rve = buf[((3)+1)] ? buf + 8 : buf + 3;
2106: /* MUTANT (rep_const) */            *rve = buf[((3)-1)] ? buf + 8 : buf + 3;
2106: /* MUTANT (rep_const) */            *rve = buf[3] ? buf + 0 : buf + 3;
2106: /* MUTANT (rep_const) */            *rve = buf[3] ? buf + 1 : buf + 3;
2106: /* MUTANT (rep_const) */            *rve = buf[3] ? buf + -1 : buf + 3;
2106: /* MUTANT (rep_const) */            *rve = buf[3] ? buf + ((8)+1) : buf + 3;
2106: /* MUTANT (rep_const) */            *rve = buf[3] ? buf + ((8)-1) : buf + 3;
2106: /* MUTANT (rep_const) */            *rve = buf[3] ? buf + 8 : buf + 0;
2106: /* MUTANT (rep_const) */            *rve = buf[3] ? buf + 8 : buf + 1;
2106: /* MUTANT (rep_const) */            *rve = buf[3] ? buf + 8 : buf + -1;
2106: /* MUTANT (rep_const) */            *rve = buf[3] ? buf + 8 : buf + ((3)+1);
2106: /* MUTANT (rep_const) */            *rve = buf[3] ? buf + 8 : buf + ((3)-1);
2107: /* MUTANT (del_stmt) */ /*             JS_ASSERT(**rve == '\0'); */ 
2107: /* MUTANT (rep_op) */            JS_ASSERT(**rve != '\0');
2107: /* MUTANT (rep_const) */            JS_ASSERT(**rve == '\1');
2107: /* MUTANT (rep_const) */            JS_ASSERT(**rve == '\-1');
2113: /* MUTANT (del_stmt) */ /*     S = NULL; */ 
2114: /* MUTANT (del_stmt) */ /*     mlo = mhi = NULL; */ 
2116: /* MUTANT (negate) */    if(! (!d)) {
2118: /* MUTANT (rep_const) */        *decpt = 0;
2118: /* MUTANT (rep_const) */        *decpt = -1;
2118: /* MUTANT (rep_const) */        *decpt = ((1)+1);
2119: /* MUTANT (rep_op) */        if (bufsize <= 2) {
2119: /* MUTANT (rep_op) */        if (bufsize > 2) {
2119: /* MUTANT (rep_op) */        if (bufsize >= 2) {
2119: /* MUTANT (rep_op) */        if (bufsize == 2) {
2119: /* MUTANT (rep_op) */        if (bufsize != 2) {
2119: /* MUTANT (rep_const) */        if (bufsize < 0) {
2119: /* MUTANT (rep_const) */        if (bufsize < 1) {
2119: /* MUTANT (rep_const) */        if (bufsize < -1) {
2119: /* MUTANT (rep_const) */        if (bufsize < ((2)+1)) {
2119: /* MUTANT (rep_const) */        if (bufsize < ((2)-1)) {
2119: /* MUTANT (negate) */        if(! (bufsize < 2)) {
2120: /* MUTANT (del_stmt) */ /*             JS_ASSERT(JS_FALSE); */ 
2122: /* MUTANT (del_stmt) */ /*             return JS_FALSE; */ 
2124: /* MUTANT (rep_const) */        buf[1] = '0'; buf[1] = '\0';  /* copy "0" to buffer */
2124: /* MUTANT (rep_const) */        buf[-1] = '0'; buf[1] = '\0';  /* copy "0" to buffer */
2124: /* MUTANT (rep_const) */        buf[0] = '1'; buf[1] = '\0';  /* copy "0" to buffer */
2124: /* MUTANT (rep_const) */        buf[0] = '-1'; buf[1] = '\0';  /* copy "0" to buffer */
2124: /* MUTANT (rep_const) */        buf[0] = '0'; buf[0] = '\0';  /* copy "0" to buffer */
2124: /* MUTANT (rep_const) */        buf[0] = '0'; buf[-1] = '\0';  /* copy "0" to buffer */
2124: /* MUTANT (rep_const) */        buf[0] = '0'; buf[((1)+1)] = '\0';  /* copy "0" to buffer */
2124: /* MUTANT (rep_const) */        buf[0] = '0'; buf[1] = '\1';  /* copy "0" to buffer */
2124: /* MUTANT (rep_const) */        buf[0] = '0'; buf[1] = '\-1';  /* copy "0" to buffer */
2125: /* MUTANT (negate) */        if(! (rve))
2126: /* MUTANT (rep_op) */            *rve = buf - 1;
2126: /* MUTANT (rep_op) */            *rve = buf * 1;
2126: /* MUTANT (rep_op) */            *rve = buf % 1;
2126: /* MUTANT (rep_const) */            *rve = buf + 0;
2126: /* MUTANT (rep_const) */            *rve = buf + -1;
2126: /* MUTANT (rep_const) */            *rve = buf + ((1)+1);
2130: /* MUTANT (del_stmt) */ /*         Bfree(b); */ 
2131: /* MUTANT (del_stmt) */ /*         Bfree(S); */ 
2132: /* MUTANT (rep_op) */        if (mlo == mhi)
2132: /* MUTANT (negate) */        if(! (mlo != mhi))
2134: /* MUTANT (del_stmt) */ /*         Bfree(mhi); */ 
2135: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
2139: /* MUTANT (negate) */    if(! (!b))
2142: /* MUTANT (negate) */    i = (int32)(word0(d) >> Exp_shif(!t1 & (Exp_mask>>Exp_shift1)));
2144: /* MUTANT (rep_op) */    if ((i = (int32)(word0(d) >> Exp_shift1 & (Exp_mask>>Exp_shift1))) == 0) {
2144: /* MUTANT (rep_const) */    if ((i = (int32)(word0(d) >> Exp_shift1 & (Exp_mask>>Exp_shift1))) != 1) {
2144: /* MUTANT (rep_const) */    if ((i = (int32)(word0(d) >> Exp_shift1 & (Exp_mask>>Exp_shift1))) != -1) {
2144: /* MUTANT (negate) */    if(! ((i = (int32)(word0(d) >> Exp_shift1 & (Exp_mask>>Exp_shift1))) != 0)) {
2147: /* MUTANT (del_stmt) */ /*         set_word0(d2, word0(d2) & Frac_mask1); */ 
2148: /* MUTANT (del_stmt) */ /*         set_word0(d2, word0(d2) | Exp_11); */ 
2148: /* MUTANT (rep_op) */        set_word0(d2, word0(d2) & Exp_11);
2172: /* MUTANT (del_stmt) */ /*         i -= Bias; */ 
2172: /* MUTANT (rep_op) */        i += Bias;
2172: /* MUTANT (rep_op) */        i *= Bias;
2172: /* MUTANT (rep_op) */        i %= Bias;
2174: /* MUTANT (rep_const) */        denorm = 1;
2174: /* MUTANT (rep_const) */        denorm = -1;
2179: /* MUTANT (del_stmt) */ /*         i = bbits + be + (Bias + (P-1) - 1); */ 
2179: /* MUTANT (rep_op) */        i = bbits - be + (Bias + (P-1) - 1);
2179: /* MUTANT (rep_op) */        i = bbits * be + (Bias + (P-1) - 1);
2179: /* MUTANT (rep_op) */        i = bbits % be + (Bias + (P-1) - 1);
2179: /* MUTANT (rep_op) */        i = bbits + be - (Bias + (P-1) - 1);
2179: /* MUTANT (rep_op) */        i = bbits + be * (Bias + (P-1) - 1);
2179: /* MUTANT (rep_op) */        i = bbits + be % (Bias + (P-1) - 1);
2179: /* MUTANT (rep_op) */        i = bbits + be + (Bias - (P-1) - 1);
2179: /* MUTANT (rep_op) */        i = bbits + be + (Bias * (P-1) - 1);
2179: /* MUTANT (rep_op) */        i = bbits + be + (Bias % (P-1) - 1);
2179: /* MUTANT (rep_const) */        i = bbits + be + (Bias + (P-0) - 1);
2179: /* MUTANT (rep_const) */        i = bbits + be + (Bias + (P--1) - 1);
2179: /* MUTANT (rep_const) */        i = bbits + be + (Bias + (P-((1)+1)) - 1);
2179: /* MUTANT (rep_const) */        i = bbits + be + (Bias + (P-1) - 0);
2179: /* MUTANT (rep_const) */        i = bbits + be + (Bias + (P-1) - -1);
2179: /* MUTANT (rep_const) */        i = bbits + be + (Bias + (P-1) - ((1)+1));
2180: /* MUTANT (del_stmt) */ /*         x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i); */ 
2180: /* MUTANT (rep_op) */        x = i <= 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_op) */        x = i < 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_op) */        x = i >= 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_op) */        x = i == 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_op) */        x = i != 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_op) */        x = i > 32 ? word0(d) << (64 - i) & word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 0 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 1 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > -1 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > ((32)+1) ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > ((32)-1) ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (0 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (1 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (-1 - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (((64)+1) - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (((64)-1) - i) | word1(d) >> (i - 32) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - 0) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - 1) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - -1) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - ((32)+1)) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - ((32)-1)) : word1(d) << (32 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (0 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (1 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (-1 - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (((32)+1) - i);
2180: /* MUTANT (rep_const) */        x = i > 32 ? word0(d) << (64 - i) | word1(d) >> (i - 32) : word1(d) << (((32)-1) - i);
2181: /* MUTANT (del_stmt) */ /*         d2 = x; */ 
2182: /* MUTANT (del_stmt) */ /*         set_word0(d2, word0(d2) - 31*Exp_msk1); */  /* adjust exponent */
2182: /* MUTANT (rep_const) */        set_word0(d2, word0(d2) - 0*Exp_msk1); /* adjust exponent */
2182: /* MUTANT (rep_const) */        set_word0(d2, word0(d2) - 1*Exp_msk1); /* adjust exponent */
2182: /* MUTANT (rep_const) */        set_word0(d2, word0(d2) - -1*Exp_msk1); /* adjust exponent */
2182: /* MUTANT (rep_const) */        set_word0(d2, word0(d2) - ((31)+1)*Exp_msk1); /* adjust exponent */
2182: /* MUTANT (rep_const) */        set_word0(d2, word0(d2) - ((31)-1)*Exp_msk1); /* adjust exponent */
2183: /* MUTANT (del_stmt) */ /*         i -= (Bias + (P-1) - 1) + 1; */ 
2183: /* MUTANT (rep_op) */        i += (Bias + (P-1) - 1) + 1;
2183: /* MUTANT (rep_op) */        i *= (Bias + (P-1) - 1) + 1;
2183: /* MUTANT (rep_op) */        i %= (Bias + (P-1) - 1) + 1;
2183: /* MUTANT (rep_op) */        i -= (Bias - (P-1) - 1) + 1;
2183: /* MUTANT (rep_op) */        i -= (Bias * (P-1) - 1) + 1;
2183: /* MUTANT (rep_op) */        i -= (Bias % (P-1) - 1) + 1;
2183: /* MUTANT (rep_op) */        i -= (Bias + (P-1) - 1) - 1;
2183: /* MUTANT (rep_op) */        i -= (Bias + (P-1) - 1) * 1;
2183: /* MUTANT (rep_op) */        i -= (Bias + (P-1) - 1) % 1;
2183: /* MUTANT (rep_const) */        i -= (Bias + (P-0) - 1) + 1;
2183: /* MUTANT (rep_const) */        i -= (Bias + (P--1) - 1) + 1;
2183: /* MUTANT (rep_const) */        i -= (Bias + (P-((1)+1)) - 1) + 1;
2183: /* MUTANT (rep_const) */        i -= (Bias + (P-1) - 0) + 1;
2183: /* MUTANT (rep_const) */        i -= (Bias + (P-1) - -1) + 1;
2183: /* MUTANT (rep_const) */        i -= (Bias + (P-1) - ((1)+1)) + 1;
2183: /* MUTANT (rep_const) */        i -= (Bias + (P-1) - 1) + 0;
2183: /* MUTANT (rep_const) */        i -= (Bias + (P-1) - 1) + -1;
2183: /* MUTANT (rep_const) */        i -= (Bias + (P-1) - 1) + ((1)+1);
2184: /* MUTANT (del_stmt) */ /*         denorm = 1; */ 
2184: /* MUTANT (rep_const) */        denorm = 0;
2184: /* MUTANT (rep_const) */        denorm = -1;
2184: /* MUTANT (rep_const) */        denorm = ((1)+1);
2188: /* MUTANT (rep_op) */    ds = (d2-1.5)*0.289529654602168 - 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_op) */    ds = (d2-1.5)*0.289529654602168 * 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_op) */    ds = (d2-1.5)*0.289529654602168 % 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_op) */    ds = (d2-1.5)*0.289529654602168 + 0.1760912590558 - i*0.301029995663981;
2188: /* MUTANT (rep_op) */    ds = (d2-1.5)*0.289529654602168 + 0.1760912590558 * i*0.301029995663981;
2188: /* MUTANT (rep_op) */    ds = (d2-1.5)*0.289529654602168 + 0.1760912590558 % i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.0)*0.289529654602168 + 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.1)*0.289529654602168 + 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.-1)*0.289529654602168 + 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.((5)+1))*0.289529654602168 + 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.((5)-1))*0.289529654602168 + 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.0 + 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.1 + 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.-1 + 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.((289529654602168)+1) + 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.((289529654602168)-1) + 0.1760912590558 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.289529654602168 + 0.0 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.289529654602168 + 0.1 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.289529654602168 + 0.-1 + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.289529654602168 + 0.((1760912590558)+1) + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.289529654602168 + 0.((1760912590558)-1) + i*0.301029995663981;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.289529654602168 + 0.1760912590558 + i*0.0;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.289529654602168 + 0.1760912590558 + i*0.1;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.289529654602168 + 0.1760912590558 + i*0.-1;
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.289529654602168 + 0.1760912590558 + i*0.((301029995663981)+1);
2188: /* MUTANT (rep_const) */    ds = (d2-1.5)*0.289529654602168 + 0.1760912590558 + i*0.((301029995663981)-1);
2189: /* MUTANT (del_stmt) */ /*     k = (int32)ds; */ 
2190: /* MUTANT (rep_op) */    if (ds <= 0. && ds != k)
2190: /* MUTANT (rep_op) */    if (ds > 0. && ds != k)
2190: /* MUTANT (rep_op) */    if (ds >= 0. && ds != k)
2190: /* MUTANT (rep_op) */    if (ds == 0. && ds != k)
2190: /* MUTANT (rep_op) */    if (ds != 0. && ds != k)
2190: /* MUTANT (rep_op) */    if (ds < 0. || ds != k)
2190: /* MUTANT (rep_op) */    if (ds < 0. && ds == k)
2190: /* MUTANT (negate) */    if(! (ds < 0. && ds != k))
2191: /* MUTANT (rep_op) */        k++;    /* want k = floor(ds) */
2192: /* MUTANT (del_stmt) */ /*     k_check = 1; */ 
2192: /* MUTANT (rep_const) */    k_check = 0;
2192: /* MUTANT (rep_const) */    k_check = -1;
2192: /* MUTANT (rep_const) */    k_check = ((1)+1);
2193: /* MUTANT (rep_op) */    if (k <= 0 && k <= Ten_pmax) {
2193: /* MUTANT (rep_op) */    if (k < 0 && k <= Ten_pmax) {
2193: /* MUTANT (rep_op) */    if (k > 0 && k <= Ten_pmax) {
2193: /* MUTANT (rep_op) */    if (k == 0 && k <= Ten_pmax) {
2193: /* MUTANT (rep_op) */    if (k != 0 && k <= Ten_pmax) {
2193: /* MUTANT (rep_op) */    if (k >= 0 || k <= Ten_pmax) {
2193: /* MUTANT (rep_op) */    if (k >= 0 && k < Ten_pmax) {
2193: /* MUTANT (rep_op) */    if (k >= 0 && k > Ten_pmax) {
2193: /* MUTANT (rep_op) */    if (k >= 0 && k >= Ten_pmax) {
2193: /* MUTANT (rep_op) */    if (k >= 0 && k == Ten_pmax) {
2193: /* MUTANT (rep_op) */    if (k >= 0 && k != Ten_pmax) {
2193: /* MUTANT (rep_const) */    if (k >= 1 && k <= Ten_pmax) {
2193: /* MUTANT (rep_const) */    if (k >= -1 && k <= Ten_pmax) {
2193: /* MUTANT (negate) */    if(! (k >= 0 && k <= Ten_pmax)) {
2194: /* MUTANT (rep_op) */        if (d <= tens[k])
2194: /* MUTANT (rep_op) */        if (d > tens[k])
2194: /* MUTANT (rep_op) */        if (d >= tens[k])
2194: /* MUTANT (rep_op) */        if (d == tens[k])
2194: /* MUTANT (rep_op) */        if (d != tens[k])
2194: /* MUTANT (negate) */        if(! (d < tens[k]))
2195: /* MUTANT (rep_op) */            k++;
2196: /* MUTANT (del_stmt) */ /*         k_check = 0; */ 
2196: /* MUTANT (rep_const) */        k_check = 1;
2196: /* MUTANT (rep_const) */        k_check = -1;
2200: /* MUTANT (rep_const) */    j = bbits - i - 0;
2200: /* MUTANT (rep_const) */    j = bbits - i - -1;
2200: /* MUTANT (rep_const) */    j = bbits - i - ((1)+1);
2202: /* MUTANT (rep_op) */    if (j <= 0) {
2202: /* MUTANT (rep_op) */    if (j < 0) {
2202: /* MUTANT (rep_op) */    if (j > 0) {
2202: /* MUTANT (rep_op) */    if (j == 0) {
2202: /* MUTANT (rep_op) */    if (j != 0) {
2202: /* MUTANT (rep_const) */    if (j >= 1) {
2202: /* MUTANT (rep_const) */    if (j >= -1) {
2202: /* MUTANT (negate) */    if(! (j >= 0)) {
2203: /* MUTANT (del_stmt) */ /*         b2 = 0; */ 
2203: /* MUTANT (rep_const) */        b2 = 1;
2203: /* MUTANT (rep_const) */        b2 = -1;
2204: /* MUTANT (del_stmt) */ /*         s2 = j; */ 
2207: /* MUTANT (del_stmt) */ /*         b2 = -j; */ 
2208: /* MUTANT (del_stmt) */ /*         s2 = 0; */ 
2208: /* MUTANT (rep_const) */        s2 = 1;
2208: /* MUTANT (rep_const) */        s2 = -1;
2210: /* MUTANT (rep_op) */    if (k <= 0) {
2210: /* MUTANT (rep_op) */    if (k < 0) {
2210: /* MUTANT (rep_op) */    if (k > 0) {
2210: /* MUTANT (rep_op) */    if (k == 0) {
2210: /* MUTANT (rep_op) */    if (k != 0) {
2210: /* MUTANT (rep_const) */    if (k >= 1) {
2210: /* MUTANT (rep_const) */    if (k >= -1) {
2210: /* MUTANT (negate) */    if(! (k >= 0)) {
2211: /* MUTANT (del_stmt) */ /*         b5 = 0; */ 
2211: /* MUTANT (rep_const) */        b5 = 1;
2211: /* MUTANT (rep_const) */        b5 = -1;
2212: /* MUTANT (del_stmt) */ /*         s5 = k; */ 
2213: /* MUTANT (del_stmt) */ /*         s2 += k; */ 
2213: /* MUTANT (rep_op) */        s2 -= k;
2213: /* MUTANT (rep_op) */        s2 *= k;
2213: /* MUTANT (rep_op) */        s2 %= k;
2216: /* MUTANT (del_stmt) */ /*         b2 -= k; */ 
2216: /* MUTANT (rep_op) */        b2 += k;
2216: /* MUTANT (rep_op) */        b2 *= k;
2216: /* MUTANT (rep_op) */        b2 %= k;
2217: /* MUTANT (del_stmt) */ /*         b5 = -k; */ 
2218: /* MUTANT (del_stmt) */ /*         s5 = 0; */ 
2218: /* MUTANT (rep_const) */        s5 = 1;
2218: /* MUTANT (rep_const) */        s5 = -1;
2222: /* MUTANT (rep_op) */    if (mode <= 0 || mode > 9)
2222: /* MUTANT (rep_op) */    if (mode > 0 || mode > 9)
2222: /* MUTANT (rep_op) */    if (mode >= 0 || mode > 9)
2222: /* MUTANT (rep_op) */    if (mode == 0 || mode > 9)
2222: /* MUTANT (rep_op) */    if (mode != 0 || mode > 9)
2222: /* MUTANT (rep_op) */    if (mode < 0 && mode > 9)
2222: /* MUTANT (rep_op) */    if (mode < 0 || mode <= 9)
2222: /* MUTANT (rep_op) */    if (mode < 0 || mode < 9)
2222: /* MUTANT (rep_op) */    if (mode < 0 || mode >= 9)
2222: /* MUTANT (rep_op) */    if (mode < 0 || mode == 9)
2222: /* MUTANT (rep_op) */    if (mode < 0 || mode != 9)
2222: /* MUTANT (rep_const) */    if (mode < 1 || mode > 9)
2222: /* MUTANT (rep_const) */    if (mode < -1 || mode > 9)
2222: /* MUTANT (rep_const) */    if (mode < 0 || mode > 0)
2222: /* MUTANT (rep_const) */    if (mode < 0 || mode > 1)
2222: /* MUTANT (rep_const) */    if (mode < 0 || mode > -1)
2222: /* MUTANT (rep_const) */    if (mode < 0 || mode > ((9)+1))
2222: /* MUTANT (rep_const) */    if (mode < 0 || mode > ((9)-1))
2222: /* MUTANT (negate) */    if(! (mode < 0 || mode > 9))
2223: /* MUTANT (rep_const) */        mode = 1;
2223: /* MUTANT (rep_const) */        mode = -1;
2224: /* MUTANT (del_stmt) */ /*     try_quick = 1; */ 
2224: /* MUTANT (rep_const) */    try_quick = 0;
2224: /* MUTANT (rep_const) */    try_quick = -1;
2224: /* MUTANT (rep_const) */    try_quick = ((1)+1);
2225: /* MUTANT (rep_op) */    if (mode <= 5) {
2225: /* MUTANT (rep_op) */    if (mode < 5) {
2225: /* MUTANT (rep_op) */    if (mode >= 5) {
2225: /* MUTANT (rep_op) */    if (mode == 5) {
2225: /* MUTANT (rep_op) */    if (mode != 5) {
2225: /* MUTANT (rep_const) */    if (mode > 0) {
2225: /* MUTANT (rep_const) */    if (mode > 1) {
2225: /* MUTANT (rep_const) */    if (mode > -1) {
2225: /* MUTANT (rep_const) */    if (mode > ((5)+1)) {
2225: /* MUTANT (rep_const) */    if (mode > ((5)-1)) {
2225: /* MUTANT (negate) */    if(! (mode > 5)) {
2226: /* MUTANT (del_stmt) */ /*         mode -= 4; */ 
2226: /* MUTANT (rep_op) */        mode += 4;
2226: /* MUTANT (rep_op) */        mode *= 4;
2226: /* MUTANT (rep_op) */        mode %= 4;
2226: /* MUTANT (rep_const) */        mode -= 0;
2226: /* MUTANT (rep_const) */        mode -= 1;
2226: /* MUTANT (rep_const) */        mode -= -1;
2226: /* MUTANT (rep_const) */        mode -= ((4)+1);
2226: /* MUTANT (rep_const) */        mode -= ((4)-1);
2227: /* MUTANT (del_stmt) */ /*         try_quick = 0; */ 
2227: /* MUTANT (rep_const) */        try_quick = 1;
2227: /* MUTANT (rep_const) */        try_quick = -1;
2229: /* MUTANT (rep_const) */    leftright = 0;
2229: /* MUTANT (rep_const) */    leftright = -1;
2229: /* MUTANT (rep_const) */    leftright = ((1)+1);
2230: /* MUTANT (del_stmt) */ /*     ilim = ilim1 = 0; */ 
2230: /* MUTANT (rep_const) */    ilim = ilim1 = 1;
2230: /* MUTANT (rep_const) */    ilim = ilim1 = -1;
2232: /* MUTANT (rep_const) */    case 1:
2232: /* MUTANT (rep_const) */    case -1:
2233: /* MUTANT (rep_const) */    case 0:
2233: /* MUTANT (rep_const) */    case -1:
2233: /* MUTANT (rep_const) */    case ((1)+1):
2234: /* MUTANT (rep_const) */        ilim = ilim1 = 0;
2234: /* MUTANT (rep_const) */        ilim = ilim1 = 1;
2234: /* MUTANT (rep_const) */        ilim = ilim1 = ((-1)+1);
2234: /* MUTANT (rep_const) */        ilim = ilim1 = ((-1)-1);
2235: /* MUTANT (del_stmt) */ /*         i = 18; */ 
2235: /* MUTANT (rep_const) */        i = 0;
2235: /* MUTANT (rep_const) */        i = 1;
2235: /* MUTANT (rep_const) */        i = -1;
2235: /* MUTANT (rep_const) */        i = ((18)+1);
2235: /* MUTANT (rep_const) */        i = ((18)-1);
2236: /* MUTANT (del_stmt) */ /*         ndigits = 0; */ 
2236: /* MUTANT (rep_const) */        ndigits = 1;
2236: /* MUTANT (rep_const) */        ndigits = -1;
2237: /* MUTANT (del_stmt) */ /*         break; */ 
2238: /* MUTANT (rep_const) */    case 0:
2238: /* MUTANT (rep_const) */    case 1:
2238: /* MUTANT (rep_const) */    case -1:
2238: /* MUTANT (rep_const) */    case ((2)+1):
2238: /* MUTANT (rep_const) */    case ((2)-1):
2239: /* MUTANT (rep_const) */        leftright = 1;
2239: /* MUTANT (rep_const) */        leftright = -1;
2241: /* MUTANT (rep_const) */    case 0:
2241: /* MUTANT (rep_const) */    case 1:
2241: /* MUTANT (rep_const) */    case -1:
2241: /* MUTANT (rep_const) */    case ((4)+1):
2241: /* MUTANT (rep_const) */    case ((4)-1):
2242: /* MUTANT (rep_op) */        if (ndigits < 0)
2242: /* MUTANT (rep_op) */        if (ndigits > 0)
2242: /* MUTANT (rep_op) */        if (ndigits >= 0)
2242: /* MUTANT (rep_op) */        if (ndigits == 0)
2242: /* MUTANT (rep_op) */        if (ndigits != 0)
2242: /* MUTANT (rep_const) */        if (ndigits <= 1)
2242: /* MUTANT (rep_const) */        if (ndigits <= -1)
2242: /* MUTANT (negate) */        if(! (ndigits <= 0))
2243: /* MUTANT (rep_const) */            ndigits = 0;
2243: /* MUTANT (rep_const) */            ndigits = -1;
2243: /* MUTANT (rep_const) */            ndigits = ((1)+1);
2244: /* MUTANT (del_stmt) */ /*         ilim = ilim1 = i = ndigits; */ 
2245: /* MUTANT (del_stmt) */ /*         break; */ 
2246: /* MUTANT (rep_const) */    case 0:
2246: /* MUTANT (rep_const) */    case 1:
2246: /* MUTANT (rep_const) */    case -1:
2246: /* MUTANT (rep_const) */    case ((3)+1):
2246: /* MUTANT (rep_const) */    case ((3)-1):
2247: /* MUTANT (rep_const) */        leftright = 1;
2247: /* MUTANT (rep_const) */        leftright = -1;
2249: /* MUTANT (rep_const) */    case 0:
2249: /* MUTANT (rep_const) */    case 1:
2249: /* MUTANT (rep_const) */    case -1:
2249: /* MUTANT (rep_const) */    case ((5)+1):
2249: /* MUTANT (rep_const) */    case ((5)-1):
2250: /* MUTANT (rep_op) */        i = ndigits - k + 1;
2250: /* MUTANT (rep_op) */        i = ndigits * k + 1;
2250: /* MUTANT (rep_op) */        i = ndigits % k + 1;
2250: /* MUTANT (rep_op) */        i = ndigits + k - 1;
2250: /* MUTANT (rep_op) */        i = ndigits + k * 1;
2250: /* MUTANT (rep_op) */        i = ndigits + k % 1;
2250: /* MUTANT (rep_const) */        i = ndigits + k + 0;
2250: /* MUTANT (rep_const) */        i = ndigits + k + -1;
2250: /* MUTANT (rep_const) */        i = ndigits + k + ((1)+1);
2251: /* MUTANT (del_stmt) */ /*         ilim = i; */ 
2252: /* MUTANT (del_stmt) */ /*         ilim1 = i - 1; */ 
2252: /* MUTANT (rep_const) */        ilim1 = i - 0;
2252: /* MUTANT (rep_const) */        ilim1 = i - -1;
2252: /* MUTANT (rep_const) */        ilim1 = i - ((1)+1);
2253: /* MUTANT (rep_op) */        if (i < 0)
2253: /* MUTANT (rep_op) */        if (i > 0)
2253: /* MUTANT (rep_op) */        if (i >= 0)
2253: /* MUTANT (rep_op) */        if (i == 0)
2253: /* MUTANT (rep_op) */        if (i != 0)
2253: /* MUTANT (rep_const) */        if (i <= 1)
2253: /* MUTANT (rep_const) */        if (i <= -1)
2253: /* MUTANT (negate) */        if(! (i <= 0))
2254: /* MUTANT (rep_const) */            i = 0;
2254: /* MUTANT (rep_const) */            i = -1;
2254: /* MUTANT (rep_const) */            i = ((1)+1);
2261: /* MUTANT (rep_op) */    if (bufsize < (size_t)i) {
2261: /* MUTANT (rep_op) */    if (bufsize > (size_t)i) {
2261: /* MUTANT (rep_op) */    if (bufsize >= (size_t)i) {
2261: /* MUTANT (rep_op) */    if (bufsize == (size_t)i) {
2261: /* MUTANT (rep_op) */    if (bufsize != (size_t)i) {
2261: /* MUTANT (negate) */    if(! (bufsize <= (size_t)i)) {
2262: /* MUTANT (del_stmt) */ /*         Bfree(b); */ 
2263: /* MUTANT (del_stmt) */ /*         JS_ASSERT(JS_FALSE); */ 
2264: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
2268: /* MUTANT (rep_op) */    if (ilim <= 0 && ilim <= Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim < 0 && ilim <= Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim > 0 && ilim <= Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim == 0 && ilim <= Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim != 0 && ilim <= Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim >= 0 || ilim <= Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim >= 0 && ilim < Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim >= 0 && ilim > Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim >= 0 && ilim >= Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim >= 0 && ilim == Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim >= 0 && ilim != Quick_max && try_quick) {
2268: /* MUTANT (rep_op) */    if (ilim >= 0 && ilim <= Quick_max || try_quick) {
2268: /* MUTANT (rep_const) */    if (ilim >= 1 && ilim <= Quick_max && try_quick) {
2268: /* MUTANT (rep_const) */    if (ilim >= -1 && ilim <= Quick_max && try_quick) {
2268: /* MUTANT (negate) */    if(! (ilim >= 0 && ilim <= Quick_max && try_quick)) {
2272: /* MUTANT (del_stmt) */ /*         i = 0; */ 
2272: /* MUTANT (rep_const) */        i = 1;
2272: /* MUTANT (rep_const) */        i = -1;
2273: /* MUTANT (del_stmt) */ /*         d2 = d; */ 
2274: /* MUTANT (del_stmt) */ /*         k0 = k; */ 
2275: /* MUTANT (del_stmt) */ /*         ilim0 = ilim; */ 
2276: /* MUTANT (del_stmt) */ /*         ieps = 2; */  /* conservative */
2276: /* MUTANT (rep_const) */        ieps = 0; /* conservative */
2276: /* MUTANT (rep_const) */        ieps = 1; /* conservative */
2276: /* MUTANT (rep_const) */        ieps = -1; /* conservative */
2276: /* MUTANT (rep_const) */        ieps = ((2)+1); /* conservative */
2276: /* MUTANT (rep_const) */        ieps = ((2)-1); /* conservative */
2278: /* MUTANT (rep_op) */        if (k <= 0) {
2278: /* MUTANT (rep_op) */        if (k < 0) {
2278: /* MUTANT (rep_op) */        if (k >= 0) {
2278: /* MUTANT (rep_op) */        if (k == 0) {
2278: /* MUTANT (rep_op) */        if (k != 0) {
2278: /* MUTANT (rep_const) */        if (k > 1) {
2278: /* MUTANT (rep_const) */        if (k > -1) {
2278: /* MUTANT (negate) */        if(! (k > 0)) {
2279: /* MUTANT (del_stmt) */ /*             ds = tens[k&0xf]; */ 
2279: /* MUTANT (rep_const) */            ds = tens[k&1xf];
2279: /* MUTANT (rep_const) */            ds = tens[k&-1xf];
2280: /* MUTANT (del_stmt) */ /*             j = k >> 4; */ 
2280: /* MUTANT (rep_const) */            j = k >> 0;
2280: /* MUTANT (rep_const) */            j = k >> 1;
2280: /* MUTANT (rep_const) */            j = k >> -1;
2280: /* MUTANT (rep_const) */            j = k >> ((4)+1);
2280: /* MUTANT (rep_const) */            j = k >> ((4)-1);
2281: /* MUTANT (negate) */            if(! (j & Bletch)) {
2283: /* MUTANT (del_stmt) */ /*                 j &= Bletch - 1; */ 
2283: /* MUTANT (rep_const) */                j &= Bletch - 0;
2283: /* MUTANT (rep_const) */                j &= Bletch - -1;
2283: /* MUTANT (rep_const) */                j &= Bletch - ((1)+1);
2284: /* MUTANT (del_stmt) */ /*                 d /= bigtens[n_bigtens-1]; */ 
2284: /* MUTANT (rep_const) */                d /= bigtens[n_bigtens-0];
2284: /* MUTANT (rep_const) */                d /= bigtens[n_bigtens--1];
2284: /* MUTANT (rep_const) */                d /= bigtens[n_bigtens-((1)+1)];
2285: /* MUTANT (del_stmt) */ /*                 ieps++; */ 
2285: /* MUTANT (rep_op) */                ieps--;
2287: /* MUTANT (rep_op) */            for(; j; j >>= 1, i--)
2287: /* MUTANT (rep_const) */            for(; j; j >>= 0, i++)
2287: /* MUTANT (rep_const) */            for(; j; j >>= -1, i++)
2287: /* MUTANT (rep_const) */            for(; j; j >>= ((1)+1), i++)
2288: /* MUTANT (rep_const) */                if (j & 0) {
2288: /* MUTANT (rep_const) */                if (j & -1) {
2288: /* MUTANT (rep_const) */                if (j & ((1)+1)) {
2288: /* MUTANT (negate) */                if(! (j & 1)) {
2289: /* MUTANT (del_stmt) */ /*                     ieps++; */ 
2289: /* MUTANT (rep_op) */                    ieps--;
2290: /* MUTANT (del_stmt) */ /*                     ds *= bigtens[i]; */ 
2290: /* MUTANT (rep_op) */                    ds += bigtens[i];
2290: /* MUTANT (rep_op) */                    ds -= bigtens[i];
2290: /* MUTANT (rep_op) */                    ds %= bigtens[i];
2294: /* MUTANT (rep_op) */        else if ((j1 = -k) == 0) {
2294: /* MUTANT (rep_const) */        else if ((j1 = -k) != 1) {
2294: /* MUTANT (rep_const) */        else if ((j1 = -k) != -1) {
2294: /* MUTANT (negate) */        else if(! ((j1 = -k) != 0)) {
2295: /* MUTANT (del_stmt) */ /*             d *= tens[j1 & 0xf]; */ 
2295: /* MUTANT (rep_op) */            d += tens[j1 & 0xf];
2295: /* MUTANT (rep_op) */            d -= tens[j1 & 0xf];
2295: /* MUTANT (rep_op) */            d %= tens[j1 & 0xf];
2295: /* MUTANT (rep_const) */            d *= tens[j1 & 1xf];
2295: /* MUTANT (rep_const) */            d *= tens[j1 & -1xf];
2296: /* MUTANT (rep_op) */            for(j = j1 >> 4; j; j >>= 1, i--)
2296: /* MUTANT (rep_const) */            for(j = j1 >> 0; j; j >>= 1, i++)
2296: /* MUTANT (rep_const) */            for(j = j1 >> 1; j; j >>= 1, i++)
2296: /* MUTANT (rep_const) */            for(j = j1 >> -1; j; j >>= 1, i++)
2296: /* MUTANT (rep_const) */            for(j = j1 >> ((4)+1); j; j >>= 1, i++)
2296: /* MUTANT (rep_const) */            for(j = j1 >> ((4)-1); j; j >>= 1, i++)
2296: /* MUTANT (rep_const) */            for(j = j1 >> 4; j; j >>= 0, i++)
2296: /* MUTANT (rep_const) */            for(j = j1 >> 4; j; j >>= -1, i++)
2296: /* MUTANT (rep_const) */            for(j = j1 >> 4; j; j >>= ((1)+1), i++)
2297: /* MUTANT (rep_const) */                if (j & 0) {
2297: /* MUTANT (rep_const) */                if (j & -1) {
2297: /* MUTANT (rep_const) */                if (j & ((1)+1)) {
2297: /* MUTANT (negate) */                if(! (j & 1)) {
2298: /* MUTANT (del_stmt) */ /*                     ieps++; */ 
2298: /* MUTANT (rep_op) */                    ieps--;
2299: /* MUTANT (del_stmt) */ /*                     d *= bigtens[i]; */ 
2299: /* MUTANT (rep_op) */                    d += bigtens[i];
2299: /* MUTANT (rep_op) */                    d -= bigtens[i];
2299: /* MUTANT (rep_op) */                    d %= bigtens[i];
2303: /* MUTANT (rep_op) */        if (k_check || d < 1. && ilim > 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d <= 1. && ilim > 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d > 1. && ilim > 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d >= 1. && ilim > 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d == 1. && ilim > 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d != 1. && ilim > 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d < 1. || ilim > 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d < 1. && ilim <= 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d < 1. && ilim < 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d < 1. && ilim >= 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d < 1. && ilim == 0) {
2303: /* MUTANT (rep_op) */        if (k_check && d < 1. && ilim != 0) {
2303: /* MUTANT (rep_const) */        if (k_check && d < 1. && ilim > 1) {
2303: /* MUTANT (rep_const) */        if (k_check && d < 1. && ilim > -1) {
2303: /* MUTANT (negate) */        if(! (k_check && d < 1. && ilim > 0)) {
2304: /* MUTANT (rep_op) */            if (ilim1 < 0)
2304: /* MUTANT (rep_op) */            if (ilim1 > 0)
2304: /* MUTANT (rep_op) */            if (ilim1 >= 0)
2304: /* MUTANT (rep_op) */            if (ilim1 == 0)
2304: /* MUTANT (rep_op) */            if (ilim1 != 0)
2304: /* MUTANT (rep_const) */            if (ilim1 <= 1)
2304: /* MUTANT (rep_const) */            if (ilim1 <= -1)
2304: /* MUTANT (negate) */            if(! (ilim1 <= 0))
2306: /* MUTANT (del_stmt) */ /*             ilim = ilim1; */ 
2307: /* MUTANT (del_stmt) */ /*             k--; */ 
2307: /* MUTANT (rep_op) */            k++;
2308: /* MUTANT (del_stmt) */ /*             d *= 10.; */ 
2308: /* MUTANT (rep_op) */            d += 10.;
2308: /* MUTANT (rep_op) */            d -= 10.;
2308: /* MUTANT (rep_op) */            d %= 10.;
2309: /* MUTANT (del_stmt) */ /*             ieps++; */ 
2309: /* MUTANT (rep_op) */            ieps--;
2312: /* MUTANT (rep_op) */        eps = ieps*d - 7.;
2312: /* MUTANT (rep_op) */        eps = ieps*d * 7.;
2312: /* MUTANT (rep_op) */        eps = ieps*d % 7.;
2313: /* MUTANT (del_stmt) */ /*         set_word0(eps, word0(eps) - (P-1)*Exp_msk1); */ 
2313: /* MUTANT (rep_const) */        set_word0(eps, word0(eps) - (P-0)*Exp_msk1);
2313: /* MUTANT (rep_const) */        set_word0(eps, word0(eps) - (P--1)*Exp_msk1);
2313: /* MUTANT (rep_const) */        set_word0(eps, word0(eps) - (P-((1)+1))*Exp_msk1);
2314: /* MUTANT (rep_op) */        if (ilim != 0) {
2314: /* MUTANT (rep_const) */        if (ilim == 1) {
2314: /* MUTANT (rep_const) */        if (ilim == -1) {
2314: /* MUTANT (negate) */        if(! (ilim == 0)) {
2315: /* MUTANT (del_stmt) */ /*             S = mhi = 0; */ 
2315: /* MUTANT (rep_const) */            S = mhi = 1;
2315: /* MUTANT (rep_const) */            S = mhi = -1;
2316: /* MUTANT (del_stmt) */ /*             d -= 5.; */ 
2316: /* MUTANT (rep_op) */            d += 5.;
2316: /* MUTANT (rep_op) */            d *= 5.;
2316: /* MUTANT (rep_op) */            d %= 5.;
2317: /* MUTANT (rep_op) */            if (d <= eps)
2317: /* MUTANT (rep_op) */            if (d < eps)
2317: /* MUTANT (rep_op) */            if (d >= eps)
2317: /* MUTANT (rep_op) */            if (d == eps)
2317: /* MUTANT (rep_op) */            if (d != eps)
2317: /* MUTANT (negate) */            if(! (d > eps))
2319: /* MUTANT (rep_op) */            if (d <= -eps)
2319: /* MUTANT (rep_op) */            if (d > -eps)
2319: /* MUTANT (rep_op) */            if (d >= -eps)
2319: /* MUTANT (rep_op) */            if (d == -eps)
2319: /* MUTANT (rep_op) */            if (d != -eps)
2319: /* MUTANT (negate) */            if(! (d < -eps))
2321: /* MUTANT (del_stmt) */ /*             goto fast_failed; */ 
2324: /* MUTANT (negate) */        if(! (leftright)) {
2328: /* MUTANT (del_stmt) */ /*             eps = 0.5/tens[ilim-1] - eps; */ 
2328: /* MUTANT (rep_const) */            eps = 0.0/tens[ilim-1] - eps;
2328: /* MUTANT (rep_const) */            eps = 0.1/tens[ilim-1] - eps;
2328: /* MUTANT (rep_const) */            eps = 0.-1/tens[ilim-1] - eps;
2328: /* MUTANT (rep_const) */            eps = 0.((5)+1)/tens[ilim-1] - eps;
2328: /* MUTANT (rep_const) */            eps = 0.((5)-1)/tens[ilim-1] - eps;
2328: /* MUTANT (rep_const) */            eps = 0.5/tens[ilim-0] - eps;
2328: /* MUTANT (rep_const) */            eps = 0.5/tens[ilim--1] - eps;
2328: /* MUTANT (rep_const) */            eps = 0.5/tens[ilim-((1)+1)] - eps;
2329: /* MUTANT (rep_const) */            for(i = 1;;) {
2329: /* MUTANT (rep_const) */            for(i = -1;;) {
2330: /* MUTANT (del_stmt) */ /*                 L = (Long)d; */ 
2331: /* MUTANT (del_stmt) */ /*                 d -= L; */ 
2331: /* MUTANT (rep_op) */                d += L;
2331: /* MUTANT (rep_op) */                d *= L;
2331: /* MUTANT (rep_op) */                d %= L;
2332: /* MUTANT (del_stmt) */ /*                 *s++ = '0' + (char)L; */ 
2332: /* MUTANT (rep_op) */                *s-- = '0' + (char)L;
2332: /* MUTANT (rep_op) */                *s++ = '0' - (char)L;
2332: /* MUTANT (rep_op) */                *s++ = '0' * (char)L;
2332: /* MUTANT (rep_op) */                *s++ = '0' % (char)L;
2332: /* MUTANT (rep_const) */                *s++ = '1' + (char)L;
2332: /* MUTANT (rep_const) */                *s++ = '-1' + (char)L;
2333: /* MUTANT (rep_op) */                if (d <= eps)
2333: /* MUTANT (rep_op) */                if (d > eps)
2333: /* MUTANT (rep_op) */                if (d >= eps)
2333: /* MUTANT (rep_op) */                if (d == eps)
2333: /* MUTANT (rep_op) */                if (d != eps)
2333: /* MUTANT (negate) */                if(! (d < eps))
2335: /* MUTANT (rep_op) */                if (1. - d <= eps)
2335: /* MUTANT (rep_op) */                if (1. - d > eps)
2335: /* MUTANT (rep_op) */                if (1. - d >= eps)
2335: /* MUTANT (rep_op) */                if (1. - d == eps)
2335: /* MUTANT (rep_op) */                if (1. - d != eps)
2335: /* MUTANT (negate) */                if(! (1. - d < eps))
2337: /* MUTANT (rep_op) */                if (--i >= ilim)
2337: /* MUTANT (rep_op) */                if (++i <= ilim)
2337: /* MUTANT (rep_op) */                if (++i < ilim)
2337: /* MUTANT (rep_op) */                if (++i > ilim)
2337: /* MUTANT (rep_op) */                if (++i == ilim)
2337: /* MUTANT (rep_op) */                if (++i != ilim)
2337: /* MUTANT (negate) */                if(! (++i >= ilim))
2339: /* MUTANT (del_stmt) */ /*                 eps *= 10.; */ 
2339: /* MUTANT (rep_op) */                eps += 10.;
2339: /* MUTANT (rep_op) */                eps -= 10.;
2339: /* MUTANT (rep_op) */                eps %= 10.;
2340: /* MUTANT (del_stmt) */ /*                 d *= 10.; */ 
2340: /* MUTANT (rep_op) */                d += 10.;
2340: /* MUTANT (rep_op) */                d -= 10.;
2340: /* MUTANT (rep_op) */                d %= 10.;
2346: /* MUTANT (rep_op) */            eps += tens[ilim-1];
2346: /* MUTANT (rep_op) */            eps -= tens[ilim-1];
2346: /* MUTANT (rep_op) */            eps %= tens[ilim-1];
2346: /* MUTANT (rep_const) */            eps *= tens[ilim-0];
2346: /* MUTANT (rep_const) */            eps *= tens[ilim--1];
2346: /* MUTANT (rep_const) */            eps *= tens[ilim-((1)+1)];
2347: /* MUTANT (rep_op) */            for(i = 1;; i--, d *= 10.) {
2347: /* MUTANT (rep_op) */            for(i = 1;; i++, d += 10.) {
2347: /* MUTANT (rep_op) */            for(i = 1;; i++, d -= 10.) {
2347: /* MUTANT (rep_op) */            for(i = 1;; i++, d %= 10.) {
2347: /* MUTANT (rep_const) */            for(i = 0;; i++, d *= 10.) {
2347: /* MUTANT (rep_const) */            for(i = -1;; i++, d *= 10.) {
2347: /* MUTANT (rep_const) */            for(i = ((1)+1);; i++, d *= 10.) {
2348: /* MUTANT (del_stmt) */ /*                 L = (Long)d; */ 
2349: /* MUTANT (del_stmt) */ /*                 d -= L; */ 
2349: /* MUTANT (rep_op) */                d += L;
2349: /* MUTANT (rep_op) */                d *= L;
2349: /* MUTANT (rep_op) */                d %= L;
2350: /* MUTANT (del_stmt) */ /*                 *s++ = '0' + (char)L; */ 
2350: /* MUTANT (rep_op) */                *s-- = '0' + (char)L;
2350: /* MUTANT (rep_op) */                *s++ = '0' - (char)L;
2350: /* MUTANT (rep_op) */                *s++ = '0' * (char)L;
2350: /* MUTANT (rep_op) */                *s++ = '0' % (char)L;
2350: /* MUTANT (rep_const) */                *s++ = '1' + (char)L;
2350: /* MUTANT (rep_const) */                *s++ = '-1' + (char)L;
2351: /* MUTANT (rep_op) */                if (i != ilim) {
2351: /* MUTANT (negate) */                if(! (i == ilim)) {
2352: /* MUTANT (rep_op) */                    if (d <= 0.5 + eps)
2352: /* MUTANT (rep_op) */                    if (d < 0.5 + eps)
2352: /* MUTANT (rep_op) */                    if (d >= 0.5 + eps)
2352: /* MUTANT (rep_op) */                    if (d == 0.5 + eps)
2352: /* MUTANT (rep_op) */                    if (d != 0.5 + eps)
2352: /* MUTANT (rep_op) */                    if (d > 0.5 - eps)
2352: /* MUTANT (rep_op) */                    if (d > 0.5 * eps)
2352: /* MUTANT (rep_op) */                    if (d > 0.5 % eps)
2352: /* MUTANT (rep_const) */                    if (d > 0.0 + eps)
2352: /* MUTANT (rep_const) */                    if (d > 0.1 + eps)
2352: /* MUTANT (rep_const) */                    if (d > 0.-1 + eps)
2352: /* MUTANT (rep_const) */                    if (d > 0.((5)+1) + eps)
2352: /* MUTANT (rep_const) */                    if (d > 0.((5)-1) + eps)
2352: /* MUTANT (negate) */                    if(! (d > 0.5 + eps))
2354: /* MUTANT (rep_op) */                    else if (d <= 0.5 - eps) {
2354: /* MUTANT (rep_op) */                    else if (d > 0.5 - eps) {
2354: /* MUTANT (rep_op) */                    else if (d >= 0.5 - eps) {
2354: /* MUTANT (rep_op) */                    else if (d == 0.5 - eps) {
2354: /* MUTANT (rep_op) */                    else if (d != 0.5 - eps) {
2354: /* MUTANT (rep_const) */                    else if (d < 0.0 - eps) {
2354: /* MUTANT (rep_const) */                    else if (d < 0.1 - eps) {
2354: /* MUTANT (rep_const) */                    else if (d < 0.-1 - eps) {
2354: /* MUTANT (rep_const) */                    else if (d < 0.((5)+1) - eps) {
2354: /* MUTANT (rep_const) */                    else if (d < 0.((5)-1) - eps) {
2354: /* MUTANT (negate) */                    else if(! (d < 0.5 - eps)) {
2355: /* MUTANT (del_stmt) */ /*                         while(*--s == '0') ; */ 
2355: /* MUTANT (rep_op) */                        while(*--s != '0') ;
2355: /* MUTANT (rep_const) */                        while(*--s == '1') ;
2355: /* MUTANT (rep_const) */                        while(*--s == '-1') ;
2355: /* MUTANT (negate) */                        while(!(*--s == '0')) ;
2356: /* MUTANT (del_stmt) */ /*                         s++; */ 
2356: /* MUTANT (rep_op) */                        s--;
2357: /* MUTANT (del_stmt) */ /*                         goto ret1; */ 
2367: /* MUTANT (del_stmt) */ /*         d = d2; */ 
2368: /* MUTANT (del_stmt) */ /*         k = k0; */ 
2369: /* MUTANT (del_stmt) */ /*         ilim = ilim0; */ 
2374: /* MUTANT (rep_op) */    if (be <= 0 && k <= Int_max) {
2374: /* MUTANT (rep_op) */    if (be < 0 && k <= Int_max) {
2374: /* MUTANT (rep_op) */    if (be > 0 && k <= Int_max) {
2374: /* MUTANT (rep_op) */    if (be == 0 && k <= Int_max) {
2374: /* MUTANT (rep_op) */    if (be != 0 && k <= Int_max) {
2374: /* MUTANT (rep_op) */    if (be >= 0 || k <= Int_max) {
2374: /* MUTANT (rep_op) */    if (be >= 0 && k < Int_max) {
2374: /* MUTANT (rep_op) */    if (be >= 0 && k > Int_max) {
2374: /* MUTANT (rep_op) */    if (be >= 0 && k >= Int_max) {
2374: /* MUTANT (rep_op) */    if (be >= 0 && k == Int_max) {
2374: /* MUTANT (rep_op) */    if (be >= 0 && k != Int_max) {
2374: /* MUTANT (rep_const) */    if (be >= 1 && k <= Int_max) {
2374: /* MUTANT (rep_const) */    if (be >= -1 && k <= Int_max) {
2374: /* MUTANT (negate) */    if(! (be >= 0 && k <= Int_max)) {
2376: /* MUTANT (del_stmt) */ /*         ds = tens[k]; */ 
2377: /* MUTANT (rep_op) */        if (ndigits <= 0 && ilim <= 0) {
2377: /* MUTANT (rep_op) */        if (ndigits > 0 && ilim <= 0) {
2377: /* MUTANT (rep_op) */        if (ndigits >= 0 && ilim <= 0) {
2377: /* MUTANT (rep_op) */        if (ndigits == 0 && ilim <= 0) {
2377: /* MUTANT (rep_op) */        if (ndigits != 0 && ilim <= 0) {
2377: /* MUTANT (rep_op) */        if (ndigits < 0 || ilim <= 0) {
2377: /* MUTANT (rep_op) */        if (ndigits < 0 && ilim < 0) {
2377: /* MUTANT (rep_op) */        if (ndigits < 0 && ilim > 0) {
2377: /* MUTANT (rep_op) */        if (ndigits < 0 && ilim >= 0) {
2377: /* MUTANT (rep_op) */        if (ndigits < 0 && ilim == 0) {
2377: /* MUTANT (rep_op) */        if (ndigits < 0 && ilim != 0) {
2377: /* MUTANT (rep_const) */        if (ndigits < 1 && ilim <= 0) {
2377: /* MUTANT (rep_const) */        if (ndigits < -1 && ilim <= 0) {
2377: /* MUTANT (rep_const) */        if (ndigits < 0 && ilim <= 1) {
2377: /* MUTANT (rep_const) */        if (ndigits < 0 && ilim <= -1) {
2377: /* MUTANT (negate) */        if(! (ndigits < 0 && ilim <= 0)) {
2378: /* MUTANT (del_stmt) */ /*             S = mhi = 0; */ 
2378: /* MUTANT (rep_const) */            S = mhi = 1;
2378: /* MUTANT (rep_const) */            S = mhi = -1;
2379: /* MUTANT (rep_op) */            if (ilim <= 0 || d < 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim > 0 || d < 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim >= 0 || d < 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim == 0 || d < 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim != 0 || d < 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim < 0 && d < 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim < 0 || d <= 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim < 0 || d > 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim < 0 || d >= 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim < 0 || d == 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim < 0 || d != 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim < 0 || d < 5*ds && (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim < 0 || d < 5*ds || (!biasUp || d == 5*ds))
2379: /* MUTANT (rep_op) */            if (ilim < 0 || d < 5*ds || (!biasUp && d != 5*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 1 || d < 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_const) */            if (ilim < -1 || d < 5*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 0 || d < 0*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 0 || d < 1*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 0 || d < -1*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 0 || d < ((5)+1)*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 0 || d < ((5)-1)*ds || (!biasUp && d == 5*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 0 || d < 5*ds || (!biasUp && d == 0*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 0 || d < 5*ds || (!biasUp && d == 1*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 0 || d < 5*ds || (!biasUp && d == -1*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 0 || d < 5*ds || (!biasUp && d == ((5)+1)*ds))
2379: /* MUTANT (rep_const) */            if (ilim < 0 || d < 5*ds || (!biasUp && d == ((5)-1)*ds))
2379: /* MUTANT (negate) */            if(! (ilim < 0 || d < 5*ds || (!biasUp && d == 5*ds)))
2381: /* MUTANT (del_stmt) */ /*             goto one_digit; */ 
2385: /* MUTANT (rep_op) */        for(i = 1; i<k+1; i++) {
2385: /* MUTANT (rep_op) */        for(i = 1; i>k+1; i++) {
2385: /* MUTANT (rep_op) */        for(i = 1; i>=k+1; i++) {
2385: /* MUTANT (rep_op) */        for(i = 1; i==k+1; i++) {
2385: /* MUTANT (rep_op) */        for(i = 1; i!=k+1; i++) {
2385: /* MUTANT (rep_op) */        for(i = 1; i<=k-1; i++) {
2385: /* MUTANT (rep_op) */        for(i = 1; i<=k*1; i++) {
2385: /* MUTANT (rep_op) */        for(i = 1; i<=k%1; i++) {
2385: /* MUTANT (rep_op) */        for(i = 1; i<=k+1; i--) {
2385: /* MUTANT (rep_const) */        for(i = 0; i<=k+1; i++) {
2385: /* MUTANT (rep_const) */        for(i = -1; i<=k+1; i++) {
2385: /* MUTANT (rep_const) */        for(i = ((1)+1); i<=k+1; i++) {
2385: /* MUTANT (rep_const) */        for(i = 1; i<=k+0; i++) {
2385: /* MUTANT (rep_const) */        for(i = 1; i<=k+-1; i++) {
2385: /* MUTANT (rep_const) */        for(i = 1; i<=k+((1)+1); i++) {
2386: /* MUTANT (del_stmt) */ /*             L = (Long) (d / ds); */ 
2387: /* MUTANT (del_stmt) */ /*             d -= L*ds; */ 
2387: /* MUTANT (rep_op) */            d += L*ds;
2387: /* MUTANT (rep_op) */            d *= L*ds;
2387: /* MUTANT (rep_op) */            d %= L*ds;
2390: /* MUTANT (rep_op) */            if (d <= 0) {
2390: /* MUTANT (rep_op) */            if (d > 0) {
2390: /* MUTANT (rep_op) */            if (d >= 0) {
2390: /* MUTANT (rep_op) */            if (d == 0) {
2390: /* MUTANT (rep_op) */            if (d != 0) {
2390: /* MUTANT (rep_const) */            if (d < 1) {
2390: /* MUTANT (rep_const) */            if (d < -1) {
2390: /* MUTANT (negate) */            if(! (d < 0)) {
2391: /* MUTANT (del_stmt) */ /*                 L--; */ 
2391: /* MUTANT (rep_op) */                L++;
2392: /* MUTANT (del_stmt) */ /*                 d += ds; */ 
2392: /* MUTANT (rep_op) */                d -= ds;
2392: /* MUTANT (rep_op) */                d *= ds;
2392: /* MUTANT (rep_op) */                d %= ds;
2395: /* MUTANT (rep_op) */            *s-- = '0' + (char)L;
2395: /* MUTANT (rep_op) */            *s++ = '0' - (char)L;
2395: /* MUTANT (rep_op) */            *s++ = '0' * (char)L;
2395: /* MUTANT (rep_op) */            *s++ = '0' % (char)L;
2395: /* MUTANT (rep_const) */            *s++ = '1' + (char)L;
2395: /* MUTANT (rep_const) */            *s++ = '-1' + (char)L;
2396: /* MUTANT (rep_op) */            if (i != ilim) {
2396: /* MUTANT (negate) */            if(! (i == ilim)) {
2397: /* MUTANT (del_stmt) */ /*                 d += d; */ 
2397: /* MUTANT (rep_op) */                d -= d;
2397: /* MUTANT (rep_op) */                d *= d;
2397: /* MUTANT (rep_op) */                d %= d;
2398: /* MUTANT (rep_op) */                if ((d <= ds) || (d == ds && (L & 1 || biasUp))) {
2398: /* MUTANT (rep_op) */                if ((d < ds) || (d == ds && (L & 1 || biasUp))) {
2398: /* MUTANT (rep_op) */                if ((d >= ds) || (d == ds && (L & 1 || biasUp))) {
2398: /* MUTANT (rep_op) */                if ((d == ds) || (d == ds && (L & 1 || biasUp))) {
2398: /* MUTANT (rep_op) */                if ((d != ds) || (d == ds && (L & 1 || biasUp))) {
2398: /* MUTANT (rep_op) */                if ((d > ds) && (d == ds && (L & 1 || biasUp))) {
2398: /* MUTANT (rep_op) */                if ((d > ds) || (d != ds && (L & 1 || biasUp))) {
2398: /* MUTANT (rep_op) */                if ((d > ds) || (d == ds || (L & 1 || biasUp))) {
2398: /* MUTANT (rep_op) */                if ((d > ds) || (d == ds && (L & 1 && biasUp))) {
2398: /* MUTANT (rep_const) */                if ((d > ds) || (d == ds && (L & 0 || biasUp))) {
2398: /* MUTANT (rep_const) */                if ((d > ds) || (d == ds && (L & -1 || biasUp))) {
2398: /* MUTANT (rep_const) */                if ((d > ds) || (d == ds && (L & ((1)+1) || biasUp))) {
2398: /* MUTANT (negate) */                if(! ((d > ds) || (d == ds && (L & 1 || biasUp)))) {
2400: /* MUTANT (rep_op) */                    while(*--s != '9')
2400: /* MUTANT (rep_const) */                    while(*--s == '0')
2400: /* MUTANT (rep_const) */                    while(*--s == '1')
2400: /* MUTANT (rep_const) */                    while(*--s == '-1')
2400: /* MUTANT (rep_const) */                    while(*--s == '((9)+1)')
2400: /* MUTANT (rep_const) */                    while(*--s == '((9)-1)')
2400: /* MUTANT (negate) */                    while(!(*--s == '9'))
2401: /* MUTANT (rep_op) */                        if (s != buf) {
2401: /* MUTANT (negate) */                        if(! (s == buf)) {
2402: /* MUTANT (del_stmt) */ /*                             k++; */ 
2402: /* MUTANT (rep_op) */                            k--;
2403: /* MUTANT (del_stmt) */ /*                             *s = '0'; */ 
2403: /* MUTANT (rep_const) */                            *s = '1';
2403: /* MUTANT (rep_const) */                            *s = '-1';
2404: /* MUTANT (del_stmt) */ /*                             break; */ 
2406: /* MUTANT (rep_op) */                    ++*s--;
2410: /* MUTANT (rep_op) */            d += 10.;
2410: /* MUTANT (rep_op) */            d -= 10.;
2410: /* MUTANT (rep_op) */            d %= 10.;
2416: /* MUTANT (del_stmt) */ /*     m5 = b5; */ 
2417: /* MUTANT (negate) */    if(! (leftright)) {
2418: /* MUTANT (rep_op) */        if (mode <= 2) {
2418: /* MUTANT (rep_op) */        if (mode > 2) {
2418: /* MUTANT (rep_op) */        if (mode >= 2) {
2418: /* MUTANT (rep_op) */        if (mode == 2) {
2418: /* MUTANT (rep_op) */        if (mode != 2) {
2418: /* MUTANT (rep_const) */        if (mode < 0) {
2418: /* MUTANT (rep_const) */        if (mode < 1) {
2418: /* MUTANT (rep_const) */        if (mode < -1) {
2418: /* MUTANT (rep_const) */        if (mode < ((2)+1)) {
2418: /* MUTANT (rep_const) */        if (mode < ((2)-1)) {
2418: /* MUTANT (negate) */        if(! (mode < 2)) {
2421: /* MUTANT (rep_op) */                denorm ? be - (Bias + (P-1) - 1 + 1) :
2421: /* MUTANT (rep_op) */                denorm ? be * (Bias + (P-1) - 1 + 1) :
2421: /* MUTANT (rep_op) */                denorm ? be % (Bias + (P-1) - 1 + 1) :
2421: /* MUTANT (rep_op) */                denorm ? be + (Bias - (P-1) - 1 + 1) :
2421: /* MUTANT (rep_op) */                denorm ? be + (Bias * (P-1) - 1 + 1) :
2421: /* MUTANT (rep_op) */                denorm ? be + (Bias % (P-1) - 1 + 1) :
2421: /* MUTANT (rep_op) */                denorm ? be + (Bias + (P-1) - 1 - 1) :
2421: /* MUTANT (rep_op) */                denorm ? be + (Bias + (P-1) - 1 * 1) :
2421: /* MUTANT (rep_op) */                denorm ? be + (Bias + (P-1) - 1 % 1) :
2421: /* MUTANT (rep_const) */                denorm ? be + (Bias + (P-0) - 1 + 1) :
2421: /* MUTANT (rep_const) */                denorm ? be + (Bias + (P--1) - 1 + 1) :
2421: /* MUTANT (rep_const) */                denorm ? be + (Bias + (P-((1)+1)) - 1 + 1) :
2421: /* MUTANT (rep_const) */                denorm ? be + (Bias + (P-1) - 0 + 1) :
2421: /* MUTANT (rep_const) */                denorm ? be + (Bias + (P-1) - -1 + 1) :
2421: /* MUTANT (rep_const) */                denorm ? be + (Bias + (P-1) - ((1)+1) + 1) :
2421: /* MUTANT (rep_const) */                denorm ? be + (Bias + (P-1) - 1 + 0) :
2421: /* MUTANT (rep_const) */                denorm ? be + (Bias + (P-1) - 1 + -1) :
2421: /* MUTANT (rep_const) */                denorm ? be + (Bias + (P-1) - 1 + ((1)+1)) :
2423: /* MUTANT (rep_op) */            1 - P - bbits;
2423: /* MUTANT (rep_op) */            1 * P - bbits;
2423: /* MUTANT (rep_op) */            1 % P - bbits;
2423: /* MUTANT (rep_const) */            0 + P - bbits;
2423: /* MUTANT (rep_const) */            -1 + P - bbits;
2423: /* MUTANT (rep_const) */            ((1)+1) + P - bbits;
2428: /* MUTANT (del_stmt) */ /*             j = ilim - 1; */ 
2428: /* MUTANT (rep_const) */            j = ilim - 0;
2428: /* MUTANT (rep_const) */            j = ilim - -1;
2428: /* MUTANT (rep_const) */            j = ilim - ((1)+1);
2429: /* MUTANT (rep_op) */            if (m5 <= j)
2429: /* MUTANT (rep_op) */            if (m5 < j)
2429: /* MUTANT (rep_op) */            if (m5 > j)
2429: /* MUTANT (rep_op) */            if (m5 == j)
2429: /* MUTANT (rep_op) */            if (m5 != j)
2429: /* MUTANT (negate) */            if(! (m5 >= j))
2430: /* MUTANT (rep_op) */                m5 += j;
2430: /* MUTANT (rep_op) */                m5 *= j;
2430: /* MUTANT (rep_op) */                m5 %= j;
2432: /* MUTANT (del_stmt) */ /*                 s5 += j -= m5; */ 
2432: /* MUTANT (rep_op) */                s5 -= j -= m5;
2432: /* MUTANT (rep_op) */                s5 *= j -= m5;
2432: /* MUTANT (rep_op) */                s5 %= j -= m5;
2432: /* MUTANT (rep_op) */                s5 += j += m5;
2432: /* MUTANT (rep_op) */                s5 += j *= m5;
2432: /* MUTANT (rep_op) */                s5 += j %= m5;
2433: /* MUTANT (del_stmt) */ /*                 b5 += j; */ 
2433: /* MUTANT (rep_op) */                b5 -= j;
2433: /* MUTANT (rep_op) */                b5 *= j;
2433: /* MUTANT (rep_op) */                b5 %= j;
2434: /* MUTANT (del_stmt) */ /*                 m5 = 0; */ 
2434: /* MUTANT (rep_const) */                m5 = 1;
2434: /* MUTANT (rep_const) */                m5 = -1;
2436: /* MUTANT (rep_op) */            if ((i = ilim) <= 0) {
2436: /* MUTANT (rep_op) */            if ((i = ilim) > 0) {
2436: /* MUTANT (rep_op) */            if ((i = ilim) >= 0) {
2436: /* MUTANT (rep_op) */            if ((i = ilim) == 0) {
2436: /* MUTANT (rep_op) */            if ((i = ilim) != 0) {
2436: /* MUTANT (rep_const) */            if ((i = ilim) < 1) {
2436: /* MUTANT (rep_const) */            if ((i = ilim) < -1) {
2436: /* MUTANT (negate) */            if(! ((i = ilim) < 0)) {
2437: /* MUTANT (del_stmt) */ /*                 m2 -= i; */ 
2437: /* MUTANT (rep_op) */                m2 += i;
2437: /* MUTANT (rep_op) */                m2 *= i;
2437: /* MUTANT (rep_op) */                m2 %= i;
2438: /* MUTANT (del_stmt) */ /*                 i = 0; */ 
2438: /* MUTANT (rep_const) */                i = 1;
2438: /* MUTANT (rep_const) */                i = -1;
2442: /* MUTANT (rep_op) */        b2 -= i;
2442: /* MUTANT (rep_op) */        b2 *= i;
2442: /* MUTANT (rep_op) */        b2 %= i;
2443: /* MUTANT (del_stmt) */ /*         s2 += i; */ 
2443: /* MUTANT (rep_op) */        s2 -= i;
2443: /* MUTANT (rep_op) */        s2 *= i;
2443: /* MUTANT (rep_op) */        s2 %= i;
2444: /* MUTANT (del_stmt) */ /*         mhi = i2b(1); */ 
2444: /* MUTANT (rep_const) */        mhi = i2b(0);
2444: /* MUTANT (rep_const) */        mhi = i2b(-1);
2444: /* MUTANT (rep_const) */        mhi = i2b(((1)+1));
2445: /* MUTANT (negate) */        if(! (!mhi))
2452: /* MUTANT (rep_op) */    if (m2 <= 0 && s2 > 0) {
2452: /* MUTANT (rep_op) */    if (m2 < 0 && s2 > 0) {
2452: /* MUTANT (rep_op) */    if (m2 >= 0 && s2 > 0) {
2452: /* MUTANT (rep_op) */    if (m2 == 0 && s2 > 0) {
2452: /* MUTANT (rep_op) */    if (m2 != 0 && s2 > 0) {
2452: /* MUTANT (rep_op) */    if (m2 > 0 || s2 > 0) {
2452: /* MUTANT (rep_op) */    if (m2 > 0 && s2 <= 0) {
2452: /* MUTANT (rep_op) */    if (m2 > 0 && s2 < 0) {
2452: /* MUTANT (rep_op) */    if (m2 > 0 && s2 >= 0) {
2452: /* MUTANT (rep_op) */    if (m2 > 0 && s2 == 0) {
2452: /* MUTANT (rep_op) */    if (m2 > 0 && s2 != 0) {
2452: /* MUTANT (rep_const) */    if (m2 > 1 && s2 > 0) {
2452: /* MUTANT (rep_const) */    if (m2 > -1 && s2 > 0) {
2452: /* MUTANT (rep_const) */    if (m2 > 0 && s2 > 1) {
2452: /* MUTANT (rep_const) */    if (m2 > 0 && s2 > -1) {
2452: /* MUTANT (negate) */    if(! (m2 > 0 && s2 > 0)) {
2453: /* MUTANT (del_stmt) */ /*         i = m2 < s2 ? m2 : s2; */ 
2453: /* MUTANT (rep_op) */        i = m2 <= s2 ? m2 : s2;
2453: /* MUTANT (rep_op) */        i = m2 > s2 ? m2 : s2;
2453: /* MUTANT (rep_op) */        i = m2 >= s2 ? m2 : s2;
2453: /* MUTANT (rep_op) */        i = m2 == s2 ? m2 : s2;
2453: /* MUTANT (rep_op) */        i = m2 != s2 ? m2 : s2;
2454: /* MUTANT (del_stmt) */ /*         b2 -= i; */ 
2454: /* MUTANT (rep_op) */        b2 += i;
2454: /* MUTANT (rep_op) */        b2 *= i;
2454: /* MUTANT (rep_op) */        b2 %= i;
2455: /* MUTANT (del_stmt) */ /*         m2 -= i; */ 
2455: /* MUTANT (rep_op) */        m2 += i;
2455: /* MUTANT (rep_op) */        m2 *= i;
2455: /* MUTANT (rep_op) */        m2 %= i;
2456: /* MUTANT (del_stmt) */ /*         s2 -= i; */ 
2456: /* MUTANT (rep_op) */        s2 += i;
2456: /* MUTANT (rep_op) */        s2 *= i;
2456: /* MUTANT (rep_op) */        s2 %= i;
2460: /* MUTANT (rep_op) */    if (b5 <= 0) {
2460: /* MUTANT (rep_op) */    if (b5 < 0) {
2460: /* MUTANT (rep_op) */    if (b5 >= 0) {
2460: /* MUTANT (rep_op) */    if (b5 == 0) {
2460: /* MUTANT (rep_op) */    if (b5 != 0) {
2460: /* MUTANT (rep_const) */    if (b5 > 1) {
2460: /* MUTANT (rep_const) */    if (b5 > -1) {
2460: /* MUTANT (negate) */    if(! (b5 > 0)) {
2461: /* MUTANT (negate) */        if(! (leftright)) {
2462: /* MUTANT (rep_op) */            if (m5 <= 0) {
2462: /* MUTANT (rep_op) */            if (m5 < 0) {
2462: /* MUTANT (rep_op) */            if (m5 >= 0) {
2462: /* MUTANT (rep_op) */            if (m5 == 0) {
2462: /* MUTANT (rep_op) */            if (m5 != 0) {
2462: /* MUTANT (rep_const) */            if (m5 > 1) {
2462: /* MUTANT (rep_const) */            if (m5 > -1) {
2462: /* MUTANT (negate) */            if(! (m5 > 0)) {
2463: /* MUTANT (del_stmt) */ /*                 mhi = pow5mult(mhi, m5); */ 
2464: /* MUTANT (negate) */                if(! (!mhi))
2466: /* MUTANT (del_stmt) */ /*                 b1 = mult(mhi, b); */ 
2467: /* MUTANT (negate) */                if(! (!b1))
2469: /* MUTANT (del_stmt) */ /*                 Bfree(b); */ 
2470: /* MUTANT (del_stmt) */ /*                 b = b1; */ 
2472: /* MUTANT (rep_op) */            if ((j = b5 - m5) == 0) {
2472: /* MUTANT (rep_const) */            if ((j = b5 - m5) != 1) {
2472: /* MUTANT (rep_const) */            if ((j = b5 - m5) != -1) {
2472: /* MUTANT (negate) */            if(! ((j = b5 - m5) != 0)) {
2473: /* MUTANT (del_stmt) */ /*                 b = pow5mult(b, j); */ 
2474: /* MUTANT (negate) */                if(! (!b))
2479: /* MUTANT (del_stmt) */ /*             b = pow5mult(b, b5); */ 
2480: /* MUTANT (negate) */            if(! (!b))
2487: /* MUTANT (rep_const) */    S = i2b(0);
2487: /* MUTANT (rep_const) */    S = i2b(-1);
2487: /* MUTANT (rep_const) */    S = i2b(((1)+1));
2488: /* MUTANT (negate) */    if(! (!S))
2490: /* MUTANT (rep_op) */    if (s5 <= 0) {
2490: /* MUTANT (rep_op) */    if (s5 < 0) {
2490: /* MUTANT (rep_op) */    if (s5 >= 0) {
2490: /* MUTANT (rep_op) */    if (s5 == 0) {
2490: /* MUTANT (rep_op) */    if (s5 != 0) {
2490: /* MUTANT (rep_const) */    if (s5 > 1) {
2490: /* MUTANT (rep_const) */    if (s5 > -1) {
2490: /* MUTANT (negate) */    if(! (s5 > 0)) {
2491: /* MUTANT (del_stmt) */ /*         S = pow5mult(S, s5); */ 
2492: /* MUTANT (negate) */        if(! (!S))
2499: /* MUTANT (rep_const) */    spec_case = 1;
2499: /* MUTANT (rep_const) */    spec_case = -1;
2500: /* MUTANT (rep_op) */    if (mode <= 2) {
2500: /* MUTANT (rep_op) */    if (mode > 2) {
2500: /* MUTANT (rep_op) */    if (mode >= 2) {
2500: /* MUTANT (rep_op) */    if (mode == 2) {
2500: /* MUTANT (rep_op) */    if (mode != 2) {
2500: /* MUTANT (rep_const) */    if (mode < 0) {
2500: /* MUTANT (rep_const) */    if (mode < 1) {
2500: /* MUTANT (rep_const) */    if (mode < -1) {
2500: /* MUTANT (rep_const) */    if (mode < ((2)+1)) {
2500: /* MUTANT (rep_const) */    if (mode < ((2)-1)) {
2500: /* MUTANT (negate) */    if(! (mode < 2)) {
2501: /* MUTANT (rep_op) */        if (!word1(d) || !(word0(d) & Bndry_mask)
2503: /* MUTANT (rep_op) */            || word0(d) & (Exp_mask & Exp_mask << 1)
2503: /* MUTANT (rep_const) */            && word0(d) & (Exp_mask & Exp_mask << 0)
2503: /* MUTANT (rep_const) */            && word0(d) & (Exp_mask & Exp_mask << -1)
2503: /* MUTANT (rep_const) */            && word0(d) & (Exp_mask & Exp_mask << ((1)+1))
2508: /* MUTANT (del_stmt) */ /*             b2 += Log2P; */ 
2508: /* MUTANT (rep_op) */            b2 -= Log2P;
2508: /* MUTANT (rep_op) */            b2 *= Log2P;
2508: /* MUTANT (rep_op) */            b2 %= Log2P;
2509: /* MUTANT (del_stmt) */ /*             s2 += Log2P; */ 
2509: /* MUTANT (rep_op) */            s2 -= Log2P;
2509: /* MUTANT (rep_op) */            s2 *= Log2P;
2509: /* MUTANT (rep_op) */            s2 %= Log2P;
2510: /* MUTANT (del_stmt) */ /*             spec_case = 1; */ 
2510: /* MUTANT (rep_const) */            spec_case = 0;
2510: /* MUTANT (rep_const) */            spec_case = -1;
2510: /* MUTANT (rep_const) */            spec_case = ((1)+1);
2521: /* MUTANT (rep_op) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) - s2) & 0x1f) != 0)
2521: /* MUTANT (rep_op) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) * s2) & 0x1f) != 0)
2521: /* MUTANT (rep_op) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) % s2) & 0x1f) != 0)
2521: /* MUTANT (rep_op) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f) == 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 0 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 1 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? -1 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? ((32)+1) - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? ((32)-1) - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-0]) : 1) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds--1]) : 1) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-((1)+1)]) : 1) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 0) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : -1) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : ((1)+1)) + s2) & 0x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 1x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) + s2) & -1x1f) != 0)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f) != 1)
2521: /* MUTANT (rep_const) */    if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f) != -1)
2521: /* MUTANT (negate) */    if(! ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f) != 0))
2522: /* MUTANT (rep_const) */        i = 0 - i;
2522: /* MUTANT (rep_const) */        i = 1 - i;
2522: /* MUTANT (rep_const) */        i = -1 - i;
2522: /* MUTANT (rep_const) */        i = ((32)+1) - i;
2522: /* MUTANT (rep_const) */        i = ((32)-1) - i;
2524: /* MUTANT (rep_op) */    if (i <= 4) {
2524: /* MUTANT (rep_op) */    if (i < 4) {
2524: /* MUTANT (rep_op) */    if (i >= 4) {
2524: /* MUTANT (rep_op) */    if (i == 4) {
2524: /* MUTANT (rep_op) */    if (i != 4) {
2524: /* MUTANT (rep_const) */    if (i > 0) {
2524: /* MUTANT (rep_const) */    if (i > 1) {
2524: /* MUTANT (rep_const) */    if (i > -1) {
2524: /* MUTANT (rep_const) */    if (i > ((4)+1)) {
2524: /* MUTANT (rep_const) */    if (i > ((4)-1)) {
2524: /* MUTANT (negate) */    if(! (i > 4)) {
2525: /* MUTANT (del_stmt) */ /*         i -= 4; */ 
2525: /* MUTANT (rep_op) */        i += 4;
2525: /* MUTANT (rep_op) */        i *= 4;
2525: /* MUTANT (rep_op) */        i %= 4;
2525: /* MUTANT (rep_const) */        i -= 0;
2525: /* MUTANT (rep_const) */        i -= 1;
2525: /* MUTANT (rep_const) */        i -= -1;
2525: /* MUTANT (rep_const) */        i -= ((4)+1);
2525: /* MUTANT (rep_const) */        i -= ((4)-1);
2526: /* MUTANT (del_stmt) */ /*         b2 += i; */ 
2526: /* MUTANT (rep_op) */        b2 -= i;
2526: /* MUTANT (rep_op) */        b2 *= i;
2526: /* MUTANT (rep_op) */        b2 %= i;
2527: /* MUTANT (del_stmt) */ /*         m2 += i; */ 
2527: /* MUTANT (rep_op) */        m2 -= i;
2527: /* MUTANT (rep_op) */        m2 *= i;
2527: /* MUTANT (rep_op) */        m2 %= i;
2528: /* MUTANT (del_stmt) */ /*         s2 += i; */ 
2528: /* MUTANT (rep_op) */        s2 -= i;
2528: /* MUTANT (rep_op) */        s2 *= i;
2528: /* MUTANT (rep_op) */        s2 %= i;
2530: /* MUTANT (rep_op) */    else if (i <= 4) {
2530: /* MUTANT (rep_op) */    else if (i > 4) {
2530: /* MUTANT (rep_op) */    else if (i >= 4) {
2530: /* MUTANT (rep_op) */    else if (i == 4) {
2530: /* MUTANT (rep_op) */    else if (i != 4) {
2530: /* MUTANT (rep_const) */    else if (i < 0) {
2530: /* MUTANT (rep_const) */    else if (i < 1) {
2530: /* MUTANT (rep_const) */    else if (i < -1) {
2530: /* MUTANT (rep_const) */    else if (i < ((4)+1)) {
2530: /* MUTANT (rep_const) */    else if (i < ((4)-1)) {
2530: /* MUTANT (negate) */    else if(! (i < 4)) {
2531: /* MUTANT (del_stmt) */ /*         i += 28; */ 
2531: /* MUTANT (rep_op) */        i -= 28;
2531: /* MUTANT (rep_op) */        i *= 28;
2531: /* MUTANT (rep_op) */        i %= 28;
2531: /* MUTANT (rep_const) */        i += 0;
2531: /* MUTANT (rep_const) */        i += 1;
2531: /* MUTANT (rep_const) */        i += -1;
2531: /* MUTANT (rep_const) */        i += ((28)+1);
2531: /* MUTANT (rep_const) */        i += ((28)-1);
2532: /* MUTANT (del_stmt) */ /*         b2 += i; */ 
2532: /* MUTANT (rep_op) */        b2 -= i;
2532: /* MUTANT (rep_op) */        b2 *= i;
2532: /* MUTANT (rep_op) */        b2 %= i;
2533: /* MUTANT (del_stmt) */ /*         m2 += i; */ 
2533: /* MUTANT (rep_op) */        m2 -= i;
2533: /* MUTANT (rep_op) */        m2 *= i;
2533: /* MUTANT (rep_op) */        m2 %= i;
2534: /* MUTANT (del_stmt) */ /*         s2 += i; */ 
2534: /* MUTANT (rep_op) */        s2 -= i;
2534: /* MUTANT (rep_op) */        s2 *= i;
2534: /* MUTANT (rep_op) */        s2 %= i;
2537: /* MUTANT (rep_op) */    if (b2 <= 0) {
2537: /* MUTANT (rep_op) */    if (b2 < 0) {
2537: /* MUTANT (rep_op) */    if (b2 >= 0) {
2537: /* MUTANT (rep_op) */    if (b2 == 0) {
2537: /* MUTANT (rep_op) */    if (b2 != 0) {
2537: /* MUTANT (rep_const) */    if (b2 > 1) {
2537: /* MUTANT (rep_const) */    if (b2 > -1) {
2537: /* MUTANT (negate) */    if(! (b2 > 0)) {
2538: /* MUTANT (del_stmt) */ /*         b = lshift(b, b2); */ 
2538: /* MUTANT (negate) */        b = lshif(!t(b, b2));
2539: /* MUTANT (negate) */        if(! (!b))
2542: /* MUTANT (rep_op) */    if (s2 <= 0) {
2542: /* MUTANT (rep_op) */    if (s2 < 0) {
2542: /* MUTANT (rep_op) */    if (s2 >= 0) {
2542: /* MUTANT (rep_op) */    if (s2 == 0) {
2542: /* MUTANT (rep_op) */    if (s2 != 0) {
2542: /* MUTANT (rep_const) */    if (s2 > 1) {
2542: /* MUTANT (rep_const) */    if (s2 > -1) {
2542: /* MUTANT (negate) */    if(! (s2 > 0)) {
2543: /* MUTANT (del_stmt) */ /*         S = lshift(S, s2); */ 
2543: /* MUTANT (negate) */        S = lshif(!t(S, s2));
2544: /* MUTANT (negate) */        if(! (!S))
2549: /* MUTANT (negate) */    if(! (k_check)) {
2550: /* MUTANT (rep_op) */        if (cmp(b,S) <= 0) {
2550: /* MUTANT (rep_op) */        if (cmp(b,S) > 0) {
2550: /* MUTANT (rep_op) */        if (cmp(b,S) >= 0) {
2550: /* MUTANT (rep_op) */        if (cmp(b,S) == 0) {
2550: /* MUTANT (rep_op) */        if (cmp(b,S) != 0) {
2550: /* MUTANT (rep_const) */        if (cmp(b,S) < 1) {
2550: /* MUTANT (rep_const) */        if (cmp(b,S) < -1) {
2550: /* MUTANT (negate) */        if(! (cmp(b,S) < 0)) {
2551: /* MUTANT (del_stmt) */ /*             k--; */ 
2551: /* MUTANT (rep_op) */            k++;
2552: /* MUTANT (del_stmt) */ /*             b = multadd(b, 10, 0); */   /* we botched the k estimate */
2552: /* MUTANT (rep_const) */            b = multadd(b, 0, 0);  /* we botched the k estimate */
2552: /* MUTANT (rep_const) */            b = multadd(b, 1, 0);  /* we botched the k estimate */
2552: /* MUTANT (rep_const) */            b = multadd(b, -1, 0);  /* we botched the k estimate */
2552: /* MUTANT (rep_const) */            b = multadd(b, ((10)+1), 0);  /* we botched the k estimate */
2552: /* MUTANT (rep_const) */            b = multadd(b, ((10)-1), 0);  /* we botched the k estimate */
2552: /* MUTANT (rep_const) */            b = multadd(b, 10, 1);  /* we botched the k estimate */
2552: /* MUTANT (rep_const) */            b = multadd(b, 10, -1);  /* we botched the k estimate */
2553: /* MUTANT (negate) */            if(! (!b))
2555: /* MUTANT (negate) */            if(! (leftright)) {
2556: /* MUTANT (del_stmt) */ /*                 mhi = multadd(mhi, 10, 0); */ 
2556: /* MUTANT (rep_const) */                mhi = multadd(mhi, 0, 0);
2556: /* MUTANT (rep_const) */                mhi = multadd(mhi, 1, 0);
2556: /* MUTANT (rep_const) */                mhi = multadd(mhi, -1, 0);
2556: /* MUTANT (rep_const) */                mhi = multadd(mhi, ((10)+1), 0);
2556: /* MUTANT (rep_const) */                mhi = multadd(mhi, ((10)-1), 0);
2556: /* MUTANT (rep_const) */                mhi = multadd(mhi, 10, 1);
2556: /* MUTANT (rep_const) */                mhi = multadd(mhi, 10, -1);
2557: /* MUTANT (negate) */                if(! (!mhi))
2565: /* MUTANT (rep_op) */    if (ilim < 0 && mode > 2) {
2565: /* MUTANT (rep_op) */    if (ilim > 0 && mode > 2) {
2565: /* MUTANT (rep_op) */    if (ilim >= 0 && mode > 2) {
2565: /* MUTANT (rep_op) */    if (ilim == 0 && mode > 2) {
2565: /* MUTANT (rep_op) */    if (ilim != 0 && mode > 2) {
2565: /* MUTANT (rep_op) */    if (ilim <= 0 || mode > 2) {
2565: /* MUTANT (rep_op) */    if (ilim <= 0 && mode <= 2) {
2565: /* MUTANT (rep_op) */    if (ilim <= 0 && mode < 2) {
2565: /* MUTANT (rep_op) */    if (ilim <= 0 && mode >= 2) {
2565: /* MUTANT (rep_op) */    if (ilim <= 0 && mode == 2) {
2565: /* MUTANT (rep_op) */    if (ilim <= 0 && mode != 2) {
2565: /* MUTANT (rep_const) */    if (ilim <= 1 && mode > 2) {
2565: /* MUTANT (rep_const) */    if (ilim <= -1 && mode > 2) {
2565: /* MUTANT (rep_const) */    if (ilim <= 0 && mode > 0) {
2565: /* MUTANT (rep_const) */    if (ilim <= 0 && mode > 1) {
2565: /* MUTANT (rep_const) */    if (ilim <= 0 && mode > -1) {
2565: /* MUTANT (rep_const) */    if (ilim <= 0 && mode > ((2)+1)) {
2565: /* MUTANT (rep_const) */    if (ilim <= 0 && mode > ((2)-1)) {
2565: /* MUTANT (negate) */    if(! (ilim <= 0 && mode > 2)) {
2568: /* MUTANT (rep_op) */        if (ilim <= 0)
2568: /* MUTANT (rep_op) */        if (ilim > 0)
2568: /* MUTANT (rep_op) */        if (ilim >= 0)
2568: /* MUTANT (rep_op) */        if (ilim == 0)
2568: /* MUTANT (rep_op) */        if (ilim != 0)
2568: /* MUTANT (rep_const) */        if (ilim < 1)
2568: /* MUTANT (rep_const) */        if (ilim < -1)
2568: /* MUTANT (negate) */        if(! (ilim < 0))
2570: /* MUTANT (del_stmt) */ /*         S = multadd(S,5,0); */ 
2570: /* MUTANT (rep_const) */        S = multadd(S,0,0);
2570: /* MUTANT (rep_const) */        S = multadd(S,1,0);
2570: /* MUTANT (rep_const) */        S = multadd(S,-1,0);
2570: /* MUTANT (rep_const) */        S = multadd(S,((5)+1),0);
2570: /* MUTANT (rep_const) */        S = multadd(S,((5)-1),0);
2570: /* MUTANT (rep_const) */        S = multadd(S,5,1);
2570: /* MUTANT (rep_const) */        S = multadd(S,5,-1);
2571: /* MUTANT (negate) */        if(! (!S))
2573: /* MUTANT (del_stmt) */ /*         i = cmp(b,S); */ 
2574: /* MUTANT (rep_op) */        if (i <= 0 || (i == 0 && !biasUp)) {
2574: /* MUTANT (rep_op) */        if (i > 0 || (i == 0 && !biasUp)) {
2574: /* MUTANT (rep_op) */        if (i >= 0 || (i == 0 && !biasUp)) {
2574: /* MUTANT (rep_op) */        if (i == 0 || (i == 0 && !biasUp)) {
2574: /* MUTANT (rep_op) */        if (i != 0 || (i == 0 && !biasUp)) {
2574: /* MUTANT (rep_op) */        if (i < 0 && (i == 0 && !biasUp)) {
2574: /* MUTANT (rep_op) */        if (i < 0 || (i != 0 && !biasUp)) {
2574: /* MUTANT (rep_op) */        if (i < 0 || (i == 0 || !biasUp)) {
2574: /* MUTANT (rep_const) */        if (i < 1 || (i == 0 && !biasUp)) {
2574: /* MUTANT (rep_const) */        if (i < -1 || (i == 0 && !biasUp)) {
2574: /* MUTANT (rep_const) */        if (i < 0 || (i == 1 && !biasUp)) {
2574: /* MUTANT (rep_const) */        if (i < 0 || (i == -1 && !biasUp)) {
2574: /* MUTANT (negate) */        if(! (i < 0 || (i == 0 && !biasUp))) {
2580: /* MUTANT (del_stmt) */ /*             goto no_digits; */ 
2583: /* MUTANT (rep_op) */        *s-- = '1';
2583: /* MUTANT (rep_const) */        *s++ = '0';
2583: /* MUTANT (rep_const) */        *s++ = '-1';
2583: /* MUTANT (rep_const) */        *s++ = '((1)+1)';
2584: /* MUTANT (del_stmt) */ /*         k++; */ 
2584: /* MUTANT (rep_op) */        k--;
2585: /* MUTANT (del_stmt) */ /*         goto ret; */ 
2587: /* MUTANT (negate) */    if(! (leftright)) {
2588: /* MUTANT (rep_op) */        if (m2 <= 0) {
2588: /* MUTANT (rep_op) */        if (m2 < 0) {
2588: /* MUTANT (rep_op) */        if (m2 >= 0) {
2588: /* MUTANT (rep_op) */        if (m2 == 0) {
2588: /* MUTANT (rep_op) */        if (m2 != 0) {
2588: /* MUTANT (rep_const) */        if (m2 > 1) {
2588: /* MUTANT (rep_const) */        if (m2 > -1) {
2588: /* MUTANT (negate) */        if(! (m2 > 0)) {
2589: /* MUTANT (del_stmt) */ /*             mhi = lshift(mhi, m2); */ 
2589: /* MUTANT (negate) */            mhi = lshif(!t(mhi, m2));
2590: /* MUTANT (negate) */            if(! (!mhi))
2599: /* MUTANT (negate) */        if(! (spec_case)) {
2600: /* MUTANT (del_stmt) */ /*             mhi = Balloc(mhi->k); */ 
2601: /* MUTANT (negate) */            if(! (!mhi))
2603: /* MUTANT (del_stmt) */ /*             Bcopy(mhi, mlo); */ 
2604: /* MUTANT (del_stmt) */ /*             mhi = lshift(mhi, Log2P); */ 
2604: /* MUTANT (negate) */            mhi = lshif(!t(mhi, Log2P));
2605: /* MUTANT (negate) */            if(! (!mhi))
2611: /* MUTANT (rep_op) */        for(i = 1;;i--) {
2611: /* MUTANT (rep_const) */        for(i = 0;;i++) {
2611: /* MUTANT (rep_const) */        for(i = -1;;i++) {
2611: /* MUTANT (rep_const) */        for(i = ((1)+1);;i++) {
2612: /* MUTANT (del_stmt) */ /*             dig = quorem(b,S) + '0'; */ 
2612: /* MUTANT (rep_op) */            dig = quorem(b,S) - '0';
2612: /* MUTANT (rep_op) */            dig = quorem(b,S) * '0';
2612: /* MUTANT (rep_op) */            dig = quorem(b,S) % '0';
2612: /* MUTANT (rep_const) */            dig = quorem(b,S) + '1';
2612: /* MUTANT (rep_const) */            dig = quorem(b,S) + '-1';
2616: /* MUTANT (del_stmt) */ /*             j = cmp(b, mlo); */ 
2618: /* MUTANT (del_stmt) */ /*             delta = diff(S, mhi); */ 
2618: /* MUTANT (negate) */            delta = dif(!f(S, mhi));
2619: /* MUTANT (negate) */            if(! (!delta))
2621: /* MUTANT (del_stmt) */ /*             j1 = delta->sign ? 1 : cmp(b, delta); */ 
2621: /* MUTANT (rep_const) */            j1 = delta->sign ? 0 : cmp(b, delta);
2621: /* MUTANT (rep_const) */            j1 = delta->sign ? -1 : cmp(b, delta);
2621: /* MUTANT (rep_const) */            j1 = delta->sign ? ((1)+1) : cmp(b, delta);
2622: /* MUTANT (del_stmt) */ /*             Bfree(delta); */ 
2625: /* MUTANT (rep_op) */            if (j1 != 0 && !mode && !(word1(d) & 1)) {
2625: /* MUTANT (rep_op) */            if (j1 == 0 || !mode && !(word1(d) & 1)) {
2625: /* MUTANT (rep_op) */            if (j1 == 0 && !mode || !(word1(d) & 1)) {
2625: /* MUTANT (rep_const) */            if (j1 == 1 && !mode && !(word1(d) & 1)) {
2625: /* MUTANT (rep_const) */            if (j1 == -1 && !mode && !(word1(d) & 1)) {
2625: /* MUTANT (rep_const) */            if (j1 == 0 && !mode && !(word1(d) & 0)) {
2625: /* MUTANT (rep_const) */            if (j1 == 0 && !mode && !(word1(d) & -1)) {
2625: /* MUTANT (rep_const) */            if (j1 == 0 && !mode && !(word1(d) & ((1)+1))) {
2625: /* MUTANT (negate) */            if(! (j1 == 0 && !mode && !(word1(d) & 1))) {
2626: /* MUTANT (rep_op) */                if (dig != '9')
2626: /* MUTANT (rep_const) */                if (dig == '0')
2626: /* MUTANT (rep_const) */                if (dig == '1')
2626: /* MUTANT (rep_const) */                if (dig == '-1')
2626: /* MUTANT (rep_const) */                if (dig == '((9)+1)')
2626: /* MUTANT (rep_const) */                if (dig == '((9)-1)')
2626: /* MUTANT (negate) */                if(! (dig == '9'))
2628: /* MUTANT (rep_op) */                if (j <= 0)
2628: /* MUTANT (rep_op) */                if (j < 0)
2628: /* MUTANT (rep_op) */                if (j >= 0)
2628: /* MUTANT (rep_op) */                if (j == 0)
2628: /* MUTANT (rep_op) */                if (j != 0)
2628: /* MUTANT (rep_const) */                if (j > 1)
2628: /* MUTANT (rep_const) */                if (j > -1)
2628: /* MUTANT (negate) */                if(! (j > 0))
2629: /* MUTANT (rep_op) */                    dig--;
2630: /* MUTANT (del_stmt) */ /*                 *s++ = (char)dig; */ 
2630: /* MUTANT (rep_op) */                *s-- = (char)dig;
2631: /* MUTANT (del_stmt) */ /*                 goto ret; */ 
2634: /* MUTANT (rep_op) */            if ((j <= 0) || (j == 0 && !mode
2634: /* MUTANT (rep_op) */            if ((j > 0) || (j == 0 && !mode
2634: /* MUTANT (rep_op) */            if ((j >= 0) || (j == 0 && !mode
2634: /* MUTANT (rep_op) */            if ((j == 0) || (j == 0 && !mode
2634: /* MUTANT (rep_op) */            if ((j != 0) || (j == 0 && !mode
2634: /* MUTANT (rep_op) */            if ((j < 0) && (j == 0 && !mode
2634: /* MUTANT (rep_op) */            if ((j < 0) || (j != 0 && !mode
2634: /* MUTANT (rep_op) */            if ((j < 0) || (j == 0 || !mode
2634: /* MUTANT (rep_const) */            if ((j < 1) || (j == 0 && !mode
2634: /* MUTANT (rep_const) */            if ((j < -1) || (j == 0 && !mode
2634: /* MUTANT (rep_const) */            if ((j < 0) || (j == 1 && !mode
2634: /* MUTANT (rep_const) */            if ((j < 0) || (j == -1 && !mode
2636: /* MUTANT (rep_op) */                || !(word1(d) & 1)
2636: /* MUTANT (rep_const) */                && !(word1(d) & 0)
2636: /* MUTANT (rep_const) */                && !(word1(d) & -1)
2636: /* MUTANT (rep_const) */                && !(word1(d) & ((1)+1))
2639: /* MUTANT (rep_op) */                if (j1 <= 0) {
2639: /* MUTANT (rep_op) */                if (j1 < 0) {
2639: /* MUTANT (rep_op) */                if (j1 >= 0) {
2639: /* MUTANT (rep_op) */                if (j1 == 0) {
2639: /* MUTANT (rep_op) */                if (j1 != 0) {
2639: /* MUTANT (rep_const) */                if (j1 > 1) {
2639: /* MUTANT (rep_const) */                if (j1 > -1) {
2639: /* MUTANT (negate) */                if(! (j1 > 0)) {
2642: /* MUTANT (del_stmt) */ /*                     b = lshift(b, 1); */ 
2642: /* MUTANT (rep_const) */                    b = lshift(b, 0);
2642: /* MUTANT (rep_const) */                    b = lshift(b, -1);
2642: /* MUTANT (rep_const) */                    b = lshift(b, ((1)+1));
2642: /* MUTANT (negate) */                    b = lshif(!t(b, 1));
2643: /* MUTANT (negate) */                    if(! (!b))
2645: /* MUTANT (del_stmt) */ /*                     j1 = cmp(b, S); */ 
2646: /* MUTANT (rep_op) */                    if (((j1 <= 0) || (j1 == 0 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_op) */                    if (((j1 < 0) || (j1 == 0 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_op) */                    if (((j1 >= 0) || (j1 == 0 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_op) */                    if (((j1 == 0) || (j1 == 0 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_op) */                    if (((j1 != 0) || (j1 == 0 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_op) */                    if (((j1 > 0) && (j1 == 0 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_op) */                    if (((j1 > 0) || (j1 != 0 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_op) */                    if (((j1 > 0) || (j1 == 0 || (dig & 1 || biasUp)))
2646: /* MUTANT (rep_op) */                    if (((j1 > 0) || (j1 == 0 && (dig & 1 && biasUp)))
2646: /* MUTANT (rep_const) */                    if (((j1 > 1) || (j1 == 0 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_const) */                    if (((j1 > -1) || (j1 == 0 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_const) */                    if (((j1 > 0) || (j1 == 1 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_const) */                    if (((j1 > 0) || (j1 == -1 && (dig & 1 || biasUp)))
2646: /* MUTANT (rep_const) */                    if (((j1 > 0) || (j1 == 0 && (dig & 0 || biasUp)))
2646: /* MUTANT (rep_const) */                    if (((j1 > 0) || (j1 == 0 && (dig & -1 || biasUp)))
2646: /* MUTANT (rep_const) */                    if (((j1 > 0) || (j1 == 0 && (dig & ((1)+1) || biasUp)))
2647: /* MUTANT (rep_op) */                        || (dig++ == '9'))
2647: /* MUTANT (rep_op) */                        && (dig-- == '9'))
2647: /* MUTANT (rep_op) */                        && (dig++ != '9'))
2647: /* MUTANT (rep_const) */                        && (dig++ == '0'))
2647: /* MUTANT (rep_const) */                        && (dig++ == '1'))
2647: /* MUTANT (rep_const) */                        && (dig++ == '-1'))
2647: /* MUTANT (rep_const) */                        && (dig++ == '((9)+1)'))
2647: /* MUTANT (rep_const) */                        && (dig++ == '((9)-1)'))
2650: /* MUTANT (rep_op) */                *s-- = (char)dig;
2651: /* MUTANT (del_stmt) */ /*                 goto ret; */ 
2653: /* MUTANT (rep_op) */            if (j1 <= 0) {
2653: /* MUTANT (rep_op) */            if (j1 < 0) {
2653: /* MUTANT (rep_op) */            if (j1 >= 0) {
2653: /* MUTANT (rep_op) */            if (j1 == 0) {
2653: /* MUTANT (rep_op) */            if (j1 != 0) {
2653: /* MUTANT (rep_const) */            if (j1 > 1) {
2653: /* MUTANT (rep_const) */            if (j1 > -1) {
2653: /* MUTANT (negate) */            if(! (j1 > 0)) {
2654: /* MUTANT (rep_op) */                if (dig != '9') { /* possible if i == 1 */
2654: /* MUTANT (rep_const) */                if (dig == '0') { /* possible if i == 1 */
2654: /* MUTANT (rep_const) */                if (dig == '1') { /* possible if i == 1 */
2654: /* MUTANT (rep_const) */                if (dig == '-1') { /* possible if i == 1 */
2654: /* MUTANT (rep_const) */                if (dig == '((9)+1)') { /* possible if i == 1 */
2654: /* MUTANT (rep_const) */                if (dig == '((9)-1)') { /* possible if i == 1 */
2654: /* MUTANT (negate) */                if(! (dig == '9')) { /* possible if i == 1 */
2656: /* MUTANT (rep_op) */                    *s-- = '9';
2656: /* MUTANT (rep_const) */                    *s++ = '0';
2656: /* MUTANT (rep_const) */                    *s++ = '1';
2656: /* MUTANT (rep_const) */                    *s++ = '-1';
2656: /* MUTANT (rep_const) */                    *s++ = '((9)+1)';
2656: /* MUTANT (rep_const) */                    *s++ = '((9)-1)';
2657: /* MUTANT (del_stmt) */ /*                     goto roundoff; */ 
2659: /* MUTANT (rep_op) */                *s-- = (char)dig + 1;
2659: /* MUTANT (rep_op) */                *s++ = (char)dig - 1;
2659: /* MUTANT (rep_op) */                *s++ = (char)dig * 1;
2659: /* MUTANT (rep_op) */                *s++ = (char)dig % 1;
2659: /* MUTANT (rep_const) */                *s++ = (char)dig + 0;
2659: /* MUTANT (rep_const) */                *s++ = (char)dig + -1;
2659: /* MUTANT (rep_const) */                *s++ = (char)dig + ((1)+1);
2660: /* MUTANT (del_stmt) */ /*                 goto ret; */ 
2662: /* MUTANT (rep_op) */            *s-- = (char)dig;
2663: /* MUTANT (rep_op) */            if (i != ilim)
2663: /* MUTANT (negate) */            if(! (i == ilim))
2665: /* MUTANT (del_stmt) */ /*             b = multadd(b, 10, 0); */ 
2665: /* MUTANT (rep_const) */            b = multadd(b, 0, 0);
2665: /* MUTANT (rep_const) */            b = multadd(b, 1, 0);
2665: /* MUTANT (rep_const) */            b = multadd(b, -1, 0);
2665: /* MUTANT (rep_const) */            b = multadd(b, ((10)+1), 0);
2665: /* MUTANT (rep_const) */            b = multadd(b, ((10)-1), 0);
2665: /* MUTANT (rep_const) */            b = multadd(b, 10, 1);
2665: /* MUTANT (rep_const) */            b = multadd(b, 10, -1);
2666: /* MUTANT (negate) */            if(! (!b))
2668: /* MUTANT (rep_op) */            if (mlo != mhi) {
2668: /* MUTANT (negate) */            if(! (mlo == mhi)) {
2669: /* MUTANT (del_stmt) */ /*                 mlo = mhi = multadd(mhi, 10, 0); */ 
2669: /* MUTANT (rep_const) */                mlo = mhi = multadd(mhi, 0, 0);
2669: /* MUTANT (rep_const) */                mlo = mhi = multadd(mhi, 1, 0);
2669: /* MUTANT (rep_const) */                mlo = mhi = multadd(mhi, -1, 0);
2669: /* MUTANT (rep_const) */                mlo = mhi = multadd(mhi, ((10)+1), 0);
2669: /* MUTANT (rep_const) */                mlo = mhi = multadd(mhi, ((10)-1), 0);
2669: /* MUTANT (rep_const) */                mlo = mhi = multadd(mhi, 10, 1);
2669: /* MUTANT (rep_const) */                mlo = mhi = multadd(mhi, 10, -1);
2670: /* MUTANT (negate) */                if(! (!mhi))
2674: /* MUTANT (del_stmt) */ /*                 mlo = multadd(mlo, 10, 0); */ 
2674: /* MUTANT (rep_const) */                mlo = multadd(mlo, 0, 0);
2674: /* MUTANT (rep_const) */                mlo = multadd(mlo, 1, 0);
2674: /* MUTANT (rep_const) */                mlo = multadd(mlo, -1, 0);
2674: /* MUTANT (rep_const) */                mlo = multadd(mlo, ((10)+1), 0);
2674: /* MUTANT (rep_const) */                mlo = multadd(mlo, ((10)-1), 0);
2674: /* MUTANT (rep_const) */                mlo = multadd(mlo, 10, 1);
2674: /* MUTANT (rep_const) */                mlo = multadd(mlo, 10, -1);
2675: /* MUTANT (negate) */                if(! (!mlo))
2677: /* MUTANT (del_stmt) */ /*                 mhi = multadd(mhi, 10, 0); */ 
2677: /* MUTANT (rep_const) */                mhi = multadd(mhi, 0, 0);
2677: /* MUTANT (rep_const) */                mhi = multadd(mhi, 1, 0);
2677: /* MUTANT (rep_const) */                mhi = multadd(mhi, -1, 0);
2677: /* MUTANT (rep_const) */                mhi = multadd(mhi, ((10)+1), 0);
2677: /* MUTANT (rep_const) */                mhi = multadd(mhi, ((10)-1), 0);
2677: /* MUTANT (rep_const) */                mhi = multadd(mhi, 10, 1);
2677: /* MUTANT (rep_const) */                mhi = multadd(mhi, 10, -1);
2678: /* MUTANT (negate) */                if(! (!mhi))
2684: /* MUTANT (rep_op) */        for(i = 1;; i--) {
2684: /* MUTANT (rep_const) */        for(i = 0;; i++) {
2684: /* MUTANT (rep_const) */        for(i = -1;; i++) {
2684: /* MUTANT (rep_const) */        for(i = ((1)+1);; i++) {
2685: /* MUTANT (del_stmt) */ /*             *s++ = (char)(dig = quorem(b,S) + '0'); */ 
2685: /* MUTANT (rep_op) */            *s-- = (char)(dig = quorem(b,S) + '0');
2685: /* MUTANT (rep_op) */            *s++ = (char)(dig = quorem(b,S) - '0');
2685: /* MUTANT (rep_op) */            *s++ = (char)(dig = quorem(b,S) * '0');
2685: /* MUTANT (rep_op) */            *s++ = (char)(dig = quorem(b,S) % '0');
2685: /* MUTANT (rep_const) */            *s++ = (char)(dig = quorem(b,S) + '1');
2685: /* MUTANT (rep_const) */            *s++ = (char)(dig = quorem(b,S) + '-1');
2686: /* MUTANT (rep_op) */            if (i <= ilim)
2686: /* MUTANT (rep_op) */            if (i < ilim)
2686: /* MUTANT (rep_op) */            if (i > ilim)
2686: /* MUTANT (rep_op) */            if (i == ilim)
2686: /* MUTANT (rep_op) */            if (i != ilim)
2686: /* MUTANT (negate) */            if(! (i >= ilim))
2688: /* MUTANT (del_stmt) */ /*             b = multadd(b, 10, 0); */ 
2688: /* MUTANT (rep_const) */            b = multadd(b, 0, 0);
2688: /* MUTANT (rep_const) */            b = multadd(b, 1, 0);
2688: /* MUTANT (rep_const) */            b = multadd(b, -1, 0);
2688: /* MUTANT (rep_const) */            b = multadd(b, ((10)+1), 0);
2688: /* MUTANT (rep_const) */            b = multadd(b, ((10)-1), 0);
2688: /* MUTANT (rep_const) */            b = multadd(b, 10, 1);
2688: /* MUTANT (rep_const) */            b = multadd(b, 10, -1);
2689: /* MUTANT (negate) */            if(! (!b))
2695: /* MUTANT (rep_const) */    b = lshift(b, 0);
2695: /* MUTANT (rep_const) */    b = lshift(b, -1);
2695: /* MUTANT (rep_const) */    b = lshift(b, ((1)+1));
2695: /* MUTANT (negate) */    b = lshif(!t(b, 1));
2696: /* MUTANT (negate) */    if(! (!b))
2698: /* MUTANT (del_stmt) */ /*     j = cmp(b, S); */ 
2699: /* MUTANT (rep_op) */    if ((j <= 0) || (j == 0 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_op) */    if ((j < 0) || (j == 0 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_op) */    if ((j >= 0) || (j == 0 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_op) */    if ((j == 0) || (j == 0 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_op) */    if ((j != 0) || (j == 0 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_op) */    if ((j > 0) && (j == 0 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_op) */    if ((j > 0) || (j != 0 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_op) */    if ((j > 0) || (j == 0 || (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_op) */    if ((j > 0) || (j == 0 && (dig & 1 && biasUp))) {
2699: /* MUTANT (rep_const) */    if ((j > 1) || (j == 0 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_const) */    if ((j > -1) || (j == 0 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_const) */    if ((j > 0) || (j == 1 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_const) */    if ((j > 0) || (j == -1 && (dig & 1 || biasUp))) {
2699: /* MUTANT (rep_const) */    if ((j > 0) || (j == 0 && (dig & 0 || biasUp))) {
2699: /* MUTANT (rep_const) */    if ((j > 0) || (j == 0 && (dig & -1 || biasUp))) {
2699: /* MUTANT (rep_const) */    if ((j > 0) || (j == 0 && (dig & ((1)+1) || biasUp))) {
2699: /* MUTANT (negate) */    if(! ((j > 0) || (j == 0 && (dig & 1 || biasUp)))) {
2701: /* MUTANT (rep_op) */        while(*--s != '9')
2701: /* MUTANT (rep_const) */        while(*--s == '0')
2701: /* MUTANT (rep_const) */        while(*--s == '1')
2701: /* MUTANT (rep_const) */        while(*--s == '-1')
2701: /* MUTANT (rep_const) */        while(*--s == '((9)+1)')
2701: /* MUTANT (rep_const) */        while(*--s == '((9)-1)')
2701: /* MUTANT (negate) */        while(!(*--s == '9'))
2702: /* MUTANT (rep_op) */            if (s != buf) {
2702: /* MUTANT (negate) */            if(! (s == buf)) {
2703: /* MUTANT (del_stmt) */ /*                 k++; */ 
2703: /* MUTANT (rep_op) */                k--;
2704: /* MUTANT (del_stmt) */ /*                 *s++ = '1'; */ 
2704: /* MUTANT (rep_op) */                *s-- = '1';
2704: /* MUTANT (rep_const) */                *s++ = '0';
2704: /* MUTANT (rep_const) */                *s++ = '-1';
2704: /* MUTANT (rep_const) */                *s++ = '((1)+1)';
2705: /* MUTANT (del_stmt) */ /*                 goto ret; */ 
2707: /* MUTANT (rep_op) */        ++*s--;
2711: /* MUTANT (del_stmt) */ /*         while(*--s == '0') ; */ 
2711: /* MUTANT (rep_op) */        while(*--s != '0') ;
2711: /* MUTANT (rep_const) */        while(*--s == '1') ;
2711: /* MUTANT (rep_const) */        while(*--s == '-1') ;
2711: /* MUTANT (negate) */        while(!(*--s == '0')) ;
2712: /* MUTANT (del_stmt) */ /*         s++; */ 
2712: /* MUTANT (rep_op) */        s--;
2716: /* MUTANT (negate) */    if(! (mhi)) {
2717: /* MUTANT (rep_op) */        if (mlo || mlo != mhi)
2717: /* MUTANT (rep_op) */        if (mlo && mlo == mhi)
2717: /* MUTANT (negate) */        if(! (mlo && mlo != mhi))
2719: /* MUTANT (del_stmt) */ /*         Bfree(mhi); */ 
2723: /* MUTANT (del_stmt) */ /*     JS_ASSERT(s < buf + bufsize); */ 
2723: /* MUTANT (rep_op) */    JS_ASSERT(s <= buf + bufsize);
2723: /* MUTANT (rep_op) */    JS_ASSERT(s > buf + bufsize);
2723: /* MUTANT (rep_op) */    JS_ASSERT(s >= buf + bufsize);
2723: /* MUTANT (rep_op) */    JS_ASSERT(s == buf + bufsize);
2723: /* MUTANT (rep_op) */    JS_ASSERT(s != buf + bufsize);
2723: /* MUTANT (rep_op) */    JS_ASSERT(s < buf - bufsize);
2723: /* MUTANT (rep_op) */    JS_ASSERT(s < buf * bufsize);
2723: /* MUTANT (rep_op) */    JS_ASSERT(s < buf % bufsize);
2724: /* MUTANT (del_stmt) */ /*     *s = '\0'; */ 
2724: /* MUTANT (rep_const) */    *s = '\1';
2724: /* MUTANT (rep_const) */    *s = '\-1';
2725: /* MUTANT (negate) */    if(! (rve))
2727: /* MUTANT (del_stmt) */ /*     *decpt = k + 1; */ 
2727: /* MUTANT (rep_op) */    *decpt = k - 1;
2727: /* MUTANT (rep_op) */    *decpt = k * 1;
2727: /* MUTANT (rep_op) */    *decpt = k % 1;
2727: /* MUTANT (rep_const) */    *decpt = k + 0;
2727: /* MUTANT (rep_const) */    *decpt = k + -1;
2727: /* MUTANT (rep_const) */    *decpt = k + ((1)+1);
2728: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
2732: /* MUTANT (negate) */    if(! (mhi)) {
2733: /* MUTANT (rep_op) */        if (mlo || mlo != mhi)
2733: /* MUTANT (rep_op) */        if (mlo && mlo == mhi)
2733: /* MUTANT (negate) */        if(! (mlo && mlo != mhi))
2735: /* MUTANT (del_stmt) */ /*         Bfree(mhi); */ 
2738: /* MUTANT (del_stmt) */ /*     return JS_FALSE; */ 
2744: /* MUTANT (rep_const) */    1,   /* DTOSTR_STANDARD */
2744: /* MUTANT (rep_const) */    -1,   /* DTOSTR_STANDARD */
2745: /* MUTANT (rep_const) */    1,   /* DTOSTR_STANDARD_EXPONENTIAL, */
2745: /* MUTANT (rep_const) */    -1,   /* DTOSTR_STANDARD_EXPONENTIAL, */
2746: /* MUTANT (rep_const) */    0,   /* DTOSTR_FIXED, */
2746: /* MUTANT (rep_const) */    1,   /* DTOSTR_FIXED, */
2746: /* MUTANT (rep_const) */    -1,   /* DTOSTR_FIXED, */
2746: /* MUTANT (rep_const) */    ((3)+1),   /* DTOSTR_FIXED, */
2746: /* MUTANT (rep_const) */    ((3)-1),   /* DTOSTR_FIXED, */
2747: /* MUTANT (rep_const) */    0,   /* DTOSTR_EXPONENTIAL, */
2747: /* MUTANT (rep_const) */    1,   /* DTOSTR_EXPONENTIAL, */
2747: /* MUTANT (rep_const) */    -1,   /* DTOSTR_EXPONENTIAL, */
2747: /* MUTANT (rep_const) */    ((2)+1),   /* DTOSTR_EXPONENTIAL, */
2747: /* MUTANT (rep_const) */    ((2)-1),   /* DTOSTR_EXPONENTIAL, */
2748: /* MUTANT (rep_const) */    0};  /* DTOSTR_PRECISION */
2748: /* MUTANT (rep_const) */    1};  /* DTOSTR_PRECISION */
2748: /* MUTANT (rep_const) */    -1};  /* DTOSTR_PRECISION */
2748: /* MUTANT (rep_const) */    ((2)+1)};  /* DTOSTR_PRECISION */
2748: /* MUTANT (rep_const) */    ((2)-1)};  /* DTOSTR_PRECISION */
2753: /* MUTANT (del_stmt) */ /*     int decPt; */                   /* Position of decimal point relative to first digit returned by js_dtoa */
2754: /* MUTANT (del_stmt) */ /*     int sign; */                    /* Nonzero if the sign bit was set in d */
2755: /* MUTANT (del_stmt) */ /*     int nDigits; */                 /* Number of significand digits returned by js_dtoa */
2756: /* MUTANT (del_stmt) */ /*     char *numBegin = buffer+2; */   /* Pointer to the digits returned by js_dtoa; the +2 leaves space for */
2756: /* MUTANT (rep_op) */    char *numBegin = buffer-2;  /* Pointer to the digits returned by js_dtoa; the +2 leaves space for */
2756: /* MUTANT (rep_op) */    char *numBegin = buffer*2;  /* Pointer to the digits returned by js_dtoa; the +2 leaves space for */
2756: /* MUTANT (rep_op) */    char *numBegin = buffer%2;  /* Pointer to the digits returned by js_dtoa; the +2 leaves space for */
2756: /* MUTANT (rep_const) */    char *numBegin = buffer+0;  /* Pointer to the digits returned by js_dtoa; the +2 leaves space for */
2756: /* MUTANT (rep_const) */    char *numBegin = buffer+1;  /* Pointer to the digits returned by js_dtoa; the +2 leaves space for */
2756: /* MUTANT (rep_const) */    char *numBegin = buffer+-1;  /* Pointer to the digits returned by js_dtoa; the +2 leaves space for */
2756: /* MUTANT (rep_const) */    char *numBegin = buffer+((2)+1);  /* Pointer to the digits returned by js_dtoa; the +2 leaves space for */
2756: /* MUTANT (rep_const) */    char *numBegin = buffer+((2)-1);  /* Pointer to the digits returned by js_dtoa; the +2 leaves space for */
2758: /* MUTANT (del_stmt) */ /*     char *numEnd; */                /* Pointer past the digits returned by js_dtoa */
2759: /* MUTANT (del_stmt) */ /*     JSBool dtoaRet; */ 
2761: /* MUTANT (rep_op) */    JS_ASSERT(bufferSize <= (size_t)(mode <= DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
2761: /* MUTANT (rep_op) */    JS_ASSERT(bufferSize < (size_t)(mode <= DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
2761: /* MUTANT (rep_op) */    JS_ASSERT(bufferSize > (size_t)(mode <= DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
2761: /* MUTANT (rep_op) */    JS_ASSERT(bufferSize == (size_t)(mode <= DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
2761: /* MUTANT (rep_op) */    JS_ASSERT(bufferSize != (size_t)(mode <= DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
2761: /* MUTANT (rep_op) */    JS_ASSERT(bufferSize >= (size_t)(mode < DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
2761: /* MUTANT (rep_op) */    JS_ASSERT(bufferSize >= (size_t)(mode > DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
2761: /* MUTANT (rep_op) */    JS_ASSERT(bufferSize >= (size_t)(mode >= DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
2761: /* MUTANT (rep_op) */    JS_ASSERT(bufferSize >= (size_t)(mode == DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
2761: /* MUTANT (rep_op) */    JS_ASSERT(bufferSize >= (size_t)(mode != DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
2764: /* MUTANT (rep_op) */    if (mode != DTOSTR_FIXED && (d >= 1e21 || d <= -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED || (d >= 1e21 || d <= -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d <= 1e21 || d <= -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d < 1e21 || d <= -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d > 1e21 || d <= -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d == 1e21 || d <= -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d != 1e21 || d <= -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d >= 1e21 && d <= -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d >= 1e21 || d < -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d >= 1e21 || d > -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d >= 1e21 || d >= -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d >= 1e21 || d == -1e21))
2764: /* MUTANT (rep_op) */    if (mode == DTOSTR_FIXED && (d >= 1e21 || d != -1e21))
2764: /* MUTANT (rep_const) */    if (mode == DTOSTR_FIXED && (d >= 0e21 || d <= -1e21))
2764: /* MUTANT (rep_const) */    if (mode == DTOSTR_FIXED && (d >= -1e21 || d <= -1e21))
2764: /* MUTANT (rep_const) */    if (mode == DTOSTR_FIXED && (d >= ((1)+1)e21 || d <= -1e21))
2764: /* MUTANT (rep_const) */    if (mode == DTOSTR_FIXED && (d >= 1e21 || d <= 0e21))
2764: /* MUTANT (rep_const) */    if (mode == DTOSTR_FIXED && (d >= 1e21 || d <= 1e21))
2764: /* MUTANT (rep_const) */    if (mode == DTOSTR_FIXED && (d >= 1e21 || d <= ((-1)+1)e21))
2764: /* MUTANT (rep_const) */    if (mode == DTOSTR_FIXED && (d >= 1e21 || d <= ((-1)-1)e21))
2764: /* MUTANT (negate) */    if(! (mode == DTOSTR_FIXED && (d >= 1e21 || d <= -1e21)))
2768: /* MUTANT (del_stmt) */ /*     ACQUIRE_DTOA_LOCK(); */ 
2769: /* MUTANT (del_stmt) */ /*     dtoaRet = js_dtoa(d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize-2); */ 
2769: /* MUTANT (rep_op) */    dtoaRet = js_dtoa(d, dtoaModes[mode], mode <= DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize-2);
2769: /* MUTANT (rep_op) */    dtoaRet = js_dtoa(d, dtoaModes[mode], mode < DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize-2);
2769: /* MUTANT (rep_op) */    dtoaRet = js_dtoa(d, dtoaModes[mode], mode > DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize-2);
2769: /* MUTANT (rep_op) */    dtoaRet = js_dtoa(d, dtoaModes[mode], mode == DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize-2);
2769: /* MUTANT (rep_op) */    dtoaRet = js_dtoa(d, dtoaModes[mode], mode != DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize-2);
2769: /* MUTANT (rep_const) */    dtoaRet = js_dtoa(d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize-0);
2769: /* MUTANT (rep_const) */    dtoaRet = js_dtoa(d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize-1);
2769: /* MUTANT (rep_const) */    dtoaRet = js_dtoa(d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize--1);
2769: /* MUTANT (rep_const) */    dtoaRet = js_dtoa(d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize-((2)+1));
2769: /* MUTANT (rep_const) */    dtoaRet = js_dtoa(d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, &decPt, &sign, &numEnd, numBegin, bufferSize-((2)-1));
2770: /* MUTANT (del_stmt) */ /*     RELEASE_DTOA_LOCK(); */ 
2771: /* MUTANT (negate) */    if(! (!dtoaRet))
2772: /* MUTANT (rep_const) */        return 1;
2772: /* MUTANT (rep_const) */        return -1;
2774: /* MUTANT (del_stmt) */ /*     nDigits = numEnd - numBegin; */ 
2777: /* MUTANT (rep_op) */    if (decPt == 9999) {
2777: /* MUTANT (rep_const) */    if (decPt != 0) {
2777: /* MUTANT (rep_const) */    if (decPt != 1) {
2777: /* MUTANT (rep_const) */    if (decPt != -1) {
2777: /* MUTANT (rep_const) */    if (decPt != ((9999)+1)) {
2777: /* MUTANT (rep_const) */    if (decPt != ((9999)-1)) {
2777: /* MUTANT (negate) */    if(! (decPt != 9999)) {
2778: /* MUTANT (del_stmt) */ /*         JSBool exponentialNotation = JS_FALSE; */ 
2779: /* MUTANT (del_stmt) */ /*         int minNDigits = 0; */          /* Minimum number of significand digits required by mode and precision */
2779: /* MUTANT (rep_const) */        int minNDigits = 1;         /* Minimum number of significand digits required by mode and precision */
2779: /* MUTANT (rep_const) */        int minNDigits = -1;         /* Minimum number of significand digits required by mode and precision */
2780: /* MUTANT (del_stmt) */ /*         char *p; */ 
2781: /* MUTANT (del_stmt) */ /*         char *q; */ 
2785: /* MUTANT (rep_op) */                if (decPt <= -5 || decPt > 21)
2785: /* MUTANT (rep_op) */                if (decPt > -5 || decPt > 21)
2785: /* MUTANT (rep_op) */                if (decPt >= -5 || decPt > 21)
2785: /* MUTANT (rep_op) */                if (decPt == -5 || decPt > 21)
2785: /* MUTANT (rep_op) */                if (decPt != -5 || decPt > 21)
2785: /* MUTANT (rep_op) */                if (decPt < -5 && decPt > 21)
2785: /* MUTANT (rep_op) */                if (decPt < -5 || decPt <= 21)
2785: /* MUTANT (rep_op) */                if (decPt < -5 || decPt < 21)
2785: /* MUTANT (rep_op) */                if (decPt < -5 || decPt >= 21)
2785: /* MUTANT (rep_op) */                if (decPt < -5 || decPt == 21)
2785: /* MUTANT (rep_op) */                if (decPt < -5 || decPt != 21)
2785: /* MUTANT (rep_const) */                if (decPt < 0 || decPt > 21)
2785: /* MUTANT (rep_const) */                if (decPt < 1 || decPt > 21)
2785: /* MUTANT (rep_const) */                if (decPt < -1 || decPt > 21)
2785: /* MUTANT (rep_const) */                if (decPt < ((-5)+1) || decPt > 21)
2785: /* MUTANT (rep_const) */                if (decPt < ((-5)-1) || decPt > 21)
2785: /* MUTANT (rep_const) */                if (decPt < -5 || decPt > 0)
2785: /* MUTANT (rep_const) */                if (decPt < -5 || decPt > 1)
2785: /* MUTANT (rep_const) */                if (decPt < -5 || decPt > -1)
2785: /* MUTANT (rep_const) */                if (decPt < -5 || decPt > ((21)+1))
2785: /* MUTANT (rep_const) */                if (decPt < -5 || decPt > ((21)-1))
2785: /* MUTANT (negate) */                if(! (decPt < -5 || decPt > 21))
2789: /* MUTANT (del_stmt) */ /*                 break; */ 
2792: /* MUTANT (rep_op) */                if (precision <= 0)
2792: /* MUTANT (rep_op) */                if (precision < 0)
2792: /* MUTANT (rep_op) */                if (precision > 0)
2792: /* MUTANT (rep_op) */                if (precision == 0)
2792: /* MUTANT (rep_op) */                if (precision != 0)
2792: /* MUTANT (rep_const) */                if (precision >= 1)
2792: /* MUTANT (rep_const) */                if (precision >= -1)
2792: /* MUTANT (negate) */                if(! (precision >= 0))
2793: /* MUTANT (rep_op) */                    minNDigits = decPt - precision;
2793: /* MUTANT (rep_op) */                    minNDigits = decPt * precision;
2793: /* MUTANT (rep_op) */                    minNDigits = decPt % precision;
2796: /* MUTANT (del_stmt) */ /*                 break; */ 
2799: /* MUTANT (rep_op) */                JS_ASSERT(precision <= 0);
2799: /* MUTANT (rep_op) */                JS_ASSERT(precision < 0);
2799: /* MUTANT (rep_op) */                JS_ASSERT(precision >= 0);
2799: /* MUTANT (rep_op) */                JS_ASSERT(precision == 0);
2799: /* MUTANT (rep_op) */                JS_ASSERT(precision != 0);
2799: /* MUTANT (rep_const) */                JS_ASSERT(precision > 1);
2799: /* MUTANT (rep_const) */                JS_ASSERT(precision > -1);
2800: /* MUTANT (del_stmt) */ /*                 minNDigits = precision; */ 
2804: /* MUTANT (del_stmt) */ /*                 break; */ 
2807: /* MUTANT (rep_op) */                JS_ASSERT(precision <= 0);
2807: /* MUTANT (rep_op) */                JS_ASSERT(precision < 0);
2807: /* MUTANT (rep_op) */                JS_ASSERT(precision >= 0);
2807: /* MUTANT (rep_op) */                JS_ASSERT(precision == 0);
2807: /* MUTANT (rep_op) */                JS_ASSERT(precision != 0);
2807: /* MUTANT (rep_const) */                JS_ASSERT(precision > 1);
2807: /* MUTANT (rep_const) */                JS_ASSERT(precision > -1);
2808: /* MUTANT (del_stmt) */ /*                 minNDigits = precision; */ 
2809: /* MUTANT (rep_op) */                if (decPt <= -5 || decPt > precision)
2809: /* MUTANT (rep_op) */                if (decPt > -5 || decPt > precision)
2809: /* MUTANT (rep_op) */                if (decPt >= -5 || decPt > precision)
2809: /* MUTANT (rep_op) */                if (decPt == -5 || decPt > precision)
2809: /* MUTANT (rep_op) */                if (decPt != -5 || decPt > precision)
2809: /* MUTANT (rep_op) */                if (decPt < -5 && decPt > precision)
2809: /* MUTANT (rep_op) */                if (decPt < -5 || decPt <= precision)
2809: /* MUTANT (rep_op) */                if (decPt < -5 || decPt < precision)
2809: /* MUTANT (rep_op) */                if (decPt < -5 || decPt >= precision)
2809: /* MUTANT (rep_op) */                if (decPt < -5 || decPt == precision)
2809: /* MUTANT (rep_op) */                if (decPt < -5 || decPt != precision)
2809: /* MUTANT (rep_const) */                if (decPt < 0 || decPt > precision)
2809: /* MUTANT (rep_const) */                if (decPt < 1 || decPt > precision)
2809: /* MUTANT (rep_const) */                if (decPt < -1 || decPt > precision)
2809: /* MUTANT (rep_const) */                if (decPt < ((-5)+1) || decPt > precision)
2809: /* MUTANT (rep_const) */                if (decPt < ((-5)-1) || decPt > precision)
2809: /* MUTANT (negate) */                if(! (decPt < -5 || decPt > precision))
2811: /* MUTANT (del_stmt) */ /*                 break; */ 
2815: /* MUTANT (rep_op) */        if (nDigits <= minNDigits) {
2815: /* MUTANT (rep_op) */        if (nDigits > minNDigits) {
2815: /* MUTANT (rep_op) */        if (nDigits >= minNDigits) {
2815: /* MUTANT (rep_op) */        if (nDigits == minNDigits) {
2815: /* MUTANT (rep_op) */        if (nDigits != minNDigits) {
2815: /* MUTANT (negate) */        if(! (nDigits < minNDigits)) {
2816: /* MUTANT (del_stmt) */ /*             p = numBegin + minNDigits; */ 
2816: /* MUTANT (rep_op) */            p = numBegin - minNDigits;
2816: /* MUTANT (rep_op) */            p = numBegin * minNDigits;
2816: /* MUTANT (rep_op) */            p = numBegin % minNDigits;
2817: /* MUTANT (del_stmt) */ /*             nDigits = minNDigits; */ 
2819: /* MUTANT (del_stmt) */ /*                 *numEnd++ = '0'; */ 
2819: /* MUTANT (rep_op) */                *numEnd-- = '0';
2819: /* MUTANT (rep_const) */                *numEnd++ = '1';
2819: /* MUTANT (rep_const) */                *numEnd++ = '-1';
2820: /* MUTANT (del_stmt) */ /*             } while (numEnd != p); */ 
2820: /* MUTANT (rep_op) */            } while (numEnd == p);
2820: /* MUTANT (negate) */            } while(! (numEnd != p));
2821: /* MUTANT (del_stmt) */ /*             *numEnd = '\0'; */ 
2821: /* MUTANT (rep_const) */            *numEnd = '\1';
2821: /* MUTANT (rep_const) */            *numEnd = '\-1';
2824: /* MUTANT (negate) */        if(! (exponentialNotation)) {
2826: /* MUTANT (rep_op) */            if (nDigits == 1) {
2826: /* MUTANT (rep_const) */            if (nDigits != 0) {
2826: /* MUTANT (rep_const) */            if (nDigits != -1) {
2826: /* MUTANT (rep_const) */            if (nDigits != ((1)+1)) {
2826: /* MUTANT (negate) */            if(! (nDigits != 1)) {
2827: /* MUTANT (del_stmt) */ /*                 numBegin--; */ 
2827: /* MUTANT (rep_op) */                numBegin++;
2828: /* MUTANT (del_stmt) */ /*                 numBegin[0] = numBegin[1]; */ 
2828: /* MUTANT (rep_const) */                numBegin[1] = numBegin[1];
2828: /* MUTANT (rep_const) */                numBegin[-1] = numBegin[1];
2828: /* MUTANT (rep_const) */                numBegin[0] = numBegin[0];
2828: /* MUTANT (rep_const) */                numBegin[0] = numBegin[-1];
2828: /* MUTANT (rep_const) */                numBegin[0] = numBegin[((1)+1)];
2829: /* MUTANT (del_stmt) */ /*                 numBegin[1] = '.'; */ 
2829: /* MUTANT (rep_const) */                numBegin[0] = '.';
2829: /* MUTANT (rep_const) */                numBegin[-1] = '.';
2829: /* MUTANT (rep_const) */                numBegin[((1)+1)] = '.';
2831: /* MUTANT (rep_const) */            JS_snprintf(numEnd, bufferSize - (numEnd - buffer), "e%+d", decPt-0);
2831: /* MUTANT (rep_const) */            JS_snprintf(numEnd, bufferSize - (numEnd - buffer), "e%+d", decPt--1);
2831: /* MUTANT (rep_const) */            JS_snprintf(numEnd, bufferSize - (numEnd - buffer), "e%+d", decPt-((1)+1));
2832: /* MUTANT (rep_op) */        } else if (decPt == nDigits) {
2832: /* MUTANT (negate) */        } else if(! (decPt != nDigits)) {
2834: /* MUTANT (del_stmt) */ /*             JS_ASSERT(decPt <= nDigits); */ 
2834: /* MUTANT (rep_op) */            JS_ASSERT(decPt < nDigits);
2834: /* MUTANT (rep_op) */            JS_ASSERT(decPt > nDigits);
2834: /* MUTANT (rep_op) */            JS_ASSERT(decPt >= nDigits);
2834: /* MUTANT (rep_op) */            JS_ASSERT(decPt == nDigits);
2834: /* MUTANT (rep_op) */            JS_ASSERT(decPt != nDigits);
2835: /* MUTANT (rep_op) */            if (decPt <= 0) {
2835: /* MUTANT (rep_op) */            if (decPt < 0) {
2835: /* MUTANT (rep_op) */            if (decPt >= 0) {
2835: /* MUTANT (rep_op) */            if (decPt == 0) {
2835: /* MUTANT (rep_op) */            if (decPt != 0) {
2835: /* MUTANT (rep_const) */            if (decPt > 1) {
2835: /* MUTANT (rep_const) */            if (decPt > -1) {
2835: /* MUTANT (negate) */            if(! (decPt > 0)) {
2837: /* MUTANT (del_stmt) */ /*                 p = --numBegin; */ 
2837: /* MUTANT (rep_op) */                p = ++numBegin;
2839: /* MUTANT (del_stmt) */ /*                     *p = p[1]; */ 
2839: /* MUTANT (rep_const) */                    *p = p[0];
2839: /* MUTANT (rep_const) */                    *p = p[-1];
2839: /* MUTANT (rep_const) */                    *p = p[((1)+1)];
2840: /* MUTANT (del_stmt) */ /*                     p++; */ 
2840: /* MUTANT (rep_op) */                    p--;
2841: /* MUTANT (del_stmt) */ /*                 } while (--decPt); */ 
2841: /* MUTANT (rep_op) */                } while (++decPt);
2841: /* MUTANT (negate) */                } while(! (--decPt));
2842: /* MUTANT (del_stmt) */ /*                 *p = '.'; */ 
2845: /* MUTANT (del_stmt) */ /*                 p = numEnd; */ 
2846: /* MUTANT (del_stmt) */ /*                 numEnd += 1 - decPt; */ 
2846: /* MUTANT (rep_op) */                numEnd -= 1 - decPt;
2846: /* MUTANT (rep_op) */                numEnd *= 1 - decPt;
2846: /* MUTANT (rep_op) */                numEnd %= 1 - decPt;
2846: /* MUTANT (rep_const) */                numEnd += 0 - decPt;
2846: /* MUTANT (rep_const) */                numEnd += -1 - decPt;
2846: /* MUTANT (rep_const) */                numEnd += ((1)+1) - decPt;
2847: /* MUTANT (del_stmt) */ /*                 q = numEnd; */ 
2848: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(numEnd < buffer + bufferSize); */ 
2848: /* MUTANT (rep_op) */                JS_ASSERT(numEnd <= buffer + bufferSize);
2848: /* MUTANT (rep_op) */                JS_ASSERT(numEnd > buffer + bufferSize);
2848: /* MUTANT (rep_op) */                JS_ASSERT(numEnd >= buffer + bufferSize);
2848: /* MUTANT (rep_op) */                JS_ASSERT(numEnd == buffer + bufferSize);
2848: /* MUTANT (rep_op) */                JS_ASSERT(numEnd != buffer + bufferSize);
2848: /* MUTANT (rep_op) */                JS_ASSERT(numEnd < buffer - bufferSize);
2848: /* MUTANT (rep_op) */                JS_ASSERT(numEnd < buffer * bufferSize);
2848: /* MUTANT (rep_op) */                JS_ASSERT(numEnd < buffer % bufferSize);
2849: /* MUTANT (del_stmt) */ /*                 *numEnd = '\0'; */ 
2849: /* MUTANT (rep_const) */                *numEnd = '\1';
2849: /* MUTANT (rep_const) */                *numEnd = '\-1';
2850: /* MUTANT (rep_op) */                while (p == numBegin)
2850: /* MUTANT (negate) */                while(! (p != numBegin))
2852: /* MUTANT (rep_op) */                for (p = numBegin - 1; p != q; p++)
2852: /* MUTANT (rep_op) */                for (p = numBegin * 1; p != q; p++)
2852: /* MUTANT (rep_op) */                for (p = numBegin % 1; p != q; p++)
2852: /* MUTANT (rep_op) */                for (p = numBegin + 1; p == q; p++)
2852: /* MUTANT (rep_op) */                for (p = numBegin + 1; p != q; p--)
2852: /* MUTANT (rep_const) */                for (p = numBegin + 0; p != q; p++)
2852: /* MUTANT (rep_const) */                for (p = numBegin + -1; p != q; p++)
2852: /* MUTANT (rep_const) */                for (p = numBegin + ((1)+1); p != q; p++)
2853: /* MUTANT (rep_const) */                    *p = '1';
2853: /* MUTANT (rep_const) */                    *p = '-1';
2854: /* MUTANT (del_stmt) */ /*                 *numBegin = '.'; */ 
2855: /* MUTANT (del_stmt) */ /*                 *--numBegin = '0'; */ 
2855: /* MUTANT (rep_const) */                *--numBegin = '1';
2855: /* MUTANT (rep_const) */                *--numBegin = '-1';
2861: /* MUTANT (rep_op) */    if (sign ||
2862: /* MUTANT (rep_op) */            !(word0(d) != Sign_bit && word1(d) == 0) &&
2862: /* MUTANT (rep_op) */            !(word0(d) == Sign_bit || word1(d) == 0) &&
2862: /* MUTANT (rep_op) */            !(word0(d) == Sign_bit && word1(d) != 0) &&
2862: /* MUTANT (rep_op) */            !(word0(d) == Sign_bit && word1(d) == 0) ||
2862: /* MUTANT (rep_const) */            !(word0(d) == Sign_bit && word1(d) == 1) &&
2862: /* MUTANT (rep_const) */            !(word0(d) == Sign_bit && word1(d) == -1) &&
2863: /* MUTANT (rep_op) */            !((word0(d) & Exp_mask) != Exp_mask &&
2863: /* MUTANT (rep_op) */            !((word0(d) & Exp_mask) == Exp_mask ||
2864: /* MUTANT (rep_op) */              (word1(d) && (word0(d) & Frac_mask)))) {
2865: /* MUTANT (del_stmt) */ /*         *--numBegin = '-'; */ 
2877: /* MUTANT (del_stmt) */ /*     int32 n = b->wds; */ 
2878: /* MUTANT (del_stmt) */ /*     uint32 remainder = 0; */ 
2878: /* MUTANT (rep_const) */    uint32 remainder = 1;
2878: /* MUTANT (rep_const) */    uint32 remainder = -1;
2879: /* MUTANT (del_stmt) */ /*     ULong *bx; */ 
2880: /* MUTANT (del_stmt) */ /*     ULong *bp; */ 
2882: /* MUTANT (del_stmt) */ /*     JS_ASSERT(divisor > 0 && divisor <= 65536); */ 
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor <= 0 && divisor <= 65536);
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor < 0 && divisor <= 65536);
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor >= 0 && divisor <= 65536);
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor == 0 && divisor <= 65536);
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor != 0 && divisor <= 65536);
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor > 0 || divisor <= 65536);
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor > 0 && divisor < 65536);
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor > 0 && divisor > 65536);
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor > 0 && divisor >= 65536);
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor > 0 && divisor == 65536);
2882: /* MUTANT (rep_op) */    JS_ASSERT(divisor > 0 && divisor != 65536);
2882: /* MUTANT (rep_const) */    JS_ASSERT(divisor > 1 && divisor <= 65536);
2882: /* MUTANT (rep_const) */    JS_ASSERT(divisor > -1 && divisor <= 65536);
2882: /* MUTANT (rep_const) */    JS_ASSERT(divisor > 0 && divisor <= 0);
2882: /* MUTANT (rep_const) */    JS_ASSERT(divisor > 0 && divisor <= 1);
2882: /* MUTANT (rep_const) */    JS_ASSERT(divisor > 0 && divisor <= -1);
2882: /* MUTANT (rep_const) */    JS_ASSERT(divisor > 0 && divisor <= ((65536)+1));
2882: /* MUTANT (rep_const) */    JS_ASSERT(divisor > 0 && divisor <= ((65536)-1));
2884: /* MUTANT (negate) */    if(! (!n))
2885: /* MUTANT (rep_const) */        return 1; /* b is zero */
2885: /* MUTANT (rep_const) */        return -1; /* b is zero */
2886: /* MUTANT (del_stmt) */ /*     bx = b->x; */ 
2887: /* MUTANT (del_stmt) */ /*     bp = bx + n; */ 
2887: /* MUTANT (rep_op) */    bp = bx - n;
2887: /* MUTANT (rep_op) */    bp = bx * n;
2887: /* MUTANT (rep_op) */    bp = bx % n;
2889: /* MUTANT (del_stmt) */ /*         ULong a = *--bp; */ 
2890: /* MUTANT (del_stmt) */ /*         ULong dividend = remainder << 16 | a >> 16; */ 
2890: /* MUTANT (rep_op) */        ULong dividend = remainder << 16 & a >> 16;
2890: /* MUTANT (rep_const) */        ULong dividend = remainder << 0 | a >> 16;
2890: /* MUTANT (rep_const) */        ULong dividend = remainder << 1 | a >> 16;
2890: /* MUTANT (rep_const) */        ULong dividend = remainder << -1 | a >> 16;
2890: /* MUTANT (rep_const) */        ULong dividend = remainder << ((16)+1) | a >> 16;
2890: /* MUTANT (rep_const) */        ULong dividend = remainder << ((16)-1) | a >> 16;
2890: /* MUTANT (rep_const) */        ULong dividend = remainder << 16 | a >> 0;
2890: /* MUTANT (rep_const) */        ULong dividend = remainder << 16 | a >> 1;
2890: /* MUTANT (rep_const) */        ULong dividend = remainder << 16 | a >> -1;
2890: /* MUTANT (rep_const) */        ULong dividend = remainder << 16 | a >> ((16)+1);
2890: /* MUTANT (rep_const) */        ULong dividend = remainder << 16 | a >> ((16)-1);
2891: /* MUTANT (del_stmt) */ /*         ULong quotientHi = dividend / divisor; */ 
2892: /* MUTANT (del_stmt) */ /*         ULong quotientLo; */ 
2894: /* MUTANT (del_stmt) */ /*         remainder = dividend - quotientHi*divisor; */ 
2895: /* MUTANT (del_stmt) */ /*         JS_ASSERT(quotientHi <= 0xFFFF && remainder < divisor); */ 
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi < 0xFFFF && remainder < divisor);
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi > 0xFFFF && remainder < divisor);
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi >= 0xFFFF && remainder < divisor);
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi == 0xFFFF && remainder < divisor);
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi != 0xFFFF && remainder < divisor);
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi <= 0xFFFF || remainder < divisor);
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi <= 0xFFFF && remainder <= divisor);
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi <= 0xFFFF && remainder > divisor);
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi <= 0xFFFF && remainder >= divisor);
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi <= 0xFFFF && remainder == divisor);
2895: /* MUTANT (rep_op) */        JS_ASSERT(quotientHi <= 0xFFFF && remainder != divisor);
2895: /* MUTANT (rep_const) */        JS_ASSERT(quotientHi <= 1xFFFF && remainder < divisor);
2895: /* MUTANT (rep_const) */        JS_ASSERT(quotientHi <= -1xFFFF && remainder < divisor);
2896: /* MUTANT (del_stmt) */ /*         dividend = remainder << 16 | (a & 0xFFFF); */ 
2896: /* MUTANT (rep_op) */        dividend = remainder << 16 & (a & 0xFFFF);
2896: /* MUTANT (rep_const) */        dividend = remainder << 0 | (a & 0xFFFF);
2896: /* MUTANT (rep_const) */        dividend = remainder << 1 | (a & 0xFFFF);
2896: /* MUTANT (rep_const) */        dividend = remainder << -1 | (a & 0xFFFF);
2896: /* MUTANT (rep_const) */        dividend = remainder << ((16)+1) | (a & 0xFFFF);
2896: /* MUTANT (rep_const) */        dividend = remainder << ((16)-1) | (a & 0xFFFF);
2896: /* MUTANT (rep_const) */        dividend = remainder << 16 | (a & 1xFFFF);
2896: /* MUTANT (rep_const) */        dividend = remainder << 16 | (a & -1xFFFF);
2897: /* MUTANT (del_stmt) */ /*         quotientLo = dividend / divisor; */ 
2898: /* MUTANT (del_stmt) */ /*         remainder = dividend - quotientLo*divisor; */ 
2899: /* MUTANT (del_stmt) */ /*         JS_ASSERT(quotientLo <= 0xFFFF && remainder < divisor); */ 
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo < 0xFFFF && remainder < divisor);
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo > 0xFFFF && remainder < divisor);
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo >= 0xFFFF && remainder < divisor);
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo == 0xFFFF && remainder < divisor);
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo != 0xFFFF && remainder < divisor);
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo <= 0xFFFF || remainder < divisor);
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo <= 0xFFFF && remainder <= divisor);
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo <= 0xFFFF && remainder > divisor);
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo <= 0xFFFF && remainder >= divisor);
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo <= 0xFFFF && remainder == divisor);
2899: /* MUTANT (rep_op) */        JS_ASSERT(quotientLo <= 0xFFFF && remainder != divisor);
2899: /* MUTANT (rep_const) */        JS_ASSERT(quotientLo <= 1xFFFF && remainder < divisor);
2899: /* MUTANT (rep_const) */        JS_ASSERT(quotientLo <= -1xFFFF && remainder < divisor);
2900: /* MUTANT (del_stmt) */ /*         *bp = quotientHi << 16 | quotientLo; */ 
2900: /* MUTANT (rep_op) */        *bp = quotientHi << 16 & quotientLo;
2900: /* MUTANT (rep_const) */        *bp = quotientHi << 0 | quotientLo;
2900: /* MUTANT (rep_const) */        *bp = quotientHi << 1 | quotientLo;
2900: /* MUTANT (rep_const) */        *bp = quotientHi << -1 | quotientLo;
2900: /* MUTANT (rep_const) */        *bp = quotientHi << ((16)+1) | quotientLo;
2900: /* MUTANT (rep_const) */        *bp = quotientHi << ((16)-1) | quotientLo;
2901: /* MUTANT (del_stmt) */ /*     } while (bp != bx); */ 
2901: /* MUTANT (rep_op) */    } while (bp == bx);
2901: /* MUTANT (negate) */    } while(! (bp != bx));
2903: /* MUTANT (rep_op) */    if (bx[n-1] != 0)
2903: /* MUTANT (rep_const) */    if (bx[n-0] == 0)
2903: /* MUTANT (rep_const) */    if (bx[n--1] == 0)
2903: /* MUTANT (rep_const) */    if (bx[n-((1)+1)] == 0)
2903: /* MUTANT (rep_const) */    if (bx[n-1] == 1)
2903: /* MUTANT (rep_const) */    if (bx[n-1] == -1)
2903: /* MUTANT (negate) */    if(! (bx[n-1] == 0))
2904: /* MUTANT (rep_op) */        b->wds++;
2905: /* MUTANT (del_stmt) */ /*     return remainder; */ 
2912: #define DTOBASESTR_BUFFER_SIZE 0 /* MUTANT (rep_const) */
2912: #define DTOBASESTR_BUFFER_SIZE 1 /* MUTANT (rep_const) */
2912: #define DTOBASESTR_BUFFER_SIZE -1 /* MUTANT (rep_const) */
2912: #define DTOBASESTR_BUFFER_SIZE ((1078)+1) /* MUTANT (rep_const) */
2912: #define DTOBASESTR_BUFFER_SIZE ((1078)-1) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= 0) ? 'a' - 10 + (digit) : '0' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= 1) ? 'a' - 10 + (digit) : '0' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= -1) ? 'a' - 10 + (digit) : '0' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= ((10)+1)) ? 'a' - 10 + (digit) : '0' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= ((10)-1)) ? 'a' - 10 + (digit) : '0' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= 10) ? 'a' - 0 + (digit) : '0' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= 10) ? 'a' - 1 + (digit) : '0' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= 10) ? 'a' - -1 + (digit) : '0' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= 10) ? 'a' - ((10)+1) + (digit) : '0' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= 10) ? 'a' - ((10)-1) + (digit) : '0' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= 10) ? 'a' - 10 + (digit) : '1' + (digit))) /* MUTANT (rep_const) */
2913: #define BASEDIGIT(digit) ((char)(((digit) >= 10) ? 'a' - 10 + (digit) : '-1' + (digit))) /* MUTANT (rep_const) */
2918: /* MUTANT (del_stmt) */ /*     char *buffer; */         /* The output string */
2919: /* MUTANT (del_stmt) */ /*     char *p; */              /* Pointer to current position in the buffer */
2920: /* MUTANT (del_stmt) */ /*     char *pInt; */           /* Pointer to the beginning of the integer part of the string */
2921: /* MUTANT (del_stmt) */ /*     char *q; */ 
2922: /* MUTANT (del_stmt) */ /*     uint32 digit; */ 
2923: /* MUTANT (del_stmt) */ /*     double di; */            /* d truncated to an integer */
2924: /* MUTANT (del_stmt) */ /*     double df; */            /* The fractional part of d */
2926: /* MUTANT (del_stmt) */ /*     JS_ASSERT(base >= 2 && base <= 36); */ 
2926: /* MUTANT (rep_op) */    JS_ASSERT(base <= 2 && base <= 36);
2926: /* MUTANT (rep_op) */    JS_ASSERT(base < 2 && base <= 36);
2926: /* MUTANT (rep_op) */    JS_ASSERT(base > 2 && base <= 36);
2926: /* MUTANT (rep_op) */    JS_ASSERT(base == 2 && base <= 36);
2926: /* MUTANT (rep_op) */    JS_ASSERT(base != 2 && base <= 36);
2926: /* MUTANT (rep_op) */    JS_ASSERT(base >= 2 || base <= 36);
2926: /* MUTANT (rep_op) */    JS_ASSERT(base >= 2 && base < 36);
2926: /* MUTANT (rep_op) */    JS_ASSERT(base >= 2 && base > 36);
2926: /* MUTANT (rep_op) */    JS_ASSERT(base >= 2 && base >= 36);
2926: /* MUTANT (rep_op) */    JS_ASSERT(base >= 2 && base == 36);
2926: /* MUTANT (rep_op) */    JS_ASSERT(base >= 2 && base != 36);
2926: /* MUTANT (rep_const) */    JS_ASSERT(base >= 0 && base <= 36);
2926: /* MUTANT (rep_const) */    JS_ASSERT(base >= 1 && base <= 36);
2926: /* MUTANT (rep_const) */    JS_ASSERT(base >= -1 && base <= 36);
2926: /* MUTANT (rep_const) */    JS_ASSERT(base >= ((2)+1) && base <= 36);
2926: /* MUTANT (rep_const) */    JS_ASSERT(base >= ((2)-1) && base <= 36);
2926: /* MUTANT (rep_const) */    JS_ASSERT(base >= 2 && base <= 0);
2926: /* MUTANT (rep_const) */    JS_ASSERT(base >= 2 && base <= 1);
2926: /* MUTANT (rep_const) */    JS_ASSERT(base >= 2 && base <= -1);
2926: /* MUTANT (rep_const) */    JS_ASSERT(base >= 2 && base <= ((36)+1));
2926: /* MUTANT (rep_const) */    JS_ASSERT(base >= 2 && base <= ((36)-1));
2928: /* MUTANT (del_stmt) */ /*     buffer = (char*) malloc(DTOBASESTR_BUFFER_SIZE); */ 
2929: /* MUTANT (negate) */    if(! (buffer)) {
2930: /* MUTANT (del_stmt) */ /*         p = buffer; */ 
2931: /* MUTANT (rep_op) */        if (d <= 0.0
2931: /* MUTANT (rep_op) */        if (d > 0.0
2931: /* MUTANT (rep_op) */        if (d >= 0.0
2931: /* MUTANT (rep_op) */        if (d == 0.0
2931: /* MUTANT (rep_op) */        if (d != 0.0
2931: /* MUTANT (rep_const) */        if (d < 0.1
2931: /* MUTANT (rep_const) */        if (d < 0.-1
2933: /* MUTANT (rep_op) */            || !((word0(d) & Exp_mask) == Exp_mask && ((word0(d) & Frac_mask) || word1(d))) /* Visual C++ doesn't know how to compare against NaN */
2933: /* MUTANT (rep_op) */            && !((word0(d) & Exp_mask) != Exp_mask && ((word0(d) & Frac_mask) || word1(d))) /* Visual C++ doesn't know how to compare against NaN */
2933: /* MUTANT (rep_op) */            && !((word0(d) & Exp_mask) == Exp_mask || ((word0(d) & Frac_mask) || word1(d))) /* Visual C++ doesn't know how to compare against NaN */
2933: /* MUTANT (rep_op) */            && !((word0(d) & Exp_mask) == Exp_mask && ((word0(d) & Frac_mask) && word1(d))) /* Visual C++ doesn't know how to compare against NaN */
2936: /* MUTANT (del_stmt) */ /*             *p++ = '-'; */ 
2936: /* MUTANT (rep_op) */            *p-- = '-';
2937: /* MUTANT (del_stmt) */ /*             d = -d; */ 
2941: /* MUTANT (rep_op) */        if ((word0(d) & Exp_mask) != Exp_mask) {
2941: /* MUTANT (negate) */        if(! ((word0(d) & Exp_mask) == Exp_mask)) {
2942: /* MUTANT (del_stmt) */ /*             strcpy(p, !word1(d) && !(word0(d) & Frac_mask) ? "Infinity" : "NaN"); */ 
2942: /* MUTANT (rep_op) */            strcpy(p, !word1(d) || !(word0(d) & Frac_mask) ? "Infinity" : "NaN");
2943: /* MUTANT (del_stmt) */ /*             return buffer; */ 
2950: /* MUTANT (del_stmt) */ /*         pInt = p; */ 
2951: /* MUTANT (del_stmt) */ /*         di = fd_floor(d); */ 
2952: /* MUTANT (rep_op) */        if (di < 4294967295.0) {
2952: /* MUTANT (rep_op) */        if (di > 4294967295.0) {
2952: /* MUTANT (rep_op) */        if (di >= 4294967295.0) {
2952: /* MUTANT (rep_op) */        if (di == 4294967295.0) {
2952: /* MUTANT (rep_op) */        if (di != 4294967295.0) {
2952: /* MUTANT (rep_const) */        if (di <= 4294967295.1) {
2952: /* MUTANT (rep_const) */        if (di <= 4294967295.-1) {
2952: /* MUTANT (negate) */        if(! (di <= 4294967295.0)) {
2953: /* MUTANT (del_stmt) */ /*             uint32 n = (uint32)di; */ 
2954: /* MUTANT (negate) */            if(! (n))
2956: /* MUTANT (del_stmt) */ /*                     uint32 m = n / base; */ 
2957: /* MUTANT (del_stmt) */ /*                     digit = n - m*base; */ 
2958: /* MUTANT (del_stmt) */ /*                     n = m; */ 
2959: /* MUTANT (del_stmt) */ /*                     JS_ASSERT(digit < (uint32)base); */ 
2959: /* MUTANT (rep_op) */                    JS_ASSERT(digit <= (uint32)base);
2959: /* MUTANT (rep_op) */                    JS_ASSERT(digit > (uint32)base);
2959: /* MUTANT (rep_op) */                    JS_ASSERT(digit >= (uint32)base);
2959: /* MUTANT (rep_op) */                    JS_ASSERT(digit == (uint32)base);
2959: /* MUTANT (rep_op) */                    JS_ASSERT(digit != (uint32)base);
2960: /* MUTANT (del_stmt) */ /*                     *p++ = BASEDIGIT(digit); */ 
2960: /* MUTANT (rep_op) */                    *p-- = BASEDIGIT(digit);
2961: /* MUTANT (del_stmt) */ /*                 } while (n); */ 
2961: /* MUTANT (negate) */                } while(! (n));
2962: /* MUTANT (del_stmt) */ /*             else *p++ = '0'; */ 
2962: /* MUTANT (rep_op) */            else *p-- = '0';
2962: /* MUTANT (rep_const) */            else *p++ = '1';
2962: /* MUTANT (rep_const) */            else *p++ = '-1';
2964: /* MUTANT (del_stmt) */ /*             int32 e; */ 
2965: /* MUTANT (del_stmt) */ /*             int32 bits; */   /* Number of significant bits in di; not used. */
2966: /* MUTANT (del_stmt) */ /*             Bigint *b = d2b(di, &e, &bits); */ 
2967: /* MUTANT (negate) */            if(! (!b))
2969: /* MUTANT (del_stmt) */ /*             b = lshift(b, e); */ 
2969: /* MUTANT (negate) */            b = lshif(!t(b, e));
2970: /* MUTANT (negate) */            if(! (!b)) {
2973: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
2976: /* MUTANT (del_stmt) */ /*                 digit = divrem(b, base); */ 
2977: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(digit < (uint32)base); */ 
2977: /* MUTANT (rep_op) */                JS_ASSERT(digit <= (uint32)base);
2977: /* MUTANT (rep_op) */                JS_ASSERT(digit > (uint32)base);
2977: /* MUTANT (rep_op) */                JS_ASSERT(digit >= (uint32)base);
2977: /* MUTANT (rep_op) */                JS_ASSERT(digit == (uint32)base);
2977: /* MUTANT (rep_op) */                JS_ASSERT(digit != (uint32)base);
2978: /* MUTANT (del_stmt) */ /*                 *p++ = BASEDIGIT(digit); */ 
2978: /* MUTANT (rep_op) */                *p-- = BASEDIGIT(digit);
2979: /* MUTANT (del_stmt) */ /*             } while (b->wds); */ 
2979: /* MUTANT (negate) */            } while(! (b->wds));
2980: /* MUTANT (del_stmt) */ /*             Bfree(b); */ 
2983: /* MUTANT (rep_const) */        q = p-0;
2983: /* MUTANT (rep_const) */        q = p--1;
2983: /* MUTANT (rep_const) */        q = p-((1)+1);
2984: /* MUTANT (rep_op) */        while (q <= pInt) {
2984: /* MUTANT (rep_op) */        while (q < pInt) {
2984: /* MUTANT (rep_op) */        while (q >= pInt) {
2984: /* MUTANT (rep_op) */        while (q == pInt) {
2984: /* MUTANT (rep_op) */        while (q != pInt) {
2984: /* MUTANT (negate) */        while(! (q > pInt)) {
2985: /* MUTANT (del_stmt) */ /*             char ch = *pInt; */ 
2986: /* MUTANT (del_stmt) */ /*             *pInt++ = *q; */ 
2986: /* MUTANT (rep_op) */            *pInt-- = *q;
2987: /* MUTANT (del_stmt) */ /*             *q-- = ch; */ 
2987: /* MUTANT (rep_op) */            *q++ = ch;
2991: /* MUTANT (rep_op) */        if (df == 0.0) {
2991: /* MUTANT (rep_const) */        if (df != 0.1) {
2991: /* MUTANT (rep_const) */        if (df != 0.-1) {
2991: /* MUTANT (negate) */        if(! (df != 0.0)) {
2993: /* MUTANT (del_stmt) */ /*             int32 e, bbits, s2, done; */ 
2994: /* MUTANT (del_stmt) */ /*             Bigint *b, *s, *mlo, *mhi; */ 
2996: /* MUTANT (del_stmt) */ /*             b = s = mlo = mhi = NULL; */ 
2998: /* MUTANT (del_stmt) */ /*             *p++ = '.'; */ 
2998: /* MUTANT (rep_op) */            *p-- = '.';
2999: /* MUTANT (del_stmt) */ /*             b = d2b(df, &e, &bbits); */ 
3000: /* MUTANT (negate) */            if(! (!b)) {
3003: /* MUTANT (del_stmt) */ /*                 Bfree(s); */ 
3004: /* MUTANT (rep_op) */                if (mlo == mhi)
3004: /* MUTANT (negate) */                if(! (mlo != mhi))
3006: /* MUTANT (del_stmt) */ /*                 Bfree(mhi); */ 
3007: /* MUTANT (del_stmt) */ /*                 return NULL; */ 
3009: /* MUTANT (rep_op) */            JS_ASSERT(e <= 0);
3009: /* MUTANT (rep_op) */            JS_ASSERT(e > 0);
3009: /* MUTANT (rep_op) */            JS_ASSERT(e >= 0);
3009: /* MUTANT (rep_op) */            JS_ASSERT(e == 0);
3009: /* MUTANT (rep_op) */            JS_ASSERT(e != 0);
3009: /* MUTANT (rep_const) */            JS_ASSERT(e < 1);
3009: /* MUTANT (rep_const) */            JS_ASSERT(e < -1);
3012: /* MUTANT (del_stmt) */ /*             s2 = -(int32)(word0(d) >> Exp_shift1 & Exp_mask>>Exp_shift1); */ 
3014: /* MUTANT (negate) */            if(! (!s2))
3015: /* MUTANT (rep_const) */                s2 = 0;
3015: /* MUTANT (rep_const) */                s2 = 1;
3015: /* MUTANT (rep_const) */                s2 = ((-1)+1);
3015: /* MUTANT (rep_const) */                s2 = ((-1)-1);
3017: /* MUTANT (rep_op) */            s2 -= Bias + P;
3017: /* MUTANT (rep_op) */            s2 *= Bias + P;
3017: /* MUTANT (rep_op) */            s2 %= Bias + P;
3017: /* MUTANT (rep_op) */            s2 += Bias - P;
3017: /* MUTANT (rep_op) */            s2 += Bias * P;
3017: /* MUTANT (rep_op) */            s2 += Bias % P;
3019: /* MUTANT (del_stmt) */ /*             JS_ASSERT(-s2 < e); */ 
3019: /* MUTANT (rep_op) */            JS_ASSERT(-s2 <= e);
3019: /* MUTANT (rep_op) */            JS_ASSERT(-s2 > e);
3019: /* MUTANT (rep_op) */            JS_ASSERT(-s2 >= e);
3019: /* MUTANT (rep_op) */            JS_ASSERT(-s2 == e);
3019: /* MUTANT (rep_op) */            JS_ASSERT(-s2 != e);
3020: /* MUTANT (del_stmt) */ /*             mlo = i2b(1); */ 
3020: /* MUTANT (rep_const) */            mlo = i2b(0);
3020: /* MUTANT (rep_const) */            mlo = i2b(-1);
3020: /* MUTANT (rep_const) */            mlo = i2b(((1)+1));
3021: /* MUTANT (negate) */            if(! (!mlo))
3023: /* MUTANT (del_stmt) */ /*             mhi = mlo; */ 
3024: /* MUTANT (rep_op) */            if (!word1(d) || !(word0(d) & Bndry_mask)
3026: /* MUTANT (rep_op) */                || word0(d) & (Exp_mask & Exp_mask << 1)
3026: /* MUTANT (rep_const) */                && word0(d) & (Exp_mask & Exp_mask << 0)
3026: /* MUTANT (rep_const) */                && word0(d) & (Exp_mask & Exp_mask << -1)
3026: /* MUTANT (rep_const) */                && word0(d) & (Exp_mask & Exp_mask << ((1)+1))
3031: /* MUTANT (del_stmt) */ /*                 s2 += Log2P; */ 
3031: /* MUTANT (rep_op) */                s2 -= Log2P;
3031: /* MUTANT (rep_op) */                s2 *= Log2P;
3031: /* MUTANT (rep_op) */                s2 %= Log2P;
3032: /* MUTANT (del_stmt) */ /*                 mhi = i2b(1<<Log2P); */ 
3032: /* MUTANT (rep_const) */                mhi = i2b(0<<Log2P);
3032: /* MUTANT (rep_const) */                mhi = i2b(-1<<Log2P);
3032: /* MUTANT (rep_const) */                mhi = i2b(((1)+1)<<Log2P);
3033: /* MUTANT (negate) */                if(! (!mhi))
3036: /* MUTANT (rep_op) */            b = lshift(b, e - s2);
3036: /* MUTANT (rep_op) */            b = lshift(b, e * s2);
3036: /* MUTANT (rep_op) */            b = lshift(b, e % s2);
3036: /* MUTANT (negate) */            b = lshif(!t(b, e + s2));
3037: /* MUTANT (negate) */            if(! (!b))
3039: /* MUTANT (del_stmt) */ /*             s = i2b(1); */ 
3039: /* MUTANT (rep_const) */            s = i2b(0);
3039: /* MUTANT (rep_const) */            s = i2b(-1);
3039: /* MUTANT (rep_const) */            s = i2b(((1)+1));
3040: /* MUTANT (negate) */            if(! (!s))
3042: /* MUTANT (del_stmt) */ /*             s = lshift(s, s2); */ 
3042: /* MUTANT (negate) */            s = lshif(!t(s, s2));
3043: /* MUTANT (negate) */            if(! (!s))
3051: /* MUTANT (del_stmt) */ /*             done = JS_FALSE; */ 
3053: /* MUTANT (del_stmt) */ /*                 int32 j, j1; */ 
3054: /* MUTANT (del_stmt) */ /*                 Bigint *delta; */ 
3056: /* MUTANT (del_stmt) */ /*                 b = multadd(b, base, 0); */ 
3056: /* MUTANT (rep_const) */                b = multadd(b, base, 1);
3056: /* MUTANT (rep_const) */                b = multadd(b, base, -1);
3057: /* MUTANT (negate) */                if(! (!b))
3059: /* MUTANT (del_stmt) */ /*                 digit = quorem2(b, s2); */ 
3060: /* MUTANT (rep_op) */                if (mlo != mhi) {
3060: /* MUTANT (negate) */                if(! (mlo == mhi)) {
3061: /* MUTANT (del_stmt) */ /*                     mlo = mhi = multadd(mlo, base, 0); */ 
3061: /* MUTANT (rep_const) */                    mlo = mhi = multadd(mlo, base, 1);
3061: /* MUTANT (rep_const) */                    mlo = mhi = multadd(mlo, base, -1);
3062: /* MUTANT (negate) */                    if(! (!mhi))
3066: /* MUTANT (del_stmt) */ /*                     mlo = multadd(mlo, base, 0); */ 
3066: /* MUTANT (rep_const) */                    mlo = multadd(mlo, base, 1);
3066: /* MUTANT (rep_const) */                    mlo = multadd(mlo, base, -1);
3067: /* MUTANT (negate) */                    if(! (!mlo))
3069: /* MUTANT (del_stmt) */ /*                     mhi = multadd(mhi, base, 0); */ 
3069: /* MUTANT (rep_const) */                    mhi = multadd(mhi, base, 1);
3069: /* MUTANT (rep_const) */                    mhi = multadd(mhi, base, -1);
3070: /* MUTANT (negate) */                    if(! (!mhi))
3077: /* MUTANT (del_stmt) */ /*                 delta = diff(s, mhi); */ 
3077: /* MUTANT (negate) */                delta = dif(!f(s, mhi));
3078: /* MUTANT (negate) */                if(! (!delta))
3080: /* MUTANT (del_stmt) */ /*                 j1 = delta->sign ? 1 : cmp(b, delta); */ 
3080: /* MUTANT (rep_const) */                j1 = delta->sign ? 0 : cmp(b, delta);
3080: /* MUTANT (rep_const) */                j1 = delta->sign ? -1 : cmp(b, delta);
3080: /* MUTANT (rep_const) */                j1 = delta->sign ? ((1)+1) : cmp(b, delta);
3081: /* MUTANT (del_stmt) */ /*                 Bfree(delta); */ 
3085: /* MUTANT (rep_op) */                if (j1 != 0 && !(word1(d) & 1)) {
3085: /* MUTANT (rep_op) */                if (j1 == 0 || !(word1(d) & 1)) {
3085: /* MUTANT (rep_const) */                if (j1 == 1 && !(word1(d) & 1)) {
3085: /* MUTANT (rep_const) */                if (j1 == -1 && !(word1(d) & 1)) {
3085: /* MUTANT (rep_const) */                if (j1 == 0 && !(word1(d) & 0)) {
3085: /* MUTANT (rep_const) */                if (j1 == 0 && !(word1(d) & -1)) {
3085: /* MUTANT (rep_const) */                if (j1 == 0 && !(word1(d) & ((1)+1))) {
3085: /* MUTANT (negate) */                if(! (j1 == 0 && !(word1(d) & 1))) {
3086: /* MUTANT (rep_op) */                    if (j <= 0)
3086: /* MUTANT (rep_op) */                    if (j < 0)
3086: /* MUTANT (rep_op) */                    if (j >= 0)
3086: /* MUTANT (rep_op) */                    if (j == 0)
3086: /* MUTANT (rep_op) */                    if (j != 0)
3086: /* MUTANT (rep_const) */                    if (j > 1)
3086: /* MUTANT (rep_const) */                    if (j > -1)
3086: /* MUTANT (negate) */                    if(! (j > 0))
3087: /* MUTANT (rep_op) */                        digit--;
3088: /* MUTANT (del_stmt) */ /*                     done = JS_TRUE; */ 
3091: /* MUTANT (rep_op) */                if (j <= 0 || (j == 0
3091: /* MUTANT (rep_op) */                if (j > 0 || (j == 0
3091: /* MUTANT (rep_op) */                if (j >= 0 || (j == 0
3091: /* MUTANT (rep_op) */                if (j == 0 || (j == 0
3091: /* MUTANT (rep_op) */                if (j != 0 || (j == 0
3091: /* MUTANT (rep_op) */                if (j < 0 && (j == 0
3091: /* MUTANT (rep_op) */                if (j < 0 || (j != 0
3091: /* MUTANT (rep_const) */                if (j < 1 || (j == 0
3091: /* MUTANT (rep_const) */                if (j < -1 || (j == 0
3091: /* MUTANT (rep_const) */                if (j < 0 || (j == 1
3091: /* MUTANT (rep_const) */                if (j < 0 || (j == -1
3093: /* MUTANT (rep_op) */                    || !(word1(d) & 1)
3093: /* MUTANT (rep_const) */                    && !(word1(d) & 0)
3093: /* MUTANT (rep_const) */                    && !(word1(d) & -1)
3093: /* MUTANT (rep_const) */                    && !(word1(d) & ((1)+1))
3096: /* MUTANT (rep_op) */                    if (j1 <= 0) {
3096: /* MUTANT (rep_op) */                    if (j1 < 0) {
3096: /* MUTANT (rep_op) */                    if (j1 >= 0) {
3096: /* MUTANT (rep_op) */                    if (j1 == 0) {
3096: /* MUTANT (rep_op) */                    if (j1 != 0) {
3096: /* MUTANT (rep_const) */                    if (j1 > 1) {
3096: /* MUTANT (rep_const) */                    if (j1 > -1) {
3096: /* MUTANT (negate) */                    if(! (j1 > 0)) {
3099: /* MUTANT (del_stmt) */ /*                         b = lshift(b, 1); */ 
3099: /* MUTANT (rep_const) */                        b = lshift(b, 0);
3099: /* MUTANT (rep_const) */                        b = lshift(b, -1);
3099: /* MUTANT (rep_const) */                        b = lshift(b, ((1)+1));
3099: /* MUTANT (negate) */                        b = lshif(!t(b, 1));
3100: /* MUTANT (negate) */                        if(! (!b))
3102: /* MUTANT (del_stmt) */ /*                         j1 = cmp(b, s); */ 
3103: /* MUTANT (rep_op) */                        if (j1 <= 0) /* The even test (|| (j1 == 0 && (digit & 1))) is not here because it messes up odd base output
3103: /* MUTANT (rep_op) */                        if (j1 < 0) /* The even test (|| (j1 == 0 && (digit & 1))) is not here because it messes up odd base output
3103: /* MUTANT (rep_op) */                        if (j1 >= 0) /* The even test (|| (j1 == 0 && (digit & 1))) is not here because it messes up odd base output
3103: /* MUTANT (rep_op) */                        if (j1 == 0) /* The even test (|| (j1 == 0 && (digit & 1))) is not here because it messes up odd base output
3103: /* MUTANT (rep_op) */                        if (j1 != 0) /* The even test (|| (j1 == 0 && (digit & 1))) is not here because it messes up odd base output
3103: /* MUTANT (rep_const) */                        if (j1 > 1) /* The even test (|| (j1 == 0 && (digit & 1))) is not here because it messes up odd base output
3103: /* MUTANT (rep_const) */                        if (j1 > -1) /* The even test (|| (j1 == 0 && (digit & 1))) is not here because it messes up odd base output
3103: /* MUTANT (negate) */                        if(! (j1 > 0)) /* The even test (|| (j1 == 0 && (digit & 1))) is not here because it messes up odd base output
3105: /* MUTANT (rep_op) */                            digit--;
3108: /* MUTANT (rep_op) */                } else if (j1 <= 0) {
3108: /* MUTANT (rep_op) */                } else if (j1 < 0) {
3108: /* MUTANT (rep_op) */                } else if (j1 >= 0) {
3108: /* MUTANT (rep_op) */                } else if (j1 == 0) {
3108: /* MUTANT (rep_op) */                } else if (j1 != 0) {
3108: /* MUTANT (rep_const) */                } else if (j1 > 1) {
3108: /* MUTANT (rep_const) */                } else if (j1 > -1) {
3108: /* MUTANT (negate) */                } else if(! (j1 > 0)) {
3109: /* MUTANT (del_stmt) */ /*                     digit++; */ 
3109: /* MUTANT (rep_op) */                    digit--;
3110: /* MUTANT (del_stmt) */ /*                     done = JS_TRUE; */ 
3112: /* MUTANT (rep_op) */                JS_ASSERT(digit <= (uint32)base);
3112: /* MUTANT (rep_op) */                JS_ASSERT(digit > (uint32)base);
3112: /* MUTANT (rep_op) */                JS_ASSERT(digit >= (uint32)base);
3112: /* MUTANT (rep_op) */                JS_ASSERT(digit == (uint32)base);
3112: /* MUTANT (rep_op) */                JS_ASSERT(digit != (uint32)base);
3113: /* MUTANT (del_stmt) */ /*                 *p++ = BASEDIGIT(digit); */ 
3113: /* MUTANT (rep_op) */                *p-- = BASEDIGIT(digit);
3114: /* MUTANT (del_stmt) */ /*             } while (!done); */ 
3114: /* MUTANT (negate) */            } while(! (!done));
3115: /* MUTANT (del_stmt) */ /*             Bfree(b); */ 
3116: /* MUTANT (del_stmt) */ /*             Bfree(s); */ 
3117: /* MUTANT (rep_op) */            if (mlo == mhi)
3117: /* MUTANT (negate) */            if(! (mlo != mhi))
3119: /* MUTANT (del_stmt) */ /*             Bfree(mhi); */ 
3121: /* MUTANT (rep_op) */        JS_ASSERT(p <= buffer + DTOBASESTR_BUFFER_SIZE);
3121: /* MUTANT (rep_op) */        JS_ASSERT(p > buffer + DTOBASESTR_BUFFER_SIZE);
3121: /* MUTANT (rep_op) */        JS_ASSERT(p >= buffer + DTOBASESTR_BUFFER_SIZE);
3121: /* MUTANT (rep_op) */        JS_ASSERT(p == buffer + DTOBASESTR_BUFFER_SIZE);
3121: /* MUTANT (rep_op) */        JS_ASSERT(p != buffer + DTOBASESTR_BUFFER_SIZE);
3121: /* MUTANT (rep_op) */        JS_ASSERT(p < buffer - DTOBASESTR_BUFFER_SIZE);
3121: /* MUTANT (rep_op) */        JS_ASSERT(p < buffer * DTOBASESTR_BUFFER_SIZE);
3121: /* MUTANT (rep_op) */        JS_ASSERT(p < buffer % DTOBASESTR_BUFFER_SIZE);
3122: /* MUTANT (del_stmt) */ /*         *p = '\0'; */ 
3122: /* MUTANT (rep_const) */        *p = '\1';
3122: /* MUTANT (rep_const) */        *p = '\-1';
3123: /* MUTANT (del_stmt) */ /*         RELEASE_DTOA_LOCK(); */ 
