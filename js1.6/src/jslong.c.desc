43: /* MUTANT (rep_const) */static JSInt64 ll_zero = JSLL_INIT( 1x00000000,0x00000000 );
43: /* MUTANT (rep_const) */static JSInt64 ll_zero = JSLL_INIT( -1x00000000,0x00000000 );
43: /* MUTANT (rep_const) */static JSInt64 ll_zero = JSLL_INIT( 0x00000000,1x00000000 );
43: /* MUTANT (rep_const) */static JSInt64 ll_zero = JSLL_INIT( 0x00000000,-1x00000000 );
44: /* MUTANT (del_stmt) */ /* static JSInt64 ll_maxint = JSLL_INIT( 0x7fffffff, 0xffffffff ); */ 
44: /* MUTANT (rep_const) */static JSInt64 ll_maxint = JSLL_INIT( 1x7fffffff, 0xffffffff );
44: /* MUTANT (rep_const) */static JSInt64 ll_maxint = JSLL_INIT( -1x7fffffff, 0xffffffff );
44: /* MUTANT (rep_const) */static JSInt64 ll_maxint = JSLL_INIT( 0x7fffffff, 1xffffffff );
44: /* MUTANT (rep_const) */static JSInt64 ll_maxint = JSLL_INIT( 0x7fffffff, -1xffffffff );
45: /* MUTANT (del_stmt) */ /* static JSInt64 ll_minint = JSLL_INIT( 0x80000000, 0x00000000 ); */ 
45: /* MUTANT (rep_const) */static JSInt64 ll_minint = JSLL_INIT( 1x80000000, 0x00000000 );
45: /* MUTANT (rep_const) */static JSInt64 ll_minint = JSLL_INIT( -1x80000000, 0x00000000 );
45: /* MUTANT (rep_const) */static JSInt64 ll_minint = JSLL_INIT( 0x80000000, 1x00000000 );
45: /* MUTANT (rep_const) */static JSInt64 ll_minint = JSLL_INIT( 0x80000000, -1x00000000 );
66: /* MUTANT (del_stmt) */ /*     JSUint32 d1, d0, q1, q0; */ 
67: /* MUTANT (del_stmt) */ /*     JSUint32 r1, r0, m; */ 
69: /* MUTANT (del_stmt) */ /*     d1 = jshi16(b); */ 
70: /* MUTANT (del_stmt) */ /*     d0 = jslo16(b); */ 
71: /* MUTANT (del_stmt) */ /*     r1 = a.hi % d1; */ 
71: /* MUTANT (rep_op) */    r1 = a.hi + d1;
71: /* MUTANT (rep_op) */    r1 = a.hi - d1;
71: /* MUTANT (rep_op) */    r1 = a.hi * d1;
72: /* MUTANT (del_stmt) */ /*     q1 = a.hi / d1; */ 
73: /* MUTANT (del_stmt) */ /*     m = q1 * d0; */ 
74: /* MUTANT (del_stmt) */ /*     r1 = (r1 << 16) | jshi16(a.lo); */ 
74: /* MUTANT (rep_op) */    r1 = (r1 << 16) & jshi16(a.lo);
74: /* MUTANT (rep_const) */    r1 = (r1 << 0) | jshi16(a.lo);
74: /* MUTANT (rep_const) */    r1 = (r1 << 1) | jshi16(a.lo);
74: /* MUTANT (rep_const) */    r1 = (r1 << -1) | jshi16(a.lo);
74: /* MUTANT (rep_const) */    r1 = (r1 << ((16)+1)) | jshi16(a.lo);
74: /* MUTANT (rep_const) */    r1 = (r1 << ((16)-1)) | jshi16(a.lo);
75: /* MUTANT (rep_op) */    if (r1 <= m) {
75: /* MUTANT (rep_op) */    if (r1 > m) {
75: /* MUTANT (rep_op) */    if (r1 >= m) {
75: /* MUTANT (rep_op) */    if (r1 == m) {
75: /* MUTANT (rep_op) */    if (r1 != m) {
75: /* MUTANT (negate) */    if(! (r1 < m)) {
76: /* MUTANT (del_stmt) */ /*         q1--, r1 += b; */ 
76: /* MUTANT (rep_op) */        q1++, r1 += b;
76: /* MUTANT (rep_op) */        q1--, r1 -= b;
76: /* MUTANT (rep_op) */        q1--, r1 *= b;
76: /* MUTANT (rep_op) */        q1--, r1 %= b;
77: /* MUTANT (rep_op) */        if (r1 <= b     /* i.e., we didn't get a carry when adding to r1 */
77: /* MUTANT (rep_op) */        if (r1 < b     /* i.e., we didn't get a carry when adding to r1 */
77: /* MUTANT (rep_op) */        if (r1 > b     /* i.e., we didn't get a carry when adding to r1 */
77: /* MUTANT (rep_op) */        if (r1 == b     /* i.e., we didn't get a carry when adding to r1 */
77: /* MUTANT (rep_op) */        if (r1 != b     /* i.e., we didn't get a carry when adding to r1 */
78: /* MUTANT (rep_op) */            || r1 < m) {
78: /* MUTANT (rep_op) */            && r1 <= m) {
78: /* MUTANT (rep_op) */            && r1 > m) {
78: /* MUTANT (rep_op) */            && r1 >= m) {
78: /* MUTANT (rep_op) */            && r1 == m) {
78: /* MUTANT (rep_op) */            && r1 != m) {
79: /* MUTANT (del_stmt) */ /*             q1--, r1 += b; */ 
79: /* MUTANT (rep_op) */            q1++, r1 += b;
79: /* MUTANT (rep_op) */            q1--, r1 -= b;
79: /* MUTANT (rep_op) */            q1--, r1 *= b;
79: /* MUTANT (rep_op) */            q1--, r1 %= b;
82: /* MUTANT (rep_op) */    r1 += m;
82: /* MUTANT (rep_op) */    r1 *= m;
82: /* MUTANT (rep_op) */    r1 %= m;
83: /* MUTANT (del_stmt) */ /*     r0 = r1 % d1; */ 
83: /* MUTANT (rep_op) */    r0 = r1 + d1;
83: /* MUTANT (rep_op) */    r0 = r1 - d1;
83: /* MUTANT (rep_op) */    r0 = r1 * d1;
84: /* MUTANT (del_stmt) */ /*     q0 = r1 / d1; */ 
85: /* MUTANT (del_stmt) */ /*     m = q0 * d0; */ 
86: /* MUTANT (del_stmt) */ /*     r0 = (r0 << 16) | jslo16(a.lo); */ 
86: /* MUTANT (rep_op) */    r0 = (r0 << 16) & jslo16(a.lo);
86: /* MUTANT (rep_const) */    r0 = (r0 << 0) | jslo16(a.lo);
86: /* MUTANT (rep_const) */    r0 = (r0 << 1) | jslo16(a.lo);
86: /* MUTANT (rep_const) */    r0 = (r0 << -1) | jslo16(a.lo);
86: /* MUTANT (rep_const) */    r0 = (r0 << ((16)+1)) | jslo16(a.lo);
86: /* MUTANT (rep_const) */    r0 = (r0 << ((16)-1)) | jslo16(a.lo);
87: /* MUTANT (rep_op) */    if (r0 <= m) {
87: /* MUTANT (rep_op) */    if (r0 > m) {
87: /* MUTANT (rep_op) */    if (r0 >= m) {
87: /* MUTANT (rep_op) */    if (r0 == m) {
87: /* MUTANT (rep_op) */    if (r0 != m) {
87: /* MUTANT (negate) */    if(! (r0 < m)) {
88: /* MUTANT (del_stmt) */ /*         q0--, r0 += b; */ 
88: /* MUTANT (rep_op) */        q0++, r0 += b;
88: /* MUTANT (rep_op) */        q0--, r0 -= b;
88: /* MUTANT (rep_op) */        q0--, r0 *= b;
88: /* MUTANT (rep_op) */        q0--, r0 %= b;
89: /* MUTANT (rep_op) */        if (r0 <= b
89: /* MUTANT (rep_op) */        if (r0 < b
89: /* MUTANT (rep_op) */        if (r0 > b
89: /* MUTANT (rep_op) */        if (r0 == b
89: /* MUTANT (rep_op) */        if (r0 != b
90: /* MUTANT (rep_op) */            || r0 < m) {
90: /* MUTANT (rep_op) */            && r0 <= m) {
90: /* MUTANT (rep_op) */            && r0 > m) {
90: /* MUTANT (rep_op) */            && r0 >= m) {
90: /* MUTANT (rep_op) */            && r0 == m) {
90: /* MUTANT (rep_op) */            && r0 != m) {
91: /* MUTANT (del_stmt) */ /*             q0--, r0 += b; */ 
91: /* MUTANT (rep_op) */            q0++, r0 += b;
91: /* MUTANT (rep_op) */            q0--, r0 -= b;
91: /* MUTANT (rep_op) */            q0--, r0 *= b;
91: /* MUTANT (rep_op) */            q0--, r0 %= b;
94: /* MUTANT (rep_op) */    *qp = (q1 << 16) & q0;
94: /* MUTANT (rep_const) */    *qp = (q1 << 0) | q0;
94: /* MUTANT (rep_const) */    *qp = (q1 << 1) | q0;
94: /* MUTANT (rep_const) */    *qp = (q1 << -1) | q0;
94: /* MUTANT (rep_const) */    *qp = (q1 << ((16)+1)) | q0;
94: /* MUTANT (rep_const) */    *qp = (q1 << ((16)-1)) | q0;
95: /* MUTANT (del_stmt) */ /*     *rp = r0 - m; */ 
100: /* MUTANT (del_stmt) */ /*     JSUint32 t; */ 
101: /* MUTANT (del_stmt) */ /*     JSUint32 r = 32; */ 
101: /* MUTANT (rep_const) */    JSUint32 r = 0;
101: /* MUTANT (rep_const) */    JSUint32 r = 1;
101: /* MUTANT (rep_const) */    JSUint32 r = -1;
101: /* MUTANT (rep_const) */    JSUint32 r = ((32)+1);
101: /* MUTANT (rep_const) */    JSUint32 r = ((32)-1);
103: /* MUTANT (rep_op) */    if ((t = a >> 16) == 0)
103: /* MUTANT (rep_const) */    if ((t = a >> 0) != 0)
103: /* MUTANT (rep_const) */    if ((t = a >> 1) != 0)
103: /* MUTANT (rep_const) */    if ((t = a >> -1) != 0)
103: /* MUTANT (rep_const) */    if ((t = a >> ((16)+1)) != 0)
103: /* MUTANT (rep_const) */    if ((t = a >> ((16)-1)) != 0)
103: /* MUTANT (rep_const) */    if ((t = a >> 16) != 1)
103: /* MUTANT (rep_const) */    if ((t = a >> 16) != -1)
103: /* MUTANT (negate) */    if(! ((t = a >> 16) != 0))
104: /* MUTANT (rep_op) */        r += 16, a = t;
104: /* MUTANT (rep_op) */        r *= 16, a = t;
104: /* MUTANT (rep_op) */        r %= 16, a = t;
104: /* MUTANT (rep_const) */        r -= 0, a = t;
104: /* MUTANT (rep_const) */        r -= 1, a = t;
104: /* MUTANT (rep_const) */        r -= -1, a = t;
104: /* MUTANT (rep_const) */        r -= ((16)+1), a = t;
104: /* MUTANT (rep_const) */        r -= ((16)-1), a = t;
105: /* MUTANT (rep_op) */    if ((t = a >> 8) == 0)
105: /* MUTANT (rep_const) */    if ((t = a >> 0) != 0)
105: /* MUTANT (rep_const) */    if ((t = a >> 1) != 0)
105: /* MUTANT (rep_const) */    if ((t = a >> -1) != 0)
105: /* MUTANT (rep_const) */    if ((t = a >> ((8)+1)) != 0)
105: /* MUTANT (rep_const) */    if ((t = a >> ((8)-1)) != 0)
105: /* MUTANT (rep_const) */    if ((t = a >> 8) != 1)
105: /* MUTANT (rep_const) */    if ((t = a >> 8) != -1)
105: /* MUTANT (negate) */    if(! ((t = a >> 8) != 0))
106: /* MUTANT (rep_op) */        r += 8, a = t;
106: /* MUTANT (rep_op) */        r *= 8, a = t;
106: /* MUTANT (rep_op) */        r %= 8, a = t;
106: /* MUTANT (rep_const) */        r -= 0, a = t;
106: /* MUTANT (rep_const) */        r -= 1, a = t;
106: /* MUTANT (rep_const) */        r -= -1, a = t;
106: /* MUTANT (rep_const) */        r -= ((8)+1), a = t;
106: /* MUTANT (rep_const) */        r -= ((8)-1), a = t;
107: /* MUTANT (rep_op) */    if ((t = a >> 4) == 0)
107: /* MUTANT (rep_const) */    if ((t = a >> 0) != 0)
107: /* MUTANT (rep_const) */    if ((t = a >> 1) != 0)
107: /* MUTANT (rep_const) */    if ((t = a >> -1) != 0)
107: /* MUTANT (rep_const) */    if ((t = a >> ((4)+1)) != 0)
107: /* MUTANT (rep_const) */    if ((t = a >> ((4)-1)) != 0)
107: /* MUTANT (rep_const) */    if ((t = a >> 4) != 1)
107: /* MUTANT (rep_const) */    if ((t = a >> 4) != -1)
107: /* MUTANT (negate) */    if(! ((t = a >> 4) != 0))
108: /* MUTANT (rep_op) */        r += 4, a = t;
108: /* MUTANT (rep_op) */        r *= 4, a = t;
108: /* MUTANT (rep_op) */        r %= 4, a = t;
108: /* MUTANT (rep_const) */        r -= 0, a = t;
108: /* MUTANT (rep_const) */        r -= 1, a = t;
108: /* MUTANT (rep_const) */        r -= -1, a = t;
108: /* MUTANT (rep_const) */        r -= ((4)+1), a = t;
108: /* MUTANT (rep_const) */        r -= ((4)-1), a = t;
109: /* MUTANT (rep_op) */    if ((t = a >> 2) == 0)
109: /* MUTANT (rep_const) */    if ((t = a >> 0) != 0)
109: /* MUTANT (rep_const) */    if ((t = a >> 1) != 0)
109: /* MUTANT (rep_const) */    if ((t = a >> -1) != 0)
109: /* MUTANT (rep_const) */    if ((t = a >> ((2)+1)) != 0)
109: /* MUTANT (rep_const) */    if ((t = a >> ((2)-1)) != 0)
109: /* MUTANT (rep_const) */    if ((t = a >> 2) != 1)
109: /* MUTANT (rep_const) */    if ((t = a >> 2) != -1)
109: /* MUTANT (negate) */    if(! ((t = a >> 2) != 0))
110: /* MUTANT (rep_op) */        r += 2, a = t;
110: /* MUTANT (rep_op) */        r *= 2, a = t;
110: /* MUTANT (rep_op) */        r %= 2, a = t;
110: /* MUTANT (rep_const) */        r -= 0, a = t;
110: /* MUTANT (rep_const) */        r -= 1, a = t;
110: /* MUTANT (rep_const) */        r -= -1, a = t;
110: /* MUTANT (rep_const) */        r -= ((2)+1), a = t;
110: /* MUTANT (rep_const) */        r -= ((2)-1), a = t;
111: /* MUTANT (rep_op) */    if ((t = a >> 1) == 0)
111: /* MUTANT (rep_const) */    if ((t = a >> 0) != 0)
111: /* MUTANT (rep_const) */    if ((t = a >> -1) != 0)
111: /* MUTANT (rep_const) */    if ((t = a >> ((1)+1)) != 0)
111: /* MUTANT (rep_const) */    if ((t = a >> 1) != 1)
111: /* MUTANT (rep_const) */    if ((t = a >> 1) != -1)
111: /* MUTANT (negate) */    if(! ((t = a >> 1) != 0))
112: /* MUTANT (rep_op) */        r += 1, a = t;
112: /* MUTANT (rep_op) */        r *= 1, a = t;
112: /* MUTANT (rep_op) */        r %= 1, a = t;
112: /* MUTANT (rep_const) */        r -= 0, a = t;
112: /* MUTANT (rep_const) */        r -= -1, a = t;
112: /* MUTANT (rep_const) */        r -= ((1)+1), a = t;
113: /* MUTANT (rep_const) */    if (a & 0)
113: /* MUTANT (rep_const) */    if (a & -1)
113: /* MUTANT (rep_const) */    if (a & ((1)+1))
113: /* MUTANT (negate) */    if(! (a & 1))
114: /* MUTANT (rep_op) */        r++;
115: /* MUTANT (del_stmt) */ /*     return r; */ 
120: /* MUTANT (del_stmt) */ /*     JSUint32 n0, n1, n2; */ 
121: /* MUTANT (del_stmt) */ /*     JSUint32 q0, q1; */ 
122: /* MUTANT (del_stmt) */ /*     JSUint32 rsh, lsh; */ 
124: /* MUTANT (del_stmt) */ /*     n0 = a.lo; */ 
125: /* MUTANT (del_stmt) */ /*     n1 = a.hi; */ 
127: /* MUTANT (rep_op) */    if (b.hi != 0) {
127: /* MUTANT (rep_const) */    if (b.hi == 1) {
127: /* MUTANT (rep_const) */    if (b.hi == -1) {
127: /* MUTANT (negate) */    if(! (b.hi == 0)) {
128: /* MUTANT (rep_op) */        if (b.lo <= n1) {
128: /* MUTANT (rep_op) */        if (b.lo < n1) {
128: /* MUTANT (rep_op) */        if (b.lo >= n1) {
128: /* MUTANT (rep_op) */        if (b.lo == n1) {
128: /* MUTANT (rep_op) */        if (b.lo != n1) {
128: /* MUTANT (negate) */        if(! (b.lo > n1)) {
131: /* MUTANT (del_stmt) */ /*             lsh = CountLeadingZeros(b.lo); */ 
133: /* MUTANT (negate) */            if(! (lsh)) {
138: /* MUTANT (del_stmt) */ /*                 b.lo = b.lo << lsh; */ 
139: /* MUTANT (del_stmt) */ /*                 n1 = (n1 << lsh) | (n0 >> (32 - lsh)); */ 
139: /* MUTANT (rep_op) */                n1 = (n1 << lsh) & (n0 >> (32 - lsh));
139: /* MUTANT (rep_const) */                n1 = (n1 << lsh) | (n0 >> (0 - lsh));
139: /* MUTANT (rep_const) */                n1 = (n1 << lsh) | (n0 >> (1 - lsh));
139: /* MUTANT (rep_const) */                n1 = (n1 << lsh) | (n0 >> (-1 - lsh));
139: /* MUTANT (rep_const) */                n1 = (n1 << lsh) | (n0 >> (((32)+1) - lsh));
139: /* MUTANT (rep_const) */                n1 = (n1 << lsh) | (n0 >> (((32)-1) - lsh));
140: /* MUTANT (del_stmt) */ /*                 n0 = n0 << lsh; */ 
144: /* MUTANT (del_stmt) */ /*             norm_udivmod32(&q0, &n0, a, b.lo); */ 
145: /* MUTANT (del_stmt) */ /*             q1 = 0; */ 
145: /* MUTANT (rep_const) */            q1 = 1;
145: /* MUTANT (rep_const) */            q1 = -1;
151: /* MUTANT (rep_op) */            if (b.lo != 0)              /* user wants to divide by zero! */
151: /* MUTANT (rep_const) */            if (b.lo == 1)              /* user wants to divide by zero! */
151: /* MUTANT (rep_const) */            if (b.lo == -1)              /* user wants to divide by zero! */
151: /* MUTANT (negate) */            if(! (b.lo == 0))              /* user wants to divide by zero! */
152: /* MUTANT (rep_const) */                b.lo = 0 / b.lo;        /* so go ahead and crash */
152: /* MUTANT (rep_const) */                b.lo = -1 / b.lo;        /* so go ahead and crash */
152: /* MUTANT (rep_const) */                b.lo = ((1)+1) / b.lo;        /* so go ahead and crash */
154: /* MUTANT (del_stmt) */ /*             lsh = CountLeadingZeros(b.lo); */ 
156: /* MUTANT (rep_op) */            if (lsh != 0) {
156: /* MUTANT (rep_const) */            if (lsh == 1) {
156: /* MUTANT (rep_const) */            if (lsh == -1) {
156: /* MUTANT (negate) */            if(! (lsh == 0)) {
167: /* MUTANT (del_stmt) */ /*                 n1 -= b.lo; */ 
167: /* MUTANT (rep_op) */                n1 += b.lo;
167: /* MUTANT (rep_op) */                n1 *= b.lo;
167: /* MUTANT (rep_op) */                n1 %= b.lo;
168: /* MUTANT (del_stmt) */ /*                 q1 = 1; */ 
168: /* MUTANT (rep_const) */                q1 = 0;
168: /* MUTANT (rep_const) */                q1 = -1;
168: /* MUTANT (rep_const) */                q1 = ((1)+1);
173: /* MUTANT (del_stmt) */ /*                 rsh = 32 - lsh; */ 
173: /* MUTANT (rep_const) */                rsh = 0 - lsh;
173: /* MUTANT (rep_const) */                rsh = 1 - lsh;
173: /* MUTANT (rep_const) */                rsh = -1 - lsh;
173: /* MUTANT (rep_const) */                rsh = ((32)+1) - lsh;
173: /* MUTANT (rep_const) */                rsh = ((32)-1) - lsh;
175: /* MUTANT (del_stmt) */ /*                 b.lo = b.lo << lsh; */ 
176: /* MUTANT (del_stmt) */ /*                 n2 = n1 >> rsh; */ 
177: /* MUTANT (del_stmt) */ /*                 n1 = (n1 << lsh) | (n0 >> rsh); */ 
177: /* MUTANT (rep_op) */                n1 = (n1 << lsh) & (n0 >> rsh);
178: /* MUTANT (del_stmt) */ /*                 n0 = n0 << lsh; */ 
180: /* MUTANT (del_stmt) */ /*                 a.lo = n1, a.hi = n2; */ 
181: /* MUTANT (del_stmt) */ /*                 norm_udivmod32(&q1, &n1, a, b.lo); */ 
187: /* MUTANT (del_stmt) */ /*             norm_udivmod32(&q0, &n0, a, b.lo); */ 
192: /* MUTANT (negate) */        if(! (rp)) {
193: /* MUTANT (del_stmt) */ /*             rp->lo = n0 >> lsh; */ 
194: /* MUTANT (del_stmt) */ /*             rp->hi = 0; */ 
194: /* MUTANT (rep_const) */            rp->hi = 1;
194: /* MUTANT (rep_const) */            rp->hi = -1;
197: /* MUTANT (rep_op) */        if (b.hi <= n1) {
197: /* MUTANT (rep_op) */        if (b.hi < n1) {
197: /* MUTANT (rep_op) */        if (b.hi >= n1) {
197: /* MUTANT (rep_op) */        if (b.hi == n1) {
197: /* MUTANT (rep_op) */        if (b.hi != n1) {
197: /* MUTANT (negate) */        if(! (b.hi > n1)) {
200: /* MUTANT (del_stmt) */ /*             q0 = 0; */ 
200: /* MUTANT (rep_const) */            q0 = 1;
200: /* MUTANT (rep_const) */            q0 = -1;
201: /* MUTANT (del_stmt) */ /*             q1 = 0; */ 
201: /* MUTANT (rep_const) */            q1 = 1;
201: /* MUTANT (rep_const) */            q1 = -1;
204: /* MUTANT (negate) */            if(! (rp)) {
205: /* MUTANT (del_stmt) */ /*                 rp->lo = n0; */ 
206: /* MUTANT (del_stmt) */ /*                 rp->hi = n1; */ 
211: /* MUTANT (del_stmt) */ /*             lsh = CountLeadingZeros(b.hi); */ 
212: /* MUTANT (rep_op) */            if (lsh != 0) {
212: /* MUTANT (rep_const) */            if (lsh == 1) {
212: /* MUTANT (rep_const) */            if (lsh == -1) {
212: /* MUTANT (negate) */            if(! (lsh == 0)) {
227: /* MUTANT (rep_op) */                if (n1 <= b.hi || n0 >= b.lo) {
227: /* MUTANT (rep_op) */                if (n1 < b.hi || n0 >= b.lo) {
227: /* MUTANT (rep_op) */                if (n1 >= b.hi || n0 >= b.lo) {
227: /* MUTANT (rep_op) */                if (n1 == b.hi || n0 >= b.lo) {
227: /* MUTANT (rep_op) */                if (n1 != b.hi || n0 >= b.lo) {
227: /* MUTANT (rep_op) */                if (n1 > b.hi && n0 >= b.lo) {
227: /* MUTANT (rep_op) */                if (n1 > b.hi || n0 <= b.lo) {
227: /* MUTANT (rep_op) */                if (n1 > b.hi || n0 < b.lo) {
227: /* MUTANT (rep_op) */                if (n1 > b.hi || n0 > b.lo) {
227: /* MUTANT (rep_op) */                if (n1 > b.hi || n0 == b.lo) {
227: /* MUTANT (rep_op) */                if (n1 > b.hi || n0 != b.lo) {
227: /* MUTANT (negate) */                if(! (n1 > b.hi || n0 >= b.lo)) {
228: /* MUTANT (del_stmt) */ /*                     q0 = 1; */ 
228: /* MUTANT (rep_const) */                    q0 = 0;
228: /* MUTANT (rep_const) */                    q0 = -1;
228: /* MUTANT (rep_const) */                    q0 = ((1)+1);
229: /* MUTANT (del_stmt) */ /*                     a.lo = n0, a.hi = n1; */ 
230: /* MUTANT (del_stmt) */ /*                     JSLL_SUB(a, a, b); */ 
232: /* MUTANT (del_stmt) */ /*                     q0 = 0; */ 
232: /* MUTANT (rep_const) */                    q0 = 1;
232: /* MUTANT (rep_const) */                    q0 = -1;
234: /* MUTANT (rep_const) */                q1 = 1;
234: /* MUTANT (rep_const) */                q1 = -1;
236: /* MUTANT (negate) */                if(! (rp)) {
237: /* MUTANT (del_stmt) */ /*                     rp->lo = n0; */ 
238: /* MUTANT (del_stmt) */ /*                     rp->hi = n1; */ 
241: /* MUTANT (del_stmt) */ /*                 JSInt64 m; */ 
246: /* MUTANT (del_stmt) */ /*                 rsh = 32 - lsh; */ 
246: /* MUTANT (rep_const) */                rsh = 0 - lsh;
246: /* MUTANT (rep_const) */                rsh = 1 - lsh;
246: /* MUTANT (rep_const) */                rsh = -1 - lsh;
246: /* MUTANT (rep_const) */                rsh = ((32)+1) - lsh;
246: /* MUTANT (rep_const) */                rsh = ((32)-1) - lsh;
248: /* MUTANT (del_stmt) */ /*                 b.hi = (b.hi << lsh) | (b.lo >> rsh); */ 
248: /* MUTANT (rep_op) */                b.hi = (b.hi << lsh) & (b.lo >> rsh);
249: /* MUTANT (del_stmt) */ /*                 b.lo = b.lo << lsh; */ 
250: /* MUTANT (del_stmt) */ /*                 n2 = n1 >> rsh; */ 
251: /* MUTANT (del_stmt) */ /*                 n1 = (n1 << lsh) | (n0 >> rsh); */ 
251: /* MUTANT (rep_op) */                n1 = (n1 << lsh) & (n0 >> rsh);
252: /* MUTANT (del_stmt) */ /*                 n0 = n0 << lsh; */ 
254: /* MUTANT (del_stmt) */ /*                 a.lo = n1, a.hi = n2; */ 
255: /* MUTANT (del_stmt) */ /*                 norm_udivmod32(&q0, &n1, a, b.hi); */ 
256: /* MUTANT (del_stmt) */ /*                 JSLL_MUL32(m, q0, b.lo); */ 
258: /* MUTANT (rep_op) */                if ((m.hi <= n1) || ((m.hi == n1) && (m.lo > n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi < n1) || ((m.hi == n1) && (m.lo > n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi >= n1) || ((m.hi == n1) && (m.lo > n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi == n1) || ((m.hi == n1) && (m.lo > n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi != n1) || ((m.hi == n1) && (m.lo > n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi > n1) && ((m.hi == n1) && (m.lo > n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi > n1) || ((m.hi != n1) && (m.lo > n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi > n1) || ((m.hi == n1) || (m.lo > n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi > n1) || ((m.hi == n1) && (m.lo <= n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi > n1) || ((m.hi == n1) && (m.lo < n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi > n1) || ((m.hi == n1) && (m.lo >= n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi > n1) || ((m.hi == n1) && (m.lo == n0))) {
258: /* MUTANT (rep_op) */                if ((m.hi > n1) || ((m.hi == n1) && (m.lo != n0))) {
258: /* MUTANT (negate) */                if(! ((m.hi > n1) || ((m.hi == n1) && (m.lo > n0)))) {
259: /* MUTANT (del_stmt) */ /*                     q0--; */ 
259: /* MUTANT (rep_op) */                    q0++;
260: /* MUTANT (del_stmt) */ /*                     JSLL_SUB(m, m, b); */ 
263: /* MUTANT (rep_const) */                q1 = 1;
263: /* MUTANT (rep_const) */                q1 = -1;
266: /* MUTANT (negate) */                if(! (rp)) {
267: /* MUTANT (del_stmt) */ /*                     a.lo = n0, a.hi = n1; */ 
268: /* MUTANT (del_stmt) */ /*                     JSLL_SUB(a, a, m); */ 
269: /* MUTANT (del_stmt) */ /*                     rp->lo = (a.hi << rsh) | (a.lo >> lsh); */ 
269: /* MUTANT (rep_op) */                    rp->lo = (a.hi << rsh) & (a.lo >> lsh);
270: /* MUTANT (del_stmt) */ /*                     rp->hi = a.hi >> lsh; */ 
276: /* MUTANT (negate) */    if(! (qp)) {
277: /* MUTANT (del_stmt) */ /*         qp->lo = q0; */ 
278: /* MUTANT (del_stmt) */ /*         qp->hi = q1; */ 
