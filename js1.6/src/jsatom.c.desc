63: /* MUTANT (del_stmt) */ /*     return js_ValueToPrintableString(cx, ATOM_KEY(atom)); */ 
90: /* MUTANT (del_stmt) */ /* const char js_Arguments_str[]       = "Arguments"; */ 
91: /* MUTANT (del_stmt) */ /* const char js_Array_str[]           = "Array"; */ 
92: /* MUTANT (del_stmt) */ /* const char js_Boolean_str[]         = "Boolean"; */ 
93: /* MUTANT (del_stmt) */ /* const char js_Call_str[]            = "Call"; */ 
94: /* MUTANT (del_stmt) */ /* const char js_Date_str[]            = "Date"; */ 
95: /* MUTANT (del_stmt) */ /* const char js_Function_str[]        = "Function"; */ 
96: /* MUTANT (del_stmt) */ /* const char js_Math_str[]            = "Math"; */ 
97: /* MUTANT (del_stmt) */ /* const char js_Namespace_str[]       = "Namespace"; */ 
98: /* MUTANT (del_stmt) */ /* const char js_Number_str[]          = "Number"; */ 
99: /* MUTANT (del_stmt) */ /* const char js_Object_str[]          = "Object"; */ 
100: /* MUTANT (del_stmt) */ /* const char js_QName_str[]           = "QName"; */ 
101: /* MUTANT (del_stmt) */ /* const char js_RegExp_str[]          = "RegExp"; */ 
102: /* MUTANT (del_stmt) */ /* const char js_Script_str[]          = "Script"; */ 
103: /* MUTANT (del_stmt) */ /* const char js_String_str[]          = "String"; */ 
104: /* MUTANT (del_stmt) */ /* const char js_XML_str[]             = "XML"; */ 
105: /* MUTANT (del_stmt) */ /* const char js_File_str[]            = "File"; */ 
106: /* MUTANT (del_stmt) */ /* const char js_anonymous_str[]       = "anonymous"; */ 
107: /* MUTANT (del_stmt) */ /* const char js_arguments_str[]       = "arguments"; */ 
108: /* MUTANT (del_stmt) */ /* const char js_arity_str[]           = "arity"; */ 
109: /* MUTANT (del_stmt) */ /* const char js_callee_str[]          = "callee"; */ 
110: /* MUTANT (del_stmt) */ /* const char js_caller_str[]          = "caller"; */ 
111: /* MUTANT (del_stmt) */ /* const char js_class_prototype_str[] = "prototype"; */ 
112: /* MUTANT (del_stmt) */ /* const char js_constructor_str[]     = "constructor"; */ 
113: /* MUTANT (del_stmt) */ /* const char js_count_str[]           = "__count__"; */ 
114: /* MUTANT (del_stmt) */ /* const char js_each_str[]            = "each"; */ 
115: /* MUTANT (del_stmt) */ /* const char js_eval_str[]            = "eval"; */ 
116: /* MUTANT (del_stmt) */ /* const char js_getter_str[]          = "getter"; */ 
117: /* MUTANT (del_stmt) */ /* const char js_get_str[]             = "get"; */ 
118: /* MUTANT (del_stmt) */ /* const char js_index_str[]           = "index"; */ 
119: /* MUTANT (del_stmt) */ /* const char js_input_str[]           = "input"; */ 
120: /* MUTANT (del_stmt) */ /* const char js_length_str[]          = "length"; */ 
121: /* MUTANT (del_stmt) */ /* const char js_name_str[]            = "name"; */ 
122: /* MUTANT (del_stmt) */ /* const char js_noSuchMethod_str[]    = "__noSuchMethod__"; */ 
123: /* MUTANT (del_stmt) */ /* const char js_object_str[]          = "object"; */ 
124: /* MUTANT (del_stmt) */ /* const char js_parent_str[]          = "__parent__"; */ 
125: /* MUTANT (del_stmt) */ /* const char js_private_str[]         = "private"; */ 
126: /* MUTANT (del_stmt) */ /* const char js_proto_str[]           = "__proto__"; */ 
127: /* MUTANT (del_stmt) */ /* const char js_setter_str[]          = "setter"; */ 
128: /* MUTANT (del_stmt) */ /* const char js_set_str[]             = "set"; */ 
129: /* MUTANT (del_stmt) */ /* const char js_toSource_str[]        = "toSource"; */ 
130: /* MUTANT (del_stmt) */ /* const char js_toString_str[]        = "toString"; */ 
131: /* MUTANT (del_stmt) */ /* const char js_toLocaleString_str[]  = "toLocaleString"; */ 
132: /* MUTANT (del_stmt) */ /* const char js_valueOf_str[]         = "valueOf"; */ 
136: /* MUTANT (del_stmt) */ /* const char js_namespace_str[]       = "namespace"; */ 
137: /* MUTANT (del_stmt) */ /* const char js_ptagc_str[]           = "/>"; */ 
138: /* MUTANT (del_stmt) */ /* const char js_qualifier_str[]       = "::"; */ 
139: /* MUTANT (del_stmt) */ /* const char js_space_str[]           = " "; */ 
140: /* MUTANT (del_stmt) */ /* const char js_stago_str[]           = "<"; */ 
141: /* MUTANT (del_stmt) */ /* const char js_star_str[]            = "*"; */ 
142: /* MUTANT (del_stmt) */ /* const char js_starQualifier_str[]   = "*::"; */ 
143: /* MUTANT (del_stmt) */ /* const char js_tagc_str[]            = ">"; */ 
144: /* MUTANT (del_stmt) */ /* const char js_xml_str[]             = "xml"; */ 
149: /* MUTANT (del_stmt) */ /* const char js_construct_str[]        = "__construct__"; */ 
150: /* MUTANT (del_stmt) */ /* const char js_hasInstance_str[]      = "__hasInstance__"; */ 
151: /* MUTANT (del_stmt) */ /* const char js_ExecutionContext_str[] = "ExecutionContext"; */ 
152: /* MUTANT (del_stmt) */ /* const char js_current_str[]          = "current"; */ 
163: /* MUTANT (del_stmt) */ /*     jsval v; */ 
164: /* MUTANT (del_stmt) */ /*     jsdouble *dp; */ 
167: /* MUTANT (del_stmt) */ /*     v = (jsval)key; */ 
168: /* MUTANT (negate) */    if(! (JSVAL_IS_STRING(v)))
170: /* MUTANT (negate) */    if(! (JSVAL_IS_INT(v)))
172: /* MUTANT (negate) */    if(! (JSVAL_IS_DOUBLE(v))) {
173: /* MUTANT (del_stmt) */ /*         dp = JSVAL_TO_DOUBLE(v); */ 
174: /* MUTANT (del_stmt) */ /*         return HASH_DOUBLE(dp); */ 
176: /* MUTANT (negate) */    if(! (JSVAL_IS_OBJECT(v)))
178: /* MUTANT (negate) */    if(! (JSVAL_IS_BOOLEAN(v)))
180: /* MUTANT (del_stmt) */ /*     return (JSHashNumber)v; */ 
186: /* MUTANT (del_stmt) */ /*     jsval v1, v2; */ 
188: /* MUTANT (del_stmt) */ /*     v1 = (jsval)k1, v2 = (jsval)k2; */ 
189: /* MUTANT (rep_op) */    if (JSVAL_IS_STRING(v1) || JSVAL_IS_STRING(v2))
189: /* MUTANT (negate) */    if(! (JSVAL_IS_STRING(v1) && JSVAL_IS_STRING(v2)))
191: /* MUTANT (rep_op) */    if (JSVAL_IS_DOUBLE(v1) || JSVAL_IS_DOUBLE(v2)) {
191: /* MUTANT (negate) */    if(! (JSVAL_IS_DOUBLE(v1) && JSVAL_IS_DOUBLE(v2))) {
192: /* MUTANT (del_stmt) */ /*         double d1 = *JSVAL_TO_DOUBLE(v1); */ 
193: /* MUTANT (del_stmt) */ /*         double d2 = *JSVAL_TO_DOUBLE(v2); */ 
194: /* MUTANT (negate) */        if(! (JSDOUBLE_IS_NaN(d1)))
198: /* MUTANT (negate) */        if(! (JSDOUBLE_IS_NaN(d2)))
201: /* MUTANT (rep_op) */        return d1 != d2;
203: /* MUTANT (rep_op) */    return v1 != v2;
209: /* MUTANT (del_stmt) */ /*     return 1; */ 
209: /* MUTANT (rep_const) */    return 0;
209: /* MUTANT (rep_const) */    return -1;
209: /* MUTANT (rep_const) */    return ((1)+1);
216: /* MUTANT (del_stmt) */ /*     return malloc(size); */ 
222: /* MUTANT (del_stmt) */ /*     free(item); */ 
228: /* MUTANT (del_stmt) */ /*     JSAtomState *state = (JSAtomState *) priv; */ 
229: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
231: /* MUTANT (del_stmt) */ /*     atom = (JSAtom *) malloc(sizeof(JSAtom)); */ 
232: /* MUTANT (negate) */    if(! (!atom))
235: /* MUTANT (rep_op) */    state->tablegen--;
238: /* MUTANT (del_stmt) */ /*     atom->entry.value = NULL; */ 
239: /* MUTANT (del_stmt) */ /*     atom->flags = 0; */ 
239: /* MUTANT (rep_const) */    atom->flags = 1;
239: /* MUTANT (rep_const) */    atom->flags = -1;
240: /* MUTANT (del_stmt) */ /*     atom->number = state->number++; */ 
240: /* MUTANT (rep_op) */    atom->number = state->number--;
241: /* MUTANT (del_stmt) */ /*     return &atom->entry; */ 
247: /* MUTANT (rep_op) */    if (flag == HT_FREE_ENTRY)
247: /* MUTANT (negate) */    if(! (flag != HT_FREE_ENTRY))
250: /* MUTANT (rep_op) */    ((JSAtomState *)priv)->tablegen--;
260: #define JS_ATOM_HASH_SIZE   0 /* MUTANT (rep_const) */
260: #define JS_ATOM_HASH_SIZE   1 /* MUTANT (rep_const) */
260: #define JS_ATOM_HASH_SIZE   -1 /* MUTANT (rep_const) */
260: #define JS_ATOM_HASH_SIZE   ((1024)+1) /* MUTANT (rep_const) */
260: #define JS_ATOM_HASH_SIZE   ((1024)-1) /* MUTANT (rep_const) */
268: /* MUTANT (negate) */    if(! (!state->table)) {
269: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(cx); */ 
270: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
276: /* MUTANT (del_stmt) */ /*     state->tablegen = 0; */ 
276: /* MUTANT (rep_const) */    state->tablegen = 1;
276: /* MUTANT (rep_const) */    state->tablegen = -1;
279: /* MUTANT (negate) */    if(! (!js_InitPinnedAtoms(cx, state))) {
280: /* MUTANT (del_stmt) */ /*         js_FreeAtomState(cx, state); */ 
281: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
289: /* MUTANT (del_stmt) */ /*     uintN i; */ 
293: /* MUTANT (negate) */        if(! (!(state->lval = js_Atomize(cx, str, strlen(str), ATOM_PINNED))))   \
297: /* MUTANT (rep_op) */    JS_ASSERT(sizeof js_type_str / sizeof js_type_str[0] != JSTYPE_LIMIT);
297: /* MUTANT (rep_const) */    JS_ASSERT(sizeof js_type_str / sizeof js_type_str[1] == JSTYPE_LIMIT);
297: /* MUTANT (rep_const) */    JS_ASSERT(sizeof js_type_str / sizeof js_type_str[-1] == JSTYPE_LIMIT);
298: /* MUTANT (rep_op) */    for (i = 0; i <= JSTYPE_LIMIT; i++)
298: /* MUTANT (rep_op) */    for (i = 0; i > JSTYPE_LIMIT; i++)
298: /* MUTANT (rep_op) */    for (i = 0; i >= JSTYPE_LIMIT; i++)
298: /* MUTANT (rep_op) */    for (i = 0; i == JSTYPE_LIMIT; i++)
298: /* MUTANT (rep_op) */    for (i = 0; i != JSTYPE_LIMIT; i++)
298: /* MUTANT (rep_op) */    for (i = 0; i < JSTYPE_LIMIT; i--)
298: /* MUTANT (rep_const) */    for (i = 1; i < JSTYPE_LIMIT; i++)
298: /* MUTANT (rep_const) */    for (i = -1; i < JSTYPE_LIMIT; i++)
301: /* MUTANT (del_stmt) */ /*     FROB(booleanAtoms[0],         js_false_str); */ 
301: /* MUTANT (rep_const) */    FROB(booleanAtoms[1],         js_false_str);
301: /* MUTANT (rep_const) */    FROB(booleanAtoms[-1],         js_false_str);
302: /* MUTANT (del_stmt) */ /*     FROB(booleanAtoms[1],         js_true_str); */ 
302: /* MUTANT (rep_const) */    FROB(booleanAtoms[0],         js_true_str);
302: /* MUTANT (rep_const) */    FROB(booleanAtoms[-1],         js_true_str);
302: /* MUTANT (rep_const) */    FROB(booleanAtoms[((1)+1)],         js_true_str);
303: /* MUTANT (del_stmt) */ /*     FROB(nullAtom,                js_null_str); */ 
305: /* MUTANT (del_stmt) */ /*     FROB(ArgumentsAtom,           js_Arguments_str); */ 
306: /* MUTANT (del_stmt) */ /*     FROB(ArrayAtom,               js_Array_str); */ 
307: /* MUTANT (del_stmt) */ /*     FROB(BooleanAtom,             js_Boolean_str); */ 
308: /* MUTANT (del_stmt) */ /*     FROB(CallAtom,                js_Call_str); */ 
309: /* MUTANT (del_stmt) */ /*     FROB(DateAtom,                js_Date_str); */ 
314: /* MUTANT (del_stmt) */ /*     FROB(MathAtom,                js_Math_str); */ 
315: /* MUTANT (del_stmt) */ /*     FROB(NamespaceAtom,           js_Namespace_str); */ 
316: /* MUTANT (del_stmt) */ /*     FROB(NumberAtom,              js_Number_str); */ 
317: /* MUTANT (del_stmt) */ /*     FROB(ObjectAtom,              js_Object_str); */ 
318: /* MUTANT (del_stmt) */ /*     FROB(QNameAtom,               js_QName_str); */ 
319: /* MUTANT (del_stmt) */ /*     FROB(RegExpAtom,              js_RegExp_str); */ 
320: /* MUTANT (del_stmt) */ /*     FROB(ScriptAtom,              js_Script_str); */ 
321: /* MUTANT (del_stmt) */ /*     FROB(StringAtom,              js_String_str); */ 
322: /* MUTANT (del_stmt) */ /*     FROB(XMLAtom,                 js_XML_str); */ 
323: /* MUTANT (del_stmt) */ /*     FROB(FileAtom,                js_File_str); */ 
324: /* MUTANT (del_stmt) */ /*     FROB(anonymousAtom,           js_anonymous_str); */ 
325: /* MUTANT (del_stmt) */ /*     FROB(argumentsAtom,           js_arguments_str); */ 
326: /* MUTANT (del_stmt) */ /*     FROB(arityAtom,               js_arity_str); */ 
327: /* MUTANT (del_stmt) */ /*     FROB(calleeAtom,              js_callee_str); */ 
328: /* MUTANT (del_stmt) */ /*     FROB(callerAtom,              js_caller_str); */ 
329: /* MUTANT (del_stmt) */ /*     FROB(classPrototypeAtom,      js_class_prototype_str); */ 
330: /* MUTANT (del_stmt) */ /*     FROB(constructorAtom,         js_constructor_str); */ 
331: /* MUTANT (del_stmt) */ /*     FROB(countAtom,               js_count_str); */ 
332: /* MUTANT (del_stmt) */ /*     FROB(eachAtom,                js_each_str); */ 
333: /* MUTANT (del_stmt) */ /*     FROB(evalAtom,                js_eval_str); */ 
334: /* MUTANT (del_stmt) */ /*     FROB(getAtom,                 js_get_str); */ 
335: /* MUTANT (del_stmt) */ /*     FROB(getterAtom,              js_getter_str); */ 
336: /* MUTANT (del_stmt) */ /*     FROB(indexAtom,               js_index_str); */ 
337: /* MUTANT (del_stmt) */ /*     FROB(inputAtom,               js_input_str); */ 
338: /* MUTANT (del_stmt) */ /*     FROB(lengthAtom,              js_length_str); */ 
339: /* MUTANT (del_stmt) */ /*     FROB(nameAtom,                js_name_str); */ 
340: /* MUTANT (del_stmt) */ /*     FROB(noSuchMethodAtom,        js_noSuchMethod_str); */ 
341: /* MUTANT (del_stmt) */ /*     FROB(parentAtom,              js_parent_str); */ 
342: /* MUTANT (del_stmt) */ /*     FROB(protoAtom,               js_proto_str); */ 
343: /* MUTANT (del_stmt) */ /*     FROB(setAtom,                 js_set_str); */ 
344: /* MUTANT (del_stmt) */ /*     FROB(setterAtom,              js_setter_str); */ 
345: /* MUTANT (del_stmt) */ /*     FROB(toSourceAtom,            js_toSource_str); */ 
346: /* MUTANT (del_stmt) */ /*     FROB(toStringAtom,            js_toString_str); */ 
347: /* MUTANT (del_stmt) */ /*     FROB(toLocaleStringAtom,      js_toLocaleString_str); */ 
348: /* MUTANT (del_stmt) */ /*     FROB(valueOfAtom,             js_valueOf_str); */ 
352: /* MUTANT (del_stmt) */ /*     FROB(namespaceAtom,           js_namespace_str); */ 
353: /* MUTANT (del_stmt) */ /*     FROB(ptagcAtom,               js_ptagc_str); */ 
354: /* MUTANT (del_stmt) */ /*     FROB(qualifierAtom,           js_qualifier_str); */ 
355: /* MUTANT (del_stmt) */ /*     FROB(spaceAtom,               js_space_str); */ 
356: /* MUTANT (del_stmt) */ /*     FROB(stagoAtom,               js_stago_str); */ 
357: /* MUTANT (del_stmt) */ /*     FROB(starAtom,                js_star_str); */ 
358: /* MUTANT (del_stmt) */ /*     FROB(starQualifierAtom,       js_starQualifier_str); */ 
359: /* MUTANT (del_stmt) */ /*     FROB(tagcAtom,                js_tagc_str); */ 
360: /* MUTANT (del_stmt) */ /*     FROB(xmlAtom,                 js_xml_str); */ 
365: /* MUTANT (del_stmt) */ /*     FROB(constructAtom,           js_construct_str); */ 
366: /* MUTANT (del_stmt) */ /*     FROB(hasInstanceAtom,         js_hasInstance_str); */ 
367: /* MUTANT (del_stmt) */ /*     FROB(ExecutionContextAtom,    js_ExecutionContext_str); */ 
368: /* MUTANT (del_stmt) */ /*     FROB(currentAtom,             js_current_str); */ 
373: /* MUTANT (rep_const) */    memset(&state->lazy, 1, sizeof state->lazy);
373: /* MUTANT (rep_const) */    memset(&state->lazy, -1, sizeof state->lazy);
374: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
381: /* MUTANT (negate) */    if(! (state->table))
386: /* MUTANT (rep_const) */    memset(state, 1, sizeof *state);
386: /* MUTANT (rep_const) */    memset(state, -1, sizeof *state);
390: /* MUTANT (del_stmt) */ /*     JSRuntime   *rt; */ 
391: /* MUTANT (del_stmt) */ /*     jsatomid    leaks; */ 
392: /* MUTANT (del_stmt) */ /* } UninternArgs; */ 
397: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
398: /* MUTANT (del_stmt) */ /*     UninternArgs *args; */ 
400: /* MUTANT (del_stmt) */ /*     atom = (JSAtom *)he; */ 
401: /* MUTANT (del_stmt) */ /*     args = (UninternArgs *)arg; */ 
402: /* MUTANT (negate) */    if(! (ATOM_IS_STRING(atom)))
404: /* MUTANT (negate) */    else if(! (ATOM_IS_OBJECT(atom)))
405: /* MUTANT (rep_op) */        args->leaks--;
406: /* MUTANT (del_stmt) */ /*     return HT_ENUMERATE_NEXT; */ 
412: /* MUTANT (del_stmt) */ /*     UninternArgs args; */ 
414: /* MUTANT (negate) */    if(! (!state->table))
416: /* MUTANT (del_stmt) */ /*     args.rt = state->runtime; */ 
417: /* MUTANT (del_stmt) */ /*     args.leaks = 0; */ 
417: /* MUTANT (rep_const) */    args.leaks = 1;
417: /* MUTANT (rep_const) */    args.leaks = -1;
418: /* MUTANT (del_stmt) */ /*     JS_HashTableEnumerateEntries(state->table, js_atom_uninterner, &args); */ 
420: /* MUTANT (rep_op) */    if (args.leaks == 0) {
420: /* MUTANT (rep_const) */    if (args.leaks != 1) {
420: /* MUTANT (rep_const) */    if (args.leaks != -1) {
420: /* MUTANT (negate) */    if(! (args.leaks != 0)) {
432: /* MUTANT (del_stmt) */ /*     uintN           gcflags; */ 
433: /* MUTANT (del_stmt) */ /*     JSGCThingMarker mark; */ 
434: /* MUTANT (del_stmt) */ /*     void            *data; */ 
435: /* MUTANT (del_stmt) */ /* } MarkArgs; */ 
440: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
441: /* MUTANT (del_stmt) */ /*     MarkArgs *args; */ 
442: /* MUTANT (del_stmt) */ /*     jsval key; */ 
444: /* MUTANT (del_stmt) */ /*     atom = (JSAtom *)he; */ 
445: /* MUTANT (del_stmt) */ /*     args = (MarkArgs *)arg; */ 
446: /* MUTANT (rep_op) */    if ((atom->flags & (ATOM_PINNED & ATOM_INTERNED)) ||
446: /* MUTANT (rep_op) */    if ((atom->flags & (ATOM_PINNED | ATOM_INTERNED)) &&
448: /* MUTANT (del_stmt) */ /*         atom->flags |= ATOM_MARK; */ 
449: /* MUTANT (del_stmt) */ /*         key = ATOM_KEY(atom); */ 
450: /* MUTANT (negate) */        if(! (JSVAL_IS_GCTHING(key)))
460: /* MUTANT (del_stmt) */ /*     MarkArgs args; */ 
462: /* MUTANT (negate) */    if(! (!state->table))
464: /* MUTANT (del_stmt) */ /*     args.gcflags = gcflags; */ 
465: /* MUTANT (del_stmt) */ /*     args.mark = mark; */ 
466: /* MUTANT (del_stmt) */ /*     args.data = data; */ 
467: /* MUTANT (del_stmt) */ /*     JS_HashTableEnumerateEntries(state->table, js_atom_marker, &args); */ 
473: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
474: /* MUTANT (del_stmt) */ /*     JSAtomState *state; */ 
476: /* MUTANT (del_stmt) */ /*     atom = (JSAtom *)he; */ 
477: /* MUTANT (negate) */    if(! (atom->flags & ATOM_MARK)) {
478: /* MUTANT (del_stmt) */ /*         atom->flags &= ~ATOM_MARK; */ 
479: /* MUTANT (del_stmt) */ /*         state = (JSAtomState *)arg; */ 
480: /* MUTANT (del_stmt) */ /*         state->liveAtoms++; */ 
480: /* MUTANT (rep_op) */        state->liveAtoms--;
481: /* MUTANT (del_stmt) */ /*         return HT_ENUMERATE_NEXT; */ 
483: /* MUTANT (rep_op) */    JS_ASSERT((atom->flags & (ATOM_PINNED & ATOM_INTERNED)) == 0);
483: /* MUTANT (rep_op) */    JS_ASSERT((atom->flags & (ATOM_PINNED | ATOM_INTERNED)) != 0);
483: /* MUTANT (rep_const) */    JS_ASSERT((atom->flags & (ATOM_PINNED | ATOM_INTERNED)) == 1);
483: /* MUTANT (rep_const) */    JS_ASSERT((atom->flags & (ATOM_PINNED | ATOM_INTERNED)) == -1);
484: /* MUTANT (del_stmt) */ /*     atom->entry.key = atom->entry.value = NULL; */ 
485: /* MUTANT (del_stmt) */ /*     atom->flags = 0; */ 
485: /* MUTANT (rep_const) */    atom->flags = 1;
485: /* MUTANT (rep_const) */    atom->flags = -1;
486: /* MUTANT (del_stmt) */ /*     return HT_ENUMERATE_REMOVE; */ 
492: /* MUTANT (del_stmt) */ /*     state->liveAtoms = 0; */ 
492: /* MUTANT (rep_const) */    state->liveAtoms = 1;
492: /* MUTANT (rep_const) */    state->liveAtoms = -1;
493: /* MUTANT (negate) */    if(! (state->table))
500: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
502: /* MUTANT (del_stmt) */ /*     atom = (JSAtom *)he; */ 
503: /* MUTANT (del_stmt) */ /*     atom->flags &= ~ATOM_PINNED; */ 
504: /* MUTANT (del_stmt) */ /*     return HT_ENUMERATE_NEXT; */ 
510: /* MUTANT (negate) */    if(! (state->table))
517: /* MUTANT (del_stmt) */ /*     JSAtomState *state; */ 
518: /* MUTANT (del_stmt) */ /*     JSHashTable *table; */ 
519: /* MUTANT (del_stmt) */ /*     JSHashEntry *he, **hep; */ 
520: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
522: /* MUTANT (del_stmt) */ /*     state = &cx->runtime->atomState; */ 
523: /* MUTANT (del_stmt) */ /*     JS_LOCK(&state->lock, cx); */ 
524: /* MUTANT (del_stmt) */ /*     table = state->table; */ 
525: /* MUTANT (del_stmt) */ /*     hep = JS_HashTableRawLookup(table, keyHash, (void *)key); */ 
526: /* MUTANT (rep_op) */    if ((he = *hep) != NULL) {
526: /* MUTANT (negate) */    if(! ((he = *hep) == NULL)) {
527: /* MUTANT (del_stmt) */ /*         he = JS_HashTableRawAdd(table, hep, keyHash, (void *)key, NULL); */ 
528: /* MUTANT (negate) */        if(! (!he)) {
529: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
530: /* MUTANT (del_stmt) */ /*             atom = NULL; */ 
531: /* MUTANT (del_stmt) */ /*             goto out; */ 
536: /* MUTANT (del_stmt) */ /*     atom->flags |= flags; */ 
537: /* MUTANT (del_stmt) */ /*     cx->lastAtom = atom; */ 
540: /* MUTANT (del_stmt) */ /*     return atom; */ 
546: /* MUTANT (del_stmt) */ /*     jsval key; */ 
547: /* MUTANT (del_stmt) */ /*     JSHashNumber keyHash; */ 
550: /* MUTANT (del_stmt) */ /*     keyHash = HASH_OBJECT(obj); */ 
551: /* MUTANT (del_stmt) */ /*     key = OBJECT_TO_JSVAL(obj); */ 
552: /* MUTANT (del_stmt) */ /*     return js_AtomizeHashedKey(cx, key, keyHash, flags); */ 
558: /* MUTANT (del_stmt) */ /*     jsval key; */ 
559: /* MUTANT (del_stmt) */ /*     JSHashNumber keyHash; */ 
561: /* MUTANT (del_stmt) */ /*     key = BOOLEAN_TO_JSVAL(b); */ 
562: /* MUTANT (del_stmt) */ /*     keyHash = HASH_BOOLEAN(b); */ 
563: /* MUTANT (del_stmt) */ /*     return js_AtomizeHashedKey(cx, key, keyHash, flags); */ 
569: /* MUTANT (del_stmt) */ /*     jsval key; */ 
570: /* MUTANT (del_stmt) */ /*     JSHashNumber keyHash; */ 
572: /* MUTANT (del_stmt) */ /*     key = INT_TO_JSVAL(i); */ 
573: /* MUTANT (del_stmt) */ /*     keyHash = HASH_INT(i); */ 
574: /* MUTANT (del_stmt) */ /*     return js_AtomizeHashedKey(cx, key, keyHash, flags); */ 
584: /* MUTANT (del_stmt) */ /*     jsdouble *dp; */ 
585: /* MUTANT (del_stmt) */ /*     JSHashNumber keyHash; */ 
586: /* MUTANT (del_stmt) */ /*     jsval key; */ 
587: /* MUTANT (del_stmt) */ /*     JSAtomState *state; */ 
588: /* MUTANT (del_stmt) */ /*     JSHashTable *table; */ 
589: /* MUTANT (del_stmt) */ /*     JSHashEntry *he, **hep; */ 
590: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
591: /* MUTANT (del_stmt) */ /*     char buf[2 * ALIGNMENT(double)]; */ 
591: /* MUTANT (rep_const) */    char buf[0 * ALIGNMENT(double)];
591: /* MUTANT (rep_const) */    char buf[1 * ALIGNMENT(double)];
591: /* MUTANT (rep_const) */    char buf[-1 * ALIGNMENT(double)];
591: /* MUTANT (rep_const) */    char buf[((2)+1) * ALIGNMENT(double)];
591: /* MUTANT (rep_const) */    char buf[((2)-1) * ALIGNMENT(double)];
593: /* MUTANT (del_stmt) */ /*     dp = ALIGN(buf, double); */ 
594: /* MUTANT (del_stmt) */ /*     *dp = d; */ 
595: /* MUTANT (del_stmt) */ /*     keyHash = HASH_DOUBLE(dp); */ 
596: /* MUTANT (del_stmt) */ /*     key = DOUBLE_TO_JSVAL(dp); */ 
597: /* MUTANT (del_stmt) */ /*     state = &cx->runtime->atomState; */ 
598: /* MUTANT (del_stmt) */ /*     JS_LOCK(&state->lock, cx); */ 
599: /* MUTANT (del_stmt) */ /*     table = state->table; */ 
600: /* MUTANT (del_stmt) */ /*     hep = JS_HashTableRawLookup(table, keyHash, (void *)key); */ 
601: /* MUTANT (rep_op) */    if ((he = *hep) != NULL) {
601: /* MUTANT (negate) */    if(! ((he = *hep) == NULL)) {
606: /* MUTANT (negate) */        if(! (!js_NewDoubleValue(cx, d, &key)))
608: /* MUTANT (del_stmt) */ /*         JS_LOCK(&state->lock, cx); */ 
610: /* MUTANT (rep_op) */        if (state->tablegen == gen) {
610: /* MUTANT (negate) */        if(! (state->tablegen != gen)) {
611: /* MUTANT (del_stmt) */ /*             hep = JS_HashTableRawLookup(table, keyHash, (void *)key); */ 
612: /* MUTANT (rep_op) */            if ((he = *hep) == NULL) {
612: /* MUTANT (negate) */            if(! ((he = *hep) != NULL)) {
613: /* MUTANT (del_stmt) */ /*                 atom = (JSAtom *)he; */ 
614: /* MUTANT (del_stmt) */ /*                 goto out; */ 
619: /* MUTANT (negate) */        if(! (!he)) {
620: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
621: /* MUTANT (del_stmt) */ /*             atom = NULL; */ 
622: /* MUTANT (del_stmt) */ /*             goto out; */ 
627: /* MUTANT (del_stmt) */ /*     atom->flags |= flags; */ 
628: /* MUTANT (del_stmt) */ /*     cx->lastAtom = atom; */ 
631: /* MUTANT (del_stmt) */ /*     return atom; */ 
638: #define HIDDEN_ATOM_SUBSPACE_KEYHASH    1x6A09E667 /* MUTANT (rep_const) */
638: #define HIDDEN_ATOM_SUBSPACE_KEYHASH    -1x6A09E667 /* MUTANT (rep_const) */
643: /* MUTANT (del_stmt) */ /*     JSHashNumber keyHash; */ 
644: /* MUTANT (del_stmt) */ /*     jsval key; */ 
645: /* MUTANT (del_stmt) */ /*     JSAtomState *state; */ 
646: /* MUTANT (del_stmt) */ /*     JSHashTable *table; */ 
647: /* MUTANT (del_stmt) */ /*     JSHashEntry *he, **hep; */ 
648: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
650: /* MUTANT (del_stmt) */ /*     keyHash = js_HashString(str); */ 
651: /* MUTANT (negate) */    if(! (flags & ATOM_HIDDEN))
653: /* MUTANT (del_stmt) */ /*     key = STRING_TO_JSVAL(str); */ 
654: /* MUTANT (del_stmt) */ /*     state = &cx->runtime->atomState; */ 
655: /* MUTANT (del_stmt) */ /*     JS_LOCK(&state->lock, cx); */ 
656: /* MUTANT (del_stmt) */ /*     table = state->table; */ 
657: /* MUTANT (del_stmt) */ /*     hep = JS_HashTableRawLookup(table, keyHash, (void *)key); */ 
658: /* MUTANT (rep_op) */    if ((he = *hep) != NULL) {
658: /* MUTANT (negate) */    if(! ((he = *hep) == NULL)) {
661: /* MUTANT (del_stmt) */ /*         JS_UNLOCK(&state->lock, cx); */ 
664: /* MUTANT (negate) */        if(! (flags & ATOM_TMPSTR)) {
666: /* MUTANT (rep_const) */                  ? js_NewString(cx, str->chars, str->length, 1)
666: /* MUTANT (rep_const) */                  ? js_NewString(cx, str->chars, str->length, -1)
667: /* MUTANT (rep_const) */                  : js_NewStringCopyN(cx, str->chars, str->length, 1);
667: /* MUTANT (rep_const) */                  : js_NewStringCopyN(cx, str->chars, str->length, -1);
668: /* MUTANT (negate) */            if(! (!str))
670: /* MUTANT (del_stmt) */ /*             key = STRING_TO_JSVAL(str); */ 
672: /* MUTANT (negate) */            if(! (!JS_MakeStringImmutable(cx, str)))
678: /* MUTANT (rep_op) */        if (state->tablegen == gen) {
678: /* MUTANT (negate) */        if(! (state->tablegen != gen)) {
679: /* MUTANT (del_stmt) */ /*             hep = JS_HashTableRawLookup(table, keyHash, (void *)key); */ 
680: /* MUTANT (rep_op) */            if ((he = *hep) == NULL) {
680: /* MUTANT (negate) */            if(! ((he = *hep) != NULL)) {
681: /* MUTANT (del_stmt) */ /*                 atom = (JSAtom *)he; */ 
682: /* MUTANT (negate) */                if(! (flags & ATOM_NOCOPY))
684: /* MUTANT (del_stmt) */ /*                 goto out; */ 
690: /* MUTANT (negate) */        if(! (!he)) {
691: /* MUTANT (del_stmt) */ /*             JS_ReportOutOfMemory(cx); */ 
692: /* MUTANT (del_stmt) */ /*             atom = NULL; */ 
693: /* MUTANT (del_stmt) */ /*             goto out; */ 
698: /* MUTANT (del_stmt) */ /*     atom->flags |= flags & (ATOM_PINNED | ATOM_INTERNED | ATOM_HIDDEN); */ 
698: /* MUTANT (rep_op) */    atom->flags |= flags & (ATOM_PINNED & ATOM_INTERNED | ATOM_HIDDEN);
698: /* MUTANT (rep_op) */    atom->flags |= flags & (ATOM_PINNED | ATOM_INTERNED & ATOM_HIDDEN);
699: /* MUTANT (del_stmt) */ /*     cx->lastAtom = atom; */ 
702: /* MUTANT (del_stmt) */ /*     return atom; */ 
708: /* MUTANT (del_stmt) */ /*     jschar *chars; */ 
709: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
710: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
711: /* MUTANT (del_stmt) */ /*     char buf[2 * ALIGNMENT(JSString)]; */ 
711: /* MUTANT (rep_const) */    char buf[0 * ALIGNMENT(JSString)];
711: /* MUTANT (rep_const) */    char buf[1 * ALIGNMENT(JSString)];
711: /* MUTANT (rep_const) */    char buf[-1 * ALIGNMENT(JSString)];
711: /* MUTANT (rep_const) */    char buf[((2)+1) * ALIGNMENT(JSString)];
711: /* MUTANT (rep_const) */    char buf[((2)-1) * ALIGNMENT(JSString)];
720: #define ATOMIZE_BUF_MAX 0 /* MUTANT (rep_const) */
720: #define ATOMIZE_BUF_MAX 1 /* MUTANT (rep_const) */
720: #define ATOMIZE_BUF_MAX -1 /* MUTANT (rep_const) */
720: #define ATOMIZE_BUF_MAX ((32)+1) /* MUTANT (rep_const) */
720: #define ATOMIZE_BUF_MAX ((32)-1) /* MUTANT (rep_const) */
722: /* MUTANT (del_stmt) */ /*     size_t inflatedLength = ATOMIZE_BUF_MAX - 1; */ 
722: /* MUTANT (rep_const) */    size_t inflatedLength = ATOMIZE_BUF_MAX - 0;
722: /* MUTANT (rep_const) */    size_t inflatedLength = ATOMIZE_BUF_MAX - -1;
722: /* MUTANT (rep_const) */    size_t inflatedLength = ATOMIZE_BUF_MAX - ((1)+1);
724: /* MUTANT (rep_op) */    if (length <= ATOMIZE_BUF_MAX) {
724: /* MUTANT (rep_op) */    if (length > ATOMIZE_BUF_MAX) {
724: /* MUTANT (rep_op) */    if (length >= ATOMIZE_BUF_MAX) {
724: /* MUTANT (rep_op) */    if (length == ATOMIZE_BUF_MAX) {
724: /* MUTANT (rep_op) */    if (length != ATOMIZE_BUF_MAX) {
724: /* MUTANT (negate) */    if(! (length < ATOMIZE_BUF_MAX)) {
725: /* MUTANT (del_stmt) */ /*         js_InflateStringToBuffer(cx, bytes, length, inflated, &inflatedLength); */ 
726: /* MUTANT (del_stmt) */ /*         inflated[inflatedLength] = 0; */ 
726: /* MUTANT (rep_const) */        inflated[inflatedLength] = 1;
726: /* MUTANT (rep_const) */        inflated[inflatedLength] = -1;
727: /* MUTANT (del_stmt) */ /*         chars = inflated; */ 
729: /* MUTANT (del_stmt) */ /*         inflatedLength = length; */ 
730: /* MUTANT (del_stmt) */ /*         chars = js_InflateString(cx, bytes, &inflatedLength); */ 
731: /* MUTANT (negate) */        if(! (!chars))
733: /* MUTANT (del_stmt) */ /*         flags |= ATOM_NOCOPY; */ 
738: /* MUTANT (del_stmt) */ /*     str->chars = chars; */ 
739: /* MUTANT (del_stmt) */ /*     str->length = inflatedLength; */ 
740: /* MUTANT (del_stmt) */ /*     atom = js_AtomizeString(cx, str, ATOM_TMPSTR | flags); */ 
740: /* MUTANT (rep_op) */    atom = js_AtomizeString(cx, str, ATOM_TMPSTR & flags);
741: /* MUTANT (rep_op) */    if (chars == inflated && (!atom || ATOM_TO_STRING(atom)->chars != chars))
741: /* MUTANT (rep_op) */    if (chars != inflated || (!atom || ATOM_TO_STRING(atom)->chars != chars))
741: /* MUTANT (rep_op) */    if (chars != inflated && (!atom && ATOM_TO_STRING(atom)->chars != chars))
741: /* MUTANT (rep_op) */    if (chars != inflated && (!atom || ATOM_TO_STRING(atom)->chars == chars))
741: /* MUTANT (negate) */    if(! (chars != inflated && (!atom || ATOM_TO_STRING(atom)->chars != chars)))
743: /* MUTANT (del_stmt) */ /*     return atom; */ 
749: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
750: /* MUTANT (del_stmt) */ /*     char buf[2 * ALIGNMENT(JSString)]; */ 
750: /* MUTANT (rep_const) */    char buf[0 * ALIGNMENT(JSString)];
750: /* MUTANT (rep_const) */    char buf[1 * ALIGNMENT(JSString)];
750: /* MUTANT (rep_const) */    char buf[-1 * ALIGNMENT(JSString)];
750: /* MUTANT (rep_const) */    char buf[((2)+1) * ALIGNMENT(JSString)];
750: /* MUTANT (rep_const) */    char buf[((2)-1) * ALIGNMENT(JSString)];
752: /* MUTANT (del_stmt) */ /*     str = ALIGN(buf, JSString); */ 
753: /* MUTANT (del_stmt) */ /*     str->chars = (jschar *)chars; */ 
754: /* MUTANT (del_stmt) */ /*     str->length = length; */ 
755: /* MUTANT (del_stmt) */ /*     return js_AtomizeString(cx, str, ATOM_TMPSTR | flags); */ 
755: /* MUTANT (rep_op) */    return js_AtomizeString(cx, str, ATOM_TMPSTR & flags);
761: /* MUTANT (negate) */    if(! (JSVAL_IS_STRING(value)))
763: /* MUTANT (negate) */    if(! (JSVAL_IS_INT(value)))
765: /* MUTANT (negate) */    if(! (JSVAL_IS_DOUBLE(value)))
767: /* MUTANT (negate) */    if(! (JSVAL_IS_OBJECT(value)))
769: /* MUTANT (negate) */    if(! (JSVAL_IS_BOOLEAN(value)))
771: /* MUTANT (del_stmt) */ /*     return js_AtomizeHashedKey(cx, value, (JSHashNumber)value, flags); */ 
777: /* MUTANT (del_stmt) */ /*     JSString *str; */ 
779: /* MUTANT (del_stmt) */ /*     str = js_ValueToString(cx, v); */ 
780: /* MUTANT (negate) */    if(! (!str))
782: /* MUTANT (del_stmt) */ /*     return js_AtomizeString(cx, str, 0); */ 
782: /* MUTANT (rep_const) */    return js_AtomizeString(cx, str, 1);
782: /* MUTANT (rep_const) */    return js_AtomizeString(cx, str, -1);
788: /* MUTANT (del_stmt) */ /*     const JSAtom *atom = key; */ 
789: /* MUTANT (del_stmt) */ /*     return atom->number; */ 
795: /* MUTANT (del_stmt) */ /*     JSContext *cx = priv; */ 
796: /* MUTANT (del_stmt) */ /*     void *space; */ 
798: /* MUTANT (del_stmt) */ /*     JS_ARENA_ALLOCATE(space, &cx->tempPool, size); */ 
799: /* MUTANT (negate) */    if(! (!space))
801: /* MUTANT (del_stmt) */ /*     return space; */ 
812: /* MUTANT (del_stmt) */ /*     JSContext *cx = priv; */ 
813: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
815: /* MUTANT (del_stmt) */ /*     JS_ARENA_ALLOCATE_TYPE(ale, JSAtomListElement, &cx->tempPool); */ 
816: /* MUTANT (negate) */    if(! (!ale)) {
817: /* MUTANT (del_stmt) */ /*         JS_ReportOutOfMemory(cx); */ 
818: /* MUTANT (del_stmt) */ /*         return NULL; */ 
836: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale, *ale2, *next; */ 
837: /* MUTANT (del_stmt) */ /*     JSHashEntry **hep; */ 
839: /* MUTANT (del_stmt) */ /*     ATOM_LIST_LOOKUP(ale, hep, al, atom); */ 
840: /* MUTANT (negate) */    if(! (!ale)) {
841: /* MUTANT (rep_op) */        if (al->count <= 10) {
841: /* MUTANT (rep_op) */        if (al->count > 10) {
841: /* MUTANT (rep_op) */        if (al->count >= 10) {
841: /* MUTANT (rep_op) */        if (al->count == 10) {
841: /* MUTANT (rep_op) */        if (al->count != 10) {
841: /* MUTANT (rep_const) */        if (al->count < 0) {
841: /* MUTANT (rep_const) */        if (al->count < 1) {
841: /* MUTANT (rep_const) */        if (al->count < -1) {
841: /* MUTANT (rep_const) */        if (al->count < ((10)+1)) {
841: /* MUTANT (rep_const) */        if (al->count < ((10)-1)) {
841: /* MUTANT (negate) */        if(! (al->count < 10)) {
843: /* MUTANT (del_stmt) */ /*             JS_ASSERT(!al->table); */ 
844: /* MUTANT (del_stmt) */ /*             ale = (JSAtomListElement *)js_alloc_temp_entry(cx, atom); */ 
845: /* MUTANT (negate) */            if(! (!ale))
847: /* MUTANT (del_stmt) */ /*             ALE_SET_ATOM(ale, atom); */ 
848: /* MUTANT (del_stmt) */ /*             ALE_SET_NEXT(ale, al->list); */ 
849: /* MUTANT (del_stmt) */ /*             al->list = ale; */ 
852: /* MUTANT (negate) */            if(! (!al->table)) {
854: /* MUTANT (del_stmt) */ /*                 JS_ASSERT(!hep); */ 
855: /* MUTANT (rep_op) */                al->table = JS_NewHashTable(al->count - 1, js_hash_atom_ptr,
855: /* MUTANT (rep_op) */                al->table = JS_NewHashTable(al->count * 1, js_hash_atom_ptr,
855: /* MUTANT (rep_op) */                al->table = JS_NewHashTable(al->count % 1, js_hash_atom_ptr,
855: /* MUTANT (rep_const) */                al->table = JS_NewHashTable(al->count + 0, js_hash_atom_ptr,
855: /* MUTANT (rep_const) */                al->table = JS_NewHashTable(al->count + -1, js_hash_atom_ptr,
855: /* MUTANT (rep_const) */                al->table = JS_NewHashTable(al->count + ((1)+1), js_hash_atom_ptr,
858: /* MUTANT (negate) */                if(! (!al->table))
865: /* MUTANT (del_stmt) */ /*                 al->table->nentries = al->count; */ 
869: /* MUTANT (del_stmt) */ /*                     next = ALE_NEXT(ale2); */ 
870: /* MUTANT (del_stmt) */ /*                     ale2->entry.keyHash = ALE_ATOM(ale2)->number; */ 
873: /* MUTANT (del_stmt) */ /*                     ALE_SET_NEXT(ale2, *hep); */ 
874: /* MUTANT (del_stmt) */ /*                     *hep = &ale2->entry; */ 
879: /* MUTANT (del_stmt) */ /*                 hep = JS_HashTableRawLookup(al->table, atom->number, atom); */ 
885: /* MUTANT (negate) */            if(! (!ale))
889: /* MUTANT (rep_op) */        ALE_SET_INDEX(ale, al->count--);
897: /* MUTANT (del_stmt) */ /*     JSAtom *atom; */ 
898: /* MUTANT (del_stmt) */ /*     static JSAtom dummy; */ 
900: /* MUTANT (del_stmt) */ /*     JS_ASSERT(map->vector && i < map->length); */ 
900: /* MUTANT (rep_op) */    JS_ASSERT(map->vector || i < map->length);
900: /* MUTANT (rep_op) */    JS_ASSERT(map->vector && i <= map->length);
900: /* MUTANT (rep_op) */    JS_ASSERT(map->vector && i > map->length);
900: /* MUTANT (rep_op) */    JS_ASSERT(map->vector && i >= map->length);
900: /* MUTANT (rep_op) */    JS_ASSERT(map->vector && i == map->length);
900: /* MUTANT (rep_op) */    JS_ASSERT(map->vector && i != map->length);
901: /* MUTANT (rep_op) */    if (!map->vector && i >= map->length) {
901: /* MUTANT (rep_op) */    if (!map->vector || i <= map->length) {
901: /* MUTANT (rep_op) */    if (!map->vector || i < map->length) {
901: /* MUTANT (rep_op) */    if (!map->vector || i > map->length) {
901: /* MUTANT (rep_op) */    if (!map->vector || i == map->length) {
901: /* MUTANT (rep_op) */    if (!map->vector || i != map->length) {
901: /* MUTANT (negate) */    if(! (!map->vector || i >= map->length)) {
902: /* MUTANT (del_stmt) */ /*         char numBuf[12]; */ 
902: /* MUTANT (rep_const) */        char numBuf[0];
902: /* MUTANT (rep_const) */        char numBuf[1];
902: /* MUTANT (rep_const) */        char numBuf[-1];
902: /* MUTANT (rep_const) */        char numBuf[((12)+1)];
902: /* MUTANT (rep_const) */        char numBuf[((12)-1)];
903: /* MUTANT (del_stmt) */ /*         JS_snprintf(numBuf, sizeof numBuf, "%lu", (unsigned long)i); */ 
906: /* MUTANT (del_stmt) */ /*         return &dummy; */ 
909: /* MUTANT (del_stmt) */ /*     JS_ASSERT(atom); */ 
910: /* MUTANT (del_stmt) */ /*     return atom; */ 
916: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale = (JSAtomListElement *)he; */ 
917: /* MUTANT (del_stmt) */ /*     JSAtom **vector = arg; */ 
919: /* MUTANT (del_stmt) */ /*     vector[ALE_INDEX(ale)] = ALE_ATOM(ale); */ 
920: /* MUTANT (del_stmt) */ /*     return HT_ENUMERATE_NEXT; */ 
925: /* MUTANT (del_stmt) */ /* jsrefcount js_atom_map_hash_table_count; */ 
931: /* MUTANT (del_stmt) */ /*     JSAtom **vector; */ 
932: /* MUTANT (del_stmt) */ /*     JSAtomListElement *ale; */ 
933: /* MUTANT (del_stmt) */ /*     uint32 count; */ 
939: /* MUTANT (rep_op) */    if (!ale || !al->table) {
939: /* MUTANT (negate) */    if(! (!ale && !al->table)) {
940: /* MUTANT (del_stmt) */ /*         map->vector = NULL; */ 
941: /* MUTANT (del_stmt) */ /*         map->length = 0; */ 
941: /* MUTANT (rep_const) */        map->length = 1;
941: /* MUTANT (rep_const) */        map->length = -1;
942: /* MUTANT (del_stmt) */ /*         return JS_TRUE; */ 
946: /* MUTANT (rep_op) */    if (count <= ATOM_INDEX_LIMIT) {
946: /* MUTANT (rep_op) */    if (count < ATOM_INDEX_LIMIT) {
946: /* MUTANT (rep_op) */    if (count > ATOM_INDEX_LIMIT) {
946: /* MUTANT (rep_op) */    if (count == ATOM_INDEX_LIMIT) {
946: /* MUTANT (rep_op) */    if (count != ATOM_INDEX_LIMIT) {
946: /* MUTANT (negate) */    if(! (count >= ATOM_INDEX_LIMIT)) {
949: /* MUTANT (del_stmt) */ /*         return JS_FALSE; */ 
952: /* MUTANT (negate) */    if(! (!vector))
955: /* MUTANT (negate) */    if(! (al->table)) {
962: /* MUTANT (del_stmt) */ /*             vector[ALE_INDEX(ale)] = ALE_ATOM(ale); */ 
963: /* MUTANT (del_stmt) */ /*         } while ((ale = ALE_NEXT(ale)) != NULL); */ 
963: /* MUTANT (rep_op) */        } while ((ale = ALE_NEXT(ale)) == NULL);
963: /* MUTANT (negate) */        } while(! ((ale = ALE_NEXT(ale)) != NULL));
967: /* MUTANT (del_stmt) */ /*     map->vector = vector; */ 
968: /* MUTANT (del_stmt) */ /*     map->length = (jsatomid)count; */ 
969: /* MUTANT (del_stmt) */ /*     return JS_TRUE; */ 
975: /* MUTANT (negate) */    if(! (map->vector)) {
976: /* MUTANT (del_stmt) */ /*         JS_free(cx, map->vector); */ 
977: /* MUTANT (del_stmt) */ /*         map->vector = NULL; */ 
979: /* MUTANT (rep_const) */    map->length = 1;
979: /* MUTANT (rep_const) */    map->length = -1;
